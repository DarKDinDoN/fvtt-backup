{"name":"Lumières","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/sundries/lights/torch-brown-lit.webp","scope":"global","command":"if (canvas.tokens.controlled.length === 0)\n    return ui.notifications.error(\"Please select a token first\")\n\nconst defaultLight = {\n    dim: 0,\n    bright: 0,\n    angle: 360,\n    color: '#7f4a14',\n    alpha: 0.7,\n    animation: { type: '', speed: 1, intensity: 1, reverse: false },\n    coloration: 1,\n    luminosity: 0.5\n}\n\n\nconst lights = {\n    none: {\n        label: \"Aucune\",\n        data: {}\n    },\n    candle: {\n        label: \"Bougie\",\n        data: { dim: 3, bright: 1.5, animation: { type: 'torch' } }\n    },\n    eternalflame: {\n        label: \"Flamme éternelle (sort)\",\n        data: { dim: 12, bright: 6, animation: { type: 'torch' } }\n    },\n    lamp: {\n        label: \"Lampe\",\n        data: { dim: 13.5, bright: 4.5, animation: { type: 'torch' } }\n    },\n    ceramiclamp: {\n        label: \"Lampe à huile en céramique\",\n        data: { dim: 6, bright: 3, animation: { type: 'torch' } }\n    },\n    hoodedbright: {\n        label: \"Lanterne à capote (normal)\",\n        data: { dim: 18, bright: 9, animation: { type: 'torch' } }\n    },\n    hoodeddim: {\n        label: \"Lanterne à capote (couverte)\",\n        data: { dim: 0.1, bright: 0, animation: { type: 'torch' } }\n    },\n    bullseye: {\n        label: \"Lanterne sourde\",\n        data: { dim: 36, bright: 18, angle: 52.5, animation: { type: 'torch' } }\n    },\n    light: {\n        label: \"Lumière (sort)\",\n        data: { dim: 12, bright: 6, color: '', animation: { type: 'pulse', speed: 2 } }\n    },\n    torch: {\n        label: \"Torche\",\n        data: { dim: 12, bright: 6, animation: { type: 'torch' } }\n    },\n}\n\nlet applyChanges = false\n\nnew Dialog({\n    title: `Token Vision Configuration`,\n    content: `\n        <form>\n            <div class=\"form-group\">\n                <label>Light Source:</label>\n                <select id=\"light-source\" name=\"light-source\">\n                    ${(function () {\n            let html = ''\n\n            Object.entries(lights).forEach(([key, light]) => {\n                html += `\n                    <option value=\"${key}\">${light.label}</option>\n                `\n            })\n\n            return html\n        }())}\n                </select>\n            </div>\n        </form>\n    `,\n    buttons: {\n        no: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: 'Cancel Changes'\n        },\n        yes: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: 'Apply Changes',\n            callback: () => applyChanges = true\n        }\n    },\n    default: 'yes',\n    close: async html => {\n        if (applyChanges) {\n            let lightSource = html.find('[name=\"light-source\"]')[0].value\n            for (let token of canvas.tokens.controlled) {\n                const lightData = mergeObject(deepClone(defaultLight), lights[lightSource].data)\n                await token.document.update({ light: lightData })\n            }\n        }\n    }\n}).render(true)","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.WDArGoh0P7ebQw16"}},"_id":"0QtiqdFzDP9exapv"}
{"name":"Éclairages","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/sundries/lights/candle-pillar-lit-yellow.webp","scope":"global","command":"const defaultLight = {\n    dim: 0,\n    bright: 0,\n    angle: 360,\n    color: '#7f4a14',\n    alpha: 0.7,\n    darkness: { min: 0.5, max: 1 },\n    animation: { type: '', speed: 1, intensity: 1, reverse: false },\n    coloration: 1,\n    luminosity: 0.5,\n    hidden: false\n}\n\nconst lights = {\n    none: {\n        label: \"Aucune\",\n        data: {}\n    },\n    candle: {\n        label: \"Bougie\",\n        data: { dim: 3.75, bright: 2.25, animation: { type: 'torch' } }\n    },\n    eternalflame: {\n        label: \"Flamme éternelle (sort)\",\n        data: { dim: 12.75, bright: 6.75, animation: { type: 'torch' } }\n    },\n    lamp: {\n        label: \"Lampe\",\n        data: { dim: 14.5, bright: 5.25, animation: { type: 'torch' } }\n    },\n    ceramiclamp: {\n        label: \"Lampe à huile en céramique\",\n        data: { dim: 6.75, bright: 3.25, animation: { type: 'torch' } }\n    },\n    hoodedbright: {\n        label: \"Lanterne à capote (normal)\",\n        data: { dim: 18.75, bright: 9.75, animation: { type: 'torch' } }\n    },\n    hoodeddim: {\n        label: \"Lanterne à capote (couverte)\",\n        data: { dim: 0.85, bright: 0, animation: { type: 'torch' } }\n    },\n    bullseye: {\n        label: \"Lanterne sourde\",\n        data: { dim: 36.75, bright: 18.75, angle: 52.5, animation: { type: 'torch' } }\n    },\n    light: {\n        label: \"Lumière (sort)\",\n        data: { dim: 12.75, bright: 6.75, color: '', animation: { type: 'pulse', speed: 2 } }\n    },\n    torch: {\n        label: \"Torche\",\n        data: { dim: 12.75, bright: 6.75, animation: { type: 'torch' } }\n    },\n}\n\nlet applyChanges = false\n\nnew Dialog({\n    title: `Map lights Configuration`,\n    content: `\n        <form>\n            <div class=\"form-group\">\n                <label>Light Source:</label>\n                <select id=\"light-source\" name=\"light-source\">\n                    ${(function () {\n            let html = ''\n\n            Object.entries(lights).forEach(([key, light]) => {\n                html += `\n                                <option value=\"${key}\">${light.label}</option>\n                            `\n            })\n\n            return html\n        }())}\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"turn-on-off\">Switch turn on / off</label>\n                <input type=\"checkbox\" name=\"turn-on-off\" id=\"turn-on-off\">\n            </div>\n        </form>\n    `,\n    buttons: {\n        no: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: 'Cancel Changes'\n        },\n        yes: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: 'Apply Changes',\n            callback: () => applyChanges = true\n        }\n    },\n    default: 'yes',\n    close: async html => {\n        if (applyChanges) {\n            const lightSource = html.find('[name=\"light-source\"]')[0].value\n            const turnOnOff = html.find('[name=\"turn-on-off\"]')[0].checked || false\n            for (let light of canvas.lighting.objects.children) {\n                if (turnOnOff === true) {\n                    await light.document.update({ hidden: !light.data.hidden })\n                } else {\n                    const lightData = mergeObject(deepClone(defaultLight), lights[lightSource].data)\n                    await light.document.update({ config: lightData })\n                }\n            }\n        }\n    }\n}).render(true)","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.dCZqAu4wSTc9OoCJ"}},"_id":"2E9Pyi6hi4gSgc8E"}
{"name":"Disposition du token","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/skills/social/diplomacy-handshake.webp","scope":"global","command":"// Token(s) selected\n\nif (canvas.tokens.controlled.length < 1) return ui.notifications.warn(\"No Token selected\")\n\nlet applyChanges = false\nlet tokens = canvas.tokens.controlled\nlet disposition\n\nnew Dialog({\n    title: `Disposition du token`,\n    content: `\n        <style>\n            #DDChangeTokenDisposition .dialog-content .header {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                font-weight: bold;\n                margin-bottom: 10px;\n            }\n\n            #DDChangeTokenDisposition .dialog-content .question {\n                text-align: center;\n                font-style: italic;\n                margin-bottom: 10px;\n            }\n\n            #DDChangeTokenDisposition .dialog-content form {\n                margin-bottom: 10px;\n            }\n\n            #DDChangeTokenDisposition .dialog-content .token {\n                display: flex;\n                align-items: center;\n                margin-bottom: 2px;\n            }\n\n            #DDChangeTokenDisposition .dialog-content .token:last-child {\n                margin-bottom: 10px;\n            }\n        </style>\n\n        <div class=\"header\">\n            <img src=\"icons/skills/social/diplomacy-handshake.webp\" width=\"36\" height=\"36\"/>&nbsp;&nbsp;&nbsp;\n            <div>Changer la disposition des tokens</div>\n        </div>\n\n        <form>\n            <div class=\"form-group\">\n                <label for=\"other-tokens\">Modifier les tokens de cette scène ?</label>\n                <input type=\"checkbox\" name=\"other-tokens\" id=\"other-tokens\" checked>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"prototype-token\">Modifier les tokens de <b>toutes</b> les scènes et de l'acteur ?</label>\n                <input type=\"checkbox\" name=\"prototype-token\" id=\"prototype-token\">\n            </div>\n        </form>\n        \n        ${tokens.map(t => `<div class=\"token\"><img src=\"${t.data.img}\" width=\"24\" height=\"24\"/>&nbsp;${t.data.name} (${t.data.actorLink ? 'lié' : 'non-lié'})</div>`).join('')}\n    `,\n    buttons: {\n        hostile: { \n            label: `Hostile`,\n            callback: () => {\n                applyChanges = true\n                disposition = CONST.TOKEN_DISPOSITIONS.HOSTILE\n            }\n        },\n        neutral: { \n            label: `Neutre`,\n            callback: () => {\n                applyChanges = true\n                disposition = CONST.TOKEN_DISPOSITIONS.NEUTRAL\n            }\n        },\n        friendly: { \n            label: `Amical`,\n            callback: () => {\n                applyChanges = true\n                disposition = CONST.TOKEN_DISPOSITIONS.FRIENDLY\n            }\n        }\n    },\n    default: \"friendly\",\n    close: async html => {\n        if (applyChanges) {\n            const otherTokens = html.find('[name=\"other-tokens\"]')[0].checked || false\n            const prototypeToken = html.find('[name=\"prototype-token\"]')[0].checked || false\n            const actorsProcessed = []\n\n            tokens.reduce(async (promise, t) => {\n                await promise\n\n                const prototypeActor = game.actors.get(t.data.actorId)\n                if ((prototypeToken || otherTokens) && actorsProcessed.includes(prototypeActor.data._id)) return\n\n                if (prototypeToken) {\n                    await prototypeActor.update({'token.disposition': disposition})\n\n                    const scenesWithTokens = await game.scenes.filter(s => s.tokens.filter(t => t.data.actorId === prototypeActor.data._id))\n                    for (let s of scenesWithTokens) {\n                        const tokensToUpdate = await s.tokens.filter(t => t.data.actorId === prototypeActor.data._id)\n\n                        for (let t of tokensToUpdate) {\n                            await t.update({ disposition })\n                        }\n                    }\n                } else if (otherTokens) {\n                    const tokensToUpdate = await prototypeActor.getActiveTokens(false, true)\n\n                    for (let t of tokensToUpdate) {\n                        await t.update({ disposition })\n                    }\n                } else {\n                    await t.update({ disposition })\n                }\n                \n                actorsProcessed.push(prototypeActor.data._id)\n            }, Promise.resolve())\n        }\n    }\n}, {\n    id: 'DDChangeTokenDisposition'\n}).render(true)","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.GSIBdYciQb0UADyy"}},"_id":"3i6X5bPCkyIT8dBQ"}
{"name":"_Delete Missing Links","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"tokenAttacher.deleteMissingLinks()","folder":null,"sort":0,"permission":{"default":0,"El5JYRyNAovcZ1JK":3,"3UjVNZPJLHwgrlkI":3},"flags":{"core":{"sourceId":"Macro.B0KxxJfRpqWy7UiO"},"combat-utility-belt":{"macroTrigger":""}},"_id":"5YkW0EDzraA2oZSP"}
{"name":"CUB-Exhausted","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"if (args[0] == \"on\") {\n    var exNew = args[1].efData.label\n    const levels = [\"Fatigue 1\",\"Fatigue 2\",\"Fatigue 3\",\"Fatigue 4\",\"Fatigue 5\"]\n    \n    for(const ex of levels){\n        if ((ex != exNew) && (game.cub.hasCondition(ex))){\n            await game.cub.removeCondition(ex)\n        }\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.1LECiUtn1CU4VcUe"}},"_id":"5y7DuwFHdg9rYx4w"}
{"name":"openNotes","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"game.modules.get('gm-screen')?.api?.toggleGmScreenVisibility(true);","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.QzxyfrThf8a56ZCA"}},"_id":"6TWvqP3MuOhnIzge"}
{"_id":"AIOx0aIFhxsMP1Ty","name":"itemToChat","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"// args[0] => actor\n// args[1] => item\n// args[2] => { configureDialog: true } (optional)\n\nconst actorId = args[0].data._id;\nconst itemId = args[1].data._id;\nconst actorToRoll = canvas.tokens.placeables.find(t => t.actor?.id === actorId)?.actor ?? game.actors.get(actorId)\nconst itemToRoll = actorToRoll?.items.get(itemId)\n\nif (!itemToRoll) {\n  return ui.notifications.warn(game.i18n.format('DND5E.ActionWarningNoItem', { item: itemId, name: actorToRoll?.name ?? '[Not Found]' }))\n}\n\nreturn itemToRoll.roll(args[2] || {})","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.Af7ynjmAji3AsHJB"}}}
{"_id":"DSf3ol8JwblcaOEM","name":"useMultipleCharges (old)","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"// args[0] => actor\n// args[1] => item\n\nlet applyChanges = false\n\nnew Dialog({\n    title: `${args[1].data.name} (${args[0].data.name})`,\n    content: `\n        <style>\n        #DDUseMultipleCharges .dialog-content .header {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-weight: bold;\n            margin-bottom: 10px;\n        }\n\n        #DDUseMultipleCharges .dialog-content .question {\n            text-align: center;\n            font-style: italic;\n            margin-bottom: 10px;\n        }\n        #DDUseMultipleCharges .dialog-content form {\n            margin-bottom: 10px;\n        }\n\n        #DDUseMultipleCharges .dialog-content form .form-fields input {\n            flex: auto;\n        }\n        </style>\n\n        <div class=\"header\">\n            <img src=\"${args[1].data.img}\" width=\"36\" height=\"36\"/>&nbsp;&nbsp;&nbsp;\n            <div>${args[1].data.name}</div>\n        </div>\n\n        <div class=\"question\">Combien de charges de \"${args[1].data.name}\" souhaitez-vous utiliser ?</div>\n\n        <form>\n            <div class=\"form-group\">\n                <div class=\"form-fields\">\n                    <input type=\"range\" id=\"uses\" name=\"uses\" value=\"${args[1].data.data.uses.value}\" min=\"1\" max=\"${args[1].data.data.uses.value}\" step=\"1\" oninput=\"updateUsesValue(this.value)\">\n                    <span id=\"uses-value\" class=\"range-value\">${args[1].data.data.uses.value}</span>\n                    /&nbsp;\n                    <span>${args[1].data.data.uses.value}</span>\n                </div>\n            </div>\n        </form>\n\n        <script>\n            function updateUsesValue(val) {\n                document.getElementById(\"uses-value\").innerHTML = val\n            }\n        </script>\n    `,\n    buttons: {\n        cancel: { \n            icon: \"<i class='fas fa-times'></i>\",\n            label: `Annuler`\n         },\n        use: { \n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Utiliser`,\n            callback: () => applyChanges = true\n         }\n    },\n    default: \"use\",\n    close: async html => {\n        if (applyChanges) {\n            const uses = args[1].data.data.uses.value === 0 ? 0 : parseInt(html.find('[name=\"uses\"]')[0].value)\n            await args[1].update({ 'data.uses.value': args[1].data.data.uses.value - uses })\n\n            const chatMessage = await game.macros.getName('itemToChat').execute(args[0], args[1])\n            const chatHtml = $(chatMessage.data.content)\n            chatHtml.find('footer').before(`\n                <div class=\"dice-roll red-dual\">\n                    <div class=\"dice-result\">      \n                        <div class=\"dice-row\">\n                            <h4 class=\"dice-total dice-row-item red-damage\">\n                                <div class=\"red-base-die inline red-base-damage\" data-value=\"${uses}\">${uses}</div>\n                                <div class=\"damage-type\" style=\"line-height:12px\">Charges</div>\n                            </h4>\n                            <div class=\"die-result-overlay-br damage-overlay-br\" style=\"display: none;\">\n                                <span>\n                                    <span class=\"apply-damage-buttons\" style=\"display: none;\">\n                                        <button data-modifier=\"-1\" class=\"icon heart-plus\" title=\"Appliquer les soins aux tokens sélectionnés.\">\n                                        </button>\n                                    </span>\n                                </span>\n                                <span class=\"apply-damage-buttons\" style=\"display: none;\">\n                                    <button data-modifier=\"1\" title=\"Appliquer les dégâts aux tokens sélectionnés.\">\n                                        <i class=\"fas fa-user-minus\"></i>\n                                    </button>\n                                    <button data-modifier=\"0.25\" title=\"Click to apply quarter damage to selected token(s).\">\n                                        <i class=\"fas fa-user-check\"></i>\n                                    </button>\n                                    <button data-modifier=\"0.5\" title=\"Appliquer la moitié des dégâts aux tokens sélectionnés.\">\n                                        <i class=\"fas fa-user-shield\"></i>\n                                    </button>\n                                    <button data-modifier=\"2\" title=\"Appliquer le double des dégâts aux tokens sélectionnés.\">\n                                        <i class=\"fas fa-user-injured\"></i>\n                                    </button>\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `)\n            await chatMessage.update({ 'content': chatHtml[0].outerHTML })\n        }\n    }\n}, {\n    id: 'DDUseMultipleCharges'\n}).render(true)","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.lg9bxmTSVjTXEzCk"}}}
{"name":"_searchItem","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"const effects = ['aveuglé', 'charmé', 'concentré', 'assourdi', 'fatigue', 'terrorisé', 'empoigné', 'neutralisé', 'invisible', 'paralysé', 'pétrifié', 'empoisonné', 'a terre', 'entravé', 'etourdi', 'inconscient', 'mort', 'engourdi', 'possédé', 'repoussé', 'surpris']\n\nconst search = i => typeof(i.hasMacro) === 'function' && i.hasMacro()\n\nconsole.log('-------------------------------------------------')\nconsole.log('--------------------- ACTORS --------------------')\nconsole.log('-------------------------------------------------')\nawait Promise.all(game.actors.map(a => {\n    const items = a.items.filter(search)\n    if (items) {\n        items.forEach(i => console.log(`----> Actor: ${a.name} - Item: ${i.name}`))\n    }\n}))\n\n\nconsole.log('-------------------------------------------------')\nconsole.log('--------------------- ITEMS ---------------------')\nconsole.log('-------------------------------------------------')\nconst items = game.items.filter(search)\nif (items) {\n    items.forEach(i => console.log(`----> Item: ${i.folder?.name ? i.folder?.name : 'root'} - Item: ${i.name}`))\n}\n\n\nconsole.log('-------------------------------------------------')\nconsole.log('--------------------- PACKS ---------------------')\nconsole.log('-------------------------------------------------')\nconst packKeys = game.packs.keys()\nawait Promise.all(game.packs.map(async p => {\n    if (!packKeys.next().value.startsWith('world.')) return\n\n    const packContent = await p.getDocuments()\n    const items = packContent.filter(search)\n    if (items) {\n        items.forEach(i => console.log(`----> Compendium: ${p.collection} - Item: ${i.name}`))\n    }\n}))","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.dqQcRebbxbJp62xp"}},"_id":"EcCUjFeW82gVMP7q"}
{"_id":"MfDPqErnmOhCfmfx","name":"openNotes (old)","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"const note = await game.journal.getName(\"Acte I\")\nnote.sheet.render(true)","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.QzxyfrThf8a56ZCA"}}}
{"name":"Effets Sequencer","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/magic/movement/trail-streak-zigzag-yellow.webp","scope":"global","command":"Sequencer.EffectManager.show()","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.k5PbXRzqcSyqfxbf"}},"_id":"SCSTWR8idFVzRY5e"}
{"name":"effectOverTime","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"// args[0] => each/on/off\n// args[1] => options|array [\"save\", \"save[type|dc?]\", \"damage\", \"damage[formula|type]\", \"aura\" (optional)\n// args[last] => origin object\n\nclass DDEffectOverTime {\n\n    static async build(args) {\n        const repeat = args[0]\n\n        const options = []\n        for (let index = 1; index < args.length - 1; index++) {\n            if (typeof args[index] === 'string') options.push(args[index])\n        }\n\n        const save = options.includes('save')\n        let customSave = options.filter(s => /^save\\[(.*?)\\|?([0-9]+)?\\]$/.test(s))\n        customSave = customSave.length > 0 ? customSave : false\n        const damage = options.includes('damage')\n        let customDamage = options.filter(s => /^damage\\[(.+d?.+)\\|(.+)\\]$/.test(s))\n        customDamage = customDamage.length > 0 ? customDamage : false\n        const aura = options.includes('aura')\n        const auraEach = options.includes('auraEach')\n        let spellLevel = options.filter(s => /^level([0-9])$/.test(s))\n        spellLevel = spellLevel.length > 0 ? spellLevel : false\n\n        const actorUuid = args[args.length - 1].actorUuid\n        const originUuid = args[args.length - 1].origin\n\n        let originActor, originToken, originItem\n\n        // Linked actor\n        if (originUuid.match(/Actor\\.(.+)\\.Item.+/)) {\n            originActor = await game.actors.get(originUuid.match(/Actor\\.(.+)\\.Item.+/)[1])\n            originToken = await originActor.getActiveTokens()[0]\n            originItem = await originActor.items.get(originUuid.match(/Actor\\..+\\.Item\\.(.+)/)[1])\n        } else {\n            // Unliked actor\n            originToken = await canvas.tokens.get(originUuid.match(/.+Token\\.(.+)\\.Item.+/)[1])\n            originActor = originToken?.actor || game.actors.find(a => a.items.get(originUuid.match(/.+Token\\..+\\.Item\\.(.+)/)[1]))\n            originItem = await originActor.items.get(originUuid.match(/.+Token\\..+\\.Item\\.(.+)/)[1])\n        }\n\n        const actor = await game.actors.get(args[args.length - 1].actorId)\n        const token = await canvas.tokens.get(args[args.length - 1].tokenId)\n\n        return new this({ repeat, save, customSave, damage, customDamage, aura, auraEach, spellLevel, actorUuid, originUuid, originActor, originToken, originItem, actor, token })\n    }\n\n    constructor(options = {}) {\n        Object.assign(this, options)\n        this.createHook()\n    }\n\n    createHook() {\n        if (window.DDEffectOverTime?.renderChatMessageHookID) return\n\n        const hookID = Hooks.on('renderChatMessage', (message, html) => {\n            html.find('.DDEffectOverTime .card-buttons button[data-action=\"delete-effect\"]').click(e => {\n                e.preventDefault();\n                e.stopPropagation();\n                const button = event.currentTarget\n                window.DAE.deleteActiveEffect(button.dataset.actor, button.dataset.origin)\n            })\n\n            html.find('.DDEffectOverTime .card-buttons button[data-action=\"save\"]').click(async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                const button = event.currentTarget\n                const targets = canvas.tokens.controlled.filter(t => !!t.actor);\n                for (let token of targets) {\n                    const speaker = ChatMessage.getSpeaker({ scene: canvas.scene, token });\n                    await token.actor.rollAbilitySave(button.dataset.ability, { speaker });\n                }\n            })\n\n            html.find('.DDEffectOverTime .card-header.flexrow img').click(async e => {\n                e.preventDefault();\n                e.stopPropagation();\n                const img = event.currentTarget\n                const actor = await game.actors.get(img.dataset.actorid)\n                if (!actor) return\n                const token = actor.getActiveTokens().find(t => t.data._id === img.dataset.tokenid)\n                token.control()\n                canvas.animatePan({ x: token.data.x, y: token.data.y })\n            })\n        })\n\n        window.DDEffectOverTime = { renderChatMessageHookID: hookID }\n    }\n\n    _buildHeader() {\n        return `\n            <header class=\"card-header flexrow\">\n                <img data-tokenid=\"${this.token.data._id}\" data-actorid=\"${this.actor.data._id}\" src=\"${this.token.data.img}\" width=\"36\" height=\"36\"/>\n                <h3 class=\"item-name\">${this.token.data.name}</h3>\n                <img ${this.originToken ? `data-tokenid=\"${this.originToken.data._id}\" data-actorid=\"${this.originActor.data._id}\" title=\"${this.originActor.data.name} (${this.originToken.data.name})\"` : null}  src=\"${this.originItem.img}\" width=\"36\" height=\"36\"/>\n            </header>\n        `\n    }\n\n    _buildDescription() {\n        return `\n            <div><b>${this.originItem.data.name} (${this.originActor.data.name})</b></div>\n            <div class=\"card-content\" style=\"display: none;\">\n                <p>${this.originItem.data.data.description.value}</p>\n            </div>\n        `\n    }\n\n    async _buildDamage() {\n        if (!this.damage && !this.customDamage) return ['', []]\n        if (this.damage && this.originItem.data.data.damage.parts.length < 1) return ['', []]\n\n\n        let html = ''\n        let damagesRolls = []\n        let damageParts\n\n        if (this.damage) {\n            damageParts = this.originItem.data.data.damage.parts\n        } else {\n            const damageDetail = new RegExp(/^damage\\[(.+d?.+)\\|(.+)\\]$/).exec(this.customDamage[0])\n            damageParts = [[damageDetail[1].replaceAll('&', '+'), damageDetail[2]]]\n        }\n\n        // For each damage formula\n        await damageParts.reduce(async (promise, part, index) => {\n            await promise\n\n            let formula = [part[0]]\n\n            // Scale damage from up-casting spells\n            if (index === 0 && this.damage) {\n                if (this.originItem.data.type === 'spell') {\n                    if (this.originItem.data.data.scaling.mode === 'cantrip') {\n                        let level\n                        if (this.originActor.type === 'character') level = this.originActor.data.data.details.level\n                        else if (this.originItem.data.data.preparation.mode === 'innate') level = Math.ceil(this.originActor.data.data.details.cr)\n                        else level = this.originActor.data.data.details.spellLevel\n                        this.originItem._scaleCantripDamage(formula, this.originItem.data.data.scaling.formula, level, this.originItem.getRollData())\n                    }\n                    else if (this.originItem.data.data.level && (this.originItem.data.data.scaling.mode === 'level') && this.originItem.data.data.scaling.formula && this.spellLevel) {\n                        const spellLevel = parseInt(new RegExp(/^level([0-9])$/).exec(this.spellLevel[0])[1])\n                        this.originItem._scaleSpellDamage(formula, this.originItem.data.data.level, spellLevel, this.originItem.data.data.scaling.formula, this.originItem.getRollData())\n                    }\n                }\n            }\n            formula = formula[0]\n\n            const damagesRoll = await new Roll(`${Roll.replaceFormulaData(`${formula}`, this.originActor.data.data)}`).roll({ async: true })\n            damagesRolls.push(damagesRoll)\n\n            // For each damage expression\n            let dicePart = ''\n            damagesRoll.dice.forEach(die => {\n                let diceDetail = ''\n\n                // For each damage die\n                die.results.forEach(r => {\n                    diceDetail += `<li class=\"roll die d${die.faces} ${r.result === die.faces ? 'max' : r.result === 1 ? 'min' : ''}\">${r.result}</li>`\n                })\n\n                dicePart += `\n                    <div class=\"dice-tooltip\">\n                        <section class=\"tooltip-part\">\n                            <div class=\"dice\">\n                                <ol class=\"dice-rolls\">\n                                    ${diceDetail}\n                                </ol>\n                            </div>\n                        </section>\n                    </div>\n                `\n            })\n\n            // Localize damage type\n            let toLocalize = part[1].charAt(0).toUpperCase() + part[1].slice(1)\n            const localizationPrefix = toLocalize === 'Healing' || toLocalize === 'Temphp' ? 'DND5E.' : 'DND5E.Damage'\n            if (toLocalize === 'Temphp') toLocalize = 'HealingTemp'\n            const localizedDamagePart = game.i18n.localize(localizationPrefix + toLocalize)\n\n\n            html += `\n                <div class=\"card-roll formula-group\">\n                    <div class=\"dice-roll\">\n                        <div class=\"dice-result\">\n                            <div class=\"dice-formula\">${damagesRoll.formula}</div>\n                            ${dicePart}\n                            <h4 class=\"dice-total\">\n                                ${damagesRoll.total}\n                                <div style=\"margin-bottom: 0.25rem;font-size: .8rem;line-height: .8rem;font-weight: normal;\">${localizedDamagePart}</div>\n                            </h4>\n                        </div>\n                    </div>\n                </div>\n            `\n        }, Promise.resolve())\n\n        return [html, damagesRolls]\n    }\n\n    _buildSave() {\n        if (!this.save && !this.customSave) return ''\n        if (this.save && !this.originItem.data.data.save?.ability) return ''\n\n        let saveValue, saveType, saveLocalized\n\n        if (this.save) {\n            saveValue = this.originItem.data.data.save.dc\n            saveType = this.originItem.data.data.save.ability\n            saveLocalized = game.i18n.localize(\"DND5E.Ability\" + this.originItem.data.data.save.ability.charAt(0).toUpperCase() + this.originItem.data.data.save.ability.slice(1))\n        } else {\n            const saveDetail = new RegExp(/^save\\[(.*?)\\|?([0-9]+)?\\]$/).exec(this.customSave[0])\n            saveValue = saveDetail[2] ? parseInt(saveDetail[2]) : this.originItem.data.data.save.dc\n            saveType = saveDetail[1]\n            saveLocalized = game.i18n.localize(\"DND5E.Ability\" + saveDetail[1].charAt(0).toUpperCase() + saveDetail[1].slice(1))\n        }\n\n        return `\n            <button data-action=\"save\" data-ability=\"${saveType}\">\n                Jet de sauvegarde DD ${saveValue} ${saveLocalized}\n            </button>\n        `\n    }\n\n    _buildDeleteEffect() {\n        if (!window.DAE) return ''\n\n        return `\n            <button data-action=\"delete-effect\" data-actor=\"${this.actorUuid}\" data-origin=\"${this.originUuid}\">\n                Supprimer l'effet\n            </button>\n        `\n    }\n\n    async sendChatMessage() {\n        if (this.repeat === 'off') return\n        if (this.repeat === 'on' && (!this.aura || this.auraEach)) return\n        if (this.aura && this.actor.data._id === this.originActor.data._id) return\n        //if (this.aura && this.token.data._id !== game.combats.active.current.tokenId) return\n\n        const header = this._buildHeader()\n        const description = this._buildDescription()\n        const damages = await this._buildDamage()\n        const save = this._buildSave()\n        const deleteEffect = this._buildDeleteEffect()\n\n        const content = `\n            <div class=\"dnd5e chat-card item-card DDEffectOverTime\">\n                ${header}\n                ${description}\n                ${damages[0]}\n                <div class=\"card-buttons\" style=\"margin: 5px 0;\">\n                    ${save}\n                    ${deleteEffect}\n                <div>\n            <div>\n        `\n\n        let chatData = {\n            user: game.user._id,\n            speaker: ChatMessage.getSpeaker(this.originToken),\n            content\n        }\n\n        if (this.damage || this.customDamage) {\n            chatData.type = CONST.CHAT_MESSAGE_TYPES.ROLL\n            chatData.roll = Roll.fromTerms([PoolTerm.fromRolls(damages[1])])\n        }\n\n        if (!this.originActor.hasPlayerOwner) {\n            chatData.whisper = [game.user._id]\n        } else {\n            chatData.rollMode = CONST.DICE_ROLL_MODES.PUBLIC\n        }\n\n        const chatMessage = await ChatMessage.create(chatData, {})\n    }\n\n}\n\nconst effectOverTime = await DDEffectOverTime.build(args)\neffectOverTime.sendChatMessage()","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.40aOjhuUgHyddmat"}},"_id":"TxFTBXyiMUM17fFW"}
{"_id":"UjsYDmMFQbxMNAx7","name":"placeToken (old)","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"// args[0] => placeable name\n// args[1] => actor\n// args[2] => item\n// args[3] => duplicates (optional, default: 1)\n// args[4] => roll item (default: true)\n// args[5] => placeable data (optional)\n// args[6] => placeable items data (optional)\n\nif(args[4] !== false) await game.macros.getName('itemToChat').execute(args[1], args[2])\n\nconst duplicates = args[3] || 1\nconst placeableData = args[5] || {}\nconst placeableItemsData = args[6] || {}\n\nconst placeToken = await warpgate.buttonDialog({\n    title: `Placer un token ?`,\n    content: `Souhaitez-vous créer un token \"${args[2].data.name}\" sur la carte ?`,\n    buttons: [{type: 'button', label: 'Placer token ?', value: true }, { type: 'button', label: 'Annuler', value: false}]\n})\n\nif (placeToken) {\n    await warpgate.spawn(\n        args[0],\n        {\n            token: {name: `${args[2].data.name} (${args[1].data.name})`},\n            actor: placeableData,\n            item: placeableItemsData\n        },\n        {},\n        {controllingActor: actor, duplicates: parseInt(duplicates)}\n    )\n}","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.dn8dsKaUBJ1FRNGq"}}}
{"_id":"VRIA3pJn2eK0Ito7","name":"placePrefab (old)","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"// args[0] => prefab name\n// args[1] => actor\n// args[2] => item\n\nconst hookId = Hooks.once(\"createMeasuredTemplate\", (template) => {\n    const prefab = game.actors.find(a => a.data.name === args[0])\n    const x = template.data.x - canvas.grid.size / 2 - canvas.grid.size * template.data.distance / 2\n    const y = template.data.y - canvas.grid.size / 2 - canvas.grid.size * template.data.distance / 2\n    canvas.scene.createEmbeddedDocuments(\"Token\", [{ ...prefab.data.token, name: `${prefab.data.name} (${args[1].data.name})`, x, y }]);\n})\n\nsetTimeout(() => Hooks.off('createMeasuredTemplate', hookId), 15000);\n\nawait game.macros.getName('itemToChat').execute(args[1], args[2])","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.oval71R99l5zumvp"}}}
{"_id":"WAtf65fcnRCxJMx1","name":"selectEffect (old)","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"// args[0] => each/on/off\n// args[1] => number of effects\n// args[...] => buttons keys & values\n// args[last] => origin object\n\n// ------> Once effect is applied\nHooks.once('applyActiveEffect', async actor => {\n    // ------> Args\n    const repeat = args[0]\n    if (repeat !== 'on') return\n\n    const numberOfEffects = args[1]\n\n    const options = []\n    const termsRegex = /(.+)\\{(.+)\\}/\n    for (let index = 2; index < args.length - 1; index++) {\n        if (typeof args[index] === 'string') {\n            if (termsRegex.test(args[index])) {\n                const terms = args[index].match(termsRegex)\n                options.push({\n                    label: terms[1],\n                    keys: terms[2].split(',')\n                })\n            } else {\n                options.push({\n                    label: args[index],\n                    keys: [index - 2]\n                })\n            }\n        }\n    }\n\n    const daeObject = args[args.length - 1]\n\n    // ------> Dialog to choose effect(s)\n    const selectionDialog = new Promise((resolve, reject) => {\n        const dialogButtons = {}\n        options.forEach((option, index) => {\n            dialogButtons[`${index}`] = {\n                label: option.label,\n                callback: () => resolve(option.keys)\n            }\n        })\n\n        const d = new Dialog({\n            title: `Sélectionner un effet : ${actor.data.name}`,\n            content: `\n            <style>\n                .select-effect .dialog-buttons {\n                    flex-direction: column !important;\n                }\n            </style>\n        `,\n            buttons: dialogButtons,\n            close: html => resolve([]),\n        }, { classes: ['dialog', 'select-effect'] }).render(true)\n    })\n\n    const userSelection = await selectionDialog\n\n    // ------> Target actor\n    const tokenOrActor = await fromUuid(daeObject.actorUuid)\n    const targetActor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor\n\n    const effect = targetActor.effects.find(e => e.data.origin === daeObject.origin && e.data.changes?.some(c => c.value.includes('selectEffect')))\n\n    // ------> Apply changes\n    const changes = []\n    if (userSelection.length > 0) {\n        effect.data.changes.forEach(async (change, index) => {\n            if (userSelection.includes(String(index))) changes.push(deepClone(change))\n            \n            if (change.key === 'macro.CUB' && !userSelection.includes(String(index))) {\n                const CUBeffect = actor.effects.find(e => e.data.label === change.value)\n                if (CUBeffect) {\n                    setTimeout(async () => {\n                        await CUBeffect.delete()\n                    }, 500);\n                }\n            }\n        })\n\n        await effect.update({ changes })\n    } else {\n        effect.data.changes.forEach(async (change, index) => {\n            if (change.key === 'macro.CUB') {\n                const CUBeffect = actor.effects.find(e => e.data.label === change.value)\n                if (CUBeffect) await CUBeffect.delete()\n            }\n        })\n\n        await effect.delete()\n    }\n})","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":true},"core":{"sourceId":"Macro.NWrCyFmdnI5g35W2"}}}
{"name":"Récupérer des munitions","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/weapons/ammunition/arrows-fletching.webp","scope":"global","command":"let applyChanges = false;\nnew Dialog({\n  title: `Récupérer des munitions`,\n  content: `\n    <style>\n    #DDAmmoCheck .dialog-content .header {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-weight: bold;\n        margin-bottom: 10px;\n    }\n\n    #DDAmmoCheck .dialog-content .question {\n        text-align: center;\n        font-style: italic;\n        margin-bottom: 10px;\n    }\n    #DDAmmoCheck .dialog-content form {\n        margin-bottom: 10px;\n    }\n\n    #DDAmmoCheck .dialog-content form .form-fields input {\n        flex: auto;\n    }\n    </style>\n\n    <div class=\"header\">\n        <img src=\"icons/weapons/ammunition/arrows-fletching.webp\" width=\"36\" height=\"36\"/>&nbsp;&nbsp;&nbsp;\n        <div>Récupérer des munitions</div>\n    </div>\n\n    <div class=\"question\">Combien de munitions avez-vous dépensé ?</div>\n\n    <form>\n      <div class=\"form-group\">\n        <div class=\"form-fields\">\n          <input type=\"range\" id=\"ammo\" name=\"ammo\" value=\"1\" min=\"1\" max=\"20\" step=\"1\" oninput=\"updateRangeAmmo(this.value);\">\n          <span id=\"ammo-value\" class=\"range-value\">1</span>\n        </div>\n      </div>\n    </form>\n    <script>\n      function updateRangeAmmo(val) {\n          document.getElementById(\"ammo-value\").innerHTML = val\n      }\n    </script>\n    `,\n  buttons: {\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Annuler`\n    },\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Valider`,\n      callback: () => applyChanges = true\n    }\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      let ammo = parseInt(html.find('#ammo')[0].value)\n\n      let msgContent = `Nombres de munitions récupérées sur ${ammo} dépensées`\n      let diceRoll = `${ammo}d2cs2`\n      new Roll(diceRoll).toMessage({\n        flavor: msgContent\n      })\n    }\n  }\n},\n{\n  id: 'DDAmmoCheck'\n}).render(true)","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3,"smDCHl04t3XJPorJ":2,"OcWFeOWyVpu4vxi5":2,"2bmEYnUt3ofJr0Pl":2,"4DvztJi1ixGg96fy":2,"yBjp4PkzWx2HsTWB":2,"WQyaVx6ngA6iNiKp":2},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.frLIDnqmGlOuTma9"}},"_id":"YxrxFCArCWHjlIwY"}
{"name":"Blessures","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/skills/melee/blade-tip-chipped-blood-red.webp","scope":"global","command":"let applyChanges = false;\nlet dicePoolDivider = 2;\nnew Dialog({\n  title: `Calculateur de blessure`,\n  content: `\n    <style>\n      #5e-wound-calculator form .form-group .form-fields button {\n        flex: 1 !important;\n      }\n    </style>\n    <form>\n      <div class=\"form-group\">\n        <label>Nombre de dés :</label>\n        <div class=\"form-fields\">\n          <input type=\"range\" id=\"dicepool\" name=\"dicepool\" value=\"1\" min=\"1\" max=\"12\" step=\"1\" oninput=\"updateRangeDicePool(this.value);\">\n          <span id=\"range-value\" class=\"range-value\">1</span>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label>Type de dé :</label>\n        <div class=\"form-fields buttons\">\n          <button type=\"button\" class=\"button\" onclick=\"updateDiceValue(4)\">D4</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateDiceValue(6)\">D6</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateDiceValue(8)\">D8</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateDiceValue(10)\">D10</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateDiceValue(12)\">D12</button>\n          <input type=\"hidden\" id=\"dicevalue\" value=\"4\">\n        </div>\n      </div>\n    </form>\n    <script>\n      function updateDiceValue(val) {\n        document.getElementById(\"dicevalue\").value = val\n      }\n      function updateRangeDicePool(val) {\n        document.getElementById(\"range-value\").innerHTML = val\n      }\n    </script>\n    `,\n  buttons: {\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    }\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      let diceValue = parseInt(html.find('#dicevalue')[0].value);\n      let dicePool = parseInt(html.find('#dicepool')[0].value);\n      let realDicePool = 0;\n\n      if(dicePool > 1) {\n        realDicePool = Math.max(Math.floor(dicePool / dicePoolDivider), 1);\n      }\n\n      let msgContent = `Jours pour récupérer de la blessure (${dicePool}d${diceValue}) divisés par 2 sur un test de médecine de DD ${10 + diceValue} :`\n      let diceRoll = `1d${diceValue} + ${parseInt(realDicePool)}`;\n      new Roll(diceRoll).toMessage({\n        flavor: msgContent\n      });\n\n      new ChatMessage\n    }\n  }\n},\n{\n  id: '5e-wound-calculator'\n}).render(true)","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"core":{"sourceId":"Macro.hIm4fthEPiHxlDm4"}},"_id":"eqS8hcykckruUhCy"}
{"name":"musicLink","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/svg/dice-target.svg","scope":"global","command":"if(game.user.isGM) {\nwindow.open('https://vdo.ninja/v20/?push=DarKDinDoN&view=DarKDinDoN&videodevice=0&audiodevice=2250764c5c79c6a45fad159b85c302e3e17695d2f7c37f80447c6f0e73e27c01&stereo=1&aec=0&autogain=0&denoise=0&aj&noap&audiobitrate=320')\n} else {\nwindow.open('https://vdo.ninja/?view=DarKDinDoN&stereo=1&audiobitrate=320&noap')\n}","folder":null,"sort":0,"permission":{"default":0,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.iP8y6GL6QztIuwgO"}},"_id":"tojEOF4CCTHMGIRB"}
{"name":"Effets actifs","type":"script","author":"3UjVNZPJLHwgrlkI","img":"icons/magic/movement/chevrons-down-yellow.webp","scope":"global","command":"if (!canvas.tokens.controlled[0]?.actor) {\nui.notifications.warn(\"No Token selected\");\nreturn;\n}\nnew DAE.ActiveEffects(canvas.tokens.controlled[0].actor).render(true)","folder":null,"sort":0,"permission":{"default":0,"devnIbfBHb74U9Zv":3,"3UjVNZPJLHwgrlkI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.V3BxEbwh7WL2VXsI"}},"_id":"xKIlH628kdgAwJ25"}
