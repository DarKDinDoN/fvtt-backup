{"name":"Rage (Rage)","permission":{"default":0,"IbFFlYNqPrUsFGvN":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"loP1iPELzGcYXcWS\");","author":"IbFFlYNqPrUsFGvN","img":"systems/pf2e/icons/features/classes/rage.webp","actorIds":[],"_id":"20Umz4nwjlWpcEkQ"}
{"name":"Poison de vouivre (Wyvern Poison)","type":"script","author":"IbFFlYNqPrUsFGvN","img":"systems/pf2e/icons/equipment/alchemical-items/alchemical-poisons/wyvern-poison.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"yPwHOJfBiEILoyjk\");","folder":null,"sort":0,"permission":{"default":0,"IbFFlYNqPrUsFGvN":3},"flags":{"pf2e":{"itemMacro":true}},"_id":"6ZaAE2PJ2wsU5oIy"}
{"name":"Frappe: Faux de frappe sanglante +2","type":"script","author":"IbFFlYNqPrUsFGvN","img":"icons/weapons/sickles/scythe-wrapped-worn-red.webp","scope":"global","command":"game.pf2e.rollActionMacro('fLG2BoMShU6nBhdA', 0, \"Faux de frappe sanglante +2\")","folder":null,"sort":0,"permission":{"default":0,"IbFFlYNqPrUsFGvN":3},"flags":{"pf2e":{"actionMacro":true}},"_id":"6vQFkriSnT0uNHSh"}
{"_id":"9yvei6tNfkwcKNLL","name":"Charge soudaine","permission":{"default":0,"IbFFlYNqPrUsFGvN":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"FL2r5s37N7uhSCxr\");","author":"IbFFlYNqPrUsFGvN","img":"systems/pf2e/icons/features/feats/feats.webp","actorIds":[]}
{"_id":"C3VYjDnK0LyPdsd4","name":"Création de gabarits","type":"script","author":"amdu4xTh7PPZZgSP","img":"icons/template.jpg","scope":"global","command":"let applyChanges = false\nnew Dialog({\n  title: `Création de gabarits pour PF2`,\n  content: `\n    <style>\n      #pf2-template-creator header {\n        border-radius: 0;\n        background: linear-gradient(90deg, var(--secondary) 0%, #202b93 50%, var(--secondary) 100%);\n        border: none;\n        box-shadow: inset 0 0 0 1px #9f725b,inset 0 0 0 2px var(--tertiary),inset 0 0 0 3px #956d58;\n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n      #pf2-template-creator .window-content {\n        background-image: url(systems/pf2e/assets/sheet/red_bg.webp);\n        background-size: cover;\n        padding: 9px;\n        background-origin: border-box;\n        color: #ffefbd;\n        border-width: 9px;\n        border-image: url(systems/pf2e/assets/sheet/corner-box.webp) 9 repeat;\n        border-style: solid;\n        border-image-outset: 0;\n      }\n      #pf2-template-creator form {\n        margin-bottom: 20px;\n      }\n      #pf2-template-creator .form-fields.buttons {\n        justify-content: flex-start !important;\n      }\n      #pf2-template-creator .button {\n        flex: 1 !important;\n        border-width: 9px;        \n        border-image: url(systems/pf2e/assets/sheet/corner-box.webp) 9 repeat;\n        font-size: 12px;\n        padding: 0;\n        background: #171f69;\n        color: #ffefbd;\n        cursor: pointer;\n      }\n      #pf2-template-creator .button:hover {\n        box-shadow: 0 0 8px white;\n      }\n      #pf2-template-creator .radios input[type=\"radio\"] {\n        opacity: 0;\n        position: fixed;\n        width: 0;\n      }\n      #pf2-template-creator .radios label {\n        cursor: pointer;\n        display: flex;\n        flex: 1 !important;\n        margin: -2px 0;\n        background: rgba(0, 0, 0, 0.1);\n        border: 2px groove #f0f0e0;\n        width: 100%;\n        border-radius: 3px;\n        font-size: 13px;\n        font-family: \"Signika\", sans-serif;\n        justify-content: center;\n        align-items: center;\n        background: #171f69;\n        color: #ffefbd;\n        border-width: 9px;\n        border-image: url(systems/pf2e/assets/sheet/corner-box.webp) 9 repeat;\n      }\n      #pf2-template-creator .radios label i {\n        margin-right: 5px;\n        color: #ffefbd;\n        background: #171f69;\n      }\n      #pf2-template-creator .radios label:hover {\n        box-shadow: 0 0 8px white;\n      }\n      #pf2-template-creator .radios input[type=\"radio\"]:checked + label {\n        background: rgba(0, 0, 0, 0.2);\n      }\n      #pf2-template-creator .dialog-buttons {\n        align-items: flex-end;\n      }\n      #pf2-template-creator .dialog-button {\n        height: 50px;\n        background: #171f69;\n        border-image: url(systems/pf2e/assets/sheet/corner-box.webp) 9 repeat;\n        color: #ffefbd;\n        border-width: 9px;\n        display: inline-flex;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n      }\n      #pf2-template-creator .notes {\n        color: #ffefbd !important;\n        flex: 0 0 100% !important;\n        font-size: 12px !important;\n        line-height: 16px !important;\n        margin: 10px 0 5px 0 !important;\n      }\n      #pf2-template-creator .notes.title {\n        border-bottom: 1px solid #f7d488;\n        font-size: 14px !important;\n        font-weight: bold;\n        margin: 20px 0 10px 0 !important;\n      }\n    </style>\n    <form>\n      <div class=\"form-group\">\n        <p class=\"notes title\">Type de gabarit :</p>\n        <div class=\"form-fields buttons radios\">\n          <input type=\"radio\" name=\"shape\" id=\"emanation\" value=\"emanation\" checked>\n          <label for=\"emanation\" onclick=\"toggleEmanationMessage(true)\"><i class=\"fas fa-dot-circle\"></i> Émanation</label>\n          <input type=\"radio\" name=\"shape\" id=\"burst\" value=\"burst\">\n          <label for=\"burst\" onclick=\"toggleEmanationMessage(false)\"><i class=\"fas fa-circle\"></i> Explosion</label>\n          <input type=\"radio\" name=\"shape\" id=\"cone\" value=\"cone\">\n          <label for=\"cone\" onclick=\"toggleEmanationMessage(false)\"><i class=\"fas fa-wifi\"></i> Cône</label>\n          <input type=\"radio\" name=\"shape\" id=\"line\" value=\"line\">\n          <label for=\"line\" onclick=\"toggleEmanationMessage(false)\"><i class=\"fas fa-ruler-horizontal\"></i> Ligne</label>\n        </div>\n      </div>\n\n      <div class=\"notes\" id=\"emanation-message\">\n        ${token ? `\n          ➡️ L'émanation va être automatiquement positionnée sur le token sélectionné : ${token.data.name}.<br>\n          ${game[\"modules\"].has(\"token-attacher\") ? `➡️ Le gabarit suivra le mouvement du token.` : `⚠️ Pour que le gabarit suive automatiquement le mouvement du token, veuillez installer et activer le module \"Token-attacher\".` }\n        ` : `\n          ➡️ Pour automatiqment positionner l'émanation sur un token, veuillez relancer la macro avec un token sélectionné.\n        ` }\n      </div>\n\n      <div class=\"form-group\">\n        <p class=\"notes title\">Valeurs prédéfinies :</p>\n        <div class=\"form-fields buttons\">\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(1.5)\">1.5 m</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(3)\">3 m</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(4.5)\">4.5 m</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(6)\">6 m</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(9)\">9 m</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(18)\">18 m</button>\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(36)\">36 m</button>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n      <p class=\"notes title\">Rayon du gabarit en mètres :</p>\n      <div class=\"form-fields\">\n        <input type=\"range\" id=\"radius\" name=\"radius\" value=\"1.5\" min=\"1.5\" max=\"36\" step=\"0.5\" oninput=\"updateRangeValue(this.value);\">\n        <span id=\"range-value\" class=\"range-value\">1.5</span>\n      </div>\n      </div>\n    </form>\n    <script>\n      function toggleEmanationMessage (isVisible) {\n        document.getElementById(\"emanation-message\").style.display = isVisible ? \"block\" : \"none\"\n      }\n      function updateRadiusValue(val) {\n        document.getElementById(\"radius\").value = val\n        updateRangeValue(val)\n      }\n      function updateRangeValue(val) {\n        document.getElementById(\"range-value\").innerHTML = val\n      }\n    </script>\n  `,\n  buttons: {\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Annuler`\n    },\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Appliquer`,\n      callback: () => applyChanges = true\n    }\n  },\n  default: \"yes\",\n  close: async html => {\n    if (applyChanges) {\n\n      // Template settings\n      const templateData = {\n        user: game.user._id,\n        distance: parseFloat(html.find('[name=\"radius\"]')[0].value),\n        direction: 0,\n        x: 0,\n        y: 0,\n        fillColor: game.user.color\n      }\n\n      let templateShape = html.find('[name=\"shape\"]')\n      for (var i = 0, length = templateShape.length; i < length; i++) {\n        if (templateShape[i].checked) {\n          templateShape = templateShape[i].value\n          break\n        }\n      }\n\n      switch (templateShape) {\n        case \"cone\":\n          templateData.t = \"cone\"\n          templateData.angle = 90\n          break\n        case \"emanation\":\n          templateData.t = \"circle\"\n          break\n        case \"line\":\n          templateData.t = \"ray\"\n          templateData.width = 1.5\n          break\n        case \"burst\":\n          templateData.t = \"circle\"\n          break\n        default:\n          break\n      }\n\n      const measuredTemplate = new MeasuredTemplate(new MeasuredTemplateDocument(templateData, { parent: canvas.scene }))\n\n      // If emanation shape then place template on token if token is selected\n      if (token && templateShape === \"emanation\") {\n        const topleft = canvas.grid.getTopLeft(token.x, token.y)\n        measuredTemplate.data.update({x: topleft[0] + (canvas.scene.data.grid * token.data.width / 2), y: topleft[1] + (canvas.scene.data.grid * token.data.width / 2)})\n\n        if (token.data.width && token.data.width > 1) {\n          measuredTemplate.data.update({distance: measuredTemplate.data.distance + token.data.width / 2 * 1.5})\n        }\n\n        canvas.scene.createEmbeddedDocuments(\"MeasuredTemplate\", [measuredTemplate.data]).then(template => {\n          // If token-attacher is installed and activated, stick the template to the token\n          if (game[\"modules\"].has(\"token-attacher\")) {\n            template = canvas.templates.get(template[0].data._id)\n            tokenAttacher.attachElementToToken(template, token, true)\n          }\n        });\n      } else {\n        // Else prepare layer for preview\n        const highlighterName = 'Preview.' + Math.random().toString(36).substr(2, 9)\n        const highlighter = canvas.grid.addHighlightLayer(highlighterName)\n        const initialLayer = canvas.activeLayer\n        measuredTemplate.draw()\n        measuredTemplate.layer.activate()\n        measuredTemplate.layer.preview.addChild(measuredTemplate)\n\n        // Calculate the shape position\n        function getTemplatePosition(event) {\n          const center = event.data.getLocalPosition(measuredTemplate.layer)\n\n          if (templateShape === \"emanation\" || templateShape === \"line\") {\n            const shapeCenter = canvas.grid.getCenter(center.x, center.y)\n            return { x: shapeCenter[0], y: shapeCenter[1] }\n          } else if (templateShape === \"burst\") {\n            return canvas.grid.getSnappedPosition(center.x, center.y, 1)\n          } else if (templateShape === \"cone\") {\n            let shift = 0\n            const shapePosition = canvas.grid.getSnappedPosition(center.x, center.y, 2)\n            const centerPosition = canvas.grid.getCenter(shapePosition.x, shapePosition.y)\n            if (shapePosition.x === centerPosition[0] && shapePosition.y === centerPosition[1]) {\n              shapePosition.x += canvas.dimensions.size / 2\n            }\n            return shapePosition\n          } else {\n            return canvas.grid.getSnappedPosition(center.x, center.y, 2)\n          }\n        }\n\n        /*\n        ----------- THX TO PF2 SYSTEM CREATOR FOR THIS CODE. --------------\n        */\n\n        // Calculate the highlight\n        function highlightGrid() {\n          const grid = canvas.grid,\n            d = canvas.dimensions,\n            bc = \"0x000000\",\n            fc = measuredTemplate.data.fillColor.replace('#', '0x')\n\n          // Clear existing highlight\n          canvas.grid.clearHighlightLayer(highlighterName)\n          if ([\"circle\", \"cone\"].includes(measuredTemplate.data.t)) {\n            // Get number of rows and columns\n            let nr = Math.ceil(((measuredTemplate.data.distance * 1.5) / d.distance) / (d.size / grid.h)),\n              nc = Math.ceil(((measuredTemplate.data.distance * 1.5) / d.distance) / (d.size / grid.w))\n\n            // Get the center of the grid position occupied by the template\n            let x = measuredTemplate.data.x,\n              y = measuredTemplate.data.y\n\n            let [cx, cy] = grid.getCenter(x, y),\n              [col0, row0] = grid.grid.getGridPositionFromPixels(cx, cy),\n              minAngle = (360 + ((measuredTemplate.data.direction - measuredTemplate.data.angle * 0.5) % 360)) % 360,\n              maxAngle = (360 + ((measuredTemplate.data.direction + measuredTemplate.data.angle * 0.5) % 360)) % 360\n\n            const within_angle = function (min, max, value) {\n              min = (360 + min % 360) % 360\n              max = (360 + max % 360) % 360\n              value = (360 + value % 360) % 360\n\n              if (min < max) return (value >= min && value <= max)\n              return (value >= min || value <= max)\n            }\n\n            const measureDistance = function (p0, p1) {\n              let gs = canvas.dimensions.size,\n                ray = new Ray(p0, p1),\n                // How many squares do we travel across to get there? If 2.3, we should count that as 3 instead of 2; hence, Math.ceil\n                nx = Math.ceil(Math.abs(ray.dx / gs)),\n                ny = Math.ceil(Math.abs(ray.dy / gs))\n\n              // Get the number of straight and diagonal moves\n              let nDiagonal = Math.min(nx, ny),\n                nStraight = Math.abs(ny - nx)\n\n              // Diagonals in PF pretty much count as 1.5 times a straight\n              let distance = Math.floor(nDiagonal * 1.5 + nStraight)\n              let distanceOnGrid = distance * canvas.dimensions.distance\n              return distanceOnGrid\n            }\n\n            const degtorad = function (degrees) {\n              return degrees * Math.PI / 180\n            }\n\n            let originOffset = { x: 0, y: 0 }\n            // Offset measurement for cones\n            // Offset is to ensure that cones only start measuring from cell borders, as in https://www.d20pfsrd.com/magic/#Aiming_a_Spell\n            if (measuredTemplate.data.t === \"cone\") {\n              // Degrees anticlockwise from pointing right. In 45-degree increments from 0 to 360\n              const dir = (measuredTemplate.data.direction >= 0 ? 360 - measuredTemplate.data.direction : -measuredTemplate.data.direction) % 360\n              // If we're not on a border for X, offset by 0.5 or -0.5 to the border of the cell in the direction we're looking on X axis\n              let xOffset = measuredTemplate.data.x % d.size != 0 ?\n                Math.sign(1 * (Math.round(Math.cos(degtorad(dir)) * 100)) / 100) / 2 // /2 turns from 1/0/-1 to 0.5/0/-0.5\n                : 0\n              // Same for Y, but cos Y goes down on screens, we invert\n              let yOffset = measuredTemplate.data.y % d.size != 0 ?\n                -Math.sign(1 * (Math.round(Math.sin(degtorad(dir)) * 100)) / 100) / 2\n                : 0\n              originOffset.x = xOffset\n              originOffset.y = yOffset\n            }\n\n            // Point we are measuring distances from\n            let origin = {\n              x: measuredTemplate.data.x + (originOffset.x * d.size),\n              y: measuredTemplate.data.y + (originOffset.y * d.size)\n            }\n\n            for (let a = -nc; a < nc; a++) {\n              for (let b = -nr; b < nr; b++) {\n                // Position of cell's top-left corner, in pixels\n                let [gx, gy] = canvas.grid.grid.getPixelsFromGridPosition(col0 + a, row0 + b)\n                // Position of cell's center, in pixels\n                let [cellCenterX, cellCenterY] = [gx + d.size * 0.5, gy + d.size * 0.5]\n\n                // Determine point of origin\n                let origin = { x: measuredTemplate.data.x, y: measuredTemplate.data.y }\n                origin.x += (originOffset.x * d.size)\n                origin.y += (originOffset.y * d.size)\n\n                let ray = new Ray(origin, { x: cellCenterX, y: cellCenterY })\n\n                let rayAngle = (360 + (ray.angle / (Math.PI / 180)) % 360) % 360\n                if (measuredTemplate.data.t === \"cone\" && ray.distance > 0 && !within_angle(minAngle, maxAngle, rayAngle)) {\n                  continue\n                }\n\n                // Determine point we're measuring the distance to - always in the center of a grid square\n                let destination = { x: cellCenterX, y: cellCenterY }\n\n                let distance = measureDistance(destination, origin)\n                if (distance <= measuredTemplate.data.distance) {\n                  grid.grid.highlightGridPosition(highlighter, { x: gx, y: gy, color: fc, border: bc })\n                }\n              }\n            }\n          } else {\n            /*\n            ----------- THX TO FOUNDRY CREATOR FOR THIS CODE FROM CORE FOUNDRY. --------------\n            */\n            // Get number of rows and columns\n            const nr = Math.ceil(((measuredTemplate.data.distance * 1.5) / d.distance) / (d.size / grid.h));\n            const nc = Math.ceil(((measuredTemplate.data.distance * 1.5) / d.distance) / (d.size / grid.w));\n            // Get the offset of the template origin relative to the top-left grid space\n            const [tx, ty] = canvas.grid.getTopLeft(measuredTemplate.data.x, measuredTemplate.data.y);\n            const [row0, col0] = grid.grid.getGridPositionFromPixels(tx, ty);\n            const hx = canvas.grid.w / 2;\n            const hy = canvas.grid.h / 2;\n            const isCenter = (measuredTemplate.data.x - tx === hx) && (measuredTemplate.data.y - ty === hy);\n            // Identify grid coordinates covered by the template Graphics\n            for (let r = -nr; r < nr; r++) {\n              for (let c = -nc; c < nc; c++) {\n                let [gx, gy] = canvas.grid.grid.getPixelsFromGridPosition(row0 + r, col0 + c);\n                const testX = (gx + hx) - measuredTemplate.data.x;\n                const testY = (gy + hy) - measuredTemplate.data.y;\n                let contains = ((r === 0) && (c === 0) && isCenter) || measuredTemplate.shape.contains(testX, testY);\n                if (!contains) continue;\n                grid.grid.highlightGridPosition(highlighter, { x: gx, y: gy, color: fc, border: bc });\n              }\n            }\n          }\n        }\n\n        /*\n        ----------- THX TO FOUNDRY CREATOR FOR THIS CODE FROM DND 5. --------------\n        */\n\n        // Preview handlers\n        const handlers = {}\n        let moveTime = 0\n\n        // Update placement (mouse-move)\n        handlers.mm = event => {\n          event.stopPropagation()\n          let now = Date.now() // Apply a 20ms throttle\n          if (now - moveTime <= 20) return\n          const snapped = getTemplatePosition(event)\n          measuredTemplate.data.update(snapped)\n          measuredTemplate.refresh()\n          highlightGrid()\n          moveTime = now\n        }\n\n        // Cancel the workflow (right-click)\n        handlers.rc = event => {\n          canvas.grid.destroyHighlightLayer(highlighterName)\n          measuredTemplate.layer.preview.removeChildren()\n          canvas.stage.off(\"mousemove\", handlers.mm)\n          canvas.stage.off(\"mousedown\", handlers.lc)\n          canvas.app.view.oncontextmenu = null\n          canvas.app.view.onwheel = null\n          initialLayer.activate()\n        }\n\n        // Confirm the workflow (left-click)\n        handlers.lc = event => {\n          handlers.rc(event)\n\n          const destination = getTemplatePosition(event)\n          measuredTemplate.data.update(destination)\n\n          canvas.scene.createEmbeddedDocuments(\"MeasuredTemplate\", [measuredTemplate.data]);\n        }\n\n        // Rotate the template by 3 degree increments (mouse-wheel)\n        handlers.mw = event => {\n          if (event.ctrlKey) event.preventDefault()\n          event.stopPropagation()\n          let delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15\n          let snap = event.shiftKey ? delta : 5\n          measuredTemplate.data.update({ direction: measuredTemplate.data.direction + (snap * Math.sign(event.deltaY))});\n          measuredTemplate.refresh()\n          highlightGrid()\n        }\n\n        // Activate listeners\n        canvas.stage.on(\"mousemove\", handlers.mm)\n        canvas.stage.on(\"mousedown\", handlers.lc)\n        canvas.app.view.oncontextmenu = handlers.rc\n        canvas.app.view.onwheel = handlers.mw\n      }\n    }\n  }\n}, {\n  id: 'pf2-template-creator'\n}).render(true)","folder":null,"sort":1800000,"permission":{"default":3,"amdu4xTh7PPZZgSP":3},"flags":{"macro-marker":{"activeData":{"tooltip":"Création de gabarits","icon":"icons/template.jpg","colour":"#000000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}}}
{"_id":"DFlJC5R4NvKwBJTs","name":"Aurore/Crépuscule","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":100000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/sunset.jpg","tooltip":"Aurore/Crépuscule","colour":"#f7d488","trigger":""}}},"scope":"global","command":"canvas.scene.update({darkness: 0.85})","author":"amdu4xTh7PPZZgSP","img":"icons/sunset.jpg","actorIds":[]}
{"_id":"IGUxdzrg6yA9sAnl","name":"Vision du token","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":1300000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"systems/pf2e/icons/equipment/adventuring-gear/lantern.jpg","tooltip":"Vision du token","colour":"#f7d488","trigger":""}}},"scope":"global","command":"if (canvas.tokens.controlled.length === 0)\n  return ui.notifications.error(\"Please select a token first\");\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">Aucun changement</option>\n          <option value=\"none\">Aucune vision</option>\n          <option value=\"nightvision\">Vision nocturne</option>\n          <option value=\"darkvision\">Vision dans le noir</option>\n          <option value=\"superiordarkvision\">Vision dans le noir améliorée</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">Aucun changement</option>\n          <option value=\"none\">Pas de source de lumière</option>\n          <option value=\"candle\">Bougie</option>\n          <option value=\"bullseye\">Lanterne à capote</option>\n          <option value=\"hooded-bright\">Lanterne sourde (normale)</option>\n          <option value=\"hooded-dim\">Lanterne sourde (couverte)</option>\n          <option value=\"torch\">Torche</option>\n          <option value=\"light\">Lumière (sort)</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    }\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for (let token of canvas.tokens.controlled) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let dimSight = 0;\n        let brightSight = 0;\n        let dimLight = 0;\n        let brightLight = 0;\n        let lightAngle = 360;\n        let lockRotation = token.data.lockRotation;\n        let lightAlpha = 0.3;\n        let lightColor = '#f27d0c';\n        let lightAnimation = { type: '', speed: 1, intensity: 1, blurStrength: 0, ratioDamper: 0, secondaryColor: '' }\n        // Get Vision Type Values\n        switch (visionType) {\n          case \"none\":\n            dimSight = 0;\n            brightSight = 0;\n            break;\n          case \"nightvision\":\n            dimSight = 300;\n            brightSight = 0;\n            break;\n          case \"darkvision\":\n            dimSight = 0;\n            brightSight = 300;\n            break;\n          case \"superiordarkvision\":\n            dimSight = 0;\n            brightSight = 300;\n            break;\n          case \"nochange\":\n          default:\n            dimSight = token.data.dimSight;\n            brightSight = token.data.brightSight;\n        }\n        // Get Light Source Values\n        switch (lightSource) {\n          case \"none\":\n            dimLight = 0;\n            brightLight = 0;\n            lightAnimation.type = '';\n            break;\n          case \"candle\":\n            dimLight = 3;\n            brightLight = 0;\n            lightAnimation.type = 'BlitzBlurred Torch';\n            lightAnimation.blurStrength = 10;\n            lightAnimation.ratioDamper = 1;\n            lightAnimation.secondaryColor = '#e25822';\n            break;\n          case \"bullseye\":\n            dimLight = 36;\n            brightLight = 18;\n            lockRotation = false;\n            lightAngle = 52.5;\n            lightAnimation.type = 'BlitzBlurred Torch';\n            lightAnimation.blurStrength = 20;\n            lightAnimation.ratioDamper = 9;\n            lightAnimation.secondaryColor = '#e25822';\n            break;\n          case \"hooded-dim\":\n            dimLight = 0.1;\n            brightLight = 0;\n            lightAnimation.type = 'BlitzBlurred Torch';\n            lightAnimation.blurStrength = 1;\n            lightAnimation.ratioDamper = 1;\n            lightAnimation.secondaryColor = '#e25822';\n            break;\n          case \"hooded-bright\":\n            dimLight = 18;\n            brightLight = 9;\n            lightAnimation.type = 'BlitzBlurred Torch';\n            lightAnimation.blurStrength = 20;\n            lightAnimation.ratioDamper = 6;\n            lightAnimation.secondaryColor = '#e25822';\n            break;\n          case \"torch\":\n            dimLight = 12;\n            brightLight = 6;\n            lightAnimation.type = 'BlitzBlurred Torch';\n            lightAnimation.blurStrength = 20;\n            lightAnimation.ratioDamper = 3;\n            lightAnimation.secondaryColor = '#e25822';\n            break;\n          case \"light\":\n            dimLight = 12;\n            brightLight = 6;\n            lightAnimation.type = '';\n            lightColor = '';\n            lightAnimation.type = 'BlitzStatic Blur';\n            lightAnimation.blurStrength = 20;\n            break;\n          case \"nochange\":\n          default:\n            dimLight = token.data.dimLight;\n            brightLight = token.data.brightLight;\n            lightAngle = token.data.lightAngle;\n            lockRotation = token.data.lockRotation;\n            lightAlpha = token.data.lightAlpha\n            lightColor = token.data.lightColor\n            lightAnimation = token.data.lightAnimation\n        }\n        // Update Token\n        console.log(token);\n        token.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          dimLight: dimLight,\n          brightLight: brightLight,\n          lightAngle: lightAngle,\n          lockRotation: lockRotation,\n          lightAlpha: lightAlpha,\n          lightColor: lightColor,\n          lightAnimation: lightAnimation\n        });\n      }\n    }\n  }\n}).render(true);","author":"amdu4xTh7PPZZgSP","img":"systems/pf2e/icons/equipment/adventuring-gear/lantern.webp","actorIds":[]}
{"name":"Frappe: Faux de frappe sanglante +1","permission":{"default":0,"IbFFlYNqPrUsFGvN":3},"type":"script","sort":100001,"flags":{"pf2e":{"actionMacro":true}},"scope":"global","command":"game.pf2e.rollActionMacro('0pzMt17lBYJc7ydd', 2, 'Faux de frappe sanglante +1')","author":"IbFFlYNqPrUsFGvN","img":"icons/weapons/sickles/scythe-wrapped-worn-red.webp","actorIds":[],"_id":"IYx7fXtMT6f68p5j"}
{"_id":"OAXfyD3vhBoD2Kb1","name":"Add Persistent Damage","permission":{"default":1,"amdu4xTh7PPZZgSP":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"PF2EPersistentDamage.showDialog();","author":"amdu4xTh7PPZZgSP","img":"systems/pf2e/icons/features/classes/brutality.webp","actorIds":[]}
{"_id":"OHX4nTGNUD9XXl28","name":"Convertir distance en mètres","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Convertir en mètres              ","colour":"#f7d488","trigger":""}}},"scope":"global","command":"if (canvas.tokens.controlled.length === 0)\r\n  return ui.notifications.error(\"Please select a token first\");\r\n\r\nlet numberUpdated = 0\r\nfor (let token of canvas.tokens.controlled) {\r\n    if (String(token.actor.data.data.attributes.speed.value).indexOf('feet') !== -1) {\r\n        let actor = game.actors.get(token.actor._id)\r\n        actor.data.data.attributes.speed.value = parseFloat(actor.data.data.attributes.speed.value) * 0.3\r\n        actor.update(actor.data)\r\n        numberUpdated++\r\n    }\r\n}\r\nreturn ui.notifications.info(`${numberUpdated} tokens updated`);","author":"amdu4xTh7PPZZgSP","img":"systems/pf2e/icons/equipment/adventuring-gear/swim-fins.webp","actorIds":[]}
{"_id":"OalU68I9flKWzhg9","name":"Morphologies sauvages","type":"script","author":"amdu4xTh7PPZZgSP","img":"systems/pf2e/icons/spells/animal-vision.webp","scope":"global","command":"/** These values must be set for this macro to work */\nconst USER_NAME = \"Bellis\";\nconst PREFERRED_FORM = \"de dinosaure\";\n\n/** Form stats: adjust these for different spells */\nconst formGroups = [\n  // contains Attack info for the forms\n  {\n    group: 'Forme de nuisible', // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\n    class: 'pestForm', // Used to link to the correct Scaling Attributes group\n    minimumLevel: 1,\n    forms: [\n      {\n        name: 'Nuisible',\n        id: 'Compendium.pf2e.spell-effects.ydsLEGjY89Akc4oZ',\n      },\n    ],\n  },\n  {\n    group: 'Forme animale', // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\n    class: 'animalForm', // Used to link to the correct Scaling Attributes group\n    minimumLevel: 2,\n    forms: [\n      {\n        name: 'Primate',\n        id: 'Compendium.pf2e.spell-effects.tk3go5Cl6Qt130Dk',\n      },\n      {\n        name: 'Ours',\n        id: 'Compendium.pf2e.spell-effects.gQnDKDeBTtjwOWAk',\n      },\n      {\n        name: 'Taureau',\n        id: 'Compendium.pf2e.spell-effects.BT1ofB6RvRocQOWO',\n      },\n      {\n        name: 'Canidé',\n        id: 'Compendium.pf2e.spell-effects.sN3mQ7YrPBogEJRn',\n      },\n      {\n        name: 'Félin',\n        id: 'Compendium.pf2e.spell-effects.ptOqsN5FS0nQh7RW',\n      },\n      {\n        name: 'Daim',\n        id: 'Compendium.pf2e.spell-effects.F4DTpDXNu5IliyhJ',\n      },\n      {\n        name: 'Grenouille',\n        id: 'Compendium.pf2e.spell-effects.j2LhQ7kEQhq3J3zZ',\n      },\n      {\n        name: 'Requin',\n        id: 'Compendium.pf2e.spell-effects.qPaEEhczUWCQo6ux',\n      },\n      {\n        name: 'Serpent',\n        id: 'Compendium.pf2e.spell-effects.kz3mlFwb9tV9bFwu',\n      },\n    ],\n  },\n  {\n    group: \"Forme d'insecte\",\n    class: 'insectForm',\n    minimumLevel: 3,\n    forms: [\n      {\n        name: 'Fourmi',\n        id: 'Compendium.pf2e.spell-effects.6IvTWcispcDaw88N',\n      },\n      {\n        name: 'Coléoptère',\n        id: 'Compendium.pf2e.spell-effects.amTa9jSml9ioKduN',\n      },\n      {\n        name: 'Mille-pattes',\n        id: 'Compendium.pf2e.spell-effects.DENMzySYANjUBs4O',\n      },\n      {\n        name: 'Mante',\n        id: 'Compendium.pf2e.spell-effects.llrOM8rPP9nxIuEN',\n      },\n      {\n        name: 'Scorpion',\n        id: 'Compendium.pf2e.spell-effects.bOjuEX3qj7XAOoDF',\n      },\n      {\n        name: 'Araignée',\n        id: 'Compendium.pf2e.spell-effects.782NyomkDHyfsUn6',\n      },\n    ],\n  },\n  {\n    group: 'Forme aérienne',\n    class: 'aerialForm',\n    minimumLevel: 4,\n    forms: [\n      {\n        name: 'Chauve-souris',\n        id: 'Compendium.pf2e.spell-effects.jvwKRHtOiPAm4uAP',\n      },\n      {\n        name: 'Oiseau',\n        id: 'Compendium.pf2e.spell-effects.0QVufU5o3xIxiHmP',\n      },\n      {\n        name: 'Ptérosaure',\n        id: 'Compendium.pf2e.spell-effects.UjoNm3lrhlg4ctAQ',\n      },\n      {\n        name: 'Guêpe',\n        id: 'Compendium.pf2e.spell-effects.xgZxYqjDPNtsQ3Qp',\n      },\n    ],\n  },\n  {\n    group: 'Forme de dinosaure',\n    class: 'dinosaurForm',\n    minimumLevel: 4,\n    forms: [\n      {\n        name: 'Ankylosaure',\n        id: 'Compendium.pf2e.spell-effects.0Cyf07wboRp4CmcQ',\n      },\n      {\n        name: 'Brontosaure',\n        id: 'Compendium.pf2e.spell-effects.KkDRRDuycXwKPa6n',\n      },\n      {\n        name: 'Deinonychus',\n        id: 'Compendium.pf2e.spell-effects.oJbcmpBSHwmx6FD4',\n      },\n      {\n        name: 'Stégosaure',\n        id: 'Compendium.pf2e.spell-effects.T6XnxvsgvvOrpien',\n      },\n      {\n        name: 'Tricératops',\n        id: 'Compendium.pf2e.spell-effects.iOKhr2El8R6cz6YI',\n      },\n      {\n        name: 'Tyrannosaure',\n        id: 'Compendium.pf2e.spell-effects.542Keo6txtq7uvqe',\n      },\n    ],\n  },\n  {\n    group: 'Forme élémentaire',\n    class: 'elementalForm',\n    minimumLevel: 5,\n    forms: [\n      {\n        name: 'Air',\n        id: 'Compendium.pf2e.spell-effects.DliizYpHcmBG130w',\n      },\n      {\n        name: 'Terre',\n        id: 'Compendium.pf2e.spell-effects.8eWLR0WCf5258z8X',\n      },\n      {\n        name: 'Feu',\n        id: 'Compendium.pf2e.spell-effects.phIoucsDa3iplMm2',\n      },\n      {\n        name: 'Eau',\n        id: 'Compendium.pf2e.spell-effects.kxMBdANwCcF841uA',\n      },\n    ],\n  },\n  {\n    group: 'Forme de plante',\n    class: 'plantForm',\n    minimumLevel: 5,\n    forms: [\n      {\n        name: 'Arboricole',\n        id: 'Compendium.pf2e.spell-effects.tu8FyCtmL3YYR2jL',\n      },\n      {\n        name: 'Attrape-mouche',\n        id: 'Compendium.pf2e.spell-effects.JrNHFNxJayevlv2G',\n      },\n      {\n        name: 'Tertre errant',\n        id: 'Compendium.pf2e.spell-effects.fIloZhZVH1xTnX4B',\n      },\n    ],\n  },\n  {\n    group: 'Forme de dragon',\n    class: 'dragonForm',\n    minimumLevel: 6,\n    forms: [\n      {\n        name: 'Noir',\n        id: 'Compendium.pf2e.spell-effects.rHXOZAFBdRXIlxt5',\n      },\n      {\n        name: 'Bleu',\n        id: 'Compendium.pf2e.spell-effects.ETgzIIv3M2zvclAR',\n      },\n      {\n        name: 'Airain',\n        id: 'Compendium.pf2e.spell-effects.OeCn76SB92GPOZwr',\n      },\n      {\n        name: 'Bronze',\n        id: 'Compendium.pf2e.spell-effects.jtW3VfI5Kktuy3GH',\n      },\n      {\n        name: 'Cuivre',\n        id: 'Compendium.pf2e.spell-effects.DrNpuMj14wVj4bWF',\n      },\n      {\n        name: 'Or',\n        id: 'Compendium.pf2e.spell-effects.8aNZhlkzRTRKlKag',\n      },\n      {\n        name: 'Vert',\n        id: 'Compendium.pf2e.spell-effects.nWEx5kpkE8YlBZvy',\n      },\n      {\n        name: 'Rouge',\n        id: 'Compendium.pf2e.spell-effects.V4a9pZHNUlddAwTA',\n      },\n      {\n        name: 'Argent',\n        id: 'Compendium.pf2e.spell-effects.TUyEeLyqdJL6PwbH',\n      },\n      {\n        name: 'Blanc',\n        id: 'Compendium.pf2e.spell-effects.H6ndYYYlADWwqVQb',\n      },\n    ],\n  },\n  {\n    group: 'Forme monstrueuse',\n    class: 'monstrosityForm',\n    minimumLevel: 8,\n    forms: [\n      {\n        name: 'Phénix',\n        id: 'Compendium.pf2e.spell-effects.b8bfWIICHOsGVzjp',\n      },\n      {\n        name: 'Ver pourpre',\n        id: 'Compendium.pf2e.spell-effects.rEsgDhunQ5Yx8KZx',\n      },\n      {\n        name: 'Serpent de mer',\n        id: 'Compendium.pf2e.spell-effects.Eik8Fj8nGo2GLcbn',\n      },\n    ],\n  },\n];\n\n// ------------------------------------------------------------------\n// DECLARE VARIABLES\n//\n\n// Dialog variables\nlet content = '';\nlet levelMin = 1;\n\nconst user = game.users.getName(USER_NAME) ?? game.user;\n\nconst macroActor = user?.character ?? actor;\nconst macroToken = macroActor?.getActiveTokens()[0] ?? token;\nconst validGroups = formGroups.map((group) => group.group.match(/^Forme (?:(?:de )|(?:d'))?([A-Za-zÀ-ÖØ-öø-ÿ]+)$/i)[1]);\nconst normalizedPreferredForm = PREFERRED_FORM.toLowerCase();\nconst error = !user\n      ? `No user with a name of \"${USER_NAME}\" was found.`\n      : !macroActor\n      ? `User ${user.name} has no assigned character.`\n      : !macroToken\n      ? `${actor.name} has no token in this scene.`\n      : !formGroups.some((group) => group.group === `Forme ${normalizedPreferredForm}`)\n      ? `Invalid preferred form: ${normalizedPreferredForm}. Valid options: ${validGroups.join(\", \")}`\n      : null;\nif (error) {\n  ui.notifications.error(error);\n  throw Error(error);\n}\n\n// -------------------------------------------------------------------\n// DECLARE FUNCTIONS\n//--------------------------------------------------------------------\n\nfunction runDialog(dialog, height, width) {\n  if (height) {\n    dialog.options.height = height;\n    dialog.position.height = height;\n  }\n  if (width) {\n    dialog.options.width = width;\n    dialog.position.width = width;\n  }\n  dialog.render(true);\n}\n\n// -------------------------------------------> Main Transform Function Part 1\n\nasync function chooseSpell(spellName, className) {\n  let content2 = `<div style=\"text-align: center\"><div style=\"padding: 2px\"><label for=\"forms\">choisissez votre forme :</label>\n        <select name=\"forms\" id=\"forms\">`;\n  for (const formGroup of formGroups) {\n    if (formGroup.group === spellName) {\n      formGroup.forms.forEach((form) => {\n        content2 += `<option value=\"${form.name}\" class=\"${formGroup.class}\">${form.name}</option>`;\n      });\n      levelMin = formGroup.minimumLevel;\n    }\n  }\n  content2 += `</select></div>\n        <div style=\"padding: 2px\"><label for=\"level\">À quel niveau lancez-vous le sort ?</label>\n        <select name=\"level\" id=\"level\">`;\n\n  while (levelMin <= 10) {\n    const selected = levelMin === Math.round(macroActor.level / 2) ? ' selected=\"selected\"' : \"\";\n    content2 += `<option value=\"${levelMin}\"${selected}>${levelMin++}</option>`;\n  }\n\n  content2 += `</select></div>`;\n  content2 += `<div style=\"padding: 2px\"><label for=\"imgchange\" style=\"display: inline-block; vertical-align: middle; position:relative\">\n        Modifier l'image de votre personnage ?</label>\n        <input type=\"checkbox\" name=\"imgchange\" id=\"imgchange\" checked=\"checked\" style=\"position: relative; vertical-align:middle\"></div></div>`;\n\n  const d2 = new Dialog({\n    title: 'Choose Form',\n    content: content2,\n    buttons: {\n      select: {\n        icon: \"<i class='fas fa-hand-sparkles'></i>\",\n        label: 'Transformer',\n        callback: async (html) => {\n          let actualForm = html.find('#forms')[0].value;\n          let castingLevel = parseInt(html.find('#level')[0].value);\n          let imgChange = html.find('#imgchange')[0].checked;\n          chooseForm(actualForm, castingLevel, imgChange, className);\n        },\n      },\n    },\n  });\n  runDialog(d2, null, 300);\n}\n\n// ----------------------------> Main Transform Function Part 2\n\nasync function chooseForm(actualForm, castingLevel, imgChange, className) {\n  let formData;\n  for (let group of formGroups) {\n    if (group.class === className) {\n      // find the class in formGroups that matches the formType from the selected option in the dialog\n      formData = group.forms.find((element) => element.name === actualForm);\n    }\n  }\n\n  const ITEM_UUID = formData.id; // Spell Effect of the form\n  (async () => {\n    const effect = (await fromUuid(ITEM_UUID)).toObject();\n    effect.flags.core = effect.flags.core ?? {};\n    effect.flags.core.sourceId = ITEM_UUID;\n    if (imgChange) {\n      const origImg = macroToken.data.img;\n      const dotCount = origImg.split('.').length - 1\n      const img = origImg.split('.').slice(0, dotCount).join('.') + formData.name + '.' + origImg.split('.')[dotCount];\n      const rule = {\n        key: 'PF2E.RuleElement.TokenImage',\n        value: img,\n      };\n      effect.data.rules.splice(effect.data.rules.length - 1, 0, rule);\n    }\n    effect.data.level.value = castingLevel;\n    await macroActor.createEmbeddedDocuments(\"Item\", [effect]);\n  })();\n}\n\n// --------------------------------------------------------------------------\n// INIT\n// --------------------------------------------------------------------------\n\nconst existing = macroActor.itemTypes.effect.find((effect) => effect.slug?.match(/^spell-effect-.+-form\\b.*$/));\nif (existing) return existing.delete();\n\n// Populate dropdown with all Form Spells\ncontent += `<div style=\"text-align: center; padding: 0 0 10px\"><label for=\"spells\">Choisissez un sort :</label>\n    <div style=\"padding: 5px 0 0\"><select name=\"spells\" id=\"spells\">`;\nfor (const formGroup of formGroups) {\n  const selected = formGroup.group === `Forme ${normalizedPreferredForm}` ? ' selected=\"selected\"' : \"\";\n  content += `<option value=\"${formGroup.group}\" class=\"${formGroup.class}\"${selected}>${formGroup.group}</option>`;\n}\ncontent += `</select></div></div>`;\n\nconst dialog = new Dialog({\n  title: 'Choisissez un sort',\n  content: content,\n  buttons: {\n    spell: {\n      icon: \"<i class='fas fa-arrow-right'></i>\",\n      label: 'Next',\n      callback: (html) => {\n        let spell = html.find('#spells')[0].value;\n        let selected = html.find('#spells')[0].selectedIndex;\n        let className = html.find('#spells')[0].options[selected].className;\n        chooseSpell(spell, className);\n      },\n    },\n  },\n});\n\nrunDialog(dialog, null, 250);","folder":null,"sort":100001,"permission":{"default":0,"amdu4xTh7PPZZgSP":3,"tKgEjDr2hbqgTATC":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#f7d488","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}}}
{"_id":"P83aVR4aUutXXiu4","name":"Brumes","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":600000,"flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"Hooks.call('switchWeather', {name: \"qFjGHbsQhb\", type: \"fog\", options: {density: 12, speed: 31, scale: 50}});","author":"amdu4xTh7PPZZgSP","img":"modules/fxmaster/icons/weather/fog.png","actorIds":[]}
{"_id":"S1AKqaHiuMr2QHfX","name":"Rage","type":"script","author":"8qeYnePWDjJCL8bF","img":"systems/pf2e/icons/features/classes/rage.webp","scope":"global","command":"(async () => {\r\n  if (actor) {\r\n    if ((actor.data.data.customModifiers['ac'] || []).some(modifier => modifier.name === 'Rage')) {\r\n      MacroMarker.toggle(this)\r\n      await actor.removeCustomModifier('ac', 'Rage')\r\n      await actor.removeCustomModifier('damage', 'Rage')\r\n      /// Remove the line below if you do not wish for your character to lose all temp hp when toggled \"off\".\r\n      await actor.update({ 'data.attributes.hp.temp': 0 });\r\n      /// Remove the line above if you do not wish for your character to lose all temp hp when toggled \"off\".\r\n      if (token && token.data.effects.includes(\"systems/pf2e/icons/features/classes/rage.jpg\")) {\r\n        token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.jpg\")\r\n      }\r\n      TokenMagic.deleteFilters(token)\r\n    } else {\r\n      MacroMarker.toggle(this)\r\n      game.pf2e.rollItemMacro(\"r6SglyLd3EN1buni\");\r\n      const tmpHP = (actor.data.data.details.level.value + actor.data.data.abilities.con.mod);\r\n      if (actor.data.data.attributes.hp.temp < tmpHP) {\r\n        await actor.update({ 'data.attributes.hp.temp': tmpHP });\r\n      }\r\n      await actor.addCustomModifier('ac', 'Rage', -1, 'untyped');\r\n      await actor.addCustomModifier('damage', 'Rage', 4, 'status');\r\n      if (token && !token.data.effects.includes(\"systems/pf2e/icons/features/classes/rage.jpg\")) {\r\n        token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.jpg\")\r\n      }\r\n      TokenMagic.addFilters(token, [{\r\n        filterType: \"fire\",\r\n        intensity: 1,\r\n        color: 0xffffff,\r\n        amplitude: 1,\r\n        time: 0,\r\n        blend: 2,\r\n        fireBlend: 1,\r\n        animated:\r\n        {\r\n          time:\r\n          {\r\n            active: true,\r\n            speed: -0.0019,\r\n            animType: \"move\"\r\n          },\r\n          intensity:\r\n          {\r\n            active: true,\r\n            loopDuration: 15485,\r\n            val1: 1,\r\n            val2: 2,\r\n            animType: \"syncCosOscillation\"\r\n          },\r\n          amplitude:\r\n          {\r\n            active: true,\r\n            loopDuration: 4567,\r\n            val1: 0.2,\r\n            val2: 1,\r\n            animType: \"syncCosOscillation\"\r\n          }\r\n\r\n        }\r\n      }])\r\n    }\r\n  } else {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n  }\r\n})();","folder":null,"sort":0,"permission":{"default":0,"amdu4xTh7PPZZgSP":3,"8qeYnePWDjJCL8bF":3},"flags":{"pf2e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""},"macro-marker":{"activeMacros":{"xnJokrkx8XTmogQ0":{"active":false}},"activeData":{"tooltip":"Rage          ","icon":"systems/pf2e/icons/features/classes/rage.jpg","module":"macro-marker","colour":"#000000","trigger":""},"markers":{"markers":{"xnJokrkx8XTmogQ0":false,"S1AKqaHiuMr2QHfX":false},"type":"Macro"}},"core":{"sourceId":"Macro.xnJokrkx8XTmogQ0"}}}
{"_id":"SEsEGbJI3Gak13Lt","name":"Dégâts : Projectile magique","permission":{"default":0,"amdu4xTh7PPZZgSP":3,"XciPTrXWxmR3rOUx":3},"type":"chat","sort":100001,"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#f7d488","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/r 1d4+1","author":"amdu4xTh7PPZZgSP","img":"systems/pf2e/icons/spells/magic-missile.webp","actorIds":[]}
{"_id":"W5vXENv1tEi9fRim","name":"Rage partagée (Oèn)","type":"script","author":"XciPTrXWxmR3rOUx","img":"systems/pf2e/icons/features/classes/rage.webp","scope":"global","command":"(async () => {\n  if (actor) {\n    if ((actor.data.data.customModifiers['ac'] || []).some(modifier => modifier.name === 'Rage partagée')) {\n      MacroMarker.toggle(this)\n      await actor.removeCustomModifier('ac', 'Rage partagée')\n      await actor.removeCustomModifier('damage', 'Rage partagée')\n      /// Remove the line below if you do not wish for your character to lose all temp hp when toggled \"off\".\n      await actor.update({ 'data.attributes.hp.temp': 0 });\n      /// Remove the line above if you do not wish for your character to lose all temp hp when toggled \"off\".\n      if (token && token.data.effects.includes(\"systems/pf2e/icons/features/classes/rage.webp\")) {\n        token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.webp\")\n      }\n      TokenMagic.deleteFilters(token)\n    } else {\n      MacroMarker.toggle(this)\n      const tmpHP = (actor.data.data.details.level.value + actor.data.data.abilities.con.mod);\n      if (actor.data.data.attributes.hp.temp < tmpHP) {\n        await actor.update({ 'data.attributes.hp.temp': tmpHP });\n      }\n      await actor.addCustomModifier('ac', 'Rage partagée', -1, 'untyped');\n      await actor.addCustomModifier('damage', 'Rage partagée', 2, 'status');\n      if (token && !token.data.effects.includes(\"systems/pf2e/icons/features/classes/rage.webp\")) {\n        token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.webp\")\n      }\n      TokenMagic.addFilters(token, [{\n        filterType: \"fire\",\n        intensity: 1,\n        color: 0xffffff,\n        amplitude: 1,\n        time: 0,\n        blend: 2,\n        fireBlend: 1,\n        animated:\n        {\n          time:\n          {\n            active: true,\n            speed: -0.0019,\n            animType: \"move\"\n          },\n          intensity:\n          {\n            active: true,\n            loopDuration: 15485,\n            val1: 1,\n            val2: 2,\n            animType: \"syncCosOscillation\"\n          },\n          amplitude:\n          {\n            active: true,\n            loopDuration: 4567,\n            val1: 0.2,\n            val2: 1,\n            animType: \"syncCosOscillation\"\n          }\n\n        }\n      }])\n    }\n  } else {\n    ui.notifications.warn(\"You must have an actor selected.\");\n  }\n})();","folder":null,"sort":100001,"permission":{"default":0,"XciPTrXWxmR3rOUx":3},"flags":{"macro-marker":{"activeData":{"icon":"systems/pf2e/icons/features/classes/rage.webp","tooltip":"Rage partagée (Oèn)","colour":"#f7d488","trigger":""},"markers":{"markers":{"W5vXENv1tEi9fRim":false},"type":"Macro"}},"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"XhkwQhpSIaQHVDyw","name":"Frappe: Faux +1","permission":{"default":0,"IbFFlYNqPrUsFGvN":3},"type":"script","sort":1750000,"flags":{"pf2e":{"actionMacro":true}},"scope":"global","command":"game.pf2e.rollActionMacro('0pzMt17lBYJc7ydd', 2, 'Faux +1')","author":"IbFFlYNqPrUsFGvN","img":"icons/weapons/sickles/scythe-wrapped-worn-red.webp","actorIds":[]}
{"name":"New Macro","type":"chat","author":"tKgEjDr2hbqgTATC","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"tKgEjDr2hbqgTATC":3},"flags":{},"_id":"aQCfkgPxtRtfRMe9"}
{"_id":"chTdQ34Uu5GlQsZE","name":"Neige","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":700000,"flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"Hooks.call('switchWeather', {name: \"JcEHMtoLa8\", type: \"snow\", options: {density: 33, speed: 25, scale: 34}});","author":"amdu4xTh7PPZZgSP","img":"modules/fxmaster/icons/weather/snow.png","actorIds":[]}
{"_id":"cuoDlTI2fxEzjOeI","name":"Jour","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":1600000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"canvas.scene.update({darkness: 0.0})","author":"amdu4xTh7PPZZgSP","img":"icons/sun-icon.jpg","actorIds":[]}
{"name":"Faux de frappe sanglante +2","permission":{"default":0,"IbFFlYNqPrUsFGvN":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"JGpJk5AhfBoy3M6I\");","author":"IbFFlYNqPrUsFGvN","img":"icons/weapons/sickles/scythe-wrapped-worn-red.webp","actorIds":[],"_id":"dCUyHp6YW1WSYNhb"}
{"_id":"eaoqiiiDVO2G5i8N","name":"Rage partagée (Jaskier)","permission":{"default":0,"aJcZoSZ3NobQ8QKc":3},"type":"script","sort":100001,"flags":{"macro-marker":{"activeData":{"icon":"systems/pf2e/icons/features/classes/rage.webp","tooltip":"Rage partagée (Jaskier)","colour":"#f7d488","trigger":""},"markers":{"markers":{"eaoqiiiDVO2G5i8N":false},"type":"Macro"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"(async () => {\n  if (actor) {\n    if ((actor.data.data.customModifiers['ac'] || []).some(modifier => modifier.name === 'Rage partagée')) {\n      MacroMarker.toggle(this)\n      await actor.removeCustomModifier('ac', 'Rage partagée')\n      await actor.removeCustomModifier('damage', 'Rage partagée')\n      /// Remove the line below if you do not wish for your character to lose all temp hp when toggled \"off\".\n      await actor.update({ 'data.attributes.hp.temp': 0 });\n      /// Remove the line above if you do not wish for your character to lose all temp hp when toggled \"off\".\n      if (token && token.data.effects.includes(\"systems/pf2e/icons/features/classes/rage.webp\")) {\n        token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.webp\")\n      }\n      TokenMagic.deleteFilters(token)\n    } else {\n      MacroMarker.toggle(this)\n      const tmpHP = (actor.data.data.details.level.value + actor.data.data.abilities.con.mod);\n      if (actor.data.data.attributes.hp.temp < tmpHP) {\n        await actor.update({ 'data.attributes.hp.temp': tmpHP });\n      }\n      await actor.addCustomModifier('ac', 'Rage partagée', -1, 'untyped');\n      await actor.addCustomModifier('damage', 'Rage partagée', 2, 'status');\n      if (token && !token.data.effects.includes(\"systems/pf2e/icons/features/classes/rage.webp\")) {\n        token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.webp\")\n      }\n      TokenMagic.addFilters(token, [{\n        filterType: \"fire\",\n        intensity: 1,\n        color: 0xffffff,\n        amplitude: 1,\n        time: 0,\n        blend: 2,\n        fireBlend: 1,\n        animated:\n        {\n          time:\n          {\n            active: true,\n            speed: -0.0019,\n            animType: \"move\"\n          },\n          intensity:\n          {\n            active: true,\n            loopDuration: 15485,\n            val1: 1,\n            val2: 2,\n            animType: \"syncCosOscillation\"\n          },\n          amplitude:\n          {\n            active: true,\n            loopDuration: 4567,\n            val1: 0.2,\n            val2: 1,\n            animType: \"syncCosOscillation\"\n          }\n\n        }\n      }])\n    }\n  } else {\n    ui.notifications.warn(\"You must have an actor selected.\");\n  }\n})();","author":"aJcZoSZ3NobQ8QKc","img":"systems/pf2e/icons/features/classes/rage.webp","actorIds":[]}
{"_id":"peVKjyhQnxKdFfg2","name":"transformToken","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":900000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"placeTokenOnCanvas","colour":"#f7d488","trigger":""}}},"scope":"global","command":"// Arguments\n// TODO SET SAME SCENE AS PLAYER\nconst originalToken = canvas.tokens.placeables.find(t => t.id === args[0])\nlet newToken = game.actors.get(args[1]).data.token\nconst newTokenName = args[2]\n\n// Place a creature token on the canvas instead and delete the original token\nnewToken.x = originalToken.x\nnewToken.y = originalToken.y\nlet id = originalToken.actor.data._id\n\nToken.create(newToken).then(c => {\n    let toUpdate;\n    console.log(originalToken)\n    if (originalToken.data.flags && originalToken.data.flags.transformationFrom) {\n        toUpdate = {\n            actorLink: true\n        }\n    } else {\n        toUpdate = {\n            name: newTokenName,\n            actorLink: false,\n            flags: {\n                transformationFrom: id\n            }\n        }\n    }\n\n    c.update(toUpdate).then((t) => {\n        if (game.combats && game.combats.size > 0) {\n            game.combats.forEach(c => {\n                let combatant = c.getCombatantByToken(originalToken.id)\n                if (combatant) {\n                    let round = c.round\n                    let turn = c.turn\n                    c.createCombatant({\n                        tokenId: t.data._id,\n                        active: combatant.active,\n                        hidden: combatant.hidden,\n                        initiative: combatant.initiative,\n                        hasRolled: combatant.hasRolled,\n                        visible: combatant.visible\n                    }).then(() => {\n                        setTimeout(() => {\n                            if (c.started) c.update({ round: round, turn: turn })        \n                        }, 200);\n                    })\n                }\n            })\n        }\n\n        originalToken.delete()\n    })\n})","author":"amdu4xTh7PPZZgSP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"qw58ratRgUZquswi","name":"Carte et lumières","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":1700000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"systems/pf2e/icons/equipment/consumables/other-consumables/spell-scroll.jpg","tooltip":"Carte et lumières","colour":"#f7d488","trigger":""}}},"scope":"global","command":"let applyChanges = false;\nnew Dialog({\n  title: `Map Configuration`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Map type:</label>\n        <select id=\"map-type\" name=\"map-type\">\n          <option value=\"nochange\">Aucun changement</option>\n          <option value=\"withsight\">Vision activée</option>\n          <option value=\"withoutsight\">Vision désactivée</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">Aucun changement</option>\n          <option value=\"none\">Pas de source de lumière</option>\n          <option value=\"candle\">Bougie</option>\n          <option value=\"bullseye\">Lanterne à capote</option>\n          <option value=\"hooded-bright\">Lanterne sourde (normale)</option>\n          <option value=\"hooded-dim\">Lanterne sourde (couverte)</option>\n          <option value=\"torch\">Torche</option>\n          <option value=\"light\">Lumière (sort)</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n          <label for=\"turn-on-off\">Switch turn on / off</label>\n          <input type=\"checkbox\" name=\"turn-on-off\" id=\"turn-on-off\">\n      </div>\n    </form>\n    `,\n  buttons: {\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    }\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      let mapSource = html.find('[name=\"map-type\"]')[0].value || \"withsight\";\n      let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n      let turnOnOff = html.find('[name=\"turn-on-off\"]')[0].checked || false;\n\n      if (mapSource !== \"nochange\") {\n        let hasGlobalThreshold = false;\n        let globalLightThreshold = 0;\n        let padding = 0;\n        let scene = game.scenes.viewed\n        let backgroundColor = \"#404040\";\n        let gridColor = \"#404040\";\n        let gridUnits = \"m\";\n        let gridDistance = 1.5;\n        let gridAlpha = 0.5;\n        let tokenVision = false;\n        let globalLight = false;\n        let fogExploration = false;\n        let navigation = false;\n        let initial = {\n          x: parseInt(canvas.stage.pivot.x),\n          y: parseInt(canvas.stage.pivot.y),\n          scale: canvas.stage.scale.x\n        };\n        // Get Scene Source Values\n        switch (mapSource) {\n          case \"withsight\":\n            hasGlobalThreshold = true;\n            globalLightThreshold = 0.95;\n            tokenVision = true;\n            fogExploration = true;\n            globalLight = true;\n            break;\n          case \"withoutsight\":\n            hasGlobalThreshold = false;\n            globalLightThreshold = 0;\n            globalLight = true;\n            gridUnits = scene.data.gridUnits;\n            gridDistance = scene.data.gridDistance;\n            break;\n          case \"nochange\":\n          default:\n            hasGlobalThreshold = scene.data.hasGlobalThreshold;\n            globalLightThreshold = scene.data.globalLightThreshold;\n            padding = scene.data.padding;\n            backgroundColor = scene.data.backgroundColor;\n            gridColor = scene.data.gridColor;\n            gridUnits = scene.data.gridUnits;\n            gridDistance = scene.data.gridDistance;\n            gridAlpha = scene.data.gridAlpha;\n            tokenVision = scene.data.tokenVision;\n            globalLight = scene.data.globalLight;\n            fogExploration = scene.data.fogExploration;\n            navigation = scene.data.navigation;\n            initial = {\n              x: scene.data.initial.x,\n              y: scene.data.initial.y,\n              scale: scene.data.initial.scale\n            };\n        }\n        // Update scene\n        scene.update({\n          hasGlobalThreshold: hasGlobalThreshold,\n          globalLightThreshold: globalLightThreshold,\n          padding: padding,\n          backgroundColor: backgroundColor,\n          gridColor: gridColor,\n          gridUnits: gridUnits,\n          gridDistance: gridDistance,\n          gridAlpha: gridAlpha,\n          tokenVision: tokenVision,\n          globalLight: globalLight,\n          fogExploration: fogExploration,\n          navigation: navigation,\n          initial: initial\n        });\n      }\n\n      if (lightSource !== \"nochange\") {\n        for (let light of canvas.lighting.objects.children) {\n          let dim = 0;\n          let bright = 0;\n          let angle = 360;\n          let tintAlpha = 0.3;\n          let tintColor = '#f27d0c';\n          let flags = {\n            CommunityLighting: {\n              secondaryColor: '', ratioDamper: 0, blurStrength: 0\n            }\n          }\n          let lightAnimation = { type: '', speed: 1, intensity: 1, blurStrength: 0, ratioDamper: 0, secondaryColor: '' }\n          let darknessThreshold = 0.7;\n          let hidden = false;\n          // Get Light Source Values\n          switch (lightSource) {\n            case \"none\":\n              dim = 0;\n              bright = 0;\n              lightAnimation.type = '';\n              flags.CommunityLighting = {}\n              hidden = true;\n              break;\n            case \"candle\":\n              dim = 3.75;\n              bright = 0.75;\n              lightAnimation.type = 'BlitzBlurred Torch';\n              lightAnimation.blurStrength = 10;\n              lightAnimation.ratioDamper = 1;\n              lightAnimation.secondaryColor = '#e25822';\n              flags.CommunityLighting.blurStrength = 10;\n              flags.CommunityLighting.ratioDamper = 1;\n              flags.CommunityLighting.secondaryColor = '#e25822';\n              break;\n            case \"bullseye\":\n              dim = 36.75;\n              bright = 18.75;\n              angle = 52.5;\n              lightAnimation.type = 'BlitzBlurred Torch';\n              lightAnimation.blurStrength = 20;\n              lightAnimation.ratioDamper = 9;\n              lightAnimation.secondaryColor = '#e25822';\n              flags.CommunityLighting.blurStrength = 20;\n              flags.CommunityLighting.ratioDamper = 9;\n              flags.CommunityLighting.secondaryColor = '#e25822';\n              break;\n            case \"hooded-dim\":\n              dim = 0.85;\n              bright = 0;\n              lightAnimation.type = 'BlitzBlurred Torch';\n              lightAnimation.blurStrength = 1;\n              lightAnimation.ratioDamper = 1;\n              lightAnimation.secondaryColor = '#e25822';\n              flags.CommunityLighting.blurStrength = 1;\n              flags.CommunityLighting.ratioDamper = 1;\n              flags.CommunityLighting.secondaryColor = '#e25822';\n              break;\n            case \"hooded-bright\":\n              dim = 18.75;\n              bright = 9.75;\n              lightAnimation.type = 'BlitzBlurred Torch';\n              lightAnimation.blurStrength = 20;\n              lightAnimation.ratioDamper = 6;\n              lightAnimation.secondaryColor = '#e25822';\n              flags.CommunityLighting.blurStrength = 20;\n              flags.CommunityLighting.ratioDamper = 6;\n              flags.CommunityLighting.secondaryColor = '#e25822';\n              break;\n            case \"torch\":\n              dim = 12.75;\n              bright = 6.75;\n              lightAnimation.type = 'BlitzBlurred Torch';\n              lightAnimation.blurStrength = 20;\n              lightAnimation.ratioDamper = 3;\n              lightAnimation.secondaryColor = '#e25822';\n              flags.CommunityLighting.blurStrength = 20;\n              flags.CommunityLighting.ratioDamper = 3;\n              flags.CommunityLighting.secondaryColor = '#e25822';\n              break;\n            case \"light\":\n              dim = 12.75;\n              bright = 6.75;\n              tintColor = '';\n              lightAnimation.type = 'BlitzStatic Blur';\n              lightAnimation.blurStrength = 20;\n              flags.CommunityLighting.blurStrength = 20;\n              break;\n            case \"nochange\":\n            default:\n              flags = light.data.flags;\n              dim = light.data.dim;\n              tintColor = light.data.tintColor;\n              lightAnimation = light.data.lightAnimation;\n              bright = light.data.bright;\n              angle = light.data.angle;\n              tintAlpha = light.data.tintAlpha;\n              darknessThreshold = light.data.darknessThreshold;\n              hidden = light.data.hidden;\n          }\n          // Update light\n          light.update({\n            flags: flags,\n            dim: dim,\n            tintColor: tintColor,\n            lightAnimation: lightAnimation,\n            bright: bright,\n            angle: angle,\n            tintAlpha: tintAlpha,\n            darknessThreshold: darknessThreshold,\n            hidden: hidden\n          });\n        }\n      }\n\n      if (turnOnOff === true) {\n        for (let light of canvas.lighting.objects.children) {\n          light.update({\n            hidden: !light.data.hidden\n          });\n        }\n      }\n    }\n  }\n}).render(true);","author":"amdu4xTh7PPZZgSP","img":"systems/pf2e/icons/equipment/consumables/other-consumables/spell-scroll.webp","actorIds":[]}
{"name":"Frappe: Faux de frappe sanglante +2","permission":{"default":0,"IbFFlYNqPrUsFGvN":3},"type":"script","sort":100001,"flags":{"pf2e":{"actionMacro":true}},"scope":"global","command":"game.pf2e.rollActionMacro('0pzMt17lBYJc7ydd', 2, 'Faux de frappe sanglante +2')","author":"IbFFlYNqPrUsFGvN","img":"icons/weapons/sickles/scythe-wrapped-worn-red.webp","actorIds":[],"_id":"r2Fz4c8Ogfb5kH4D"}
{"_id":"sSf1sNj05DYuVGLn","name":"Pluie","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":1000000,"flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"Hooks.call('switchWeather', {name: \"7T0JJT6S3L\", type: \"raintop\", options: {density: 6, speed: 53, scale: 33}});","author":"amdu4xTh7PPZZgSP","img":"modules/fxmaster/icons/weather/rain.png","actorIds":[]}
{"_id":"wUNb2TfULY5chNLD","name":"Nuit","permission":{"default":0,"amdu4xTh7PPZZgSP":3},"type":"script","sort":1900000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"canvas.scene.update({darkness: 1.0})","author":"amdu4xTh7PPZZgSP","img":"icons/night.jpg","actorIds":[]}
{"_id":"ydRfyIBe67Czq8fV","name":"Rage partagée (Bellis)","type":"script","author":"tKgEjDr2hbqgTATC","img":"systems/pf2e/icons/features/classes/rage.webp","scope":"global","command":"(async () => {\n  if (actor) {\n    if ((actor.data.data.customModifiers['ac'] || []).some(modifier => modifier.name === 'Rage partagée')) {\n      MacroMarker.toggle(this)\n      await actor.removeCustomModifier('ac', 'Rage partagée')\n      await actor.removeCustomModifier('damage', 'Rage partagée')\n      /// Remove the line below if you do not wish for your character to lose all temp hp when toggled \"off\".\n      await actor.update({ 'data.attributes.hp.temp': 0 });\n      /// Remove the line above if you do not wish for your character to lose all temp hp when toggled \"off\".\n      if (token && token.data.effects.includes(\"systems/pf2e/icons/features/classes/rage.webp\")) {\n        token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.webp\")\n      }\n      TokenMagic.deleteFilters(token)\n    } else {\n      MacroMarker.toggle(this)\n      const tmpHP = (actor.data.data.details.level.value + actor.data.data.abilities.con.mod);\n      if (actor.data.data.attributes.hp.temp < tmpHP) {\n        await actor.update({ 'data.attributes.hp.temp': tmpHP });\n      }\n      await actor.addCustomModifier('ac', 'Rage partagée', -1, 'untyped');\n      await actor.addCustomModifier('damage', 'Rage partagée', 2, 'status');\n      if (token && !token.data.effects.includes(\"systems/pf2e/icons/features/classes/rage.webp\")) {\n        token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.webp\")\n      }\n      TokenMagic.addFilters(token, [{\n        filterType: \"fire\",\n        intensity: 1,\n        color: 0xffffff,\n        amplitude: 1,\n        time: 0,\n        blend: 2,\n        fireBlend: 1,\n        animated:\n        {\n          time:\n          {\n            active: true,\n            speed: -0.0019,\n            animType: \"move\"\n          },\n          intensity:\n          {\n            active: true,\n            loopDuration: 15485,\n            val1: 1,\n            val2: 2,\n            animType: \"syncCosOscillation\"\n          },\n          amplitude:\n          {\n            active: true,\n            loopDuration: 4567,\n            val1: 0.2,\n            val2: 1,\n            animType: \"syncCosOscillation\"\n          }\n\n        }\n      }])\n    }\n  } else {\n    ui.notifications.warn(\"You must have an actor selected.\");\n  }\n})();","folder":null,"sort":100001,"permission":{"default":0,"tKgEjDr2hbqgTATC":3},"flags":{"macro-marker":{"activeData":{"icon":"systems/pf2e/icons/features/classes/rage.webp","tooltip":"Rage partagée (Bellis)","colour":"#f7d488","trigger":""},"markers":{"markers":{"ydRfyIBe67Czq8fV":true},"type":"Macro"}},"combat-utility-belt":{"macroTrigger":""}}}
