(()=>{"use strict";const COC7={eras:{standard:"CoC7.Era1920",modern:"CoC7.EraModern",modernPulp:"CoC7.EraModernPulp",pulp:"CoC7.EraPulp",downDarkerTrails:"CoC7.EraDownDarkerTrails",downDarkerTrailsPulp:"CoC7.EraDownDarkerTrailsPulp",darkAges:"CoC7.EraDarkAges",darkAgesPulp:"CoC7.EraDarkAgesPulp",regency:"CoC7.EraRegency",regencyPulp:"CoC7.EraRegencyPulp",gasLight:"CoC7.EraGasLight",invictus:"CoC7.EraInvictus"},monetaryFormatKeys:{decimalLeft:"decimalLeft",decimalRight:"decimalRight",integerLeft:"integerLeft",integerRight:"integerRight",lsd:"lsd",roman:"roman"},monetaryFormats:{decimalLeft:"CoC7.MonetaryFormatDecimalLeft",decimalRight:"CoC7.MonetaryFormatDecimalRight",integerLeft:"CoC7.MonetaryFormatIntegerLeft",integerRight:"CoC7.MonetaryFormatIntegerRight",lsd:"CoC7.MonetaryFormatLsd",roman:"CoC7.MonetaryFormatRoman"},monetaryTypeKeys:{none:"none",asses:"asses",sestertii:"sestertii",quinarii:"quinarii",denarii:"denarii",d:"d",s:"s",value:"value",multiplier:"multiplier"},monetaryTypes:{none:{name:"CoC7.MonetaryTypeNone",filter:[]},asses:{name:"CoC7.MonetaryTypeAsses",filter:["roman"]},sestertii:{name:"CoC7.MonetaryTypeSestertii",filter:["roman"]},quinarii:{name:"CoC7.MonetaryTypeQuinarii",filter:["roman"]},denarii:{name:"CoC7.MonetaryTypeDenarii",filter:["roman"]},d:{name:"CoC7.MonetaryTypeDeniers",filter:["lsd"]},s:{name:"CoC7.MonetaryTypeSous",filter:["lsd"]},value:{name:"CoC7.MonetaryTypeOne",filter:[]},multiplier:{name:"CoC7.MonetaryTypeCreditRating",filter:[]}},characteristics:{str:"CoC7.CharacStr",con:"CoC7.CharacCon",siz:"CoC7.CharacSiz",dex:"CoC7.CharacDex",app:"CoC7.CharacApp",int:"CoC7.CharacInt",pow:"CoC7.CharacPow",edu:"CoC7.CharacEdu"},skillProperties:{noadjustments:"CoC7.SkillNoAdjustments",noxpgain:"CoC7.SkillNoXpGain",special:"CoC7.SkillSpecial",rarity:"CoC7.SkillRarity",push:"CoC7.SkillPush",combat:"CoC7.SkillCombat",fighting:"CoC7.SkillFighting",firearm:"CoC7.SkillFirearm",requiresname:"CoC7.SkillRequiresName",keepbasevalue:"CoC7.SkillKeepBaseValue",picknameonly:"CoC7.SkillPickNameOnly",onlyone:"CoC7.SkillSpecializationIsUnique"},weaponProperties:{melee:"CoC7.Weapon.Property.Melee",rngd:"CoC7.WeaponRngd",mnvr:"CoC7.WeaponProperyManeuver",thrown:"CoC7.Weapon.Property.Thrown",shotgun:"CoC7.Weapon.Property.Shotgun",dbrl:"CoC7.WeaponDbrl",impl:"CoC7.WeaponImpl",brst:"CoC7.WeaponBrst",auto:"CoC7.WeaponAuto",ahdb:"CoC7.WeaponAhdb",addb:"CoC7.WeaponAddb",slnt:"CoC7.WeaponSlnt",spcl:"CoC7.WeaponSpcl",mont:"CoC7.WeaponMont",blst:"CoC7.WeaponBlst",stun:"CoC7.WeaponStun",rare:"CoC7.WeaponRare",burn:"CoC7.Weapon.Property.Burn"},spellProperties:{call:"CoC7.CallSpell",dismiss:"CoC7.DismissSpell",contact:"CoC7.ContactSpell",summon:"CoC7.SummonSpell",bind:"CoC7.BindSpell",enchantment:"CoC7.EnchantmentSpell",gate:"CoC7.GateSpell",combat:"CoC7.CombatSpell"},bookType:{mythos:"CoC7.MythosBook",occult:"CoC7.OccultBook",other:"CoC7.Other"},talentType:{physical:"CoC7.PhysicalTalent",mental:"CoC7.MentalTalent",combat:"CoC7.CombatTalent",miscellaneous:"CoC7.MiscellaneousTalent",basic:"CoC7.BasicTalent",insane:"CoC7.InsaneTalent",other:"CoC7.OtherTalent"},statusType:{mania:"CoC7.Mania",phobia:"CoC7.Phobia"},occupationProperties:{classic:"CoC7.Classic",lovecraftian:"CoC7.Lovecraftian",modern:"CoC7.Modern",pulp:"CoC7.Pulp"},formula:{}};COC7.formula.actor={"@STR":"this.system.characteristics.str.value","@CON":"this.system.characteristics.con.value","@SIZ":"this.system.characteristics.siz.value","@DEX":"this.system.characteristics.dex.value","@APP":"this.system.characteristics.app.value","@INT":"this.system.characteristics.int.value","@POW":"this.system.characteristics.pow.value","@EDU":"this.system.characteristics.edu.value"},COC7.formula.actorsheet={"@STR":"this.actor.system.characteristics.str.value","@CON":"this.actor.system.characteristics.con.value","@SIZ":"this.actor.system.characteristics.siz.value","@DEX":"this.actor.system.characteristics.dex.value","@APP":"this.actor.system.characteristics.app.value","@INT":"this.actor.system.characteristics.int.value","@POW":"this.actor.system.characteristics.pow.value","@EDU":"this.actor.system.characteristics.edu.value"},COC7.status={tempoInsane:"tempoInsane",indefInsane:"indefInsane",unconscious:"unconscious",criticalWounds:"criticalWounds",dying:"dying",prone:"prone",dead:"dead"},COC7.newBookName="CoC7.NewBookName",COC7.newSkillName="CoC7.NewSkillName",COC7.newSpellName="CoC7.NewSpellName",COC7.newItemName="CoC7.NewItemName",COC7.newWeaponName="CoC7.NewWeaponName",COC7.creatureFightingSkill="CoC7.creatureFightingSkill",COC7.fightingSpecializationName="CoC7.FightingSpecializationName",COC7.firearmSpecializationName="CoC7.FirearmSpecializationName",COC7.combatCards={fightBack:"CoC7.FightBack",dodge:"CoC7.Dodge",maneuver:"CoC7.Maneuver",noResponse:"CoC7.NoResponse"};class CoC7ActiveEffect extends ActiveEffect{apply(actor,change){"system.attribs.armor.value"===change.key?isNaN(change.value)||isNaN(actor.system.attribs.armor.value)||(actor.system.attribs.armor.value=Number(actor.system.attribs.armor.value)):"system.attribs.db.value"===change.key&&isNaN(change.value)&&!isNaN(actor.system.attribs.db.value)&&(actor.system.attribs.db.value=String(actor.system.attribs.db.value));return super.apply(actor,change)}static onManageActiveEffect(event,owner){event.preventDefault();const a=event.currentTarget,li=a.closest("li"),effect=li.dataset.effectId?owner.effects.get(li.dataset.effectId):null;switch(a.dataset.action){case"create":return owner.createEmbeddedDocuments("ActiveEffect",[{label:game.i18n.localize("CoC7.EffectNew"),icon:"icons/svg/aura.svg",origin:owner.uuid,"duration.rounds":"temporary"===li.dataset.effectType?1:void 0,disabled:"inactive"===li.dataset.effectType}]);case"edit":return effect.sheet.render(!0);case"delete":return effect.delete();case"toggle":return effect.update({disabled:!effect.disabled})}}_prepareDuration(){const duration=super._prepareDuration();return"seconds"===duration.type&&(duration.seconds>3600?duration.label=new Date(1e3*duration.seconds).toISOString().slice(11,19):duration.seconds>100&&(duration.label=new Date(1e3*duration.seconds).toISOString().slice(14,19))),duration}static filterActiveEffects(effect,conditionName){return foundry.utils.isNewerVersion(game.version,"11")?effect.statuses.has(conditionName):effect.flags.core?.statusId===conditionName}static getStatusKey(effect){let options=[];return foundry.utils.isNewerVersion(game.version,"11")?effect.statuses.size>0&&(options=[...effect.statuses.values()]):options=[effect.getFlag("core","statusId")],options.find((v=>Object.prototype.hasOwnProperty.call(COC7.status,v)))}get isStatus(){return"string"==typeof CoC7ActiveEffect.getStatusKey(this)}static prepareActiveEffectCategories(effects,{status=!0}={}){const categories={temporary:{type:"temporary",label:game.i18n.localize("Temporary"),effects:[]},passive:{type:"passive",label:game.i18n.localize("Passive"),effects:[]},inactive:{type:"inactive",label:game.i18n.localize("Inactive"),effects:[]},suppressed:{type:"suppressed",label:game.i18n.localize("Suppressed"),effects:[],info:[game.i18n.localize("Unavailable")]}};status&&(categories.status={type:"status",label:game.i18n.localize("Status"),effects:[]});for(const e of effects)e.isSuppressed?categories.suppressed.effects.push(e):e.isStatus?categories.status.effects.push(e):e.disabled?categories.inactive.effects.push(e):e.isTemporary?categories.temporary.effects.push(e):categories.passive.effects.push(e);return categories.suppressed.hidden=!categories.suppressed.effects.length,categories}static prepareNPCActiveEffectCategories(effects){let count=0;const categories={active:{type:"active",label:game.i18n.localize("Active"),effects:[]},inactive:{type:"inactive",label:game.i18n.localize("Inactive"),effects:[]}};for(const e of effects)count+=1,e._getSourceName(),e.isSuppressed||e.disabled?categories.inactive.effects.push(e):categories.active.effects.push(e);return count>0&&(categories.expended=!0),categories}}class CoC7Dice{static async roll(modif=0,rollMode=null,hideDice=!1){let roll,alternativeDice="";game.modules.get("dice-so-nice")?.active&&(modif<0?alternativeDice=game.settings.get("CoC7","tenDiePenalty"):modif>0&&(alternativeDice=game.settings.get("CoC7","tenDieBonus"))),roll=game.CoC7.dev.dice.alwaysCrit&&game.settings.get("CoC7","hiddendevmenu")?Roll.fromData(CoC7Dice.crit01):game.CoC7.dev.dice.alwaysFumble&&game.settings.get("CoC7","hiddendevmenu")?Roll.fromData(CoC7Dice.fumble99):await new Roll("1dt"+(""!==alternativeDice?"+1do["+alternativeDice+"]":"+1dt").repeat(Math.abs(modif))+"+1d10").roll({async:!0});const result={unit:{total:0,results:[]},tens:{total:0,results:[]},total:0,roll};rollMode&&(result.rollMode=rollMode),hideDice&&(result.hideDice=hideDice);for(const d of roll.dice)d instanceof CONFIG.Dice.terms.t?result.tens.results.push(d.total):(result.unit.total=10===d.total?0:d.total,result.unit.results.push(result.unit.total));if(modif<0)result.tens.total=0===result.unit.total&&result.tens.results.includes(0)?100:Math.max(...result.tens.results);else if(0===result.unit.total){const dice=result.tens.results.filter((t=>t>0));result.tens.total=0===dice.length?100:Math.min(...dice)}else result.tens.total=Math.min(...result.tens.results);return result.total=result.unit.total+result.tens.total,result}static async showRollDice3d(roll){if(game.modules.get("dice-so-nice")?.active){const syncDice=game.settings.get("CoC7","syncDice3d"),chatData={whisper:null,blind:!1};ChatMessage.applyRollMode(chatData,game.settings.get("core","rollMode")),await game.dice3d.showForRoll(roll,game.user,syncDice,chatData.whisper,chatData.blind)}}static async combinedRoll(options){options.pool=options.pool??{},options.pool[0]=!1;const keys=Object.keys(options.pool).map((v=>parseInt(v,10)));let penaltyDice=Math.abs(Math.min(0,Math.min(...keys))),bonusDice=Math.max(0,Math.max(...keys));const hasDSN=game.modules.get("dice-so-nice")?.active,pool=[];pool.push("1dt+1d10"),penaltyDice>0&&pool.push((hasDSN?"+1do["+game.settings.get("CoC7","tenDiePenalty")+"]":"1dt").repeat(Math.abs(penaltyDice))),bonusDice>0&&pool.push((hasDSN?"+1do["+game.settings.get("CoC7","tenDieBonus")+"]":"1dt").repeat(Math.abs(bonusDice)));const roll=await new Roll(pool.join("")).roll({async:!0}),result={groups:{baseDie:0,penaltyDice:[],bonusDice:[]},unit:0,roll};let baseSet=!1;for(const d of roll.dice)d instanceof CONFIG.Dice.terms.t?baseSet?penaltyDice>0?(result.groups.penaltyDice.push(d.total),penaltyDice--):(result.groups.bonusDice.push(d.total),bonusDice--):(result.groups.baseDie=d.total,baseSet=!0):result.unit=10===d.total?0:d.total;const output={};for(const key in options.pool){output[key]={unit:{total:result.unit,results:[result.unit]},tens:{total:0,results:[]},total:0,roll};const modif=parseInt(key,10);let modifier=modif;output[key].tens.results.push(result.groups.baseDie);for(const offset=Math.abs(modifier);modifier<0;modifier++)output[key].tens.results.push(result.groups.penaltyDice[modifier+offset]);for(const offset=modifier;modifier>0;modifier--)output[key].tens.results.push(result.groups.bonusDice[Math.abs(modifier-offset)]);if(modif<0)output[key].tens.total=0===output[key].unit.total&&output[key].tens.results.includes(0)?100:Math.max(...output[key].tens.results);else if(0===output[key].unit.total){const dice=output[key].tens.results.filter((t=>t>0));output[key].tens.total=0===dice.length?100:Math.min(...dice)}else output[key].tens.total=Math.min(...output[key].tens.results);output[key].total=output[key].unit.total+output[key].tens.total}return output}static fumble99={class:"Roll",options:{},dice:[],formula:"1dt + 1d10",terms:[{class:"CoC7DecaderDie",options:{},evaluated:!0,number:1,faces:10,modifiers:[],results:[{result:9,active:!0}]},{class:"OperatorTerm",options:{},evaluated:!0,operator:"+"},{class:"Die",options:{},evaluated:!0,number:1,faces:10,modifiers:[],results:[{result:9,active:!0}]}],total:99,evaluated:!0};static crit01={class:"Roll",options:{},dice:[],formula:"1dt + 1d10",terms:[{class:"CoC7DecaderDie",options:{},evaluated:!0,number:1,faces:10,modifiers:[],results:[{result:10,active:!0}]},{class:"OperatorTerm",options:{},evaluated:!0,operator:"+"},{class:"Die",options:{},evaluated:!0,number:1,faces:10,modifiers:[],results:[{result:1,active:!0}]}],total:1,evaluated:!0}}class CoC7Item extends Item{constructor(data,context){if(data.type in CONFIG.Item.documentClasses&&!context?.extended)return new CONFIG.Item.documentClasses[data.type](data,{extended:!0,...context});void 0===data.img&&("skill"===data.type?data.img="systems/CoC7/assets/icons/skills.svg":"status"===data.type?data.img="icons/svg/aura.svg":"weapon"===data.type&&(data.img="icons/svg/sword.svg")),super(data,context)}async _createDocumentLink(eventData,{relativeTo,label}={}){if("string"==typeof eventData.type&&"string"==typeof eventData.uuid&&"Item"===eventData.type&&eventData.uuid.match(/^Actor\./)&&relativeTo instanceof CONFIG.JournalEntryPage.documentClass){const item=await fromUuid(eventData.uuid);if(["skill","weapon"].includes(item.type))return"@coc7.check[type:"+item.type+",name:"+item.name+"]"}return super._createDocumentLink(eventData,{relativeTo,label})}static get iconLanguage(){return"systems/CoC7/assets/icons/skills/language.svg"}static get flags(){return{malfunction:"malfc"}}async toggleProperty(propertyId,override=!1){let fighting,firearms,checkedProps={};if(void 0!==COC7.eras[propertyId])return CoCIDEditor.eraToggle(this,propertyId);if("weapon"!==this.type||override){if("skill"===this.type&&!override){let modif=!1;if("combat"===propertyId&&(this.system.properties.combat?checkedProps={"system.properties.combat":!1,"system.properties.special":!1,"system.properties.fighting":!1,"system.properties.firearm":!1,"system.specialization":"",name:this.system.skillName}:this.system.properties.firearm?firearms=!0:fighting=!0,modif=!0),"fighting"===propertyId&&(this.system.properties.fighting?(firearms=!0,fighting=!1):(firearms=!1,fighting=!0),modif=!0),"firearm"===propertyId&&(this.system.properties.firearm?(firearms=!1,fighting=!0):(firearms=!0,fighting=!1),modif=!0),modif){if(fighting){checkedProps={"system.properties.fighting":!0,"system.properties.firearm":!1,"system.properties.combat":!0,"system.properties.special":!0};const parts=CoC7Item.getNamePartsSpec(this.system.skillName,game.i18n.localize(COC7.fightingSpecializationName));checkedProps.name=parts.name,checkedProps.skillName=parts.skillName,checkedProps["system.specialization"]=parts.specialization}if(firearms){checkedProps={"system.properties.fighting":!1,"system.properties.firearm":!0,"system.properties.combat":!0,"system.properties.special":!0};const parts=CoC7Item.getNamePartsSpec(this.system.skillName,game.i18n.localize(COC7.firearmSpecializationName));checkedProps.name=parts.name,checkedProps.skillName=parts.skillName,checkedProps["system.specialization"]=parts.specialization}}}}else if("ahdb"===propertyId&&(checkedProps=this.system.properties.ahdb?{"system.properties.ahdb":!1}:{"system.properties.ahdb":!0,"system.properties.addb":!1}),"addb"===propertyId&&(checkedProps=this.system.properties.addb?{"system.properties.addb":!1}:{"system.properties.addb":!0,"system.properties.ahdb":!1}),"shotgun"===propertyId&&(checkedProps=this.system.properties.shotgun?{"system.properties.shotgun":!1,"system.range.extreme.value":null,"system.range.extreme.damage":null,"system.range.long.value":null,"system.range.long.damage":null}:{"system.properties.rngd":!0,"system.properties.melee":!1,"system.properties.shotgun":!0}),"melee"===propertyId||"rngd"===propertyId){let meleeWeapon;"melee"!==propertyId||this.system.properties.melee||(meleeWeapon=!0),"melee"===propertyId&&this.system.properties.melee&&(meleeWeapon=!1),"rngd"!==propertyId||this.system.properties.rngd||(meleeWeapon=!1),"rngd"===propertyId&&this.system.properties.rngd&&(meleeWeapon=!0),checkedProps=meleeWeapon?{"system.properties.melee":!0,"system.properties.rngd":!1,"system.properties.shotgun":!1,"system.properties.brst":!1,"system.properties.auto":!1,"system.properties.dbrl":!1}:{"system.properties.melee":!1,"system.properties.rngd":!0}}if("special"===propertyId&&(checkedProps=this.system.properties[propertyId]?{"system.properties.special":!1,"system.properties.fighting":!1,"system.properties.firearm":!1,"system.properties.combat":!1,"system.specialization":"",name:this.system.skillName}:{"system.properties.special":!0,name:this.system.specialization+" ("+this.system.skillName+")"}),Object.keys(checkedProps).length>0){return await this.update(checkedProps)}{const propName=`system.properties.${propertyId}`,propValue=!this.system.properties[propertyId];await this.update({[propName]:propValue}).then((item=>item))}}hasProperty(propertyId){return this.isIncludedInSet("properties",propertyId)}get shortName(){return this.system.properties.special?this.system.skillName:this.name}async updateRoll(roll){return"updateRoll"in this.sheet?await this.sheet.updateRoll(roll):"updateRoll"in this?await this.updateRoll(roll):void 0}static getNamePartsSpec(skillName,specialization){if(!specialization)return{name:skillName,specialization:"",skillName};const specNameRegex=new RegExp("^("+CoC7Utilities.quoteRegExp(specialization)+")\\s*\\((.+)\\)$","i"),match=skillName.match(specNameRegex);return match&&(specialization=match[1],skillName=match[2]),{name:specialization+" ("+skillName+")",specialization,skillName}}static getNameWithoutSpec(item){if(item instanceof CoC7Item){if(item.system?.properties?.special&&void 0!==item.system.skillName)return item.system.skillName}else if(item.properties?.special&&void 0!==item.skillName)return item.skillName;return item.name}static isAnySpec(item){return!("skill"!==item.type||!item.system.properties?.special)&&(!(!item.system.properties?.requiresname&&!item.system.properties?.picknameonly)||[game.i18n.localize("CoC7.AnySpecName").toLowerCase(),"any"].includes(CONFIG.Item.documentClasses.skill.guessNameParts(item.name).skillName.toLowerCase()))}async checkSkillProperties(){if("skill"!==this.type)return;const checkedProps={};return this.system.properties.combat?(this.system.properties.special||(this.system.properties.special=!0,checkedProps["system.properties.special"]=!0),this.system.properties.fighting||this.system.properties.firearm||(this.system.properties.fighting=!0,checkedProps["system.properties.fighting"]=!0),!this.system.properties.fighting||this.system.specialization&&""!==this.system.specialization||(this.system.specialization=game.i18n.localize(COC7.fightingSpecializationName),checkedProps["system.specialization"]=game.i18n.localize(COC7.fightingSpecializationName)),!this.system.properties.firearm||this.system.specialization&&""!==this.system.specialization||(this.system.specialization=game.i18n.localize(COC7.firearmSpecializationName),checkedProps["system.specialization"]=game.i18n.localize(COC7.firearmSpecializationName))):(this.system.properties.fighting&&(this.system.properties.fighting=!1,checkedProps["system.properties.fighting"]=!1),this.system.properties.firearm&&(this.system.properties.firearm=!1,checkedProps["system.properties.firearm"]=!1)),Object.keys(checkedProps).length>0&&await this.update(checkedProps),checkedProps}isIncludedInSet(set,propertyId){this.system[set]||(this.system[set]=[]);return this.system[set].indexOf(propertyId)>-1}async flagForDevelopement(){(game.settings.get("CoC7","xpEnabled")||game.user.isGM)&&(this.system.flags||await this.update({"system.flags":{}}),await this.update({"system.flags.developement":!0}))}async unflagForDevelopement(){(game.settings.get("CoC7","xpEnabled")||game.user.isGM)&&(this.system.flags||await this.update({"system.flags":{}}),await this.update({"system.flags.developement":!1}))}get developementFlag(){return this.getItemFlag("developement")}async toggleItemFlag(flagName,eraseAdjustment=!0){const flagValue=!this.getItemFlag(flagName),name=`system.flags.${flagName}`;"occupation"!==flagName&&"archetype"!==flagName||flagValue||!eraseAdjustment?"developement"===flagName?game.settings.get("CoC7","xpEnabled")||game.user.isGM?await this.update({[name]:flagValue}):ui.notifications.info(game.i18n.localize("CoC7.SkillXpGainDisabled")):await this.update({[name]:flagValue}):await this.update({[`system.adjustments.${flagName}`]:null,[name]:flagValue})}async setItemFlag(flagName){await this.update({[`system.flags.${flagName}`]:!0})}async unsetItemFlag(flagName,eraseAdjustment=!0){const name=`system.flags.${flagName}`;"occupation"!==flagName&&"archetype"!==flagName||!eraseAdjustment?await this.update({[name]:!1}):await this.update({[`system.adjustments.${flagName}`]:null,[name]:!1})}getItemFlag(flagName){return this.system.flags?!!this.system.flags[flagName]&&this.system.flags[flagName]:(this.system.flags={},this.system.flags.locked=!0,this.update({"system.flags":{}}),!1)}get usesAlternativeSkill(){return"weapon"===this.type&&(!0===this.system.properties?.auto||!0===this.system.properties?.brst||!0===this.system.properties?.thrown)}get maxUsesPerRound(){if("weapon"!==this.type)return null;const multiShot=parseInt(this.system.usesPerRound.max);return isNaN(multiShot)?0:multiShot}get usesPerRound(){if("weapon"!==this.type)return null;const singleShot=parseInt(this.system.usesPerRound.normal);return isNaN(singleShot)?0:singleShot}get usesPerRoundString(){let usesPerRound;return usesPerRound=this.system.usesPerRound.normal?this.system.usesPerRound.normal:"1",this.system.usesPerRound.max&&(usesPerRound+=`(${this.system.usesPerRound.max})`),this.system.properties.auto&&(usesPerRound+=` ${game.i18n.localize("CoC7.WeaponAuto")}`),this.system.properties.brst&&(usesPerRound+=` ${game.i18n.localize("CoC7.WeaponBrst")}`,this.system.usesPerRound.burst&&(usesPerRound+=`(${this.system.usesPerRound.burst})`)),usesPerRound}get multipleShots(){return"weapon"!==this.type?null:!(this.maxUsesPerRound<=1)}get singleShot(){return"weapon"!==this.type?null:!!this.usesPerRound}get baseRange(){return parseInt(this.system.range.normal.value)}get longRange(){return parseInt(this.system.range.long.value)}get extremeRange(){return parseInt(this.system.range.extreme.value)}get skillProperties(){if("skill"!==this.type)return[];const skillProperties=[];for(const[key,value]of Object.entries(COC7.skillProperties))!0===this.system.properties[key]&&skillProperties.push(game.i18n.localize(value));return skillProperties}static async calculateBase(actor,data){if("skill"!==data.type)return null;if(String(data.system.base).includes("@")){const parsed={};for(const[key,value]of Object.entries(COC7.formula.actorsheet))key.startsWith("@")&&value.startsWith("this.actor.")&&(parsed[key.substring(1)]=foundry.utils.getProperty(actor,value.substring(11)));let value;try{value=Math.floor(new Roll(data.system.base,parsed).evaluate({maximize:!0}).total)}catch(err){value=0}return value}return isNaN(parseInt(data.system.base))?null:parseInt(data.system.base)}get _base(){if("skill"!==this.type)return[null,!1];if("string"!=typeof this.system.base)return[this.system.base,!1];if(this.system.base.includes("@")){const parsed={};for(const[key,value]of Object.entries(COC7.formula.actorsheet))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=foundry.utils.getProperty(this,value.substring(5)));let value;try{value=Math.floor(new Roll(this.system.base,parsed).evaluate({maximize:!0}).total)}catch(err){value=0}return[value,!0]}return[isNaN(parseInt(this.system.base))?null:parseInt(this.system.base),!1]}async asyncBase(){const e=this._base;return e[1]&&(console.info(`[COC7] (${this.parent?.name}) Evaluating skill ${this.name}:${this.system.base} to ${e[0]}`),await this.update({"system.base":e[0]})),e[0]}get base(){const e=this._base;return e[1]&&this.update({"system.base":e[0]}),e[0]}getBulletLeft(){return"weapon"!==this.type?null:this.system.ammo?this.system.ammo:(this.setBullets(0),0)}async reload(){if("weapon"!==this.type)return null;const maxBullet=this.system.bullets?parseInt(this.system.bullets):1;await this.setBullets(maxBullet)}async setBullets(bullets){if("weapon"!==this.type)return null;await this.update({"system.ammo":bullets||0})}async addBullet(){if("weapon"!==this.type)return null;const bullets=await this.getBulletLeft(),maxBullets=this.system.bullets?parseInt(this.system.bullets):1;bullets+1>=maxBullets?await this.setBullets(maxBullets):await this.setBullets(bullets+1)}async shootBullets(x){if("weapon"!==this.type)return null;const bullets=await this.getBulletLeft();x>bullets?await this.setBullets(0):await this.setBullets(bullets-x)}static mergeOptionalSkills(skillList,options){return skillList.concat(options).reduce(((newArray,item)=>!CoC7Item.isAnySpec(item)&&newArray.find((skill=>skill.name===item.name))?newArray:[...newArray,item]),[]).sort(CoC7Utilities.sortByNameKey)}static _getChatCardActor(card){const tokenKey=card.dataset.tokenId;if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;return new Token(tokenData).actor}}const actorId=card.dataset.actorId;return game.actors.get(actorId)||null}async getChatData(htmlOptions={}){htmlOptions.async=!0;const data=foundry.utils.duplicate(this.system);"string"==typeof data.description&&(data.description={value:data.description,special:""}),void 0===data.description.value&&(data.description.value=""),void 0===data.description.special&&(data.description.special="");const labels=[];data.description.value=await TextEditor.enrichHTML(data.description.value,htmlOptions),data.description.special=await TextEditor.enrichHTML(data.description.special,htmlOptions);const props=[],fn=this[`_${this.type}ChatData`];if(fn&&fn.bind(this)(data,labels,props,htmlOptions),"skill"===this.type)for(const[key,value]of Object.entries(COC7.skillProperties))!0===this.system.properties[key]&&props.push(value);return data.properties=props.filter((p=>!!p)),data.labels=labels,data}_weaponChatData(data,labels,props){for(const[key,value]of Object.entries(COC7.weaponProperties))!0===this.system.properties[key]&&props.push(value);let skillLabel=game.i18n.localize("CoC7.Skill"),skillName="",found=!1;if(this.system.skill.main.id){const skill=this.actor?.items.get(this.system.skill.main.id);skill&&(skillName+=CoC7Item.getNameWithoutSpec(skill),found=!0)}if(this.usesAlternativeSkill&&this.system.skill.alternativ.id){skillLabel=game.i18n.localize("CoC7.Skills");const skill=this.actor?.items.get(this.system.skill.alternativ.id);skill&&(skillName+=`/${CoC7Item.getNameWithoutSpec(skill)}`,found=!0)}found||(skillName=this.system.skill.main.name,this.usesAlternativeSkill&&this.system.skill.alternativ.name&&(skillName+=`/${this.system.skill.alternativ.name}`)),skillName&&labels.push({name:skillLabel,value:skillName}),labels.push({name:game.i18n.localize("CoC7.WeaponUsesPerRound"),value:this.usesPerRoundString}),labels.push({name:game.i18n.localize("CoC7.WeaponMalfunction"),value:this.system.malfunction?this.system.malfunction:"-"}),this.system.bullets&&labels.push({name:game.i18n.localize("CoC7.WeaponBulletsInMag"),value:this.system.bullets})}canBePushed(){return!("skill"!==this.type||!this.system.properties.push)}get impale(){return this.system.properties.impl}get isDodge(){return"skill"===this.type&&this.name.toLowerCase()===game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.dodge").toLowerCase()}}function createInlineRoll(roll){const data={cls:["inline-roll"],dataset:{}};try{data.cls.push("inline-result"),data.result=roll.total,data.title=roll.formula,data.dataset.roll=escape(JSON.stringify(roll))}catch(err){return null}const a=document.createElement("a");a.classList.add(...data.cls),a.title=data.title;for(const[k,v]of Object.entries(data.dataset))a.dataset[k]=v;return a.innerHTML=`<i class="fas fa-dice-d20"></i> ${data.result}`,a}function isCtrlKey(event){return!1!==event&&(event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode)}class chatHelper{static hyphenToCamelCase(string){return string.replace(/-([a-z])/g,(function(string){return string[1].toUpperCase()}))}static async createMessage(title,message,options={}){const messageData={};messageData.flavor=title,messageData.speaker=options.speaker||ChatMessage.getSpeaker(),options.whisper&&(messageData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER,messageData.whisper=options.whisper),void 0!==options.roll&&(messageData.roll=options.roll,messageData.type=CONST.CHAT_MESSAGE_TYPES.ROLL,messageData.rollMode=CONST.DICE_ROLL_MODES.SELF),messageData.user=game.user.id,messageData.content=message,ChatMessage.create(messageData).then((msg=>msg))}static camelCaseToHyphen(string){return string.replace(/([A-Z])/g,(function(string){return"-"+string.toLowerCase()}))}static getActorFromKey(key){if(!key)return null;if(CoC7Utilities.isDocumentUuid(key))return CoC7Utilities.isDocumentUuidPack(key)?fromUuid(key):CoC7Utilities.SfromUuid(key);if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];const token=chatHelper.getTokenFromKey(key);return token?.actor}return game.actors.get(key)||null}static getSpeakerFromKey(actorKey){const speaker={},actor=chatHelper.getActorFromKey(actorKey);if(actorKey.includes(".")){const[sceneId,tokenId]=actorKey.split(".");speaker.token=tokenId,speaker.scene=sceneId,actor.token?.name&&(speaker.alias=actor.token.name),speaker.actor=actor.id}else speaker.actor=actorKey,speaker.alias=actor.name;return speaker}static attachObjectToElement(object,element,objectName=""){for(const prop of Object.keys(object))prop.startsWith("_")||("object"==typeof object[prop]?chatHelper.attachObjectToElement(object[prop],element,`${objectName}:${prop}:`):element.dataset[`${objectName}${prop}`]=object[prop])}static getObjectFromElement(object,element){function deserialize(obj,key,value){if(key.startsWith(":")){const s=key.slice(1),objProp=s.slice(s.indexOf(":")+1),objName=s.substring(0,s.indexOf(":"));void 0===obj[objName]&&(obj[objName]={}),deserialize(obj[objName],objProp,value)}else"true"===value?obj[key]=!0:"false"===value?obj[key]=!1:Number(value).toString()===value?obj[key]=Number(value):obj[key]=value}if(element&&object)for(const prop of Object.keys(element.dataset)){if("template"===prop)return;deserialize(object,prop,element.dataset[prop])}}static getTokenFromKey(key){if(!key)return null;if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId){const tokenDoc=game.actors.tokens[tokenId]?.token;return tokenDoc.object}{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;const token=new Token(tokenData);return token.scene||(token.scene=foundry.utils.duplicate(scene.document)),token}}{const actor=game.actors.get(key);return chatHelper.getActorToken(actor)}}static getActorToken(actor){return actor?actor.token||actor.prototypeToken:null}static getActorImgFromKey(actorKey){if(!actorKey)return null;if(game.settings.get("CoC7","useToken")){const token=chatHelper.getTokenFromKey(actorKey);if(token&&(token.document||token).texture.src&&-1===(token.document||token).texture.src.indexOf("*"))return(token.document||token).texture.src}const actor=chatHelper.getActorFromKey(actorKey);return game.settings.get("CoC7","useToken")&&actor.prototypeToken&&actor.prototypeToken.texture.src&&-1===actor.prototypeToken.texture.src?.indexOf("*")?actor.prototypeToken.texture.src:actor.img}static getDistance(startToken,endToken){if(void 0===endToken.center&&void 0!==endToken.id&&startToken.scene?.id){const scene=game.scenes.get(startToken.scene.id);if(void 0!==scene?.tokens){const tokens=scene?.tokens.filter((token=>token.actor.id===endToken.data.document.id)).map((token=>token.object));1===tokens.length&&(endToken=tokens[0])}}let distance={gridUnit:0,value:0,unit:canvas.scene.grid.units};if(void 0!==startToken&&void 0!==startToken.center&&void 0!==endToken&&void 0!==endToken.center){const ray=new Ray(startToken.center,endToken.center),segment=[{ray}];if(distance={gridUnit:ray.distance/canvas.scene.grid.size,value:canvas.grid.measureDistances(segment,{gridSpaces:game.settings.get("CoC7","gridSpaces")})[0],unit:canvas.scene.grid.units},game.settings.get("CoC7","distanceElevation")){const elevation=Math.abs((startToken.document.elevation||0)-(endToken.document.elevation||0));distance.value=Math.sqrt(distance.value*distance.value+elevation*elevation)}}else game.settings.get("CoC7","distanceTheatreOfTheMind")||ui.notifications.warn(game.i18n.localize("CoC7.MessageDistanceCalculationFailure"));return distance}static toYards(distance){return"ft"===distance.unit?distance.value/3:distance.value}}class CoC7Roll{static getFromCard(card){const rollDiv=card.querySelector("div.dice-roll");if(!rollDiv)return null;const roll=new CoC7Roll;return chatHelper.getObjectFromElement(roll,rollDiv),roll}get resultType(){switch(this.successLevel=parseInt(this.successLevel),this.successLevel){case CoC7Check.successLevel.regular:return game.i18n.format("CoC7.RegularSuccess");case CoC7Check.successLevel.hard:return game.i18n.format("CoC7.HardSuccess");case CoC7Check.successLevel.extreme:return game.i18n.format("CoC7.ExtremeSuccess");case CoC7Check.successLevel.critical:return game.i18n.format("CoC7.CriticalSuccess");case CoC7Check.successLevel.fumble:return game.i18n.format("CoC7.Fumble");case CoC7Check.successLevel.failure:return game.i18n.format("CoC7.Failure");default:return null}}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get item(){return this.itemId&&this.actor?this.actor.items.get(this.itemId):null}get skill(){return this.skillId&&this.actor?this.actor.items.get(this.skillId):null}showDiceRoll(){if(game.modules.get("dice-so-nice")?.active){const diceResults=[];for(const dieResult of this.dices.tens)diceResults.push(100===dieResult.value?0:dieResult.value/10);diceResults.push(this.dices.unit.value);const diceData={formula:`${this.dices.tens.length}d100+1d10`,results:diceResults,whisper:null,blind:!1};game.dice3d.show(diceData)}}static getFromElement(element,object=null){if(!element)return;const roll=object||new CoC7Roll;chatHelper.getObjectFromElement(roll,element),roll.dices={tens:[],unit:{}},chatHelper.getObjectFromElement(roll.dices,element.querySelector(".dice-result")),roll.dices.hasBonus=0!==roll.diceModifier,roll.dices.bonus=Math.abs(roll.diceModifier),roll.dices.bonusType=roll.diceModifier<0?game.i18n.format("CoC7.DiceModifierPenalty"):game.i18n.format("CoC7.DiceModifierBonus");const tenDice=element.querySelector(".ten-dice");if(tenDice)for(const d of tenDice.querySelectorAll("li")){const die={selected:!1,isMax:!1,isMin:!1,value:-1};chatHelper.getObjectFromElement(die,d),roll.dices.tens.push(die)}const unitDie=element.querySelector(".unit-die")?element.querySelector(".unit-die").querySelector("li"):null;roll.dices.unit.value=unitDie?parseInt(unitDie.dataset.value):null,roll.increaseSuccess=[];const increaseSuccess=element.querySelector(".increase-success");if(increaseSuccess&&increaseSuccess.querySelectorAll("button"))for(const isl of increaseSuccess.querySelectorAll("button")){const newSuccesLevel={};chatHelper.getObjectFromElement(newSuccesLevel,isl),roll.increaseSuccess.push(newSuccesLevel)}return roll.luckNeeded&&(roll.luckNeededTxt=game.i18n.format("CoC7.SpendLuck",{luckNeededValue:roll.luckNeeded})),object?void 0:roll}static getFromCheck(check){const roll=new CoC7Roll;return roll.rollType=check.rollType,roll.side=check.side,roll.action=check.action,roll.refMessageId=check.refMessageId,roll.referenceMessageId=check.referenceMessageId,roll.successLevel=check.successLevel,roll.difficulty=check.difficulty,roll.skillId=check.skill?check.skill.id:null,roll.itemId=check.item?check.item.id:null,roll.diceMod=check.diceModifier,roll.value=parseInt(check.rawValue),roll.fumble=check.isFumble,roll.critical=check.isCritical,roll.characteristic=check.characteristic?check.characteristic:null,roll.result=check.dice.total,roll.actorKey=check.actor.tokenKey,check.actor.isToken?(roll.tokenId=check.actor.tokenKey,roll.actorId=null):(roll.tokenKey=null,roll.actorId=check.actor.tokenKey),roll}static attachCheckToElement(htmlElement,check){const roll=CoC7Roll.getFromCheck(check);return roll.attachToElement(htmlElement),roll}attachToElement(htmlElement){chatHelper.attachObjectToElement(this,htmlElement)}}class CoC7Damage{static getMainDie(damageString){return damageString.toLowerCase().includes("d20")?"d20":damageString.toLowerCase().includes("d12")?"d12":damageString.toLowerCase().includes("d10")?"d10":damageString.toLowerCase().includes("d8")?"d8":damageString.toLowerCase().includes("d4")?"d4":"d6"}static getFromElement(element,object=null){if(!element)return;const damage=object||{};chatHelper.getObjectFromElement(damage,element);const rolls=element.querySelector(".dice-rolls").querySelectorAll("li");damage.rolls=[];for(const r of rolls){const roll={};chatHelper.getObjectFromElement(roll,r),damage.rolls.push(roll)}return object?void 0:damage}}class AverageParentheticalTerm extends ParentheticalTerm{_evaluateSync({minimize=!1,maximize=!1}={}){const roll=this.roll||new AverageRoll(this.term);return this.roll=roll.evaluate({minimize,maximize,async:!1}),this.flavor&&this.roll.terms.forEach((t=>{t.options.flavor=t.options.flavor??this.flavor})),this}}class AverageRoll extends Roll{_evaluateSync({minimize=!1,maximize=!1}={}){return this.terms=this.terms.map((term=>{if(!(term instanceof RollTerm))throw new Error("Roll evaluation encountered an invalid term which was not a RollTerm instance");if(term.isIntermediate){term.evaluate({minimize,maximize,async:!1}),this._dice=this._dice.concat(term.dice);let total=term.total;return minimize&&maximize&&term.dice.length&&(total=Math.floor((term.dice[0].faces+1)/2*term.total)),new NumericTerm({number:total,options:term.options})}return term})),this.terms=this.constructor.simplifyTerms(this.terms),this.terms=this.terms.map((term=>{if(!term._evaluated){if(void 0!==term.faces)return new NumericTerm({number:Math.floor((term.faces+1)/2*term.number),options:term.options});term.evaluate({minimize,maximize,async:!1})}return term})),this._total=this._evaluateTotal(),this}static _splitParentheses(_formula){return this._splitGroup(_formula,{openRegexp:AverageParentheticalTerm.OPEN_REGEXP,closeRegexp:AverageParentheticalTerm.CLOSE_REGEXP,openSymbol:"(",closeSymbol:")",onClose:group=>{const fn=group.open.slice(0,-1),expression=group.terms.join(""),options={flavor:group.flavor?group.flavor.slice(1,-1):void 0},terms=[];if(fn in Math){const args=this._splitMathArgs(expression);terms.push(new MathTerm({fn,terms:args,options}))}else fn&&terms.push(fn),terms.push(new AverageParentheticalTerm({term:expression,options}));return terms}})}}class ChatCardActor{constructor(actorKey=null,fastForward=!1){this.actorKey=actorKey,this.fastForward=fastForward}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get isBlind(){return this.rollMode?(void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind):null}set isBlind(x){this._isBlind=x}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){this._rollMode=x}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}get item(){return this.itemId?this.actor.items.get(this.itemId):null}get weapon(){return this.item}get targetedTokens(){return[...game.user.targets]}get target(){return this.targetToken?this.targetToken:this.targetActor}get targetToken(){return this._targetToken||(this._targetKey?this._targetToken=chatHelper.getTokenFromKey(this._targetKey):(this._targetToken=this.targetedTokens.pop(),this._targetToken?this._targetKey=`${this._targetToken.scene.id}.${this._targetToken.id}`:this._targetToken=null)),this._targetToken}get targetActor(){return this._targetActor||(this.targetToken?this._targetActor=this.targetToken.actor:this._targetActor=chatHelper.getActorFromKey(this._targetKey)),this._targetActor}get targetKey(){return this.targetToken||this.targetActor?this._targetKey:null}get hasTarget(){return!(!this.targetToken&&!this.targetActor)}set targetKey(x){this._targetKey=x}get skills(){return this.actor.getWeaponSkills(this.itemId)}get targetImg(){const img=chatHelper.getActorImgFromKey(this.targetKey);return img||"../icons/svg/mystery-man-black.svg"}get name(){return this.token?this.token.name:this.actor.name}get targetName(){return this.target?this.target.name:"dummy"}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}async say(message,flavor=null){const speakerData={};let speaker;this.actor?(speakerData.actor=this.actor,this.token&&(speakerData.token=this.token.document),speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,flavor,content:message};["gmroll","blindroll"].includes(game.settings.get("core","rollMode"))&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}}function replacer(key,value){if(key.startsWith("__"))return;if(["_actor"].includes(key))return;return["sanCheck","intCheck"].includes(key)?value.JSONRollData:value}class SanCheckCard extends ChatCardActor{constructor(actorKey=null,sanData={},options={}){super(actorKey,void 0!==options.fastForward&&Boolean(options.fastForward)),sanData.sanReason=sanData.sanReason??"",this.sanData=sanData,this.options=options,sanData.modifier&&!isNaN(Number(sanData.modifier))&&(this.options.sanModifier=Number(sanData.modifier)),sanData.difficulty&&!isNaN(Number(sanData.difficulty))&&(this.options.sanDifficulty=Number(sanData.difficulty)),this.state={}}get isBlind(){return void 0!==this.options.isBlind?Boolean(this.options.isBlind):super.isBlind}get difficulty(){return void 0!==this.options.difficulty?this.options.difficulty:CoC7Check.difficultyLevel.regular}get modifier(){return void 0!==this.options.modifier?this.options.modifier:0}get sanLossSource(){return this.sanData.tokenKey?chatHelper.getActorFromKey(this.sanData.tokenKey):null}get involuntaryAction(){return!(!this.state.sanRolled||!this.sanCheck.isFailure&&!this.sanCheck.isFumble)}get sanLossFormula(){return this.state.sanRolled?this.sanData.sanMax&&this.sanCheck.failed?isNaN(Number(this.sanData.sanMax))?this.sanData.sanMax:Number(this.sanData.sanMax):this.sanData.sanMin&&this.sanCheck.passed?isNaN(Number(this.sanData.sanMin))?this.sanData.sanMin:Number(this.sanData.sanMin):0:null}get sanLostToReason(){return this.actor.sanLostToReason(this.sanData.sanReason)}get maxPossibleSanLoss(){return this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax)}get maxSanLoss(){return new Roll(this.sanData.sanMax.toString()).evaluate({maximize:!0}).total}get sanLossReasonEncountered(){return this.actor.sanLossReasonEncountered(this.sanData.sanReason)}get firstEncounter(){return!this.actor.mythosInsanityExperienced}get isActorLoosingSan(){return!this.actor.hasTempoInsane&&(0!==this.sanLossFormula&&(!this.sanData.sanReason||0!==this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax)||(this.state.immuneToCreature=!0,!1)))}get boutDurationText(){if(this.boutDuration){if(this.boutRealTime)return`${this.boutDuration} ${game.i18n.localize("CoC7.rounds")}`;if(this.boutSummary)return`${this.boutDuration} ${game.i18n.localize("CoC7.hours")}`}return null}get youGainCthulhuMythosString(){return this.mythosGain?game.i18n.format("CoC7.YouGainedCthulhuMythos",{value:this.mythosGain}):null}async advanceState(state){switch(state){case"keepCreatureSanData":this.state.keepCreatureSanData=!0;break;case"involuntaryActionPerformed":this.state[state]=!0,this.isActorLoosingSan||(this.state.finish=!0);break;case"sanLossApplied":await this.applySanLoss();break;case"enterBoutOfMadnessRealTime":this.boutDuration=(await new Roll("1D10").roll({async:!0})).total,this.boutRealTime=!0,this.boutSummary=!1,this.boutResult=await this.actor.enterBoutOfMadness(!0,this.boutDuration),this.state.boutOfMadnessResolved=!0,this.state.boutOfMadnessOver=!1;break;case"enterBoutOfMadnessSummary":this.boutDuration=(await new Roll("1D10").roll({async:!0})).total,this.boutRealTime=!1,this.boutSummary=!0,this.boutResult=await this.actor.enterBoutOfMadness(!1,this.boutDuration),this.state.boutOfMadnessResolved=!0,await this.triggerInsanity();break;case"boutOfMadnessOver":await this.actor.unsetCondition(COC7.status.tempoInsane),await this.triggerInsanity();break;case"noMythosGained":this.state.cthulhuMythosAwarded=!0,this.mythosGain=0;break;case"cthulhuMythosAwarded":{let amountGained=1;this.actor.mythosInsanityExperienced||(amountGained=5,await this.actor.experienceFirstMythosInsanity()),this.state.cthulhuMythosAwarded=!0;const cthulhuMythosSkill=this.actor.cthulhuMythosSkill,oldValue=cthulhuMythosSkill.data.data.adjustments.experience||0;cthulhuMythosSkill&&await cthulhuMythosSkill.update({"data.adjustments.experience":oldValue+amountGained}),this.mythosGain=amountGained;break}}}async bypassRollSan(){this.isBypassed=!0,this.sanCheck=new CoC7Check,this.sanCheck.actor=this.actorKey,this.sanCheck.attribute="san",this.sanCheck.difficulty=this.options.sanDifficulty||CoC7Check.difficultyLevel.regular,this.sanCheck.diceModifier=this.options.sanModifier||0,await this.sanCheck._perform({forceDSN:!0}),this.state.sanRolled=!0,this.state.involuntaryActionPerformed=this.sanCheck.passed,this.state.sanLossRolled=!0,this.state.ignoreSanCheck=!0,this.sanLoss=this.sanLossFormula}async rollSan(){if(this.sanCheck=new CoC7Check,this.sanCheck.actor=this.actorKey,this.sanCheck.attribute="san",this.sanCheck.difficulty=this.options.sanDifficulty||CoC7Check.difficultyLevel.regular,this.sanCheck.diceModifier=this.options.sanModifier||0,await this.sanCheck._perform({forceDSN:!0}),this.state.sanRolled=!0,this.state.involuntaryActionPerformed=this.sanCheck.passed,this.isActorLoosingSan){if("number"==typeof this.sanLossFormula)this.state.sanLossRolled=!0,this.sanData.sanReason?(this.sanLoss=this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanLossFormula),this.sanLoss<this.sanLossFormula&&(this.state.limitedLossToCreature=!0)):this.sanLoss=this.sanLossFormula;else if(this.sanCheck.isFumble)this.state.sanLossRolled=!0,this.sanLoss=this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax);else if(this.sanData.sanReason){const min=new Roll(this.sanLossFormula).evaluate({minimize:!0}).total,max=this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax);min>=max&&(this.state.sanLossRolled=!0,this.sanLoss=max,this.state.limitedLossToCreature=!0)}}else this.state.finish=!0,this.actor.hasTempoInsane&&(this.state.immuneAlreadyInBout=!0,this.sanCheck.passed||(this.state.finish=!1)),this.state.sanLossRolled=!0,this.state.sanLossApplied=!0,this.state.intRolled=!0,this.state.insanity=!1,this.sanLoss=0}async rollSanLoss(){this.sanLossRoll=new Roll(`${this.sanLossFormula}`),await this.sanLossRoll.roll({async:!0}),await CoC7Dice.showRollDice3d(this.sanLossRoll);const max=this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax);this.sanLossRoll.total>max&&(this.state.limitedLossToCreature=!0),this.sanLoss=Math.min(this.sanLossRoll.total,max),this.state.sanLossRolled=!0}async applySanLoss(){if(await this.actor.looseSan(this.sanData.sanReason,this.sanLoss),this.sanLoss>0&&(this.state.actorLostSan=!0),this.state.sanLossApplied=!0,this.actor.san<=0)return this.state.intRolled=!0,this.state.boutOfMadnessOver=!0,this.state.insanity=!0,this.state.permanentlyInsane=!0,void(this.state.finish=!0);this.sanLoss<5?(this.state.intRolled=!0,this.actor.hasIndefInsane?(this.state.insanity=!0,this.state.shaken=!0,this.state.insanityTableRolled=!1,this.state.finish=!1,this.state.intRolled=!0):(this.state.insanity=!1,this.state.shaken=!0,this.state.insanityTableRolled=!0,this.state.finish=!0)):this.state.intRolled=!1,this.actor.dailySanLoss>=this.actor.dailySanLimit&&(this.state.insanity=!0,this.state.intRolled=!0,this.state.temporaryInsane=!1,this.state.indefinitelyInsane=!0,this.state.insanityTableRolled=!1,this.state.memoryRepressed=!1,this.state.finish=!1)}async rollInt(){this.intCheck=new CoC7Check,this.intCheck.actor=this.actorKey,this.intCheck.characteristic="int",this.intCheck.difficulty=this.options.intDifficulty||CoC7Check.difficultyLevel.regular,this.intCheck.diceModifier=this.options.intModifier||0,await this.intCheck._perform({forceDSN:!0}),this.state.intRolled=!0,this.intCheck.passed||this.state.alreadyInsane?(this.state.insanity=!0,this.state.temporaryInsane=!0,this.state.indefinitelyInsane=!1,this.state.memoryRepressed=!1):(this.state.insanity=!1,this.state.temporaryInsane=!1,this.state.indefinitelyInsane=!1,this.state.memoryRepressed=!0,this.state.finish=!0)}async triggerInsanity(){this.state.boutOfMadnessOver=!0,this.state.indefinitelyInsane&&await this.actor.setCondition(COC7.status.indefInsane),this.state.finish=!0}async clearSanLossReason(){await this.actor.setReasonSanLoss(this.sanData.sanReason,0),this.sanLossReasonEncountered||(this.state.keepCreatureSanData=!0)}async updateChatCard(){if(this.state.sanRolled&&(this.__inlineSanCheck=this.sanCheck.inlineCheck.outerHTML),this.sanLossRoll){const a=createInlineRoll(this.sanLossRoll);this.__inlineSanLossRoll=a.outerHTML}this.state.intRolled&&this.intCheck&&(this.__inlineIntCheck=this.intCheck.inlineCheck.outerHTML);const html=await renderTemplate(SanCheckCard.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(JSON.stringify(this,replacer));const chatMessage=game.messages.get(this.messageId),msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}static get template(){return"systems/CoC7/templates/chat/cards/san-check.html"}static checkTargets(sanData,fastForward=!1){const targets=[...game.user.targets];if(targets.length)for(const t of targets)t.actor.isToken?SanCheckCard.create(t.actor.tokenKey,sanData,{fastForward}):SanCheckCard.create(t.actor.id,sanData,{fastForward});else ui.notifications.warn(game.i18n.localize("CoC7.WarnNoTargetsSanCheck"))}static async create(...args){const chatCard=new SanCheckCard(...args);chatCard.actor.hasIndefInsane&&(chatCard.state.alreadyInsane=!0),chatCard.actor.san<=0&&(chatCard.state.intRolled=!0,chatCard.state.boutOfMadnessOver=!0,chatCard.state.insanity=!0,chatCard.state.permanentlyInsane=!0,chatCard.state.finish=!0);const html=await renderTemplate(SanCheckCard.template,chatCard),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(JSON.stringify(chatCard,replacer)),await chatCard.say(htmlCardElement.outerHTML)}static getFromMessageId(messageId){const message=game.messages.get(messageId),htmlCard=$.parseHTML(message.content)[0].querySelector(".chat-card");return SanCheckCard.getFromCard(htmlCard)}static getFromCard(card){const sanCheckCardData=JSON.parse(unescape(card.dataset.object)),sanCheckCard=new SanCheckCard;return Object.assign(sanCheckCard,sanCheckCardData),sanCheckCard.messageId||(sanCheckCard.messageId=card.closest(".message").dataset.messageId),"Object"===sanCheckCard.sanCheck?.constructor?.name&&(sanCheckCard.sanCheck=Object.assign(new CoC7Check,sanCheckCard.sanCheck)),"Object"===sanCheckCard.intCheck?.constructor?.name&&(sanCheckCard.intCheck=Object.assign(new CoC7Check,sanCheckCard.intCheck)),"Object"===sanCheckCard.sanLossRoll?.constructor?.name&&(sanCheckCard.sanLossRoll=Roll.fromData(sanCheckCard.sanLossRoll)),sanCheckCard}}class CoC7Link{static get CHECK_TYPE(){return{CHECK:"check",SANLOSS:"sanloss",ITEM:"item",EFFECT:"effect"}}static get LINK_TYPE(){return{CHARACTERISTIC:"characteristic",ATTRIBUTE:"attribute",SKILL:"skill"}}static init(){CONFIG.CoC7Link={documentClass:CoC7Link};const body=$("body");body.on("click","a.coc7-link",CoC7Link._onLinkClick),body.on("dragstart","a.coc7-link",(event=>CoC7Link._onDragCoC7Link(event))),CONFIG.TextEditor.enrichers.push({pattern:new RegExp("@(coc7)\\.(check|effect|item|sanloss)\\[([^\\[\\]]*(?:\\[[^\\[\\]]*(?:\\[[^\\[\\]]*\\])*[^\\[\\]]*\\])*[^\\[\\]]*)\\](?:{([^}]+)})?","gi"),enricher:CoC7Link._createLink})}static _linkFromEvent(event){const a=event.currentTarget,i=a.querySelector("[data-link-icon]"),data=foundry.utils.duplicate(a.dataset),oldType=data.type;return data.type="CoC7Link",data.icon=null,oldType&&(data.linkType=oldType),data.object&&("string"==typeof data.object||data.object instanceof String)&&(data.object=JSON.parse(data.object)),i.dataset&&i.dataset.linkIcon&&"fas fa-dice"!==i.dataset.linkIcon&&(data.icon=i.dataset.linkIcon),data.displayName=a.dataset.displayName?a.innerText:null,data.difficulty&&(data.difficulty=CoC7Utilities.convertDifficulty(data.difficulty)),data}static _onDragCoC7Link(event){const data=CoC7Link._linkFromEvent(event);event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}static async fromDropData(data,options={}){const cls=new CoC7Link;cls.object=foundry.utils.mergeObject({type:"CoC7Link",check:CoC7Link.CHECK_TYPE.CHECK,linkType:CoC7Link.LINK_TYPE.SKILL,difficulty:CoC7Check.difficultyLevel.regular,modifier:0,object:{label:game.i18n.localize("CoC7.EffectNew"),icon:"icons/svg/aura.svg",changes:[]}},data);for(const key of["name","displayName","icon","id","pack","sanMin","sanMax","sanReason"])cls.object[key]=cls.object[key]??"";return void 0!==cls.object.object.icon&&void 0!==cls.object.object.external&&["http","https"].includes(cls.object.object.external)&&(cls.object.object.icon=cls.object.object.external+"://"+cls.object.object.icon),cls.options=options,cls}static _createLink(match){const name=match[4]??void 0,options=match[3]??void 0,type=match[2]??void 0,data={cls:["coc7-link"],dataset:{check:type},icon:null,blind:!1,name};if(type===CoC7Link.CHECK_TYPE.EFFECT)data.effect=JSON.parse(options),data.dataset.object=options,void 0!==data.effect.icon&&void 0!==data.effect.external&&["http","https"].includes(data.effect.external)&&(data.effect.icon=data.effect.external+"://"+data.effect.icon);else{const matches=options.matchAll(/[^,]+/gi);for(const match of Array.from(matches)){let[key,value]=match[0].split(":");"icon"===key&&(data.icon=value),"blind"===key&&void 0===value&&(value=!0,data.blind=[CoC7Link.CHECK_TYPE.CHECK].includes(type.toLowerCase())),data.dataset[key]=value}void 0!==data.dataset.icon&&void 0!==data.dataset.external&&["http","https"].includes(data.dataset.external)&&(data.dataset.icon=data.dataset.external+"://"+data.dataset.icon,data.icon=data.dataset.icon)}let title;const difficulty=CoC7Check.difficultyString(data.dataset.difficulty);switch(type.toLowerCase()){case CoC7Link.CHECK_TYPE.CHECK:{let humanName=data.dataset.name;["attributes","attribute","attrib","attribs"].includes(data.dataset.type?.toLowerCase())&&("lck"===data.dataset.name&&(humanName=game.i18n.localize("CoC7.Luck")),"san"===data.dataset.name&&(humanName=game.i18n.localize("CoC7.Sanity"))),["charac","char","characteristic","characteristics"].includes(data.dataset.type?.toLowerCase())&&(humanName=CoC7Utilities.getCharacteristicNames(data.dataset.name)?.label),title=game.i18n.format(`CoC7.LinkCheck${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}`,{difficulty,modifier:data.dataset.modifier,name:humanName});break}case CoC7Link.CHECK_TYPE.SANLOSS:title=game.i18n.format(`CoC7.LinkSanLoss${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}`,{difficulty,modifier:data.dataset.modifier,sanMin:data.dataset.sanMin,sanMax:data.dataset.sanMax});break;case CoC7Link.CHECK_TYPE.ITEM:title=game.i18n.format(`CoC7.LinkItem${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}`,{difficulty,modifier:data.dataset.modifier,name:data.dataset.name});break;case CoC7Link.CHECK_TYPE.EFFECT:title=data.effect.label}name?data.dataset.displayName=!0:data.name=title;const a=document.createElement("a");a.title=game.user.isGM?data.name:title,a.classList.add(...data.cls);for(const[k,v]of Object.entries(data.dataset))a.dataset[k]=v;return a.draggable=!0,data.icon=data.icon??data.effect?.icon??"fas fa-dice",(data.icon.includes("\\")||data.icon.includes("."))&&(data.img=data.icon),data.blind&&(a.innerHTML+='<i class="fas fa-eye-slash"></i>'),data.img?a.innerHTML+=`<img data-link-icon="${data.icon}" src="${data.img}">`:a.innerHTML+=`<i data-link-icon="${data.icon}" class="link-icon ${data.icon}"></i>`,a.innerHTML+=`<span>${data.name}</span>`,a}_createDocumentLink(eventData,{relativeTo,label}={}){if(!eventData.check)return"";switch(eventData.check.toLowerCase()){case CoC7Link.CHECK_TYPE.CHECK:{if(!eventData.linkType||!eventData.name)return"";let options=`${eventData.blind?"blind,":""}type:${eventData.linkType},name:${eventData.name}`;if(void 0!==eventData.difficulty&&eventData.difficulty!==CoC7Check.difficultyLevel.regular&&(options+=`,difficulty:${eventData.difficulty}`),void 0!==eventData.modifier&&0!==eventData.modifier&&(options+=`,modifier:${eventData.modifier}`),eventData.icon){const parts=eventData.icon.match(/^(https?):\/\/(.+)$/);options+=parts?`,external:${parts[1]},icon:${parts[2]}`:`,icon:${eventData.icon}`}eventData.pack&&(options+=`,pack:${eventData.pack}`),eventData.id&&(options+=`,id:${eventData.id}`);let link=`@coc7.check[${options}]`;const displayName=eventData.displayName??label??"";return displayName&&(link+=`{${displayName}}`),link}case CoC7Link.CHECK_TYPE.SANLOSS:{if(!eventData.sanMax||!eventData.sanMin)return"";let options=`${eventData.blind?"blind,":""}sanMax:${eventData.sanMax},sanMin:${eventData.sanMin}`;if(eventData.sanReason&&(options+=`,sanReason:${eventData.sanReason}`),eventData.difficulty&&eventData.difficulty!==CoC7Check.difficultyLevel.regular&&(options+=`,difficulty:${eventData.difficulty}`),eventData.modifier&&0!==eventData.modifier&&(options+=`,modifier:${eventData.modifier}`),eventData.icon){const parts=eventData.icon.match(/^(https?):\/\/(.+)$/);options+=parts?`,external:${parts[1]},icon:${parts[2]}`:`,icon:${eventData.icon}`}let link=`@coc7.sanloss[${options}]`;const displayName=eventData.displayName??label??"";return displayName&&(link+=`{${displayName}}`),link}case CoC7Link.CHECK_TYPE.ITEM:{if(!eventData.name)return"";let options=`${eventData.blind?"blind,":""}name:${eventData.name}`;if(eventData.icon){const parts=eventData.icon.match(/^(https?):\/\/(.+)$/);options+=parts?`,external:${parts[1]},icon:${parts[2]}`:`,icon:${eventData.icon}`}eventData.pack&&(options+=`,pack:${eventData.pack}`),eventData.id&&(options+=`,id:${eventData.id}`);let link=`@coc7.item[${options}]`;const displayName=eventData.displayName??label??"";return displayName&&(link+=`{${displayName}}`),link}case CoC7Link.CHECK_TYPE.EFFECT:{const parts=eventData.object.icon.match(/^(https?):\/\/(.+)$/);parts&&(eventData.object.external=parts[1],eventData.object.icon=parts[2]);let link=`@coc7.effect[${JSON.stringify(eventData.object)}]`;const displayName=eventData.displayName??label??"";return displayName&&(link+=`{${displayName}}`),link}}return"?"}static async _onLinkActorClick(actor,options,{shiftKey=!1}={}){switch(options.check){case CoC7Link.CHECK_TYPE.CHECK:if(["charac","char","characteristic","characteristics"].includes(options.linkType.toLowerCase()))return actor.characteristicCheck(options.name,shiftKey,options);if(["skill"].includes(options.linkType.toLowerCase()))return actor.skillCheck(options,shiftKey,options);if(["attributes","attribute","attrib","attribs"].includes(options.linkType.toLowerCase()))return actor.attributeCheck(options.name,shiftKey,options);break;case CoC7Link.CHECK_TYPE.SANLOSS:return void SanCheckCard.create(actor.actorKey,options,{fastForward:shiftKey});case CoC7Link.CHECK_TYPE.ITEM:return actor.weaponCheck(options,shiftKey);case CoC7Link.CHECK_TYPE.EFFECT:await actor.createEmbeddedDocuments("ActiveEffect",[{label:options.object.label,icon:options.object.icon,changes:options.object.changes}])}}static toChatMessage(options){const option={speaker:{alias:game.user.name}};let message;const link=(new CoC7Link)._createDocumentLink(options);message=options.check===CoC7Link.CHECK_TYPE.EFFECT?`<div class="effect-message">${link}</div>`:game.i18n.format("CoC7.MessageCheckRequestedWait",{check:link}),chatHelper.createMessage(null,message,option)}static toWhisperMessage(options,actors){for(const actor of actors){const option={speaker:{alias:game.user.name},whisper:actor.owners.map((a=>a.id))};let message;const link=(new CoC7Link)._createDocumentLink(options);message=options.check===CoC7Link.CHECK_TYPE.EFFECT?`<div class="effect-message">${link}</div>`:game.i18n.format("CoC7.MessageTargetCheckRequested",{name:actor.name,check:link}),chatHelper.createMessage(null,message,option)}}static async _onLinkClick(event){const options=CoC7Link._linkFromEvent(event);if(game.user.isGM){if(isCtrlKey(event))return void CoC7ContentLinkDialog.create(options);if(canvas.tokens.controlled.length){for(const token of canvas.tokens.controlled)CoC7Link._onLinkActorClick(token.actor,options,{shiftKey:event.shiftKey});return}const speaker=ChatMessage.getSpeaker(),actor=ChatMessage.getSpeakerActor(speaker);return actor?void CoC7Link._onLinkActorClick(actor,options,{shiftKey:event.shiftKey}):void CoC7Link.toChatMessage(options)}{const speaker=ChatMessage.getSpeaker();let actor=ChatMessage.getSpeakerActor(speaker);if(!actor){const actors=game.actors.filter((a=>(a.ownership[game.user.id]??a.ownership.default)>=CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER));1===actors.length&&(actor=actors[0])}if(actor)return void CoC7Link._onLinkActorClick(actor,options,{shiftKey:event.shiftKey})}ui.notifications.warn(game.i18n.localize("CoC7.WarnNoControlledActor"))}setValue(key,value){this.object[key]=value}get link(){return this._createDocumentLink(this.object)}get id(){return this.object.id}get pack(){return this.object.pack}get checkType(){return this.object.check}get difficulty(){return this.object.difficulty}get icon(){return this.object.icon}get displayName(){return this.object.displayName}get modifier(){return this.object.modifier}get linkType(){return this.object.linkType}get sanMin(){return this.object.sanMin}get sanMax(){return this.object.sanMax}get sanReason(){return this.object.sanReason}get effect(){return this.object.object}get checkName(){if(this.isCharacteristicCheck){const characteristics=CoCActor.getCharacteristicDefinition();return characteristics.find((c=>c.key===this.object.name||c.shortName===this.object.name||c.label===this.object.name))?.key??""}return this.object.name}get isCheck(){return this.object.check===CoC7Link.CHECK_TYPE.CHECK}get isCharacteristicCheck(){return this.isCheck&&this.object.linkType===CoC7Link.LINK_TYPE.CHARACTERISTIC}get isAttributeCheck(){return this.isCheck&&this.object.linkType===CoC7Link.LINK_TYPE.ATTRIBUTE}get isSkillCheck(){return this.isCheck&&this.object.linkType===CoC7Link.LINK_TYPE.SKILL}get isItemCheck(){return this.object.check===CoC7Link.CHECK_TYPE.ITEM}get isSanLossCheck(){return this.object.check===CoC7Link.CHECK_TYPE.SANLOSS}get isEffect(){return this.object.check===CoC7Link.CHECK_TYPE.EFFECT}get isBlind(){return this.isCheck&&this.object.blind}}class CoC7ContentLinkDialog extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"link-creation",classes:["coc7","active-effect-sheet"],title:game.i18n.localize("CoC7.CreateLink"),dragDrop:[{dragSelector:null,dropSelector:".container"}],template:"systems/CoC7/templates/apps/link-creation.html",closeOnSubmit:!1,width:560,height:"auto",tabs:[{navSelector:".tabs",contentSelector:".effect-options",initial:"details"}]})}async getData(){const sheetData=await super.getData();return sheetData.checkType=[{key:CoC7Link.CHECK_TYPE.CHECK,label:game.i18n.localize("CoC7.Check")},{key:CoC7Link.CHECK_TYPE.SANLOSS,label:game.i18n.localize("CoC7.SanityCheck")},{key:CoC7Link.CHECK_TYPE.ITEM,label:game.i18n.localize("CoC7.ItemWeapon")},{key:CoC7Link.CHECK_TYPE.EFFECT,label:game.i18n.localize("EFFECT.TabEffects")}],sheetData.linkType=[{key:CoC7Link.LINK_TYPE.CHARACTERISTIC,label:game.i18n.localize("CoC7.Characteristic")},{key:CoC7Link.LINK_TYPE.ATTRIBUTE,label:game.i18n.localize("CoC7.Attribute")},{key:CoC7Link.LINK_TYPE.SKILL,label:game.i18n.localize("CoC7.Skill")}],sheetData.attributeType=[{key:"lck",label:game.i18n.localize("CoC7.Luck")},{key:"san",label:game.i18n.localize("CoC7.Sanity")}],sheetData.effectModes=Object.entries(CONST.ACTIVE_EFFECT_MODES).reduce(((obj,e)=>(obj[e[1]]=game.i18n.localize("EFFECT.MODE_"+e[0]),obj)),{}),sheetData.characteristicType=CoCActor.getCharacteristicDefinition(),sheetData.link=sheetData.object.link,sheetData.fromGame=sheetData.link.isItemCheck||sheetData.link.isSkillCheck,sheetData.fromDirectory="fromDirectory"===sheetData.object.hasID,sheetData.fromCompendium="fromCompendium"===sheetData.object.hasID,sheetData.isSetFromGame=sheetData.link.id&&(sheetData.fromDirectory||sheetData.fromCompendium),sheetData.difficultyLevel=CoC7Check.difficultyLevel,sheetData.actorNames=sheetData.object.actors.map((a=>a.name)).join(", "),sheetData}activateListeners(html){super.activateListeners(html),html.find("select[name=type],select[name=check],select[name=attributeKey],select[name=characteristicKey],input[type=checkbox]").change(this._onChangeSubmit.bind(this)),html.find(".effect-control").click(this._onEffectControl.bind(this))}_onChangeSubmit(event){switch(event.currentTarget.name){case"fromCompendium":case"fromDirectory":this.object.hasID=event.currentTarget.name===this.object.hasID?"":event.currentTarget.name}this._onSubmit(event)}_onEffectControl(event){event.preventDefault();const button=event.currentTarget;switch(button.dataset.action){case"add":return this._addEffectChange();case"delete":button.closest(".effect-change").remove(),this._onSubmit(event)}}async _addEffectChange(){const idx=this.object.link.effect.changes.length;return this.submit({preventClose:!0,updateData:{[`effect.changes.${idx}`]:{key:"",mode:CONST.ACTIVE_EFFECT_MODES.ADD,value:""}}})}async _updateObject(event,formData){let hasEffect=!1;const effect={duration:{},changes:[]};for(const key in formData)switch(key){case"checkName":this.object.link.setValue("name",formData.checkName);break;case"blind":case"difficulty":case"displayName":case"icon":case"id":case"modifier":case"pack":case"sanMin":case"sanMax":case"sanReason":this.object.link.setValue(key,formData[key]);break;case"hasModifiers":case"hasLabel":case"hasIcon":this.object[key]=formData[key];break;case"effect.label":effect.label=formData[key],hasEffect=!0;break;case"effect.icon":effect.icon=formData[key],hasEffect=!0;break;case"effect.tint":effect.tint=formData[key],hasEffect=!0;break;case"effect.disabled":effect.disabled=formData[key],hasEffect=!0;break;case"effect.duration.seconds":effect.duration.seconds=formData[key],hasEffect=!0;break;case"effect.duration.rounds":effect.duration.rounds=formData[key],hasEffect=!0;break;case"effect.duration.turns":effect.duration.turns=formData[key],hasEffect=!0;break;default:{const match=key.match(/^effect\.changes\.(\d+)\.key$/);match&&(effect.changes.push({key:formData[key],mode:formData["effect.changes."+match[1]+".mode"],value:formData["effect.changes."+match[1]+".value"]}),hasEffect=!0)}}hasEffect&&this.object.link.setValue("object",effect);const target=event.currentTarget;if(target){switch(target.name){case"type":this.object.link.setValue("check",target.value),target.value===CoC7Link.CHECK_TYPE.CHECK&&(this.object.link.setValue("linkType",CoC7Link.LINK_TYPE.SKILL),this.object.link.setValue("name",""));break;case"check":this.object.link.setValue("linkType",target.value),target.value===CoC7Link.LINK_TYPE.CHARACTERISTIC?this.object.link.setValue("name",CoCActor.getCharacteristicDefinition()[0].key):target.value===CoC7Link.LINK_TYPE.ATTRIBUTE?this.object.link.setValue("name","lck"):this.object.link.setValue("name","");break;case"attributeKey":case"characteristicKey":this.object.link.setValue("name",target.value)}if("submit"===event.type){switch(event.submitter.dataset.action){case"clipboard":CoC7Utilities.copyToClipboard(this.object.link.link);break;case"chat":CoC7Link.toChatMessage(this.object.link.object);break;case"whisper-owner":CoC7Link.toWhisperMessage(this.object.link.object,this.object.actors);break;case"whisper-selected":if(!canvas.tokens.controlled.length)return void ui.notifications.warn(game.i18n.localize("CoC7.ErrorNoTokensSelected"));CoC7Link.toWhisperMessage(this.object.link.object,canvas.tokens.controlled.filter((t=>t.actor.owners.length)).map((t=>t.actor)))}return}}this.render(!0)}async _onDrop(event){const dataString=event.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);if("CoC7Link"===data.type)this.setLink(await CoC7Link.fromDropData(data)),this.render(!0);else if("Folder"===data.type&&"Actor"===data.documentName||["Item","Actor"].includes(data.type)){const dataList=await CoC7Utilities.getDataFromDropEvent(event,data.documentName??data.type);data.documentName??"Actor"===data.type?(this.object.actors=dataList.filter((a=>a.owners.length)),this.render(!0)):1===dataList.length&&["skill","weapon"].includes(dataList[0].type)&&(dataList[0].pack?(this.object.hasID="fromCompendium",this.object.link.setValue("pack",dataList[0].pack)):this.object.hasID="fromDirectory",this.object.link.setValue("id",dataList[0].id),this.object.link.setValue("name",dataList[0].name),this.render(!0))}}setLink(link){return this.object.link=link,""!==link.pack?this.object.hasID="fromCompendium":""!==link.id&&(this.object.hasID="fromDirectory"),link.difficulty===CoC7Check.difficultyLevel.regular&&0===parseInt(link.modifier,10)||(this.object.hasModifiers=!0),""!==link.displayName&&(this.object.hasLabel=!0),""!==link.icon&&(this.object.hasIcon=!0),""}static async create(linkData={},option={}){const object=foundry.utils.mergeObject({link:null,hasID:"",hasModifiers:!1,hasLabel:!1,hasIcon:!1,actors:[]},option),dialog=new CoC7ContentLinkDialog(object,{});dialog.setLink(await CoC7Link.fromDropData(linkData)),dialog.render(!0)}}class RollDialog{static async create(options={}){options.difficulty&&(options.difficultyLevel={},CoC7Check.difficultyLevel.unknown===options.difficulty&&(options.difficultyLevel.unknown=!0),CoC7Check.difficultyLevel.regular===options.difficulty&&(options.difficultyLevel.regular=!0),CoC7Check.difficultyLevel.hard===options.difficulty&&(options.difficultyLevel.hard=!0),CoC7Check.difficultyLevel.extreme===options.difficulty&&(options.difficultyLevel.extreme=!0)),options.name&&!options.displayName&&(options.displayName=options.name);const unknownDifficultyDefault="unknown"===game.settings.get("CoC7","defaultCheckDifficulty"),data={allowFlatDiceModifier:game.settings.get("CoC7","allowFlatDiceModifier")&&!options.disableFlatDiceModifier,allowFlatThresholdModifier:game.settings.get("CoC7","allowFlatThresholdModifier")&&!options.disableFlatThresholdModifier,difficulty:CoC7Check.difficultyLevel,unknownDifficultyDefault,hideDifficulty:options.hideDifficulty??!1,options};void 0!==options.cardType&&(!options.forcedCardType??1)&&(data.cardTypes=CoC7ChatMessage.cardTypes(options));const html=await renderTemplate("systems/CoC7/templates/apps/bonus.html",data);return new Promise((resolve=>{let formData=null;const dlg=new Dialog({title:options.displayName?game.i18n.format("CoC7.BonusSelectionWindowNamed",{name:options.displayName}):game.i18n.localize("CoC7.BonusSelectionWindow"),content:html,buttons:{roll:{label:game.i18n.localize("CoC7.RollDice"),callback:html=>(formData=new FormData(html[0].querySelector("#bonus-roll-form")),resolve(formData))}},default:"roll",close:()=>{}});dlg.render(!0)}))}}class RollCard{constructor(){this.rolls=[],this.initiator=null}static async fromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return;const card=await this.fromMessage(message);return card.messageId=messageId,card}static async fromMessage(message){const cardElement=$(message.content)[0];if(!cardElement)return;const card=await this.fromHTMLCardElement(cardElement);return card.message=message,card}static async fromHTMLCardElement(card){const cardData=JSON.parse(unescape(card.dataset.object));return await this.fromData(cardData)}static async fromData(data){const card=Object.assign(new this,data);for(let index=0;index<card.rolls.length;index++)"Object"===card.rolls[index]?.constructor?.name&&(card.rolls[index]=Object.assign(new CoC7Check,card.rolls[index]),card.rolls[index].rolled&&(card.rolls[index]._htmlRoll=await card.rolls[index].getHtmlRoll()));return card}static async _onToggle(event){event.preventDefault();const span=event.currentTarget;if(span&&span.classList.contains("gm-select-only")&&!game.user.isGM)return;const message=span.closest(".chat-message"),card=await this.fromMessageId(message.dataset.messageId);if(!card)return;const flag=span.dataset.flag;if(!flag)return;const toggle=span.closest(".toggle");if(toggle){const buttons=toggle.querySelectorAll(".toggle-switch");for(const b of buttons)card.unsetFlag(b.dataset.flag);card.setFlag(flag)}else card.toggleFlag(flag);card.updateChatCard()}static async dispatch(data){if(game.user.isGM){let card,messages=ui.chat.collection.filter((message=>this.defaultConfig.type===message.getFlag("CoC7","type")&&"resolved"!==message.getFlag("CoC7","state")&&(!["combinedCard"].includes(this.defaultConfig.type)||message.getFlag("CoC7","initiator")===data.roll.initiator)));if(messages.length){const timestamp=new Date(messages[0].timestamp);86400<(new Date-timestamp)/1e3&&(await messages[0].setFlag("CoC7","state","resolved"),messages=[])}card=messages.length?await this.fromMessage(messages[0]):new this,void 0!==data._rollMode&&(card._rollMode=data._rollMode),await card.process(data)}else game.socket.emit("system.CoC7",data)}async toMessage(){const html=await renderTemplate(this.config.template,this),htmlCardElement=$(html);htmlCardElement[0].dataset.object=escape(this.dataString);const chatData={user:game.user.id,flavor:game.i18n.localize(this.config.title),content:htmlCardElement[0].outerHTML,flags:{CoC7:{type:this.config.type,state:"initiated",initiator:this.initiator}}};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0);return await ChatMessage.create(chatData)}async updateChatCard(){if(await this.compute(),this.messageId){const html=await renderTemplate(this.config.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(this.dataString);const chatMessage=game.messages.get(this.messageId);this.closed&&await chatMessage.setFlag("CoC7","state","resolved");const msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}await this.toMessage()}updateRoll(data){data.fromGM||Object.assign(this.rolls[data.rank],data.roll)}addRollData(data){const check=Object.assign(new CoC7Check,data.roll);this.rolls.push(check),"combinedCard"===this.config.type&&(this.initiator=data.roll.initiator)}addRoll(data){this.rolls.push(data)}removeRoll(rank){this.rolls.splice(rank,1)}setFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!0)}unsetFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!1)}toggleFlag(flagName){this[flagName]=!this[flagName]}get message(){return this._message?this._message:this._messageId?game.messages.get(this._messageId):void 0}set message(x){this._message=x}get messageId(){return this._messageId?this._messageId:this._message?this._message.id:void 0}set messageId(x){this._messageId=x}static get defaultConfig(){return{exclude:["_actor","_skill","_item","_message","_htmlRoll"],excludeStartWith:"__"}}get winners(){return this.rolls.filter((r=>r.winner))}get winner(){if(this.winners.length)return this.winners[0]}get loosers(){return this.rolls.filter((r=>!r.winner))}get looser(){if(this.loosers.length)return this.loosers[0]}get hasWinner(){return this.winners.length>0}get isKeeper(){return game.user.isGM}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}get data(){return JSON.parse(this.dataString)}get dataString(){return JSON.stringify(this,((key,value)=>{if(null!==value&&!this.config.exclude?.includes(key)&&!key.startsWith(this.config.excludeStartWith))return value}))}}class CombinedCheckCard extends RollCard{static async bindListerners(html){html.on("click",".roll-card.combined .toggle-switch",this._onToggle.bind(this)),html.on("click",".roll-card.combined a",CombinedCheckCard._onClick.bind(this)),html.on("click",".roll-card.combined button",CombinedCheckCard._onClick.bind(this))}static get defaultConfig(){return foundry.utils.mergeObject(super.defaultConfig,{template:"systems/CoC7/templates/chat/cards/combined-roll.html",type:"combinedCard",title:"CoC7.CombinedRollCard"})}get config(){return CombinedCheckCard.defaultConfig}get successCount(){if(this.rolled){let count=0;for(const r of this.rolls)r.passed&&(count+=1);return count}}get mainActorKey(){return this.rolls[0]?.actor?.actorKey||void 0}get success(){if(void 0!==this.successCount)return this.any?this.successCount>0:this.all?this.successCount===this.rolls.length:void 0}get failure(){if(void 0!==this.success)return!this.success}get checkGMInitiator(){return game.users.get(this.initiator)?.isGM}async getHtmlRoll(){if(!this.rolled)return;const check=new CoC7Check;return await check._perform({roll:this._roll[check.diceModifier||0],silent:!0}),await check.getHtmlRoll({hideSuccess:!0})}process(data){switch(data.action){case"new":case"roll":this.addRollData(data);break;case"updateRoll":this.updateRoll(data);break;case"assignRoll":this.assignRoll(data)}game.user.isGM?this.updateChatCard():game.socket.emit("system.CoC7",data)}async assignRoll(data){game.user.isGM&&(this.rolled||(this.rolled=!0,this._roll=data.roll))}static async _onClick(event){event.preventDefault();const a=event.currentTarget,action=a.dataset.action,li=a.closest("li.actor-roll"),message=a.closest(".chat-message"),cardElement=a.closest("div.roll-card"),card=await CombinedCheckCard.fromHTMLCardElement(cardElement);card.messageId=message.dataset.messageId;const rank=Number(li?.dataset?.rank);switch(action){case"remove-roll":card.removeRoll(rank),await card.updateChatCard();break;case"close-card":card.closeCard(),await card.updateChatCard();break;case"roll-card":{const pool={};for(const dice of card.rolls){const diceModifier=parseInt(dice.diceModifier,10);isNaN(diceModifier)||(pool[diceModifier]=!1)}const roll=await CoC7Dice.combinedRoll({pool});roll.initiator=game.user.id;const data={type:this.defaultConfig.type,action:"assignRoll",fromGM:game.user.isGM,roll};AudioHelper.play({src:CONFIG.sounds.dice},!0),card.process(data);break}default:{const options={update:!1,data:a.dataset,classes:a.classList,target:a};await CoC7Check.alter(card.rolls[rank],action,options);const data={type:this.defaultConfig.type,action:"updateRoll",rank,fromGM:game.user.isGM,roll:{initiator:game.user.id}};game.user.isGM||(data.roll=card.rolls[rank].JSONRollData),card.process(data);break}}}async compute(){if(this._roll){this.rolls=this.rolls.filter((roll=>void 0!==roll.actor.data));for(const r of this.rolls)r.rolled||(r.modifier=r.diceModifier||0,r.difficulty=r.difficulty||CoC7Check.difficultyLevel.regular,r.flatDiceModifier=r.flatDiceModifier||0,r.flatThresholdModifier=r.flatThresholdModifier||0,await r._perform({roll:this._roll[r.modifier],silent:!0}));for(let i=0;i<this.rolls.length;i++)this.rolls[i].rolled&&(this.rolls[i]._htmlRoll=await this.rolls[i].getHtmlRoll({hideDiceResult:!0}));this._htmlRoll=await this.getHtmlRoll()}}closeCard(){this.closed=!0}}class InteractiveChatCard{constructor(options={}){this._options=options}get options(){return foundry.utils.mergeObject(this.constructor.defaultOptions,this._options)}get template(){return this.options.template}get cssClasses(){return this.options.classes}async toMessage(optionnalChatData={}){const html=await renderTemplate(this.template,this),htmlCardElement=$(html)[0];htmlCardElement.dataset.object=escape(this.dataString),htmlCardElement.dataset.cardClass=this.constructor.name,htmlCardElement.classList.add(...this.cssClasses);const chatData=foundry.utils.mergeObject({user:game.user.id,flavor:game.i18n.localize(this.options.title),content:htmlCardElement.outerHTML},optionnalChatData);["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}async updateChatCard(options={}){if(options.compute&&this.compute(),this.messageId){const html=await renderTemplate(this.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(this.dataString),htmlCardElement.dataset.cardClass=this.constructor.name,htmlCardElement.classList.add(...this.cssClasses);const chatMessage=game.messages.get(this.messageId);this.closed&&await chatMessage.setFlag("CoC7","state","resolved");const msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}this.toMessage()}activateListeners(html){html.on("click",".interactive-card .ic-radio-switch",this._onToggle.bind(this)),html.on("click",".interactive-card .ic-switch",this._onToggle.bind(this)),html.on("click",".interactive-card .submit",this._onSubmit.bind(this)),html.on("focusout","input",this._onSubmit.bind(this)),html.on("click",".interactive-card button",this._onButton.bind(this)),html.on("keydown","form",this._onKey.bind(this))}static async bindListeners(html){const htmlCardElement=html[0].querySelector(".chat-card");if(!htmlCardElement)return;if(!htmlCardElement.dataset.cardClass)return;if(!Object.getOwnPropertyNames(game.CoC7.cards).includes(htmlCardElement.dataset.cardClass))return;const card=await InteractiveChatCard.fromHTMLCardElement(htmlCardElement),typedCard=Object.assign(new game.CoC7.cards[htmlCardElement.dataset.cardClass],card);typedCard.assignObject(),typedCard.activateListeners(html)}assignObject(){}_onButton(event){const action=event.currentTarget.dataset.action;this[action]&&this[action]({event,update:!0})}_onKey(event){return"Enter"===event.key&&this._onSubmit(event),"Enter"!==event.key}_onSubmit(event){event.preventDefault();const card=event.currentTarget.closest(".interactive-card");if(!card)return;this._update(card)&&this.updateChatCard()}_update(card){const forms=card.querySelectorAll("form");let updates=!1;for(let i=0;i<forms.length;i++){const form=forms[i];let data=new FormDataExtended(form).toObject();data=foundry.utils.diffObject(this,foundry.utils.expandObject(data));for(const[key,value]of Object.entries(data))this[key]=value,updates=!0}return updates}get message(){return this._message?this._message:this._messageId?game.messages.get(this._messageId):void 0}set message(x){this._message=x}get messageId(){return this._messageId?this._messageId:this._message?this._message.id:void 0}set messageId(x){this._messageId=x}static get defaultOptions(){return{classes:["interactive-card"],exclude:["_actor","_skill","_item","_message","_htmlRoll"],excludeStartWith:"__"}}get data(){return JSON.parse(this.dataString)}get dataString(){return JSON.stringify(this,((key,value)=>{if(null!==value&&!this.options.exclude?.includes(key)&&!key.startsWith(this.options.excludeStartWith))return value}))}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}static async fromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return;const card=await this.fromMessage(message);return card.messageId=messageId,card}static async fromMessage(message){const cardElement=$(message.content)[0];if(!cardElement)return;const card=await this.fromHTMLCardElement(cardElement);return card.message=message,card}static async fromHTMLCardElement(card){const cardData=JSON.parse(unescape(card.dataset.object));if(!cardData.messageId){const message=card.closest(".message");cardData.messageId=message?.dataset?.messageId}return await this.fromData(cardData)}static async fromData(data){const card=Object.assign(new this,data);return await card.assignObject(),card}setFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!0)}unsetFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!1)}toggleFlag(flagName){this[flagName]=!this[flagName]}async _onToggle(event){event.preventDefault();const target=event.currentTarget;if("action"in target.dataset)return this._onButton(event);if(target&&target.classList.contains("gm-select-only")&&!game.user.isGM)return;const flag=target.dataset.flag;if(!flag)return;const toggle=target.closest(".ic-radio");if(toggle){const buttons=toggle.querySelectorAll(".ic-radio-switch");for(const b of buttons)this.unsetFlag(b.dataset.flag);this.setFlag(flag)}else this.toggleFlag(flag);const card=target.closest(".interactive-card");card&&this._update(card),this.updateChatCard()}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get isBlind(){return this.rollMode?(void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind):null}set isBlind(x){this._isBlind=x}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}get item(){return this.itemId?this.actor.items.get(this.itemId):null}get weapon(){return this.item}get targetedTokens(){return[...game.user.targets]}get target(){return this.targetToken?this.targetToken:this.targetActor}get isTargetOwner(){return this.target.isOwner}get isKeeper(){return game.user.isGM}get targetToken(){return this._targetToken||(this._targetKey?this._targetToken=chatHelper.getTokenFromKey(this._targetKey):(this._targetToken=this.targetedTokens.pop(),this._targetToken?this._targetKey=`${this._targetToken.scene.id}.${this._targetToken.id}`:this._targetToken=null)),this._targetToken}get targetActor(){return this._targetActor||(this.targetToken?this._targetActor=this.targetToken.actor||this.targetToken.data.actor||this.targetToken.data.document:this._targetActor=chatHelper.getActorFromKey(this._targetKey)),this._targetActor}get targetKey(){return this.targetToken||this.targetActor?this._targetKey:null}get hasTarget(){return!(!this.targetToken&&!this.targetActor)}set targetKey(x){this._targetKey=x}get skills(){return this.actor.getWeaponSkills(this.itemId)}get targetImg(){const img=chatHelper.getActorImgFromKey(this.targetKey);return img||"../icons/svg/mystery-man-black.svg"}get name(){return this.token?this.token.name:this.actor.name}get targetName(){return this.target?this.target.name:"dummy"}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}}class DamageCard extends InteractiveChatCard{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{exclude:["_targetToken","_targetActor","_htmlRoll","_htmlInlineRoll"].concat(super.defaultOptions.exclude),template:"systems/CoC7/templates/chat/cards/damage.html"})}async assignObject(){this.damageRoll&&"Object"===this.damageRoll.constructor.name&&(this.damageRoll=Roll.fromData(this.damageRoll))}_onButton(event){super._onButton(event)}get critical(){return this.options.critical}set critical(x){this._options.critical=x}get impale(){return void 0===this._impale?this.weapon.impale:this._impale}set impale(x){this._impale=x}get isDamageFormula(){return"string"==typeof this.damageFormula&&(!!isNaN(Number(this.damageFormula))&&Roll.validate(this.damageFormula))}get isDamageNumber(){return!isNaN(Number(this.damageFormula))}get isArmorForula(){return"string"==typeof this.armor&&(!!isNaN(Number(this.armor))&&Roll.validate(this.armor))}get totalDamageString(){let damage=Number(this.isDamageNumber?this.damageFormula:this.roll.total);return!this.ignoreArmor&&((isNaN(Number(this.armor))||Number(this.armor)>0)&&(damage-=Number(this.armor)),!isNaN(Number(this.armor))&&damage<=0)?game.i18n.localize("CoC7.ArmorAbsorbsDamage"):damage}get noDamage(){if(this.rolled){const damage=this.isDamageNumber?this.damageFormula:this.roll.total;return this.ignoreArmor?!!(damage<=0):!isNaN(Number(this.armor))&&!!(damage-Number(this.armor)<=0)}return!1}async updateChatCard(){if(!this.options.fastForward||this.roll||this.isDamageNumber||await this.rollDamage({update:!1}),this.isDamageNumber||this.roll&&null!=this.roll.total||this.hardrolled?this.rolled=!0:this.rolled=!1,!this.options.fastForward||this.damageInflicted||this.noDamage||await this.dealDamage({update:!1}),this.rolled&&this.roll){"Object"===this.roll.constructor.name&&(this.roll=Roll.fromData(this.roll));const a=createInlineRoll(this.roll);this._htmlInlineRoll=a.outerHTML,this._htmlRoll=await this.roll.render()}await super.updateChatCard()}async rollDamage(options={update:!0}){this.roll=await new Roll(this.damageFormula||"0").evaluate({async:!0}),await CoC7Dice.showRollDice3d(this.roll),this.hardrolled=!0,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}async rollArmor(options={update:!0}){const roll=await new Roll(this.armor).evaluate({async:!0});this.armor=roll.total,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}async dealDamageToSelectedTarget(options={update:!0}){if(this.isArmorForula&&await this.rollArmor(),isNaN(Number(this.totalDamageString)))return void ui.notifications.error(game.i18n.localize("CoC7.ErrorEvaluatingDamage"));const targets=[],targetName=[],selectedPlayers=canvas.tokens.controlled.map((token=>token.actor));for(let index=0;index<selectedPlayers.length;index++)this.actor.id!==selectedPlayers[index].id&&(targetName.push(selectedPlayers[index].name),targets.push(selectedPlayers[index]));const data={title:" ",content:game.i18n.format("CoC7.DealDamage",{damage:this.totalDamageString,target:targetName}),buttons:{one:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Proceed"),callback:()=>{this.confirmDamage(targets)}},two:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel"),callback:()=>{}}},default:"two"};targetName.length>0&&new Dialog(data).render(!0)}async confirmDamage(targets){for(let index=0;index<targets.length;index++)await targets[index].dealDamage(Number(this.totalDamageString),{ignoreArmor:!1}),ChatMessage.create({content:game.i18n.format("CoC7.DamageDealTo",{name:targets[index].name,damage:this.totalDamageString})})}async dealDamage(options={update:!0}){this.isArmorForula&&await this.rollArmor();let damage=this.totalDamageString;if(isNaN(Number(damage))){if(game.i18n.localize("CoC7.ArmorAbsorbsDamage")!==damage)return void ui.notifications.error("Error evaluating damage");damage=0}this.targetActor&&await this.targetActor.dealDamage(Number(damage),{ignoreArmor:!0}),this.damageInflicted=!0,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}get range(){return this.options.range||"normal"}set range(x){["normal","long","extreme"].inclues(x.toLowerCase())&&(this._options.range=x)}get damageFormula(){const range=this.range;let formula=this.weapon?.system?.range[range]?.damage,db=this.actor.db;if(db=(""===(db??"").toString().trim()?0:db).toString().trim(),db.startsWith("-")||(db="+"+db),this.weapon.system.properties.addb&&(formula+=db),this.weapon.system.properties.ahdb&&(formula=formula+"+ floor("+db+"/2)"),formula){const maxDamage=new Roll(formula).evaluate({maximize:!0}).total;let rollString;return this.critical?this.impale?(rollString=formula+"+"+maxDamage,rollString):maxDamage:formula}}get armor(){return void 0!==this._armor&&""!==this._armor?this._armor:this.target?this.targetActor.system.attribs.armor.value:0}set armor(x){this._armor=x}}class OpposedCheckCard extends RollCard{static async bindListerners(html){html.on("click",".roll-card.opposed .toggle-switch",this._onToggle.bind(this)),html.on("click",".roll-card.opposed a",OpposedCheckCard._onClick.bind(this)),html.on("click",".roll-card.opposed button",OpposedCheckCard._onClick.bind(this))}static get defaultConfig(){return foundry.utils.mergeObject(super.defaultConfig,{template:"systems/CoC7/templates/chat/cards/opposed-roll.html",type:"opposedCard"})}get config(){return OpposedCheckCard.defaultConfig}get attackerRoll(){if(this.combat){if(this.rolls?.length){const attacker=this.rolls.filter((r=>0===r.index||r.attacker));if(attacker.length)return attacker[0]}}else;}get defenderRoll(){if(this.combat){if(this.rolls?.length){const defender=this.rolls.filter((r=>0!==r.index||!r.attacker));if(defender.length)return defender[0]}}else;}get defenderIsDodging(){return!(!this.defenderRoll?.actor?.dodgeSkill?.name||!this.defenderRoll?.skill?.name)&&this.defenderRoll.actor.dodgeSkill.name.toLowerCase()===this.defenderRoll.skill.name.toLowerCase()}get advantageAttacker(){return void 0===this._aa?!!this.defenderRoll&&!this.defenderIsDodging:this._aa}get winnerRollsDamage(){return!!(this.combat&&this.rolls.length>=2&&this.hasWinner&&"weapon"===this.winner?.item?.type)}set advantageAttacker(x){this._aa=!0,this._ad=!1}get advantageDefender(){return void 0===this._ad?this.defenderIsDodging:this._ad}set advantageDefender(x){this._ad=!0,this._aa=!1}get isTie(){return this.winnerCount>1}get needsTieBreaker(){return!!this.combat&&!(!this.attackerRoll||!this.defenderRoll||this.attackerRoll.successLevel!==this.defenderRoll.successLevel)}get winnerCount(){let count=0;for(const r of this.rolls)r.winner&&(count+=1);return count}get isAttackManeuver(){return!(!this.combat||!this.attackerRoll||this.attackerRoll?.item&&!this.attackerRoll?.item.system.properties?.mnvr)}get resultText(){if(this.combat&&this.attackerRoll&&this.defenderRoll){if(!this.attackerRoll.winner&&!this.defenderRoll.winner)return game.i18n.localize("CoC7.NoWinner");if(this.attackerRoll.winner)return this.attackerRoll.maneuver?game.i18n.format("CoC7.ManeuverSuccess",{name:this.attackerRoll.actor.name}):game.i18n.format("CoC7.AttackSuccess",{name:this.attackerRoll.actor.name});if(this.defenderRoll.winner)return this.defenderRoll.maneuver?game.i18n.format("CoC7.ManeuverSuccess",{name:this.defenderRoll.actor.name}):this.defenderIsDodging?game.i18n.format("CoC7.DodgeSuccess",{name:this.defenderRoll.actor.name}):game.i18n.format("CoC7.AttackSuccess",{name:this.defenderRoll.actor.name})}}async process(data){switch(data.action){case"new":this.rolls?.length||(this.combat=data.combat||void 0,this.combat&&(data.roll.attacker=!0)),data.roll.index=this.rolls.length,this.addRollData(data);break;case"roll":this.addRollData(data);break;case"updateRoll":this.updateRoll(data)}game.user.isGM?await this.updateChatCard():game.socket.emit("system.CoC7",data)}async roll(rank){await this.rolls[rank]._perform();const data={type:this.config.type,action:"updateRoll",rank,fromGM:game.user.isGM};return game.user.isGM||(data.roll=this.rolls[rank].JSONRollData),data}static async _onClick(event){event.preventDefault();const a=event.currentTarget,action=a.dataset.action,li=a.closest("li.actor-roll"),message=a.closest(".chat-message"),cardElement=a.closest("div.roll-card"),card=await OpposedCheckCard.fromHTMLCardElement(cardElement);card.messageId=message.dataset.messageId;const rank=Number(li?.dataset?.rank);switch(action){case"toggle-combat":card.combat=!card.combat,await card.updateChatCard();break;case"remove-roll":card.removeRoll(rank),await card.updateChatCard();break;case"close-card":card.closeCard(),await card.updateChatCard();break;case"roll-check":{const speaker=ChatMessage.getSpeaker();card.rolls[rank].actorKey||(card.rolls[rank].actorKey=`${speaker.scene}.${speaker.token}`);const data=await card.roll(rank);await card.process(data);break}case"roll-damage":{card.closeCard(),await card.updateChatCard();const damageChatCard=new DamageCard({critical:card.winner.isExtremeSuccess,fastForward:event.shiftKey});damageChatCard.actorKey=card.winner.actor.actorKey,damageChatCard.targetKey=card.looser.actor.actorKey,damageChatCard.itemId=card.winner.itemId,damageChatCard.updateChatCard();break}default:{const options={update:!1,data:a.dataset,classes:a.classList,target:a};await CoC7Check.alter(card.rolls[rank],action,options);const data={type:this.defaultConfig.type,action:"updateRoll",rank,fromGM:game.user.isGM};game.user.isGM||(data.roll=card.rolls[rank].JSONRollData),card.process(data);break}}}async compute(rank=void 0){if(this.rolls=this.rolls.filter((roll=>void 0!==roll.actor.actorKey)),rank)this.rolls[rank].rolled&&(this.rolls[rank]._htmlRoll=await this.rolls[rank].getHtmlRoll({hideDiceResult:!0}));else for(let i=0;i<this.rolls.length;i++)delete this.rolls[i].maneuver,this.combat&&(!this.rolls[i].item||this.rolls[i].item.system.properties?.mnvr)&&(this.rolls[i]?.actor?.dodgeSkill?.name&&this.rolls[i]?.skill?.name&&this.rolls[i].actor.dodgeSkill.name.toLowerCase()!==this.rolls[i].skill.name.toLowerCase()||!this.rolls[i]?.actor?.dodgeSkill?.name)&&(this.rolls[i].maneuver=!0),this.rolls[i].rolled&&(this.rolls[i]._htmlRoll=await this.rolls[i].getHtmlRoll({hideDiceResult:!0}));if(this.combat){if(this.rolls.sort(((a,b)=>a.index>b.index?1:a.index<b.index?-1:0)),this.rolls.length>1){this.rolls=[this.rolls[0],this.rolls[1]];for(const r of this.rolls)delete r.winner,delete r.tie}this.rolls[0]&&(this.rolls[0].attacker=!0),this.rolls[0]?.rolled&&this.rolls[1]?.rolled&&(this.rolls[0].passed||this.rolls[1].passed)&&(this.rolls[0].successLevel>this.rolls[1].successLevel?this.rolls[0].winner=!0:this.rolls[1].successLevel>this.rolls[0].successLevel?this.rolls[1].winner=!0:this.advantageAttacker?this.rolls[0].winner=!0:this.rolls[1].winner=!0)}else{if(this.rolls.sort(((a,b)=>{if(a.rolled&&!b.rolled)return-1;if(!a.rolled&&b.rolled)return 1;if(!a.rolled&&!b.rolled)return 0;if(a.successLevel>b.successLevel)return this.resolved=!0,-1;if(a.successLevel<b.successLevel)return this.resolved=!0,1;if(game.settings.get("CoC7","opposedRollTieBreaker")){if(a.modifiedResult>b.modifiedResult)return this.resolved=!0,-1;if(a.modifiedResult<b.modifiedResult)return this.resolved=!0,1}else{if(a.rawValue>b.rawValue)return this.resolved=!0,-1;if(a.rawValue<b.rawValue)return this.resolved=!0,1}return 0})),this.winCount=0,this.rolls[0]&&this.rolls[0].rolled&&!this.rolls[0].failed){this.winCount=1;for(let i=1;i<this.rolls.length;i++)this.rolls[i]&&this.rolls[i].rolled&&this.rolls[0].successLevel===this.rolls[i].successLevel&&(game.settings.get("CoC7","opposedRollTieBreaker")?this.rolls[0].modifiedResult===this.rolls[i].modifiedResult:this.rolls[0].rawValue===this.rolls[i].rawValue)&&(this.winCount=this.winCount+1)}for(let i=0;i<this.rolls.length;i++)this.rolls[i].winner=i<this.winCount,this.rolls[i].tie=this.rolls[i].winner&&this.winCount>1}}closeCard(){this.closed=!0}}class SanDataDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(":checkbox").click((()=>this._toggleInput(html)))}_toggleInput(html){html.find('*[name="customname"]').toggle()}static async create(options={}){const html=await renderTemplate("systems/CoC7/templates/apps/sandata.html",options);return new Promise((resolve=>{let formData=null;const dlg=new SanDataDialog({title:options.displayName?game.i18n.format("CoC7.SanDataSelectionWindowNamed",{name:options.displayName}):game.i18n.localize("CoC7.SanDataSelectionWindow"),content:html,buttons:{Validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#san-data-form")),resolve(formData))}},default:"Validate",close:()=>{}});dlg.render(!0)}))}}class CoC7ChatMessage{static get ROLL_TYPE_ATTRIBUTE(){return"R/AT"}static get ROLL_TYPE_CHARACTERISTIC(){return"R/CH"}static get ROLL_TYPE_COMBAT(){return"R/CO"}static get ROLL_TYPE_SKILL(){return"R/SK"}static get ROLL_TYPE_ENCOUNTER(){return"R/EC"}static get CARD_TYPE_COMBINED(){return"C/CO"}static get CARD_TYPE_GROUP(){return"C/GR"}static get CARD_TYPE_NORMAL(){return"C/NO"}static get CARD_TYPE_OPPOSED(){return"C/OP"}static get CARD_TYPE_SAN_CHECK(){return"C/SC"}static get CARD_TYPE_NONE(){return"C/NO"}static cardTypes(config){if(config.rollType===CoC7ChatMessage.ROLL_TYPE_COMBAT)return null;const select={[CoC7ChatMessage.CARD_TYPE_NORMAL]:"CoC7.RegularRollCard",[CoC7ChatMessage.CARD_TYPE_COMBINED]:"CoC7.CombinedRollCard",[CoC7ChatMessage.CARD_TYPE_OPPOSED]:"CoC7.OpposedRollCard"};return config.rollType===CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE&&"san"===config.attribute&&(select[CoC7ChatMessage.CARD_TYPE_SAN_CHECK]="CoC7.SanityLossEncounter"),select}static normalizeRequest(options){if(void 0!==options.event||void 0===options.cardType||void 0===options.actor||void 0===options.skillId&&void 0===options.skillName&&void 0===options.attribute&&void 0===options.characteristic&&options.rollType!==CoC7ChatMessage.ROLL_TYPE_ENCOUNTER){if(void 0===options.event||void 0===options.cardType||void 0===options.rollType)return ui.notifications.error(game.i18n.format("CoC7.ErrorNotFound",{value:game.i18n.localize("CoC7.Roll")})),!1}else if(void 0!==options.skillId)options.actor.items.get(options.skillId)&&(options.rollType=CoC7ChatMessage.ROLL_TYPE_SKILL);else if(void 0!==options.skillName){const skillIds=options.actor.getSkillsByName(options.skillName);skillIds.length>0&&(options.skillId=skillIds[0].id,options.rollType=CoC7ChatMessage.ROLL_TYPE_SKILL)}else void 0!==options.attribute&&["lck","san"].includes(options.attribute)?options.rollType=CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE:void 0!==options.characteristic&&void 0!==options.actor.system.characteristics[options.characteristic]&&(options.rollType=CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC);if(![CoC7ChatMessage.CARD_TYPE_COMBINED,CoC7ChatMessage.CARD_TYPE_GROUP,CoC7ChatMessage.CARD_TYPE_NORMAL,CoC7ChatMessage.CARD_TYPE_OPPOSED,CoC7ChatMessage.CARD_TYPE_SAN_CHECK].includes(options.cardType))return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.ErrorInvalidCardType")})),!1;if(![CoC7ChatMessage.ROLL_TYPE_SKILL,CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE,CoC7ChatMessage.ROLL_TYPE_ENCOUNTER].includes(options.rollType))return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.ErrorInvalidRollType")})),!1;const config={options:{cardType:options.cardType,shiftKey:options.fastForward??options.event?.shiftKey??options.fastForward??!1,altKey:options.event?.altKey??!1,isCtrlKey:isCtrlKey(options.event??!1),createEncounter:options.createEncounter??!1,openLinkTool:options.openLinkTool??!1,sendToChat:options.sendToChat??!1,sendToClipboard:options.sendToClipboard??!1,isCombat:options.event?.currentTarget.classList?.contains("combat")??!1,preventStandby:options.preventStandby??!1,bonusDice:0},dialogOptions:{rollType:options.rollType,cardType:options.cardType,attribute:"",chatMessage:options.chatMessage??!0,forcedCardType:options.forcedCardType??!1,hideDifficulty:options.hideDifficulty??!1}};switch(config.dialogOptions.rollType){case CoC7ChatMessage.ROLL_TYPE_SKILL:case CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC:case CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE:case CoC7ChatMessage.ROLL_TYPE_ENCOUNTER:if(config.options.skillId=options.skillId??options.event?.currentTarget.closest(".item")?.dataset.skillId,config.options.itemId=options.event?.currentTarget.closest(".item")?.dataset.itemId,config.options.characteristic=options.characteristic??options.event?.currentTarget.parentElement.dataset.characteristic,config.options.attribute=options.attribute??options.event?.currentTarget.parentElement.dataset.attrib,config.dialogOptions.attribute=config.options.attribute,config.options.actorId=options.event?.currentTarget.closest("form").dataset.actorId??options.actor.id,config.options.tokenKey=options.event?.currentTarget.closest("form").dataset.tokenId??options.actor.tokenKey,config.options.weaponAltSkill=options.event?.currentTarget.classList.contains("alternativ-skill"),config.options.actor=options.actor,config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_SKILL&&config.options.isCombat){const item=config.options.actor.items.get(config.options.itemId);if(!item)return!1;"weapon"===item.type&&(config.options.weaponName=item.name,config.dialogOptions.rollType=CoC7ChatMessage.ROLL_TYPE_COMBAT)}if(void 0===config.options.actorId||void 0===config.options.tokenKey&&void 0===config.options.actor)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.ErrorActor")})),!1;if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_SKILL&&void 0===config.options.skillId)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.Entities.Skill")})),!1;if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC){if(void 0===config.options.characteristic)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.Characteristic")})),!1;if(!game.user.isGM&&!config.options.actor.system.characteristics[config.options.characteristic]?.value)return!1}else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE){if(void 0===config.options.attribute)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.Attribute")})),!1;if(!game.user.isGM&&!config.options.actor.system.attribs[config.options.attribute]?.value)return!1}else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_COMBAT){if(void 0===config.options.itemId)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.Entities.Weapon")})),!1;if(config.options.altKey)return!1}config.options.hasPlayerOwner=config.options.actor.hasPlayerOwner??!1,config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC?(config.dialogOptions.disableFlatThresholdModifier=config.options.isCtrlKey,config.dialogOptions.disableFlatDiceModifier=config.options.isCtrlKey):(config.dialogOptions.disableFlatThresholdModifier=!1,config.dialogOptions.disableFlatDiceModifier=!1),config.dialogOptions.modifier=0,config.dialogOptions.difficulty=options.difficulty??CoC7Check.difficultyLevel[game.settings.get("CoC7","defaultCheckDifficulty")],config.dialogOptions.flatDiceModifier=0,config.dialogOptions.flatThresholdModifier=0}return config}static async trigger(options={}){const config=CoC7ChatMessage.normalizeRequest(options);if(!1!==config)if(config.options.isCtrlKey&&game.user.isGM&&[CoC7ChatMessage.CARD_TYPE_NORMAL,CoC7ChatMessage.CARD_TYPE_SAN_CHECK].includes(config.dialogOptions.cardType))CoC7ChatMessage.createLink(config);else{if(!(config.options.sendToChat||config.options.sendToClipboard||config.options.openLinkTool||config.options.createEncounter)||!game.user.isGM||CoC7ChatMessage.CARD_TYPE_NONE!==config.dialogOptions.cardType){if(void 0!==config.options.actor){if(void 0!==config.options.attribute){const bonusDice=config.options.actor.system?.attribs?.[config.options.attribute]?.bonusDice;bonusDice&&(config.dialogOptions.modifier=bonusDice)}else if(void 0!==config.options.characteristic){const bonusDice=config.options.actor.system?.characteristics?.[config.options.characteristic]?.bonusDice;bonusDice&&(config.dialogOptions.modifier=bonusDice)}else if(void 0!==config.options.itemId){const itemModifiers=Object.values(config.options.actor.system.skills).find((k=>k.foundryID===config.options.itemId));void 0!==itemModifiers.bonusDice&&(config.dialogOptions.modifier=itemModifiers.bonusDice)}config.dialogOptions.modifier=Math.min(Math.max(config.dialogOptions.modifier,-2),2)}return config.options.shiftKey||await CoC7ChatMessage.createRoll(config),CoC7ChatMessage.runRoll(config)}CoC7ChatMessage.createLink(config)}}static createLink(config){switch(config.dialogOptions.rollType){case CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE:case CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC:case CoC7ChatMessage.ROLL_TYPE_COMBAT:case CoC7ChatMessage.ROLL_TYPE_SKILL:case CoC7ChatMessage.ROLL_TYPE_ENCOUNTER:{const linkData={type:"CoC7Link"};if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_SKILL){if(linkData.check=CoC7Link.CHECK_TYPE.CHECK,linkData.linkType=CoC7Link.LINK_TYPE.SKILL,linkData.name=config.options.actor.items.get(config.options.skillId)?.shortName,!linkData.name)return}else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC)linkData.check=CoC7Link.CHECK_TYPE.CHECK,linkData.linkType=CoC7Link.LINK_TYPE.CHARACTERISTIC,linkData.name=config.options.characteristic;else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE)(config.options.altKey||config.options.createEncounter)&&"san"===config.options.attribute?linkData.check=CoC7Link.CHECK_TYPE.SANLOSS:(linkData.check=CoC7Link.CHECK_TYPE.CHECK,linkData.linkType=CoC7Link.LINK_TYPE.ATTRIBUTE,linkData.name=config.options.attribute);else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_COMBAT)linkData.check=CoC7Link.CHECK_TYPE.ITEM,linkData.name=config.options.weaponName;else{if(config.dialogOptions.rollType!==CoC7ChatMessage.ROLL_TYPE_ENCOUNTER)return;linkData.check=CoC7Link.CHECK_TYPE.SANLOSS,linkData.sanMin=config.options.actor?.system?.special?.sanLoss?.checkPassed,linkData.sanMax=config.options.actor?.system?.special?.sanLoss?.checkFailled,linkData.sanReason=config.options.actor.system.infos.type?.length?config.options.actor.system.infos.type:config.options.actor.name}"blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0),config.options.sendToChat?CoC7Link.toChatMessage(linkData):config.options.sendToClipboard?CoC7Link.fromDropData(linkData).then((link=>{CoC7Utilities.copyToClipboard(link.link)})):CoC7ContentLinkDialog.create(linkData,{actors:[config.options.actor].filter((a=>a.owners.length)),hasModifiers:config.options.shiftKey})}}}static async createRoll(config){const usage=await RollDialog.create(config.dialogOptions);if(usage){const cardType=usage.get("cardType");cardType&&(config.dialogOptions.cardType=cardType),config.dialogOptions.modifier=Number(usage.get("bonusDice")),config.dialogOptions.difficulty=Number(usage.get("difficulty")),config.dialogOptions.flatDiceModifier=Number(usage.get("flatDiceModifier")),config.dialogOptions.flatThresholdModifier=Number(usage.get("flatThresholdModifier"))}}static async runRoll(config){switch(config.dialogOptions.cardType){case CoC7ChatMessage.CARD_TYPE_SAN_CHECK:{const sanData=await SanDataDialog.create({promptLabel:!0});if(sanData){let sanMin=sanData.get("sanMin")||0,sanMax=sanData.get("sanMax")||0;const sanReason=sanData.get("sanReason");isNaN(Number(sanMin))||(sanMin=Number(sanMin)),isNaN(Number(sanMax))||(sanMax=Number(sanMax)),SanCheckCard.create(config.options.actor.actorKey,{sanMin,sanMax,sanReason},{sanModifier:config.dialogOptions.modifier,sanDifficulty:config.dialogOptions.difficulty,fastForward:config.options.shiftKey})}}break;case CoC7ChatMessage.CARD_TYPE_NORMAL:{const check=new CoC7Check;return check.diceModifier=config.dialogOptions.modifier,check.difficulty=config.dialogOptions.difficulty,check.actor=config.options.tokenKey?config.options.tokenKey:config.options.actorId,check.flatDiceModifier=config.dialogOptions.flatDiceModifier,check.flatThresholdModifier=config.dialogOptions.flatThresholdModifier,check.standby=!config.options.preventStandby&&game.settings.get("CoC7","stanbyGMRolls")&&game.user.isGM&&config.options.hasPlayerOwner,config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_SKILL?(check.skill=config.options.skillId,await check.roll()):config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE?await check.rollAttribute(config.options.attribute):await check.rollCharacteristic(config.options.characteristic),config.dialogOptions.chatMessage&&check.toMessage(),{result:check.modifiedResult,successLevel:check.rolledSuccessLevel,isFumble:check.isFumble,isCritical:check.isCritical,successLevels:{1:check.regularThreshold,2:check.hardThreshold,3:check.extremeThreshold},passed:check.passed}}case CoC7ChatMessage.CARD_TYPE_OPPOSED:case CoC7ChatMessage.CARD_TYPE_COMBINED:{const check=new CoC7Check;check.actor=config.options.tokenKey?config.options.tokenKey:config.options.actorId,check.characteristic=config.options.characteristic,check.attribute=config.options.attribute,check.skillId=config.options.skillId,check.rollMode=game.settings.get("core","rollMode"),check.initiator=game.user.id;let data={};config.dialogOptions.cardType===CoC7ChatMessage.CARD_TYPE_OPPOSED?(data={type:OpposedCheckCard.defaultConfig.type,combat:config.options.isCombat,action:"new"},check.item=config.options.itemId,check.weaponAltSkill=config.options.weaponAltSkill,check.denyPush=!0,await check._perform()):(data={type:CombinedCheckCard.defaultConfig.type,action:"new"},check.difficulty=config.dialogOptions.difficulty),data.roll=check.JSONRollData,data._rollMode=game.settings.get("core","rollMode"),config.dialogOptions.cardType===CoC7ChatMessage.CARD_TYPE_OPPOSED?OpposedCheckCard.dispatch(data):CombinedCheckCard.dispatch(data)}}}}class CoC7ConCheck{constructor(actorId=null,difficulty=CoC7Check.difficultyLevel.regular){this.check=new CoC7Check(actorId),this.check.characteristic="con",this.check.difficulty=difficulty,this.check.denyPush=!0,this.actorId=actorId}get isBlind(){return void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind}set isBlind(x){this._isBlind=x}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}get actor(){return this.actorId?chatHelper.getActorFromKey(this.actorId):null}set actorId(x){this._actorId=x,this.check.actor=x}get actorId(){return this._actorId?this._actorId:null}get tokenKey(){return this.actor.isToken?this.actor.tokenKey:null}get isSuccess(){return!!this.check&&this.check.isSuccess}get isRolled(){return!!(this.check&&this.check.dices&&this.check.dices.total)}static getFromCard(card){const conCheck=new CoC7ConCheck;chatHelper.getObjectFromElement(conCheck,card);const htmlCheck=card.querySelector(".roll-result");return CoC7Roll.getFromElement(htmlCheck,conCheck.check),conCheck.messageId=card.closest(".message").dataset.messageId,conCheck}async getCheckElement(){const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this.check),htmlElement=$.parseHTML(html)[0];return htmlElement?(htmlElement.classList.remove("chat-card","item-card","roll-card"),htmlElement):null}async toMessage(fastForward=!1){fastForward&&await this.rollCon();const html=await renderTemplate("systems/CoC7/templates/chat/con-check.html",this),htmlElement=$.parseHTML(html)[0];if(fastForward){htmlElement.querySelector(".roll-result").replaceWith(await this.getCheckElement())}const speakerData={};let speaker;this.actor?(this.token?speakerData.token=this.token:speakerData.actor=this.actor,speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,flavor:this.flavor,content:htmlElement.outerHTML};["gmroll","blindroll"].includes(game.settings.get("core","rollMode"))&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}async rollCon(){this.check.hideDiceResult=!0,await this.check._perform(),this.isBlind||this.isRolled||this.isSuccess||(this.stayAlive?await this.actor.setCondition(COC7.status.dead):await this.actor.setCondition(COC7.status.unconscious)),this.applied=!0}async updateChatCard(){const html=await renderTemplate("systems/CoC7/templates/chat/con-check.html",this),htmlElement=$.parseHTML(html)[0];if(htmlElement.querySelector(".roll-result").replaceWith(await this.getCheckElement()),this.isBlind||!this.isRolled||this.isSuccess||(this.stayAlive?await this.actor.setCondition(COC7.status.dead):await this.actor.setCondition(COC7.status.unconscious)),!this.messageId)return;const chatMessage=game.messages.get(this.messageId),msg=await chatMessage.update({content:htmlElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}}class SkillSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".select-skill").click((async event=>this._onSelectSkillClicked(event)))}async _onSelectSkillClicked(event){const li=event.currentTarget.closest(".item");this.data.data.skills[Number(li.dataset.index)].selected=!0,event.currentTarget.style.display="none",this.data.data.added||(this.data.data.added=0),this.data.data.added++;event.currentTarget.closest(".skill-selector").querySelector(".count").innerText=this.data.data.added,this.data.data.added>=this.data.data.optionsCount&&this.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/skill-select.html",data);return new Promise((resolve=>{new SkillSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>{if(!data.added>=data.optionsCount)return resolve(!1);const selected=data.skills.filter((skill=>skill.selected));return resolve(selected)}},{classes:["coc7","dialog","skill-select"]}).render(!0)}))}}class PointSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".item-name").click((async event=>this._onSelectCharacteristic(event))),html.find("button").click((event=>this._onButtonClicked(event)))}async _onSelectCharacteristic(event){const li=event.currentTarget.closest(".item"),itemList=li.closest(".item-list");for(const item of itemList.querySelectorAll(".selectable"))item.classList.remove("selected"),this.data.data.characteristics[item.dataset.key].selected=!1,this.data.data.characteristics[item.dataset.key].optional=!1;$(li).toggleClass("selected"),this.data.data.characteristics[li.dataset.key].selected=!0;li.closest("#skill-selection-form").querySelector(".points").innerText=this.data.data.total+this.data.data.characteristics[li.dataset.key].multiplier*this.data.data.characteristics[li.dataset.key].value;li.closest("#skill-selection-form").querySelector("button.validate").classList.remove("inactive"),this.data.data.resolved=!0}async _onButtonClicked(event){event.preventDefault(),event.currentTarget.classList.contains("inactive")||super.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/point-select.html",data);return new Promise((resolve=>{new PointSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>data.resolved?resolve(data):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class CharacSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".item-name").click((async event=>this._onSelectCharacteristic(event)))}async _onSelectCharacteristic(event){const li=event.currentTarget.closest(".item");this.data.data.selected=li.dataset.key,this.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/char-select.html",data);return new Promise((resolve=>{new CharacSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>data.selected?resolve(data.selected):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class CharacRollDialog extends Dialog{constructor(data,options){super(data,options),this.rolled=data.rolled||{}}activateListeners(html){super.activateListeners(html),html.on("change","input",this._onChangeInput.bind(this)),html.on("submit","form",this._onSubmit.bind(this)),html.on("click",".roll-characteristic",this._onRollCharacteristic.bind(this)),html.on("click",".increase-characteristic",this._onIncreaseCharacteristic.bind(this)),html.on("click",".decrease-characteristic",this._onDecreaseCharacteristic.bind(this)),html.on("click",".reset-characteristic",this._onResetCharacteristic.bind(this)),html.on("click","button",this._onButton.bind(this))}async _onRollCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;await this.rollCharacteristic(characKey)}async _onIncreaseCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.increaseCharacteristic(characKey)}async _onDecreaseCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.decreaseCharacteristic(characKey)}async _onResetCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.resetCharacteristic(characKey)}async _onButton(event){const action=event.currentTarget.dataset.action;if("roll"===action)for(const char of["str","con","siz","dex","app","int","pow","edu","luck"])await this.rollCharacteristic(char);this.checkTotal(),"validate"===action&&this.data.data.validate&&this.close()}async rollCharacteristic(key){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input"),formula=this.data.data.characteristics.rolls[key];if(input&&formula){if(isNaN(Number(formula))){const roll=new Roll(formula);await roll.evaluate({async:!0}),roll.toMessage({flavor:game.i18n.format("CoC7.MessageRollingCharacteristic",{label:this.data.data.characteristics.list[key].label,formula})}),input.value=roll.total}else input.value=Number(formula);this.data.data.characteristics.values[key]=Number(input.value),this.rolled||(this.rolled={}),this.rolled[key]=!0}this.checkTotal()}async increaseCharacteristic(key){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input");input&&(input.value=Number(input.value)+1,this.data.data.characteristics.values[key]=Number(input.value)),this.checkTotal()}async decreaseCharacteristic(key){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input");input&&Number(input.value)>0&&(input.value=Number(input.value)-1,this.data.data.characteristics.values[key]=Number(input.value)),this.checkTotal()}async resetCharacteristic(key){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input");input&&(input.value=null,this.data.data.characteristics.values[key]=0),this.checkTotal()}async _onChangeInput(event){event.preventDefault();const input=event.currentTarget,value=Number(input.value);isNaN(value)||(this.data.data.characteristics.values[input.name]=value),this.checkTotal()}checkTotal(){this.data.data.characteristics.points.total=0;for(const[key,value]of Object.entries(this.data.data.characteristics.values))"luck"!==key&&(this.data.data.characteristics.points.total+=value);const validation=this._element[0].querySelector(".points");if(this.data.data.characteristics.points.enabled){Number(this.data.data.characteristics.points.total)!==Number(this.data.data.characteristics.points.value)?(validation.classList.add("warning"),this.data.data.validate=!1):(validation.classList.remove("warning"),this.data.data.validate=!0);validation.querySelector(".value").innerText=this.data.data.characteristics.points.value}validation.querySelector(".total").innerText=this.data.data.characteristics.points.total,this.data.data.characteristics.rolls.enabled&&(this.data.data.validate=0===Object.values(this.data.data.characteristics.values).filter((val=>isNaN(parseInt(val)))).length)}async _onSubmit(event){event.preventDefault()}static async create(data){const rolled={};data.characteristics.points.total=0;for(const[key,value]of Object.entries(data.characteristics.values))"luck"!==key&&(data.characteristics.points.total+=value||0),!isNaN(value)&&value>0&&(rolled[key]=!0);data.characteristics.points.enabled&&Number(data.characteristics.points.total)!==Number(data.characteristics.points.value)&&(data.pointsWarning=!0);const html=await renderTemplate("systems/CoC7/templates/apps/char-roll.html",data);return new Promise((resolve=>{new CharacRollDialog({title:data.title,content:html,data,rolled,buttons:{},close:()=>data.validate?resolve(!0):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class SkillSpecSelectDialog{static async create(skills,specializationName,baseValue=null,name=null){const html=await renderTemplate("systems/CoC7/templates/apps/skill-spec-select.html",{hasSkills:skills.length>0,skills,base:baseValue,name});return new Promise((resolve=>{let formData=null;const dlg=new Dialog({title:name?game.i18n.format("CoC7.SkillSelectBase",{name}):game.i18n.format("CoC7.SkillSpecSelectTitle",{specialization:specializationName}),content:html,buttons:{validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#skill-select-form")),resolve(formData))}},default:"validate",close:()=>resolve(!1)});dlg.render(!0)}))}}class SkillSpecializationSelectDialog extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","skill-name-dialog"],title:"",template:"systems/CoC7/templates/apps/skill-specialization-select.hbs",width:400,height:"auto",closeOnSubmit:!1})}get title(){return game.i18n.format("CoC7.SkillSpecSelectTitle",{specialization:this.object.specializationName})}activateListeners(html){super.activateListeners(html),html.find(".submit-button").click(this._onClickSubmit.bind(this)),html.find("[name=existing-skill]").change(this._onSelectChange.bind(this))}async _onSelectChange(event){this.object.selected=event.currentTarget.value,this.render(!0)}async _onClickSubmit(event){if(""===this.object.selected){const obj=$(event.currentTarget).closest("form");this.object.name=obj.find("input[name=new-skill-name]").val()??"",this.object.baseValue=obj.find("input[name=base-value]").val()??""}if(""===this.object.selected&&""===this.object.name)return!1;this.object.resolve({selected:this.object.selected,name:this.object.name,baseValue:this.object.baseValue}),this.close()}async _updateObject(event,formData){}static async create({skills=[],allowCustom=!1,fixedBaseValue=!1,specializationName="",label="",baseValue=null}={}){const select=[];for(const skill of skills)select.push({id:skill.id,name:skill.name,base:skill.system.base});return await new Promise((resolve=>{new SkillSpecializationSelectDialog({specializationName,allowCustom,fixedBaseValue,allowSelect:skills.length>0,skills:select,selected:"",name:"",label,baseValue,resolve},{}).render(!0)}))}}class SkillValueDialog{static async create(name=null,baseValue=null){const html=await renderTemplate("systems/CoC7/templates/apps/skill-value.html",{base:baseValue,name});return new Promise((resolve=>{let formData=null;const dlg=new Dialog({title:game.i18n.format("CoC7.SkillValue",{name}),content:html,buttons:{validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#skill-select-form")),resolve(formData))}},default:"validate",close:()=>resolve(!1)});dlg.render(!0)}))}}class CoC7MeleeResoltion{constructor(initiatorMessage=null,targetMessage=null,messageId=null){this.initiatorMessage=initiatorMessage,this.targetMessage=targetMessage,this.messageId=messageId}async preCreateMessage(){const html=await renderTemplate(this.template,this),chatData={user:game.user.id,content:html},rollMode=game.settings.get("core","rollMode");["gmroll","blindroll"].includes(rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;const chatMessage=await ChatMessage.create(chatData);return this.messageId=chatMessage.id,chatMessage}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get target(){return this.targetMessage?CoC7MeleeTarget.getFromMessageId(this.targetMessage):null}get targetToken(){return this.target?chatHelper.getTokenFromKey(this.target.actorKey):null}get initiator(){return this.initiatorMessage?CoC7MeleeInitiator.getFromMessageId(this.initiatorMessage):null}get initiatorToken(){return this.initiator?chatHelper.getTokenFromKey(this.initiator.actorKey):null}async resolve(){if(this.target)switch(this.target.action){case"noResponse":this.initiator.roll.successLevel>0?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.action="roll-melee-damage",this.rollDamage=!0):(this.resultString=game.i18n.format("CoC7.InitiatorMissed",{name:this.initiator.name}),this.winner=this.initiator,this.rollDamage=!1),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target;break;case"dodge":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.action="roll-melee-damage",this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.DodgeSuccess",{name:this.target.name}),this.winner=this.target,this.looser=this.initiator,this.winnerImg=this.target.skill.img,this.winnerTitle=this.target.skill.name,this.action="dodge",this.rollDamage=!1);break;case"fightBack":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>=this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.target.name}),this.winner=this.target,this.winnerImg=this.target.weapon.img,this.winnerTitle=this.target.weapon.name,this.looser=this.initiator,this.rollDamage=!0);break;case"maneuver":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>=this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.ManeuverSuccess",{name:this.target.name}),this.winner=this.target,this.winnerImg=this.target.skill.data.img,this.winnerTitle=this.target.skill.name,this.looser=this.initiator,this.rollDamage=!1)}else this.initiator.roll.successLevel>0?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.rollDamage=!0):(this.resultString=game.i18n.format("CoC7.InitiatorMissed",{name:this.initiator.name}),this.winner=this.initiator,this.rollDamage=!1);this.winner&&(this.winner.roll.successLevel>=CoC7Check.successLevel.extreme?this.winner.roll.criticalDamage=!0:this.winner.roll.criticalDamage=!1),this.resolved=!0;const html=await renderTemplate(this.template,this);if(this.messageId){const message=game.messages.get(this.messageId),speakerData={};this.winner&&(this.winner.token&&(speakerData.token=this.winner.token.documment),this.winner.actor&&(speakerData.actor=this.winner.actor));const speaker=this.winner?ChatMessage.getSpeaker(speakerData):null,user=this.winner&&this.winner.actor.user?this.winner.actor.user:game.user;let msg;return message?(msg=speaker?await message.update({user:user.id,speaker,content:html}):await message.update({user:user.id,content:html}),await ui.chat.updateMessage(msg,!1),msg):void ui.notifications.warn("Resolition card missing, was deleted ?")}}get template(){return"systems/CoC7/templates/chat/combat/melee-resolution.html"}}class CoC7MeleeTarget extends ChatCardActor{constructor(actorKey,parentMessageId=null,fastForward=!1){super(actorKey,fastForward),this.actorKey=actorKey,this.initiatorKey=null,this.parentMessageId=parentMessageId,this.fastForward=fastForward,this.resolved=!1,this.outnumbered=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.skillId=null,this.itemId=null,this.dodging=!1,this.notResponding=!1,this.fightingBack=!1,this.maneuvering=!1}get actionSelected(){return this.dodging||this.notResponding||this.fightingBack||this.maneuvering}get action(){return this.dodging?"dodge":this.notResponding?"noResponse":this.fightingBack?"fightBack":this.maneuvering?"maneuver":null}get weapon(){return this.actor.items.get(this.itemId)}get skill(){return this.actor.items.get(this.skillId)}set initiatorKey(x){this._initiatorKey=x,this.targetKey=x}get initiatorKey(){return this._initiatorKey||(!this._initiator&&this.parentMessageId&&(this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId)),this._initiator&&(this._initiatorKey=this._initiator.actorKey)),this._initiatorKey?this._initiatorKey:(ui.notifications.error(`No initiator found for target : ${this.actor.name}`),null)}get initiator(){if(!this.initiatorKey){if(!this.parentMessageId)return null;this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId),this.initiatorKey=this._initiator.actorKey}return chatHelper.getActorFromKey(this.initiatorKey)}get meleeInitiator(){return this._initiator||(this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId)),this._initiator}get template(){return"systems/CoC7/templates/chat/combat/melee-target.html"}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.content)[0],target=CoC7MeleeTarget.getFromCard(card,messageId);return target.messageId=messageId,target}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".melee.target"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const target=CoC7MeleeTarget.getFromCard(card);target.toggleFlag(flag),target.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;this[flag]=!this[flag]}async createChatCard(){const html=await renderTemplate(this.template,this),speakerData={},token=chatHelper.getTokenFromKey(this.actorKey);token?speakerData.token=token.document:speakerData.actor=this.actor;const speaker=ChatMessage.getSpeaker(speakerData);this.actor.isToken&&(speaker.alias=this.actor.token.name);let user=game.user;if(void 0===this.actor.user){let owners=[];const gms=game.users.filter((a=>a.isGM)).map((a=>a.id));for(const[k,v]of Object.entries(this.actor.ownership))if(v===CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){if("default"===k){owners=game.users.map((a=>a.id));break}gms.includes(k)||owners.push(k)}let content="";switch(owners.length){case 0:break;case 1:void 0!==game.users.get(owners[0])&&(user=game.users.get(owners[0]));break;default:content="<p>"+game.i18n.localize("CoC7.MessageSelectSingleUserForTarget"),content+='<form id="selectform"><select name="user">';for(const k of owners)content=content+'<option value="'+k+'">'+game.users.get(k).name+"</option>";content+="</select></form></p>",await Dialog.prompt({title:game.i18n.localize("CoC7.MessageTitleSelectSingleUserForTarget"),content,callback:html=>{const formData=new FormData(html[0].querySelector("#selectform"));for(const[name,value]of formData)"user"===name&&(user=game.users.get(value))}})}}else void 0!==this.actor.user&&(user=this.actor.user);const chatData={user:user.id,speaker,content:html};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;const message=await ChatMessage.create(chatData);return this.messageId=message.id,message}async updateChatCard(){const message=game.messages.get(this.messageId);if(!game.user.isGM&&message.user.id!==game.user.id)return void ui.notifications.info(game.i18n.localize("CoC7.UnableToInteractWithChatCard"));const html=await renderTemplate(this.template,this),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}async getUpdatedChatCard(){renderTemplate(this.template,this).then((html=>html))}static async updateSelected(card,event){const target=CoC7MeleeTarget.getFromCard(card);switch(event.currentTarget.dataset.action){case"dodge":target.dodging=!0,target.notResponding=!1,target.fightingBack=!1,target.maneuvering=!1,target.skillId=event.currentTarget.dataset.skillId,target.itemId=null;break;case"noResponse":target.dodging=!1,target.notResponding=!0,target.fightingBack=!1,target.maneuvering=!1,target.skillId=null,target.itemId=null;break;case"fightBack":target.dodging=!1,target.notResponding=!1,target.fightingBack=!0,target.maneuvering=!1,target.skillId=event.currentTarget.dataset.skillId,target.itemId=event.currentTarget.dataset.weaponId;break;case"maneuver":target.dodging=!1,target.notResponding=!1,target.fightingBack=!1,target.maneuvering=!0,target.skillId=event.currentTarget.dataset.skillId,target.itemId=null}return target.updateChatCard(),target}async performSkillCheck(skillId=null,publish=!1){const check=new CoC7Check;return check.isBlind=!1,check.isUnkonwn=!1,check.referenceMessageId=this.messageId,check.rollType="opposed",check.side="target",check.action=this.action,check.actor=this.actor,check.item=this.itemId,check.skill=skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.diceModifier=0,this.disadvantage&&(check.diceModifier-=1),this.advantage&&(check.diceModifier+=1),await check.roll(),this.check=check,this.rolled=!0,this.resolved=!0,publish&&check.toMessage(),check}async publishNoReponseResult(){this.rolled=!0,this.resolved=!0,this.notResponding=!0;const resolutionCard=new CoC7MeleeResoltion(this.parentMessageId,this.messageId),resolutionMessage=await resolutionCard.preCreateMessage();this.resolutionCard=resolutionMessage.id,await this.updateChatCard()}async publishCheckResult(check=null){if(!check&&!this.check)return null;if(check&&(this.check=check),this.roll=CoC7Roll.getFromCheck(this.check),this.rolled=!0,this.roll.rollIcons=[],this.roll.critical){this.roll.rollColor="goldenrod",this.roll.rollTitle=game.i18n.localize("CoC7.CriticalSuccess");for(let index=0;index<4;index++)this.roll.rollIcons.push("medal")}else if(this.roll.fumble){this.roll.rollColor="darkred",this.roll.rollTitle=game.i18n.localize("CoC7.Fumble");for(let index=0;index<4;index++)this.roll.rollIcons.push("spider")}else if(this.roll.success){this.roll.rollColor="goldenrod",CoC7Check.successLevel.regular===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.RegularSuccess")),CoC7Check.successLevel.hard===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.HardSuccess")),CoC7Check.successLevel.extreme===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.ExtremeSuccess"));for(let index=0;index<this.roll.successLevel;index++)this.roll.rollIcons.push("star")}else this.roll.rollColor="black",this.roll.rollTitle=game.i18n.localize("CoC7.Failure"),this.roll.rollIcons.push("skull");const resolutionCard=new CoC7MeleeResoltion(this.parentMessageId,this.messageId),resolutionMessage=await resolutionCard.preCreateMessage();this.resolutionCard=resolutionMessage.id,await this.updateChatCard()}static getFromCard(card,messageId=null){const actorKey=card.dataset.actorKey,parentMessageId=card.dataset.parentMessageId,fastForward="true"===card.dataset.fastForward,target=new CoC7MeleeTarget(actorKey,parentMessageId,fastForward);return target.roll=CoC7Roll.getFromCard(card),chatHelper.getObjectFromElement(target,card),card.closest(".message")?target.messageId=card.closest(".message").dataset.messageId:target.messageId=messageId,target}upgradeRoll(luckAmount,newSuccessLevel,oldCard){this.actor.spendLuck(luckAmount)||ui.notifications.error(`${this.actor.name} didn't have enough luck to pass the check`),this.roll.value=null,this.roll.successLevel=newSuccessLevel,this.roll.luckSpent=!0,oldCard.dataset.processed=!1;const diceRolls=oldCard.querySelector(".dice-roll");diceRolls.dataset.value=null,diceRolls.dataset.successLevel=newSuccessLevel,diceRolls.dataset.luckSpent=!0;const resulDetails=oldCard.querySelector(".result-details"),diceTotal=oldCard.querySelector(".dice-total");switch(newSuccessLevel){case CoC7Check.successLevel.regular:diceTotal.innerText=game.i18n.localize("CoC7.RegularSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:diceTotal.innerText=game.i18n.localize("CoC7.HardSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:diceTotal.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:diceTotal.innerText=game.i18n.localize("CoC7.CriticalSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}diceTotal.classList.replace("failure","success"),oldCard.querySelector(".card-buttons").remove(),oldCard.querySelector(".dice-tooltip").style.display="none",CoC7Chat.updateChatCard(oldCard)}}class CoC7RangeInitiator{constructor(actorKey=null,itemId=null,fastForward=!1){this.actorKey=actorKey,this.itemId=itemId,this.fastForward=fastForward,this.resolved=!1,this.cover=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.targetCard=null,this.rolled=!1,this.singleShot=!1,this.multipleShots=!1,this.burst=!1,this.fullAuto=!1,this.tokenKey=null,this.aimed=!1,this.totalBulletsFired=0,this._targets=[];for(const t of[...game.user.targets]){const target=new CoC7RangeTarget(`${t.scene.id}.${t.id}`);target.token=t,this._targets.push(target)}if(this._targets.length)this._targets[0].active=!0;else{const target=new CoC7RangeTarget;target.active=!0,this._targets.push(target)}if(actorKey){const actor=chatHelper.getActorFromKey(actorKey);if(this.token=chatHelper.getTokenFromKey(actorKey),this.token&&(this.tokenKey=actor.tokenKey),itemId){actor.items.get(itemId)&&(this.weapon.singleShot?this.singleShot=!0:this.weapon.system.properties.auto&&(this.fullAuto=!0))}}if(this.tokenKey)for(const t of this._targets)if(t.token&&this.token){t.distance=chatHelper.getDistance(t.token,this.token),t.roundedDistance=Math.round(100*t.distance.value)/100,t.distanceUnit=t.distance.unit;const distInYd=Math.round(100*chatHelper.toYards(t.distance))/100;if(this.actor){t.pointBlankRange=!1;distInYd<=this.actor.system.characteristics.dex.value/15&&(t.pointBlankRange=!0)}this.weapon&&this.weapon.baseRange&&(t.baseRange=!1,t.longRange=!1,t.extremeRange=!1,t.outOfRange=!1,this.weapon.system.properties.shotgun?(distInYd<=this.weapon.baseRange&&(t.baseRange=!0),distInYd>this.weapon.baseRange&&distInYd<=this.weapon.longRange&&(t.longRange=!0),distInYd>this.weapon.longRange&&distInYd<=this.weapon.extremeRange&&(t.extremeRange=!0),distInYd>this.weapon.extremeRange&&(t.outOfRange=!0)):(distInYd<=this.weapon.baseRange&&(t.baseRange=!0),distInYd>this.weapon.baseRange&&distInYd<=2*this.weapon.baseRange&&(t.longRange=!0),distInYd>2*this.weapon.baseRange&&distInYd<=4*this.weapon.baseRange&&(t.extremeRange=!0),distInYd>4*this.weapon.baseRange&&(t.outOfRange=!0)),t.baseRange||t.longRange||t.extremeRange||t.outOfRange||(t.baseRange=!0))}else t.baseRange=!0}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}get actor(){return chatHelper.getActorFromKey(this.actorKey)}get item(){return this.actor.items.get(this.itemId)}get weapon(){return this.item}get targets(){return this._targets||(this._targets=[]),this._targets}get target(){return this.targets&&this.targets.length?this.targets.pop():null}get skills(){return this.actor.getWeaponSkills(this.itemId)}get mainWeaponSkill(){return this.actor.items.get(this.weapon.system.skill.main.id)}get autoWeaponSkill(){return this.weapon.system.skill.alternativ.id?this.actor.items.get(this.weapon.system.skill.alternativ.id):this.mainWeaponSkill}get autoFire(){return this.burst||this.fullAuto}get multiTarget(){return this.fullAuto||this.multipleShots}get aiming(){return void 0===this._aiming&&(this._aiming=this.actor.getActorFlag("aiming")),this._aiming}get activeTarget(){return this._targets.length?this._targets.find((t=>t.active)):null}get shots(){return void 0===this._shots&&(this._shots=[]),this._shots}get currentShotRank(){return this.shots.length+1}get activeTargetShotDifficulty(){return this.shotDifficulty()}set aiming(b){this._aiming=b}get didAnyShotHit(){let anyHit=!1;for(const r of this.rolls)anyHit=anyHit||r.isSuccess;return anyHit}get successfulHits(){const hits=[];for(let index=0;index<this.rolls.length;index++)if(this.rolls[index].isSuccess){const hit={roll:this.rolls[index],shot:this.shots[index]};hits.push(hit)}return 0!==hits.length?hits:null}get shotFired(){return this.shots?this.shots.length:0}get totalAmmo(){return this.weapon.getBulletLeft()}get maxShots(){return this.fullAuto?"∞":this.weapon.system.usesPerRound.max?parseInt(this.weapon.system.usesPerRound.max):1}get ignoreAmmo(){return game.settings.get("CoC7","disregardAmmo")}get ignoreUsesPerRound(){return game.settings.get("CoC7","disregardUsePerRound")}get outOfAmmo(){return!this.ignoreAmmo&&this.totalBulletsFired>=this.weapon.getBulletLeft()}get outOfShots(){return!this.ignoreUsesPerRound&&(!!this.shots&&this.shots.length>=this.maxShots)}get volleySize(){if(!this.weapon.system.properties.auto)return 1;if(this._volleySize)return this._volleySize;const size=Math.floor(this.autoWeaponSkill.value/10);return size<3?3:size}set volleySize(x){x>=Math.floor(this.autoWeaponSkill.value/10)?this._volleySize=Math.floor(this.autoWeaponSkill.value/10):x<=3&&(this._volleySize=3),this._volleySize=parseInt(x)}get isVolleyMinSize(){return 3===this.volleySize}get isVolleyMaxSize(){return(Math.floor(this.autoWeaponSkill.value/10)<3?3:Math.floor(this.autoWeaponSkill.value/10))===this.volleySize}getTargetFromKey(key){return this._targets.find((t=>key===t.actorKey))}calcTargetsDifficulty(){for(const t of this.targets)t.shotDifficulty=this.shotDifficulty(t)}shotDifficulty(t=null){const target=t||this.activeTarget;let damage=this.weapon.system.range.normal.damage;this.weapon.system.properties.shotgun&&(t.longRange&&(damage=this.weapon.system.range.long.damage),t.extremeRange&&(damage=this.weapon.system.range.extreme.damage));let difficulty,modifier=target.modifier;difficulty=this.weapon.system.properties.shotgun?1:target.difficulty;let difficultyName="";if(this.aiming&&1===this.currentShotRank&&modifier++,this.advantage&&modifier++,this.disadvantage&&modifier--,this.reload&&modifier--,this.multipleShots&&!this.fullAuto&&modifier--,this.fullAuto&&(modifier-=this.currentShotRank-1),modifier<-2){difficulty+=Math.abs(modifier+2),difficulty>CoC7Check.difficultyLevel.critical&&(difficulty=CoC7Check.difficultyLevel.impossible),modifier=-2}return CoC7Check.difficultyLevel.regular===difficulty&&(difficultyName="Regular"),CoC7Check.difficultyLevel.hard===difficulty&&(difficultyName="Hard"),CoC7Check.difficultyLevel.extreme===difficulty&&(difficultyName="Extreme"),CoC7Check.difficultyLevel.critical===difficulty&&(difficultyName="Critical"),CoC7Check.difficultyLevel.impossible===difficulty&&(difficultyName="Impossible"),{level:difficulty,name:difficultyName,modifier,damage,impossible:difficulty===CoC7Check.difficultyLevel.impossible}}addShotAtCurrentTarget(){this.calcTargetsDifficulty();const shot={target:this.activeTarget,extremeRange:this.activeTarget.extremeRange,actorKey:this.activeTarget.actorKey,actorName:this.activeTarget.name,difficulty:this.activeTarget.shotDifficulty.level,modifier:this.activeTarget.shotDifficulty.modifier,damage:this.activeTarget.shotDifficulty.damage,bulletsShot:1,transitBullets:0,bulletsShotTransit:1,transit:!1};let bulletLeft=this.totalAmmo-this.totalBulletsFired;if(this.fullAuto){if(this.currentShotRank>1){const previousShot=this.shots[this.currentShotRank-2];if(previousShot.actorKey!==this.activeTarget.actorKey){const distance=chatHelper.getDistance(chatHelper.getTokenFromKey(previousShot.actorKey),chatHelper.getTokenFromKey(this.activeTarget.actorKey));shot.transitBullets=Math.floor(chatHelper.toYards(distance)),shot.transitBullets>=bulletLeft&&!this.ignoreAmmo&&(shot.transitBullets=bulletLeft,bulletLeft=0),this.totalBulletsFired=parseInt(this.totalBulletsFired)+shot.transitBullets,shot.transit=!0}}shot.bulletsShot=this.volleySize,shot.bulletsShot<=3&&(shot.bulletsShot=3),shot.bulletsShot>=bulletLeft&&!this.ignoreAmmo&&(shot.bulletsShot=bulletLeft,bulletLeft=0),shot.bulletsShotTransit=shot.bulletsShot+shot.transitBullets}this.burst&&(shot.bulletsShot=parseInt(this.weapon.system.usesPerRound.burst)?parseInt(this.weapon.system.usesPerRound.burst):1,shot.bulletsShot>=bulletLeft&&!this.ignoreAmmo&&(shot.bulletsShot=bulletLeft,bulletLeft=0)),this.totalBulletsFired=parseInt(this.totalBulletsFired)+shot.bulletsShot,this.aiming&&(this.aiming=!1,this.aimed=!0),this.shots.push(shot)}get template(){return"systems/CoC7/templates/chat/combat/range-initiator.html"}async createChatCard(){this.calcTargetsDifficulty();const html=await renderTemplate(this.template,this),speakerData={},token=chatHelper.getTokenFromKey(this.actorKey);token?speakerData.token=token.document:speakerData.actor=this.actor;const speaker=ChatMessage.getSpeaker(speakerData),chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,content:html},rollMode=game.settings.get("core","rollMode");["gmroll","blindroll"].includes(rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;return await ChatMessage.create(chatData)}async updateChatCard(){this.calcTargetsDifficulty();const html=await renderTemplate(this.template,this),message=game.messages.get(this.messageId),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;"singleShot"===flag||"multipleShots"===flag||"fullAuto"===flag?(this.singleShot=!1,this.multipleShots=!1,this.fullAuto=!1,"fullAuto"===flag&&(this.burst=!1),this[flag]=!0):"burst"===flag?(this.fullAuto=!1,this.singleShot||this.multipleShots||(this.singleShot=!0),this.burst=!this.burst):this[flag]=!this[flag]}async resolveCard(){if(this.rolls=[],this.multiTarget){let weaponMalfunction=!1,index=0;for(;!weaponMalfunction&&this.shots.length>index;){const roll=await this.shootAtTarget(this.shots[index]);roll.dice?.roll&&await CoC7Dice.showRollDice3d(roll.dice.roll),await this.weapon.shootBullets(parseInt(this.shots[index].bulletsShot)+parseInt(this.shots[index].transitBullets)),roll.hasMalfunction&&(roll.isSuccess=!1,weaponMalfunction=!0),index++,this.rolls.push(roll)}}else{const roll=await this.shootAtTarget();roll.dice?.roll&&await CoC7Dice.showRollDice3d(roll.dice.roll);let bulletFired=this.burst?parseInt(this.weapon.system.usesPerRound.burst):1;bulletFired>=this.totalAmmo&&(bulletFired=this.totalAmmo);const shot={target:this.activeTarget,extremeRange:this.activeTarget.extremeRange,actorKey:this.activeTarget.actorKey,actorName:this.activeTarget.name,difficulty:this.activeTarget.shotDifficulty.level,modifier:this.activeTarget.shotDifficulty.modifier,damage:this.activeTarget.shotDifficulty.damage,bulletsShot:bulletFired,transitBullets:0,transit:!1};await this.weapon.shootBullets(bulletFired),roll.hasMalfunction&&(roll.isSuccess=!1),this.shots.push(shot),this.rolls.push(roll)}this.resolved=!0,this.rolled=!0,await this.updateChatCard()}async shootAtTarget(shot=null){const target=shot?this.getTargetFromKey(shot.actorKey):this.activeTarget,check=new CoC7Check;return check.actorKey=this.actorKey,check.actor=this.actorKey,check.item=this.itemId,check.isBlind=!1,check.isUnkonwn=!1,this.autoFire?check.skill=this.autoWeaponSkill:check.skill=this.mainWeaponSkill,this.multiTarget?(check.difficulty=shot.difficulty,check.diceModifier=shot.modifier):(this.calcTargetsDifficulty(),this.totalBulletsFired=parseInt(this.totalBulletsFired)+1,this.aiming&&(this.aiming=!1,this.aimed=!0),check.difficulty=this.activeTarget.shotDifficulty.level,check.diceModifier=this.activeTarget.shotDifficulty.modifier),check.details=`${game.i18n.localize("CoC7.Target")}: ${target.name}`,check.targetKey=target.actorKey,await check.roll(),check}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.content)[0],initiator=CoC7RangeInitiator.getFromCard(card,messageId);return initiator.messageId=messageId,initiator}changeVolleySize(x){this.volleySize=this.volleySize+x,this.updateChatCard()}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".range.initiator"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const initiator=CoC7RangeInitiator.getFromCard(card);if(event.currentTarget.classList.contains("target-flag")){const target=event.currentTarget.closest(".target"),key=parseInt(target.dataset.targetKey);initiator.targets[key].toggleFlag(camelFlag)}else initiator.toggleFlag(camelFlag);initiator.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}passRoll(rollIndex){const roll=this.rolls[rollIndex],luckAmount=parseInt(roll.luckNeeded);this.actor.spendLuck(luckAmount)?(roll.successLevel=roll.difficulty,roll.isSuccess=!0,roll.luckSpent=!0,this.updateChatCard()):ui.notifications.error(`${this.actor.name} does not have enough luck to pass the check`)}upgradeRoll(rollIndex,upgradeindex){const roll=this.rolls[rollIndex],increasedSuccess=roll.increaseSuccess[upgradeindex],luckAmount=parseInt(increasedSuccess.luckAmount);if(!this.actor.spendLuck(luckAmount))return void ui.notifications.error(`${this.actor.name} does not have enough luck to pass the check`);const newSuccessLevel=parseInt(increasedSuccess.newSuccessLevel);roll.successLevel=newSuccessLevel,roll.difficulty<=newSuccessLevel&&(roll.isSuccess=!0),roll.luckSpent=!0,this.updateChatCard()}static getFromCard(card,messageId=null){const rangeInitiator=new CoC7RangeInitiator;rangeInitiator._targets=[],messageId?rangeInitiator.messageId=messageId:card.closest(".message")&&(rangeInitiator.messageId=card.closest(".message").dataset.messageId),chatHelper.getObjectFromElement(rangeInitiator,card);const cardTargets=card.querySelectorAll(".target");for(const t of cardTargets){const target=CoC7RangeTarget.getFromElement(t);rangeInitiator.targets.push(target)}const cardShots=card.querySelectorAll(".shot");if(cardShots)for(const s of cardShots){const shot={};chatHelper.getObjectFromElement(shot,s),rangeInitiator.shots.push(shot)}rangeInitiator.rolls=[];const rolls=card.querySelectorAll(".roll-result");for(const r of rolls){const roll=CoC7Roll.getFromElement(r);rangeInitiator.rolls.push(roll)}rangeInitiator.damage=[];const damageRolls=card.querySelectorAll(".damage-results");for(const dr of damageRolls){const damageRoll=CoC7Damage.getFromElement(dr);rangeInitiator.damage.push(damageRoll)}return rangeInitiator}async rollDamage(){this.damage=[];const hits=this.successfulHits;for(let i=0;i<hits.length;i++){const h=hits[i],volleySize=parseInt(h.shot.bulletsShot),damageRolls=[];if(volleySize>0){let damageFormula=String(h.shot.damage);damageFormula&&""!==damageFormula||(damageFormula="0");const damageDie=CoC7Damage.getMainDie(damageFormula),maxDamage=new Roll(damageFormula).evaluate({maximize:!0}).total,criticalDamageFormula=this.weapon.impale?`${damageFormula} + ${maxDamage}`:`${maxDamage}`,criticalDamageDie=CoC7Damage.getMainDie(criticalDamageFormula);let impalingShots=0,successfulShots=0,critical=!1;(this.fullAuto||this.burst)&&(successfulShots=Math.floor(volleySize/2)),0===successfulShots&&(successfulShots=1),h.roll.successLevel>=CoC7Check.difficultyLevel.extreme&&(impalingShots=successfulShots,successfulShots=volleySize-impalingShots,critical=!0,CoC7Check.difficultyLevel.critical!==h.roll.successLevel&&(CoC7Check.difficultyLevel.extreme<=h.roll.difficulty||h.shot.extremeRange)&&(successfulShots=volleySize,impalingShots=0,critical=!1));let total=0;for(let index=0;index<successfulShots;index++){const roll=new Roll(damageFormula);await roll.evaluate({async:!0}),await CoC7Dice.showRollDice3d(roll),damageRolls.push({formula:damageFormula,total:roll.total,die:damageDie,critical:!1}),total+=roll.total}for(let index=0;index<impalingShots;index++){const roll=new Roll(criticalDamageFormula);await roll.evaluate({async:!0}),await CoC7Dice.showRollDice3d(roll),damageRolls.push({formula:criticalDamageFormula,total:roll.total,die:criticalDamageDie,critical:!0}),total+=roll.total}let targetName="dummy",target=chatHelper.getTokenFromKey(h.roll.targetKey);target||(target=chatHelper.getActorFromKey(h.roll.targetKey)),target&&(targetName=target.name),this.damage.push({targetKey:h.roll.targetKey,targetName,rolls:damageRolls,total,critical,dealt:!1,resultString:game.i18n.format("CoC7.rangeCombatDamage",{name:targetName,total})})}}this.damageRolled=0!==this.damage.length,this.updateChatCard()}async dealDamage(){for(let dIndex=0;dIndex<this.damage.length;dIndex++){const actor=chatHelper.getActorFromKey(this.damage[dIndex].targetKey);if(null===actor)ui.notifications.error(game.i18n.localize("CoC7.NoTargetToDamage"));else{this.damage[dIndex].totalTaken=0,this.damage[dIndex].totalAbsorbed=0;for(let rIndex=0;rIndex<this.damage[dIndex].rolls.length;rIndex++){const dealtAmount=await actor.dealDamage(this.damage[dIndex].rolls[rIndex].total);this.damage[dIndex].totalTaken+=dealtAmount,this.damage[dIndex].rolls[rIndex].taken=dealtAmount,this.damage[dIndex].rolls[rIndex].absorbed=this.damage[dIndex].rolls[rIndex].total-dealtAmount,this.damage[dIndex].totalAbsorbed+=this.damage[dIndex].rolls[rIndex].total-dealtAmount}this.damage[dIndex].dealt=!0,this.damage[dIndex].resultString=game.i18n.format("CoC7.rangeCombatDamageArmor",{name:this.damage[dIndex].targetName,total:this.damage[dIndex].totalTaken,armor:this.damage[dIndex].totalAbsorbed})}}this.damageDealt=!0,this.updateChatCard()}}class CoC7RangeTarget{constructor(actorKey=null){this.actorKey=actorKey,this.cover=!1,this.pointBlankRange=!1,this.baseRange=!0,this.longRange=!1,this.extremeRange=!1,this.inMelee=!1}get big(){return void 0===this._big&&(this.actor&&this.actor.build?this._big=this.actor.build>=4:this._big=!1),this._big}set big(b){this._big=b}get small(){return void 0===this._small&&(this.actor&&this.actor.build?this._small=this.actor.build<=-2:this._small=!1),this._small}set small(b){this._small=b}get normal(){return!this.big&&!this.small}set normal(b){this._big=!1,this._small=!1}get isFast(){return!(!this.actor||!this.actor.mov)&&this.actor.mov>=8}get fast(){return void 0===this._fast&&(this._fast=!1),this._fast}set fast(b){this._fast=b}get actor(){return this.actorKey&&!this._actor&&(this._actor=chatHelper.getActorFromKey(this.actorKey)),this._actor}get name(){return this.token?this.token.name:this.actor?this.actor.name:"Dummy"}get img(){return this.token&&this.token.document?.texture.src?this.token.document?.texture.src:this.actor?this.actor.data.img:"../icons/svg/mystery-man-black.svg"}get token(){return!this._token&&this.actorKey&&(this._token=chatHelper.getTokenFromKey(this.actorKey)),this._token}get sizeText(){return this.big?game.i18n.localize("CoC7.rangeCombatCard.BigTargetTitle"):this.small?game.i18n.localize("CoC7.rangeCombatCard.SmallTargetTitle"):game.i18n.localize("CoC7.rangeCombatCard.NormalTargetTitle")}get sizeLabel(){return this.big?game.i18n.localize("CoC7.rangeCombatCard.BigTarget"):this.small?game.i18n.localize("CoC7.combatCard.SmallTarget"):game.i18n.localize("CoC7.rangeCombatCard.NormalTarget")}get difficulty(){return this.baseRange||this.pointBlankRange?CoC7Check.difficultyLevel.regular:this.longRange?CoC7Check.difficultyLevel.hard:this.extremeRange?CoC7Check.difficultyLevel.extreme:CoC7Check.difficultyLevel.impossible}get modifier(){let modifier=0;return this.cover&&modifier--,this.pointBlankRange&&modifier++,this.fast&&modifier--,this.small&&modifier--,this.big&&modifier++,this.inMelee&&modifier--,this.surprised&&modifier++,modifier}set token(t){this._token=t}static getFromElement(element){const target=new CoC7RangeTarget;return chatHelper.getObjectFromElement(target,element),target}static changeDisplayedTarget(event){if(!event.currentTarget.classList.contains("target-selector"))return null;return event.currentTarget.closest(".targets").querySelectorAll(".target")}attachToElement(element){chatHelper.attachObjectToElement(this,element)}toggleFlag(flag){"baseRange"===flag||"longRange"===flag||"extremeRange"===flag||"pointBlankRange"===flag?(this.pointBlankRange=!1,this.baseRange=!1,this.longRange=!1,this.extremeRange=!1,this.outOfRange=!1,this[flag]=!0):"size"===flag?this.small?(this.small=!1,this.big=!0):this.big?(this.small=!1,this.big=!1):this.small=!0:this[flag]=!this[flag],"fast"===flag&&this.fast&&!this.isFast&&ui.notifications.warn(game.i18n.format("CoC7.WarnFastTargetWithWrongMOV",{mov:this.actor.mov}))}}const CHAT_COC7_MESSAGE_FAKEROLL='<div class="dice-roll"><div class="dice-result"><div class="dice-formula">???</div><h4 class="dice-total">?</h4></div></div>';class CoC7Chat{static renderChatMessageHook(chatMessage,html){chatMessage.getFlag("CoC7","GMSelfRoll")&&!game.user.isGM&&(html.find(".whisper-to").remove(),html.find(".flavor-text").replaceWith(`<span class="flavor-text">${game.i18n.localize("CoC7.RollSecretDice")}</span>`),html.find(".message-content").replaceWith(`<div class="message-content">${CHAT_COC7_MESSAGE_FAKEROLL}</div>`)),chatMessage.getFlag("CoC7","removeWisperTargets")&&!game.user.isGM&&html.find(".whisper-to").remove(),chatMessage.getFlag("CoC7","fakeRoll")&&game.user.isGM&&(html.find(".flavor-text").replaceWith(game.i18n.localize("CoC7.KeeperSentDecoy")),html.find(".message-content").remove())}static fakeRollMessage(){const chatData={user:game.user.id,flavor:game.i18n.localize("CoC7.RollSecretDice"),whisper:game.users.players,type:CONST.CHAT_MESSAGE_TYPES.WHISPER,flags:{CoC7:{GMSelfRoll:!1,removeWisperTargets:!0,fakeRoll:!0}},content:CHAT_COC7_MESSAGE_FAKEROLL};ChatMessage.create(chatData)}static ready(){game.CoC7="init"}static async chatListeners(app,html){html.on("click",".card-buttons button",CoC7Chat._onChatCardAction.bind(this)),html.on("click",".card-title",CoC7Chat._onChatCardToggleContent.bind(this)),html.on("click",".radio-switch",CoC7Chat._onChatCardRadioSwitch.bind(this)),html.on("click",".panel-switch",CoC7Chat._onChatCardToggleSwitch.bind(this)),html.on("click",".simple-flag",CoC7Chat._onChatCardToggleSwitch.bind(this)),html.on("click",".volley-size",CoC7Chat._onChatCardVolleySize.bind(this)),html.on("click",".dropdown-element",CoC7Chat._onDropDownElementSelected.bind(this)),html.on("click",".simple-toggle",CoC7Chat._onToggleSelected.bind(this)),html.on("click",".target-selector",CoC7Chat._onTargetSelect.bind(this)),html.on("dblclick",".open-actor",CoC7Chat._onOpenActor.bind(this)),html.on("click","coc7-inline-result",CoC7Chat._onInline.bind(this)),OpposedCheckCard.bindListerners(html),CombinedCheckCard.bindListerners(html)}static _onOpenActor(event){event.preventDefault();const actorKey=event.currentTarget.dataset.actorKey;if(actorKey){const actor=chatHelper.getActorFromKey(actorKey);actor.isOwner&&actor.sheet.render(!0)}}static async onUpdateChatMessage(chatMessage){if(ui.chat.scrollBottom(),game.user.isGM&&0===chatMessage.type){const card=$(chatMessage.content)[0];if(card.classList.contains("melee")&&"true"===card.dataset.resolved){if(card.classList.contains("initiator"))if(card.dataset.targetCard){const initiator=CoC7MeleeInitiator.getFromMessageId(chatMessage.id),target=CoC7MeleeTarget.getFromMessageId(initiator.targetCard);if(target.resolved){const resolutionCard=new CoC7MeleeResoltion(chatMessage.id,target.messageId,target.resolutionCard);await resolutionCard.resolve(),initiator.checkRevealed||await initiator.revealCheck()}}else{const initiator=CoC7MeleeInitiator.getFromMessageId(chatMessage.id);if(initiator.resolutionCard){const resolutionCard=new CoC7MeleeResoltion(chatMessage.id,null,initiator.resolutionCard);await resolutionCard.resolve(),initiator.checkRevealed||await initiator.revealCheck()}}if(card.classList.contains("target")){const target=CoC7MeleeTarget.getFromMessageId(chatMessage.id),resolutionCard=new CoC7MeleeResoltion(target.parentMessageId,chatMessage.id,target.resolutionCard);await resolutionCard.resolve(),target.meleeInitiator.checkRevealed||await target.meleeInitiator.revealCheck()}}}}static async renderMessageHook(message,html){if(ui.chat.scrollBottom(),InteractiveChatCard.bindListeners(html),message.getFlag("CoC7","checkRevealed")&&(html.find(".dice-roll").removeClass("gm-visible-only"),html[0].dataset.checkRevealed=!0),html.find(".dropbtn").click((event=>event.currentTarget.closest(".dropdown").querySelector(".dropdown-content").classList.toggle("show"))),html.find(".dropdown").mouseleave((event=>event.currentTarget.querySelector(".dropdown-content").classList.remove("show"))),game.user.isGM){const card=html[0].querySelector(".coc7.chat-card");if(card&&card.classList.contains("roll-card")&&"true"!==card.dataset.processed&&card.dataset.refMessageId){const roll=CoC7Roll.getFromElement(card);"target"===card.dataset.side&&(roll.defendantId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId),"initiator"===card.dataset.side&&(roll.initiatorId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId),card.dataset.processed="true",CoC7Chat.updateCombatCardTarget(roll)}}const userOnly=html.find(".target-only");for(const element of userOnly)if(!game.user.isGM){element.style.display="none";const actorId=element.getAttribute("data-actor-id");actorId&&game.actors.get(actorId).isOwner&&(element.style.display="block")}const gmOnly=html.find(".gm-only");for(const zone of gmOnly)game.user.isGM||(zone.style.display="none");const userVisibleOnly=html.find(".user-visible-only");for(const elem of userVisibleOnly)game.user.isGM&&(elem.style.display="none");const gmVisibleOnly=html.find(".gm-visible-only");for(const elem of gmVisibleOnly)game.user.isGM||game.user.isTrusted&&game.settings.get("CoC7","trustedCanSeeChatCard")||(elem.style.display="none");const ownerVisibleOnly=html.find(".owner-visible-only");for(const zone of ownerVisibleOnly){let actor=CoC7Chat._getActorFromKey(zone.dataset?.actorKey);actor||(actor=CoC7Chat._getChatCardActor(zone.closest(".chat-card"))),actor||(actor=CoC7Chat._getActorFromKey(zone.parentElement.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-actor-key]")?.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-token-key]")?.dataset.actorKey)),(actor&&!actor.isOwner||game.user.isGM)&&(zone.style.display="none")}if(!game.user.isGM){const ownerOnly=html.find(".owner-only");for(const zone of ownerOnly){let actor=CoC7Chat._getActorFromKey(zone.dataset?.actorKey||zone.dataset?.actorId);actor||(actor=CoC7Chat._getChatCardActor(zone.closest(".chat-card"))),actor||(actor=CoC7Chat._getActorFromKey(zone.parentElement.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-actor-key]")?.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-token-key]")?.dataset.actorKey)),(actor&&!actor.isOwner||!actor&&!game.user.isGM)&&(zone.style.display="none")}const gmSelectOnly=html.find(".gm-select-only");if(!game.user.isTrusted||!game.settings.get("CoC7","trustedCanModfyChatCard"))for(const select of gmSelectOnly)select.classList.add("inactive"),select.classList.remove("simple-flag")}}static get actionTypeString(){return{fightBack:"CoC7.fightBack",maneuver:"CoC7.maneuver",dodging:"CoC7.dodge"}}static _onTargetSelect(event){const index=parseInt(event.currentTarget.dataset.key),targetsSelector=event.currentTarget.closest(".targets-selector");for(const i of targetsSelector.querySelectorAll("img"))i.style.border="none";targetsSelector.querySelector(`[data-key="${index}"]`).querySelector("img").style.border="1px solid #000";const targets=event.currentTarget.closest(".targets");for(const t of targets.querySelectorAll(".target"))t.style.display="none",t.dataset.active="false";const targetToDisplay=targets.querySelector(`[data-target-key="${index}"]`);targetToDisplay.style.display="block",targetToDisplay.dataset.active="true"}static _onDropDownElementSelected(event){event.preventDefault();const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("target"))return void CoC7MeleeTarget.updateSelected(card,event);const dropDownBoxes=event.currentTarget.closest(".response-selection").querySelectorAll(".toggle-switch");for(const dpdnBox of dropDownBoxes)dpdnBox.classList.remove("switched-on");event.currentTarget.closest(".toggle-switch").classList.add("switched-on"),event.currentTarget.closest(".dropdown-content").classList.toggle("show");const selectedBox=event.currentTarget.closest(".defender-action-select").querySelector(".selected-action");selectedBox.style.display="block";const button=selectedBox.querySelector("button");switch(button.dataset.action="defending",button.dataset.actionType=event.currentTarget.dataset.action,button.dataset.defenderChoice=event.currentTarget.dataset.action,button.dataset.skillId=event.currentTarget.dataset.skillId,button.dataset.skillValue=event.currentTarget.dataset.skillValue,button.dataset.skillName=event.currentTarget.dataset.skillName,button.dataset.itemId=event.currentTarget.dataset.weaponId,button.dataset.itemName=event.currentTarget.dataset.weaponName,event.currentTarget.dataset.action){case"maneuver":button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.skillName} (${event.currentTarget.dataset.skillValue}%)`;break;case"fightBack":button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.weaponName} (${event.currentTarget.dataset.skillValue}%)`}}static async _onInline(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("inline-result"))return a.classList.contains("expanded")?CoC7Check._collapseInlineResult(a):CoC7Check._expandInlineResult(a)}static _onToggleSelected(event){const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("target"))return void CoC7MeleeTarget.updateSelected(card,event);if(""===event.currentTarget.dataset.skillId)return void ui.notifications.error(game.i18n.localize("CoC7.ErrorNoDodgeSkill"));const dropDownBoxes=event.currentTarget.closest(".response-selection").querySelectorAll(".toggle-switch");for(const dpdnBox of dropDownBoxes)dpdnBox.classList.remove("switched-on");event.currentTarget.classList.add("switched-on");const selectedBox=event.currentTarget.closest(".defender-action-select").querySelector(".selected-action");selectedBox.style.display="block";const button=selectedBox.querySelector("button");button.dataset.action="defending",button.dataset.actionType="dodging",button.dataset.defenderChoice=event.currentTarget.dataset.action,button.dataset.skillId=event.currentTarget.dataset.skillId,button.dataset.skillValue=event.currentTarget.dataset.skillValue,button.dataset.skillName=event.currentTarget.dataset.skillName,button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.skillName} (${event.currentTarget.dataset.skillValue}%)`}static _onChatCardRadioSwitch(event){event.preventDefault();const optionList=event.currentTarget.parentElement.getElementsByClassName("radio-switch");let index;for(index=0;index<optionList.length;index++){const element=optionList[index];element.dataset.property===event.currentTarget.dataset.property?element.classList.add("switched-on"):element.classList.remove("switched-on")}event.currentTarget.parentElement.dataset.selected=event.currentTarget.dataset.property}static async _onChatCardVolleySize(event){const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("range")&&card.classList.contains("initiator")){const rangeCard=CoC7RangeInitiator.getFromCard(card);event.currentTarget.classList.contains("increase")?rangeCard.changeVolleySize(1):event.currentTarget.classList.contains("decrease")&&rangeCard.changeVolleySize(-1)}}static async _onChatCardToggleSwitch(event){event.preventDefault();const card=event.currentTarget.closest(".chat-card");card.classList.contains("melee")&&(card.classList.contains("initiator")&&CoC7MeleeInitiator.updateCardSwitch(event),card.classList.contains("target")&&CoC7MeleeTarget.updateCardSwitch(event)),card.classList.contains("range")&&card.classList.contains("initiator")&&CoC7RangeInitiator.updateCardSwitch(event),card.classList.contains("damage"),card.classList.contains("roll-card")&&CoC7Check.updateCardSwitch(event)}static _getChatCardActor(card){const cardData=card.dataset.object?JSON.parse(unescape(card.dataset.object)):card.dataset;if(cardData.actorKey)return CoC7Chat._getActorFromKey(cardData.actorKey);const tokenKey=cardData.tokenId;if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token.actor||new Token(tokenData).actor:null}}const actorId=cardData.actorId;if(actorId)return game.actors.get(actorId);const message=card.closest(".message"),messageId=message?message.dataset.messageId:null;if(messageId){const chatMessage=game.messages.get(messageId);if(chatMessage.user)return chatMessage.user.character}return null}static isCardOwner(card){const message=card.closest(".message"),messageId=message?message.dataset.messageId:null;if(messageId){return game.messages.get(messageId).ownner||!1}return!1}static _getActorFromKey(key){if(key){if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token.actor||new Token(tokenData).actor:null}}return game.actors.get(key)||null}}static getActorFromToken(tokenKey){const token=CoC7Chat.getToken(tokenKey);return token?token.actor:null}static getToken(tokenKey){if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId){const tokenDoc=game.actors.tokens[tokenId]?.token;return tokenDoc.object}{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token||new Token(tokenData):null}}return null}static async updateChatCard(card,messId=null){const messageId=null==messId?card.closest(".message").dataset.messageId:messId,message=game.messages.get(messageId),msg=await message.update({content:card.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}static async _onChatCardAction(event){event.preventDefault();const button=event.currentTarget,card=button.closest(".chat-card");if(!card)return;const originMessage=button.closest(".message"),action=button.dataset.action;if(CoC7Chat._getChatCardActor(card))switch(action){case"useLuck":{const luckAmount=parseInt(button.dataset.luckAmount),newSuccessLevel=parseInt(event.currentTarget.dataset.newSuccessLevel);if(card.classList.contains("melee")){let meleeCard;card.classList.contains("target")&&(meleeCard=CoC7MeleeTarget.getFromCard(card)),card.classList.contains("initiator")&&(meleeCard=CoC7MeleeInitiator.getFromCard(card)),meleeCard.upgradeRoll(luckAmount,newSuccessLevel,card)}else if(card.classList.contains("range")){const rangeCard=CoC7RangeInitiator.getFromCard(card),rollResult=button.closest(".roll-result"),rollIndex=rollResult?parseInt(rollResult.dataset.index):null;if(button.classList.contains("pass-check"))rangeCard.passRoll(rollIndex);else{const upgradeIndex=parseInt(button.dataset.index);rangeCard.upgradeRoll(rollIndex,upgradeIndex)}}else if(card.classList.contains("roll-card")||null!=card.querySelector(".roll-result")){const check=await CoC7Check.getFromCard(card);if(button.classList.contains("pass-check")){const luckAmount=parseInt(button.dataset.luckAmount);check.forcePass(luckAmount)}else{const upgradeIndex=parseInt(button.dataset.index);await check.upgradeCheck(upgradeIndex)}}else{const actor=CoC7Chat._getChatCardActor(card),detailedResultPlaceHolder=card.querySelector(".result-details");if(actor.spendLuck(luckAmount)){const result=card.querySelector(".dice-total");switch(card.dataset.successLevel=newSuccessLevel,card.dataset.processed="false",newSuccessLevel){case CoC7Check.successLevel.regular:result.innerText=game.i18n.localize("CoC7.RegularSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:result.innerText=game.i18n.localize("CoC7.HardSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:result.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:result.innerText=game.i18n.localize("CoC7.CriticalSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}result.classList.replace("failure","success"),result.classList.remove("fumble"),card.querySelector(".card-buttons").remove(),card.querySelector(".dice-tooltip").style.display="none",await CoC7Chat.updateChatCard(card)}else ui.notifications.error(game.i18n.format("CoC7.ErrorNotEnoughLuck",{actor:actor.name}))}break}case"push":{const newCard=card.cloneNode(!0),result=newCard.querySelector(".dice-total");result.innerText=result.innerText+game.i18n.localize("CoC7.PushingSkill"),result.classList.remove("failure"),newCard.querySelector(".card-buttons").remove(),newCard.dataset.pushedRoll=!0,await CoC7Chat.updateChatCard(newCard,originMessage.dataset.messageId),await CoC7Check.push(card);break}case"defending":{let defender,defenderKey=event.currentTarget.closest(".defender-action-select").dataset.tokenId;defenderKey?defender=this.getActorFromToken(defenderKey):(defenderKey=event.currentTarget.closest(".defender-action-select").dataset.actorId,defender=game.actors.get(defenderKey));const responseType=event.currentTarget.dataset.actionType,outnumbered="true"===event.currentTarget.dataset.outnumbered,check=new CoC7Check;switch(check.referenceMessageId=originMessage.dataset.messageId,check.rollType="opposed",check.side="target",check.action=responseType,responseType){case"dodging":check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,outnumbered&&(check.diceModifier=-1),await check.roll(),check.toMessage();break;case"fightBack":check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.item=event.currentTarget.dataset.itemId,outnumbered&&(check.diceModifier=-1),await check.roll(),check.toMessage();break;case"maneuver":{const actor=CoC7Chat._getChatCardActor(card);if(defender.build<=actor.build-3)return void ui.notifications.error(game.i18n.localize("CoC7.ErrorManeuverNotPossible"));check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,outnumbered&&(check.diceModifier=-1),defender.build<actor.build&&(check.diceModifier=check.diceModifier-(actor.build-defender.build)),check.diceModifier<-2&&(check.difficulty=check.difficulty+Math.abs(check.diceModifier)-2,check.diceModifier=-2),await check.roll(),check.toMessage();break}}break}case"melee-initiator-roll":{const initiator=CoC7MeleeInitiator.getFromCard(card),check=await initiator.performSkillCheck(event.currentTarget.dataset.skill);$(button).prop("disabled",!0),await CoC7Dice.showRollDice3d(check.dice.roll),await initiator.publishCheckResult();break}case"melee-target-no-response":{const target=CoC7MeleeTarget.getFromCard(card);await target.publishNoReponseResult();break}case"melee-target-roll":{const target=CoC7MeleeTarget.getFromCard(card),check=await target.performSkillCheck(event.currentTarget.dataset.skill);$(button).prop("disabled",!0),await CoC7Dice.showRollDice3d(check.dice.roll),await target.publishCheckResult();break}case"roll-melee-damage":{const damageChatCard=new DamageCard({critical:"true"===button.dataset.critical,fastForward:event.shiftKey});damageChatCard.actorKey=button.dataset.dealer,damageChatCard.targetKey=button.dataset.target,damageChatCard.itemId=button.dataset.weapon,originMessage.dataset.messageId&&(damageChatCard.messageId=originMessage.dataset.messageId),damageChatCard.updateChatCard();break}case"range-initiator-shoot":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);rangeInitiator.addShotAtCurrentTarget(),await rangeInitiator.updateChatCard();break}case"range-initiator-roll":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.resolveCard();break}case"roll-range-damage":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.rollDamage();break}case"deal-melee-damage":{const targetKey=card.dataset.targetKey,amount=card.dataset.result,targetActor=chatHelper.getActorFromKey(targetKey);await targetActor.dealDamage(amount);const buttons=card.querySelector(".card-buttons"),diceTotal=card.querySelector(".dice-total");$(diceTotal).append('<i class="fas fa-check"></i>'),buttons&&buttons.remove(),await CoC7Chat.updateChatCard(card);break}case"deal-range-damage":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.dealDamage();break}case"testcheck":(await CoC7Check.getFromCard(card)).forcePass();break;case"force-pass":(await CoC7Check.getFromCard(card)).forcePass();break;case"force-fail":(await CoC7Check.getFromCard(card)).forceFail();break;case"increase-success-level":(await CoC7Check.getFromCard(card)).increaseSuccessLevel();break;case"decrease-success-level":(await CoC7Check.getFromCard(card)).decreaseSuccessLevel();break;case"reveal-check":{const check=await CoC7Check.getFromCard(card);check.isBlind=!1,check.computeCheck(),isCtrlKey(event),check.updateChatCard({makePublic:!0});break}case"roll-check-card":{const check=await CoC7Check.getFromCard(card);check.standby=!1,await check._perform(),check.updateChatCard({forceRoll:!0});break}case"flag-for-development":{const check=await CoC7Check.getFromCard(card);await check.flagForDevelopement(),check.computeCheck(),check.updateChatCard();break}case"reset-creature-san-data":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.clearSanLossReason(),await sanCheck.updateChatCard();break}case"roll-san-check":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollSan(),await sanCheck.updateChatCard();break}case"advance-state":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.advanceState(button.dataset.state),await sanCheck.updateChatCard();break}case"roll-san-loss":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollSanLoss(),sanCheck.updateChatCard();break}case"roll-int-check":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollInt(),sanCheck.updateChatCard();break}case"roll-con-check":{const conCheck=CoC7ConCheck.getFromCard(card);await conCheck.rollCon(),conCheck.updateChatCard();break}case"reveal-con-check":{const conCheck=CoC7ConCheck.getFromCard(card);conCheck.isBlind=!1,conCheck.updateChatCard();break}}}static _onChatCardToggleContent(event){event.preventDefault();const content=event.currentTarget.closest(".chat-card").querySelector(".card-content");content&&(content.style.display?content.style.display="none"===content.style.display?"block":"none":content.style.display="block")}}class CoC7MeleeInitiator extends ChatCardActor{constructor(actorKey=null,itemId=null,fastForward=!1){super(actorKey,fastForward),this.itemId=itemId,this.resolved=!1,this.outnumbered=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.targetCard=null,this.rolled=!1}get template(){return"systems/CoC7/templates/chat/combat/melee-initiator.html"}async revealCheck(){const chatMessage=game.messages.get(this.messageId);await chatMessage.setFlag("CoC7","checkRevealed",!0),await ui.chat.updateMessage(chatMessage,!1)}async createChatCard(){chatHelper.getActorImgFromKey(this.actorKey);const html=await renderTemplate(this.template,this),speakerData={};this.token?speakerData.token=this:speakerData.actor=this;const speaker=ChatMessage.getSpeaker(speakerData),chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,content:html};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;return await ChatMessage.create(chatData)}async updateChatCard(){const html=await renderTemplate(this.template,this),message=game.messages.get(this.messageId),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;this[flag]=!this[flag]}async performSkillCheck(skillId=null,publish=!1){const check=new CoC7Check;if(check.isBlind=!1,check.isUnkonwn=!1,check.referenceMessageId=this.messageId,check.rollType="opposed",check.side="initiator",check.action="attack",check.actor=this.actorKey,check.item=this.itemId,check.skill=skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.diceModifier=0,game.user.isGM?this.checkRevealed=!1:this.checkRevealed=!0,this.outnumbered&&(check.diceModifier+=1),this.surprised&&(check.diceModifier+=1),this.disadvantage&&(check.diceModifier-=1),this.advantage&&(check.diceModifier+=1),await check.roll(),this.check=check,this.rolled=!0,this.resolved=!0,publish&&check.toMessage(),this.criticalDamage=check.successLevel===CoC7Check.successLevel.extreme||check.successLevel===CoC7Check.successLevel.critical,this.hasTarget&&!this.autoSuccess){const message=await game.CoC7socket.executeAsGM("gmcreatemessageas",{targetKey:this.targetKey,messageId:this.messageId,fastForward:this.fastForward,actorKey:this.actorKey});this.targetCard=message.id||message._id}return this.autoSuccess&&!this.check.isFumble&&this.check.forcePass(),check}async publishCheckResult(check=null){if(!check&&!this.check)return null;if(check&&(this.check=check),this.roll=CoC7Roll.getFromCheck(this.check),this.rolled=!0,this.roll.rollIcons=[],this.roll.critical){this.roll.rollColor="goldenrod",this.roll.rollTitle=game.i18n.localize("CoC7.CriticalSuccess");for(let index=0;index<4;index++)this.roll.rollIcons.push("medal")}else if(this.roll.fumble){this.roll.rollColor="darkred",this.roll.rollTitle=game.i18n.localize("CoC7.Fumble");for(let index=0;index<4;index++)this.roll.rollIcons.push("spider")}else if(this.roll.success){this.roll.rollColor="goldenrod",CoC7Check.successLevel.regular===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.RegularSuccess")),CoC7Check.successLevel.hard===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.HardSuccess")),CoC7Check.successLevel.extreme===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.ExtremeSuccess"));for(let index=0;index<this.roll.successLevel;index++)this.roll.rollIcons.push("star")}else this.roll.rollColor="black",this.roll.rollTitle=game.i18n.localize("CoC7.Failure"),this.roll.rollIcons.push("skull");if(!this.targetCard&&!this.autoSuccess&&this.hasTarget){const resolutionCard=new CoC7MeleeResoltion(this.parentMessageId,this.messageId),resolutionMessage=await resolutionCard.preCreateMessage();this.resolutionCard=resolutionMessage.id}await this.updateChatCard()}static getFromCard(card,messageId=null){const initiator=new CoC7MeleeInitiator;return chatHelper.getObjectFromElement(initiator,card),initiator.roll=CoC7Roll.getFromCard(card),card.closest(".message")?initiator.messageId=card.closest(".message").dataset.messageId:initiator.messageId=messageId,initiator}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.content)[0],initiator=CoC7MeleeInitiator.getFromCard(card,messageId);return initiator.messageId=messageId,initiator}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".melee.initiator"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const initiator=CoC7MeleeInitiator.getFromCard(card);initiator.toggleFlag(flag),initiator.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}upgradeRoll(luckAmount,newSuccessLevel,oldCard){this.actor.spendLuck(luckAmount)||ui.notifications.error(game.i18n.format("CoC7.LuckNotEnough",{name:this.actor.name})),this.roll.value=null,this.roll.successLevel=newSuccessLevel,this.roll.luckSpent=!0,oldCard.dataset.processed=!1;const diceRolls=oldCard.querySelector(".dice-roll");diceRolls.dataset.value=null,diceRolls.dataset.successLevel=newSuccessLevel,diceRolls.dataset.luckSpent=!0;const resulDetails=oldCard.querySelector(".result-details"),diceTotal=oldCard.querySelector(".dice-total"),rollDamageButton=oldCard.querySelector('button[data-action="roll-melee-damage"]');switch(rollDamageButton&&rollDamageButton.classList.remove("invisible"),newSuccessLevel){case CoC7Check.successLevel.regular:diceTotal.innerText=game.i18n.localize("CoC7.RegularSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:diceTotal.innerText=game.i18n.localize("CoC7.HardSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:rollDamageButton&&(rollDamageButton.dataset.critical=!0),diceTotal.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:rollDamageButton&&(rollDamageButton.dataset.critical=!0),diceTotal.innerText=game.i18n.localize("CoC7.CriticalSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}diceTotal.classList.replace("failure","success"),oldCard.querySelector(".card-buttons").remove(),oldCard.querySelector(".dice-tooltip").style.display="none",CoC7Chat.updateChatCard(oldCard)}}class CoCActor extends Actor{constructor(data,context){if(data.type in CONFIG.Actor.documentClasses&&!context?.extended)return new CONFIG.Actor.documentClasses[data.type](data,{extended:!0,...context});super(data,context)}async initialize(){super.initialize(),await this.creatureInit()}prepareBaseData(){if(["character","npc","creature"].includes(this.type)){this.system.skills={};for(const i of this.items)"skill"===i.type&&(this.system.skills[`${i.itemIdentifier}`]={foundryID:i.id,cocid:i.flags?.CoC7?.cocidFlag?.id,value:i.rawValue,bonusDice:i.system.bonusDice});if(void 0===this.system.attribs.san.dailyLimit)if(this.system.attribs.san.oneFifthSanity){const s=this.system.attribs.san.oneFifthSanity.split("/");s[1]&&!isNaN(Number(s[1]))?this.system.attribs.san.dailyLimit=Number(s[1]):this.system.attribs.san.dailyLimit=0}else this.system.attribs.san.dailyLimit=0;this.system.attribs.mov.value=this.rawMov,this.system.attribs.db.value=this.rawDb,this.system.attribs.build.value=this.rawBuild,this.system.attribs.build.current=this.hp}super.prepareBaseData()}prepareEmbeddedDocuments(){super.prepareEmbeddedDocuments()}prepareDerivedData(){if(["character","npc","creature"].includes(this.type)){super.prepareDerivedData(),this.system.attribs.mov.value=this.rawMov,this.system.attribs.db.value=this.rawDb,this.system.attribs.build.value=this.rawBuild,this.system.attribs.hp.max=this.rawHpMax,null===this.hp&&(this.system.attribs.hp.value=this.rawHpMax),this.system.attribs.mp.max=this.rawMpMax,null===this.mp&&(this.system.attribs.mp.value=this.rawMpMax),this.system.attribs.san.max=this.rawSanMax,null===this.san&&(this.system.attribs.san.value=this.rawSanMax);const filterMatrix=[];this.system.attribs.hp.auto&&filterMatrix.push("system.attribs.hp.max"),this.system.attribs.mp.auto&&filterMatrix.push("system.attribs.mp.max"),this.system.attribs.san.auto&&filterMatrix.push("system.attribs.san.max"),this.system.attribs.mov.auto&&filterMatrix.push("system.attribs.mov.value"),this.system.attribs.db.auto&&filterMatrix.push("system.attribs.db.value"),this.system.attribs.build.auto&&filterMatrix.push("system.attribs.build.value");const changes=this.effects.reduce(((changes,e)=>e.disabled||e.isSuppressed?changes:changes.concat(e.changes.map((c=>((c=foundry.utils.duplicate(c)).effect=e,c.priority=c.priority??10*c.mode,c))))),[]);changes.sort(((a,b)=>a.priority-b.priority));const selectChanges=changes.filter((e=>filterMatrix.includes(e.key)));for(const change of selectChanges)change.effect.apply(this,change);this.hpMax&&this.hpMax<this.hp&&(this.system.attribs.hp.value=this.hpMax),this.mpMax&&this.mpMax<this.mp&&(this.system.attribs.mp.value=this.mpMax),this.sanMax&&this.sanMax<this.san&&(this.system.attribs.san.value=this.sanMax)}}static async create(data,options={}){return"character"===data.type?data.prototypeToken=foundry.utils.mergeObject(data.prototypeToken||{},{actorLink:!0,disposition:1,sight:{enabled:!0}}):"npc"===data.type?void 0!==data.img&&"icons/svg/mystery-man.svg"!==data.img||(data.img="systems/CoC7/assets/icons/cultist.svg"):"creature"===data.type?void 0!==data.img&&"icons/svg/mystery-man.svg"!==data.img||(data.img="systems/CoC7/assets/icons/floating-tentacles.svg"):"container"===data.type&&(void 0!==data.img&&"icons/svg/mystery-man.svg"!==data.img||(data.img="icons/svg/chest.svg"),data.prototypeToken=foundry.utils.mergeObject(data.prototypeToken||{},{actorLink:!0})),super.create(data,options)}checkUndefinedAuto(){const returnData={attribs:{hp:{},mp:{},san:{},mov:{},db:{},build:{}}};return void 0===this.system.attribs?.hp?.auto&&(returnData.attribs.hp.auto=!0),void 0===this.system.attribs?.mp?.auto&&(returnData.attribs.mp.auto=!0),void 0===this.system.attribs?.san?.auto&&(returnData.attribs.san.auto=!0),void 0===this.system.attribs?.mov?.auto&&(returnData.attribs.mov.auto=!0),void 0===this.system.attribs?.db?.auto&&(returnData.attribs.db.auto=!0),void 0===this.system.attribs?.build?.auto&&(returnData.attribs.build.auto=!0),returnData}get characteristics(){const characteristics={str:{value:null,shortName:"CHARAC.STR",label:"CHARAC.Strength",formula:null},con:{value:null,shortName:"CHARAC.CON",label:"CHARAC.Constitution",formula:null},siz:{value:null,shortName:"CHARAC.SIZ",label:"CHARAC.Size",formula:null},dex:{value:null,shortName:"CHARAC.DEX",label:"CHARAC.Dexterity",formula:null},app:{value:null,shortName:"CHARAC.APP",label:"CHARAC.Appearance",formula:null},int:{value:null,shortName:"CHARAC.INT",label:"CHARAC.Intelligence",formula:null},pow:{value:null,shortName:"CHARAC.POW",label:"CHARAC.Power",formula:null},edu:{value:null,shortName:"CHARAC.EDU",label:"CHARAC.Education",formula:null}};if(this.system.characteristics)for(const[key,value]of Object.entries(this.system.characteristics))characteristics[key]={key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label),value:value.value,hard:Math.floor(value.value/2)||null,extreme:Math.floor(value.value/5)||null,formula:value.formula};return characteristics}static async initToken(createData){}get hasTempoInsane(){return this.hasConditionStatus(COC7.status.tempoInsane)}get getTempoInsaneDurationText(){return this.hasConditionValue(COC7.status.tempoInsane,"durationText")}get hasIndefInsane(){return this.hasConditionStatus(COC7.status.indefInsane)}get portrait(){return game.settings.get("CoC7","useToken")&&(this.token?.texture?.src||this.prototypeToken?.texture?.src)||this.img}async enterBoutOfMadness(realTime=!0,duration=1){let result=null;const boutOfMadnessTableId=realTime?game.settings.get("CoC7","boutOfMadnessRealTimeTable"):game.settings.get("CoC7","boutOfMadnessSummaryTable");if("none"!==boutOfMadnessTableId){result={phobia:!1,mania:!1,description:null};const boutOfMadnessTable=game.tables.get(boutOfMadnessTableId);if(result.tableRoll=await boutOfMadnessTable.roll(),void 0!==result.tableRoll.results[0]){if(CONST.TABLE_RESULT_TYPES.DOCUMENT===result.tableRoll.results[0].type){const item=game.items.get(result.tableRoll.results[0].documentId);if(void 0!==item){item.system?.type?.phobia&&(result.phobia=!0),item.system?.type?.mania&&(result.mania=!0),result.description=`${item.name}:`+await TextEditor.enrichHTML(item.system.description.value,{async:!0}),result.name=item.name;const itemData=item.toObject();delete itemData._id,await this.createEmbeddedDocuments("Item",[itemData])}else ui.notifications.error(game.i18n.localize("CoC7.MessageBoutOfMadnessItemNotFound"))}CONST.TABLE_RESULT_TYPES.TEXT===result.tableRoll.results[0].type&&(result.description=await TextEditor.enrichHTML(result.tableRoll.results[0].text,{async:!0}))}else ui.notifications.error(game.i18n.localize("CoC7.MessageBoutOfMadnessTableNotFound"))}return realTime?(this.setCondition(COC7.status.tempoInsane,{realTime,duration}),result):result}static emptySkill(skillName,value,{rarity=!1,push=!0,combat=!1,img=!1,specialization=!1}={}){const data={name:skillName,type:"skill",system:{value,skillName,specialization:"",properties:{special:!1,rarity,push,combat}}};if(!1!==img&&(data.img=img),!1!==specialization){const parts=CoC7Item.getNamePartsSpec(skillName,specialization);data.system.specialization=parts.specialization,data.system.skillName=parts.skillName,data.name=parts.name,data.system.properties.special=!0}return data}async createSkill(skillName,value,showSheet=!1){const data=CoCActor.emptySkill(skillName,value);return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createWeaponSkill(name,firearms=!1,base=null){const skillData=await SkillSpecSelectDialog.create([],game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName"),0,name),value=Number(skillData.get("base-value")),parts=CoC7Item.getNamePartsSpec(name,game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName")),data={name:parts.name,type:"skill",system:{base:isNaN(value)?0:value,adjustments:{personal:null,occupation:null,archetype:null,experience:null},skillName:parts.skillName,specialization:parts.specialization,properties:{special:!0,fighting:!firearms,firearm:firearms,combat:!0}}};await this.createEmbeddedDocuments("Item",[data],{renderSheet:!base});return this.getSkillsByName(name)[0]}async creatureInit(){if("creature"!==this.type)return;if(this.getActorFlag("initialized"))return;if(0===this.getSkillsByName(game.i18n.localize(COC7.creatureFightingSkill)).length){try{const parts=CoC7Item.getNamePartsSpec(game.i18n.localize(COC7.creatureFightingSkill),game.i18n.localize(COC7.fightingSpecializationName)),data={type:"skill",name:parts.name,system:{base:0,value:null,skillName:parts.skillName,specialization:parts.specialization,properties:{combat:!0,fighting:!0,special:!0},flags:{}}},skill=await this.createEmbeddedDocuments("Item",[data],{renderSheet:!1}),attack=await this.createEmbeddedDocuments("Item",[{name:"Innate attack",type:"weapon",system:{description:{value:"Creature's natural attack",chat:"Creature's natural attack"},wpnType:"innate",properties:{addb:!0,slnt:!0}}}],{renderSheet:!1});if(skill.length>0&&attack.length>0){const createdAttack=this.items.get(attack[0].id);await createdAttack.update({"system.skill.main.id":skill[0].id,"system.skill.main.name":skill[0].name})}}catch(err){console.error("Creature init: "+err.message)}await this.setActorFlag("initialized")}}async createItem(itemName,quantity=1,showSheet=!1){const data={name:itemName,type:"item",system:{quantity}};return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createEmptyBook(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newBookName)))return this.createBook(game.i18n.localize(COC7.newBookName),showSheet);let index=0,itemName=game.i18n.localize(COC7.newBookName)+" "+index;for(;this.getItemIdByName(itemName);)index++,itemName=game.i18n.localize(COC7.newBookName)+" "+index;return this.createBook(itemName,showSheet)}async createBook(itemName,showSheet=!1){const data={name:itemName,type:"book",system:{}};return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createEmptySpell(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newSpellName)))return this.createSpell(game.i18n.localize(COC7.newSpellName),showSheet);let index=0,itemName=game.i18n.localize(COC7.newSpellName)+" "+index;for(;this.getItemIdByName(itemName);)index++,itemName=game.i18n.localize(COC7.newSpellName)+" "+index;return this.createSpell(itemName,showSheet)}static emptySpell(itemName){return{name:itemName,type:"spell",system:{}}}async createSpell(itemName,showSheet=!1){const data=CoCActor.emptySpell(itemName);return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createEmptySkill(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newSkillName)))return this.createSkill(game.i18n.localize(COC7.newSkillName),"character"!==this.type?1:null,showSheet);let index=0,skillName=game.i18n.localize(COC7.newSkillName)+" "+index;for(;this.getItemIdByName(skillName);)index++,skillName=game.i18n.localize(COC7.newSkillName)+" "+index;return this.createSkill(skillName,null,showSheet)}async createEmptyItem(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newItemName)))return this.createItem(game.i18n.localize(COC7.newItemName),1,showSheet);let index=0,itemName=game.i18n.localize(COC7.newItemName)+" "+index;for(;this.getItemIdByName(itemName);)index++,itemName=game.i18n.localize(COC7.newItemName)+" "+index;return this.createItem(itemName,1,showSheet)}async createEmptyWeapon(event=null,properties={}){const showSheet=!event||!event.shiftKey;let weaponName=game.i18n.localize(COC7.newWeaponName);if(this.getItemIdByName(game.i18n.localize(COC7.newWeaponName))){let index=0;for(weaponName=game.i18n.localize(COC7.newWeaponName)+" "+index;this.getItemIdByName(weaponName);)index++,weaponName=game.i18n.localize(COC7.newWeaponName)+" "+index}const data={name:weaponName,type:"weapon",system:{properties:{}}};for(const[key]of Object.entries(COC7.weaponProperties))data.system.properties[key]=Object.prototype.hasOwnProperty.call(properties,key)??!1;await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createBioSection(title=null){const bio=this.system.biography?foundry.utils.duplicate(this.system.biography):[];bio.push({title,value:null}),await this.update({"system.biography":bio},{renderSheet:!1})}async updateBioValue(index,content){const bio=foundry.utils.duplicate(this.system.biography);bio[index].value=content,await this.update({"system.biography":bio},{render:!1})}async updateBioTitle(index,title){const bio=foundry.utils.duplicate(this.system.biography);bio[index].title=title,await this.update({"system.biography":bio})}async deleteBioSection(index){const bio=foundry.utils.duplicate(this.system.biography);bio.splice(index,1),await this.update({"system.biography":bio})}async moveBioSectionUp(index){if(0===index)return;const bio=foundry.utils.duplicate(this.system.biography);if(index>=bio.length)return;const elem=bio.splice(index,1)[0];bio.splice(index-1,0,elem),await this.update({"system.biography":bio})}async moveBioSectionDown(index){const bio=foundry.utils.duplicate(this.system.biography);if(index>=bio.length-1)return;const elem=bio.splice(index,1)[0];bio.splice(index+1,0,elem),await this.update({"system.biography":bio})}async updateTextArea(textArea){const name="system."+textArea.dataset.areaName;await this.update({[name]:textArea.value})}async createEmbeddedDocuments(embeddedName,dataArray,options){const processedDataArray=[];let baseValue=0,baseCalculated=0,archetype=!1,occupation=!1;for(let data of dataArray)switch(data.type){case"skill":{if(baseValue=data.system.base,baseCalculated=await CoC7Item.calculateBase(this,data),"character"!==this.type){if(this.getItemIdByName(data.name))return;if(baseValue&&String(baseValue)!==String(data.system.value)&&(data.system.value=baseCalculated),isNaN(Number(data.system.value))){let value;try{value=(await new Roll(data.system.value,this.parseCharacteristics()).evaluate({async:!0})).total}catch(err){value=null}value&&(data.system.value=Math.floor(value))}}else data.system.value=null;let addThis=!0;if(CoC7Item.isAnySpec(data)){const isAnyButNotFlagged=(!data.system.properties?.requiresname??!1)&&!data.system.properties?.picknameonly;let skillList=[];const group=game.system.api.cocid.guessGroupFromDocument(data);if(group&&(skillList=(await game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:new RegExp("^"+CoC7Utilities.quoteRegExp(group)+".+$"),type:"i"})).filter((item=>(item.system.properties?.special??!1)&&!item.system.properties?.requiresname&&!item.system.properties?.picknameonly))),data.system?.flags?.occupation||data.system?.flags?.archetype){const existingSkills=this.skills.filter((el=>!!el.system.specialization&&((!data.system?.flags?.occupation||!el.system.flags?.occupation)&&((!data.system?.flags?.archetype||!el.system.flags?.archetype)&&data.system.specialization.toLocaleLowerCase()===el.system.specialization.toLocaleLowerCase()))));if(existingSkills.length>0)if(skillList.length>0){for(let i=existingSkills.length-1;i>=0;i--){const found=skillList.findIndex((item=>item.name===existingSkills[i].name||item.flags?.CoC7?.cocidFlag?.id===existingSkills[i].flags?.CoC7?.cocidFlag?.id));found>-1&&skillList.splice(found,1)}skillList=skillList.concat(existingSkills)}else skillList=existingSkills}skillList.length>0&&skillList.sort(CoC7Utilities.sortByNameKey);const skillData=await SkillSpecializationSelectDialog.create({skills:skillList,allowCustom:isAnyButNotFlagged||(data.system.properties?.requiresname??!1),fixedBaseValue:data.system.properties?.keepbasevalue??!1,specializationName:data.system.specialization,label:data.name,baseValue:data.system.base});if(Object.prototype.hasOwnProperty.call(skillData,"selected"))if(skillData.selected){const existingItem=this.items.get(skillData.selected);if(existingItem){const changes={};data.system.properties?.keepbasevalue||""!==skillData.baseValue&&(baseCalculated=skillData.baseValue,changes["system.value"]=baseCalculated);for(const[key,value]of Object.entries(data.system.flags))value&&(changes[`system.flags.${key}`]=!0);Object.keys(changes).length>0&&(changes._id=existingItem.id,await this.updateEmbeddedDocuments("Item",[changes])),data.name=CoC7Item.getNameWithoutSpec(existingItem),addThis=!1}else{const existing=skillList.find((i=>i.id===skillData.selected));if(existing){const flags=data.system?.flags,keepBase=data.system.properties?.keepbasevalue??!1;data=foundry.utils.duplicate(existing);for(const[key,value]of Object.entries(flags))value&&(data.system.flags[key]=!0);keepBase&&(""!==skillData.baseValue&&(data.system.base=skillData.baseValue),baseValue=skillData.baseValue,baseCalculated=await CoC7Item.calculateBase(this,data))}}}else{const parts=CoC7Item.getNamePartsSpec(skillData.name,data.system.specialization);data.system.properties?.keepbasevalue||(""!==skillData.baseValue&&(data.system.base=skillData.baseValue),baseValue=skillData.baseValue,baseCalculated=await CoC7Item.calculateBase(this,data)),data.system.skillName=parts.skillName,data.name=parts.name}}addThis&&(String(baseValue)!==String(baseCalculated)&&(data.system.base=baseCalculated),processedDataArray.push(foundry.utils.duplicate(data)));break}case"weapon":if("container"!==this.type){const mainSkill=data.system?.skill?.main?.name;if(mainSkill){let skill=this.getSkillsByName(mainSkill)[0];if(!skill){const name=mainSkill.match(/\(([^)]+)\)/)?mainSkill.match(/\(([^)]+)\)/)[1]:mainSkill,existing=game.items.find((item=>"skill"===item.type&&(item.name.toLocaleLowerCase()===name.toLocaleLowerCase()||item.system.skillName?.toLocaleLowerCase()===name.toLocaleLowerCase())));void 0!==existing?(await this.addItems([existing]),skill=await this.getSkillsByName(mainSkill)[0]):skill=await this.createWeaponSkill(name,!!data.system.properties?.rngd)}skill&&(data.system.skill.main.id=skill.id)}const secondSkill=data.system?.skill?.alternativ?.name;if(secondSkill){let skill=this.getSkillsByName(secondSkill)[0];if(!skill){const name=secondSkill.match(/\(([^)]+)\)/)?secondSkill.match(/\(([^)]+)\)/)[1]:secondSkill,existing=game.items.find((item=>"skill"===item.type&&(item.name.toLocaleLowerCase()===name.toLocaleLowerCase()||item.system.skillName?.toLocaleLowerCase()===name.toLocaleLowerCase())));void 0!==existing?(await this.addItems([existing]),skill=await this.getSkillsByName(secondSkill)[0]):skill=await this.createWeaponSkill(name,!!data.system.properties?.rngd)}skill&&(data.system.skill.alternativ.id=skill.id)}}processedDataArray.push(foundry.utils.duplicate(data));break;case"setup":{if(data.system.enableCharacterisitics){data.system.characteristics.list={},data.system.characteristics.list.str=this.getCharacteristic("str"),data.system.characteristics.list.con=this.getCharacteristic("con"),data.system.characteristics.list.siz=this.getCharacteristic("siz"),data.system.characteristics.list.dex=this.getCharacteristic("dex"),data.system.characteristics.list.app=this.getCharacteristic("app"),data.system.characteristics.list.int=this.getCharacteristic("int"),data.system.characteristics.list.pow=this.getCharacteristic("pow"),data.system.characteristics.list.edu=this.getCharacteristic("edu"),data.system.characteristics.list.luck={},data.system.characteristics.list.luck.value=isNaN(this.luck)?null:this.luck,data.system.characteristics.list.luck.label=game.i18n.localize("CoC7.Luck"),data.system.characteristics.list.luck.shortName=game.i18n.localize("CoC7.Luck"),data.system.characteristics.values||(data.system.characteristics.values={}),data.system.characteristics.values.str=data.system.characteristics.list.str.value,data.system.characteristics.values.con=data.system.characteristics.list.con.value,data.system.characteristics.values.siz=data.system.characteristics.list.siz.value,data.system.characteristics.values.dex=data.system.characteristics.list.dex.value,data.system.characteristics.values.app=data.system.characteristics.list.app.value,data.system.characteristics.values.int=data.system.characteristics.list.int.value,data.system.characteristics.values.pow=data.system.characteristics.list.pow.value,data.system.characteristics.values.edu=data.system.characteristics.list.edu.value,data.system.characteristics.values.luck=data.system.characteristics.list.luck.value,data.system.characteristics.points.enabled?data.system.title=game.i18n.localize("CoC7.SpendPoints"):data.system.title=game.i18n.localize("CoC7.RollCharac"),data.system.pointsWarning=!(null!==data.system.characteristics.values.str&&null!==data.system.characteristics.values.con&&null!==data.system.characteristics.values.siz&&null!==data.system.characteristics.values.dex&&null!==data.system.characteristics.values.app&&null!==data.system.characteristics.values.int&&null!==data.system.characteristics.values.pow&&null!==data.system.characteristics.values.edu);if(!await CharacRollDialog.create(data.system))return;{const updateData={};for(const key of["str","con","siz","dex","app","int","pow","edu"])data.system.characteristics.values[key]&&(updateData[`system.characteristics.${key}.value`]=data.system.characteristics.values[key],updateData[`system.characteristics.${key}.formula`]=data.system.characteristics.rolls[key]);data.system.characteristics.values.luck&&(updateData["system.attribs.lck.value"]=data.system.characteristics.values.luck),data.system.characteristics.values.pow&&(updateData["system.attribs.san.value"]=data.system.characteristics.values.pow,updateData["system.attribs.san.dailyLimit"]=Math.floor(data.system.characteristics.values.pow/5),updateData["system.attribs.mp.max"]=Math.floor(data.system.characteristics.values.pow/5)),await this.update(updateData,{renderSheet:!1}),await this.update({"system.attribs.hp.value":this.rawHpMax,"system.attribs.hp.max":this.rawHpMax},{renderSheet:!1})}}const era=Object.entries(data.flags?.CoC7?.cocidFlag?.eras).filter((e=>e[1])).map((e=>e[0])),items=await game.system.api.cocid.expandItemArray({itemList:data.system.items,era:void 0===era[0]||era[0]}),skills=items.filter((it=>"skill"===it.type)),othersItems=items.filter((it=>"skill"!==it.type));if(await this.addUniqueItems(skills),await this.addItems(othersItems),game.settings.get("CoC7","oneBlockBackstory"))await this.update({"system.backstory":data.system.backstory},{renderSheet:!1});else for(const sectionName of data.system.bioSections)!this.system.biography?.find((el=>sectionName===el.title))&&sectionName&&await this.createBioSection(sectionName);const monetary=foundry.utils.mergeObject(this.system.monetary,foundry.utils.duplicate(data.system.monetary)),sheet=this.sheet;let state=!1;do{state=await new Promise((resolve=>setTimeout((()=>{resolve(sheet._state)}),100)))}while(state===Application.RENDER_STATES.RENDERING);await this.update({"system.monetary":monetary}),Hooks.call("setupFinishedCoC7");break}case"archetype":if("character"===this.type){if(this.archetype){let resetArchetype=!1;if(await Dialog.confirm({title:game.i18n.localize("CoC7.ResetArchetype"),content:`<p>${game.i18n.format("CoC7.ResetArchetypeHint",{name:this.name})}</p>`,yes:()=>{resetArchetype=!0},defaultYes:!1}),!resetArchetype)return;await this.resetArchetype()}const coreCharac=[];for(const entry of Object.entries(data.system.coreCharacteristics)){const[key,value]=entry;if(data.system.coreCharacteristics[key]=!1,value){const char=this.getCharacteristic(key);char.key=key,coreCharac.push(char)}}let charac;if(coreCharac.length>1){const charDialogData={};charDialogData.characteristics=coreCharac,charDialogData.title=game.i18n.localize("CoC7.SelectCoreCharac"),charac=await CharacSelectDialog.create(charDialogData)}else 1===coreCharac.length&&(charac=coreCharac[0].key);if(!charac)return;if(data.system.coreCharacteristics[charac]=!0,data.system.coreCharacteristicsFormula.enabled){let value=Number(data.system.coreCharacteristicsFormula.value);if(isNaN(value)){const char=this.getCharacteristic(charac),roll=new Roll(data.system.coreCharacteristicsFormula.value);await roll.roll({async:!0}),roll.toMessage({flavor:game.i18n.format("CoC7.MessageRollingCharacteristic",{label:char.label,formula:data.system.coreCharacteristicsFormula.value})}),value=char.value<roll.total?roll.total:char.value}await this.update({[`system.characteristics.${charac}.value`]:value})}data.system.skills=await game.system.api.cocid.expandItemArray({itemList:data.system.skills}),await this.addUniqueItems(data.system.skills,"archetype"),processedDataArray.push(foundry.utils.duplicate(data)),archetype=!0}break;case"occupation":if("character"===this.type){if(this.occupation){let resetOccupation=!1;if(await Dialog.confirm({title:game.i18n.localize("CoC7.ResetOccupation"),content:`<p>${game.i18n.format("CoC7.ResetOccupationHint",{name:this.name})}</p>`,yes:()=>{resetOccupation=!0},defaultYes:!1}),!resetOccupation)return;await this.resetOccupation()}if(data.system.skills=await game.system.api.cocid.expandItemArray({itemList:data.system.skills}),Number(data.system.creditRating.max)>0){const actorCreditRating=game.system.api.cocid.findCocIdInList("i.skill.credit-rating",data.system.skills);0===actorCreditRating.length?0===game.system.api.cocid.findCocIdInList("i.skill.credit-rating",this.items).length&&(data.system.skills.push("i.skill.credit-rating"),data.system.skills=await game.system.api.cocid.expandItemArray({itemList:data.system.skills})):0===game.system.api.cocid.findCocIdInList("i.skill.credit-rating",this.items).length&&data.system.skills.push(actorCreditRating[0])}const pointsDialogData={};pointsDialogData.characteristics=data.system.occupationSkillPoints;let total=0,optionalChar=!1;for(const entry of Object.entries(data.system.occupationSkillPoints)){const[key,value]=entry,char=this.getCharacteristic(key);pointsDialogData.characteristics[key].name=char.label,pointsDialogData.characteristics[key].value=char.value,value.selected&&(pointsDialogData.characteristics[key].total=char.value*Number(pointsDialogData.characteristics[key].multiplier),value.optional?optionalChar=!0:total+=pointsDialogData.characteristics[key].total)}if(pointsDialogData.total=total,optionalChar){if(!await PointSelectDialog.create(pointsDialogData))return}for(let index=0;index<data.system.groups.length;index++){data.system.groups[index].skills=await game.system.api.cocid.expandItemArray({itemList:data.system.groups[index].skills});const dialogData={skills:[],type:"occupation"};dialogData.actorId=this.id,dialogData.optionsCount=Number(data.system.groups[index].options),dialogData.title=game.i18n.localize("CoC7.SkillSelectionWindow");for(const value of data.system.groups[index].skills)if(CoC7Item.isAnySpec(value))dialogData.skills.push(value);else{const skill=this.items.find((item=>item.name===value.name&&"skill"===item.type));if(!skill||!skill.system.flags?.occupation){data.system.skills.find((item=>item.name===value.name))||dialogData.skills.push(value)}}if(0!==dialogData.skills.length)if(dialogData.skills.length<=dialogData.optionsCount){ui.notifications.info(game.i18n.format("CoC7.InfoLessSkillThanOptions",{skillCount:dialogData.skills.length,optionsCount:dialogData.optionsCount}));const merged=CoC7Item.mergeOptionalSkills(data.system.skills,dialogData.skills);data.system.skills=merged}else{const selected=await SkillSelectDialog.create(dialogData);if(!selected)return;const merged=CoC7Item.mergeOptionalSkills(data.system.skills,selected);data.system.skills=merged}else ui.notifications.info(game.i18n.localize("CoC7.InfoAllSkillsAlreadySelected"))}if(Number(data.system.personal)){const dialogData={skills:[],type:"occupation"};dialogData.actorId=this.id,dialogData.optionsCount=Number(data.system.personal),dialogData.title=game.i18n.format("CoC7.SelectPersonalSkills",{number:Number(data.system.personal)});for(const s of this.skills)if(!s.system.flags.occupation&&!s.system.properties.noadjustments&&!s.system.properties.noxpgain){data.system.skills.find((item=>item.name===s.name))||dialogData.skills.push(s)}if(0!==dialogData.skills.length)if(dialogData.skills.length<=dialogData.optionsCount){ui.notifications.info(game.i18n.format("CoC7.InfoLessSkillThanOptions",{skillCount:dialogData.skills.length,optionsCount:dialogData.optionsCount}));const merged=CoC7Item.mergeOptionalSkills(data.system.skills,dialogData.skills);data.system.skills=merged}else{const selected=await SkillSelectDialog.create(dialogData);if(!selected)return;const merged=CoC7Item.mergeOptionalSkills(data.system.skills,selected);data.system.skills=merged}else ui.notifications.info(game.i18n.localize("CoC7.InfoAllSkillsAlreadySelected"))}await this.addUniqueItems(data.system.skills,"occupation"),await(this.creditRatingSkill?.setItemFlag("occupation")),await(this.creditRatingSkill?.update({"system.adjustments.occupation":Number(data.system.creditRating.min)})),processedDataArray.push(foundry.utils.duplicate(data)),occupation=!0}break;default:processedDataArray.push(foundry.utils.duplicate(data))}if(0===processedDataArray.length)return[];const processed=await super.createEmbeddedDocuments(embeddedName,processedDataArray,options);return archetype&&(await this.update({"system.development.archetype":this.archetypePoints}),Hooks.call("archetypeFinishedCoC7")),occupation&&(await this.update({"system.development.occupation":this.occupationPoints,"system.development.personal":this.personalPoints}),Hooks.call("occupationFinishedCoC7")),processed}getItemIdByName(itemName){let id=null;const name=itemName.match(/\(([^)]+)\)/)?itemName.match(/\(([^)]+)\)/)[1]:itemName;for(const value of this.items)CoC7Item.getNameWithoutSpec(value).toLowerCase()===name.toLowerCase()&&(id=value.id);return id}getItemsByName(itemName){const itemList=[];for(const value of this.items)value.name===itemName&&itemList.push(value);return itemList}getSkillsByName(skillName){const skillList=[],name=skillName.match(/\(([^)]+)\)/)?skillName.match(/\(([^)]+)\)/)[1]:skillName;for(const value of this.items)CoC7Item.getNameWithoutSpec(value).toLowerCase()!==name.toLowerCase()&&value.flags?.CoC7?.cocidFlag?.id!==skillName||"skill"!==value.type||skillList.push(value);return skillList}getFirstSkillByCoCID(cocid){return this.items.find((i=>i.flags?.CoC7?.cocidFlag?.id===cocid))}parseCharacteristics(){const parsed={};for(const[key,value]of Object.entries(COC7.formula.actor))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=foundry.utils.getProperty(this,value.substring(5)));return parsed}static getCharacteristicDefinition(){const characteristics=[];for(const[key,value]of Object.entries(game.system.template.Actor.templates.characteristics.characteristics))characteristics.push({key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label)});return characteristics}getCharacteristic(charName){if(this.system.characteristics)for(const[key,value]of Object.entries(this.system.characteristics))if(game.i18n.localize(value.short).toLowerCase()===charName.toLowerCase()||game.i18n.localize(value.label).toLowerCase()===charName.toLowerCase()||key===charName.toLowerCase())return{key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label),value:value.value};return null}getAttribute(attribName){return["lck","luck",game.i18n.localize("CoC7.Luck").toLowerCase()].includes(attribName.toLowerCase())?{key:"lck",shortName:"luck",label:game.i18n.localize("CoC7.Luck"),value:this.system.attribs.lck.value}:["san",game.i18n.localize("CoC7.SAN").toLowerCase(),game.i18n.localize("CoC7.Sanity").toLowerCase()].includes(attribName.toLowerCase())?{key:"san",shortName:game.i18n.localize("CoC7.SAN"),label:game.i18n.localize("CoC7.Sanity"),value:this.system.attribs.san.value}:null}async runRoll(options={}){void 0===options.cardType&&(options.cardType=CoC7ChatMessage.CARD_TYPE_NORMAL),void 0===options.preventStandby&&(options.preventStandby=!0),options.actor=this;return await CoC7ChatMessage.trigger(options)}get occupation(){return this.items.filter((item=>"occupation"===item.type))[0]}get archetype(){return this.items.filter((item=>"archetype"===item.type))[0]}async resetOccupation(eraseOld=!0){if(eraseOld){const occupationSkill=this.items.filter((item=>item.getItemFlag("occupation")));for(let index=0;index<occupationSkill.length;index++)await occupationSkill[index].unsetItemFlag("occupation")}this.occupation&&await this.occupation.delete(),await this.update({"system.development.occupation":null})}async resetArchetype(eraseOld=!0){if(eraseOld){const archetypeSkill=this.items.filter((item=>item.getItemFlag("archetype")));for(let index=0;index<archetypeSkill.length;index++)await archetypeSkill[index].unsetItemFlag("archetype")}this.archetype&&await this.archetype.delete(),await this.update({"system.development.archetype":null})}get luck(){return parseInt(this.system.attribs?.lck?.value)}async setLuck(value){return await this.update({"system.attribs.lck.value":value})}async spendLuck(amount){return amount=parseInt(amount),this.luck>=amount&&this.setLuck(this.luck-amount)}get hp(){return parseInt(this.system.attribs.hp.value)}get rawHpMax(){return this.system.attribs.hp.auto?null!=this.system.characteristics.siz.value&&null!=this.system.characteristics.con.value?CoCActor.hpFromCharacteristics(this.system.characteristics,this.type):this.system.attribs.hp.max?parseInt(this.system.attribs.hp.max):null:parseInt(this.system.attribs.hp.max)}get hpMax(){return parseInt(this.system.attribs.hp.max)}async _setHp(value){return value<0&&(value=0),value>this.system.attribs.hp.max&&(value=parseInt(this.system.attribs.hp.max)),await this.update({"system.attribs.hp.value":value})}async addUniqueItems(skillList,flag=null){const processed=[];for(let skill of skillList)if(skill=foundry.utils.duplicate(skill),flag&&(Object.prototype.hasOwnProperty.call(skill.system,"flags")||(skill.system.flags={}),skill.system.flags[flag]=!0),CoC7Item.isAnySpec(skill))processed.push(skill);else{const itemId=this.getItemIdByName(skill.name);if(itemId){if(flag){const item=this.items.get(itemId);await item.setItemFlag(flag)}}else processed.push(skill)}0!==processed.length&&await this.createEmbeddedDocuments("Item",processed,{renderSheet:!1})}async addItems(itemList,flag=null){const processed=[];for(const item of itemList)flag&&(item.system.flags||(item.system.flags={}),item.system.flags[flag]=!0),processed.push(foundry.utils.duplicate(item));if(0!==processed.length)return await this.createEmbeddedDocuments("Item",processed,{renderSheet:!1})}async addUniqueItem(skill,flag=null){const itemId=this.getItemIdByName(skill.name);if(itemId){if(flag){const item=this.items.get(itemId);await item.setItemFlag(flag)}}else flag&&(skill.system.flags||(skill.system.flags={}),skill.system.flags[flag]=!0),await this.createEmbeddedDocuments("Item",[skill],{renderSheet:!1})}get rawMpMax(){return this.system.attribs.mp.auto?null!=this.system.characteristics.pow.value?CoCActor.mpFromCharacteristics(this.system.characteristics):0:parseInt(this.system.attribs.mp.max)}getReasonSanLoss(sanReason){return"string"==typeof sanReason?this.system.sanityLossEvents.filter((r=>r.type.toLocaleLowerCase()===sanReason.toLocaleLowerCase()))[0]??{type:"",totalLoss:0,immunity:!1}:{type:"",totalLoss:0,immunity:!1}}sanLostToReason(sanReason){if(sanReason){return this.getReasonSanLoss(sanReason).totalLoss}return 0}sanLossReasonEncountered(sanReason){if(sanReason){return""!==this.getReasonSanLoss(sanReason).type}return!1}setReasonSanLoss(sanReason,sanLoss){if("string"==typeof sanReason&&""!==sanReason){const sanityLossEvents=foundry.utils.duplicate(this.system.sanityLossEvents),index=sanityLossEvents.findIndex((r=>r.type.toLocaleLowerCase()===sanReason.toLocaleLowerCase()));return sanLoss>0?-1===index?sanityLossEvents.push({type:sanReason,totalLoss:sanLoss,immunity:!1}):sanityLossEvents[index].totalLoss+=sanLoss:index>-1&&(sanityLossEvents.splice(index,1),sanityLossEvents.sort((function(left,right){return left.type.localeCompare(right.type)}))),this.update({"system.sanityLossEvents":sanityLossEvents})}}maxLossToSanReason(sanReason,sanMaxFormula){const sanMax=new Roll(sanMaxFormula.toString()).evaluate({maximize:!0}).total,sanityLossEvent=this.getReasonSanLoss(sanReason);return sanityLossEvent.immunity?0:Math.max(0,sanMax-sanityLossEvent.totalLoss)}async looseSan(sanReason,sanLoss){return this.getReasonSanLoss(sanReason).immunity?0:(await this.setSan(this.san-sanLoss),this.setReasonSanLoss(sanReason,sanLoss),sanLoss)}sanLoss(checkPassed){return checkPassed?this.sanLossCheckPassed:this.sanLossCheckFailled}get sanLossCheckPassed(){return this.system.special?.sanLoss?.checkPassed}get sanLossCheckFailled(){return this.system.special?.sanLoss?.checkFailled}get sanLossMax(){return this.sanLossCheckFailled?isNaN(Number(this.sanLossCheckFailled))?new Roll(this.sanLossCheckFailled).evaluate({maximize:!0}).total:Number(this.sanLossCheckFailled):0}get sanLossMin(){return this.sanLossCheckPassed?isNaN(Number(this.sanLossCheckPassed))?new Roll(this.sanLossCheckPassed).evaluate({maximize:!0}).total:Number(this.sanLossCheckPassed):0}get dailySanLoss(){return this.system.attribs.san?.dailyLoss||0}get dailySanLimit(){return this.system.attribs.san?.dailyLimit||0}get rawSanMax(){if(this.system.attribs)return this.system.attribs?.san?.auto?this.cthulhuMythos?Math.max(99-this.cthulhuMythos,0):99:parseInt(this.system.attribs.san.max)}get sanMax(){return parseInt(this.system.attribs.san.max)}get mp(){return parseInt(this.system.attribs.mp.value)}get mpMax(){return this.system.attribs.mp.auto?null!=this.system.characteristics.pow.value?Math.floor(this.system.characteristics.pow.value/5):0:parseInt(this.system.attribs.mp.max)}async setMp(value){return value<0&&(value=0),value>parseInt(this.system.attribs.mp.max)&&(value=parseInt(this.system.attribs.mp.max)),await this.update({"system.attribs.mp.value":value})}get san(){return parseInt(this.system.attribs.san.value)}get int(){return this.getCharacteristic("int")}get occupationPointsSpent(){let occupationPoints=0;for(const skill of this.skills)skill.system.adjustments?.occupation&&(occupationPoints+=skill.system.adjustments.occupation);return occupationPoints}get occupationPoints(){if(!this.occupation)return 0;let points=0;for(const entry of Object.entries(this.occupation.system.occupationSkillPoints)){const[key,value]=entry,char=this.getCharacteristic(key);value.selected&&(points+=char.value*Number(value.multiplier))}return points}async resetOccupationPoints(){await this.update({"system.development.occupation":this.occupationPoints})}async resetArchetypePoints(){await this.update({"system.development.archetype":this.occupationPoints})}async resetPersonalPoints(){await this.update({"system.development.personal":this.personalPoints})}get archetypePointsSpent(){let archetypePoints=0;for(const skill of this.skills)skill.system.adjustments?.archetype&&(archetypePoints+=skill.system.adjustments.archetype);return archetypePoints}get archetypePoints(){return this.archetype?this.archetype.system.bonusPoints:0}get experiencePoints(){let experiencePoints=0;for(const skill of this.skills)skill.system.adjustments?.experience&&(experiencePoints+=skill.system.adjustments.experience);return experiencePoints}get personalPointsSpent(){let personalPoints=0;for(const skill of this.skills)skill.system.adjustments?.personal&&(personalPoints+=skill.system.adjustments.personal);return personalPoints}get personalPoints(){return 2*Number(this.system.characteristics.int.value)}get hasDevelopmentPhase(){for(const skill of this.skills)if(skill.system.flags?.developement)return!0;if(this.onlyRunOncePerSession)return!1;for(const sanityLossEvent of this.system.sanityLossEvents)if(!sanityLossEvent.immunity)return!0;return!1}async setSan(value){value<0&&(value=0),value>this.system.attribs.san.max&&(value=this.system.attribs.san.max);const loss=parseInt(this.system.attribs.san.value)-value;if(loss>0){let totalLoss=parseInt(this.system.attribs.san.dailyLoss)?parseInt(this.system.attribs.san.dailyLoss):0;totalLoss+=loss,loss>=5&&await this.setCondition(COC7.status.tempoInsane),totalLoss>=this.system.attribs.san.dailyLimit&&await this.setCondition(COC7.status.indefInsane),await this.update({"system.attribs.san.value":value,"system.attribs.san.dailyLoss":totalLoss})}else await this.update({"system.attribs.san.value":value});return value}async setAttribAuto(value,attrib){const updatedKey=`system.attribs.${attrib}.auto`;return await this.update({[updatedKey]:value})}async toggleAttribAuto(attrib){this.setAttribAuto(!this.system.attribs[attrib].auto,attrib)}static dbFromCharacteristics(characteristics){const sum=(characteristics.str.value??0)+(characteristics.siz.value??0);return sum<65?-2:sum<85?-1:sum<125?0:sum<165?"1D4":`${Math.floor((sum-45)/80)}D6`}static buildFromCharacteristics(characteristics){const sum=(characteristics.str.value??0)+(characteristics.siz.value??0);return sum<65?-2:sum<85?-1:sum<125?0:sum<165?1:Math.floor((sum-45)/80)+1}static hpFromCharacteristics(characteristics,type){const sum=parseInt(characteristics.siz.value??0,10)+parseInt(characteristics.con.value??0,10),divisor=game.settings.get("CoC7","pulpRuleDoubleMaxHealth")&&"character"===type?5:10;return Math.floor(sum/divisor)}static mpFromCharacteristics(characteristics){return Math.floor(characteristics.pow.value/5)}static movFromCharacteristics(characteristics,type,age){let MOV;return MOV=characteristics.dex.value>characteristics.siz.value&&characteristics.str.value>characteristics.siz.value?9:characteristics.dex.value>=characteristics.siz.value||characteristics.str.value>=characteristics.siz.value?8:7,"creature"===type||game.settings.get("CoC7","pulpRuleIgnoreAgePenalties")||isNaN(parseInt(age))||(MOV=parseInt(age)>=40?MOV-Math.floor(parseInt(age)/10)+3:MOV),Math.max(0,MOV)}get rawBuild(){return this.system.attribs&&this.system.attribs.build?("auto"===this.system.attribs.build.value&&(this.system.attribs.build.auto=!0),this.system.attribs.build.auto?CoCActor.buildFromCharacteristics(this.system.characteristics):this.system.attribs.build.value):null}get build(){return this.system.attribs.build.value}get rawDb(){return this.system.attribs&&this.system.attribs.db?("auto"===this.system.attribs.db.value&&(this.system.attribs.db.auto=!0),this.system.attribs.db.auto?CoCActor.dbFromCharacteristics(this.system.characteristics):this.system.attribs.db.value):null}get db(){return this.system.attribs.db.value}get rawMov(){if(!this.system.attribs)return null;if(!this.system.attribs.mov)return null;if("auto"===this.system.attribs.mov.value&&(this.system.attribs.mov.auto=!0),this.system.attribs.mov.auto){const MOV=CoCActor.movFromCharacteristics(this.system.characteristics,this.system.type,this.system.infos.age);if(MOV>0)return MOV}return this.system.attribs.mov.value}get mov(){return this.system.attribs.mov.value}get tokenId(){return this.token?`${this.token.scene._id}.${this.token.id}`:null}get locked(){return this.system.flags||(this.system.flags={},this.system.flags.locked=!0,this.update({"system.flags":{}}),this.update({"system.flags.locked":!1})),this.system.flags.locked}getItemsFromName(name){return this.items.filter((i=>i.name===name))}set locked(value){this.update({"system.flags.locked":value})}async toggleActorFlag(flagName){const flagValue=!this.system.flags[flagName],name=`system.flags.${flagName}`;await this.update({[name]:flagValue})}async attributeCheck(attributeName,fastForward=!1,options={}){const attrib=this.getAttribute(attributeName.toLowerCase());if(!attrib)return ui.notifications.error(game.i18n.format("CoC7.ErrorNotFound",{missing:attributeName})),null;const check=new CoC7Check;if(options.modifier&&(check.diceModifier=Number(options.modifier)),options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,await check.rollAttribute(attrib.key),check.toMessage()}async characteristicCheck(characteristicName,fastForward=!1,options={}){const char=this.getCharacteristic(characteristicName);if(!char)return void ui.notifications.error(game.i18n.format("CoC7.ErrorNotFoundForActor",{missing:characteristicName,actor:this.name}));const check=new CoC7Check;if(options.modifier&&(check.diceModifier=Number(options.modifier)),options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){options.displayName=char.label;const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,await check.rollCharacteristic(char.key),check.toMessage()}async skillCheck(skillData,fastForward,options={}){const skillIdentifier=skillData.name?skillData.name:skillData;let skill=[];if(!!skillIdentifier.match(/^i\.skill\./)){const item=this.getFirstSkillByCoCID(skillIdentifier);item&&skill.push(item)}if(skill.length||(skill=this.getSkillsByName(skillIdentifier)),!skill.length){let item=null;if(skillData.pack){const pack=game.packs.get(skillData.pack);if("Item"!==pack.metadata.entity)return;item=await pack.getDocument(skillData.id)}else skillData.id&&(item=game.items.get(skillData.id));if(!item){console.log(skillIdentifier);const check=new CoC7Check;check._rawValue="?",await check.roll(),check.toMessage()}if(!item)return ui.notifications.warn(game.i18n.format("CoC7.NoSkill")+" "+game.i18n.format("CoC7.ErrorNotFoundForActor",{missing:skillData.name?skillData.name:skillData,actor:this.name}));let create=!1;if(await Dialog.confirm({title:`${game.i18n.localize("CoC7.AddWeapon")}`,content:`<p>${game.i18n.format("CoC7.AddWeapontHint",{weapon:skillData.name,actor:this.name})}</p>`,yes:()=>{create=!0}}),!0!==create)return;if(await this.createEmbeddedDocuments("Item",[foundry.utils.duplicate(item)]),skill=this.getSkillsByName(item.name),!skill.length)return;if(game.user.isGM){const skillValue=await SkillValueDialog.create(skill[0].name,skill[0].base),value=Number(skillValue.get("base-value"));await skill[0].updateValue(value)}}const check=new CoC7Check;if(void 0!==options.modifier&&(check.diceModifier=Number(options.modifier)),void 0!==options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,check.skill=skill[0].id,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,await check.roll(),check.toMessage()}async weaponCheck(weaponData,fastForward=!1){let weapon;if(void 0!==weaponData.uuid&&(weapon=await fromUuid(weaponData.uuid)),void 0!==weaponData.id&&(weapon=this.items.get(weaponData.id)),!weapon){let weapons=this.getItemsFromName(weaponData.name);if(0===weapons.length){if(!game.user.isGM)return void ui.notifications.warn(game.i18n.format("CoC7.ErrorActorHasNoWeaponNamed",{actorName:this.name,weaponName:weaponData.name}));{let item=null;const pack=weaponData.pack?game.packs.get(weaponData.pack):null;if(pack){if("Item"!==pack.metadata.entity)return;item=await pack.getDocument(weaponData.id)}else weaponData.id&&(item=game.items.get(weaponData.id));if(!item)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroNoItemFound"));let create=!1;await Dialog.confirm({title:`${game.i18n.localize("CoC7.AddWeapon")}`,content:`<p>${game.i18n.format("CoC7.AddWeapontHint",{weapon:weaponData.name,actor:this.name})}</p>`,yes:()=>{create=!0}});const actor=void 0!==this.parent?.actor?this.parent.actor:this;if(!0!==create)return;if(await actor.createEmbeddedDocuments("Item",[item.toJSON()]),weapons=actor.getItemsFromName(item.name),!weapons.length)return;await weapons[0].reload()}}else weapons.length>1&&ui.notifications.warn(game.i18n.format("CoC7.ErrorActorHasTooManyWeaponsNamed",{actorName:this.name,weaponName:weaponData.name}));weapon=weapons[0]}if(!weapon.system.properties.rngd){game.user.targets.size>1&&ui.notifications.warn(game.i18n.localize("CoC7.WarnTooManyTarget"));new CoC7MeleeInitiator(this.tokenKey,weaponData.uuid||weapon.id,fastForward).createChatCard()}if(weapon.system.properties.rngd){new CoC7RangeInitiator(this.tokenKey,weaponData.uuid||weapon.id,fastForward).createChatCard()}}async rollInitiative(hasGun=!1){if("optional"===game.settings.get("CoC7","initiativeRule")){const roll=new CoC7Check(this.actorKey);return roll.denyPush=!0,roll.denyLuck=!0,roll.denyBlindTampering=!0,roll.hideDice=!1===game.settings.get("CoC7","displayInitDices"),roll.flavor="Initiative roll",await roll.rollCharacteristic("dex",hasGun?1:0),roll.toMessage(),roll.successLevel+this.system.characteristics.dex.value/100}return hasGun?this.system.characteristics.dex.value+50:this.system.characteristics.dex.value}getActorFlag(flagName){return this.system.flags?!!this.system.flags[flagName]&&this.system.flags[flagName]:(this.system.flags={},this.system.flags.locked=!0,this.update({"system.flags":{}}),!1)}async setActorFlag(flagName){await this.update({[`system.flags.${flagName}`]:!0})}async unsetActorFlag(flagName){await this.update({[`system.flags.${flagName}`]:!1})}getWeaponSkills(itemId){let weapon=fromUuidSync(itemId);if(weapon?void 0===weapon.system&&(weapon=game.packs.get(weapon.pack).get(weapon._id)):weapon=this.items.get(itemId),"weapon"!==weapon.type)return null;const skills=[];return weapon.system.skill.main.id&&skills.push(this.items.get(weapon.system.skill.main.id)),weapon.usesAlternativeSkill&&weapon.system.skill.alternativ.id&&skills.push(this.items.get(weapon.system.skill.alternativ.id)),skills}find(name){if(!name)return;const item=this.items.get(name);if(item)return{type:"item",value:item};const matches=/\(([^)]+)\)/.exec(name);let shortName=null;matches&&matches.length&&(shortName=matches[1]);const skill=this.skills.filter((s=>!!s.name&&(s.name.toLocaleLowerCase().replace(/\s/g,"")===name.toLocaleLowerCase().replace(/\s/g,"")||s.name.toLocaleLowerCase().replace(/\s/g,"")===name.toLocaleLowerCase().replace(/\s/g,"")||s.name.toLocaleLowerCase().replace(/\s/g,"")===shortName?.toLocaleLowerCase().replace(/\s/g,""))));if(skill.length)return{type:"item",value:skill[0]};const charKey=["str","con","siz","dex","app","int","pow","edu"];for(let i=0;i<charKey.length;i++){const char=this.getCharacteristic(charKey[i]);if(char){if(char.name=char.label,char.key?.toLocaleLowerCase()===name.toLowerCase()||char.key?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"characteristic",value:char};if(char.shortName?.toLocaleLowerCase()===name.toLowerCase()||char.shortName?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"characteristic",value:char};if(char.label?.toLocaleLowerCase()===name.toLowerCase()||char.label?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"characteristic",value:char}}}const attribKey=["lck","san"];for(let i=0;i<attribKey.length;i++){const attr=this.getAttribute(attribKey[i]);if(attr){if(attr.name=attr.label,attr.key?.toLocaleLowerCase()===name.toLowerCase()||attr.key?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"attribute",value:attr};if(attr.shortName?.toLocaleLowerCase()===name.toLowerCase()||attr.shortName?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"attribute",value:attr};if(attr.label?.toLocaleLowerCase()===name.toLowerCase()||attr.label?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"attribute",value:attr}}}}get pilotSkills(){return this.skills.filter((s=>s.system.properties?.special&&s.system.specialization?.toLocaleLowerCase()===game.i18n.localize("CoC7.PilotSpecializationName")?.toLocaleLowerCase()))}get driveSkills(){return this.skills.filter((s=>s.system.properties?.special&&s.system.specialization?.toLocaleLowerCase()===game.i18n.localize("CoC7.DriveSpecializationName")?.toLocaleLowerCase()))}get tokenUuid(){return this.sheet.token?this.sheet.token.uuid:null}get tokenKey(){return this.sheet.token?`${this.sheet.token.parent.id}.${this.sheet.token.id}`:this.id}get actorKey(){return this.prototypeToken.actorLink?this.id:this.tokenKey}static getActorFromKey(key){if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;return new Token(tokenData).actor}}return game.actors.get(key)||null}get hasRollableCharacteristics(){for(const[,value]of Object.entries(this.system.characteristics))if(isNaN(Number(value.formula)))return!0;return!1}get hosRollableSkills(){for(const skill of this.skills)if(isNaN(skill.system?.value))return!0;return!1}async rollCharacteristicsValue(){const characteristics={};for(const[key,value]of Object.entries(this.system.characteristics))if(value.formula&&!value.formula.startsWith("@")){const r=new Roll(value.formula);await r.roll({async:!0}),r.total&&(characteristics[`system.characteristics.${key}.value`]=Math.floor(r.total))}await this.update(characteristics),await this.reportCharactedriticsValue()}async averageCharacteristicsValue(){const characteristics={};for(const[key,value]of Object.entries(this.system.characteristics))if(value.formula&&!value.formula.startsWith("@")){const average=new AverageRoll("("+value.formula+")").evaluate({minimize:!0,maximize:!0}).total;characteristics[`system.characteristics.${key}.value`]=average}await this.update(characteristics),await this.reportCharactedriticsValue()}async reportCharactedriticsValue(){const characteristics={};for(const[key,value]of Object.entries(this.system.characteristics))if(value.formula&&value.formula.startsWith("@")){let charValue;try{charValue=new Roll(value.formula,this.parseCharacteristics()).evaluate({maximize:!0}).total}catch(err){charValue=null}charValue&&(characteristics[`system.characteristics.${key}.value`]=charValue)}await this.update(characteristics)}async setCharacteristic(name,value){const characteristic={},charValue=isNaN(parseInt(value))?null:parseInt(value);if(characteristic[name]=charValue,!charValue&&value.startsWith("@")){characteristic[name.replace(".value",".formula")]=value}await this.update(characteristic),await this.reportCharactedriticsValue()}async developementPhase(fastForward=!1){const failure=[],success=[],title=game.i18n.localize("CoC7.RollAll4Dev");let skillsRolled=0,message='<p class="chat-card">';for(const item of this.items)if("skill"===item.type&&item.developementFlag){skillsRolled++;const die=await new Die({faces:100}).evaluate({async:!0}),skillValue=item.value;let augment=null,skillMasteringMessage=null;if(die.total>skillValue||die.total>=95){const augmentDie=await new Die({faces:10}).evaluate({async:!0});if(success.push(item.id),skillValue<90&&skillValue+augmentDie.total>=90){const augmentSANDie=await new Die({faces:6,number:2}).evaluate({async:!0}),sanGained=augmentSANDie.total,sanGainedMessage=`Gained 2d6 (${augmentSANDie.values[0]} + ${augmentSANDie.values[1]} = ${sanGained}) SAN`;console.debug(sanGainedMessage),skillMasteringMessage=`<span class="upgrade-success">${game.i18n.format("CoC7.SanGained",{results:`${augmentSANDie.values[0]} + ${augmentSANDie.values[1]}`,sanGained,skill:item.name,skillValue:skillValue+augmentDie.total})}</span><br>`,await this.setSan(this.san+sanGained)}augment+=augmentDie.total,message+=`<span class="upgrade-success">${game.i18n.format("CoC7.DevSuccess",{item:item.name,die:die.total,score:item.value,augment:augmentDie.total})}</span><br>`,null!==skillMasteringMessage&&(message+=skillMasteringMessage),await item.increaseExperience(augment)}else message+=`<span class="upgrade-failed">${game.i18n.format("CoC7.DevFailure",{item:item.name,die:die.total,score:item.value})}</span><br>`,failure.push(item.id);await item.unflagForDevelopement()}const sanityLossEvents=[];let changed=!1;for(const sanityLossEvent of this.system.sanityLossEvents)sanityLossEvent.immunity?sanityLossEvents.push(sanityLossEvent):sanityLossEvent.totalLoss>1?(sanityLossEvent.totalLoss--,sanityLossEvents.push(sanityLossEvent),changed=!0):changed=!0;if(changed&&(skillsRolled&&(message+="<br>"),message+=`<span>${game.i18n.format("CoC7.ReduceSanityLimits")}</span>`,await this.update({"system.sanityLossEvents":sanityLossEvents})),!fastForward){message+="</p>";const speaker={actor:this};await chatHelper.createMessage(skillsRolled?title:"",message,{speaker}),this.onlyRunOncePerSession=!0}return{failure,success}}async developLuck(fastForward=!1){const currentLuck=this.system.attribs.lck.value;currentLuck||await this.update({"system.attribs.lck.value":0});const pulpRuleDevelopmentRollLuck=game.settings.get("CoC7","pulpRuleDevelopmentRollLuck"),upgradeRoll=(await new Roll("1D100").roll({async:!0})).total,higherThanCurrentLuck=upgradeRoll>currentLuck;let augmentRoll;pulpRuleDevelopmentRollLuck?augmentRoll=higherThanCurrentLuck?"2D10+10":"1D10+5":higherThanCurrentLuck&&(augmentRoll="1D10");const title=game.i18n.localize("CoC7.RollLuck4Dev");let message='<p class="chat-card">';if(pulpRuleDevelopmentRollLuck||higherThanCurrentLuck){const augmentValue=(await new Roll(augmentRoll).roll({async:!0})).total;await this.update({"system.attribs.lck.value":this.system.attribs.lck.value+augmentValue}),message+=`<span class="upgrade-success">${game.i18n.format("CoC7.LuckIncreased",{die:upgradeRoll,score:currentLuck,augment:augmentValue})}</span>`}else message+=`<span class="upgrade-failed">${game.i18n.format("CoC7.LuckNotIncreased",{die:upgradeRoll,score:currentLuck})}</span>`;if(!fastForward){message+="</p>";const speaker={actor:this};await chatHelper.createMessage(title,message,{speaker})}}async developSkill(skillId,fastForward=!1){const skill=this.items.get(skillId);if(!skill)return;let title="",message="";const upgradeRoll=new Roll("1D100");if(await upgradeRoll.roll({async:!0}),fastForward||await CoC7Dice.showRollDice3d(upgradeRoll),upgradeRoll.total>skill.value||upgradeRoll.total>=95){const augmentRoll=new Roll("1D10");await augmentRoll.roll({async:!0}),fastForward||await CoC7Dice.showRollDice3d(augmentRoll),message=game.i18n.format("CoC7.DevSuccessDetails",{item:skill.name,augment:augmentRoll.total}),title=game.i18n.format("CoC7.DevRollTitle",{item:skill.name,die:upgradeRoll.total,score:skill.value}),await skill.increaseExperience(augmentRoll.total)}else title=game.i18n.format("CoC7.DevRollTitle",{item:skill.name,die:upgradeRoll.total,score:skill.value}),message=game.i18n.format("CoC7.DevFailureDetails",{item:skill.name});const speaker={actor:this._id};await chatHelper.createMessage(title,message,{speaker}),await skill.unflagForDevelopement()}hasConditionStatus(conditionName){const conditionValue=this.system.conditions?.[conditionName]?.value;return"boolean"==typeof conditionValue&&conditionValue}hasConditionValue(conditionName,field){if(this.hasConditionStatus(conditionName)){if(conditionName===COC7.status.tempoInsane&&"durationText"===field){const realTime=this.hasConditionValue(conditionName,"realTime"),duration=this.hasConditionValue(conditionName,"duration");if(void 0!==duration){if(!0===realTime)return duration+" "+game.i18n.localize("CoC7.rounds");if(!1===realTime)return duration+" "+game.i18n.localize("CoC7.hours")}return""}return this.system.conditions?.[conditionName]?.[field]}}async toggleCondition(conditionName){this.hasConditionStatus(conditionName)?await this.unsetCondition(conditionName):await this.setCondition(conditionName)}async setCondition(conditionName,{forceValue=!1,justThis=!1,realTime=null,duration=null}={}){if(!forceValue&&game.settings.get("CoC7","enableStatusIcons")){const effects=this.effects.filter((effect=>CoC7ActiveEffect.filterActiveEffects(effect,conditionName))).map((effect=>effect.id)),custom={};switch(conditionName){case COC7.status.dead:custom.flags={core:{overlay:!0}};break;case COC7.status.tempoInsane:custom.flags={CoC7:{realTime:void 0}},custom.duration={rounds:void 0,seconds:void 0},!0!==realTime&&!1!==realTime||(custom.flags.CoC7.realTime=realTime,custom.flags={CoC7:{realTime}},null!=duration&&(realTime?custom.duration.rounds=duration:custom.duration.seconds=3600*duration))}if(0===effects.length){const effect=CONFIG.statusEffects.filter((effect=>effect.id===conditionName));if(1===effect.length){const source={icon:effect[0].icon,disabled:!1};foundry.utils.isNewerVersion(game.version,"11")?(source.name=game.i18n.localize(effect[0].name),source.statuses=[effect[0].id]):(source.label=game.i18n.localize(effect[0].label),source.flags={core:{statusId:effect[0].id}});const effectData=foundry.utils.mergeObject(source,custom);await super.createEmbeddedDocuments("ActiveEffect",[effectData])}else forceValue=!0}else custom._id=effects[0],await super.updateEmbeddedDocuments("ActiveEffect",[custom]),forceValue=!0}if(forceValue||!game.settings.get("CoC7","enableStatusIcons")){switch(conditionName){case COC7.status.indefInsane:case COC7.status.unconscious:case COC7.status.criticalWounds:case COC7.status.dying:case COC7.status.prone:case COC7.status.dead:await this.update({[`system.conditions.${conditionName}.value`]:!0});break;case COC7.status.tempoInsane:{const fields={};fields[`system.conditions.${conditionName}.value`]=!0,!0!==realTime&&!1!==realTime||(fields[`system.conditions.${conditionName}.realTime`]=realTime,null!=duration&&(fields[`system.conditions.${conditionName}.duration`]=duration)),Object.prototype.hasOwnProperty.call(fields,`system.conditions.${conditionName}.realTime`)||(fields[`system.conditions.${conditionName}.-=realTime`]=null),Object.prototype.hasOwnProperty.call(fields,`system.conditions.${conditionName}.duration`)||(fields[`system.conditions.${conditionName}.-=duration`]=null),await this.update(fields)}}if(!justThis)switch(conditionName){case COC7.status.criticalWounds:if(await this.setCondition(COC7.status.prone),!this.hasConditionStatus(COC7.status.unconscious)&&!this.hasConditionStatus(COC7.status.dead)){new CoC7ConCheck(this.isToken?this.tokenKey:this.id).toMessage()}break;case COC7.status.dead:await this.unsetCondition(COC7.status.criticalWounds),await this.unsetCondition(COC7.status.dying),await this.unsetCondition(COC7.status.unconscious)}}}async unsetCondition(conditionName,{forceValue=!1}={}){if(!forceValue&&game.settings.get("CoC7","enableStatusIcons")){const effects=this.effects.filter((effect=>CoC7ActiveEffect.filterActiveEffects(effect,conditionName))).map((effect=>effect.id));effects.length>0?await super.deleteEmbeddedDocuments("ActiveEffect",effects):forceValue=!0}if(forceValue||!game.settings.get("CoC7","enableStatusIcons"))switch(conditionName){case COC7.status.tempoInsane:case COC7.status.indefInsane:case COC7.status.unconscious:case COC7.status.criticalWounds:case COC7.status.dying:case COC7.status.prone:case COC7.status.dead:await this.update({[`system.conditions.${conditionName}.-=value`]:null}),await this.update({[`system.conditions.${conditionName}.value`]:!1})}}async resetCounter(counter){await this.update({[counter]:0})}async resetDailySanity(){await this.update({"system.attribs.san.dailyLimit":Math.floor(this.system.attribs.san.value/5),"system.attribs.san.dailyLoss":0})}get fightingSkills(){const skillList=[];for(const value of this.items)"skill"===value.type&&value.system.properties.fighting&&skillList.push(value);return skillList.sort(CoC7Utilities.sortByNameKey),skillList}get closeCombatWeapons(){const weaponList=[];for(const value of this.items)if("weapon"===value.type&&!value.system.properties.rngd){const skill=this.items.get(value.system.skill.main.id);value.system.skill.main.value=skill?skill.value:0,weaponList.push(value)}return weaponList.sort(CoC7Utilities.sortByNameKey),weaponList}get firearmSkills(){const skillList=[];for(const value of this.items)"skill"===value.type&&value.system.properties.firearm&&skillList.push(value);return skillList.sort(CoC7Utilities.sortByNameKey),skillList}get user(){return game.users.find((user=>!(!user.character||user.character.id!==this.id)))}get dodgeSkill(){const skill=this.getFirstSkillByCoCID("i.skill.dodge");if(skill)return skill;const skillList=this.getSkillsByName(game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.dodge"));return 0!==skillList.length?skillList[0]:null}get creditRatingSkill(){const skill=this.getFirstSkillByCoCID("i.skill.credit-rating");if(skill)return skill;const skillList=this.getSkillsByName(game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.credit-rating"));return 0!==skillList.length?skillList[0]:null}get cthulhuMythosSkill(){const skill=this.getFirstSkillByCoCID("i.skill.cthulhu-mythos");if(skill)return skill;const skillList=this.getSkillsByName(game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.cthulhu-mythos"));return 0!==skillList.length?skillList[0]:null}get cthulhuMythos(){const CM=this.cthulhuMythosSkill;if(CM){const value=CM.value;return value||parseInt(CM.system.value)}return 0}get mythosHardened(){return this.getFlag("CoC7","mythosHardened")||!1}async setMythosHardened(){await this.setFlag("CoC7","mythosHardened",!0)}get mythosInsanityExperienced(){return this.getFlag("CoC7","mythosInsanityExperienced")||!1}async experienceFirstMythosInsanity(){await this.setFlag("CoC7","mythosInsanityExperienced",!0)}get creditRating(){const CR=this.creditRatingSkill;if(CR){const value=CR.value;return value||parseInt(CR.system.value)}return 0}static monetaryFormat(format,symbol,value){switch(format){case COC7.monetaryFormatKeys.lsd:return Math.floor(value/240)+"/"+Math.floor(value/12)%20+"/"+value%12;case COC7.monetaryFormatKeys.roman:return Math.floor(value/400)+"/"+Math.floor(value/16)%25+"/"+Math.floor(value/8)%2+"/"+Math.floor(value/4)%2+"/"+value%4;case COC7.monetaryFormatKeys.decimalLeft:return symbol+Number(value).toLocaleString(void 0,{minimumFractionDigits:2}).replace(/\.00$/,"");case COC7.monetaryFormatKeys.decimalRight:return Number(value).toLocaleString(void 0,{minimumFractionDigits:2}).replace(/\.00$/,"")+" "+symbol;case COC7.monetaryFormatKeys.integerLeft:return symbol+Number(value).toLocaleString();case COC7.monetaryFormatKeys.integerRight:return Number(value).toLocaleString()+" "+symbol}return"0"}static monetaryValue(format,values,CR,type,value){CR=CR||0;const row=values.find((r=>("object"==typeof r.min||r.min<=CR)&&("object"==typeof r.max||r.max>=CR)));if(void 0!==row&&void 0!==row[type]&&void 0!==row[value])switch(format){case COC7.monetaryFormatKeys.lsd:switch(row[type]){case COC7.monetaryTypeKeys.multiplier:return 240*CR*row[value];case COC7.monetaryTypeKeys.value:return 240*row[value];case COC7.monetaryTypeKeys.s:return 12*row[value];case COC7.monetaryTypeKeys.d:return 1*row[value]}break;case COC7.monetaryFormatKeys.roman:switch(row[type]){case COC7.monetaryTypeKeys.multiplier:return 400*CR*row[value];case COC7.monetaryTypeKeys.value:return 400*row[value];case COC7.monetaryTypeKeys.denarii:return 16*row[value];case COC7.monetaryTypeKeys.quinarii:return 8*row[value];case COC7.monetaryTypeKeys.sestertii:return 4*row[value];case COC7.monetaryTypeKeys.asses:return 1*row[value]}break;default:switch(row[type]){case COC7.monetaryTypeKeys.multiplier:return CR*row[value];case COC7.monetaryTypeKeys.value:return 1*row[value]}}return 0}get spendingLevel(){return CoCActor.monetaryValue(this.system.monetary.format,this.system.monetary.values,this.creditRating,"spendingType","spendingValue")}get cash(){return CoCActor.monetaryValue(this.system.monetary.format,this.system.monetary.values,this.creditRating,"cashType","cashValue")}get assets(){return CoCActor.monetaryValue(this.system.monetary.format,this.system.monetary.values,this.creditRating,"assetsType","assetsValue")}get skills(){const skillList=[];for(const value of this.items)"skill"===value.type&&skillList.push(value);return skillList.sort(CoC7Utilities.sortByNameKey),skillList}get owners(){return game.users.filter((u=>this.testUserPermission(u,"OWNER")&&!u.isGM))}get player(){return this.owners.filter((u=>u.character?.id===this.id))}get characterUser(){return game.users.contents.filter((u=>u.character?.id===this.id))[0]||null}async setHp(value){value<0&&(value=0),value>this.system.attribs.hp.max&&(value=this.system.attribs.hp.max);const healthBefore=this.hp;let damageTaken;return isNaN(healthBefore)||value>=healthBefore?await this._setHp(value):(damageTaken=healthBefore-value,await this.dealDamage(damageTaken,{ignoreArmor:!0})),value}async dealDamage(amount,options={}){const armorData=options.armor?options.armor:this.system.attribs.armor,grossDamage=parseInt(amount);let armorValue=0;options.ignoreArmor||null===armorData||(CoC7Utilities.isFormula(armorData)?armorValue=(await new Roll(armorData).roll({async:!0})).total:isNaN(Number(armorData))?isNaN(Number(armorData?.value))?ui.notifications.warn(game.i18n.format("CoC7.ErrorUnableToParseArmorFormula",{value:armorData})):armorValue=Number(armorData.value):armorValue=Number(armorData));const netDamage=grossDamage-armorValue;if(netDamage<=0)return 0;if(await this._setHp(this.hp-netDamage),netDamage>=this.system.attribs.hp.max)await this.setCondition(COC7.status.dead);else if(game.settings.get("CoC7","pulpRuleIgnoreMajorWounds")){if(0===this.hp)netDamage>=Math.ceil(this.system.attribs.hp.max/2)?this.setCondition(COC7.status.dying):this.setCondition(COC7.status.unconscious);else if(netDamage>=Math.ceil(this.system.attribs.hp.max/2)){new CoC7ConCheck(this.isToken?this.tokenKey:this.id).toMessage()}}else{let hasMajorWound=!1;netDamage>=Math.ceil(this.system.attribs.hp.max/2)?(await this.setCondition(COC7.status.criticalWounds),hasMajorWound=!0):hasMajorWound=this.hasConditionStatus(COC7.status.criticalWounds),0===this.hp&&(await this.setCondition(COC7.status.unconscious),hasMajorWound&&this.setCondition(COC7.status.dying))}return netDamage}get majorWound(){return this.hasConditionStatus(COC7.status.criticalWounds)}get dying(){return this.hasConditionStatus(COC7.status.dying)}get unconscious(){return this.hasConditionStatus(COC7.status.unconscious)}get dead(){return this.hasConditionStatus(COC7.status.dead)}get prone(){return this.hasConditionStatus(COC7.status.prone)}}class CoC7Check{constructor(actor=null,skill=null,item=null,diceMod=0,difficulty=null,flatThresholdModifier=0,flatDiceModifier=0){if(this.actor=actor,this.skill=skill,this.item=item,this.difficulty=difficulty,this.diceModifier=diceMod,this.rawValue=0,this.successLevel=null,this.referenceMessageId=null,this.pushing=!1,this.flatDiceModifier=flatDiceModifier,this.flatThresholdModifier=flatThresholdModifier,null===difficulty){const isUnknown="unknown"===game.settings.get("CoC7","defaultCheckDifficulty");this.difficulty=isUnknown?CoC7Check.difficultyLevel.unknown:CoC7Check.difficultyLevel.regular}}static get cardType(){return"rollCard"}static get difficultyLevel(){return{unknown:-1,regular:1,hard:2,extreme:3,critical:4,impossible:9}}static get successLevel(){return{fumble:-99,failure:0,regular:1,hard:2,extreme:3,critical:4}}static get type(){return{characteristic:"characteristic",attribute:"attribute",skill:"item",item:"item",value:"value"}}static difficultyString(difficultyLevel){switch(isNaN(Number(difficultyLevel))?difficultyLevel:Number(difficultyLevel)){case"?":return game.i18n.localize("CoC7.UnknownDifficulty");case"+":return game.i18n.localize("CoC7.HardDifficulty");case"++":return game.i18n.localize("CoC7.ExtremeDifficulty");case"+++":return game.i18n.localize("CoC7.CriticalDifficulty");case 0:return game.i18n.localize("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.unknown:return game.i18n.localize("CoC7.UnknownDifficulty");case CoC7Check.difficultyLevel.regular:return game.i18n.localize("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.hard:return game.i18n.localize("CoC7.HardDifficulty");case CoC7Check.difficultyLevel.extreme:return game.i18n.localize("CoC7.ExtremeDifficulty");case CoC7Check.difficultyLevel.critical:return game.i18n.localize("CoC7.CriticalDifficulty");default:return null}}get rawValue(){if(this._rawValue||(this.characteristic&&(this.rawValue=this.actor.system.characteristics[this.characteristic].value),this.skill&&(this.rawValue=this.skill.value),this.attribute&&(this.rawValue=this.actor.system.attribs[this.attribute].value)),this._rawValue)return this.flatThresholdModifier&&game.settings.get("CoC7","allowFlatThresholdModifier")?this._rawValue+this.flatThresholdModifier<1?1:this._rawValue+this.flatThresholdModifier:this._rawValue}set rawValue(x){this._rawValue=x}set uuid(x){this._uuid=x}get uuid(){return this._uuid||(this._uuid=foundry.utils.randomID(16)),this._uuid}get hasCard(){return ui.chat.collection.filter((message=>this.uuid===message.getFlag("CoC7","uuid")&&CoC7Check.cardType===message.getFlag("CoC7","type"))).length>0}get rawValueString(){return 0===this._rawValue?"0":this._rawValue?this.flatThresholdModifier&&game.settings.get("CoC7","allowFlatThresholdModifier")?this.flatThresholdModifier<0?this._rawValue.toString()+this.flatThresholdModifier.toString():this._rawValue.toString()+"+"+this.flatThresholdModifier.toString():this._rawValue.toString():void 0}get criticalThreshold(){return 1}get regularThreshold(){return this.rawValue?this.rawValue>=100?99:parseInt(this.rawValue):null}get hardThreshold(){return this.rawValue?Math.floor(this.rawValue/2):null}get extremeThreshold(){return this.rawValue?Math.floor(this.rawValue/5):null}get fumbleThreshold(){if(this.rawValue){if(this.difficulty){if(this.difficulty>=CoC7Check.difficultyLevel.extreme)return this.extremeThreshold<50?96:100;if(this.difficulty>=CoC7Check.difficultyLevel.hard)return this.hardThreshold<50?96:100}return this.rawValue<50?96:100}return null}get succesThreshold(){if(void 0!==this.difficulty)switch(this.difficulty){case CoC7Check.difficultyLevel.extreme:return this.extremeThreshold;case CoC7Check.difficultyLevel.hard:return this.hardThreshold;case CoC7Check.difficultyLevel.regular:return this.regularThreshold;case CoC7Check.difficultyLevel.critical:return this.criticalThreshold;case CoC7Check.difficultyLevel.unknown:return-1;default:return this.rawValue}return null}get difficultyString(){if(void 0!==this.difficulty)switch(this.difficulty){case CoC7Check.difficultyLevel.extreme:return game.i18n.format("CoC7.ExtremeDifficulty");case CoC7Check.difficultyLevel.hard:return game.i18n.format("CoC7.HardDifficulty");case CoC7Check.difficultyLevel.regular:return game.i18n.format("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.critical:return game.i18n.format("CoC7.CriticalDifficulty");case CoC7Check.difficultyLevel.unknown:return game.i18n.format("CoC7.UnknownDifficulty");default:return""}return""}get modifiedResult(){if(!this.standby){if(void 0!==this._modifiedResult)return this._modifiedResult;if(this.flatDiceModifier){const modified=this.dices.total+this.flatDiceModifier;return modified<1?1:modified>100?100:modified}return this.dices.total}}set modifiedResult(x){this._modifiedResult=x}get flatDiceModifierString(){return this.flatDiceModifier?this.flatDiceModifier>0?`+${this.flatDiceModifier}`:this.flatDiceModifier.toString():null}get isFumble(){if(!this.standby&&!this.isSimpleRoll)return this.modifiedResult>=this.fumbleThreshold}get isCritical(){if(!this.standby)return 1===this.modifiedResult}get isExtremeSuccess(){if(!this.standby)return this.successLevel>=CoC7Check.successLevel.extreme}get passed(){if(!this.standby&&!this.isSimpleRoll)return this.luckSpent?this.difficulty<=this.successLevel:this.succesThreshold>=this.modifiedResult||this.isCritical}get failed(){if(!this.standby&&!this.isSimpleRoll)return!this.passed}get isSimpleRoll(){return void 0===this.rawValue}get hasBonus(){return!!(this.diceModifier&&this.diceModifier>0)}get hasPenalty(){return!!(this.diceModifier&&this.diceModifier<0)}get hasModifier(){return!(!this.diceModifier||0===this.diceModifier)}get diceModifier(){return this._diceModifier?this._diceModifier:null}set diceModifier(x){this._diceModifier=parseInt(x)}get name(){if(this.actor){if(this.skill)return this.skill.shortName;if(this.item)return this.item.name;if(this.characteristic)return CoC7Utilities.getCharacteristicNames(this.characteristic)?.label;if(this.attribute){if("lck"===this.attribute)return game.i18n.localize("CoC7.Luck");if("san"===this.attribute)return game.i18n.localize("CoC7.Sanity")}}return null}get shortName(){if(this.actor){if(this.skill)return this.skill.shortName;if(this.item)return this.item.name;if(this.characteristic)return CoC7Utilities.getCharacteristicNames(this.characteristic)?.short;if(this.attribute){if("lck"===this.attribute)return game.i18n.localize("CoC7.Luck");if("san"===this.attribute)return game.i18n.localize("CoC7.SAN")}}return null}get fullName(){const difficulty=this._difficulty!==CoC7Check.difficultyLevel.regular&&CoC7Check.difficultyString(this._difficulty),modifier=this._diceModifier>0?`+${this._diceModifier}`:this._diceModifier.toString();return game.i18n.format(`CoC7.LinkCheck${difficulty?"Diff":""}${this._diceModifier?"Modif":""}`,{difficulty,modifier,name:this.name})}get rolled(){return!!this.dice}static getFromCard(card){const rollResult=card.classList.contains("roll-result")?card:card.querySelector(".roll-result"),check=new CoC7Check;CoC7Roll.getFromElement(rollResult,check);const message=card.closest(".message");return check.messageId=message?message.dataset.messageId:null,check}static async push(card,publish=!0){const oldCheck=CoC7Check.getFromCard(card),actorId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId,skillId=card.dataset.skillId,charac=card.dataset.characteristic,itemId=card.dataset.itemId,diceMod=card.dataset.diceMod,difficulty=card.dataset.difficulty;let pushedRoll;if(skillId)pushedRoll=new CoC7Check(actorId,skillId,itemId,diceMod,difficulty);else{if(!charac)return;pushedRoll=new CoC7Check,pushedRoll.diceModifier=diceMod,pushedRoll.difficulty=difficulty,pushedRoll.actor=actorId,pushedRoll.characteristic=charac}oldCheck.uuid&&(pushedRoll.context=oldCheck.context,pushedRoll.uuid=oldCheck.uuid),oldCheck.parent&&(pushedRoll.parent=oldCheck.parent),pushedRoll.pushing=!0,await pushedRoll.roll(),publish&&pushedRoll.toMessage(!0,card)}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}set actor(x){if(this.actorKey=x,null!=x){if(x instanceof Actor)return this._actor=x,this._actor.alias=this.actor.name,void(x.token&&x.token.scene&&x.token.scene.id?this.actorKey=`${x.token.scene.id}.${x.token.id}`:this.actorKey=x.id);if(x.includes(".")){const[sceneId,tokenId]=x.split(".");if("TOKEN"===sceneId)this._actor=game.actors.tokens[tokenId],this._actor.alias=this._actor.name;else{const scene=game.scenes.get(sceneId);if(!scene)return;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return;const token=new Token(tokenData);this._actor=token.actor,this._actor.alias=token.name}}else this._actor=game.actors.get(x),this.actor.alias=this.actor.name}else this._actor=x}get successLevelIcons(){if(this.unknownDifficulty)return null;if(this.isSimpleRoll&&0!==this._rawValue)return null;if(this.successLevel>=this.difficulty){const icons=[];for(let index=0;index<this.successLevel-this.difficulty+1;index++)icons.push(this.isCritical?"medal":"star");const successHint=game.i18n.format("CoC7.SuccesLevelHint",{value:this.successLevel-this.difficulty+1});return{success:!0,cssClass:this.isCritical?"critical":"success",hint:successHint,icons}}{const icons=[],successLevel=this.isFumble?-1:this.successLevel;for(let index=0;index<this.difficulty-successLevel;index++)icons.push(this.isFumble?"skull":"spider");const failureHint=game.i18n.format("CoC7.FailureLevelHint",{value:this.difficulty-successLevel});return{success:!1,cssClass:this.isFumble?"fumble":"failure",hint:failureHint,icons}}}get isBlind(){return void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind}set isBlind(x){this._isBlind=x}get unknownDifficulty(){return!(this.gmDifficultyCritical||this.gmDifficultyExtreme||this.gmDifficultyHard||this.gmDifficultyRegular)&&CoC7Check.difficultyLevel.unknown===this.difficulty}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}set skill(x){this._skill=this._getItemFromId(x),this.skillId=x}set item(x){this._item=this._getItemFromId(x),"weapon"===this._item?.type?this.itemId=x:(this._item=void 0,this.itemId=void 0)}_getItemFromId(x){return null==x?null:x instanceof Item?x:this._actor?this._actor.items.get(x):game.items.get(x)}get actor(){if(this._actor&&this._actor?.id){if("Object"===this._actor.constructor.name){const actor=new CoCActor(this._actor);this._actor=actor}}else if(this.actorKey&&(this._actor=chatHelper.getActorFromKey(this.actorKey)),this.actorId&&(this._actor=chatHelper.getActorFromKey(this.actorId)),!this._actor)return{isDummy:!0,name:this.actorName?this.actorName:void 0,id:void 0,img:"systems/CoC7/assets/icons/question-circle-regular.svg",portrait:"systems/CoC7/assets/icons/question-circle-regular.svg"};return this._actor}get skill(){return!this._skill&&this.skillId&&(this._skill=this.actor?.items.get(this.skillId)),!this._skill&&this.item&&this.item.system.skill&&(this.item.system.skill.main.id&&!this.weaponAltSkill?this._skill=this._actor.items.get(this.item.system.skill.main.id):this.item.system.skill.alternativ.id&&this.weaponAltSkill&&(this._skill=this._actor.items.get(this.item.system.skill.alternativ.id))),this._skill}get item(){return!this._item&&this.itemId&&this.actor&&(this._item=this.actor.items.get(this.itemId)),this._item}get displayResultType(){return game.settings.get("CoC7","displayResultType")}get displayCheckSuccessLevel(){return game.settings.get("CoC7","displayCheckSuccessLevel")}get displayBothSuccessLevel(){return this.displayResultType&&this.displayCheckSuccessLevel}get dontDisplaySuccessLevel(){return!this.displayResultType&&!this.displayCheckSuccessLevel}get image(){return this.skill?this.skill.img:this.item?this.item.img:void 0}get link(){return this.getLinkElement().outerHTML}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}getLinkElement(classes=null){const data={cls:["coc7-link","coc7-roll"].concat(classes),dataset:{check:"check"},icon:this.image?`<div style="background-image: url(${this.image})"></div>`:'<i class="fas fa-dice"></i>',blind:this.isBlind},difficulty=CoC7Check.difficultyString(this._difficulty),title=game.i18n.format(`CoC7.LinkCheck${this._difficulty?"Diff":""}${this._diceModifier?"Modif":""}`,{difficulty,modifier:this._diceModifier,name:this.name}),a=document.createElement("a");return a.title=title,a.classList.add(...data.cls),a.innerHTML=`${data.blind?'<i class="fas fa-eye-slash"></i>':""}${data.icon}${this.name}`,a}async roll(diceMod=null,difficulty=null,options={}){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.standby||await this._perform(options)}static createFromActorRollData(rollData){const roll={};switch(rollData.difficulty&&(roll.difficulty=rollData.difficulty),rollData.diceModifier&&(roll.diceModifier=rollData.diceModifier),!0===rollData.denyPush&&(roll.denyPush=!0),rollData.flatDiceModifier&&(roll.flatDiceModifier=rollData.flatDiceModifier),rollData.flatThresholdModifier&&(roll.flatThresholdModifier=rollData.flatThresholdModifier),rollData.actor?.actorKey?roll.actorKey=rollData.actor.actorKey:rollData.actor?.name&&(roll.actorName=rollData.actor.name),rollData.type){case CoC7Check.type.characteristic:roll.characteristic=rollData.value?.key;break;case CoC7Check.type.attribute:roll.attribute=rollData.value?.key;break;case CoC7Check.type.item:roll.actorKey=rollData.value.actor.actorKey,"skill"===rollData.value?.type?roll.skill=rollData.value.id:roll.item=rollData.value.id;break;case CoC7Check.type.skill:roll.actorKey=rollData.value.actor.actorKey,roll.skill=rollData.value.id;break;case CoC7Check.type.value:roll.displayName=rollData.value.name,roll.rawValue=rollData.value.threshold}return CoC7Check.create(roll)}static create({difficulty=CoC7Check.difficultyLevel.regular,diceModifier=null,actorKey=null,characteristic=null,attribute=null,rawValue=0,item=null,skill=null,flatDiceModifier=0,flatThresholdModifier=0,displayName=null,actorName=null,denyPush}={}){const check=new CoC7Check;return check.difficulty=difficulty,!0===denyPush&&(check.denyPush=!0),diceModifier&&(check.diceModifier=diceModifier),flatDiceModifier&&(check.flatDiceModifier=flatDiceModifier),flatThresholdModifier&&(check.flatThresholdModifier=flatThresholdModifier),displayName&&(check.displayName=displayName),actorKey&&(check.actor=actorKey),actorName&&(check.actorName=actorName),isNaN(Number(rawValue))||(check.rawValue=Number(rawValue)),check.actor&&!check.actor.isDummy&&(skill?check.skill=skill:characteristic?check.characteristic=characteristic:attribute?check.attribute=attribute:item&&(check.item=item)),check}async rollCharacteristic(char,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.characteristic=char,this.standby||await this._perform()}async rollAttribute(attrib,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.attribute=attrib,this.standby||await this._perform()}async rollValue(val,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.rawValue=val,this.standby||await this._perform()}get rolledSuccessLevel(){return this.successLevel}async _perform(options={}){this.dice=options.roll||await CoC7Dice.roll(this.diceModifier,this.rollMode,this.isBlind),options.silent||game.modules.get("dice-so-nice")?.active||AudioHelper.play({src:CONFIG.sounds.dice},!0),options.forceDSN&&await CoC7Dice.showRollDice3d(this.dice.roll),this.dices={tens:[],unit:{value:this.dice.unit.total},total:this.dice.total,tenResult:this.dice.total-this.dice.unit.total,hasBonus:!!this.diceModifier,bonus:Math.abs(this.diceModifier),bonusType:this.diceModifier<0?game.i18n.format("CoC7.DiceModifierPenalty"):game.i18n.format("CoC7.DiceModifierBonus"),difficulty:this.difficulty};const max=0===this.dice.unit.total?100:90,min=0===this.dice.unit.total?10:0;let selected=this.dice.total-this.dice.unit.total;for(let i=0;i<this.dice.tens.results.length;i++){const die={};die.value=this.dice.tens.results[i],die.value===selected?(selected=101,die.selected=!0,this.dices.hasBonus?(die.isMax=!0,die.isMin=!1):(die.isMin=!0,die.isMax=!1)):(die.value===max?die.isMax=!0:die.isMax=!1,die.value===min?die.isMin=!0:die.isMin=!1),this.dices.tens.push(die)}this.computeCheck()}async computeCheck(){switch(this.isUnknown=this.unknownDifficulty,this.gmDifficultyRegular&&(this.difficulty=CoC7Check.difficultyLevel.regular),this.gmDifficultyHard&&(this.difficulty=CoC7Check.difficultyLevel.hard),this.gmDifficultyExtreme&&(this.difficulty=CoC7Check.difficultyLevel.extreme),this.gmDifficultyCritical&&(this.difficulty=CoC7Check.difficultyLevel.critical),this.tenOnlyOneDie=1===this.dices.tens.length,this.isValue=!1,this.isCharactiristic=!1,this.isSkill=!1,this.isItem=!1,this.isAttribute=!1,this.isSimpleRoll?(this.denyPush=!0,this.denyLuck=!0):null==this.actor?this.isValue=!0:(this.characteristic&&(this.isCharactiristic=!0,this.rawValue=this.actor.system.characteristics[this.characteristic].value),this.skill&&(this.isSkill=!0,this.rawValue=this.skill.value),this.attribute&&(this.isAttribute=!0,this.rawValue=this.actor.system.attribs[this.attribute].value)),this.luckSpent||this.isSimpleRoll||(this.modifiedResult<=this.rawValue&&(this.successLevel=CoC7Check.successLevel.regular),this.modifiedResult<=this.hardThreshold&&(this.successLevel=CoC7Check.successLevel.hard),this.modifiedResult<=this.extremeThreshold&&(this.successLevel=CoC7Check.successLevel.extreme),this.modifiedResult>this.rawValue&&(this.successLevel=CoC7Check.successLevel.failure),1===this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.critical),this.fumbleThreshold<=this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.fumble)),this.successLevel){case CoC7Check.successLevel.regular:this.resultType=game.i18n.format("CoC7.RegularSuccess");break;case CoC7Check.successLevel.hard:this.resultType=game.i18n.format("CoC7.HardSuccess");break;case CoC7Check.successLevel.extreme:this.resultType=game.i18n.format("CoC7.ExtremeSuccess");break;case CoC7Check.successLevel.critical:this.resultType=game.i18n.format("CoC7.CriticalSuccess");break;case CoC7Check.successLevel.fumble:this.resultType=game.i18n.format("CoC7.Fumble");break;case CoC7Check.successLevel.failure:this.resultType=game.i18n.format("CoC7.Failure")}if(this.unknownDifficulty?this.successRequired="":this.isSimpleRoll||(this.successRequired=game.i18n.format("CoC7.SuccessRequired",{successRequired:this.difficultyString})),1===this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.critical),this.luckSpent||this.isUnknown||this.isSimpleRoll||(this.isFailure=this.failed,this.isSuccess=this.passed),this.hasMalfunction=!1,this.isFumble&&(this.successLevel=CoC7Check.successLevel.fumble),this.item&&(this.isItem=!0,this.item.system.malfunction&&Number(this.modifiedResult)>=Number(this.item.system.malfunction)&&(this.hasMalfunction=!0,this.malfunctionTxt=game.i18n.format("CoC7.Malfunction",{itemName:this.item.name}),await this.item.toggleItemFlag(CoC7Item.flags.malfunction))),void 0===this.canBePushed&&(this.canBePushed=!!this.skill&&this.skill.canBePushed(),null!=this.characteristic&&(this.canBePushed=!0),this.isFumble&&(this.canBePushed=!1),this.denyPush&&(this.canBePushed=!1)),!this.denyLuck&&this.actor){if(!(this.luckSpent||this.passed||this.isFumble||this.difficulty===CoC7Check.difficultyLevel.critical||this.unknownDifficulty)&&(this.skill||this.characteristic)){const luckNeeded=this.modifiedResult-this.succesThreshold;this.actor.luck>luckNeeded&&(this.hasEnoughLuck=!0,this.luckNeeded=luckNeeded,this.luckNeededTxt=game.i18n.format("CoC7.SpendLuck",{luckNeededValue:luckNeeded}))}if(!this.luckSpent&&(this.increaseSuccess=[],!this.pushing&&"lck"!==this.attribute&&"san"!==this.attribute)){if(this.unknownDifficulty&&this.modifiedResult>this.regularThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.RegularDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.regular,nextLevel.luckToSpend=this.modifiedResult-this.regularThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}if(this.difficulty<=CoC7Check.difficultyLevel.regular&&this.modifiedResult>this.hardThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.HardDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.hard,nextLevel.luckToSpend=this.modifiedResult-this.hardThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}if(this.difficulty<=CoC7Check.difficultyLevel.hard&&this.modifiedResult>this.extremeThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.ExtremeDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.extreme,nextLevel.luckToSpend=this.modifiedResult-this.extremeThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}}this.canIncreaseSuccess=this.increaseSuccess.length>0,this.isFumble&&(this.canIncreaseSuccess=!1)}if(this.canAwardExperience=this.skill&&!this.skill.system.properties.noxpgain,!(this.passed&&this.diceModifier<=0&&this.skill)||this.skill.system.properties.noxpgain||this.luckSpent||this.forced||this.isBlind||this.isUnknown||this.flagForDevelopement(),this.parent){const parent=await fromUuid(this.parent);parent&&"updateRoll"in parent&&await parent.updateRoll(this.JSONRollString)}}showDiceRoll(){if(game.modules.get("dice-so-nice")?.active){const diceResults=[];for(const dieResult of this.dices.tens)diceResults.push(100===dieResult.value?0:dieResult.value/10);diceResults.push(this.dices.unit.value);const diceData={formula:`${this.dices.tens.length}d100+1d10`,results:diceResults,whisper:null,blind:!1};game.dice3d.show(diceData)}}get cssClass(){let cssClass="";return this.isSuccess&&(cssClass="success"),this.isFailure&&(cssClass="failure"),this.isCritical&&!this.isFailure&&(cssClass="success critical"),this.isFumble&&!this.isSuccess&&(cssClass="failure fumble"),CoC7Check.successLevel.regular===this.successLevel&&(cssClass+=" regular-success"),CoC7Check.successLevel.hard===this.successLevel&&(cssClass+=" hard-success"),CoC7Check.successLevel.extreme===this.successLevel&&(cssClass+=" extreme-success"),cssClass}get cssClassList(){const cssClass=[];return this.isSuccess&&cssClass.push("success"),this.isFailure&&cssClass.push("failure"),this.isCritical&&!this.isFailure&&cssClass.push("success","critical"),this.isFumble&&!this.isSuccess&&cssClass.push("failure","fumble"),CoC7Check.successLevel.regular===this.successLevel&&cssClass.push("regular-success"),CoC7Check.successLevel.hard===this.successLevel&&cssClass.push("hard-success"),CoC7Check.successLevel.extreme===this.successLevel&&cssClass.push("extreme-success"),cssClass}get playerCssClass(){return this.isSuccess||this.forcedSuccess?"success":this.isFailure||this.forcedFailure?"failure":null}async upgradeCheck(upgradeindex,update=!0){const increasedSuccess=this.increaseSuccess[upgradeindex],luckAmount=parseInt(increasedSuccess.luckAmount)||parseInt(increasedSuccess.luckToSpend);if(!this.actor.spendLuck(luckAmount))return void ui.notifications.error(game.i18n.format("CoC7.ErrorNotEnoughLuck",{actor:this.actor.name}));this.totalLuckSpent=parseInt(this.totalLuckSpent)?parseInt(this.totalLuckSpent):0,this.totalLuckSpent+=parseInt(luckAmount);const newSuccessLevel=parseInt(increasedSuccess.newSuccessLevel)||parseInt(increasedSuccess.difficulty);this.successLevel=newSuccessLevel,this.difficulty<=newSuccessLevel&&(this.isSuccess=!0,this.isFailure=!1);for(let index=0;index<upgradeindex+1;index++)this.increaseSuccess.shift();for(const s of this.increaseSuccess)s.luckToSpend=s.luckToSpend-luckAmount;return this.luckSpent=!0,this.computeCheck(),update?await this.updateChatCard():void 0}removeUpgrades(){this.canIncreaseSuccess=!1,this.increaseSuccess=[],this.luckNeeded=0,this.luckNeededTxt=null,this.canBePushed=!1}forcePass(luckAmount=null,update=!0){if(luckAmount){this.actor.spendLuck(luckAmount),this.successLevel=this.difficulty;for(const s of this.increaseSuccess)s.luckToSpend=s.luckToSpend-luckAmount;this.luckSpent=!0,this.isSuccess=!0,this.isFailure=!1,this.totalLuckSpent=parseInt(this.totalLuckSpent)?parseInt(this.totalLuckSpent):0,this.totalLuckSpent+=parseInt(luckAmount),this.computeCheck(),update&&this.updateChatCard()}else this.forced=!0,this.forcedSuccess=!0,this.isUnknown?this.forceSuccessLevel(CoC7Check.successLevel.regular,update):this.forceSuccessLevel(this.difficulty,update)}forceFail(update=!0){this.forced=!0,this.forcedFailure=!0,this.isUnknown?this.forceSuccessLevel(CoC7Check.successLevel.failure,update):this.forceSuccessLevel(this.difficulty-1,update)}_forceCheck(high,low,update=!0){let total=Math.floor(Math.random()*(high-low))+low+1;const unitTotal=total%10;let tenTotal=Math.floor(total/10);const tens=[];let hasEnough=Math.abs(this.diceModifier)===tens.length;for(;!hasEnough;){let ten=Math.floor(10*Math.random()),roll=10*ten+unitTotal;0===roll&&(roll=100,ten=100),this.hasPenalty&&roll<=high&&(tens.push(ten),roll>total&&(total=roll)),this.hasBonus&&roll>low&&(tens.push(ten),roll<total&&(total=roll)),hasEnough=tens.length===Math.abs(this.diceModifier)}10===tenTotal&&0===unitTotal&&(tenTotal=100),tens.splice(Math.floor(Math.random()*tens.length+1),0,10===tenTotal?0:tenTotal),this.dices.tens=[],this.dices.unit.value=unitTotal,this.modifiedResult=total,this.dices.total=total,this.dices.tenResult=total-unitTotal;const max=0===unitTotal?100:90,min=0===unitTotal?10:0;let selected=total-unitTotal;for(let i=0;i<tens.length;i++){const die={};die.value=tens[i],die.value===selected?(selected=101,die.selected=!0,this.hasBonus?(die.isMax=!0,die.isMin=!1):(die.isMin=!0,die.isMax=!1)):(die.value===max?die.isMax=!0:die.isMax=!1,die.value===min?die.isMin=!0:die.isMin=!1),this.dices.tens.push(die)}this.computeCheck(),update&&this.updateChatCard()}forceSuccessLevel(successLevel,update=!0){let high,low;CoC7Check.successLevel.fumble===successLevel&&(high=100,low=this.fumbleThreshold-1),CoC7Check.successLevel.failure===successLevel&&(high=this.regularThreshold===this.fumbleThreshold-1?100:this.fumbleThreshold-1,low=this.regularThreshold),CoC7Check.successLevel.regular===successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.hard===successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.extreme===successLevel&&(high=this.extremeThreshold,low=1),CoC7Check.successLevel.critical===successLevel&&(high=1,low=0),high===low&&low--,0===high&&(high=this.fumbleThreshold-1),this._forceCheck(high,low,update)}increaseSuccessLevel(update=!0){let high,low;CoC7Check.successLevel.fumble===this.successLevel&&(high=this.fumbleThreshold-1,low=this.regularThreshold===this.fumbleThreshold-1?this.hardThreshold:this.regularThreshold),CoC7Check.successLevel.failure===this.successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.regular===this.successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.hard===this.successLevel&&(high=this.extremeThreshold,low=this.criticalThreshold),CoC7Check.successLevel.extreme===this.successLevel&&(high=this.criticalThreshold,low=0),high===low&&low--,this._forceCheck(high,low,update)}decreaseSuccessLevel(update=!0){let high,low;CoC7Check.successLevel.failure===this.successLevel&&(high=100,low=this.fumbleThreshold-1),CoC7Check.successLevel.regular===this.successLevel&&(high=this.fumbleThreshold-1,low=this.regularThreshold),CoC7Check.successLevel.hard===this.successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.extreme===this.successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.critical===this.successLevel&&(high=this.extremeThreshold,low=1),0===high&&(high=this.fumbleThreshold-1),this._forceCheck(high,low,update)}async flagForDevelopement(){this.flaggedForDevelopment=!0,this.skill&&await this.skill.flagForDevelopement()}set difficulty(x){this._difficulty=parseInt(x)}get difficulty(){return this._difficulty}set flavor(x){this._flavor=x}set context(x){this._context=x}get context(){if(this._context)return this._context}set parent(x){this.uuid||(this.uuid=foundry.utils.randomID(16)),this.parentUuid=x}get parent(){if(this.parentUuid)return this.parentUuid}get flavor(){if(this._flavor)return this._flavor;let flavor="";return this.actor?.system&&(this.skill?flavor=game.i18n.format("CoC7.CheckResult",{name:this.skill.name,value:this.rawValueString,difficulty:this.difficultyString}):this.item?flavor=game.i18n.format("CoC7.ItemCheckResult",{item:this.item.name,skill:this.skill.name,value:this.rawValueString,difficulty:this.difficultyString}):this.characteristic?flavor=game.i18n.format("CoC7.CheckResult",{name:game.i18n.format(this.actor.system.characteristics[this.characteristic].label),value:this.rawValueString,difficulty:this.difficultyString}):this.attribute?flavor=game.i18n.format("CoC7.CheckResult",{name:game.i18n.format(`CoC7.${this.actor.system.attribs[this.attribute].label}`),value:this.rawValueString,difficulty:this.difficultyString}):this.displayName&&(flavor=game.i18n.format("CoC7.CheckResult",{name:this.displayName,value:this.rawValueString,difficulty:this.difficultyString}))),flavor||this.rawValue&&(flavor=this.displayName?game.i18n.format("CoC7.CheckResult",{name:this.displayName,value:this.rawValueString,difficulty:this.difficultyString}):game.i18n.format("CoC7.CheckRawValue",{rawvalue:this.rawValue,difficulty:this.difficultyString})),this.pushing&&(flavor=`${game.i18n.format("CoC7.Pushing")} ${flavor}`),flavor}get tooltipHeader(){return this.attribute?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:game.i18n.format(`CoC7.${this.actor.system.attribs[this.attribute].label}`)})+` (${this.actor.system.attribs[this.attribute].value}%)`:this.characteristic?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:game.i18n.localize(this.actor.system.characteristics[this.characteristic].label)})+` (${this.actor.system.characteristics[this.characteristic].value}%)`:this.skill?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:this.skill.name})+` (${this.skill.value}%)`:this.displayName?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:this.displayName})+` (${this.rawValueString}%)`:null}async getHtmlRollElement(options={}){this.options?this.options=foundry.utils.mergeObject(this.options,options):this.options=options;const html=await renderTemplate("systems/CoC7/templates/chat/rolls/in-card-roll.html",this);return html?$.parseHTML(html)[0]:null}async getHtmlRoll(options={}){this.options?this.options=foundry.utils.mergeObject(this.options,options):this.options=options;return await renderTemplate("systems/CoC7/templates/chat/rolls/in-card-roll.html",this)||void 0}async toMessage(pushing=!1){this.pushing=pushing;const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this),speakerData={};let speaker;this.actor?(this.actor.isToken?speakerData.token=this.token.document:this.actor.isDummy?this.actor.name&&(speaker={alias:this.actor.name}):speakerData.actor=this.actor,speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor?.user?this.actor.user:game.user).id,speaker,flavor:this.flavor,content:html,flags:{CoC7:{type:CoC7Check.cardType}}};if(this.uuid&&(chatData.flags.CoC7.uuid=this.uuid),this.context&&(chatData.flags.CoC7.context=this.context),"selfroll"===this.rollMode)if(game.user.isGM){if(chatData.user=game.user.id,chatData.flavor=`[${this.actor.name}] ${chatData.flavor}`,chatData.flags={CoC7:{GMSelfRoll:!0}},void 0!==chatData.speaker&&(chatData.flags.CoC7.originalSpeaker=foundry.utils.duplicate(chatData.speaker)),game.user.isGM)switch(game.settings.get("CoC7","selfRollWhisperTarget")){case"owners":delete chatData.speaker,chatData.whisper=this.actor.owners,chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER;break;case"everyone":delete chatData.speaker,chatData.whisper=game.users.players,chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER;break;default:ChatMessage.applyRollMode(chatData,this.rollMode)}}else ChatMessage.applyRollMode(chatData,this.rollMode);["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),this.dice?.roll&&!this.dice?.hideDice&&(chatData.roll=this.dice.roll,chatData.type=CONST.CHAT_MESSAGE_TYPES.ROLL,chatData.rollMode=this.isBlind?"blindroll":this.rollMode),ChatMessage.create(chatData).then((msg=>msg))}async updateChatCard({makePublic=!1,forceRoll=!1}={}){makePublic&&(this.rollMode=!1);const chatData={flavor:this.flavor};makePublic&&(chatData.whisper=[],chatData.blind=!1,ChatMessage.applyRollMode(chatData)),chatData.blind&&(this.isBlind=!0);const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this);let newContent=html;if(!this.messageId)return $.parseHTML(html)[0];const message=game.messages.get(this.messageId),htmlMessage=$.parseHTML(message.content)[0];if(!htmlMessage.classList.contains("roll-result")){const htmlCheck=$.parseHTML(html)[0],rollResultElement=htmlMessage.querySelector(".roll-result");null!==rollResultElement&&rollResultElement.replaceWith(htmlCheck),newContent=htmlMessage.outerHTML}chatData.content=newContent,CONST.CHAT_MESSAGE_TYPES.ROLL===message.type&&(message.whisper?.length?chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER:chatData.type=CONST.CHAT_MESSAGE_TYPES.OTHER),forceRoll&&this.dice?.roll&&(game.user.isGM||!this.isBlind)&&await CoC7Dice.showRollDice3d(this.dice.roll);const msg=await message.update(chatData);return await ui.chat.updateMessage(msg,!1),msg}static async updateCardSwitch(event){const card=event.currentTarget.closest(".chat-card"),check=await CoC7Check.getFromCard(card);check.gmDifficultyRegular=!1,check.gmDifficultyHard=!1,check.gmDifficultyExtreme=!1,check.gmDifficultyCritical=!1,"gmDifficultyRegular"===event.currentTarget.dataset.flag&&(check.gmDifficultyRegular=!0),"gmDifficultyHard"===event.currentTarget.dataset.flag&&(check.gmDifficultyHard=!0),"gmDifficultyExtreme"===event.currentTarget.dataset.flag&&(check.gmDifficultyExtreme=!0),"gmDifficultyCritical"===event.currentTarget.dataset.flag&&(check.gmDifficultyCritical=!0),check.computeCheck(),check.updateChatCard()}get tooltip(){return renderTemplate("systems/CoC7/templates/chat/rolls/roll-tooltip.html",this)}get inlineCheck(){const a=document.createElement("a");return a.classList.add("coc7-inline-check"),a.classList.add("coc7-check-result"),a.classList.add("coc7-inline"),a.classList.add(...this.cssClassList),a.title=this.tooltipHeader,a.dataset.roll=escape(this.JSONRollString),a.innerHTML=`<i class="game-icon game-icon-d10"></i> ${this.modifiedResult||"??"}`,a}get rollToolTip(){if(this.standby)return;const parts=[],tens=this.dices.tens.map((r=>({result:r.value,selected:r.selected,classes:["die","d10",r.selected?null:"discarded",r.isMin?"min":null,r.isMax?"max":null].filter((c=>c)).join(" ")}))),unit=[{result:this.dices.unit.value,selected:!0,classes:"die d10"}];return parts.push({formula:this.tooltipHeader,total:this.modifiedResult,icons:this.successLevelIcons,class:this.cssClass,successRequired:this.successRequired,resultType:this.resultType,face:10,rolls:[...tens,...unit]}),renderTemplate("systems/CoC7/templates/chat/rolls/roll-tooltip.html",{parts})}get JSONRollData(){return JSON.parse(this.JSONRollString)}get JSONRollString(){return JSON.stringify(this,((key,value)=>{if(null===value)return;return["_actor","_skill","_item"].includes(key)?void 0:value}))}static fromData(data){return Object.assign(new CoC7Check,data)}static fromRollString(dataString){let data;try{data=JSON.parse(unescape(dataString))}catch(err){return ui.notifications.error(err.message),null}return CoC7Check.fromData(data)}static async alter(check,command,options={}){switch(command){case"useLuck":if(options.target.classList.contains("pass-check")){const luckAmount=parseInt(options.target.dataset.luckAmount);check.forcePass(luckAmount,options.update)}else{const upgradeIndex=parseInt(options.target.dataset.index);await check.upgradeCheck(upgradeIndex,options.update)}break;case"force-pass":check.forcePass(null,options.update);break;case"force-fail":check.forceFail(options.update);break;case"increase-success-level":check.increaseSuccessLevel(options.update);break;case"decrease-success-level":check.decreaseSuccessLevel(options.update);break;case"reveal-check":check.isBlind=!1,check.rollMode=!1,check.computeCheck(),options.update&&check.updateChatCard();break;case"flag-for-development":await check.flagForDevelopement(),check.computeCheck(),options.update&&check.updateChatCard();break;case"push":await check._perform(),check.pushing=!0,options.update&&check.updateChatCard()}}static async _onClickInlineRoll(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("coc7-check-result"))return a.classList.contains("expanded")?CoC7Check._collapseInlineResult(a):CoC7Check._expandInlineResult(a)}static _collapseInlineResult(a){if(!a.classList.contains("coc7-inline-check"))return;if(!a.classList.contains("expanded"))return;const tooltip=a.querySelector(".coc7-check-tooltip");return tooltip&&tooltip.remove(),a.classList.remove("expanded")}static async _expandInlineResult(a){if(!a.classList.contains("coc7-inline-check"))return;if(a.classList.contains("expanded"))return;const check=Object.assign(new CoC7Check,JSON.parse(unescape(a.dataset.roll)));if(check.standby)return;const tip=document.createElement("div");tip.innerHTML=await check.rollToolTip;const tooltip=tip.children[0];a.appendChild(tooltip),a.classList.add("expanded");const pa=a.getBoundingClientRect(),pt=tooltip.getBoundingClientRect();tooltip.style.left=`${Math.min(pa.x,window.innerWidth-(pt.width+3))}px`,tooltip.style.top=`${Math.min(pa.y+pa.height+3,window.innerHeight-(pt.height+3))}px`;const zi=getComputedStyle(a).zIndex;tooltip.style.zIndex=Number.isNumeric(zi)?zi+1:100}}class CoC7Utilities{static isFormula(x){return"string"==typeof x&&(!!isNaN(Number(x))&&Roll.validate(x))}static ParseChatEntry(html,content){const terms=content.match(/(\S+)/g);if(terms[0]?.toLowerCase().match(/^\/r(oll)?$/)&&terms[1]?.toLowerCase().startsWith("1d%"))return setTimeout((function(){CoC7Utilities._ExecCommand(content)}),200),!1}static async _ExecCommand(content){const options=content.toLowerCase().split(" ")?.join("")?.replace(/\/r(oll)?1d%/,""),check=new CoC7Check;if(options.length){let threshold,flatDiceModifier,flatThresholdModifier,escaped=options,difficulty=CoC7Check.difficultyLevel.regular,diceModifier=0,ask=!1;const thresholdStr=escaped.match(/[^(]+(?=\))/);if(thresholdStr&&thresholdStr.length){threshold=Number(thresholdStr[0]);for(const match of thresholdStr)escaped=escaped.replace(`(${match})`,"")}const difficultyStr=escaped.match(/[^[]+(?=\])/);if(difficultyStr&&difficultyStr.length){difficulty=CoC7Utilities.convertDifficulty(difficultyStr[0]);for(const match of difficultyStr)escaped=escaped.replace(`[${match}]`,"")}if(escaped.includes("?")&&(ask=!0,escaped=escaped.replace("?","")),isNaN(Number(escaped))||(diceModifier=Number(escaped)),ask){const dialogOptions={threshold,modifier:diceModifier,difficulty,askValue:!0},usage=await RollDialog.create(dialogOptions);usage&&(diceModifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),threshold=Number(usage.get("threshold"))||threshold,flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,threshold&&(check.rawValue=isNaN(threshold)?void 0:threshold)}const speaker=ChatMessage.getSpeaker();if(speaker.token&&speaker.scene){const actor=chatHelper.getActorFromKey(`${speaker.scene}.${speaker.token}`);actor&&(check.actor=actor)}else if(speaker.actor){const actor=game.actors.get(speaker.actor);actor&&(check.actor=actor)}await check.roll(),check.toMessage()}static async test(){ui.notifications.infos("Do some stuff")}static getActorFromString(actorString){let actor;return game.actors.tokens[actorString]?game.actors.tokens[actorString]:(actor=game.actors.get(actorString),actor||(actor=Object.values(game.actors.tokens).find((t=>t.name.toLowerCase()===actorString.toLowerCase())),actor||(actor=game.actors.find((a=>a.name.toLowerCase()===actorString.toLowerCase()))),actor||null))}static getCharacteristicNames(char){const charKey=char.toLowerCase();switch(charKey){case"str":return{short:game.i18n.localize("CHARAC.STR"),label:game.i18n.localize("CHARAC.Strength")};case"con":return{short:game.i18n.localize("CHARAC.CON"),label:game.i18n.localize("CHARAC.Constitution")};case"siz":return{short:game.i18n.localize("CHARAC.SIZ"),label:game.i18n.localize("CHARAC.Size")};case"dex":return{short:game.i18n.localize("CHARAC.DEX"),label:game.i18n.localize("CHARAC.Dexterity")};case"app":return{short:game.i18n.localize("CHARAC.APP"),label:game.i18n.localize("CHARAC.Appearance")};case"int":return{short:game.i18n.localize("CHARAC.INT"),label:game.i18n.localize("CHARAC.Intelligence")};case"pow":return{short:game.i18n.localize("CHARAC.POW"),label:game.i18n.localize("CHARAC.Power")};case"edu":return{short:game.i18n.localize("CHARAC.EDU"),label:game.i18n.localize("CHARAC.Education")};case"luck":return{short:game.i18n.localize("CoC7.Luck"),label:game.i18n.localize("CoC7.Luck")};default:for(const[,value]of Object.entries(game.system.template.Actor.templates.characteristics.characteristics))if(charKey===game.i18n.localize(value.short).toLowerCase())return{short:game.i18n.localize(value.short),label:game.i18n.localize(value.label)};return null}}static convertDifficulty(difficulty){if("0"===String(difficulty))return CoC7Check.difficultyLevel.regular;if("string"!=typeof difficulty)return difficulty;if(!isNaN(Number(difficulty)))return Number(difficulty);switch(difficulty){case"?":return CoC7Check.difficultyLevel.unknown;case"+":return CoC7Check.difficultyLevel.hard;case"++":return CoC7Check.difficultyLevel.extreme;case"+++":return CoC7Check.difficultyLevel.critical;default:return CoC7Check.difficultyLevel.regular}}static skillCheckMacro(skill,event,options={}){event.preventDefault();const speaker=ChatMessage.getSpeaker();let actor;speaker.token&&(actor=game.actors.tokens[speaker.token]),actor||(actor=game.actors.get(speaker.actor)),actor?actor.skillCheck(skill,event.shiftKey,options):ui.notifications.warn(game.i18n.localize("CoC7.WarnNoActorAvailable"))}static weaponCheckMacro(weapon,event){event.preventDefault();const speaker=ChatMessage.getSpeaker();let actor;if(speaker.token&&(actor=game.actors.tokens[speaker.token]),!actor)if(speaker.scene&&speaker.token){const baseActor=game.actors.get(speaker.actor),token=game.scenes.get(speaker.scene).tokens.get(speaker.token);actor=new(getDocumentClass("Actor"))(baseActor.toJSON(),{parent:token})}else actor=game.actors.get(speaker.actor);actor?actor.weaponCheck(weapon,event.shiftKey):ui.notifications.warn(game.i18n.localize("CoC7.WarnNoActorAvailable"))}static async checkMacro(threshold=void 0,event=null){await CoC7Utilities.rollDice(event,{threshold})}static createMacro(bar,data,slot){if("Item"!==data.type)return;const item=fromUuidSync(data.uuid,bar);if(!item)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroNoItemFound"));if("weapon"!==item.type&&"skill"!==item.type)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroIncorrectType"));let command="";if("weapon"===item.type&&(command=`game.CoC7.macros.weaponCheck({name:'${item.name}', uuid:'${data.uuid}'}, event);`),"skill"===item.type){if(CoC7Item.isAnySpec(item))return ui.notifications.warn(game.i18n.localize("CoC7.WarnNoGlobalSpec"));command=`game.CoC7.macros.skillCheck({name:'${item.name}', uuid:'${data.uuid}'}, event);`}if(""!==command){const macro=game.macros.contents.find((m=>m.name===item.name&&m.command===command));return macro?(game.user.assignHotbarMacro(macro,slot),!1):(Macro.create(foundry.utils.duplicate({name:item.name,type:"script",img:item.img,command})).then((macro=>{game.user.assignHotbarMacro(macro,slot)})),!1)}return!0}static async toggleDevPhase(toggle){await game.settings.set("CoC7","developmentEnabled",toggle),ui.notifications.info(toggle?game.i18n.localize("CoC7.DevPhaseEnabled"):game.i18n.localize("CoC7.DevPhaseDisabled")),game.socket.emit("system.CoC7",{type:"updateChar"}),CoC7Utilities.updateCharSheets()}static async toggleCharCreation(toggle){await game.settings.set("CoC7","charCreationEnabled",toggle),ui.notifications.info(toggle?game.i18n.localize("CoC7.CharCreationEnabled"):game.i18n.localize("CoC7.CharCreationDisabled")),game.socket.emit("system.CoC7",{type:"updateChar"}),CoC7Utilities.updateCharSheets(),Hooks.call("toggleCharCreation",toggle)}static async getTarget(){const users=game.users.filter((user=>user.active)),actors=game.actors;let checkOptions=`<input type="checkbox" name="COCCheckAllPC" id="COCCheckAllPC">\n\n    <label for="COCCheckAllPC">${game.i18n.localize("CoC7.allActors")}</label>`;const playerTokenIds=users.map((u=>u.character?.id)).filter((id=>void 0!==id)),selectedPlayerIds=canvas.tokens.controlled.map((token=>token.actor.id));actors.forEach((actor=>{const checked=(selectedPlayerIds.includes(actor.id)||playerTokenIds.includes(actor.id))&&"checked";checkOptions+=`\n     <br>\n     <input type="checkbox" name="${actor.id}" id="${actor.id}" value="${actor.name}" ${checked}>\n\n     <label for="${actor.id}">${actor.name}</label>\n       `})),new Dialog({title:`${game.i18n.localize("CoC7.dreaming")}`,content:`${game.i18n.localize("CoC7.restTargets")}: ${checkOptions} <br>`,buttons:{whisper:{label:`${game.i18n.localize("CoC7.startRest")}`,callback:async html=>{const targets=[];let all=!1;const users=html.find('[type="checkbox"]');for(const user of users)"COCCheckAllPC"===user.name&&user.checked&&(all=!0),(user.checked||all)&&targets.push(user.id);await CoC7Utilities.startRest(targets)}}}}).render(!0)}static async startRest(targets){if(!targets.length)return;const actors=game.actors.filter((actor=>targets.includes(actor.id)));let chatContent=`<i>${game.i18n.localize("CoC7.dreaming")}...</i><br>`;for(const actor of actors)if(["character","npc","creature"].includes(actor.type)){let quickHealer=!1;for(const item of actor.items)"talent"===item.type&&item.name===`${game.i18n.localize("CoC7.quickHealer")}`&&(quickHealer=!0);const isCriticalWounds=!game.settings.get("CoC7","pulpRuleIgnoreMajorWounds")&&actor.hasConditionStatus(COC7.status.criticalWounds),dailySanityLoss=actor.system.attribs.san.dailyLoss,hpValue=actor.system.attribs.hp.value,hpMax=actor.system.attribs.hp.max,mpValue=actor.system.attribs.mp.value,mpMax=actor.system.attribs.mp.max,pow=actor.system.characteristics.pow.value;if(chatContent+=`<br><b>${actor.name}. </b>`,hpValue<hpMax)if(!0===isCriticalWounds)chatContent+=`<b style="color:darkred">${game.i18n.localize("CoC7.hasCriticalWounds")}. </b>`;else{let healAmount=1;game.settings.get("CoC7","pulpRuleFasterRecovery")&&(healAmount=2),!0===quickHealer&&healAmount++,healAmount=Math.min(healAmount,hpMax-hpValue),chatContent+=1===healAmount?`<b style="color:darkolivegreen">${game.i18n.localize("CoC7.healthRecovered")}. </b>`:`<b style="color:darkolivegreen">${game.i18n.format("CoC7.pulpHealthRecovered",{number:healAmount})}. </b>`,actor.update({"system.attribs.hp.value":actor.system.attribs.hp.value+healAmount})}dailySanityLoss>0&&(chatContent+=`<b style="color:darkolivegreen">${game.i18n.localize("CoC7.dailySanLossRestarted")}.</b>`,actor.update({"system.attribs.san.dailyLoss":0,"system.attribs.san.dailyLimit":Math.floor(actor.system.attribs.san.value/5)}));const hours=7;if(hours>0&&mpValue<mpMax){let magicAmount=hours*Math.ceil(pow/100);magicAmount=Math.min(magicAmount,mpMax-mpValue),chatContent+=`<b style="color:darkolivegreen">${game.i18n.format("CoC7.magicPointsRecovered")}: ${magicAmount}.</b>`,actor.update({"system.attribs.mp.value":actor.system.attribs.mp.value+magicAmount})}}const chatData={user:game.user.id,speaker:ChatMessage.getSpeaker(),content:chatContent,type:CONST.CHAT_MESSAGE_TYPES.OTHER};ChatMessage.create(chatData)}static async toggleXPGain(toggle){await game.settings.set("CoC7","xpEnabled",toggle),ui.notifications.info(toggle?game.i18n.localize("CoC7.XPGainEnabled"):game.i18n.localize("CoC7.XPGainDisabled"))}static async rollDice(event,options={}){let diceModifier,difficulty,flatDiceModifier,flatThresholdModifier;options.askValue=!options.threshold;let threshold=options.threshold;if(void 0!==options.modifier&&(diceModifier=Number(options.modifier)),void 0!==options.difficulty&&(difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!event?.shiftKey&&!options.fastForward){const usage=await RollDialog.create(options);usage&&(diceModifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),threshold=Number(usage.get("threshold")),flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}const actors=[];if(game.user.isGM&&canvas.tokens.controlled.length)for(const token of canvas.tokens.controlled)actors.push(token.actor.tokenKey);else game.user.character&&actors.push(game.user.character.tokenKey);for(const tk of actors){const check=new CoC7Check;check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,check.actor=tk,await check.roll(),check.toMessage()}if(!actors.length){const check=new CoC7Check;check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,await check.roll(),check.toMessage()}}static updateCharSheets(){if(game.user.isGM)for(const a of game.actors.contents)"character"===a?.type&&a?.sheet&&a?.sheet?.rendered&&(a.update({"system.flags.locked":!0}),a.render(!1));else for(const a of game.actors.contents)a.isOwner&&(a.update({"system.flags.locked":!0}),a.render(!1))}static async getDataFromDropEvent(event,entityType="Item"){if(event.originalEvent)return[];try{const dataList=JSON.parse(event.dataTransfer.getData("text/plain"));if("Folder"===dataList.type&&dataList.documentName===entityType){const folder=await fromUuid(dataList.uuid);return folder?folder.contents:[]}if(dataList.type===entityType){const item=await fromUuid(dataList.uuid);return item?[item]:[]}return[]}catch(err){return[]}}static async copyToClipboard(text){try{if(navigator.clipboard&&window.isSecureContext)return navigator.clipboard.writeText(text);{const textArea=document.createElement("textarea");return textArea.value=text,textArea.style.position="fixed",textArea.style.left="-999px",textArea.style.top="-999px",document.body.appendChild(textArea),textArea.focus(),textArea.select(),new Promise(((resolve,reject)=>{document.execCommand("copy")?resolve():reject(new Error(game.i18n.localize("CoC7.UnableToCopyToClipboard"))),textArea.remove()})).catch((err=>ui.notifications.error(err)))}}catch(err){ui.notifications.error(game.i18n.localize("CoC7.UnableToCopyToClipboard"))}}static quoteRegExp(string){const len=string.length;let qString="";for(let current,i=0;i<len;++i)if(current=string.charAt(i),current>=" "&&current<="~")"\\"!==current&&"'"!==current||(qString+="\\"),qString+=current.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&");else switch(current){case"\b":qString+="\\b";break;case"\f":qString+="\\f";break;case"\n":qString+="\\n";break;case"\r":qString+="\\r";break;case"\t":qString+="\\t";break;case"\v":qString+="\\v";break;default:qString+="\\u",current=current.charCodeAt(0).toString(16);for(let j=4;--j>=current.length;qString+="0");qString+=current}return qString}static setByPath(obj,path,value){const parts=path.split(".");let o=obj;if(parts.length>1)for(let i=0;i<parts.length-1;i++)o[parts[i]]||(o[parts[i]]={}),o=o[parts[i]];o[parts[parts.length-1]]=value}static getByPath(obj,path){const parts=path.split(".");let o=obj;if(parts.length>1)for(let i=0;i<parts.length-1;i++){if(!o[parts[i]])return;o=o[parts[i]]}return o[parts[parts.length-1]]}static SfromUuid(uuid){let doc,parts=uuid.split(".");if("Compendium"===parts[0])return null;{const[docName,docId]=parts.slice(0,2);parts=parts.slice(2);doc=CONFIG[docName].collection.instance.get(docId)}for(;doc&&parts.length>1;){const[embeddedName,embeddedId]=parts.slice(0,2);doc=doc.getEmbeddedDocument(embeddedName,embeddedId),parts=parts.slice(2)}return doc||null}static isDocumentUuidPack(uuid){return!!uuid.includes("Compendium")}static isDocumentUuid(uuid){const identifiers=["Actor","Scene","Token","Item","Compendium"];for(let i=0;i<identifiers.length;i++)if(uuid.includes(identifiers[i]))return!0;return!1}static getActorDocumentFromDropData(dropData){let docUuid,actor;return docUuid=dropData.tokenUuid?dropData.tokenUuid:void 0!==dropData.uuid?dropData.uuid:dropData.sceneId&&dropData.tokenId?`Scene.${dropData.sceneId}.Token.${dropData.tokenId}`:dropData.actorId||dropData.actorKey||dropData.id,"Token"===dropData.type?docUuid=dropData.uuid:docUuid&&(actor=CoC7Utilities.getActorFromKey(docUuid),actor||"Item"!==dropData.type||(docUuid=null)),actor&&docUuid!==actor.uuid&&(docUuid=actor.uuid),docUuid}static getDocumentFromKey(key){if(!key)return null;if(CoC7Utilities.isDocumentUuid(key))return CoC7Utilities.isDocumentUuidPack(key)?fromUuid(key):CoC7Utilities.SfromUuid(key);if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;const token=new Token(tokenData);return token.scene||(token.scene=foundry.utils.duplicate(scene)),token}return game.actors.get(key)||null}static getActorFromKey(key){const doc=CoC7Utilities.getDocumentFromKey(key);return doc?doc.actor?doc.actor:"CoCActor"===doc.constructor?.name?doc:null:null}static async createImportCharactersFolderIfNotExists(){let folderName=game.i18n.localize("CoC7.ImportedCharactersFolder");"CoC7.ImportedCharactersFolder"===folderName&&(folderName="Imported characters");let importedCharactersFolder=game.folders.find((entry=>entry.name===folderName&&"Actor"===entry.type));return null==importedCharactersFolder&&(importedCharactersFolder=await Folder.create({name:folderName,type:"Actor",parent:null}),ui.notifications.info(game.i18n.localize("CoC7.CreatedImportedCharactersFolder"))),importedCharactersFolder}static async guessItem(type,name,{combat=null,source="",fallbackAny=!1}={}){let existing=null;name=name.toLocaleLowerCase();for(let o=0,oM=source.length;o<oM;o++)switch(source.substring(o,o+1)){case"i":if(existing=game.items.find((item=>item.type===type&&item.name.toLowerCase()===name&&(null===combat||item.system.properties.combat===combat))),existing)return existing;break;case"w":case"m":case"s":for(const pack of game.packs)if("Item"===pack.metadata.type&&("w"===source[o]&&"world"===pack.metadata.package||"S"===source[o]&&"CoC7"===pack.metadata.package||"s"===source[o]&&!["world","CoC7"].includes(pack.metadata.package))){if(existing=(await pack.getDocuments()).find((item=>item.type===type&&item.name.toLowerCase()===name&&(null===combat||item.system.properties.combat===combat))),existing)return existing}}if(fallbackAny&&"skill"===type){const match=name.match(/^(.+ \()(?!any).+(\))$/);if(match)return await CoC7Utilities.guessItem(type,match[1]+"any"+match[2],{combat,source})}}static toKebabCase(s){if(!s)return"";const match=s.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g);return match?match.join("-").toLowerCase():""}static sortByNameKey(a,b){return a.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLocaleLowerCase().localeCompare(b.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLocaleLowerCase())}}class CoCIDEditor extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","dialog","coc-id-editor"],template:"systems/CoC7/templates/apps/coc-id-editor.hbs",width:900,height:"auto",title:"CoC7.CoCIDFlag.title",closeOnSubmit:!1,submitOnClose:!0,submitOnChange:!0})}async getData(){const sheetData=super.getData();sheetData.supportedLanguages=CONFIG.supportedLanguages,this.options.editable=this.object.sheet.isEditable,sheetData.guessCode=game.system.api.cocid.guessId(this.object),sheetData.idPrefix=game.system.api.cocid.getPrefix(this.object),sheetData.cocidFlag=this.object.flags?.CoC7?.cocidFlag,sheetData.id=sheetData.cocidFlag?.id||"",sheetData.lang=sheetData.cocidFlag?.lang||game.i18n.lang,sheetData.priority=sheetData.cocidFlag?.priority||0,sheetData.eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData.eras.push({id:key,name:game.i18n.localize(value),isEnabled:!0===(sheetData.cocidFlag?.eras??{})[key]});sheetData.eras.sort(CoC7Utilities.sortByNameKey);const CoCIDKeys=foundry.utils.flattenObject(game.i18n.translations.CoC7.CoCIDFlag.keys??{}),prefix=new RegExp("^"+CoC7Utilities.quoteRegExp(sheetData.idPrefix));sheetData.existingKeys=Object.keys(CoCIDKeys).reduce(((obj,k)=>(k.match(prefix)&&obj.push({k,name:CoCIDKeys[k]}),obj)),[]).sort(CoC7Utilities.sortByNameKey),sheetData.isSystemID=void 0!==CoCIDKeys[sheetData.id];const match=sheetData.id.match(/^([^\\.]+)\.([^\\.]*)\.(.+)/);if(sheetData._existing=match&&void 0!==match[3]?match[3]:"",sheetData.id&&sheetData.lang){const worldDocuments=await game.system.api.cocid.fromCoCIDAll({cocid:sheetData.id,lang:sheetData.lang,scope:"world"}),usedEras={},uniqueWorldPriority={};sheetData.worldDocumentInfo=await Promise.all(worldDocuments.map((async d=>{d.flags.CoC7.cocidFlag.eras?Object.entries(d.flags.CoC7.cocidFlag.eras).filter((e=>e[1])).map((e=>(Object.prototype.hasOwnProperty.call(uniqueWorldPriority,d.flags.CoC7.cocidFlag.priority+"/"+e[0])||(uniqueWorldPriority[d.flags.CoC7.cocidFlag.priority+"/"+e[0]]=0),uniqueWorldPriority[d.flags.CoC7.cocidFlag.priority+"/"+e[0]]++,!1))):uniqueWorldPriority[d.flags.CoC7.cocidFlag.priority+"/*"]=1;const eras=d.flags.CoC7.cocidFlag.eras?Object.entries(d.flags.CoC7.cocidFlag.eras).filter((e=>e[1])).map((e=>e[0])).sort():[];for(const era of eras)usedEras[era]=COC7.eras[era]??"?";return{eras:eras.reduce((function(all,current){return all[current]=!0,all}),{}),priority:d.flags.CoC7.cocidFlag.priority,lang:d.flags.CoC7.cocidFlag.lang??"en",link:await TextEditor.enrichHTML(d.link,{async:!0}),folder:d?.folder?.name}}))),Object.entries(uniqueWorldPriority).filter((c=>c[1]>1)).length>0&&(sheetData.warnDuplicateWorldPriority=!0),sheetData.worldDuplicates=worldDocuments.length??0;const compendiumDocuments=await game.system.api.cocid.fromCoCIDAll({cocid:sheetData.id,lang:sheetData.lang,scope:"compendiums"}),uniqueCompendiumPriority={};sheetData.compendiumDocumentInfo=await Promise.all(compendiumDocuments.map((async d=>{d.flags.CoC7.cocidFlag.eras?Object.entries(d.flags.CoC7.cocidFlag.eras).filter((e=>e[1])).map((e=>(Object.prototype.hasOwnProperty.call(uniqueCompendiumPriority,d.flags.CoC7.cocidFlag.priority+"/"+e[0])||(uniqueCompendiumPriority[d.flags.CoC7.cocidFlag.priority+"/"+e[0]]=0),uniqueCompendiumPriority[d.flags.CoC7.cocidFlag.priority+"/"+e[0]]++,!1))):uniqueCompendiumPriority[d.flags.CoC7.cocidFlag.priority+"/*"]=1;const eras=d.flags.CoC7.cocidFlag.eras?Object.entries(d.flags.CoC7.cocidFlag.eras).filter((e=>e[1])).map((e=>e[0])).sort():[];for(const era of eras)usedEras[era]=COC7.eras[era]??"?";return{eras:eras.reduce((function(all,current){return all[current]=!0,all}),{}),priority:d.flags.CoC7.cocidFlag.priority,lang:d.flags.CoC7.cocidFlag.lang??"en",link:await TextEditor.enrichHTML(d.link,{async:!0}),folder:d?.folder?.name??""}}))),Object.entries(uniqueCompendiumPriority).filter((c=>c[1]>1)).length>0&&(sheetData.warnDuplicateCompendiumPriority=!0),sheetData.compendiumDuplicates=compendiumDocuments.length??0,sheetData.usedEras=[];for(const[key,value]of Object.entries(usedEras))sheetData.usedEras.push({id:key,name:game.i18n.localize(value)});sheetData.usedEras.sort(CoC7Utilities.sortByNameKey)}else sheetData.compendiumDocumentInfo=[],sheetData.worldDocumentInfo=[],sheetData.worldDuplicates=0,sheetData.compendiumDuplicates=0,sheetData.warnDuplicateWorldPriority=!1,sheetData.warnDuplicateCompendiumPriority=!1;return sheetData}activateListeners(html){super.activateListeners(html),html.find("a.copy-to-clipboard").click((function(e){CoC7Utilities.copyToClipboard($(this).siblings("input").val())})),this.object.sheet.isEditable&&(html.find(".toggle-switch").click(this._onClickToggle.bind(this)),html.find("input[name=_existing").change((function(e){const obj=$(this),prefix=obj.data("prefix");let value=obj.val();""!==value&&(value=prefix+CoC7Utilities.toKebabCase(value)),html.find("input[name=id]").val(value).trigger("change")})),html.find("select[name=known]").change((function(e){const obj=$(this);html.find("input[name=id]").val(obj.val())})),html.find("a[data-guess]").click((async function(e){e.preventDefault();const guess=$(this).data("guess");html.find("input[name=id]").val(guess).trigger("change")})))}static async eraToggle(document,propertyId){if("setup"===document.type){const update={[propertyId]:!0};if(void 0!==document.flags?.CoC7?.cocidFlag?.eras)for(const[key]of Object.entries(document.flags.CoC7.cocidFlag.eras))key!==propertyId&&(update["-="+key]=null);await document.update({"flags.CoC7.cocidFlag.eras":update})}else void 0===document.flags?.CoC7?.cocidFlag?.eras?.[propertyId]?void 0===document.flags?.CoC7?.cocidFlag?.eras?await document.update({"flags.CoC7.cocidFlag.eras":{[propertyId]:!0}}):await document.update({[`flags.CoC7.cocidFlag.eras.${propertyId}`]:!0}):await document.update({[`flags.CoC7.cocidFlag.eras.-=${propertyId}`]:null})}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.dataset.property;await CoCIDEditor.eraToggle(this.object,propertyId),this.render()}async _updateObject(event,formData){const id=formData.id||"";await this.object.update({"flags.CoC7.cocidFlag.id":id,"flags.CoC7.cocidFlag.lang":formData.lang||game.i18n.lang,"flags.CoC7.cocidFlag.priority":formData.priority||0,"flags.CoC7.cocidFlag.eras":this.object.flags?.CoC7?.cocidFlag?.eras??{}});const html=$(this.object.sheet.element).find("header.window-header a.header-button.edit-coc-id-warning,header.window-header a.header-button.edit-coc-id-exisiting");html.length&&html.css({color:id?"var(--color-text-light-highlight)":"red"}),this.render()}}function addCoCIDSheetHeaderButton(headerButtons,sheet){if(game.user.isGM){const sheetCoCID=sheet.object.flags?.CoC7?.cocidFlag,CoCIDEditorButton={class:void 0===sheetCoCID||void 0===sheetCoCID.id||""===sheetCoCID.id?"edit-coc-id-warning":"edit-coc-id-exisiting",label:"CoC7.CoCIDFlag.id",icon:"fas fa-fingerprint",onclick:()=>{new CoCIDEditor(sheet.object,{}).render(!0,{focus:!0})}},numberOfButtons=headerButtons.length;headerButtons.splice(numberOfButtons-1,0,CoCIDEditorButton)}}class CoC7ContextMenu{bind(menu,html,callback){this._callback=callback,this._html=html,this._menu=menu;try{const menuTrigger=html.find(`[data-context-menu=${menu.id}]`);if(0===menuTrigger.length)return;menuTrigger.contextmenu(this._onContextMenu.bind(this));const menuElement=CoC7ContextMenu.CreateMenu(menu);menuElement.on("click",".menu-action",this._onMenuAction.bind(this)),0!==this.menu.length?this.menu.replaceWith(menuElement):this.menuContainer.append(menuElement)}catch(error){console.error(error)}}get menuContainer(){let menuContainer=this._html.find(".menu-container");return 0===menuContainer.length&&(this._html.append('<div class="menu-container"></div>'),menuContainer=this._html.find(".menu-container")),menuContainer}get menu(){return this.menuContainer.find(`.context-menu-wrapper.${this._menu.id}`)}_onMenuAction(event){return this._callback(event,this.target)}static closeAll(){$("body").find(".menu-container").find(".context-menu-wrapper").each((function(i,m){m.style.visibility="hidden"}))}_onContextMenu(event){event.preventDefault(!0),CoC7ContextMenu.closeAll();const target=event?.currentTarget;if(this.target=target,!target)return;const menuName=target.dataset?.contextMenu;if(menuName===this._menu.id){const wrapper=this.menu;if(wrapper.length>0){const subMenu=wrapper.find(".sub-menu");let left=event.clientX,top=event.clientY;const menuHeight=wrapper.outerHeight(),menuWidth=wrapper.outerWidth();window.innerHeight<menuHeight+top&&(top-=menuHeight),window.innerWidth<menuWidth+left&&(left=window.innerWidth-menuWidth),subMenu.length>0&&(window.innerWidth<menuWidth+left+subMenu.outerWidth()?subMenu.css({right:menuWidth-5+"px",left:""}):subMenu.css({left:menuWidth-5+"px",right:""})),wrapper.css({left:`${left}px`,top:`${top}px`,visibility:"visible"})}}}static canSee(visibility){switch(visibility.toLowerCase()){case"gm":return game.user.isGM;case"trusted":return game.user.isTrusted;default:return!0}}static CreateMenu(menu){const classes="string"==typeof menu.classes?[menu.classes]:menu.classes;classes.push("context-menu-wrapper");const wrapper=$("<div></div>");if(wrapper.addClass(menu.id),classes.forEach((c=>wrapper.addClass(c))),menu.section)menu.section.forEach((s=>{const section=CoC7ContextMenu.CreateSection(s,{multi:!0});section&&wrapper.append(section)}));else{const section=CoC7ContextMenu.CreateSection(menu);section&&wrapper.append(section)}return wrapper}static CreateSection(s,{multi=!1,subMenu=!1}={}){if(!s.items)return null;if(s.visibility&&!CoC7ContextMenu.canSee(s.visibility))return null;const classes=s.classes?"string"==typeof s.classes?[s.classes]:s.classes:[];multi&&classes.push("menu-section"),subMenu&&classes.push("sub-menu");const section=$("<ul></ul>");return classes.forEach((c=>section.addClass(c))),s.items.forEach((i=>{const li=$("<li></li>");if(li.addClass("menu-item"),i.action&&(li.addClass("menu-action"),li.attr("data-action",i.action)),"string"==typeof i.label?li.append(`<span>${i.label}</span>`):(i.label.icon&&li.append(`<i class="${i.label.icon}"></i>`),i.label.text&&li.append(`<span>${i.label.text}</span>`)),i.subMenu){li.addClass("sub-menu-button"),li.append('<i class="fas fa-caret-right"></i>');const sub=CoC7ContextMenu.CreateSection(i.subMenu,{subMenu:!0});sub&&li.append(sub)}section.append(li)})),section}}class CoC7ActorSheet extends ActorSheet{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=await super.getData();if(sheetData.showHiddenDevMenu=game.settings.get("CoC7","hiddendevmenu"),sheetData.canDragToken=!!this.token&&game.user.isGM,sheetData.linkedActor=!0===this.actor.prototypeToken?.actorLink,sheetData.isToken=this.actor.isToken,sheetData.itemsByType={},sheetData.skills={},sheetData.combatSkills={},sheetData.weapons={},sheetData.rangeWpn=[],sheetData.meleeWpn=[],sheetData.actorFlags={},sheetData.effects="character"===this.actor.type?CoC7ActiveEffect.prepareActiveEffectCategories(this.actor.effects):CoC7ActiveEffect.prepareNPCActiveEffectCategories(this.actor.effects),sheetData.permissionLimited=!game.user.isGM&&(this.actor.ownership[game.user.id]??this.actor.ownership.default)===CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED,sheetData.isKeeper=game.user.isGM,sheetData.allowUnlock="always"===game.settings.get("CoC7","playerUnlockSheetMode")||game.user.isGM||"creation"===game.settings.get("CoC7","playerUnlockSheetMode")&&game.settings.get("CoC7","charCreationEnabled"),"creation"===game.settings.get("CoC7","playerUnlockSheetMode")&&game.settings.get("CoC7","charCreationEnabled")&&(sheetData.data.system.flags.locked=!1),"vehicle"!==this.actor.type&&(sheetData.data.system.characteristics||(sheetData.data.system.characteristics={str:{value:null,short:"CHARAC.STR",label:"CHARAC.Strength",formula:null},con:{value:null,short:"CHARAC.CON",label:"CHARAC.Constitution",formula:null},siz:{value:null,short:"CHARAC.SIZ",label:"CHARAC.Size",formula:null},dex:{value:null,short:"CHARAC.DEX",label:"CHARAC.Dexterity",formula:null},app:{value:null,short:"CHARAC.APP",label:"CHARAC.Appearance",formula:null},int:{value:null,short:"CHARAC.INT",label:"CHARAC.Intelligence",formula:null},pow:{value:null,short:"CHARAC.POW",label:"CHARAC.Power",formula:null},edu:{value:null,short:"CHARAC.EDU",label:"CHARAC.Education",formula:null}}),sheetData.data.system.attribs||(sheetData.data.system.attribs={hp:{value:null,max:null,short:"HP",label:"Hit points",auto:!0},mp:{value:null,max:null,short:"HP",label:"Magic points",auto:!0},lck:{value:null,short:"LCK",label:"Luck"},san:{value:null,max:99,short:"SAN",label:"Sanity",auto:!0},mov:{value:null,short:"MOV",label:"Movement rate",auto:!0},db:{value:null,short:"DB",label:"Damage bonus",auto:!0},build:{value:null,short:"BLD",label:"Build",auto:!0},armor:{value:null,auto:!1}}),sheetData.data.system.biography||(sheetData.data.system.biography={personalDescription:{type:"string",value:""}}),sheetData.data.system.infos||(sheetData.data.system.infos={occupation:"",age:"",sex:"",residence:"",birthplace:"",archetype:"",organization:"",playername:""}),sheetData.data.system.flags||(sheetData.data.system.flags={locked:!0,manualCredit:!1}),sheetData.data.system.credit||(sheetData.data.system.credit={monetarySymbol:null,multiplier:null,spent:null,assetsDetails:null}),sheetData.data.system.development||(sheetData.data.system.development={personal:null,occupation:null,archetype:null}),sheetData.data.system.biography||(sheetData.data.system.biography=[]),sheetData.pulpRuleArchetype=game.settings.get("CoC7","pulpRuleArchetype"),sheetData.pulpRuleOrganization=game.settings.get("CoC7","pulpRuleOrganization")),sheetData.isDead=this.actor.dead,sheetData.isDying=this.actor.dying,sheetData.items){for(const item of sheetData.items){if("skill"===item.type)if(item.system.properties.special&&(item.system.properties.fighting&&(item.system.specialization=game.i18n.localize("CoC7.FightingSpecializationName")),item.system.properties.firearm&&(item.system.specialization=game.i18n.localize("CoC7.FirearmSpecializationName"))),"character"!==this.actor.type){if(isNaN(Number(item.system.value))){let value=null;const parsed={};for(const[key,value]of Object.entries(COC7.formula.actorsheet))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=foundry.utils.getProperty(this,value.substring(5)));try{value=(await new Roll(item.system.value,parsed).evaluate({async:!0})).total}catch(err){console.warn(game.i18n.format("CoC7.ErrorUnableToParseSkillFormula",{value:item.system.value,name:item.name})),value=null}if(value){item.system.value=value;const itemToUpdate=this.actor.items.get(item._id);console.info(`[COC7] (Actor:${this.name}) Evaluating skill ${item.name}:${item.system.value} to ${value}`),await itemToUpdate.update({"system.value":value})}}const skill=this.actor.items.get(item._id),{base,rawValue,value}=skill.system;item.system.rawValue=rawValue||value||base,item.system.value=value||base}else{const skill=this.actor.items.get(item._id);if(item.system.base=await skill.asyncBase(),item.system.value){let updatedExp=(item.system.adjustments?.experience?parseInt(item.system.adjustments.experience):0)+parseInt(item.system.value)-skill.value;updatedExp<=0&&(updatedExp=null),console.info(`[COC7] Updating skill ${skill.name} experience. Experience missing: ${updatedExp}`),await this.actor.updateEmbeddedDocuments("Item",[{_id:item._id,"system.adjustments.experience":updatedExp,"system.value":null}]),item.system.adjustments||(item.system.adjustments={}),item.system.adjustments.experience=updatedExp,item.system.rawValue=skill.rawValue,item.system.value=skill.value}else item.system.value=skill.value,item.system.rawValue=skill.rawValue}let list=sheetData.itemsByType[item.type];list||(list=[],sheetData.itemsByType[item.type]=list),list.push(item)}for(const itemType in sheetData.itemsByType)sheetData.itemsByType[itemType].sort(CoC7Utilities.sortByNameKey);sheetData.skills=sheetData.items.filter((item=>"skill"===item.type)).sort(CoC7Utilities.sortByNameKey),sheetData.meleeSkills=sheetData.skills.filter((skill=>!0===skill.system.properties.combat&&!0===skill.system.properties.fighting)),sheetData.rangeSkills=sheetData.skills.filter((skill=>!0===skill.system.properties.combat&&!0===skill.system.properties.firearm));const cbtSkills=sheetData.skills.filter((skill=>!0===skill.system.properties.combat));if(cbtSkills)for(const skill of cbtSkills)sheetData.combatSkills[skill._id]=skill;const weapons=sheetData.itemsByType.weapon;if(weapons)for(const weapon of weapons){if(weapon.usesAlternateSkill=!0===weapon.system.properties.auto||!0===weapon.system.properties.brst,weapon.system.ammo||(weapon.system.ammo=0),weapon.skillSet=!0,""===weapon.system.skill.main.id)weapon.skillSet=!1;else{if(sheetData.combatSkills[weapon.system.skill.main.id]){const skill=this.actor.items.get(weapon.system.skill.main.id);weapon.system.skill.main.name=skill.system.skillName,weapon.system.skill.main.value=skill.value}else weapon.skillSet=!1;if(""!==weapon.system.skill.alternativ.id&&sheetData.combatSkills[weapon.system.skill.alternativ.id]){const skill=this.actor.items.get(weapon.system.skill.alternativ.id);weapon.system.skill.alternativ.name=skill.system.skillName,weapon.system.skill.alternativ.value=skill.value}}weapon.system._properties=[];for(const[key,value]of Object.entries(COC7.weaponProperties)){const property={};property.id=key,property.name=value,property.value=!0===weapon.system.properties[key],weapon.system._properties.push(property)}sheetData.weapons[weapon._id]=weapon,weapon.system.properties.rngd?sheetData.rangeWpn.push(weapon):sheetData.meleeWpn.push(weapon)}const token=this.token;if(sheetData.tokenId=token?`${token.parent?.id?token.parent.id:"TOKEN"}.${token.id}`:null,sheetData.hasEmptyValueWithFormula=!1,sheetData.data.system.characteristics)for(const characteristic of Object.values(sheetData.data.system.characteristics))characteristic.value||(characteristic.editable=!0),characteristic.hard=Math.floor(characteristic.value/2),characteristic.extreme=Math.floor(characteristic.value/5),characteristic.value||characteristic.formula?characteristic.display=!0:characteristic.display=!1,!characteristic.value&&characteristic.formula&&(characteristic.hasEmptyValueWithFormula=!0),sheetData.hasEmptyValueWithFormula=sheetData.hasEmptyValueWithFormula||characteristic.hasEmptyValueWithFormula}if(["vehicle","container"].includes(this.actor.type))sheetData.data.system.attribs.hp.auto=!1,sheetData.data.system.attribs.mp.auto=!1,sheetData.data.system.attribs.san.auto=!1,sheetData.data.system.attribs.mov.auto=!1,sheetData.data.system.attribs.db.auto=!1,sheetData.data.system.attribs.build.auto=!1;else{const auto=this.actor.checkUndefinedAuto();sheetData.data.system=foundry.utils.mergeObject(sheetData.data.system,auto)}return sheetData.data.system.attribs.mp.value<0&&(sheetData.data.system.attribs.mp.value=null),sheetData.data.system.attribs.san.value<0&&(sheetData.data.system.attribs.san.value=null),["vehicle"].includes(this.actor.type)||sheetData.data.system.biography instanceof Array&&sheetData.data.system.biography.length&&(sheetData.data.system.biography[0].isFirst=!0,sheetData.data.system.biography[sheetData.data.system.biography.length-1].isLast=!0),sheetData.showInventoryItems=!1,sheetData.showInventoryBooks=!1,sheetData.showInventorySpells=!1,sheetData.showInventoryTalents=!1,sheetData.showInventoryStatuses=!1,sheetData.showInventoryWeapons=!1,sheetData.hasConditions=this.actor.effects.size>0||void 0!==this.actor.system.conditions&&Object.keys(this.actor.system.conditions).filter((condition=>this.actor.system.conditions[condition].value)).length>0,sheetData}get tokenKey(){throw ui.notifications.error("DEPRECATED SHOULD NOT HAPPEN!"),new Error("base.js get tokenKey(): DEPRECATED SHOULD NOT HAPPEN!")}onCloseSheet(){}activateListeners(html){if(super.activateListeners(html),html.find(".section-header").click(this._onSectionHeader.bind(this)),html.find(".items-header").click(this._onItemHeader.bind(this)),html.find(".inventory-header").click(this._onInventoryHeader.bind(this)),html.find(".read-only").dblclick(this._toggleReadOnly.bind(this)),html.find(".add-ammo").click(this._onAddAmo.bind(this)),html.find(".reload-weapon").click((event=>this._onReloadWeapon(event))),html.find(".reload-weapon").on("contextmenu",(event=>this._onReloadWeapon(event))),this.actor.isOwner&&!this.actor.compendium?.locked&&(html.find(".lock").click(this._onLockClicked.bind(this)),html.find(".flag").click(this._onFlagClicked.bind(this)),html.find(".formula").click(this._onFormulaClicked.bind(this)),html.find(".auto-toggle").click(this._onAutoToggle.bind(this))),this.actor.isOwner&&void 0===this.actor.compendium){if(game.settings.get("CoC7","useContextMenus")){this.menus||(this.menus=[]);const rollMenu={id:"skill-roll",classes:"roll-menu",section:[{classes:"main",items:[{action:"roll",label:"Roll"},{action:"opposed-roll",label:"Opposed roll"},{action:"combined-roll",label:"Combined roll"}]},{classes:"keeper",visibility:"gm",items:[{label:{icon:"fas fa-link",text:"Link"},subMenu:{items:[{action:"link-tool",label:"Open in link tool"},{action:"send-chat",label:"Send to chat"},{action:"copy-to-clipboard",label:"Copy to clip-board"}]}},{action:"request-roll",label:"Request roll"}]}]},sanMenu={id:"san-roll",classes:"roll-menu",section:[{classes:"main",items:[{action:"encounter",label:"Encounter"},{action:"roll",label:"Roll"},{action:"opposed-roll",label:"Opposed roll"},{action:"combined-roll",label:"Combined roll"}]},{classes:"keeper",visibility:"trusted",items:[{action:"request-roll",label:"Request roll"},{label:{icon:"fas fa-link",text:"Link"},subMenu:{items:[{action:"link-tool",label:"Open in link tool"},{action:"send-chat",label:"Send to chat"},{action:"copy-to-clipboard",label:"Copy to clip-board"},{action:"link-encounter",label:"Encounter"}]}}]}]},rollContextMenu=new CoC7ContextMenu;rollContextMenu.bind(rollMenu,html,this._onContextMenuClick.bind(this)),this.menus.push(rollContextMenu);const sanContextMenu=new CoC7ContextMenu;sanContextMenu.bind(sanMenu,html,this._onContextMenuClick.bind(this)),this.menus.push(sanContextMenu)}else html.find(".characteristic-label").contextmenu(this._onOpposedRoll.bind(this)),html.find(".skill-name.rollable").contextmenu(this._onOpposedRoll.bind(this)),html.find(".attribute-label.rollable").contextmenu(this._onOpposedRoll.bind(this));html.find(".characteristic-label").click(this._onRollCharacteriticTest.bind(this)),html.find(".skill-name.rollable").click(this._onRollSkillTest.bind(this)),html.find(".skill-image").click(this._onRollSkillTest.bind(this)),html.find(".attribute-label.rollable").click(this._onRollAttribTest.bind(this)),html.find(".token-drag-handle").on("dragstart",this._onDragTokenStart.bind(this)),html.find(".characteristic-label").on("dragstart",(event=>this._onDragCharacteristic(event))),html.find(".attribute-label").on("dragstart",(event=>this._onDragAttribute(event))),html.find(".san-check").on("dragstart",(event=>this._onDragSanCheck(event))),html.find(".weapon-name.rollable").contextmenu(this._onOpposedRoll.bind(this)),html.find(".roll-characteritics").click(this._onRollCharacteriticsValue.bind(this)),html.find(".average-characteritics").click(this._onAverageCharacteriticsValue.bind(this)),html.find(".toggle-switch").click(this._onToggle.bind(this)),(game.user.isGM||game.settings.get("CoC7","statusPlayerEditable"))&&(html.find(".reset-counter").click(this._onResetCounter.bind(this)),html.find(".condition-monitor").click(this._onConditionToggle.bind(this)),html.find(".is-dying").click(this.heal.bind(this)),html.find(".is-dead").click(this.revive.bind(this))),html.find(".dying-check").click(this.checkForDeath.bind(this)),html.find(".item .item-image").click((event=>this._onItemRoll(event))),html.find(".weapon-name.rollable").click((event=>this._onWeaponRoll(event))),html.find(".item-name.effect-name").click((event=>this._onEffect(event))),html.find(".weapon-skill.rollable").click((async event=>this._onWeaponSkillRoll(event))),html.on("click",".weapon-damage",this._onWeaponDamage.bind(this));const wheelInputs=html.find(".attribute-value");for(const wheelInput of wheelInputs)wheelInput.addEventListener("wheel",(event=>this._onWheel(event)),{passive:!0})}this.options.editable&&(html.find(".show-detail").click((event=>this._onItemSummary(event))),html.find(".item-popup").click(this._onItemPopup.bind(this)),html.find(".show-detail").dblclick((event=>this._onRenderItemSheet(event))),html.find(".item-edit").click((event=>this._onRenderItemSheet(event))),html.find(".item-delete").click((async ev=>{const li=$(ev.currentTarget).parents(".item"),itemToDelete=this.actor.items.get(li.data("itemId"),{strict:!0});await itemToDelete.delete(),li.slideUp(200,(()=>this.render(!1)))})),html.find(".add-item").click((ev=>{switch(ev.stopPropagation(),ev.currentTarget.dataset.type){case"book":this.actor.createEmptyBook(ev);break;case"item":this.actor.createEmptyItem(ev);break;case"skill":this.actor.createEmptySkill(ev);break;case"spell":this.actor.createEmptySpell(ev);break;case"weapon":{const properties={};ev.currentTarget.dataset.melee?properties.melee=!0:ev.currentTarget.dataset.rngd&&(properties.rngd=!0),this.actor.createEmptyWeapon(ev,properties)}}})),html.find(".item-trade").click(this._onTradeItem.bind(this)),html.find(".add-new-section").click((()=>{this.actor.createBioSection(),this.render()})),html.find(".delete-section").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.deleteBioSection(index)})),html.find(".move-section-up").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.moveBioSectionUp(index)})),html.find(".move-section-down").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.moveBioSectionDown(index)})),html.find(".development-flag").dblclick((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("developement")})),html.find(".occupation-skill-flag.clickable").click((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("occupation")})),html.find(".archetype-skill-flag.clickable").click((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("archetype")})),html.find(".skill-developement").click((event=>{this.actor.developementPhase(event.shiftKey)})),html.find(".luck-development").click((event=>{event.detail&&1!==event.detail||this.actor.developLuck(event.shiftKey)})),html.find(".clear_conditions").click((event=>{if(void 0!==this.actor.system.conditions){const disable={};for(const condition in this.actor.system.conditions)void 0!==this.actor.system.conditions[condition].value&&!0===this.actor.system.conditions[condition].value&&(disable[`system.conditions.${condition}.value`]=!1);Object.keys(disable).length>0&&this.actor.update(disable)}const effects=this.actor.effects.map((effect=>effect.id));effects.length>0&&this.actor.deleteEmbeddedDocuments("ActiveEffect",effects)})),html.find(".test-trigger").click((async event=>{if(!game.settings.get("CoC7","hiddendevmenu"))return null})),html.find(".skill-name.rollable").mouseenter(this.toolTipSkillEnter.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".characteristic-label").mouseenter(this.toolTipCharacteristicEnter.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".attribute-label.rollable").mouseenter(this.toolTipAttributeEnter.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".auto-toggle").mouseenter(this.toolTipAutoEnter.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".item-control.development-flag").mouseenter(this.toolTipFlagForDevelopment.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".effect-control").click((ev=>CoC7ActiveEffect.onManageActiveEffect(ev,this.actor))))}toolTipSkillEnter(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));if(delay>0){const sheet=this;game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const isCombat=game.CoC7Tooltips.ToolTipHover.classList?.contains("combat"),item=game.CoC7Tooltips.ToolTipHover.closest(".item");if(void 0!==item){const skillId=item.dataset.skillId,skill=sheet.actor.items.get(skillId);let toolTip=game.i18n.format(isCombat?"CoC7.ToolTipCombat":"CoC7.ToolTipSkill",{skill:skill.name,regular:skill.value,hard:Math.floor(skill.value/2),extreme:Math.floor(skill.value/5)});game.user.isGM&&(toolTip+=game.i18n.format("CoC7.ToolTipKeeperSkill",{other:game.settings.get("CoC7","stanbyGMRolls")&&sheet.actor.hasPlayerOwner?game.i18n.format("CoC7.ToolTipKeeperStandbySkill",{name:sheet.actor.name}):""})),game.CoC7Tooltips.displayToolTip(toolTip)}}}),delay)}}toolTipCharacteristicEnter(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));if(delay>0){const sheet=this;game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const char=game.CoC7Tooltips.ToolTipHover.closest(".char-box");if(void 0!==char&&char){const charId=char.dataset.characteristic,characteristic=sheet.actor.characteristics[charId];let toolTip=game.i18n.format("CoC7.ToolTipSkill",{skill:characteristic.label,regular:characteristic.value??0,hard:characteristic.hard??0,extreme:characteristic.extreme??0});game.user.isGM&&(toolTip+=game.i18n.format("CoC7.ToolTipKeeperSkill",{other:game.settings.get("CoC7","stanbyGMRolls")&&sheet.actor.hasPlayerOwner?game.i18n.format("CoC7.ToolTipKeeperStandbySkill",{name:sheet.actor.name}):""})),game.CoC7Tooltips.displayToolTip(toolTip)}}}),delay)}}toolTipAttributeEnter(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));if(delay>0){const sheet=this;game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const attrib=game.CoC7Tooltips.ToolTipHover.closest(".attribute");if(void 0!==attrib){const attributeId=attrib.dataset.attrib;let toolTip="";const attributes=sheet.actor.system.attribs[attributeId];switch(attributeId){case"lck":toolTip=game.i18n.format("CoC7.ToolTipSkill",{skill:attributes.label,regular:attributes.value??0,hard:Math.floor((attributes.value??0)/2),extreme:Math.floor((attributes.value??0)/5)}),game.user.isGM&&(toolTip+=game.i18n.format("CoC7.ToolTipKeeperSkill",{other:game.settings.get("CoC7","stanbyGMRolls")&&sheet.actor.hasPlayerOwner?game.i18n.format("CoC7.ToolTipKeeperStandbySkill",{name:sheet.actor.name}):""})),game.CoC7Tooltips.displayToolTip(toolTip);break;case"db":toolTip=game.i18n.localize("CoC7.ToolTipDB"),game.CoC7Tooltips.displayToolTip(toolTip);break;case"san":toolTip=game.i18n.format("CoC7.ToolTipSanity",{skill:"Sanity",regular:attributes.value??0,hard:Math.floor((attributes.value??0)/2),extreme:Math.floor((attributes.value??0)/5)}),game.user.isGM&&(toolTip+=game.i18n.format("CoC7.ToolTipKeeperSkill",{other:game.i18n.localize("CoC7.ToolTipKeeperSanity")+(game.settings.get("CoC7","stanbyGMRolls")&&sheet.actor.hasPlayerOwner?game.i18n.format("CoC7.ToolTipKeeperStandbySkill",{name:sheet.actor.name}):"")})),game.CoC7Tooltips.displayToolTip(toolTip)}}}}),delay)}}toolTipAutoEnter(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));delay>0&&(game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const toolTip=game.i18n.localize("CoC7.ToolTipAutoToggle");game.CoC7Tooltips.displayToolTip(toolTip)}}),delay))}toolTipFlagForDevelopment(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));if(delay>0){const sheet=this;game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const item=game.CoC7Tooltips.ToolTipHover.closest(".item");if(void 0!==item){const skillId=item.dataset.skillId,skill=sheet.actor.items.get(skillId),toolTip=game.i18n.format("CoC7.ToolTipSkillFlagToggle",{status:game.i18n.localize(skill.system.flags.developement?"CoC7.ToolTipSkillFlagged":"CoC7.ToolTipSkillUnflagged")});game.CoC7Tooltips.displayToolTip(toolTip)}}}),delay)}}_onContextMenuClick(event,target){const targetType=target.dataset?.targetType,rollOptions={preventStandby:!0,fastForward:!1,actor:this.actor};switch(targetType){case"skill":rollOptions.rollType=CoC7ChatMessage.ROLL_TYPE_SKILL,rollOptions.skillId=target.closest(".item")?.dataset.skillId;break;case"characteristic":rollOptions.rollType=CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,rollOptions.characteristic=target.closest(".char-box").dataset.characteristic;break;case"attribute":rollOptions.rollType=CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE,rollOptions.attribute=target.closest(".attribute").dataset.attrib}switch(event.currentTarget.dataset.action){case"roll":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NORMAL;break;case"opposed-roll":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_OPPOSED;break;case"combined-roll":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_COMBINED;break;case"request-roll":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NORMAL,rollOptions.preventStandby=!1;break;case"link-tool":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.openLinkTool=!0;break;case"send-chat":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.sendToChat=!0;break;case"copy-to-clipboard":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.sendToClipboard=!0;break;case"link-encounter":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.createEncounter=!0;break;case"encounter":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_SAN_CHECK,rollOptions.rollType=CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE,rollOptions.fastForward=!0}CoC7ChatMessage.trigger(rollOptions)}_onRenderItemSheet(event){const li=$(event.currentTarget).parents(".item");this.actor.items.get(li.data("itemId")).sheet.render(!0)}async _onTradeItem(event){const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("itemId"));let content="<p>"+game.i18n.localize("CoC7.MessageSelectUserToGiveTo");const message={actorFrom:this.actor.id,scene:null,actorTo:this.actor.id,item:item.id};this.token?.actor&&(message.actorFrom=this.token.id,message.scene=this.token.parent.id);const actors=game.actors.filter((e=>{if(!["character","npc","creature","container"].includes(e.type))return!1;if(this.actor.id===e.id)return!1;let visible=!1;for(const[k,v]of Object.entries(e.ownership))"default"!==k&&k!==game.user.id||(visible=visible||v!==CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE);return visible}));content+='<form id="selectform"><select name="user">';for(const actor of actors)content=content+'<option value="'+actor.id+'">'+actor.name+"</option>";content+="</select></form></p>",message.actorTo=await new Promise((resolve=>{new Dialog({title:game.i18n.localize("CoC7.MessageTitleSelectUserToGiveTo"),content,buttons:{confirm:{label:game.i18n.localize("CoC7.Validate"),callback:html=>{const formData=new FormData(html[0].querySelector("#selectform"));for(const[name,value]of formData)if("user"===name)return resolve(value)}}},default:"confirm",close:()=>{}}).render(!0)})),await game.CoC7socket.executeAsGM("gmtradeitemto",message)}_onDragStart(event){if(super._onDragStart(event),this.token){const dragData=JSON.parse(event.dataTransfer.getData("text/plain"));dragData.tokenUuid=this.token.uuid,dragData.tokenId=this.token.id,dragData.sceneId=this.token.parent.id,event.dataTransfer.setData("text/plain",JSON.stringify(dragData))}}_onDragCharacteristic(event){const box=event.currentTarget.parentElement,data={CoC7Type:"link",linkType:"characteristic",check:"check",type:"CoC7Link",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,name:box.dataset.characteristic,icon:null,document:{type:this.document.type,uuid:this.document.uuid}};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}_onDragAttribute(event){const box=event.currentTarget.parentElement,data={CoC7Type:"link",linkType:"attribute",check:"check",type:"CoC7Link",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,name:box.dataset.attrib,icon:null,document:{type:this.document.type,uuid:this.document.uuid}};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}_onDragSanCheck(event){const sanMin=event.currentTarget.querySelector(".san-value.pass"),sanMax=event.currentTarget.querySelector(".san-value.failed"),data={CoC7Type:"link",linkType:"coc7-link",check:"sanloss",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,sanMin:sanMin.innerText,sanMax:sanMax.innerText,icon:null,document:{type:this.document.type,uuid:this.document.uuid}};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}async _onDrop(event){const dataString=event.dataTransfer.getData("text/plain");if(""===dataString)return!1;const data=JSON.parse(dataString);"CoC7Link"===data.type&&data.check===CoC7Link.CHECK_TYPE.EFFECT&&CoC7Link._onLinkActorClick(this.actor,data),await super._onDrop(event)}async _onConditionToggle(event){event.preventDefault(),event.currentTarget.dataset.condition&&await this.actor.toggleCondition(event.currentTarget.dataset.condition)}async revive(){game.user.isGM&&this.actor.unsetCondition(COC7.status.dead)}async heal(){game.user.isGM&&this.actor.unsetCondition(COC7.status.dying)}async checkForDeath(event){const conCheck=new CoC7ConCheck(this.actor.isToken?this.actor.tokenKey:this.actor.id);conCheck.stayAlive=!0,conCheck.toMessage(event.shiftKey)}async _onDragTokenStart(event){const data={type:"Token",uuid:this.token.uuid};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}async _onResetCounter(event){event.preventDefault(),await this.actor.resetDailySanity()}async _onAutoToggle(event){if(event.currentTarget.closest(".attribute")){const attrib=event.currentTarget.closest(".attribute").dataset.attrib;this.actor.toggleAttribAuto(attrib)}}async _onToggle(event){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);weapon&&weapon.toggleProperty(event.currentTarget.dataset.property,isCtrlKey(event))}async _onRollCharacteriticsValue(){await this.actor.rollCharacteristicsValue()}async _onAverageCharacteriticsValue(){this.actor.averageCharacteristicsValue()}async _onLockClicked(event){event.preventDefault();const isLocked=this.actor.locked;this.actor.locked=!isLocked,Hooks.call("actorLockClickedCoC7",[!isLocked])}async _onFlagClicked(event){event.preventDefault();const flagName=event.currentTarget.dataset.flag;this.actor.toggleActorFlag(flagName)}async _onFormulaClicked(event){event.preventDefault(),this.actor.toggleActorFlag("displayFormula")}async _onWheel(event){let value=parseInt(event.currentTarget.value)||null;switch(event.deltaY>0&&(value=0===value?0:value-1),event.deltaY<0&&(value+=1),event.currentTarget.name){case"system.attribs.hp.value":case"system.attribs.build.current":this.actor.setHp(value);break;case"system.attribs.mp.value":this.actor.setMp(value);break;case"system.attribs.san.value":this.actor.setSan(value);break;case"system.attribs.lck.value":this.actor.setLuck(value)}}_toggleReadOnly(event){event.currentTarget.readOnly=!event.currentTarget.readOnly,event.currentTarget.classList.toggle("read-only")}async _onItemSummary(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("item-id")),chatData=await item.getChatData({secrets:this.actor.isOwner});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>{summary.remove(),li.toggleClass("expanded")}))}else{const div=$('<div class="item-summary"></div>'),labels=$('<div class="item-labels"></div>');for(const p of chatData.labels)labels.append(`<div class="item-label"><span class="label-name">${p.name} :</span><span class="label-value">${p.value}</span></div>`);if(div.append(labels),div.append($(`<div class="item-description">${chatData.description.value}</div>`)),item.system.properties?.spcl){const specialDiv=$(`<div class="item-special">${chatData.description.special}</div>`);div.append(specialDiv)}const props=$('<div class="item-properties"></div>');for(const p of chatData.properties)props.append(`<div class="tag item-property">${game.i18n.localize(p)}</div>`);div.append(props),li.append(div.hide()),div.slideDown(200,(()=>li.toggleClass("expanded")))}}async _onSectionHeader(event){event.preventDefault();const section=event.currentTarget.closest("section"),pannelClass=event.currentTarget.dataset.pannel;if(void 0===pannelClass)return;const pannel=$(section).find(`.pannel.${pannelClass}`);pannel.hasClass("expanded")?pannel.slideUp(200,(()=>pannel.toggleClass("expanded"))):pannel.slideDown(200,(()=>pannel.toggleClass("expanded")));const camelFlag=chatHelper.hyphenToCamelCase(`data.pannel.${pannelClass}.expanded`);this.actor.update({[camelFlag]:!pannel.hasClass("expanded")},{render:!1})}_onInventoryHeader(event){event.preventDefault();const li=$(event.currentTarget).siblings("li");li.is(":visible")?li.slideUp(200):li.slideDown(200)}_onItemHeader(event){event.preventDefault();const ol=$(event.currentTarget).next("ol");ol.is(":visible")?ol.slideUp(200):ol.slideDown(200)}async _onItemPopup(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("item-id"));CoC7ActorSheet.popupSkill(item)}static async popupSkill(skill){skill.system.description.enrichedValue=await TextEditor.enrichHTML(skill.system.description.value,{async:!0});new Dialog({title:game.i18n.localize("CoC7.SkillDetailsWindow"),content:skill,buttons:{},close:()=>{}},{classes:["coc7","sheet","skill"],width:520,height:480,scrollY:[".item-description"],template:"systems/CoC7/templates/apps/skill-details.html"}).render(!0)}async _onItemRoll(event){event.preventDefault()}async _onEffect(event){event.preventDefault();const effectId=event.currentTarget.closest("li").dataset.effectId,effect=this.actor.effects.get(effectId);isCtrlKey(event)&&game.user.isGM&&CoC7ContentLinkDialog.create({type:"CoC7Link",check:CoC7Link.CHECK_TYPE.EFFECT,object:effect})}async _onWeaponRoll(event){event.preventDefault();const itemId=event.currentTarget.closest("li").dataset.itemId,fastForward=event.shiftKey,weapon=this.actor.items.get(itemId);let actorKey;if(actorKey=this.token?this.actor.isToken&&game.actors.tokens[this.token.id]?`TOKEN.${this.token.id}`:`${this.token.parent.id}.${this.token.id}`:this.actor.id,isCtrlKey(event)&&game.user.isGM){const linkData={check:CoC7Link.CHECK_TYPE.ITEM,name:weapon.name};CoC7ContentLinkDialog.create(linkData,{actors:[this.actor]})}else{let proceedWithoutTarget;if(game.user.targets.size<=0&&(proceedWithoutTarget=await new Promise((resolve=>{const data={title:" ",content:game.i18n.format("CoC7.NoTargetSelected",{weapon:weapon.name}),buttons:{cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel"),callback:()=>resolve(!1)},proceed:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Proceed"),callback:()=>resolve(!0)}},default:"cancel",classes:["coc7","dialog"]};new Dialog(data).render(!0)}))),game.user.targets.size>0||proceedWithoutTarget){if(!weapon.system.properties.rngd){game.user.targets.size>1&&ui.notifications.warn(game.i18n.localize("CoC7.WarnTooManyTarget"));new CoC7MeleeInitiator(actorKey,itemId,fastForward).createChatCard()}if(weapon.system.properties.rngd){new CoC7RangeInitiator(actorKey,itemId,fastForward).createChatCard()}}}}async _onReloadWeapon(event){const itemId=event.currentTarget.closest(".item")?event.currentTarget.closest(".item").dataset.itemId:null;if(!itemId)return;const weapon=this.actor.items.get(itemId);0===event.button?event.shiftKey?await weapon.reload():await weapon.addBullet():2===event.button&&(event.shiftKey?await weapon.setBullets(0):await weapon.shootBullets(1))}async _onAddAmo(event){const itemId=event.currentTarget.closest(".item")?event.currentTarget.closest(".item").dataset.itemId:null;if(!itemId)return;const weapon=this.actor.items.get(itemId);await weapon.addBullet()}async _onWeaponSkillRoll(event){event.preventDefault();const skillId=event.currentTarget.dataset.skillId,actorId=event.currentTarget.closest("form").dataset.actorId,tokenKey=event.currentTarget.closest("form").dataset.tokenId,itemId=event.currentTarget.closest("li")?event.currentTarget.closest("li").dataset.itemId:null,check=new CoC7Check;if(!event.shiftKey){const usage=await RollDialog.create();usage&&(check.diceModifier=usage.get("bonusDice"),check.difficulty=usage.get("difficulty"),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=tokenKey||actorId,check.skill=skillId,check.item=itemId,await check.roll(),check.toMessage()}async _onWeaponDamage(event){event.preventDefault();const itemId=event.currentTarget.closest(".weapon").dataset.itemId,range=event.currentTarget.closest(".weapon-damage").dataset.range,damageChatCard=new DamageCard({fastForward:event.shiftKey,range});damageChatCard.actorKey=this.actor.tokenKey,damageChatCard.itemId=itemId,damageChatCard.updateChatCard()}async _onOpposedRoll(event){if(event.preventDefault(),"db"===event.currentTarget.parentElement.dataset.attrib)return;const data={rollType:CoC7ChatMessage.ROLL_TYPE_SKILL,cardType:CoC7ChatMessage.CARD_TYPE_OPPOSED,event,actor:this.actor};event.currentTarget.classList.contains("characteristic-label")?data.rollType=CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC:event.currentTarget.classList.contains("attribute-label")&&(data.rollType=CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE),event.altKey&&(data.cardType=CoC7ChatMessage.CARD_TYPE_COMBINED),CoC7ChatMessage.trigger(data)}async _onRollCharacteriticTest(event){event.preventDefault(),event.currentTarget.classList.contains("flagged4dev")||(game.settings.get("CoC7","useContextMenus")?CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,preventStandby:!0,fastForward:!0,characteristic:event.currentTarget.closest(".char-box").dataset.characteristic,actor:this.actor}):CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,event,actor:this.actor}))}async _onRollAttribTest(event){event.preventDefault();const attrib=event.currentTarget.parentElement.dataset.attrib;if("db"!==attrib)game.settings.get("CoC7","useContextMenus")?CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,preventStandby:!0,fastForward:!0,attribute:event.currentTarget.closest(".attribute").dataset.attrib,actor:this.actor}):CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE,cardType:event.altKey&&"san"===attrib?CoC7ChatMessage.CARD_TYPE_SAN_CHECK:CoC7ChatMessage.CARD_TYPE_NORMAL,event,actor:this.actor});else if(!/^-{0,1}\d+$/.test(event.currentTarget.parentElement.dataset.rollFormula)){const r=new Roll(event.currentTarget.parentElement.dataset.rollFormula);await r.roll({async:!0}),isNaN(r.total)||void 0===r.total||r.toMessage({speaker:ChatMessage.getSpeaker(),flavor:game.i18n.localize("CoC7.BonusDamageRoll")})}}_onRollSkillTest(event){event.preventDefault(),event.currentTarget.classList.contains("flagged4dev")||(game.settings.get("CoC7","useContextMenus")?CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_SKILL,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,preventStandby:!0,fastForward:!0,skillId:event?.currentTarget.closest(".item")?.dataset.skillId,actor:this.actor}):CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_SKILL,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,event,actor:this.actor}))}async _updateObject(event,formData){const overrides=foundry.utils.flattenObject(this.actor.overrides),name=event?.currentTarget?.name;if(name&&overrides&&overrides[name]&&ui.notifications.warn(game.i18n.format("CoC7.EffectAppliedCantOverride",{name})),event.currentTarget&&event.currentTarget.classList){if(event.currentTarget.classList.contains("skill-adjustment")){const item=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);if(item){const value=event.currentTarget.value?parseInt(event.currentTarget.value):null;if(event.currentTarget.value?isNaN(value)||await item.update({[event.currentTarget.name]:value}):await item.update({[event.currentTarget.name]:null}),game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.credit-rating")===item.name&&void 0!==this.actor.occupation?.system?.creditRating?.max){const creditValue=(item.value||0)-(item.system.adjustments?.experience||0);(creditValue>Number(this.actor.occupation.system.creditRating.max)||creditValue<Number(this.actor.occupation.system.creditRating.min))&&ui.notifications.warn(game.i18n.format("CoC7.CreditOutOfRange",{min:Number(this.actor.occupation.system.creditRating.min),max:Number(this.actor.occupation.system.creditRating.max)}))}}}if(event.currentTarget.classList.contains("attribute-value")){if("system.attribs.san.value"===event.currentTarget.name)return await this.actor.setSan(parseInt(event.currentTarget.value)),void this.render(!0);if("system.attribs.hp.value"===event.currentTarget.name)return await this.actor.setHp(parseInt(event.currentTarget.value)),void this.render(!0)}if(event.currentTarget.classList.contains("text-area"))return void this.actor.updateTextArea(event.currentTarget);if(event.currentTarget.classList.contains("bio-section-value")){const index=parseInt(event.currentTarget.closest(".bio-section").dataset.index);await this.actor.updateBioValue(index,event.currentTarget.value)}if(event.currentTarget.classList.contains("bio-section-title")){const index=parseInt(event.currentTarget.closest(".bio-section").dataset.index);this.actor.updateBioTitle(index,event.currentTarget.value)}if(event.currentTarget.classList.contains("npc-skill-score")){const skill=this.actor.items.get(event.currentTarget.closest(".item").dataset.skillId);skill&&await skill.updateValue(event.currentTarget.value)}if(event.currentTarget.classList.contains("skill-name")||event.currentTarget.classList.contains("item-name")){const item=this.actor.items.get(event.currentTarget.closest(".item").dataset.skillId);if(item){const data={};if(item.system.properties.special){const parts=CoC7Item.getNamePartsSpec(event.currentTarget.value,item.system.specialization);data.name=parts.name,data["system.skillName"]=parts.skillName,data["system.specialization"]=parts.specialization}else data["system.skillName"]=event.currentTarget.value,data.name=event.currentTarget.value;await item.update(data)}}if(event.currentTarget.classList.contains("characteristic-formula")&&0!==event.currentTarget.value.length){const r=new Roll(event.currentTarget.value);await r.roll({async:!0}),(isNaN(r.total)||void 0===r.total)&&(ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:event.currentTarget.value})),formData[event.currentTarget.name]=game.i18n.format("CoC7.ErrorInvalid"))}if(event.currentTarget.classList.contains("attribute-value")&&0!==event.currentTarget.value.length&&"db"===event.currentTarget.closest(".attribute").dataset.attrib){const r=new Roll(event.currentTarget.value);await r.roll({async:!0}),(isNaN(r.total)||void 0===r.total)&&(ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:event.currentTarget.value})),formData[event.currentTarget.name]=game.i18n.format("CoC7.ErrorInvalid"))}if(event.currentTarget.classList.contains("weapon-skill")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId),skill=this.actor.items.get(event.currentTarget.options[event.currentTarget.selectedIndex].value);if(weapon&&skill)switch(event.currentTarget.dataset.skill){case"main":await weapon.update({"system.skill.main.id":skill.id,"system.skill.main.name":skill.name});break;case"alternativ":await weapon.update({"system.skill.alternativ.id":skill.id,"system.skill.alternativ.name":skill.name})}}if(event.currentTarget.classList.contains("weapon-name")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);weapon&&await weapon.update({name:event.currentTarget.value})}if(event.currentTarget.classList.contains("damage-formula")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);if(weapon)if(0!==event.currentTarget.value.length){const r=new Roll(event.currentTarget.value);if(await r.roll({async:!0}),isNaN(r.total)||void 0===r.total)ui.notifications.error(game.i18n.format("CoC7.ErrorUnableToParseFormula",{value:event.currentTarget.value}));else switch(event.currentTarget.dataset.range){case"normal":await weapon.update({"system.range.normal.damage":event.currentTarget.value});break;case"long":await weapon.update({"system.range.long.damage":event.currentTarget.value});break;case"extreme":await weapon.update({"system.range.extreme.damage":event.currentTarget.value})}}else switch(event.currentTarget.dataset.range){case"normal":await weapon.update({"system.range.normal.damage":null});break;case"long":await weapon.update({"system.range.long.damage":null});break;case"extreme":await weapon.update({"system.range.extreme.damage":null})}}}return this.object.update(formData)}}class CoC7NPCSheet extends CoC7ActorSheet{async getData(){const sheetData=await super.getData();return sheetData.allowFormula=!0,sheetData.displayFormula=this.actor.getActorFlag("displayFormula")||!1,sheetData.hasSan=null!==sheetData.data.system.attribs.san.value,sheetData.hasMp=null!==sheetData.data.system.attribs.mp.value,sheetData.hasLuck=null!==sheetData.data.system.attribs.lck.value,sheetData.isCreature=!1,sheetData.showInventoryItems=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"item")||!sheetData.data.system.flags.locked,sheetData.showInventoryBooks=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"book")||!sheetData.data.system.flags.locked,sheetData.showInventorySpells=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"spell")||!sheetData.data.system.flags.locked,sheetData.showInventoryTalents=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"talent")||!sheetData.data.system.flags.locked&&game.settings.get("CoC7","pulpRuleTalents"),sheetData.showInventoryStatuses=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"status")||!sheetData.data.system.flags.locked,sheetData.showInventoryWeapons=!1,sheetData.hasInventory=sheetData.showInventoryItems||sheetData.showInventoryBooks||sheetData.showInventorySpells||sheetData.showInventoryTalents||sheetData.showInventoryStatuses||sheetData.showInventoryWeapons,sheetData.enrichedBiographyPersonalDescription=await TextEditor.enrichHTML(sheetData.data.system.biography.personalDescription?.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){if(super.activateListeners(html),game.settings.get("CoC7","useContextMenus")){this.menus||(this.menus=[]);const sanlossMenu={id:"san-loss-roll",classes:"roll-menu",section:[{classes:"main",items:[{action:"link-tool",label:"Open in link tool"},{action:"send-chat",label:"Send to chat"},{action:"copy-to-clipboard",label:"Copy to clip-board"}]}]},sanlossContextMenu=new CoC7ContextMenu;sanlossContextMenu.bind(sanlossMenu,html,this._onSanLossContextMenuClick.bind(this)),this.menus.push(sanlossContextMenu)}html.find(".roll-san").click(this._onSanCheck.bind(this))}async _onSanLossContextMenuClick(event){const rollOptions={rollType:CoC7ChatMessage.ROLL_TYPE_ENCOUNTER,preventStandby:!0,fastForward:!1,event,cardType:CoC7ChatMessage.CARD_TYPE_SAN_CHECK,actor:this.actor};switch(event.currentTarget.dataset.action){case"link-tool":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.createEncounter=!0,rollOptions.openLinkTool=!0;break;case"send-chat":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.createEncounter=!0,rollOptions.sendToChat=!0;break;case"copy-to-clipboard":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.createEncounter=!0,rollOptions.sendToClipboard=!0}CoC7ChatMessage.trigger(rollOptions)}async _onSanCheck(event){if(event.preventDefault(),this.actor.system.special.sanLoss.checkPassed||this.actor.system.special.sanLoss.checkFailled)if(isCtrlKey(event)&&game.user.isGM){let difficulty,modifier;if(!event.shiftKey){const usage=await RollDialog.create({disableFlatDiceModifier:!0});usage&&(modifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")))}const linkData={check:"sanloss",sanMin:this.actor.system.special.sanLoss.checkPassed,sanMax:this.actor.system.special.sanLoss.checkFailled,sanReason:this.actor.system.infos.type?.length?this.actor.system.infos.type:this.actor.name,tokenKey:this.actor.actorKey};"blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0),void 0!==modifier&&(linkData.modifier=modifier),void 0!==difficulty&&(linkData.difficulty=difficulty);const link=(new CoC7Link)._createDocumentLink(linkData);link&&chatHelper.createMessage(null,game.i18n.format("CoC7.MessageCheckRequestedWait",{check:link}))}else{const sanData={sanMax:this.actor.sanLossCheckFailled,sanMin:this.actor.sanLossCheckPassed,sanReason:this.actor.system.infos.type?.length?this.actor.system.infos.type:this.actor.name,tokenKey:this.actor.actorKey};SanCheckCard.checkTargets(sanData,event.shiftKey)}}onCloseSheet(){this.actor.unsetActorFlag("displayFormula"),super.onCloseSheet()}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","actor","npc"],dragDrop:[{dragSelector:".item",dropSelector:null}],template:"systems/CoC7/templates/actors/npc-sheet.html",width:580,resizable:!1,minimizable:!0})}async _updateObject(event,formData){if(!(event.currentTarget&&event.currentTarget.classList&&event.currentTarget.classList.contains("characteristic-score")))return super._updateObject(event,formData);this.actor.setCharacteristic(event.currentTarget.name,event.currentTarget.value)}static forceAuto(app,html){html.height("auto")}setPosition(a){super.setPosition(a),CoC7NPCSheet.forceAuto(a,this._element)}}class CoC7CreatureSheet extends CoC7NPCSheet{async getData(){const sheetData=await super.getData();return sheetData.isCreature=!0,sheetData}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","actor","npc","creature"]})}}class CoC7CreateMythosEncounter extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7"],title:game.i18n.localize("CoC7.SanityLossTypeDialogTitle"),template:"systems/CoC7/templates/apps/sanity-loss-type.hbs",height:"auto"})}async getData(){const data=await super.getData();return data.isImmunity="immunity"===data.object.type,data}activateListeners(html){html.find(".field_type").change(this._onSelectChange.bind(this)),html.find(".dialog-button").click(this._onButtonClick.bind(this)),super.activateListeners(html)}_onButtonClick(event){if("add"===event.currentTarget.dataset.button){const html=$(event.currentTarget).closest(".window-content"),type=html.find(".field_type").val(),name=html.find(".field_name").val(),value=parseInt(html.find(".field_value").val()),sanityLossEvents=this.object.actor.system.sanityLossEvents??[];sanityLossEvents.push({type:name,totalLoss:value,immunity:"immunity"===type}),sanityLossEvents.sort((function(left,right){return left.type.localeCompare(right.type)})),this.object.actor.update({"data.sanityLossEvents":sanityLossEvents})}this.close()}_onSelectChange(event){const html=$(event.currentTarget).closest(".window-content");this.object.name=html.find(".field_name").val(),this.object.type=html.find(".field_type").val(),this.render(!0)}async _updateObject(event,formData){}}class CoC7CharacterSheet extends CoC7ActorSheet{_getHeaderButtons(){if("CoC7CharacterSheet"===this.constructor.name){this.summarized||(this.summarized=!1);let buttons=super._getHeaderButtons();return buttons=[{label:this.summarized?game.i18n.localize("CoC7.Maximize"):game.i18n.localize("CoC7.Summarize"),class:"test-extra-icon",icon:this.summarized?"fas fa-window-maximize":"fas fa-window-minimize",onclick:event=>this.toggleSheetMode(event)}].concat(buttons),buttons}return super._getHeaderButtons()}async toggleSheetMode(event){this.summarized=!this.summarized;let options=foundry.utils.duplicate(CoC7CharacterSheet.defaultOptions);this.summarized&&(options=foundry.utils.mergeObject(options,{classes:["coc7","actor","character","summarized"],height:200,resizable:!1,width:700})),options.token=this.options.token,await this.close(),await this.render(!0,options)}async getData(){const sheetData=await super.getData();this.isEditable&&void 0===this.actor.getFlag("CoC7","skillListMode")&&await this.actor.setFlag("CoC7","skillListMode",!1),this.isEditable&&void 0===this.actor.getFlag("CoC7","skillShowUncommon")&&await this.actor.setFlag("CoC7","skillShowUncommon",!0),sheetData.skillListModeValue=this.actor.getFlag("CoC7","skillListMode")??!1,sheetData.skillShowUncommon=this.actor.getFlag("CoC7","skillShowUncommon")??!0,sheetData.showIconsOnly=game.settings.get("CoC7","showIconsOnly"),this.actor.occupation?(sheetData.data.system.infos.occupation=this.actor.occupation.name,sheetData.data.system.infos.occupationSet=!0):sheetData.data.system.infos.occupationSet=!1,this.actor.archetype?(sheetData.data.system.infos.archetype=this.actor.archetype.name,sheetData.data.system.infos.archetypeSet=!0):sheetData.data.system.infos.archetypeSet=!1,sheetData.totalExperience=this.actor.experiencePoints,sheetData.totalOccupation=this.actor.occupationPointsSpent,sheetData.invalidOccupationPoints=Number(this.actor.occupationPointsSpent)!==Number(this.actor.system.development?.occupation),sheetData.totalArchetype=this.actor.archetypePointsSpent,sheetData.invalidArchetypePoints=Number(this.actor.archetypePointsSpent)!==Number(this.actor.system.development?.archetype),sheetData.totalPersonal=this.actor.personalPointsSpent,sheetData.invalidPersonalPoints=Number(this.actor.personalPointsSpent)!==Number(this.actor.system.development?.personal),sheetData.creditRatingMax=Number(this.actor.occupation?.system.creditRating.max),sheetData.creditRatingMin=Number(this.actor.occupation?.system.creditRating.min),sheetData.invalidCreditRating=this.actor.creditRatingSkill?.system.adjustments?.occupation>sheetData.creditRatingMax||this.actor.creditRatingSkill?.system.adjustments?.occupation<sheetData.creditRatingMin,sheetData.pulpTalentCount=sheetData.itemsByType.talent?.length?sheetData.itemsByType.talent?.length:0,sheetData.minPulpTalents=this.actor.archetype?.system.talents?this.actor.archetype?.system.talents:0,sheetData.invalidPulpTalents=sheetData.pulpTalentCount<sheetData.minPulpTalents,sheetData.hasDevelopmentPhase=this.actor.hasDevelopmentPhase,sheetData.allowDevelopment=game.settings.get("CoC7","developmentEnabled"),sheetData.allowCharCreation=game.settings.get("CoC7","charCreationEnabled"),sheetData.developmentRollForLuck=game.settings.get("CoC7","developmentRollForLuck"),sheetData.showDevPannel=sheetData.allowDevelopment||sheetData.allowCharCreation,sheetData._monetaryFormats=[];for(const key in COC7.monetaryFormats)sheetData._monetaryFormats.push({key,val:game.i18n.localize(COC7.monetaryFormats[key])});sheetData.showCurrencySymbol=["decimalLeft","decimalRight","integerLeft","integerRight"].includes(sheetData.data.system.monetary.format),sheetData._monetaryTypes=[];for(const key in COC7.monetaryTypes)(0===COC7.monetaryTypes[key].filter.length||COC7.monetaryTypes[key].filter.includes(sheetData.data.system.monetary.format))&&sheetData._monetaryTypes.push({key,val:game.i18n.localize(COC7.monetaryTypes[key].name)});sheetData.manualCredit=this.actor.getActorFlag("manualCredit"),sheetData.manualCredit||(sheetData.monetary={spendingLevel:CoCActor.monetaryFormat(sheetData.data.system.monetary.format,sheetData.data.system.monetary.symbol,this.actor.spendingLevel),assets:CoCActor.monetaryFormat(sheetData.data.system.monetary.format,sheetData.data.system.monetary.symbol,this.actor.assets),cash:CoCActor.monetaryFormat(sheetData.data.system.monetary.format,sheetData.data.system.monetary.symbol,this.actor.cash)}),sheetData.oneBlockBackStory=game.settings.get("CoC7","oneBlockBackstory"),sheetData.summarized=this.summarized&&!sheetData.permissionLimited,sheetData.skillList=[];let previousSpec="";for(const skill of sheetData.skills)!sheetData.skillShowUncommon&&skill.system.properties.rarity||(skill.system.properties.special&&previousSpec!==skill.system.specialization&&(previousSpec=skill.system.specialization,sheetData.skillList.push({isSpecialization:!0,name:skill.system.specialization})),sheetData.skillList.push(skill));if(sheetData.skillsByValue=[...sheetData.skills].sort(((a,b)=>b.system.value-a.system.value)),sheetData.topSkills=[...sheetData.skillsByValue].slice(0,14),sheetData.skillsByValue=sheetData.skillsByValue.filter((skill=>sheetData.skillShowUncommon||!skill.system.properties.rarity)),sheetData.topWeapons=[...sheetData.meleeWpn,...sheetData.rangeWpn].sort(((a,b)=>a.system.skill.main?.value-b.system.skill.main?.value)).reverse().slice(0,3),sheetData.displayPlayerName=game.settings.get("CoC7","displayPlayerNameOnSheet"),sheetData.displayPlayerName&&!sheetData.data.system.infos.playername){const user=this.actor.characterUser;user&&(sheetData.data.system.infos.playername=user.name)}return sheetData.skillListEmpty=0===sheetData.skills.length,sheetData.showInventoryItems=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"item")||!sheetData.data.system.flags.locked,sheetData.showInventoryBooks=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"book")||!sheetData.data.system.flags.locked,sheetData.showInventorySpells=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"spell")||!sheetData.data.system.flags.locked,sheetData.showInventoryTalents=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"talent")||!sheetData.data.system.flags.locked&&game.settings.get("CoC7","pulpRuleTalents"),sheetData.showInventoryStatuses=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"status")||!sheetData.data.system.flags.locked,sheetData.hasInventory=sheetData.showInventoryItems||sheetData.showInventoryBooks||sheetData.showInventorySpells||sheetData.showInventoryTalents||sheetData.showInventoryStatuses||sheetData.showInventoryWeapons,sheetData.enrichedBackstory=await TextEditor.enrichHTML(sheetData.data.system.backstory,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}_saveScrollPositions(html){super._saveScrollPositions(html);this._scrollPositionsX=[".right-panel .tab.development ol"].reduce(((pos,sel)=>{const el=html.find(sel);return pos[sel]=Array.from(el).map((el=>el.scrollLeft)),pos}),{})}_restoreScrollPositions(html){super._restoreScrollPositions(html);const selectors=[".right-panel .tab.development ol"],positions=this._scrollPositionsX||{};for(const sel of selectors){html.find(sel).each(((i,el)=>{el.scrollLeft=positions[sel]?.[i]||0}))}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","actor","character"],template:"systems/CoC7/templates/actors/character/index.html",width:687,height:623,resizable:!0,dragDrop:[{dragSelector:".item",dropSelector:null}],scrollY:[".right-panel .tab"],tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"skills"}]})}activateListeners(html){super.activateListeners(html),this.actor.isOwner&&(html.find(".skill-name.rollable.flagged4dev").click((async event=>this._onSkillDev(event))),html.find(".reset-occupation").click((async()=>await this.actor.resetOccupation())),html.find(".reset-archetype").click((async()=>await this.actor.resetArchetype())),html.find(".open-item").click((event=>this._onItemDetails(event))),html.find(".toggle-list-mode").click((event=>{this.toggleSkillListMode(event)})),html.find(".toggle-uncommon-mode").click((event=>{this.toggleSkillUncommonMode(event)})),game.user.isGM&&(html.find(".sanity-loss-type-add").click(this._onAddSanityLossReason.bind(this)),html.find(".sanity-loss-type-delete").click(this._onDeleteSanityLossReason.bind(this)),html.find(".mythosEncountersTotalLoss").blur(this._onEditSanityLossReason.bind(this)),html.find(".toggle-keeper-flags").click(this._onToggleKeeperFlags.bind(this)),html.find(".add-monetary").click(this._onAddMonetary.bind(this)),html.find(".remove-monetary").click(this._onRemoveMonetary.bind(this))))}_onAddMonetary(){const values=this.actor.system.monetary.values?foundry.utils.duplicate(this.actor.system.monetary.values):[];values.push({name:"",min:null,max:null,cashType:0,cashValue:"",assetsType:0,assetsValue:"",spendingType:0,spendingValue:""}),this.actor.update({"system.monetary.values":values})}_onRemoveMonetary(event){const div=event.currentTarget.closest(".item"),values=foundry.utils.duplicate(this.actor.system.monetary.values);values.splice(Number(div.dataset.index),1),this.actor.update({"system.monetary.values":values})}_onToggleKeeperFlags(event){switch(event.preventDefault(),event.currentTarget.dataset.flag){case"mythosInsanityExperienced":this.actor.setFlag("CoC7","mythosInsanityExperienced",!this.actor.mythosInsanityExperienced);break;case"mythosHardened":this.actor.setFlag("CoC7","mythosHardened",!this.actor.mythosHardened)}}async _onAddSanityLossReason(event){event.preventDefault(),new CoC7CreateMythosEncounter({actor:this.actor,type:event.currentTarget.dataset.type},{}).render(!0)}async _onEditSanityLossReason(event){const input=$(event.currentTarget),offset=input.closest(".flexrow").data("offset");if(void 0!==this.actor.system.sanityLossEvents?.[offset]?.totalLoss){const sanityLossEvents=foundry.utils.duplicate(this.actor.system.sanityLossEvents);sanityLossEvents[offset].totalLoss=parseInt(input.val(),10),this.actor.update({"system.sanityLossEvents":sanityLossEvents})}}_onDeleteSanityLossReason(event){event.preventDefault();const offset=$(event.currentTarget).closest(".flexrow").data("offset"),sanityLossEvents=this.actor.system.sanityLossEvents??[];sanityLossEvents.splice(offset,1),sanityLossEvents.sort((function(left,right){return left.type.localeCompare(right.type)})),this.actor.update({"system.sanityLossEvents":sanityLossEvents})}async toggleSkillListMode(event){return await this.actor.setFlag("CoC7","skillListMode",!this.actor.getFlag("CoC7","skillListMode")),await this.render(!0)}async toggleSkillUncommonMode(event){return await this.actor.setFlag("CoC7","skillShowUncommon",!this.actor.getFlag("CoC7","skillShowUncommon")),await this.render(!0)}async _onSkillDev(event){event.preventDefault();const skillId=event.currentTarget.closest(".item").dataset.itemId;await this.actor.developSkill(skillId,event.shiftKey)}_onItemDetails(event){event.preventDefault();const type=event.currentTarget.dataset.type,item=this.actor[type];item&&item.sheet.render(!0)}_updateObject(event,formData){const system=foundry.utils.expandObject(formData)?.system;system.monetary?.values&&(formData["system.monetary.values"]=Object.values(system.monetary.values||[])),super._updateObject(event,formData)}static renderSheet(sheet,html){if(game.settings.get("CoC7","overrideSheetArtwork")){if(game.settings.get("CoC7","artWorkSheetBackground"))if("null"===game.settings.get("CoC7","artWorkSheetBackground").toLowerCase())sheet.element.css("--main-sheet-bg","url( './assets/images/void.webp')");else if(sheet.element.css("--main-sheet-bg",game.settings.get("CoC7","artWorkSheetBackground")),"slice"!==game.settings.get("CoC7","artWorkSheetBackgroundType")){let styleSheet,cssRuleIndex;for(let i=0;i<document.styleSheets.length;i++)if(document.styleSheets[i].href?.endsWith("coc7g.css")){styleSheet=document.styleSheets[i];break}if(styleSheet)for(let i=0;i<styleSheet.rules.length;i++)if(".sheetV2.character form"===styleSheet.rules[i].selectorText){cssRuleIndex=i;break}if(cssRuleIndex){const CSSStyle=styleSheet.rules[cssRuleIndex].style;switch(CSSStyle.removeProperty("border-image"),CSSStyle.setProperty("background",game.settings.get("CoC7","artWorkSheetBackground")),game.settings.get("CoC7","artWorkSheetBackgroundType")){case"auto":default:CSSStyle.setProperty("background-size","auto");break;case"contain":CSSStyle.setProperty("background-size","contain");break;case"cover":CSSStyle.setProperty("background-size","cover")}}}if(game.settings.get("CoC7","artWorkOtherSheetBackground")&&("null"===game.settings.get("CoC7","artWorkOtherSheetBackground").toLowerCase()?sheet.element.css("--other-sheet-bg","url( './assets/images/void.webp')"):sheet.element.css("--other-sheet-bg",game.settings.get("CoC7","artWorkOtherSheetBackground"))),game.settings.get("CoC7","artworkSheetImage")&&("null"===game.settings.get("CoC7","artworkSheetImage").toLowerCase()?sheet.element.css("--main-sheet-image","url( './assets/images/void.webp')"):sheet.element.css("--main-sheet-image",game.settings.get("CoC7","artworkSheetImage"))),game.settings.get("CoC7","artworkFrontColor")&&sheet.element.css("--main-sheet-front-color",game.settings.get("CoC7","artworkFrontColor")),game.settings.get("CoC7","artworkBackgroundColor")&&sheet.element.css("--main-sheet-back-color",game.settings.get("CoC7","artworkBackgroundColor")),game.settings.get("CoC7","artworkInteractiveColor")&&sheet.element.css("--main-sheet-interactive-color",game.settings.get("CoC7","artworkInteractiveColor")),game.settings.get("CoC7","artworkFixedSkillLength")||(sheet.element.css("--skill-length","auto"),sheet.element.css("--skill-specialization-length","auto")),game.settings.get("CoC7","artworkMainFont")){new FontFace("customSheetFont",game.settings.get("CoC7","artworkMainFont")).load().then((function(loadedFace){document.fonts.add(loadedFace)})).catch((function(error){ui.notifications.error(error)}))}if(game.settings.get("CoC7","artworkMainFontBold")){new FontFace("customSheetFont",game.settings.get("CoC7","artworkMainFontBold"),{weight:"bold"}).load().then((function(loadedFace){document.fonts.add(loadedFace)})).catch((function(error){ui.notifications.error(error)}))}if(game.settings.get("CoC7","artworkMainFontSize")){const size=`${game.settings.get("CoC7","artworkMainFontSize")}px`;size!==$(":root").css("font-size")&&$(":root").css("font-size",size)}}if(void 0!==sheet.actor?.system.pannel)for(const[key,value]of Object.entries(sheet.actor.system.pannel)){const pannelClass=chatHelper.camelCaseToHyphen(key),pannel=html.find(`.pannel.${pannelClass}`);value.expanded?pannel.addClass("expanded"):pannel.removeClass("expanded")}}}class CoC7Combat{static renderCombatTracker(app,html,data){const currentCombat=data.combats[data.currentIndex-1];currentCombat&&(html.find(".combatant").each(((i,el)=>{const combId=el.getAttribute("data-combatant-id"),combatantControlsDiv=el.querySelector(".combatant-controls"),combatant=currentCombat.combatants.get(combId);if(combatant.getFlag("CoC7","hasGun")?$(combatantControlsDiv).prepend(`<a class="combatant-control active add-init" title="${game.i18n.localize("CoC7.PutGunAway")}" data-control="drawGun"><i class="game-icon game-icon-revolver"></i></a>`):$(combatantControlsDiv).prepend(`<a class="combatant-control add-init" title="${game.i18n.localize("CoC7.DrawGun")}" data-control="drawGun"><i class="game-icon game-icon-revolver"></i></a>`),"optional"===game.settings.get("CoC7","initiativeRule")&&game.settings.get("CoC7","displayInitAsText")){if(combatant.initiative){const tokenInitiative=el.querySelector(".token-initiative"),initiativeTest=tokenInitiative.querySelector(".initiative"),roll=100*combatant.initiative-100*Math.floor(combatant.initiative);switch(Math.floor(combatant.initiative)){case CoC7Check.successLevel.fumble:tokenInitiative.classList.add("fumble"),initiativeTest.innerText=game.i18n.localize("CoC7.Fumble"),initiativeTest.title=roll;break;case CoC7Check.successLevel.failure:tokenInitiative.classList.add("failure"),initiativeTest.innerText=game.i18n.localize("CoC7.Failure"),initiativeTest.title=roll;break;case CoC7Check.successLevel.regular:tokenInitiative.classList.add("regular-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyRegular"),initiativeTest.title=roll;break;case CoC7Check.successLevel.hard:tokenInitiative.classList.add("hard-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyHard"),initiativeTest.title=roll;break;case CoC7Check.successLevel.extreme:tokenInitiative.classList.add("extreme-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyExtreme"),initiativeTest.title=roll;break;case CoC7Check.successLevel.critical:tokenInitiative.classList.add("critical"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyCritical"),initiativeTest.title=roll}}}else if(combatant.initiative<0){const h4=el.querySelector(".token-name").querySelector("h4"),span=el.querySelector("span.initiative");h4.style.fontWeight="900",h4.style.textShadow="1px 1px 4px darkred",span.style.fontWeight="900",span.style.textShadow="1px 1px 4px darkred",el.style.color="darkred",el.style.background="black",el.style.fontWeight="900"}})),html.find(".add-init").click((event=>CoC7Combat._onToggleGun(event))))}static async _onToggleGun(event){event.preventDefault(),event.stopPropagation();const li=event.currentTarget.closest(".combatant"),c=await game.combat.combatants.get(li.dataset.combatantId);c.actor.isOwner&&(c.getFlag("CoC7","hasGun")?await c.setFlag("CoC7","hasGun",!1):await c.setFlag("CoC7","hasGun",!0));const newInit=await c.actor.rollInitiative(!!c.getFlag("CoC7","hasGun"));c.getFlag("CoC7","hasGun")?c.initiative<newInit&&game.combat.setInitiative(c.id,newInit):game.combat.setInitiative(c.id,newInit)}}async function rollInitiative(ids,{formula=null,updateTurn=!0,messageOptions={}}={}){const updates=[];for(const[,id]of ids.entries()){const combatant=this.combatants.get(id),roll=await combatant.actor.rollInitiative(!!combatant.getFlag("CoC7","hasGun"));updates.push({_id:id,initiative:roll})}return updates.length?(await this.updateEmbeddedDocuments("Combatant",updates),this):this}class CoCIDBatch extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","dialog","coc-id-editor"],template:"systems/CoC7/templates/apps/coc-id-batch.hbs",width:700,height:"auto",title:"CoC7.CoCIDFlag.title",closeOnSubmit:!1,submitOnClose:!1,submitOnChange:!1})}async getData(){const sheetData=super.getData();return sheetData.foundKeys=Object.keys(sheetData.object.foundKeys).reduce(((out,key)=>(out.push({name:key,key:sheetData.object.foundKeys[key]}),out)),[]).sort(CoC7Utilities.sortByNameKey),sheetData.missingNames=Object.keys(sheetData.object.missingNames).reduce(((out,key)=>(out.push({key:sheetData.object.foundKeys[key]??"",name:key,custom:sheetData.object.missingNames[key],suffix:sheetData.object.missingNames[key].replace(this.object.suffixRegExp,"")}),out)),[]).sort(CoC7Utilities.sortByNameKey),sheetData}activateListeners(html){super.activateListeners(html),html.find(".existing").change(this.onSetName.bind(this)),html.find(".fa-wand-magic").click(this.onClickGuess.bind(this)),html.find("input").keyup(this.onKeyup.bind(this))}onSetName(event){const obj=$(event.currentTarget);this.object.missingNames[obj.closest("li").data("name")]=obj.val(),this.render(!0)}onClickGuess(event){const name=$(event.currentTarget).closest("li").data("name");this.object.missingNames[name]=this.object.idPrefix+CoC7Utilities.toKebabCase(name),this.render(!0)}onKeyup(event){const obj=$(event.currentTarget),name=obj.closest("li").data("name");this.object.missingNames[name]=this.object.idPrefix+obj.val()}async _updateObject(event,formData){event.submitter&&(this.object.typeName===game.i18n.localize("CoC7.Entities.Skill")&&(this.close(),await CoCIDBatch.processSkillKeys(this.object.updateList,this.object.missingNames)),this.object.resolve(!0))}static async processSkillKeys(updateList,missingNames){const items=[],actors={},scenes={};for(const update of updateList){update.cocidFlag.id=missingNames[update.name],void 0===update.cocidFlag.lang&&(update.cocidFlag.lang=game.i18n.lang),void 0===update.cocidFlag.priority&&(update.cocidFlag.priority=0),void 0===update.cocidFlag.eras&&(update.cocidFlag.eras={});const flags=foundry.utils.flattenObject({flags:{CoC7:{cocidFlag:update.cocidFlag}}});if(void 0!==update.scene){if(void 0===scenes[update.scene]){const scene=game.scenes.get(update.scene);scenes[update.scene]=scene.toObject()}const tokenOffset=scenes[update.scene].tokens.findIndex((t=>t._id===update.token));if(tokenOffset>-1){const itemOffset=scenes[update.scene].tokens[tokenOffset].actorData.items.findIndex((i=>i._id===update.item));if(itemOffset>-1){const expandedFlags=foundry.utils.expandObject(Object.entries(flags).reduce(((out,entry)=>(entry[0].match(/^flags\.CoC7\.cocidFlag/)&&(out[entry[0]]=entry[1]),out)),{}));scenes[update.scene].tokens[tokenOffset].actorData.items[itemOffset]=foundry.utils.mergeObject(scenes[update.scene].tokens[tokenOffset].actorData.items[itemOffset],expandedFlags)}}}else if(void 0!==update.actor){void 0===actors[update.actor]&&(actors[update.actor]=[]);const item={_id:update.item};for(const key of Object.keys(flags))key.match(/^flags\.CoC7\.cocidFlag/)&&(item[key]=flags[key]);actors[update.actor].push(item)}else{const item={_id:update.item};for(const key of Object.keys(flags))key.match(/^flags\.CoC7\.cocidFlag/)&&(item[key]=flags[key]);items.push(item)}}if(items.length&&await Item.updateDocuments(items),Object.keys(actors).length)for(const actorId of Object.keys(actors))await Item.updateDocuments(actors[actorId],{parent:game.actors.get(actorId)});if(Object.keys(scenes).length)for(const sceneId of Object.keys(scenes)){game.scenes.get(sceneId).update(scenes[sceneId])}return!0}static async populateSkillKeys(updateList,missingNames,foundKeys){for(const actor of game.actors.contents){const actorData=actor.toObject();if(actorData.items)for(const item of actorData.items){const itemData=item instanceof CONFIG.Item.documentClass?item.toObject():item;"skill"===itemData.type&&(itemData.flags.CoC7?.cocidFlag?.id?.match(/^i.skill/)?foundKeys[itemData.name]=itemData.flags.CoC7.cocidFlag.id:(void 0===missingNames[itemData.name]&&(missingNames[itemData.name]=""),updateList.push({actor:actor._id,item:itemData._id,name:itemData.name,cocidFlag:itemData.flags.CoC7?.cocidFlag??{}})))}}for(const item of game.items.contents){const itemData=item instanceof CONFIG.Item.documentClass?item.toObject():item;"skill"===itemData.type&&(itemData.flags.CoC7?.cocidFlag?.id?.match(/^i.skill/)?foundKeys[itemData.name]=itemData.flags.CoC7.cocidFlag.id:(void 0===missingNames[itemData.name]&&(missingNames[itemData.name]=""),updateList.push({item:itemData._id,name:itemData.name,cocidFlag:itemData.flags.CoC7?.cocidFlag??{}})))}for(const scene of game.scenes){const sceneData=scene.toObject();for(const token of sceneData.tokens??[])if(token.actorId&&!token.actorLink){const actorData=foundry.utils.duplicate(token.actorData);for(const item of actorData.items??[]){const itemData=item instanceof CONFIG.Item.documentClass?item.toObject():item;"skill"===itemData.type&&(itemData.flags.CoC7?.cocidFlag?.id?.match(/^i.skill/)?foundKeys[itemData.name]=itemData.flags.CoC7.cocidFlag.id:(void 0===missingNames[itemData.name]&&(missingNames[itemData.name]=""),updateList.push({scene:sceneData._id,token:token._id,item:itemData._id,name:itemData.name,cocidFlag:itemData.flags.CoC7?.cocidFlag??{}})))}}}if(Object.keys(missingNames).filter((key=>""===missingNames[key])).length>0){const items=await game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:/^i\.skill\./,type:"i",era:!1});for(const item of items)foundKeys[item.name]=item.flags.CoC7.cocidFlag.id;for(const key in foundry.utils.flattenObject(game.i18n.translations.CoC7.CoCIDFlag.keys??{}))foundKeys[game.i18n.format("CoC7.CoCIDFlag.keys."+key)]=key;for(const name in missingNames)void 0!==foundKeys[name]&&(missingNames[name]=foundKeys[name])}}static async create(type){const updateList=[],missingNames={},foundKeys={};let typeName="",idPrefix="",suffixRegExp=null;return"skill"===type&&(typeName=game.i18n.localize("CoC7.Entities.Skill"),idPrefix="i.skill.",suffixRegExp=/^i\.skill\./,await CoCIDBatch.populateSkillKeys(updateList,missingNames,foundKeys),0===Object.keys(missingNames).filter((key=>""===missingNames[key])).length?(await CoCIDBatch.processSkillKeys(updateList,missingNames),!0):new Promise((resolve=>{new CoCIDBatch({typeName,idPrefix,suffixRegExp,updateList,missingNames,foundKeys,resolve}).render(!0)})))}}class Updater{static async checkForUpdate(){let systemUpdateVersion=game.settings.get("CoC7","systemUpdateVersion");game.actors.size+game.scenes.size+game.items.size+game.journal.size+game.tables.size===0&&(systemUpdateVersion=game.system.version,await game.settings.set("CoC7","systemUpdateVersion",systemUpdateVersion));const runMigrate=foundry.utils.isNewerVersion(game.system.version,systemUpdateVersion??"0");this.updatedModules=game.settings.get("CoC7","systemUpdatedModuleVersion")||{},this.currentModules={};for(const pack of game.packs)if(!["CoC7","world"].includes(pack.metadata.packageName)&&["Actor","Item","Scene"].includes(pack.metadata.type)&&!Object.prototype.hasOwnProperty.call(this.currentModules,pack.metadata.packageName)){const module=game.modules.get(pack.metadata.packageName);module&&(!runMigrate&&Object.prototype.hasOwnProperty.call(this.updatedModules,module.id)&&String(this.updatedModules[module.id])===String(module.version)||(this.currentModules[module.id]=module.version))}(runMigrate||Object.keys(this.currentModules).length>0)&&(game.user.isGM?new Dialog({title:game.i18n.localize("CoC7.Migrate.Title"),content:game.i18n.format(0===Object.keys(this.currentModules).length?"CoC7.Migrate.Message":"CoC7.Migrate.WithModulesMessage",{version:game.system.version,modules:"<ul><li>"+Object.keys(this.currentModules).map((mod=>game.modules.get(mod).title)).join("</li><li>")+"</li></ul>"}),buttons:{update:{label:game.i18n.localize("CoC7.Migrate.ButtonUpdate"),callback:async()=>Updater.update()},skip:{label:game.i18n.localize("CoC7.Migrate.ButtonSkip")}}}).render(!0):new Dialog({title:game.i18n.localize("CoC7.Migrate.Title"),content:game.i18n.format("CoC7.Migrate.GMRequired",{version:game.system.version}),buttons:{OK:{label:game.i18n.localize("CoC7.Migrate.ButtonOkay")}}}).render(!0))}static async update(){await this.updateDocuments(),game.settings.get("CoC7","pulpRules")&&(game.settings.set("CoC7","pulpRuleDoubleMaxHealth",!0),game.settings.set("CoC7","pulpRuleDevelopmentRollLuck",!0),game.settings.set("CoC7","pulpRuleArchetype",!0),game.settings.set("CoC7","pulpRuleOrganization",!0),game.settings.set("CoC7","pulpRuleTalents",!0),game.settings.set("CoC7","pulpRuleFasterRecovery",!0),game.settings.set("CoC7","pulpRuleIgnoreMajorWounds",!0),game.settings.set("CoC7","pulpRuleIgnoreAgePenalties",!0)),await CoCIDBatch.create("skill");const settings=foundry.utils.mergeObject(this.updatedModules||{},this.currentModules);game.settings.set("CoC7","systemUpdatedModuleVersion",settings),game.settings.set("CoC7","systemUpdateVersion",game.system.version),ui.notifications.info(game.i18n.format("CoC7.Migrate.Complete"),{permanent:!0})}static async updateDocuments(){for(const actor of game.actors.contents)try{const updateData=this.migrateActorData(actor.toObject());foundry.utils.isEmpty(updateData)||(console.log(`Migrating Actor document ${actor.name}`),await actor.update(updateData,{enforceTypes:!1}))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorActor",{name:actor.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const item of game.items.contents)try{const updateData=Updater.migrateItemData(item.toObject());foundry.utils.isEmpty(updateData)||(console.log(`Migrating Item document ${item.name}`),await item.update(updateData,{enforceTypes:!1}))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorItem",{name:item.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const table of game.tables.contents)try{const updateData=Updater.migrateTableData(table.toObject());foundry.utils.isEmpty(updateData)||(console.log(`Migrating Table document ${table.name}`),await table.update(updateData,{enforceTypes:!1}))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorTable",{name:table.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const macro of game.macros.contents)try{const updateData=Updater.migrateMacroData(macro.toObject());foundry.utils.isEmpty(updateData)||(console.log(`Migrating Macro document ${macro.name}`),await macro.update(updateData,{enforceTypes:!1}))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorMacro",{name:macro.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const scene of game.scenes)try{const updateData=Updater.migrateSceneData(scene);foundry.utils.isEmpty(updateData)||(console.log(`Migrating Scene document ${scene.name}`),await scene.update(updateData,{enforceTypes:!1})),scene.tokens.forEach((t=>t._actor=null))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorScene",{name:scene.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const pack of game.packs)"CoC7"!==pack.metadata.packageName&&["Actor","Item","Macro","RollTable","Scene"].includes(pack.metadata.type)&&await Updater.migrateCompendiumData(pack)}static migrateActorData(actor){const updateData={};if(Updater._migrateActorCharacterSanity(actor,updateData),Updater._migrateActorArtwork(actor,updateData),Updater._migrateActorKeeperNotes(actor,updateData),Updater._migrateActorNpcCreature(actor,updateData),Updater._migrateActorStatusEffectActive(actor,updateData),Updater._migrateActorSanLossReasons(actor,updateData),Updater._migrateActorMonetary(actor,updateData),actor.items){const items=actor.items.reduce(((arr,i)=>{const itemData=i instanceof CONFIG.Item.documentClass?i.toObject():i,itemUpdate=Updater.migrateItemData(itemData);return foundry.utils.isEmpty(itemUpdate)||(itemUpdate._id=itemData._id,arr.push(foundry.utils.expandObject(itemUpdate))),arr}),[]);items.length>0&&(updateData.items=items)}return updateData}static async migrateCompendiumData(pack){const documentType=pack.metadata.type;if(!["Actor","Item","Macro","RollTable","Scene"].includes(documentType))return;const wasLocked=pack.locked;await pack.configure({locked:!1});try{await pack.migrate()}catch(err){console.log("pack migrate failed",pack,err)}const documents=await pack.getDocuments();for(const doc of documents){let updateData={};try{switch(documentType){case"Actor":updateData=Updater.migrateActorData(doc.toObject());break;case"Item":updateData=Updater.migrateItemData(doc.toObject());break;case"Macro":updateData=Updater.migrateMacroData(doc.toObject());break;case"RollTable":updateData=Updater.migrateTableData(doc.toObject());break;case"Scene":updateData=Updater.migrateSceneData(doc)}foundry.utils.isEmpty(updateData)||(console.log(`Migrated ${documentType} document ${doc.name} in Compendium ${pack.collection}`),await doc.update(updateData))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorDocumentPack",{name:doc.name,collection:pack.collection,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}}await pack.configure({locked:wasLocked})}static migrateItemData(item){const updateData={};return Updater._migrateItemEmbeddedv10(item,updateData),Updater._migrateItemExperience(item,updateData),Updater._migrateItemArtwork(item,updateData),Updater._migrateItemBookAutomated(item,updateData),Updater._migrateItemKeeperNotes(item,updateData),Updater._migrateItemSpellAutomated(item,updateData),Updater._migrateItemKeeperNotesMerge(item,updateData),Updater._migrateItemEras(item,updateData),Updater._migrateItemv10(item,updateData),Updater._migrateItemBookUnits(item,updateData),updateData}static migrateMacroData(table){const updateData={};return Updater._migrateMacroArtwork(table,updateData),updateData}static migrateTableData(table){const updateData={};return Updater._migrateTableArtwork(table,updateData),updateData}static migrateSceneData(scene){const returns={tokens:[]};return void 0!==scene.tokens&&scene.tokens.length&&(returns.tokens=scene.tokens.map((token=>{const t=token.toObject(),updateData={};if(Updater._migrateTokenArtwork(t,updateData),Object.keys(updateData).length&&foundry.utils.mergeObject(t,updateData),!t.actorId||t.actorLink)t.actorData={};else if(game.actors.has(t.actorId)){if(!t.actorLink){const actorData=foundry.utils.duplicate(t.actorData);actorData.type=token.actor?.type;const update=Updater.migrateActorData(actorData);["items","effects"].forEach((embeddedName=>{if(!update[embeddedName]?.length)return;const updates=new Map(update[embeddedName].map((u=>[u._id,u])));t.actorData[embeddedName].forEach((original=>{const update=updates.get(original._id);update&&foundry.utils.mergeObject(original,update)})),delete update[embeddedName]})),foundry.utils.mergeObject(t.actorData,update)}}else t.actorId=null,t.actorData={};return t}))),returns}static _migrateItemKeeperNotes(item,updateData){return["archetype","chase","item","occupation","setup","skill","spell","status","talent","weapon"].includes(item.type)&&("string"==typeof item.system.description?updateData["system.description"]={value:item.system.description,keeper:""}:void 0===item.system.description||null===item.system.description?updateData["system.description"]={value:"",keeper:""}:void 0===item.system.description.keeper&&(updateData["system.description.keeper"]="")),updateData}static _migrateItemExperience(item,updateData){return"skill"===item.type&&void 0===item.system.adjustments?.experience&&(updateData["system.adjustments.experience"]=0),updateData}static _migrateItemArtwork(item,updateData){let image=String(item.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);if(null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),"setup"===item.type)for(const[k,v]of Object.entries(item.system.items))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.items"]&&(updateData["system.items"]=item.system.items),updateData["system.items"][k].img="systems/CoC7/assets/icons/"+image[1]));else if("occupation"===item.type){for(const[k,v]of Object.entries(item.system.skills))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.skills"]&&(updateData["system.skills"]=item.system.skills),updateData["system.skills"][k].img="systems/CoC7/assets/icons/"+image[1]));for(const[o,g]of Object.entries(item.system.groups))for(const[k,v]of Object.entries(g.skills))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.groups"]&&(updateData["system.groups"]=item.system.groups),updateData["system.groups"][o].skills[k].img="systems/CoC7/assets/icons/"+image[1]))}else if("book"===item.type)for(const[k,v]of Object.entries(item.system.spells))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.spells"]&&(updateData["system.spells"]=item.system.spells),updateData["system.spells"][k].img="systems/CoC7/assets/icons/"+image[1]));else if("archetype"===item.type)for(const[k,v]of Object.entries(item.system.skills))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.skills"]&&(updateData["system.skills"]=item.system.skills),updateData["system.skills"][k].img="systems/CoC7/assets/icons/"+image[1]));return updateData}static _migrateItemSpellAutomated(item,updateData){"spell"===item.type&&void 0!==item.system.cost&&(updateData["system.castingTime"]=item.system.castingTime||"",updateData["system.costs.hitPoints"]=item.system.cost.hp||0,updateData["system.costs.magicPoints"]=item.system.cost.mp||0,updateData["system.costs.sanity"]=item.system.cost.san||0,updateData["system.costs.power"]=item.system.cost.pow||0,updateData["system.costs.others"]="",updateData["system.-=cost"]=null,updateData["system.description.-=unidentified"]=null,updateData["system.description.-=notes"]=null)}static _migrateItemBookAutomated(item,updateData){return"book"===item.type&&void 0!==item.system.description.unidentified&&(updateData["system.author"]=item.system.author||"",updateData["system.date"]=item.system.date||"",updateData["system.language"]=item.system.language||"",updateData["system.sanityLoss"]=item.system.sanLoss||0,updateData["system.mythosRating"]=Number(item.system.mythosRating)||0,updateData["system.content"]=item.system.description.unidentified,updateData["system.description.keeper"]=item.system.description.notes,updateData["system.difficultyLevel"]="regular",updateData["system.fullStudies"]=0,updateData["system.initialReading"]=!1,updateData["system.keeperNotes"]="",updateData["system.gains.cthulhuMythos.initial"]=Number(item.system.gain.cthulhuMythos.CMI)||0,updateData["system.gains.cthulhuMythos.final"]=Number(item.system.gain.cthulhuMythos.CMF)||0,updateData["system.gains.occult"]=Number(item.system.gain.occult)||0,updateData["system.gains.others"]=[],updateData["system.study"]={necessary:Number(item.system.weeksStudyTime)||0,progress:0,units:"CoC7.weeks"},updateData["system.-=sanLoss"]=null,updateData["system.-=weeksStudyTime"]=null,updateData["system.-=gain"]=null,updateData["system.description.-=unidentified"]=null,updateData["system.description.-=notes"]=null,updateData["system.gains.-=other"]=null,updateData["system.-=properties"]=null,updateData["system.-=flags"]=null),updateData}static _migrateItemBookUnits(item,updateData){"book"===item.type&&void 0!==item.system.study.necessary&&void 0===item.system.study.units&&(updateData["system.study.units"]="CoC7.weeks")}static _migrateItemKeeperNotesMerge(item,updateData){"spell"!==item.type&&"book"!==item.type||(void 0!==item.system.notes&&(void 0!==item.system.description.keeper?updateData["system.description.keeper"]=item.system.description.keeper+item.system.notes:updateData["system.description.keeper"]=item.system.notes,updateData["system.-=notes"]=null),void 0!==item.system.keeperNotes&&(void 0!==updateData["system.description.keeper"]?updateData["system.description.keeper"]=item.system.keeperNotes+updateData["system.description.keeper"]:updateData["system.description.keeper"]=item.system.keeperNotes,updateData["system.-=keeperNotes"]=null))}static _migrateItemEmbeddedv10(item,updateData){if("occupation"===item.type){let changed=!1;for(const[o,g]of Object.entries(item.system.groups))for(const[k,v]of Object.entries(g.skills))"string"!=typeof v&&void 0===v.system&&(item.system.groups[o].skills[k].system=v.data,changed=!0);changed&&(updateData["system.groups"]=item.system.groups)}if(["setup"].includes(item.type)){let changed=!1;for(const[k,v]of Object.entries(item.system.items))"string"!=typeof v&&void 0===v.system&&(item.system.items[k].system=v.data,changed=!0);changed&&(updateData["system.items"]=item.system.items)}if(["archetype","occupation"].includes(item.type)){let changed=!1;for(const[k,v]of Object.entries(item.system.skills))"string"!=typeof v&&void 0===v.system&&(item.system.skills[k].system=v.data,changed=!0);changed&&(updateData["system.skills"]=item.system.skills)}if(["book"].includes(item.type)){let changed=!1;for(const[k,v]of Object.entries(item.system.spells))"string"!=typeof v&&void 0===v.system&&(item.system.spells[k].system=v.data,changed=!0);changed&&(updateData["system.spells"]=item.system.spells)}}static _migrateItemv10(item,updateData){if("skill"!==item.type||void 0!==item.system.skillName&&""!==item.system.skillName){if("setup"===item.type){for(const[k,v]of Object.entries(item.system.items))if("string"!=typeof v&&"skill"===v.type&&(void 0===v.system.skillName||""===v.system.skillName)){void 0===updateData["system.items"]&&(updateData["system.items"]=item.system.items),updateData["system.items"][k].name=v.name,"Uniki"===updateData["system.items"][k].name&&(updateData["system.items"][k].name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData["system.items"][k].name,"string"==typeof v.system.specialization?.group?v.system.specialization.group:v.system.specialization);updateData["system.items"][k].name=parts.name,updateData["system.items"][k].system.skillName=parts.skillName,updateData["system.items"][k].system.specialization=parts.specialization}}else if("occupation"===item.type){for(const[k,v]of Object.entries(item.system.skills))if("string"!=typeof v&&"skill"===v.type&&(void 0===v.system.skillName||""===v.system.skillName)){void 0===updateData["system.skills"]&&(updateData["system.skills"]=item.system.skills),updateData["system.skills"][k].name=v.name,"Uniki"===updateData["system.skills"][k].name&&(updateData["system.skills"][k].name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData["system.skills"][k].name,"string"==typeof v.system.specialization?.group?v.system.specialization.group:v.system.specialization);updateData["system.skills"][k].name=parts.name,updateData["system.skills"][k].system.skillName=parts.skillName,updateData["system.skills"][k].system.specialization=parts.specialization}for(const[o,g]of Object.entries(item.system.groups))for(const[k,v]of Object.entries(g.skills))if("string"!=typeof v&&"skill"===v.type&&(void 0===v.system.skillName||""===v.system.skillName)){void 0===updateData["system.groups"]&&(updateData["system.groups"]=item.system.groups),updateData["system.groups"][o].skills[k].name=v.name,"Uniki"===updateData["system.groups"][o].skills[k].name&&(updateData["system.groups"][o].skills[k].name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData["system.groups"][o].skills[k].name,"string"==typeof v.system.specialization?.group?v.system.specialization.group:v.system.specialization);updateData["system.groups"][o].skills[k].name=parts.name,updateData["system.groups"][o].skills[k].system.skillName=parts.skillName,updateData["system.groups"][o].skills[k].system.specialization=parts.specialization}}else if("archetype"===item.type)for(const[k,v]of Object.entries(item.system.skills))if("string"!=typeof v&&"skill"===v.type&&(void 0===v.system.skillName||""===v.system.skillName)){void 0===updateData["system.skills"]&&(updateData["system.skills"]=item.system.skills),updateData["system.skills"][k].name=v.name,"Uniki"===updateData["system.skills"][k].name&&(updateData["system.skills"][k].name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData["system.skills"][k].name,"string"==typeof v.system.specialization?.group?v.system.specialization.group:v.system.specialization);updateData["system.skills"][k].name=parts.name,updateData["system.skills"][k].system.skillName=parts.skillName,updateData["system.skills"][k].system.specialization=parts.specialization}}else{updateData.name=item.name,"Uniki"===updateData.name&&(updateData.name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData.name,"string"==typeof item.system.specialization?.group?item.system.specialization.group:item.system.specialization);updateData.name=parts.name,updateData["system.skillName"]=parts.skillName,updateData["system.specialization"]=parts.specialization}}static _migrateItemEras(item,updateData){if(void 0!==item.system.eras){let eras={};for(const[key,value]of Object.entries(item.system.eras))if(!0===value||"string"!=typeof value&&void 0!==value.selected)switch(key){case"1920":eras.standard=!0;break;case"mdrn":eras.modern=!0,eras.modernPulp=!0;break;case"pulp":eras.pulp=!0;break;case"ddts":eras.downDarkerTrails=!0,eras.downDarkerTrailsPulp=!0;break;case"drka":eras.darkAges=!0,eras.darkAgesPulp=!0;break;case"glit":eras.gasLight=!0;break;case"nvct":eras.invictus=!0}if("setup"===item.type){const key=Object.keys(eras)[0];eras=key?{[key]:!0}:{standard:!0}}const CoC7={cocidFlag:{id:"",lang:game.i18n.lang,priority:0,eras}};void 0===item.flags?.CoC7?(item.flags.CoC7=CoC7,updateData["flags.CoC7"]=CoC7):void 0===item.flags?.CoC7?.cocidFlag?(item.flags.CoC7.cocidFlag=CoC7.cocidFlag,updateData["flags.CoC7.cocidFlag"]=CoC7.cocidFlag):(item.flags.CoC7.cocidFlag.eras=CoC7.cocidFlag.eras,updateData["flags.CoC7.cocidFlag.eras"]=CoC7.cocidFlag.eras),updateData["system.-=eras"]=null}}static _migrateActorArtwork(actor,updateData){let image=String(actor.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);if(null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),void 0!==actor.prototypeToken&&void 0!==actor.prototypeToken.texture?.src&&(image=String(actor.prototypeToken.texture.src).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(updateData["prototypeToken.texture.src"]="systems/CoC7/assets/icons/"+image[1])),void 0!==actor.effects)for(const[k,v]of Object.entries(actor.effects))image=String(v.icon).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData.effects&&(updateData.effects=actor.effects),updateData.effects[k].icon="systems/CoC7/assets/icons/"+image[1])}static _migrateActorKeeperNotes(actor,updateData){["character","npc","creature"].includes(actor.type)&&void 0!==actor.system&&void 0===actor.system.description&&(updateData["system.description"]={keeper:""})}static _migrateActorMonetary(actor,updateData){if("character"===actor.type&&void 0!==actor.system.credit?.multiplier){updateData["system.monetary.symbol"]=actor.system.credit?.monetarySymbol?actor.system.credit.monetarySymbol:"$",""===updateData["system.monetary.symbol"].toString().trim()&&(updateData["system.monetary.symbol"]="$");const multiplier=parseInt(actor.system.credit.multiplier)?parseInt(actor.system.credit.multiplier):1;if(updateData["system.monetary.spent"]=actor.system.credit.spent,updateData["system.monetary.assetsDetails"]=actor.system.credit.assetsDetails,updateData["system.monetary.spendingLevel"]=actor.system.credit.spendingLevel,updateData["system.monetary.cash"]=actor.system.credit.cash,updateData["system.monetary.assets"]=actor.system.credit.assets,updateData["system.monetary.values"]=foundry.utils.duplicate(actor.system.monetary.values),1!==multiplier)for(const value of updateData["system.monetary.values"])value.cashValue=multiplier*value.cashValue,value.assetsValue=multiplier*value.assetsValue,value.spendingValue=multiplier*value.spendingValue;updateData["system.-=credit"]=null}}static _migrateActorSanLossReasons(actor,updateData){if("character"===actor.type&&void 0!==actor.system?.encounteredCreatures){const groups={};for(const sanityLossEvent of actor.system.encounteredCreatures)sanityLossEvent.totalLoss>0&&(groups[sanityLossEvent.name]=Math.max(groups[sanityLossEvent.name]??0,sanityLossEvent.totalLoss));const sanityLossEvents=[];for(const name in groups)sanityLossEvents.push({type:name,totalLoss:groups[name],immunity:!1});updateData["system.sanityLossEvents"]=sanityLossEvents,updateData["system.-=encounteredCreatures"]=null}}static _migrateActorStatusEffectActive(actor,updateData){if(["character","npc","creature"].includes(actor.type)&&void 0!==actor.system&&(void 0!==actor.system.status||void 0===actor.system.conditions)){if(updateData["system.conditions.criticalWounds.value"]=!1,updateData["system.conditions.unconscious.value"]=!1,updateData["system.conditions.dying.value"]=!1,updateData["system.conditions.dead.value"]=!1,updateData["system.conditions.prone.value"]=!1,updateData["system.conditions.tempoInsane.value"]=!1,updateData["system.conditions.indefInsane.value"]=!1,void 0!==actor.system.status?.criticalWounds?.value&&actor.system.status?.criticalWounds.value&&(updateData["system.conditions.criticalWounds.value"]=!0),void 0!==actor.system.status?.unconscious?.value&&actor.system.status?.unconscious.value&&(updateData["system.conditions.unconscious.value"]=!0),void 0!==actor.system.status?.dying?.value&&actor.system.status?.dying.value&&(updateData["system.conditions.dying.value"]=!0),void 0!==actor.system.status?.dead?.value&&actor.system.status?.dead.value&&(updateData["system.conditions.dead.value"]=!0),void 0!==actor.system.status?.prone?.value&&actor.system.status?.prone.value&&(updateData["system.conditions.prone.value"]=!0),void 0!==actor.system.status?.tempoInsane?.value&&actor.system.status?.tempoInsane.value&&(updateData["system.conditions.tempoInsane.value"]=!0),void 0!==actor.system.status?.indefInsane?.value&&actor.system.status?.indefInsane.value&&(updateData["system.conditions.indefInsane.value"]=!0),void 0!==actor.effects){const effects=actor.effects;let changed=!1;for(let i=0,im=effects.length;i<im;i++){const effect=effects[i],match=effect.icon.match(/\/(hanging-spider|tentacles-skull|arm-sling|heart-beats|tombstone|knocked-out-stars|falling|skull|unconscious)\./);if(null!==match){let statusId="";switch(match[1]){case"hanging-spider":statusId="tempoInsane";break;case"tentacles-skull":statusId="indefInsane";break;case"arm-sling":statusId="criticalWounds";break;case"heart-beats":statusId="dying";break;case"tombstone":case"skull":statusId="dead";break;case"knocked-out-stars":case"unconscious":statusId="unconscious";break;case"falling":statusId="prone"}""!==statusId&&(updateData[`system.conditions.${statusId}.value`]||(updateData[`system.conditions.${statusId}.value`]=!0,changed=!0),effect.flags.core?.statusId!==statusId&&(effects[i]=foundry.utils.mergeObject(effect,{flags:{core:{statusId}}}),changed=!0))}}changed&&(updateData.effects=effects)}updateData["system.-=status"]=null}return updateData}static _migrateActorNpcCreature(actor,updateData){return["npc"].includes(actor.type)&&void 0!==actor.system&&(void 0===actor.system.special&&(updateData["system.special"]={checkPassed:null,checkFailled:null}),void 0===actor.system.attacksPerRound&&(updateData["system.attacksPerRound"]=1)),updateData}static _migrateActorCharacterSanity(actor,updateData){if("character"===actor.type&&void 0!==actor.system?.attribs?.san){const oneFifthSanity=Math.ceil(actor.system.attribs.san.value/5);void 0!==actor.system.attribs.san.dailyLoss&&null!==actor.system.attribs.san.dailyLoss||(updateData["system.attribs.san.dailyLoss"]=0),void 0!==actor.system.attribs.san.oneFifthSanity&&null!==actor.system.attribs.san.oneFifthSanity||(updateData["system.attribs.san.oneFifthSanity"]=" / "+oneFifthSanity),void 0!==actor.system.attribs.san.dailyLoss&&null!==actor.system.attribs.san.dailyLoss||(updateData["system.attribs.san.dailyLoss"]=0),void 0!==actor.system.indefiniteInsanityLevel&&null!==actor.system.indefiniteInsanityLevel&&void 0!==actor.system.indefiniteInsanityLevel.value&&null!==actor.system.indefiniteInsanityLevel.value||(updateData["system.indefiniteInsanityLevel.value"]=0),void 0!==actor.system.indefiniteInsanityLevel&&null!==actor.system.indefiniteInsanityLevel&&void 0!==actor.system.indefiniteInsanityLevel.max&&null!==actor.system.indefiniteInsanityLevel.max||(updateData["system.indefiniteInsanityLevel.max"]=oneFifthSanity),void 0!==actor.system.attribs.mp&&(void 0!==actor.system.attribs.mp.value&&null!==actor.system.attribs.mp.value||(updateData["system.attribs.mp.value"]=oneFifthSanity),void 0!==actor.system.attribs.mp.max&&null!==actor.system.attribs.mp.max||(updateData["system.attribs.mp.max"]=oneFifthSanity)),void 0!==actor.system.notes&&null!==actor.system.notes||(updateData["system.notes"]="")}return updateData}static _migrateMacroArtwork(table,updateData){const image=String(table.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);return null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),updateData}static _migrateTableArtwork(table,updateData){let image=String(table.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]);for(const[k,v]of Object.entries(table.results))image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData.results&&(updateData.results=table.results),updateData.results[k].img="systems/CoC7/assets/icons/"+image[1]);return updateData}static _migrateTokenArtwork(token,updateData){const image=String(token.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);return null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),updateData}}const nameCharacters="\\u3000\\u3400-\\u4DBF\\u4E00-\\u9FFF\\w\\(\\)\\-\\/&\"'"+CoC7Utilities.quoteRegExp("áéíóàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃĀÑÕäëïöüÿÄËÏÖÜŸàèçÇßØøÅåÆæœ“”«»ąćęłńóśźżĄĆĘŁŃÓŚŹŻ"),keys={en:{description:"CoC7.English",dbNone:"none",armorNone:"none",attacksPerRoundNone:"none",sanLossNone:"none",fulldb:"(Damage Bonus|DB)",halfdb:"(½|half)",sectionCombats:"\n(?:combat|fighting attacks)[:\n]",newCombatHeader:"\nCombat\n",sectionSkills:"\n(?:skills(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:languages)[:\n]",sectionSpells:"\n(?:spells)[:\n]",handgun:"(?<type> Gun|Revolver|Pistol|Handgun|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Rifle|Shotgun|Carbine|Gauge |Lee-Enfield|Elephant)",smb:"(?<type>Submachine Gun|Thompson)",machineGun:"(?<type>Browning|Vickers)",launched:"(?<type>Molotov|Grenade|Dynamite)",example:"Example Character, age 27\nSTR 75 CON 60 SIZ 80 DEX 70 APP 60 INT 80\nPOW 50 EDU 85 SAN 55 HP 14 DB: 1D4\nBuild: 1 Move: 7 MP: 10 Luck: 40 Armor: 1\nAttacks per round: 3 SAN loss: 1d4/1d8\nCombat\nBite 50% (25/10), damage 1D6\nBrawl 30% (15/6), damage 1D3\nDerringer 40% (20/8), damage 1D8+1\nDodge 50% (25/10)\nSkills\nAnimal Handling 55%, Charm 30%, First Aid 25%, Disguise 20%,\nListen 50%, Medicine 45%, Persuade 25%, Psychology 75%,\nScience (Astronomy) 90%, Science (Botany) 35%, Science (Zoology) 10%,\nSpot Hidden 35%, Stealth 10%\nLanguages: English 80%, Eklo 5%.\nSpells: Summon NPC, Dispel NPC."},de:{description:"CoC7.German",dbNone:"none",armorNone:"none",attacksPerRoundNone:"none",sanLossNone:"none",diceShort:"w|d",fulldb:"(Schadensbonus|Sb)",halfdb:"(½|1/2 Schadensbonus|Sb/2)",sectionCombats:"\n(?:Kampf|Angriff:|ANGRIFFE)[:\n]",newCombatHeader:"\nKampf\n",sectionSkills:"\n(?:Fertigkeiten(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Sprachen)[:\n]",sectionSpells:"\n(?:Zauber)[:\n]",handgun:"(?<type> Gun|Revolver|Pistole|Handgun|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Gewehr|Schrotflinte|Carabiner|Karabiner|Gauge |Lee-Enfield|Elefanten)",smb:"(?<type>Submachine Gun|Thompson)",machineGun:"(?<type>Browning|Vickers)",launched:"(?<type>Molotov|Granate|Dynamit)",example:"Vorname Nachname\nAlter: 29\nBeruf: Ein Beruf\nST 50\nMA 60\nKO 60\nGE 60\nGR 55\nER 65\nIN 80\nBI 85\nTrefferpunkte: 11\nGeistige Stabilität: 60\nSchadensbonus: 0\nStatur: 0\nMagiepunkte: 12\nBewegungsweite: 8\n\nKampf\nAngriffe: 1\nHandgemenge 30% (15/6), Schaden 1D3\nMesser 30% (15/6), Schaden 1D4\nAusweichen 30% (15/6)\n\nFertigkeiten: Anthropologie 70% (35/14), Archäologie 30% (15/6), Bibliotheksnutzung 50% (25/10), Erste Hilfe 50% (25/10), Finanzkraft 40% (20/8), Geschichte 60% (30/12), Klettern 50% (25/10)\n\nSprachen: Englisch 85% (42/17); Deutsch 45% (22/9), Latein 45% (22/9)"},pl:{description:"CoC7.Polish",dbNone:"brak",armorNone:"brak",attacksPerRoundNone:"brak",sanLossNone:"brak",diceShort:"k|d",fulldb:"(Modyfikator Obrażeń|MO)",halfdb:"(½|1/2 MO|MO/2)",sectionCombats:"\n(?:Walka|Ataki)[:\n]",newCombatHeader:"\nWalka\n",sectionSkills:"\n(?:Umiejętności(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Języki)[:\n]",sectionSpells:"\n(?:Zaklęcia)[:\n]",handgun:"(?<type> Pistolet|Rewolwer|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Karabin|Strzelba|Wiatrówka|Garand|Gauge |Lee-Enfield|Strzelba na słonie)",smb:"(?<type>Pistolet maszynowy|Thompson)",machineGun:"(?<type>Browning|Vickers)",launched:"(?<type>Mołotowa|Granat|Laska dynamitu|Dynamit)",example:"Przykładowa postać, 27 lat\nBibliotekarz\nS 75 KON 60 BC 80 ZR 70 WYG 60 INT 80\nMOC 50 WYK 85 P 55 PW 14 MO: 1D4\nKrzepa: 1 Ruch: 7 PM: 10 Szczęście: 40 Pancerz: 1\nAtaki w rundzie: 3 Utrata Poczytalności: 1K4/1K8\nWalka\nUgryzienie 50% (25/10), obrażenia 1K6\nWalka 30% (15/6), obrażenia 1K3\nDerringer 40% (20/8), obrażenia 1K8+1\nUnik 50% (25/10)\nUmiejętności\nTresura Zwierząt 55%, Urok Osobisty 30%, Pierwsza Pomoc 25%, Ukrywanie 20%,\nNasłuchiwanie 50%, Medycyna 45%, Przekonywanie 25%, Psychologia 75%,\nNauka (Astronomia) 90%, Nauka (Botanika) 35%, Nauka (Zoologia) 10%,\nSpostrzegawczość 35%, Ukrywanie 10%\nJęzyki: Angielski 80%, Eklo 5%.\nZaklęcia: Przyzwanie NPC, Odesłanie NPC."},fr:{description:"CoC7.French",dbNone:"Acune",armorNone:"(?:Acune|aucune)",attacksPerRoundNone:"Acune",sanLossNone:"Acune",fulldb:"(BD|Bonus aux dommages|Impact|Imp)",halfdb:"(½|1/2 Imp|Imp/2)",sectionCombats:"\n(?:Combat|Armes|Attaques)[:\n]",newCombatHeader:"\nCombat\n",sectionSkills:"\n(?:Compétences(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Langues?)\\s*[:\n]",sectionSpells:"\n(?:Sortilèges\\s*|Sorts)[:\n]",handgun:"(?<type>Revolver|Pistolet|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Carabine|Lee-Enfield|Fusil)",smb:"(?<type>SMG|Thompson)",machineGun:"(?<type>Browning|Vickers|Mitrailleuse)",launched:"(?<type>Boomerang de guerre|Javeline|Pierre|Shuriken|Bâton de dynamite|Cocktail Molotov|Grenade à main|Molotov|Grenade|Dynamite)",example:"Example Character, 27 ans\nFOR 75 CON 60 TAI 80 DEX 70 APP 60 INT 80\nPOU 50 ÉDU 85 SAN 55 PV 14 BD: 1D4\nCarrure: 1 Mvt: 7 PM: 10 Chance: 40 Armure: 1\nAttaques par round 3 Perte de SAN: 1d4/1d8\nAttaques\nBite 50% (25/10), dommage 1D6\nBrawl 30% (15/6), dommage 1D3\nDerringer 40% (20/8), dommage 1D8+1\nEsquiver 50% (25/10)\nCompétences\nAnimal Handling 55%, Charm 30%, First Aid 25%, Disguise 20%,\nListen 50%, Medicine 45%, Persuade 25%, Psychology 75%,\nScience (Astronomy) 90%, Science (Botany) 35%, Science (Zoology) 10%,\nSpot Hidden 35%, Stealth 10%\nLangue: English 80%, Eklo 5%.\nSortilèges: Summon NPC, Dispel NPC."},es:{description:"CoC7.Spanish",dbNone:"ninguna",armorNone:"ninguna",attacksPerRoundNone:"ninguno",sanLossNone:"no",fulldb:"(BD|bd|bonificación de daño)",halfdb:"(½|medio daño|mitad|daño a la mitad)",sectionCombats:"\n(?:Combate|Armas)[:\n]",newCombatHeader:"\nCombate\n",sectionSkills:"\n(?:Habilidades(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Idiomas|Lenguajes|Lenguas)[:\n]",sectionSpells:"\n(?:Conjuros|Hechizos)[:\n]",handgun:"(?<type>Revolver|Pistola|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Rifle|Carabina|Lee-Enfield|Caza Elefantes|Fusil|Escopeta|Galga|Recortada)",smb:"(?<type>Subfusil|Thompson)",machineGun:"(?<type>Browning|Vickers|Ametralladora)",launched:"(?<type>Molotov|Granada|Dinamita)",example:"Example Character, 27 años\nFUE 75 CON 60 TAM 80 DES 70 APA 60 INT 80\nPOD 50 EDU 85 COR 55 PV 14 BD: 1D4\nCorpulencia: 1 Movimiento: 7 PM: 10 Suerte: 40 Armadura: 1\nNúmero de Ataques 3 Pérdida de cordura: 1d4/1d8\nCombate\nBite 50% (25/10), daño 1D6\nBrawl 30% (15/6), daño 1D3\nDerringer 40% (20/8), daño 1D8+1\nEsquivar 50% (25/10)\nHabilidades\nAnimal Handling 55%, Charm 30%, First Aid 25%, Disguise 20%,\nListen 50%, Medicine 45%, Persuade 25%, Psychology 75%,\nScience (Astronomy) 90%, Science (Botany) 35%, Science (Zoology) 10%,\nSpot Hidden 35%, Stealth 10%\nIdiomas: English 80%, Eklo 5%.\nConjuros: Summon NPC, Dispel NPC."},"zh-TW":{description:"CoC7.TraditionalChinese",dbNone:"none",armorNone:"none",attacksPerRoundNone:"none",sanLossNone:"none",fulldb:"(Damage Bonus|DB|傷害加值)",halfdb:"(½|half)",sectionCombats:"\n(?:combat|fighting attacks|戰鬥技能|戰鬥列表|武器)[:\n]",newCombatHeader:"\nCombat\n",sectionSkills:"\n(?:(?:Skills|技能列表)(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Languages|語言)[:\n]",sectionSpells:"\n(?:spells|咒文列表|咒文)[:\n]",handgun:"(?<type> 遂發槍|\\.22短口自動手槍|\\.25短口手槍(單管)|\\.32或7\\.65mm左輪手槍|\\.32或7\\.65mm自動手槍|\\.357 Magnum左輪手槍|\\.38或9mm左輪手槍|\\.38自動手槍|貝雷塔M9|格洛克17|9mm自動手槍|魯格P08|\\.41左輪手槍|\\.44馬格南左輪手槍|\\.45左輪手槍|\\.45自動手槍|沙漠之鷹|Gun|Revolver|Pistol|Handgun|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>步槍|卡賓槍|半自動步槍|獵象槍|Rifle|Shotgun|Carbine|Gauge |Lee-Enfield|Elephant)",smb:"(?<type>Submachine Gun|Thompson|衝鋒槍)",machineGun:"(?<type>Browning|Vickers|機槍)",launched:"(?<type>Molotov|Grenade|Dynamite爆炸物|手榴彈|重武器)",example:"示範角色, 年齡 27\n力量 75 體質 60 體型 80 敏捷 70 外貎 60 智力 80\n意志 50 教育 85 SAN 55 HP 14 DB: 1D4\n體格: 1 Move: 7 MP: 10 幸運: 40 護甲: 1\n攻擊次數: 3 理智喪失: 1d4/1d8\n戰鬥列表\n咬 50% (25/10), 傷害 1D6\n空手 30% (15/6), 傷害 1D3\n手槍 40% (20/8), 傷害 1D8+1\n閃避 50% (25/10)\n技能列表\n動物馴養 55%, 取悅 30%, 急救 25%, 潛行 20%,\n聆聽 50%, 藥學 45%, 精神分析 25%, 心理學 75%,\n科學 (司法科學) 90%, 科學 (密碼學) 35%, \n偵查 35%, 喬裝 10%\n語言: 粵語 80%, 讀唇 5%.\n咒文: 召喚 NPC, 指揮 NPC."}},translations={en:{age:"(?<![a-z])age(\\s*:)?\\s+(?<age>\\d+)[,\\s]*",occupation:"[,\\s]*Occupation(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])STR(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])CON(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])SIZ(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])POW(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])DEX(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])APP(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])EDU(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:SAN|Sanity)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:HP|Hit points)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:MP|Magic points)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.en.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D\\d+)?|"+keys.en.dbNone+")[,\\s\n]*",build:"(?<![a-z])Build(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Armor(\\s*:)?\\s+(?<armor>"+keys.en.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])Move(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Luck(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Attacks per round|# Attacks)(\\s*:)?\\s+(?<attacksPerRound>"+keys.en.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Sanity loss|SAN loss)(\\s*:)?\\s+(?<sanLoss>"+keys.en.sanLossNone+"|\\dD?[+\\d]*\\/\\dD?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*damage)?\\s+(?<damage>(:?(:?\\d+d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.en.fulldb+"|"+keys.en.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Dodge)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Fighting|Firearms|Brawl|Bite)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.en.sectionCombats+"|"+keys.en.sectionSkills+"|"+keys.en.sectionLangauges+"|"+keys.en.sectionSpells+")"},de:{age:"(?<![a-z])Alter(\\s*:)?\\s+(?<age>\\d+)[,\\s]*",occupation:"[,\\s]*Beruf(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])ST(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])KO(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])GR(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])IN(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])MA(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])GE(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])ER(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])BI(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:gS|STA|Geistige Stabilität)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:TP|Trefferpunkte)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:MP|Magiepunkte)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.de.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D|W\\d+)?|"+keys.de.dbNone+")[,\\s\n]*",build:"(?<![a-z])(?:Statur|Stat.)(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Panzerung(\\s*:)?\\s+(?<armor>"+keys.de.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])(?:BW|Bewegungsweite)(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Glück(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Angriffe pro Runde|Angriffe|Pro Runde)(\\s*:)?\\s+(?<attacksPerRound>"+keys.de.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Stabilitätsverlust)(\\s*:)?\\s+(?<sanLoss>"+keys.de.sanLossNone+"|\\d[DW]?[+\\d]*\\/\\d[DW]?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*Schaden)?\\s+(?<damage>(:?(:?\\d+w|d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.de.fulldb+"|"+keys.de.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d|w)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Ausweichen)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,;]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Angriffe|Handgemenge|Nahkampf|Faustfeuerwaffe|Beißen)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.de.sectionCombats+"|"+keys.de.sectionSkills+"|"+keys.de.sectionLangauges+"|"+keys.de.sectionSpells+")"},pl:{age:"(?<age>\\d+)\\s+(?:lata|lat|rok)[,\\s]*",occupation:"[,\\s]*Zawód(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])S(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])KON(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])BC(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])MOC(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])ZR(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])WYG(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])WYK(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:P|Poczytalność)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:PW|Punkty Wytrzymałości)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:PM|Punkty Magii)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.pl.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D|K\\d+)?|"+keys.pl.dbNone+")[,\\s\n]*",build:"(?<![a-z])Krzepa(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Pancerz(\\s*:)?\\s+(?<armor>"+keys.pl.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])Ruch(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Szczęście(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Ataki w rundzie|# Ataki)(\\s*:)?\\s+(?<attacksPerRound>"+keys.pl.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Utrata Poczytalności|utrata P)(\\s*:)?\\s+(?<sanLoss>"+keys.pl.sanLossNone+"|\\d[DK]?[+\\d]*\\/\\d[DK]?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*obrażenia)?\\s+(?<damage>(:?(:?\\d+k|d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.pl.fulldb+"|"+keys.pl.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Unik)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Walka|Broń Palna|Bijatyka|Ugryzienie)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.pl.sectionCombats+"|"+keys.pl.sectionSkills+"|"+keys.pl.sectionLangauges+"|"+keys.pl.sectionSpells+")"},fr:{age:"(?<age>\\d+)\\s*ans(?![a-z])[,\\s]*",occupation:"[,\\s]*Occupation(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])FOR(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])CON(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])TAI(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])POU(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])DEX(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])APP(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])ÉDU(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<!([a-z]|de\\s))(?:SAN|Santé Mentale)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:PV|Points de vie)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:PM|Points de magie)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.fr.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D\\d+)?|"+keys.fr.dbNone+")[,\\s\n]*",build:"(?<![a-z])Carrure(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])(?:Armure|Protection)(\\s*:)?\\s+(?<armor>"+keys.fr.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])(?:Mvt|Mouvement|Déplacement)(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Chance(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Attaques par round)(\\s*:)?\\s+(?<attacksPerRound>"+keys.fr.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Perte de Santé mentale|Perte de SAN)(\\s*:)?\\s+(?<sanLoss>"+keys.fr.sanLossNone+"|\\dD?[+\\d]*\\/\\dD?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*(?:dommage|dégâts))?\\s+(?<damage>(:?(:?\\d+d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.fr.fulldb+"|"+keys.fr.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Esquiver?)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Au contact|À distance|Combat rapproché|Bite)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.fr.sectionCombats+"|"+keys.fr.sectionSkills+"|"+keys.fr.sectionLangauges+"|"+keys.fr.sectionSpells+")"},es:{age:"(?<age>\\d+)\\s*a[ñÑ]os(?![a-z])[,\\s]*",occupation:"[,\\s]*Ocupación(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])FUE(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])CON(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])TAM(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])POD(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])DES(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])APA(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])EDU(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:COR|Cordura)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:PV|Puntos de vida|P\\. ?V\\.)(\\s*:)?\\s+(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:PM|Puntos Mágicos|Puntos de Magia)(\\s*:)?\\s+(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.es.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D\\d+)?|"+keys.es.dbNone+")[,\\s\n]*",build:"(?<![a-z])Corpulencia(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Armadura(\\s*:)?\\s+(?<armor>"+keys.es.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])Movimiento(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Suerte(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Número de Ataques)(\\s*:)?\\s+(?<attacksPerRound>"+keys.es.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Pérdida de cordura|Pérdida de COR)(\\s*:)?\\s+(?<sanLoss>"+keys.es.sanLossNone+"|\\dD?[+\\d]*\\/\\dD?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*daño)?\\s+(?<damage>(:?(:?\\d+d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.es.fulldb+"|"+keys.es.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Esquivar)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Combatir|Armas de fuego|Pelea|Mordisco)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.es.sectionCombats+"|"+keys.es.sectionSkills+"|"+keys.es.sectionLangauges+"|"+keys.es.sectionSpells+")"},"zh-TW":{age:"(?<![a-z])age|年齡(\\s*:)?\\s*(?<age>\\d+)[,\\s]*",occupation:"[,\\s]*Occupation(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])STR|力量(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])CON|體質(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])SIZ|體型(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT|智力(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])POW|意志(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])DEX|敏捷(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])APP|外貎(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])EDU|教育(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:SAN|Sanity|理智)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:HP|Hit points|生命)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:MP|Magic points)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys["zh-TW"].fulldb+")(\\s*:)?\\s*(?<db>[+-]?\\d+(?:d\\d+|D\\d+)?|"+keys["zh-TW"].dbNone+")[,\\s\n]*",build:"(?<![a-z])Build|體格(\\s*:)?\\s*(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Armor|護甲(\\s*:)?\\s*(?<armor>"+keys["zh-TW"].armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])Move(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Luck|幸運(\\s*:)?\\s*(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Attacks per round|# Attacks|攻擊次數|# 攻擊)(\\s*:)?\\s*(?<attacksPerRound>"+keys["zh-TW"].attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Sanity loss|SAN loss|理智喪失|SAN值損失|SAN值喪失|扣SAN)(\\s*:)?\\s*(?<sanLoss>"+keys["zh-TW"].sanLossNone+"|\\dD?[+\\d]*\\/\\dD?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*(?:damage|傷害))?\\s+(?<damage>(:?(:?\\d+d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys["zh-TW"].fulldb+"|"+keys["zh-TW"].halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Dodge|閃避|閃躲)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%?(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(近戰技能|射擊技能|Brawl|Bite)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys["zh-TW"].sectionCombats+"|"+keys["zh-TW"].sectionSkills+"|"+keys["zh-TW"].sectionLangauges+"|"+keys["zh-TW"].sectionSpells+")"}};class CoC7ActorImporterRegExp{static checkLanguage(lang=null){return lang||(lang=game.i18n.lang),void 0===translations[lang]&&(lang="en"),lang}static getExampleText(lang){let example=keys.en.example;return void 0!==keys[lang]&&(example=keys[lang].example),example}static getTranslations(){const output={};for(const key in keys)output[key]=keys[key].description;return output}static getKeys(lang){return keys[lang]||keys.en}static getRegularExpressions(lang){return translations[lang]||translations.en}}class CoC7ActorImporter{constructor(){this.parsed={},this.itemLocations=""}static get asNumber(){return"n"}static get asString(){return"s"}getRegEx(regex,modifiers="iu"){return"RegExp"===regex.constructor?.name?regex:new RegExp(regex,modifiers)}cleanString(s){return s.replace(/(\n|\r)/g," ").replace(/^\s*/,"").replace(/\s*\.?\s*\.?$/,"")}translateRoll(s){if(void 0===s)return s;if(void 0!==this.keys.diceShort){const regEx=new RegExp("(?<n1>\\d+)"+this.keys.diceShort+"(?<n2>\\d+)","iug");return s.replace(regEx,"$<n1>D$<n2>")}return s}toHTML(s){return 0===s.trim().length||0===(s=s.trim().split("\n").map((text=>text.trim().replace(/^[,.\s]+$/,""))).filter((text=>text)).join("</p><p>")).length?"":"<p>"+s+"</p>"}check(regExKey,{removeFromText=!0,saveKeys=!0,type=CoC7ActorImporter.asString,text=!1,requiredGroup=!1}={}){let output=!1,regExp=!1;if(void 0!==this.regEx[regExKey]?regExp=this.getRegEx(this.regEx[regExKey]):void 0!==this.keys[regExKey]&&(regExp=this.getRegEx(this.keys[regExKey])),!1!==regExp){!1===text&&(text=this.text);const check=regExp.exec(text);let value=null;if(null!==check&&(!1===requiredGroup||void 0!==(check.groups||{})[requiredGroup])){if(output=check.groups||{},removeFromText&&(this.text=this.text.replace(check[0].trim(),"\n").trim()),saveKeys)for(const key of Object.keys(check.groups))switch(type){case CoC7ActorImporter.asString:this.parsed[key]=String(check.groups[key]).replace("\n"," ");break;case CoC7ActorImporter.asNumber:value=Number(check.groups[key]),isNaN(value)||(this.parsed[key]=Number(check.groups[key]))}output["-source"]=check[0],output["-index"]=check.index}}return output}processCombat(text){if(0===text.trim().length)return;let weapon,dodge,newline;CONFIG.debug.CoC7Importer&&console.log("combat text",text);let lastPercent=!1,maxLoops=40;do{if(maxLoops--,text=text.trim(),dodge=this.check("weaponDodge",{saveKeys:!1,text}))text=text.replace(dodge["-source"],"\n"),void 0===this.parsed.skills&&(this.parsed.skills=[]),this.parsed.skills.push({name:this.cleanString(dodge.name),value:Number(dodge.percentage),push:!1});else if(weapon=this.check("weapon",{saveKeys:!1,text,requiredGroup:!1===lastPercent&&"percentage"})){text=text.replace(weapon["-source"],"\n");const name=this.cleanString(weapon.name||"");let damage=this.translateRoll(this.cleanString(weapon.damage||""));const isRanged=!!(this.check("handgun",{text:name,removeFromText:!1,saveKeys:!1})||this.check("rifle",{text:name,removeFromText:!1,saveKeys:!1})||this.check("smb",{text:name,removeFromText:!1,saveKeys:!1})||this.check("machineGun",{text:name,removeFromText:!1,saveKeys:!1})||this.check("launched",{text:name,removeFromText:!1,saveKeys:!1}));let found;lastPercent=null===weapon.percentage||void 0===weapon.percentage||Number(weapon.percentage);let ahdb=!1,addb=!1;do{found=this.getRegEx("\\s*[+-]?\\s*("+this.keys.halfdb+")\\s*("+this.keys.fulldb+")?[-+]?\\s*("+this.parsed.db.replace(/^[-+]/,"")+")?").exec(damage),found?(ahdb=!0,damage=damage.replace(found[0],"")):(found=this.getRegEx("\\s*[+-]?\\s*("+this.keys.fulldb+")\\s*[-+]?\\s*("+this.parsed.db.replace(/^[-+]/,"")+")?").exec(damage),found&&(addb=!0,damage=damage.replace(found[0],"")))}while(found);const damages=damage.split("/"),isShotgun=3===damages.length,data={name,type:"weapon",system:{skill:{id:lastPercent},properties:{},range:{normal:{value:isShotgun?10:0,damage:damages[0]},long:{value:isShotgun?20:0,damage:isShotgun?damages[1]:""},extreme:{value:isShotgun?50:0,damage:isShotgun?damages[2]:""}}}};data.system.properties.shotgun=isShotgun,data.system.properties.rngd=isRanged||isShotgun,data.system.properties.melee=!data.system.properties.rngd,data.system.properties.ahdb=ahdb,data.system.properties.addb=addb,void 0===this.parsed.attacks&&(this.parsed.attacks=[]),this.parsed.attacks.push(data)}else(newline=text.match(/^(.+)\n/))?text=text.replace(newline[0],"\n"):(newline=text.match(/^[^\n]+$/))&&(text="")}while(maxLoops>0&&(weapon||dodge||text));0===maxLoops&&(ui.notifications.warn(game.i18n.localize("CoC7.ErrorUnexpectedWeaponText")),console.debug("Unexpected weapons:",text))}processSkills(text,key="skills"){if(0===text.trim().length)return;const breaks=text.split(/\.\r?\n/);let skill;breaks.length>1&&(text=breaks[0]);let maxLoops=40;do{maxLoops--,text=text.trim(),skill=this.check("skill",{saveKeys:!1,text}),skill&&(text=text.replace(skill["-source"],"\n"),void 0===this.parsed[key]&&(this.parsed[key]=[]),this.parsed[key].push({name:this.cleanString(skill.name),value:Number(skill.percentage)}))}while(maxLoops>0&&skill);0===maxLoops&&(ui.notifications.warn(game.i18n.localize("CoC7.ErrorUnexpectedSkillsText")),console.debug("Unexpected skills:",text))}processSpells(text){if(0===text.trim().length)return;const breaks=text.split(/\.\r?\n/);breaks.length>1&&(text=breaks[0]);const spellsArr=text.replace(/([\n\r]+)/g," ").split(/(?<!\([^)]+),/);this.text=this.text.replace(text.trim(),"\n");for(const spell of spellsArr)void 0===this.parsed.spells&&(this.parsed.spells=[]),this.parsed.spells.push(this.cleanString(spell))}async parseCharacter(text){this.text=String(text).trim().replace(/\u2013|\u2014|\u2212/g,"-").replace(/\u2019/g,"'").replace(/[\udbc0-\udbfe][\udc00-\udfff]/g,"");let header,min=this.text.length,check=this.check("str",{type:CoC7ActorImporter.asNumber})["-index"];if(isNaN(check)||(min=Math.min(min,check)),check=this.check("con",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("siz",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("int",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("pow",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("dex",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("app",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("edu",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("san",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("hp",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("mp",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),min>0){if(header=this.text.substr(0,min),check=this.check("name",{text:header}),!1===check?this.parsed.name=game.i18n.localize("CoC7.ImportedUnnamedCharacter"):header=header.replace(check["-source"],"\n"),check=this.check("age",{text:header}),!1!==check&&(header=header.replace(check["-source"],"\n")),!this.check("occupation",{text:header})&&""!==header.trim()){let occupation=header;header.indexOf(".")>-1&&(occupation=header.substr(0,header.indexOf(".")+1)),this.parsed.occupation=occupation.replace(/([\n\r]+)/g," ").trim().replace(/,$/,""),this.text=this.text.replace(occupation.trim(),"\n")}}else this.parsed.name=game.i18n.localize("CoC7.ImportedUnnamedCharacter");if(void 0!==this.parsed.occupation&&void 0===this.parsed.age){const occupationAge=this.parsed.occupation.match(/^(?<age>\d+),(?<occupation>.+)$/);occupationAge&&(this.parsed.age=occupationAge.groups.age,this.parsed.occupation=occupationAge.groups.occupation.trim())}this.check("db")&&!this.check("dbNone",{removeFromText:!1,saveKeys:!1,text:this.parsed.db})||(this.parsed.db="0"),this.parsed.db=this.translateRoll(this.parsed.db),this.check("build"),this.check("armor")&&!this.check("armorNone",{removeFromText:!1,saveKeys:!1,text:this.parsed.armor})||(this.parsed.armor="0"),this.check("mov",{type:CoC7ActorImporter.asNumber}),this.check("lck",{type:CoC7ActorImporter.asNumber}),this.check("sanLoss"),this.parsed.sanLoss=this.translateRoll(this.parsed.sanLoss),this.check("attacksPerRound")&&this.check("attacksPerRoundNone",{removeFromText:!1,saveKeys:!1,text:this.parsed.attacksPerRound})&&(this.parsed.attacksPerRound="0"),this.text="\n"+this.text;let sections=this.getRegEx("("+this.keys.sectionCombats+")","i");null===this.text.match(sections)&&(sections=this.check("guessStartCombat",{saveKeys:!1,removeFromText:!1}),sections&&(this.text=[this.text.slice(0,sections["-index"]),this.keys.newCombatHeader,this.text.slice(sections["-index"])].join("")));const regExpSections=this.getRegEx(this.regEx.sections,"i");if(sections=this.text.split(regExpSections),null!==sections)for(let i=0,im=sections.length;i<im;i++)null!==sections[i].match(this.getRegEx("("+this.keys.sectionCombats+")","i"))&&void 0!==sections[i+1]?(this.text=("\n"+this.text+"\n").replace(sections[i],"\n").trim(),this.processCombat(sections[i+1]),i++):null!==sections[i].match(this.getRegEx("("+this.keys.sectionSkills+")","i"))&&void 0!==sections[i+1]?(this.text=("\n"+this.text+"\n").replace(sections[i],"\n").trim(),this.processSkills(sections[i+1]),i++):null!==sections[i].match(this.getRegEx("("+this.keys.sectionLangauges+")","i"))&&void 0!==sections[i+1]?(this.text=("\n"+this.text+"\n").replace(sections[i],"\n").trim(),this.processSkills(sections[i+1],"languages"),i++):null!==sections[i].match(this.getRegEx("("+this.keys.sectionSpells+")","i"))&&void 0!==sections[i+1]&&(this.text=("\n"+this.text+"\n").replace(sections[i],"\n").trim(),this.processSpells(sections[i+1]),i++);return this.parsed.gmnotes=this.toHTML(this.text),this.parsed}disableAttribAuto(key,attribValue,check,updateData){const value=Math.max(0,Number(attribValue));return value!==Number(check)&&(updateData[`system.attribs.${key}.auto`]=!1,updateData[`system.attribs.${key}.value`]=value,"build"===key?updateData[`system.attribs.${key}.current`]=value:updateData[`system.attribs.${key}.max`]=value),updateData}async createEntity(characterData,entityType){const importedCharactersFolder=await CoC7Utilities.createImportCharactersFolderIfNotExists();"npc"!==entityType&&(entityType="creature");const actorData={name:characterData.name,type:entityType,folder:importedCharactersFolder.id,data:characterData.actor},npc=await Actor.create(actorData);await npc.createEmbeddedDocuments("Item",characterData.items,{renderSheet:!1});const updateData={};let value=0;void 0!==characterData.actor.attribs.hp?.value&&this.disableAttribAuto("hp",characterData.actor.attribs.hp.value,npc.hpMax,updateData),void 0!==characterData.actor.attribs.mp?.value&&this.disableAttribAuto("mp",characterData.actor.attribs.mp.value,npc.mpMax,updateData),void 0!==characterData.actor.attribs.mov?.value&&this.disableAttribAuto("mov",characterData.actor.attribs.mov.value,npc.mov,updateData),void 0!==characterData.actor.attribs.build?.value&&this.disableAttribAuto("build",characterData.actor.attribs.build.value,npc.build,updateData),void 0!==characterData.actor.attribs.db?.value&&(value=String(characterData.actor.attribs.db.value).replace(/^\+\s*/,""),value!==String(npc.db)&&(updateData["system.attribs.db.auto"]=!1,updateData["system.attribs.db.value"]=value)),Object.keys(updateData).length>0&&(CONFIG.debug.CoC7Importer&&console.debug("updateData:",updateData),await npc.update(updateData));const updateItemData=[];let lastWeaponSkill=null;for(const pair of this.weaponSkills){!1!==pair[0]&&(lastWeaponSkill=npc.items.filter((i=>i.name===pair[0].name&&"skill"===i.type&&Number(i.system.value)===Number(pair[0].system.value))));const weapon=npc.items.filter((i=>i.name===pair[1].name&&"weapon"===i.type&&i.system.range.normal.damage===pair[1].system.range.normal.damage));lastWeaponSkill[0]&&weapon[0]&&updateItemData.push({_id:weapon[0].id,"system.skill.main.id":lastWeaponSkill[0].id,"system.skill.main.name":lastWeaponSkill[0].name})}return updateItemData.length>0&&(CONFIG.debug.CoC7Importer&&console.debug("updateItemData:",updateItemData),await npc.updateEmbeddedDocuments("Item",updateItemData)),npc}actorData(pc){const data={characteristics:{},attribs:{},infos:{},special:{},description:{keeper:""},flags:{locked:!1,displayFormula:!1}};for(const key of["str","con","siz","dex","app","int","pow","edu"])void 0!==pc[key]&&(data.characteristics[key]={value:Number(pc[key])});for(const key of["san","mov","build","armor","lck","hp","mp"])void 0!==pc[key]&&(data.attribs[key]={value:Number(pc[key])});void 0!==pc.db&&(data.attribs.db={value:pc.db});for(const key of["age","occupation"])void 0!==pc[key]&&(data.infos[key]=pc[key]);if(void 0!==pc.sanLoss){const[passed,failed]=pc.sanLoss.split("/");data.special.sanLoss={checkPassed:passed,checkFailled:failed}}return void 0!==pc.attacksPerRound&&(data.special.attacksPerRound=Number(pc.attacksPerRound)),data.description.keeper=pc.gmnotes,CONFIG.debug.CoC7Importer&&console.debug("actorData:",data),data}async itemsData(pc){const items=[];if(this.weaponSkills=[],void 0!==pc.attacks)for(const attack of pc.attacks){let skill=!1;!0!==attack.system?.skill?.id&&(skill=await this.weaponSkill(attack),items.push(skill)),attack.system.skill.id=null,items.push(attack),this.weaponSkills.push([skill,attack])}if(void 0!==pc.skills)for(const skill of pc.skills){const existing=await CoC7Utilities.guessItem("skill",skill.name,{source:this.itemLocations});if(void 0!==existing){const cloned=existing.toObject();cloned.system.base=skill.value,void 0!==skill.push&&(cloned.system.properties.push=skill.push),items.push(foundry.utils.duplicate(cloned))}else{const options={};void 0!==skill.push&&(options.push=skill.push),items.push(CoCActor.emptySkill(skill.name,skill.value,options))}}if(void 0!==pc.languages)for(const skill of pc.languages){const existing=await CoC7Utilities.guessItem("skill",skill.name,{source:this.itemLocations});if(void 0!==existing){const cloned=existing.toObject();cloned.system.base=skill.value,items.push(foundry.utils.duplicate(cloned))}else items.push(CoCActor.emptySkill(skill.name,skill.value,{img:CoC7Item.iconLanguage,specialization:"Language"}))}if(void 0!==pc.spells)for(const name of pc.spells){const existing=await CoC7Utilities.guessItem("spell",name,{source:this.itemLocations});if(void 0!==existing){const cloned=existing.toObject();items.push(foundry.utils.duplicate(cloned))}else items.push(CoCActor.emptySpell(name))}return items}async weaponSkill(weapon){let skill=null;if(this.getRegEx("handgun").exec(weapon.name)?(skill=await CoC7Utilities.guessItem("skill","Handgun",{combat:!0,source:this.itemLocations}),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Handgun skill: ${skill}`)):this.getRegEx("rifle").exec(weapon.name)?(skill=await CoC7Utilities.guessItem("skill","Rifle/Shotgun",{combat:!0,source:this.itemLocations}),skill||(skill=await CoC7Utilities.guessItem("skill","Rifle",{combat:!0,source:this.itemLocations}),skill||(skill=await CoC7Utilities.guessItem("skill","Shotgun",{combat:!0,source:this.itemLocations}))),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Rifle skill: ${skill}`)):this.getRegEx("smb").exec(weapon.name)?(skill=await CoC7Utilities.guessItem("skill","Submachine Gun",{combat:!0,source:this.itemLocations}),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Submachine Gun skill: ${skill}`)):this.getRegEx("machineGun").exec(weapon.name)?(skill=await CoC7Utilities.guessItem("skill","Machine Gun",{combat:!0,source:this.itemLocations}),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Machine Gun skill: ${skill}`)):this.getRegEx("launched").exec(weapon.name)&&(skill=await CoC7Utilities.guessItem("skill","Launch",{combat:!0,source:this.itemLocations}),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Launch skill: ${skill}`)),null!=skill){return skill.clone({system:{value:weapon.system?.skill?.id}})}const firearms=weapon.system?.properties?.rngd,parts=CoC7Item.getNamePartsSpec(weapon.name,game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName")),newSkill={type:"skill",name:parts.name,system:{skillName:parts.skillName,specialization:parts.specialization,properties:{special:!0,fighting:!firearms,firearm:firearms,combat:!0},base:weapon.system?.skill?.id,value:weapon.system?.skill?.id}};return CONFIG.debug.CoC7Importer&&console.debug(`Weapon skill not found for ${weapon.name}, creating a new one`,newSkill),newSkill}needsConversion(npc){let needsConversionResult=!0;for(const key of["str","con","siz","dex","app","int","pow","edu"])void 0!==npc[key]&&npc[key]>30&&(needsConversionResult=!1);return CONFIG.debug.CoC7Importer&&console.debug("needsConversion:",needsConversionResult),needsConversionResult}async createActor(inputs){CONFIG.debug.CoC7Importer&&console.debug("createActor:",inputs);const lang=CoC7ActorImporterRegExp.checkLanguage(inputs.lang);this.keys=CoC7ActorImporterRegExp.getKeys(lang),this.regEx=CoC7ActorImporterRegExp.getRegularExpressions(lang),this.itemLocations=inputs.source,CONFIG.debug.CoC7Importer&&console.debug("Regular Expressions:",lang,this.keys,this.regEx);let character=await this.parseCharacter(inputs.text);CONFIG.debug.CoC7Importer&&console.debug("parseCharacter:",character),("coc-guess"===inputs.convertFrom6E&&this.needsConversion(character)||"coc-convert"===inputs.convertFrom6E)&&(character=await this.convert7E(character));const characterData={name:character.name,actor:this.actorData(character),items:await this.itemsData(character)};if(void 0!==inputs.testMode&&!0===inputs.testMode)return characterData;return await this.createEntity(characterData,inputs.entity)}async convert7E(creature){CONFIG.debug.CoC7Importer&&console.debug("Converting npc",creature);for(const key of["str","con","siz","dex","app","int","pow"])void 0!==creature[key]&&(creature[key]*=5);return void 0!==creature.edu&&(creature.edu<=18?creature.edu*=5:creature.edu<=26?creature.edu=creature.edu+90-18:creature.edu=99),void 0!==creature.db&&("-1d4"===creature.db?creature.db=-1:"-1d6"===creature.db&&(creature.db=-2)),CONFIG.debug.CoC7Importer&&console.debug("convert7E: ",creature),creature}}class CoC7DirectoryPicker extends FilePicker{get title(){return game.i18n.localize("CoC7.PickDirectory")}_onSubmit(event){event.preventDefault();const path=event.target.target.value,activeSource=this.activeSource,bucket=event.target.bucket?event.target.bucket.value:null;this.field.value=CoC7DirectoryPicker.format({activeSource,bucket,path}),this.close()}static DefaultDirectory(val){return null===val?"":String(val)}static format(value){return null!==value.bucket?`[${value.activeSource}:${value.bucket}] ${value.path}`:`[${value.activeSource}] ${value.path}`}static parse(raw){const str=raw??"",matches=str.match(/^\[([^:]+)(:(.+))?\]\s*(.+)?$/u);return matches?{activeSource:matches[1],bucket:matches[3]??"",current:matches[4]}:{activeSource:"data",bucket:null,current:str}}static processHtml(html){$(html).find('input[data-dtype="DefaultDirectory"]').each(((i,el)=>{const input=$(el);if(input.prop("readonly",!0),!input.next().length){const picker=new CoC7DirectoryPicker({field:input[0],...CoC7DirectoryPicker.parse(input.val())}),pickerButton=$('<button type="button" class="file-picker" title="'+game.i18n.localize("CoC7.PickDirectory")+'"><i class="fas fa-file-import fa-fw"></i></button>');CoC7DirectoryPicker.createDefaultDirectory(),pickerButton.on("click",(()=>{picker.render(!0)})),input.parent().append(pickerButton)}}))}activateListeners(html){super.activateListeners(html),$(html).find("ol.files-list").remove(),$(html).find("footer div").remove(),$(html).find("footer button").text(game.i18n.localize("CoC7.PickDirectory"))}static async createDefaultDirectory(){const parsed=CoC7DirectoryPicker.parse(game.settings.get("CoC7","dholeUploadDirectory"));try{return await CoC7DirectoryPicker.createDirectory(parsed.activeSource,parsed.current,{bucket:parsed.bucket}),!0}catch(e){if(!e.message.startsWith("EEXIST"))return ui.notifications.error(game.i18n.localize("CoC7.ActorImporterUploadError")),!1}}static async uploadToDefaultDirectory(file,filename){const parsed=CoC7DirectoryPicker.parse(game.settings.get("CoC7","dholeUploadDirectory"));return(await FilePicker.upload(parsed.activeSource,parsed.current,new File([file],filename,{type:"image/png"}),{bucket:parsed.bucket})).path?parsed.current+"/"+filename:(ui.notifications.error(game.i18n.localize("CoC7.FileUploadError")),!1)}}class CoC7DholeHouseActorImporter{static getBackstory(backstoryJSON){const sections=[["description","Description"],["traits","Traits"],["ideology","Ideology"],["injurues","Injuries","injuries"],["people","People"],["phobias","Phobias"],["locations","Locations"],["tomes","Tomes"],["possessions","Possessions"],["encounters","Encounters"]],backstory={block:[],sections:[]};for(const section of sections)null!==backstoryJSON[section[0]]&&(void 0!==section[2]&&""!==section[2]||(section[2]=section[0]),backstory.block.push(`<h3>${section[1]}</h3>\n<div class="${section[2]}">\n${backstoryJSON[section[0]]}\n</div>`),backstory.sections.push({title:section[1],value:backstoryJSON[section[0]]}));return backstory.block="<h2>Backstory</h2>\n"+backstory.block.join("\n",backstory.block),backstory}static async convertDholeHouseCharacterData(dholeHouseData,options){CONFIG.debug.CoC7Importer&&console.log("Source:",dholeHouseData),dholeHouseData=dholeHouseData.Investigator;const backstories=CoC7DholeHouseActorImporter.getBackstory(dholeHouseData.Backstory);return{name:dholeHouseData.PersonalDetails.Name,actor:{characteristics:{str:{value:parseInt(dholeHouseData.Characteristics.STR,10)},con:{value:parseInt(dholeHouseData.Characteristics.CON,10)},siz:{value:parseInt(dholeHouseData.Characteristics.SIZ,10)},dex:{value:parseInt(dholeHouseData.Characteristics.DEX,10)},app:{value:parseInt(dholeHouseData.Characteristics.APP,10)},int:{value:parseInt(dholeHouseData.Characteristics.INT,10)},pow:{value:parseInt(dholeHouseData.Characteristics.POW,10)},edu:{value:parseInt(dholeHouseData.Characteristics.EDU,10)}},attribs:{san:{value:parseInt(dholeHouseData.Characteristics.Sanity,10),max:parseInt(dholeHouseData.Characteristics.SanityMax,10),dailyLimit:Math.floor(dholeHouseData.Characteristics.Sanity/5)},hp:{value:parseInt(dholeHouseData.Characteristics.HitPts,10),max:parseInt(dholeHouseData.Characteristics.HitPtsMax,10)},mp:{value:parseInt(dholeHouseData.Characteristics.MagicPts,10),max:parseInt(dholeHouseData.Characteristics.MagicPtsMax,10)},lck:{value:parseInt(dholeHouseData.Characteristics.Luck,10)},mov:{value:parseInt(dholeHouseData.Characteristics.Move,10),max:parseInt(dholeHouseData.Characteristics.Move,10)},db:{value:dholeHouseData.Characteristics.DamageBonus},build:{value:parseInt(dholeHouseData.Characteristics.Build,10)}},infos:{occupation:dholeHouseData.PersonalDetails.Occupation,age:dholeHouseData.PersonalDetails.Age,sex:dholeHouseData.PersonalDetails.Gender,residence:dholeHouseData.PersonalDetails.Residence,birthplace:dholeHouseData.PersonalDetails.Birthplace},backstory:backstories.block,biography:backstories.sections,description:{keeper:game.i18n.localize("CoC7.DholeHouseActorImporterSource")}},skills:await CoC7DholeHouseActorImporter.extractSkills(dholeHouseData.Skills.Skill??[],options),possesions:await CoC7DholeHouseActorImporter.extractPossessions(dholeHouseData.Possessions?.item??[],options)}}static makeSkillName(name,specialization){return"None"===specialization&&(specialization="Any"),"Language (Other)"===name||"Language (Own)"===name?name="Language":"Operate Heavy Machine"===name?name="Operate Heavy Machinery":"Throw"===name&&""===specialization&&(name="Fighting",specialization="Throw"),{skillName:""===specialization?name:specialization,specialization:""===specialization?"":name,name:name+(""===specialization?"":" ("+specialization+")")}}static async extractSkills(dholeHouseskills,options){const skills=[];for(const skill of dholeHouseskills){if("None"===skill.subskill&&"1"===skill.value&&"0"===skill.half&&"0"===skill.fifth)continue;const parts=CoC7DholeHouseActorImporter.makeSkillName(skill.name,skill.subskill??""),existing=await CoC7Utilities.guessItem("skill",parts.name,{source:options.source,fallbackAny:!0});let cloned=null;void 0!==existing?(cloned=foundry.utils.duplicate(existing.toObject()),cloned.name=parts.name,cloned.system.skillName=parts.skillName,cloned.system.specialization=parts.specialization):(cloned=CoCActor.emptySkill(parts.skillName,parseInt(skill.value??0,10),{specialization:""!==parts.specialization&&parts.specialization}),cloned.system.properties=cloned.system.properties??{},"Fighting"===parts.specialization?(cloned.system.properties.fighting=!0,cloned.system.properties.combat=!0,cloned.system.properties.push=!1):"Firearms"===parts.specialization?(cloned.system.properties.firearm=!0,cloned.system.properties.combat=!0,cloned.system.properties.push=!1):"Dodge"===parts.skillName&&(cloned.system.properties.push=!1)),"Any"===cloned.system.skillName&&(cloned.name=cloned.name.replace(" (Any)"," (None)"),cloned.system.skillName="None"),cloned.system.base=parseInt(skill.value??0,10),cloned.system.value=parseInt(skill.value??0,10),cloned.system.flags=cloned.system.flags??{},cloned.system.flags.occupation=!0===skill.occupation||"true"===skill.occupation,skills.push(cloned)}return skills}static findWeaponSkillId(skillName,character){const skills=character.getEmbeddedCollection("Item"),checkName=skillName.replace(/^\((.+)\)$/,"$1");return skills.find((i=>i.system?.skillName===checkName||i.system?.skillName?.indexOf(checkName)>-1))}static async extractPossessions(dholehousePossessions,options){const items=[];Array.isArray(dholehousePossessions)||null==dholehousePossessions||(dholehousePossessions=[dholehousePossessions]);for(const item of dholehousePossessions){const existing=await CoC7Utilities.guessItem("item",item.description,{source:options.source});let cloned=null;cloned=void 0!==existing?foundry.utils.duplicate(existing.toObject()):{name:item.description,type:"item"},items.push(cloned)}return items}static async extractWeapons(dholehouseWeapons,character,options){const weapons=[];Array.isArray(dholehouseWeapons)||(dholehouseWeapons=[dholehouseWeapons]);for(const weapon of dholehouseWeapons){const skill=CoC7DholeHouseActorImporter.findWeaponSkillId(weapon.skillname,character),damage=weapon.damage.replace(/\+DB/i,""),addb=damage!==weapon.damage,existing=await CoC7Utilities.guessItem("weapon",weapon.name,{source:options.source});let cloned=null;void 0!==existing?(cloned=foundry.utils.duplicate(existing.toObject()),cloned.system.skill.main.name=skill?.name??"",cloned.system.skill.main.id=skill?.id??"",cloned.system.range=cloned.system.range??{},cloned.system.range.normal=cloned.system.range.normal??{},cloned.system.range.normal.damage=damage,cloned.system.ammo=weapon.ammo,cloned.system.malfunction=weapon.malf,cloned.system.properties=cloned.system.properties??{},cloned.system.properties.melee=skill?.system.properties?.fighting??!1,cloned.system.properties.rngd=skill?.system.properties?.firearm??!1,cloned.system.properties.addb=addb):cloned={name:weapon.name,type:"weapon",system:{skill:{main:{name:skill?.name??"",id:skill?.id??""}},range:{normal:{damage}},ammo:weapon.ammo,malfunction:weapon.malf,properties:{melee:skill?.system.properties?.fighting??!1,rngd:skill?.system.properties?.firearm??!1,addb}}},weapons.push(cloned)}return weapons}static async savePortrait(base64Portrait,fileName){const base64Response=await fetch("data:image/png;base64,"+base64Portrait),imageBlob=await base64Response.blob();return CoC7DirectoryPicker.uploadToDefaultDirectory(imageBlob,fileName)}static async createNPCFromDholeHouse(dholeHouseCharacterData,options){if(!game.user?.can("FILES_UPLOAD"))return ui.notifications.error(game.i18n.localize("CoC7.ActorImporterUploadError")),!1;const characterData=await CoC7DholeHouseActorImporter.convertDholeHouseCharacterData(dholeHouseCharacterData,options);CONFIG.debug.CoC7Importer&&console.log("Character Data:",characterData);const importedCharactersFolder=await CoC7Utilities.createImportCharactersFolderIfNotExists();if(!CoC7DirectoryPicker.createDefaultDirectory())return!1;const actorData={name:characterData.name,type:"character",folder:importedCharactersFolder.id,data:characterData.actor},npc=await Actor.create(actorData);if(dholeHouseCharacterData.Investigator.PersonalDetails.Portrait?.length>10){const fileName="avatar-"+npc.id+".png",portrait=await CoC7DholeHouseActorImporter.savePortrait(dholeHouseCharacterData.Investigator.PersonalDetails.Portrait,fileName);!1!==portrait&&npc.update({img:portrait})}CONFIG.debug.CoC7Importer&&console.log("Items: ",characterData.items),await npc.createEmbeddedDocuments("Item",characterData.skills,{renderSheet:!1}),await npc.createEmbeddedDocuments("Item",characterData.possesions,{renderSheet:!1});const weapons=await CoC7DholeHouseActorImporter.extractWeapons(dholeHouseCharacterData.Investigator.Weapons?.weapon??[],npc,options);return CONFIG.debug.CoC7Importer&&console.log("Weapons: ",weapons),await npc.createEmbeddedDocuments("Item",weapons,{renderSheet:!1}),npc}}class CoC7ActorImporterDialog extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","dialog","actor-importer"],title:game.i18n.localize("CoC7.ActorImporter"),template:"systems/CoC7/templates/apps/actor-importer.html",closeOnSubmit:!1,width:600,height:"auto"})}async getData(){const data=await super.getData();return data.importType=data.object.importType,data.convert6E=data.object.convert6E,data.source=data.object.source,data.characterData=data.object.characterData,data.canUpload=game.user?.can("FILES_UPLOAD"),["npc","creature"].includes(data.importType)&&(data.languages=CoC7ActorImporterRegExp.getTranslations(),data.language=CoC7ActorImporterRegExp.checkLanguage(data.object.language),data.placeholder=CoC7ActorImporterRegExp.getExampleText(data.language)),data}activateListeners(html){super.activateListeners(html),html.find("#dholehouse-character-preview").hide(),html.find("#coc-entity-type,#coc-entity-lang").change(this._onChangeSubmit.bind(this)),html.find("#dholehouse-json-file-picker").change(this._onJSONFileSelected.bind(this)),html.find("#coc-pasted-character-data").on("keyup",(function(e){const charactersTooExtended=$(this).val().match(/[\udbc0-\udbfe][\udc00-\udfff]/),prompt=$("#coc-prompt");prompt.data("extended")&&charactersTooExtended?prompt.html(game.i18n.localize("CoC7.TextFieldInvalidCharacters")).addClass("error"):prompt.html(prompt.data("text")).removeClass("error")})).trigger("keyup"),html.find(".submit-button").click(this._onClickSubmit.bind(this)),html.find("form").submit((e=>{e.preventDefault()}))}static getInputs(form){const inputs={};return inputs.entity=form.find("#coc-entity-type").val().trim(),CONFIG.debug.CoC7Importer&&console.debug("entity type:",inputs.entity),form.find("#coc-convert-6E").length>0&&(inputs.convertFrom6E=form.find("#coc-convert-6E").val().trim()),form.find("#coc-entity-lang").length>0&&(inputs.lang=CoC7ActorImporterRegExp.checkLanguage(form.find("#coc-entity-lang").val().trim())),form.find("#source").length>0&&(inputs.source=form.find("#source").val().trim()),form.find("#coc-pasted-character-data").length>0&&(inputs.text=form.find("#coc-pasted-character-data").val().trim()),CONFIG.debug.CoC7Importer&&console.debug("received text","##"+inputs.text+"##"),inputs}_onJSONFileSelected(event){const jsonFileInput=document.getElementById("dholehouse-json-file-picker"),portraitImage=document.getElementById("dholehouse-character-portrait"),characterName=document.getElementById("dholehouse-character-name"),preview=document.getElementById("dholehouse-character-preview"),file=jsonFileInput.files[0],dialog=this,fileReader=new FileReader;fileReader.onload=function(e){try{dialog.characterJSON=JSON.parse(fileReader.result)}catch(e){return $("#coc-prompt").html(game.i18n.localize("CoC7.TextFieldInvalidJSON")).addClass("error"),void event.preventDefault()}const personalDetails=dialog.characterJSON?.Investigator?.PersonalDetails;personalDetails?(characterName.textContent=personalDetails.Name,portraitImage.src="data:image/png;base64,"+personalDetails.Portrait,preview.style.display="block",$(".dialog.actor-importer").height("auto")):ui.notifications.error(game.i18n.localize("CoC7.DholeHouseInvalidActor"))},fileReader.readAsText(file)}_onChangeSubmit(event){this._onSubmit(event)}async _onClickSubmit(event){const id=event.currentTarget.dataset.button;if("no"===id)this.close();else if("getExampleNow"===id){const content=CoC7ActorImporterRegExp.getExampleText(this.object.language);CoC7Utilities.copyToClipboard(content).then((()=>ui.notifications.info(game.i18n.localize("CoC7.Copied"))))}else if("import"===id){const app=$(event.currentTarget).closest("div.dialog.actor-importer");app.hide();const form=$(event.currentTarget).closest("form"),inputs=CoC7ActorImporterDialog.getInputs(form);if("dholehouse"===inputs.entity&&this.characterJSON){const character=await CoC7DholeHouseActorImporter.createNPCFromDholeHouse(this.characterJSON,{source:inputs.source});!1!==character?(CONFIG.debug.CoC7Importer&&console.debug("character:",character),ui.notifications.info(game.i18n.format("CoC7.ActorImported",{actorType:game.i18n.localize("CoC7.Entities.Character"),actorName:character.name})),await character.sheet.render(!0),this.close()):app.show()}else inputs.text&&""!==inputs.text?(CoC7ActorImporterDialog.importActor(inputs),this.close()):app.show()}}async _updateObject(event,formData){this.object.importType=formData["coc-entity-type"],this.object.characterData=formData["coc-pasted-character-data"]?.trim(),void 0!==formData["coc-convert-6E"]&&(this.object.convert6E=formData["coc-convert-6E"]),void 0!==formData["coc-entity-lang"]&&(this.object.language=formData["coc-entity-lang"]),void 0!==formData.source&&(this.object.source=formData.source),this.render(!0)}static async importActor(inputs){"."!==inputs.text[inputs.text.length]&&(inputs.text+=".");const actor=new CoC7ActorImporter,createdActor=await actor.createActor(inputs);CONFIG.debug.CoC7Importer&&console.debug("createdActor:",createdActor),ui.notifications.info(game.i18n.format("CoC7.ActorImported",{actorType:createdActor.type?.toUpperCase(),actorName:createdActor.name})),await createdActor.sheet.render(!0)}static async create(options={}){options.importType=options.importType??"npc",options.language=options.language??CoC7ActorImporterRegExp.checkLanguage(null),options.convert6E=options.language??"coc-guess",options.source=options.source??"iwms",options.characterData=options.characterData??"",new CoC7ActorImporterDialog(options).render(!0)}}Hooks.once("ready",(()=>{game.modules.get("CoC7-Importer-Tests")?.active&&(window.CoC7ActorImporter=CoC7ActorImporter)}));class DropCoCID extends Dialog{static processForm(response,element,resolve){element.find("input").is(":checked")&&game.settings.set("CoC7","dropCoCID",response?"Y":"N"),resolve(response)}static processItem(response,item){return response&&item.flags?.CoC7?.cocidFlag?.id?item.flags.CoC7.cocidFlag.id:foundry.utils.duplicate(item)}static async create(){switch(game.settings.get("CoC7","dropCoCID")){case"":return new Promise((resolve=>{new DropCoCID({title:game.i18n.format("CoC7.Settings.DropCoCID.Name"),content:"<p>"+game.i18n.format("CoC7.Settings.DropCoCID.Dialog")+'</p><p><input type="checkbox" id="rememberthis" style="vertical-align: sub;"><label for="rememberthis">'+game.i18n.format("CoC7.Settings.DropCoCID.Remember")+"</label></p>",classes:["coc7","app","dialog"],buttons:{yes:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("Yes"),callback:element=>{DropCoCID.processForm(!0,element,resolve)}},no:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("No"),callback:element=>{DropCoCID.processForm(!1,element,resolve)}}}}).render(!0)}));case"Y":return!0;case"N":return!1}}}class CoC7OccupationSheet extends ItemSheet{activateListeners(html){if(super.activateListeners(html),!this.options.editable)return;html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"skills"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"skills"))),html.find(".group-item-delete").click(this._onGroupItemDelete.bind(this)),html.find(".group-control").click(this._onGroupControl.bind(this));new DragDrop({dropSelector:".droppable",callbacks:{drop:this._onDrop.bind(this)}}).bind(html[0])}async _onDrop(event,type="skill",collectionName="skills"){event.preventDefault(),event.stopPropagation();const optionalSkill=event?.currentTarget?.classList?.contains("optional-skills"),ol=event?.currentTarget?.closest("ol"),index=ol?.dataset?.group,dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");let useCoCID=0;const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[],groups=this.item.system.groups?foundry.utils.duplicate(this.item.system.groups):[];for(const item of dataList)if(item&&item.system&&[type].includes(item.type))if(optionalSkill){if(!CoC7Item.isAnySpec(item)){if(collection.find((el=>el.name===item.name)))continue;if(groups[index].skills.find((el=>el.name===item.name)))continue}0===useCoCID&&(useCoCID=await DropCoCID.create()),groups[index].skills=groups[index].skills.concat([DropCoCID.processItem(useCoCID,item)])}else{if(!CoC7Item.isAnySpec(item)){if(collection.find((el=>el.name===item.name)))continue;for(let i=0;i<groups.length;i++){const index=groups[i].skills.findIndex((el=>el.name===item.name));-1!==index&&groups[i].skills.splice(index,1)}}0===useCoCID&&(useCoCID=await DropCoCID.create()),collection.push(DropCoCID.processItem(useCoCID,item))}await this.item.update({"system.groups":groups}),await this.item.update({[`system.${collectionName}`]:collection})}async _onGroupControl(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("add-group")){await this._onSubmit(event);const groups=this.item.system.groups;await this.item.update({"system.groups":groups.concat([{options:0,skills:[]}])})}if(a.classList.contains("remove-group")){await this._onSubmit(event);const groups=foundry.utils.duplicate(this.item.system.groups),ol=a.closest(".item-list.group");groups.splice(Number(ol.dataset.group),1),await this.item.update({"system.groups":groups})}}async _onItemSummary(event,collectionName="items"){event.preventDefault();const obj=$(event.currentTarget),li=obj.parents(".item"),group=obj.closest(".group");let item;if(item=group.length?this.item.system.groups[group.data("group")][collectionName].find((s=>s._id===li.data("item-id"))):this.item.system[collectionName].find((s=>s._id===li.data("item-id"))),!item)return;const chatData=await TextEditor.enrichHTML(item.system.description.value,{async:!0,secrets:this.item.editable});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const item=$(event.currentTarget).closest(".item"),itemId=item.data("item-id"),CoCId=item.data("cocid"),itemIndex=this.item.system[collectionName].findIndex((i=>itemId&&i._id===itemId||CoCId&&i===CoCId));if(itemIndex>-1){const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`system.${collectionName}`]:collection})}}async _onGroupItemDelete(event){const item=$(event.currentTarget).closest(".item"),group=Number(item.closest(".item-list.group").data("group")),groups=foundry.utils.duplicate(this.item.system.groups);if(void 0!==groups[group]){const itemId=item.data("item-id"),CoCId=item.data("cocid"),itemIndex=groups[group].skills.findIndex((i=>itemId&&i._id===itemId||CoCId&&i===CoCId));itemIndex>-1&&(groups[group].skills.splice(itemIndex,1),await this.item.update({"system.groups":groups}))}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","occupation"],template:"systems/CoC7/templates/items/occupation.html",width:525,height:480,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.data.system.skills=await game.system.api.cocid.expandItemArray({itemList:sheetData.data.system.skills}),sheetData.skillListEmpty=0===sheetData.data.system.skills.length,sheetData.data.system.skills.sort(CoC7Utilities.sortByNameKey);for(let index=0,len=sheetData.data.system.groups.length;index<len;index++)sheetData.data.system.groups[index].skills=await game.system.api.cocid.expandItemArray({itemList:sheetData.data.system.groups[index].skills}),sheetData.data.system.groups[index].isEmpty=0===sheetData.data.system.groups[index].skills.length,sheetData.data.system.groups[index].skills.sort(CoC7Utilities.sortByNameKey);sheetData.occupationPointsString=CoC7OccupationSheet.occupationPointsString(sheetData.data.system.occupationSkillPoints),sheetData.itemProperties=[];for(const[key,value]of Object.entries(sheetData.data.system.type))value&&sheetData.itemProperties.push(COC7.occupationProperties[key]?COC7.occupationProperties[key]:null);return sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}static occupationPointsString(occupationSkillPoints){const optionnal=[],mandatory=[];for(const[key,carac]of Object.entries(occupationSkillPoints))if(carac.multiplier){const caracName=game.i18n.localize(`CHARAC.${key.toUpperCase()}`);carac.selected&&carac.optional&&optionnal.push(`${caracName}x${carac.multiplier}`),carac.selected&&!carac.optional&&mandatory.push(`${caracName}x${carac.multiplier}`)}let occupationPointsString="";const orString=` ${game.i18n.localize("CoC7.Or")} `;return mandatory.length&&(occupationPointsString+=mandatory.join(" + ")),optionnal.length&&mandatory.length&&(occupationPointsString+=` + (${optionnal.join(orString)})`),optionnal.length&&!mandatory.length&&(occupationPointsString+=optionnal.join(orString)),occupationPointsString}_updateObject(event,formData){const system=foundry.utils.expandObject(formData)?.system;if(system.groups){formData["system.groups"]=Object.values(system.groups||[]);for(let index=0;index<this.item.system.groups.length;index++)formData[`system.groups.${index}.skills`]=foundry.utils.duplicate(this.item.system.groups[index].skills)}super._updateObject(event,formData)}}class CoC7InvestigatorWizard extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"investigator-wizard-application",classes:["coc7","dialog","investigator-wizard"],title:game.i18n.localize("CoC7.InvestigatorWizard.Title"),template:"systems/CoC7/templates/apps/investigator-wizard.hbs",width:520,height:600,closeOnSubmit:!1,scrollY:[".scrollsection"],dragDrop:[{dragSelector:".draggable",dropSelector:null}]})}get pageList(){return{PAGE_NONE:-1,PAGE_INTRODUCTION:0,PAGE_CONFIGURATION:1,PAGE_SETUPS:2,PAGE_ARCHETYPES:3,PAGE_CHARACTISTICS:4,PAGE_ATTRIBUTES:5,PAGE_VIEW_ATTRIBUTES:6,PAGE_OCCUPATIONS:7,PAGE_OCCUPATION_SKILLS:8,PAGE_ARCHETYPE_SKILLS:9,PAGE_POINTS_SKILLS:10,PAGE_INVESTIGATOR:11,PAGE_BACKSTORY:12,PAGE_CREATE:13}}get characteristicsMethods(){return{METHOD_DEFAULT:1,METHOD_ROLL:1,METHOD_POINTS:2,METHOD_VALUES:3}}get cocidCreditRating(){return"i.skill.credit-rating"}get cocidLanguageOwn(){return"i.skill.language-own"}get pageOrder(){const pages=this.pageList;let pageOrder=[pages.PAGE_INTRODUCTION];return game.user.isGM&&pageOrder.push(pages.PAGE_CONFIGURATION),""===this.object.defaultSetup&&pageOrder.push(pages.PAGE_SETUPS),game.settings.get("CoC7","pulpRuleArchetype")&&pageOrder.push(pages.PAGE_ARCHETYPES),pageOrder.push(pages.PAGE_CHARACTISTICS),game.settings.get("CoC7","pulpRuleIgnoreAgePenalties")||pageOrder.push(pages.PAGE_ATTRIBUTES),pageOrder=pageOrder.concat([pages.PAGE_VIEW_ATTRIBUTES,pages.PAGE_OCCUPATIONS,pages.PAGE_OCCUPATION_SKILLS]),game.settings.get("CoC7","pulpRuleArchetype")&&pageOrder.push(pages.PAGE_ARCHETYPE_SKILLS),pageOrder=pageOrder.concat([pages.PAGE_POINTS_SKILLS,pages.PAGE_INVESTIGATOR,pages.PAGE_BACKSTORY,pages.PAGE_CREATE]),pageOrder}static async loadCacheItemByCoCID(){return new Promise(((resolve,reject)=>{game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:/^i\./,type:"i",showLoading:!0}).then((items=>{const list={};for(const item of items)list[item.flags.CoC7.cocidFlag.id]=item;resolve(list)}))}))}async filterCacheItemByCoCID(regexp){return Object.entries(await this.object.cacheCoCID).filter((entry=>entry[0].match(regexp))).map((entry=>entry[1]))}async getCacheItemByCoCID(id){return(await this.object.cacheCoCID)[id]??!1}async expandItemArray(itemList){const items=itemList.filter((it=>"string"!=typeof it)),cocids=itemList.filter((it=>"string"==typeof it));if(cocids.length){const source=await this.object.cacheCoCID,missing=[];for(const cocid of cocids)void 0!==source[cocid]?items.push(source[cocid]):missing.push(cocid);if(missing.length){const era=game.i18n.format(COC7.eras[this.object.defaultEra]??"CoC7.CoCIDFlag.error.unknown-era",{era:this.object.defaultEra});ui.notifications.warn(game.i18n.format("CoC7.CoCIDFlag.error.documents-not-found",{cocids:missing.join(", "),lang:game.i18n.lang,era}))}}return items}getAgeAdjustments(){for(const key in this.object.setupModifiers)this.object.setupModifiers[key]=0;if(!game.settings.get("CoC7","pulpRuleIgnoreAgePenalties")){if(this.object.age>=40){const key=Math.floor(this.object.age/10);this.object.requiresAgeAdjustments={edu:{total:key-2>4?4:key-2,rolled:!1},deduct:{total:key>1?5*Math.pow(2,key-4):0,from:["str","con","dex"],values:{}},reduce:{total:5*(key-3),from:"app"}}}else this.object.age>=20?this.object.requiresAgeAdjustments={edu:{total:1,rolled:!1}}:this.object.age>=15&&(this.object.requiresAgeAdjustments={deduct:{total:5,from:["str","siz"],values:{}},reduce:{total:5,from:"edu"},luck:!0});void 0!==this.object.requiresAgeAdjustments.reduce&&(this.object.setupModifiers[this.object.requiresAgeAdjustments.reduce.from]=-this.object.requiresAgeAdjustments.reduce.total)}}async getData(){const sheetData=await super.getData();let setup,archetype,occupation;sheetData.isKeeper=game.user.isGM,sheetData.pages=this.pageList,sheetData.canNext=!1,sheetData.createButton=!1;let showMonetary=!1;switch(sheetData.object.step){case sheetData.pages.PAGE_INTRODUCTION:sheetData.era=game.i18n.format(COC7.eras[sheetData.object.defaultEra]??"CoC7.CoCIDFlag.error.unknown-era",{era:sheetData.object.defaultEra}),sheetData.canNext=!0;break;case sheetData.pages.PAGE_CONFIGURATION:if(game.user.isGM){sheetData.setups=await this.filterCacheItemByCoCID(/^i\.setup\./),sheetData.occupations=await this.filterCacheItemByCoCID(/^i\.occupation\./),sheetData.archetypes=await this.filterCacheItemByCoCID(/^i\.archetype\./),setup=sheetData.setups.find((s=>s.flags.CoC7.cocidFlag.id===sheetData.object.defaultSetup)),void 0===setup?(sheetData.object.defaultSetup="",sheetData.object.setup=""):sheetData.description=await TextEditor.enrichHTML(setup.system.description.value,{async:!0,secrets:game.user.isGM}),sheetData.ownership={[CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE]:"OWNERSHIP.NONE",[CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED]:"OWNERSHIP.LIMITED",[CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER]:"OWNERSHIP.OBSERVER",[CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER]:"OWNERSHIP.OWNER"},sheetData._eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData._eras.push({id:key,name:game.i18n.localize(value)});sheetData.characteristicsMethods=this.characteristicsMethods,sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_DEFAULT,sheetData.object.enforcePointBuy?sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_POINTS:this.object.quickFireValues.length&&(sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_VALUES),sheetData._eras.sort(CoC7Utilities.sortByNameKey),sheetData.hasArchetypes=game.settings.get("CoC7","pulpRuleArchetype"),sheetData.canNext=!0}break;case sheetData.pages.PAGE_SETUPS:""===sheetData.object.defaultSetup&&(sheetData.setups=await this.filterCacheItemByCoCID(/^i\.setup\./),sheetData.setups.sort(CoC7Utilities.sortByNameKey),""!==sheetData.object.setup&&(setup=sheetData.setups.find((s=>s.flags.CoC7.cocidFlag.id===sheetData.object.setup)),void 0!==setup&&(sheetData.description=await TextEditor.enrichHTML(setup.system.description.value,{async:!0,secrets:game.user.isGM}),sheetData.canNext=!0)));break;case sheetData.pages.PAGE_ARCHETYPES:if(sheetData.archetypes=await this.filterCacheItemByCoCID(/^i\.archetype\./),0===sheetData.archetypes.length)sheetData.canNext=!0;else if(sheetData.archetypes.sort(CoC7Utilities.sortByNameKey),""!==sheetData.object.archetype&&(archetype=sheetData.archetypes.find((s=>s.flags.CoC7.cocidFlag.id===sheetData.object.archetype)),void 0!==archetype)){sheetData.description=await TextEditor.enrichHTML(archetype.system.description.value,{async:!0,secrets:game.user.isGM}),sheetData.bonusPoints=archetype.system.bonusPoints;const coreCharacteristics=[];for(const coreCharacteristic in archetype.system.coreCharacteristics)archetype.system.coreCharacteristics[coreCharacteristic]&&coreCharacteristics.push(coreCharacteristic);0===coreCharacteristics.length?this.object.coreCharacteristic="":1===coreCharacteristics.length&&(this.object.coreCharacteristic=coreCharacteristics[0]),sheetData.coreCharacteristic=coreCharacteristics.map((c=>c.toLocaleUpperCase())).join(" "+game.i18n.localize("CoC7.Or")+" ");const skills=[];archetype.system.skills=await this.expandItemArray(archetype.system.skills);for(const skill of archetype.system.skills)skills.push(skill.name);sheetData.skills=skills.join(", "),sheetData.suggestedOccupations=await TextEditor.enrichHTML(archetype.system.suggestedOccupations,{async:!0,secrets:game.user.isGM}),sheetData.suggestedTraits=await TextEditor.enrichHTML(archetype.system.suggestedTraits,{async:!0,secrets:game.user.isGM}),sheetData.canNext=!0}break;case sheetData.pages.PAGE_CHARACTISTICS:if(sheetData.characteristicsMethods=this.characteristicsMethods,sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_ROLL,""!==sheetData.object.setup&&(setup=await this.getCacheItemByCoCID(this.object.setup),void 0!==setup)){if(setup.system.characteristics.points.enabled||this.object.enforcePointBuy?sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_POINTS:this.object.quickFireValues.length&&(sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_VALUES),sheetData.setup={total:0,points:setup.system.characteristics.points.value,characteristics:[{key:"str",roll:setup.system.characteristics.rolls.str,label:"CHARAC.Strength"},{key:"con",roll:setup.system.characteristics.rolls.con,label:"CHARAC.Constitution"},{key:"siz",roll:setup.system.characteristics.rolls.siz,label:"CHARAC.Size"},{key:"dex",roll:setup.system.characteristics.rolls.dex,label:"CHARAC.Dexterity"},{key:"app",roll:setup.system.characteristics.rolls.app,label:"CHARAC.Appearance"},{key:"int",roll:setup.system.characteristics.rolls.int,label:"CHARAC.Intelligence"},{key:"pow",roll:setup.system.characteristics.rolls.pow,label:"CHARAC.Power"},{key:"edu",roll:setup.system.characteristics.rolls.edu,label:"CHARAC.Education"}],luck:{roll:setup.system.characteristics.rolls.luck,label:"CoC7.Luck"}},sheetData.coreCharacteristics=[],""!==sheetData.object.archetype&&(archetype=await this.getCacheItemByCoCID(this.object.archetype),void 0!==archetype)){for(const coreCharacteristic in archetype.system.coreCharacteristics)archetype.system.coreCharacteristics[coreCharacteristic]&&sheetData.coreCharacteristics.push({key:coreCharacteristic,name:game.i18n.format(sheetData.setup.characteristics.find((c=>c.key===coreCharacteristic))?.label??"Unknown")});sheetData.coreCharacteristics.sort(CoC7Utilities.sortByNameKey),""!==this.object.coreCharacteristic&&archetype.system.coreCharacteristicsFormula.enabled&&(sheetData.setup.characteristics.find((c=>c.key===this.object.coreCharacteristic)).roll=archetype.system.coreCharacteristicsFormula.value)}let empties=!1;for(const key in sheetData.object.setupPoints)""!==sheetData.object.setupPoints[key]?"luck"!==key&&(sheetData.setup.total+=parseInt(sheetData.object.setupPoints[key],10)):empties=!0;this.object.coreCharacteristic&&(sheetData.coreCharacteristic=this.object.coreCharacteristic.toLocaleUpperCase()),!empties&&this.object.age>=15&&([sheetData.characteristicsMethods.METHOD_ROLL,sheetData.characteristicsMethods.METHOD_VALUES].includes(sheetData.characteristicsMethod)||sheetData.setup.total.toString()===sheetData.setup.points.toString())&&(sheetData.canNext=!0)}break;case sheetData.pages.PAGE_ATTRIBUTES:sheetData.pulpRuleIgnoreAgePenalties=game.settings.get("CoC7","pulpRuleIgnoreAgePenalties"),sheetData.canNext=!0,sheetData.points={};for(const key in this.object.setupModifiers)sheetData.points[key]={value:parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10),min:1-parseInt(this.object.setupPoints[key],10),label:CoC7Utilities.getCharacteristicNames(key).label};if(void 0===this.object.requiresAgeAdjustments.edu||this.object.requiresAgeAdjustments.edu.rolled||(sheetData.canNext=!1),void 0!==this.object.requiresAgeAdjustments.deduct){sheetData.deductTotal=0;for(const key of this.object.requiresAgeAdjustments.deduct.from)sheetData.deductTotal=sheetData.deductTotal-parseInt(this.object.setupModifiers[key],10);sheetData.deductFrom=this.object.requiresAgeAdjustments.deduct.from.map((n=>game.i18n.localize("CHARAC."+n.toUpperCase()))).join(", ").replace(/(, )([^,]+)$/,"$1"+game.i18n.localize("CoC7.Or")+" $2").replace(/^([^,]+),([^,]+)$/,"$1$2"),sheetData.deductTotal!==this.object.requiresAgeAdjustments.deduct.total&&(sheetData.canNext=!1)}void 0!==this.object.requiresAgeAdjustments.reduce&&(sheetData.reduceFrom=game.i18n.localize("CHARAC."+this.object.requiresAgeAdjustments.reduce.from.toUpperCase())),void 0!==this.object.requiresAgeAdjustments.luck&&(sheetData.luckValue=Math.max(this.object.setupPoints.luck,this.object.setupModifiers.luck),0===this.object.setupModifiers.luck&&(sheetData.canNext=!1));break;case sheetData.pages.PAGE_VIEW_ATTRIBUTES:sheetData.points={};for(const key in this.object.setupModifiers)sheetData.points[key]={value:parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10),prefix:"",suffix:"%",label:CoC7Utilities.getCharacteristicNames(key).label};sheetData.points.db={value:CoCActor.dbFromCharacteristics(sheetData.points),prefix:"",suffix:"",label:"CoC7.BonusDamage"},(isNaN(sheetData.points.db.value)||Number(sheetData.points.db.value)>=0)&&(sheetData.points.db.prefix="+"),sheetData.points.build={value:CoCActor.buildFromCharacteristics(sheetData.points),prefix:"",suffix:"",label:"CoC7.Build"},Number(sheetData.points.build.value)>=0&&(sheetData.points.build.prefix="+"),sheetData.points.hp={value:CoCActor.hpFromCharacteristics(sheetData.points,"character"),prefix:"",suffix:"",label:"CoC7.HitPoints"},sheetData.points.hp.prefix=sheetData.points.hp.value+"/",sheetData.points.mp={value:CoCActor.mpFromCharacteristics(sheetData.points),prefix:"",suffix:"",label:"CoC7.MagicPoints"},sheetData.points.mp.prefix=sheetData.points.mp.value+"/",sheetData.points.san={value:sheetData.points.pow.value,prefix:"",suffix:"/99",label:"CoC7.Sanity"},sheetData.points.mov={value:CoCActor.movFromCharacteristics(sheetData.points,"character",this.object.age),prefix:"",suffix:"",label:"CoC7.Movement"},sheetData.canNext=!0;break;case sheetData.pages.PAGE_OCCUPATIONS:if(sheetData.occupations=await this.filterCacheItemByCoCID(/^i\.occupation\./),sheetData.occupations.sort(CoC7Utilities.sortByNameKey),""!==sheetData.object.occupation&&(occupation=sheetData.occupations.find((s=>s.flags.CoC7.cocidFlag.id===sheetData.object.occupation)),void 0!==occupation)){sheetData.description=await TextEditor.enrichHTML(occupation.system.description.value,{async:!0,secrets:game.user.isGM}),sheetData.occupationPointsString=CoC7OccupationSheet.occupationPointsString(occupation.system.occupationSkillPoints),sheetData.creditRating=occupation.system.creditRating,sheetData.personal=occupation.system.personal,sheetData.personalText=occupation.system.personalText,sheetData.skills=await this.expandItemArray(occupation.system.skills),sheetData.groups={};for(let index=0;index<occupation.system.groups.length;index++)sheetData.groups[index]={options:occupation.system.groups[index].options,skills:[]},sheetData.groups[index].skills=await this.expandItemArray(occupation.system.groups[index].skills);sheetData.points=0;const options=[];for(const[key,carac]of Object.entries(occupation.system.occupationSkillPoints))carac.selected&&(carac.optional?options.push(carac.multiplier*(parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10))):sheetData.points+=carac.multiplier*(parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10)));options.length>0&&(sheetData.points+=Math.max(...options)),sheetData.canNext=!0}break;case sheetData.pages.PAGE_INVESTIGATOR:sheetData.language=void 0!==this.object.skillItems[this.cocidLanguageOwn],sheetData.language?sheetData.languageName=this.object.skillItems[this.cocidLanguageOwn].item.name:sheetData.languageName="",sheetData.canNext=!0;break;case sheetData.pages.PAGE_OCCUPATION_SKILLS:sheetData.default=0,sheetData.selected=0,sheetData.skillItems=[];for(const key in this.object.skillItems){let group="other";const rows=sheetData.object.skillItems[key].rows.length,isMultiple=sheetData.object.skillItems[key].flags.isMultiple;isMultiple&&sheetData.skillItems.push({key,index:-1,name:sheetData.object.skillItems[key].item.name,group,toggle:!1,isCreditRating:!1,isMultiple:!0,isPickable:!1});for(let index=0;index<rows;index++){let isPickable=!1;sheetData.object.skillItems[key].rows[index].isOccupationDefault?(group="default",isMultiple&&(isPickable=!0),sheetData.default++):!1!==sheetData.object.skillItems[key].rows[index].inOccupationGroup?(group=sheetData.object.skillItems[key].rows[index].inOccupationGroup,isMultiple&&(isPickable=!0)):group="other";let toggle=sheetData.object.skillItems[key].rows[index].occupationToggle;isPickable&&(toggle=!1);let specialization=sheetData.object.skillItems[key].item.system.specialization,skillName=sheetData.object.skillItems[key].item.system.skillName,picked=!1,deleteable=!1;"string"==typeof sheetData.object.skillItems[key].rows[index].selected?(picked=!0,skillName=sheetData.object.skillItems[key].rows[index].selected):!1!==sheetData.object.skillItems[key].rows[index].selected&&(picked=!0,specialization=sheetData.object.skillItems[key].rows[index].selected.system.specialization,skillName=sheetData.object.skillItems[key].rows[index].selected.system.skillName),(toggle||isPickable&&picked)&&sheetData.selected++;let name=sheetData.object.skillItems[key].item.name;(key===this.cocidLanguageOwn||!isPickable&&picked)&&(name=specialization+" ("+skillName+")"),!isPickable&&picked&&(deleteable=!sheetData.object.skillItems[key].rows[index].archetypeToggle),sheetData.skillItems.push({key,index,name,group:group.toString(),toggle,isCreditRating:sheetData.object.skillItems[key].rows[index].isCreditRating,isMultiple:!1,isPickable,picked,deleteable,specialization,skillName})}}sheetData.max=(parseInt(sheetData.default,10)||0)+(parseInt(sheetData.object.personal,10)||0)+Object.values(sheetData.object.occupationGroups).reduce(((s,v)=>s+(parseInt(v,10)||0)),0),sheetData.skillItems.sort(CoC7Utilities.sortByNameKey),sheetData.selected===sheetData.max&&(sheetData.canNext=!0);break;case sheetData.pages.PAGE_ARCHETYPE_SKILLS:sheetData.max=0,sheetData.selected=0,sheetData.skillItems=[];for(const key in this.object.skillItems){let group="other";const rows=sheetData.object.skillItems[key].rows.length,isMultiple=sheetData.object.skillItems[key].flags.isMultiple;isMultiple&&sheetData.skillItems.push({key,index:-1,name:sheetData.object.skillItems[key].item.name,group,toggle:!1,isCreditRating:!1,isMultiple:!0,isPickable:!1});for(let index=0;index<rows;index++){let isPickable=!1;sheetData.object.skillItems[key].rows[index].isArchetypeDefault?(group="default",isMultiple&&(isPickable=!0),sheetData.max++):group="other";let toggle=sheetData.object.skillItems[key].rows[index].archetypeToggle;isPickable&&(toggle=!1);let specialization=sheetData.object.skillItems[key].item.system.specialization,skillName=sheetData.object.skillItems[key].item.system.skillName,picked=!1,deleteable=!1;"string"==typeof sheetData.object.skillItems[key].rows[index].selected?(picked=!0,skillName=sheetData.object.skillItems[key].rows[index].selected):!1!==sheetData.object.skillItems[key].rows[index].selected&&(picked=!0,specialization=sheetData.object.skillItems[key].rows[index].selected.system.specialization,skillName=sheetData.object.skillItems[key].rows[index].selected.system.skillName),(toggle||isPickable&&picked)&&sheetData.selected++;let name=sheetData.object.skillItems[key].item.name;(key===this.cocidLanguageOwn||!isPickable&&picked)&&(name=specialization+" ("+skillName+")"),!isPickable&&picked&&(deleteable=!sheetData.object.skillItems[key].rows[index].occupationToggle),sheetData.skillItems.push({key,index,name,group:group.toString(),toggle,isCreditRating:!1,isMultiple:!1,isPickable,picked,deleteable,specialization,skillName})}}sheetData.skillItems.sort(CoC7Utilities.sortByNameKey),sheetData.selected===sheetData.max&&(sheetData.canNext=!0);break;case sheetData.pages.PAGE_POINTS_SKILLS:if(sheetData.skills=[],sheetData.creditRatingOkay=!(this.object.creditRating.max>0),sheetData.personal={count:0,total:2*(parseInt(this.object.setupPoints.int,10)+parseInt(this.object.setupModifiers.int,10)),remaining:0},sheetData.occupation={count:0,total:0,remaining:0},sheetData.archetype={count:0,total:0,remaining:0},""!==sheetData.object.setup&&(showMonetary=(await this.getCacheItemByCoCID(sheetData.object.setup)).system.monetary.values.length>0),""!==sheetData.object.occupation&&(occupation=await this.getCacheItemByCoCID(this.object.occupation),occupation)){const options=[];for(const[key,carac]of Object.entries(occupation.system.occupationSkillPoints))carac.selected&&(carac.optional?options.push(carac.multiplier*(parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10))):sheetData.occupation.total+=carac.multiplier*(parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10)));options.length>0&&(sheetData.occupation.total+=Math.max(...options))}if(""!==this.object.archetype){const archetype=await game.system.api.cocid.fromCoCID(this.object.archetype);1===archetype.length&&(sheetData.archetype.total=archetype[0].system.bonusPoints)}if(Object.keys(this.object.skillItems).length>0){for(const key in this.object.skillItems){const skill=this.object.skillItems[key];for(let index=0,im=skill.rows.length;index<im;index++){const row=skill.rows[index];if(!skill.flags.isMultiple||!1!==row.selected){let item=foundry.utils.duplicate(skill.item);!1!==row.selected&&"string"!=typeof row.selected&&(item=foundry.utils.duplicate(row.selected));let base=item.system.base;if(!Number.isNumeric(base))for(const key in this.object.setupPoints){const regEx=new RegExp("@"+key,"i");base=base.replace(regEx,parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10))}Number.isNumeric(base)||(base=Math.floor(new Roll(base).evaluate({async:!1}).total));let totalPoints=parseInt(base,10);if(Number(row.personalPoints)>0){const num=Number(row.personalPoints);sheetData.personal.count+=num,totalPoints+=num}if(Number(row.occupationPoints)>0){const num=Number(row.occupationPoints);sheetData.occupation.count+=num,totalPoints+=num}if(Number(row.archetypePoints)>0){const num=Number(row.archetypePoints);sheetData.archetype.count+=num,totalPoints+=num}if(Number(row.experiencePoints)>0){totalPoints+=Number(row.experiencePoints)}let name=item.name;key===this.cocidLanguageOwn?name=item.system.specialization+" ("+item.system.skillName+")":skill.flags.isCreditRating?(name=name+" ["+this.object.creditRating.min+" - "+this.object.creditRating.max+"]",totalPoints>=this.object.creditRating.min&&totalPoints<=this.object.creditRating.max&&(sheetData.creditRatingOkay=!0)):"string"==typeof row.selected&&(name=item.system.specialization+" ("+row.selected+")"),sheetData.skills.push({key,index,name,isOccupation:row.occupationToggle,isArchetype:row.archetypeToggle,base,personalPoints:row.personalPoints,occupationPoints:row.occupationPoints,archetypePoints:row.archetypePoints,experiencePoints:row.experiencePoints,totalPoints,showCreditRating:showMonetary&&key===this.cocidCreditRating})}}}sheetData.skills.sort(CoC7Utilities.sortByNameKey),sheetData.creditRatingOkay&&(sheetData.canNext=!0)}sheetData.personal.remaining=sheetData.personal.total-sheetData.personal.count,sheetData.occupation.remaining=sheetData.occupation.total-sheetData.occupation.count,sheetData.archetype.remaining=sheetData.archetype.total-sheetData.archetype.count;break;case sheetData.pages.PAGE_BACKSTORY:{const allBackstories=await this.object.cacheBackstories;sheetData.backstories={};for(let index=0;index<this.object.bioSections.length;index++)sheetData.backstories[index]={index,name:this.object.bioSections[index].name,rolls:game.system.api.cocid.findCocIdInList(this.object.bioSections[index].key,allBackstories).length?this.object.bioSections[index].key:"",value:this.object.bioSections[index].value}}sheetData.canNext=!0,sheetData.createButton=game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole;break;case sheetData.pages.PAGE_CREATE:sheetData.canNext=!0,sheetData.createButton=!0}return sheetData}activateListeners(html){super.activateListeners(html),html.keypress((e=>/textarea/i.test((e.target||e.srcElement).tagName)||13!==(e.keyCode||e.which||e.charCode||0))),html.find(".submit_on_change").change(this._onChangeSubmit.bind(this)),html.find(".roll-characteristic").click(this._onRollCharacteristic.bind(this)),html.find(".increase-10-characteristic").click(this._onIncreaseCharacteristic10.bind(this)),html.find(".increase-characteristic").click(this._onIncreaseCharacteristic.bind(this)),html.find(".decrease-characteristic").click(this._onDecreaseCharacteristic.bind(this)),html.find(".decrease-10-characteristic").click(this._onDecreaseCharacteristic10.bind(this)),html.find("button.roll_all").click(this._onRollAll.bind(this)),html.find("button.roll_edu").click(this._onRollEdu.bind(this)),html.find("button.roll_luck").click(this._onRollLuck.bind(this)),html.find(".item input.submit_on_blur").blur(this._onChangeSubmit.bind(this)),html.find(".item input.save-characteristic-on-blur").blur(this._onChangeSaveCharacteristic.bind(this)),html.find(".item.toggleable").click(this._onToggleSkill.bind(this)),html.find(".item.clickable").click(this._onClickPickSkill.bind(this)),html.find(".skills-list input").click(this._onClickSkillSpecial.bind(this)),html.find(".skills-list .remove-skill").click(this._onClickRemoveSkill.bind(this)),html.find(".item input.skill-adjustment").blur(this._onChangeSkillPoints.bind(this)),html.find("textarea.backstory-text").keyup(this._onChangeBackstoryText.bind(this)),html.find("button.backstory-roll").click(this._onRollBackstory.bind(this)),html.find("button.backstory-reset").click(this._onResetBackstory.bind(this))}async rollMessage(rolls){if(rolls.length){const html=[];for(const roll of rolls)html.push(await renderTemplate(Roll.CHAT_TEMPLATE,{formula:(CoC7Utilities.getCharacteristicNames(roll[0])?.label??roll[0])+": "+roll[1],tooltip:await roll[2].getTooltip(),total:roll[2].total}));ChatMessage.create({user:game.user.id,speaker:{alias:game.user.name},content:html.join("<div>&nbsp;</div>"),whisper:ChatMessage.getWhisperRecipients("GM")})}}addItemToList(item,{isOccupationDefault=!1,inOccupationGroup=!1,occupationToggle=!1,isArchetypeDefault=!1,archetypeToggle=!1,isCreditRating=!1}={}){const key=item.flags.CoC7?.cocidFlag?.id??item.name;if("skill"!==item.type)return void this.object.investigatorItems.push(item);const isMultiple=!(!item.system.properties.special||!(item.system.properties.requiresname&&!item.system.properties.onlyone||item.system.properties.picknameonly||item.name===game.i18n.format("CoC7.AnySpecName"))),flags={isOccupationDefault,inOccupationGroup,isArchetypeDefault,isCreditRating,occupationToggle,archetypeToggle},rows={occupationPoints:"",archetypePoints:"",experiencePoints:"",personalPoints:"",selected:!1};if(void 0===this.object.skillItems[key])this.object.skillItems[key]={item,flags:foundry.utils.mergeObject(flags,{isMultiple},{inplace:!1}),rows:[]},isMultiple&&!1===isOccupationDefault&&!1===inOccupationGroup&&!1===isArchetypeDefault||this.object.skillItems[key].rows.push(foundry.utils.mergeObject(flags,rows,{inplace:!1}));else{if(isMultiple)this.object.skillItems[key].rows.push(foundry.utils.mergeObject(flags,rows,{inplace:!1}));else for(const flag in flags)this.object.skillItems[key].rows[0][flag]=this.object.skillItems[key].rows[0][flag]||flags[flag];for(const flag in flags)this.object.skillItems[key].flags[flag]=this.object.skillItems[key].flags[flag]||flags[flag]}!isMultiple&&flags.isCreditRating&&(this.object.skillItems[key].rows[0].occupationPoints=this.object.creditRating.min)}clearSetupPoints(){for(const key in this.object.setupPoints)this.object.setupPoints[key]=""}async setSkillLists(){this.object.skillItems={},this.object.occupationGroups={},this.object.investigatorItems=[],this.object.placeable=foundry.utils.duplicate(this.object.quickFireValues);const setup=await this.getCacheItemByCoCID(this.object.setup),occupation=await this.getCacheItemByCoCID(this.object.occupation);let archetype=!1;if(""!==this.object.archetype&&(archetype=await this.getCacheItemByCoCID(this.object.archetype)),setup&&occupation&&(!game.settings.get("CoC7","pulpRuleArchetype")||archetype)){this.object.bioSections=[];for(let index=0;index<setup.system.bioSections.length;index++)this.object.bioSections.push({name:setup.system.bioSections[index],value:"",key:"rt..backstory-"+CoC7Utilities.toKebabCase(setup.system.bioSections[index])});this.object.personal=occupation.system.personal,this.object.personalText=occupation.system.personalText,this.object.creditRating=occupation.system.creditRating;let items=[];items=await this.expandItemArray(setup.system.items);for(let index=0,im=items.length;index<im;index++)this.addItemToList(items[index]);items=await this.expandItemArray(occupation.system.skills);for(let index=0,im=items.length;index<im;index++)this.addItemToList(items[index],{isOccupationDefault:!0,occupationToggle:!0});for(let group=0,gm=occupation.system.groups.length;group<gm;group++){this.object.occupationGroups[group]=occupation.system.groups[group].options,items=await this.expandItemArray(occupation.system.groups[group].skills);for(let index=0,im=items.length;index<im;index++)this.addItemToList(items[index],{inOccupationGroup:group})}if(archetype){items=await this.expandItemArray(archetype.system.skills);for(let index=0,im=items.length;index<im;index++)this.addItemToList(items[index],{isArchetypeDefault:!0,archetypeToggle:!0})}if(Number(this.object.creditRating.max)>0){const nameCreditRating=game.i18n.format("CoC7.CoCIDFlag.keys."+this.cocidCreditRating),flags={isOccupationDefault:!0,occupationToggle:!0,isCreditRating:!0};if(void 0!==this.object.skillItems[this.cocidCreditRating])this.addItemToList(this.object.skillItems[this.cocidCreditRating].item,flags);else if(void 0!==this.object.skillItems[nameCreditRating])this.addItemToList(this.object.skillItems[nameCreditRating].item,flags);else{const skill=await game.system.api.cocid.fromCoCID(this.cocidCreditRating);skill.length&&this.addItemToList(skill[0],flags)}}}}_onDragStart(event){if(event.currentTarget.dataset.characteristicKey){const dragData={type:"investigatorCharacteristic",key:event.currentTarget.dataset.characteristicKey,value:event.currentTarget.dataset.value};event.dataTransfer.setData("text/plain",JSON.stringify(dragData))}}_canDragStart(selector){return!0}_canDragDrop(selector){return!0}async _onDrop(event){try{const dataList=JSON.parse(event.dataTransfer.getData("text/plain"));if(void 0!==dataList.type&&"investigatorCharacteristic"===dataList.type){if(dataList.destination=event.target.closest("li").dataset.characteristicKey,dataList.okay=!1,"-"===dataList.key&&void 0!==this.object.setupPoints[dataList.destination]){const index=this.object.placeable.indexOf(parseInt(dataList.value,10));-1!==index&&this.object.placeable.splice(index,1),""!==this.object.setupPoints[dataList.destination]&&this.object.placeable.push(parseInt(this.object.setupPoints[dataList.destination],10)),this.object.setupPoints[dataList.destination]=parseInt(dataList.value,10),this.object.placeable.sort().reverse(),dataList.okay=!0}else if(void 0!==this.object.setupPoints[dataList.key]&&"-"===dataList.destination)""!==this.object.setupPoints[dataList.key]&&(this.object.placeable.push(parseInt(this.object.setupPoints[dataList.key],10)),this.object.setupPoints[dataList.key]="",this.object.placeable.sort().reverse(),dataList.okay=!0);else if(void 0!==this.object.setupPoints[dataList.key]&&void 0!==this.object.setupPoints[dataList.destination]){const temp=""===this.object.setupPoints[dataList.key]?"":parseInt(this.object.setupPoints[dataList.key],10);this.object.setupPoints[dataList.key]=""===this.object.setupPoints[dataList.destination]?"":parseInt(this.object.setupPoints[dataList.destination],10),this.object.setupPoints[dataList.destination]=temp,dataList.okay=!0}if(dataList.okay)return void this.render(!0)}}catch(err){}const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");if([this.pageList.PAGE_ARCHETYPE_SKILLS,this.pageList.PAGE_OCCUPATION_SKILLS].includes(this.object.step))for(const item of dataList)"skill"===item.type&&(this.addItemToList(item),this.render(!0))}_onClickSkillSpecial(event){event.stopPropagation()}_onClickRemoveSkill(event){event.stopPropagation();const key=event.currentTarget?.parentNode?.dataset?.key,index=event.currentTarget?.parentNode?.dataset?.index;void 0!==this.object.skillItems[key]?.rows[index]&&(this.object.skillItems[key].rows.splice(index,index),this.render(!0))}async _onToggleSkill(event){const key=event.currentTarget?.dataset?.key,index=event.currentTarget?.dataset?.index,toggleKey=event.currentTarget?.dataset?.toggleKey;void 0!==this.object.skillItems[key]?.rows[index]&&(this.object.skillItems[key].rows[index][toggleKey]=!this.object.skillItems[key].rows[index][toggleKey],this.render(!0))}async _onClickPickSkill(event){const key=event.currentTarget?.dataset?.key,index=event.currentTarget?.dataset?.index,toggleKey=event.currentTarget?.dataset?.toggleKey;if(void 0!==this.object.skillItems[key]){index>-1&&(this.object.skillItems[key].rows[index][toggleKey]=!1,this.object.skillItems[key].rows[index].selected=!1,this.render(!0));let skillList=[];const group=game.system.api.cocid.guessGroupFromKey(key);group&&(skillList=(await game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:new RegExp("^"+CoC7Utilities.quoteRegExp(group)+".+$"),type:"i"})).filter((item=>!(item.system.properties?.special&&(item.system.properties?.requiresname||item.system.properties?.picknameonly)))),skillList.length>1&&skillList.sort(CoC7Utilities.sortByNameKey));const skillData=await SkillSpecializationSelectDialog.create({skills:skillList,allowCustom:this.object.skillItems[key].item.system.properties?.requiresname??!1,fixedBaseValue:!0,specializationName:this.object.skillItems[key].item.system.specialization,label:this.object.skillItems[key].item.name});if(index>-1)""!==skillData.selected?(this.object.skillItems[key].rows[index].selected=skillList.find((i=>i.id===skillData.selected)),this.object.skillItems[key].rows[index][toggleKey]=!0):""!==skillData.name&&(this.object.skillItems[key].rows[index].selected=skillData.name,this.object.skillItems[key].rows[index][toggleKey]=!0);else{let selected=!1;""!==skillData.selected?selected=skillList.find((i=>i.id===skillData.selected)):""!==skillData.name&&(selected=skillData.name),this.object.skillItems[key].rows.push({isOccupationDefault:!1,inOccupationGroup:!1,isArchetypeDefault:!1,isCreditRating:!1,occupationToggle:"occupationToggle"===toggleKey,archetypeToggle:"archetypeToggle"===toggleKey,occupationPoints:"",archetypePoints:"",experiencePoints:"",personalPoints:"",selected})}this.render(!0)}}async _onChangeSkillPoints(event){const input=$(event.currentTarget),adjustment=input.data("adjustment"),li=input.closest("li"),key=li.data("key"),index=li.data("index");void 0!==this.object.skillItems[key]?.rows[index][adjustment]&&(this.object.skillItems[key].rows[index][adjustment]=input.val()),this.render(!0)}async _onChangeBackstoryText(event){const textarea=$(event.currentTarget),index=textarea.data("index");void 0!==this.object.bioSections[index]&&(this.object.bioSections[index].value=textarea.val())}async _onRollBackstory(event){const button=$(event.currentTarget),index=button.data("index"),key=button.data("key");if(void 0!==this.object.bioSections[index]){const rolltable=await game.system.api.cocid.fromCoCID(key);if(1===rolltable.length){const tableResult=await rolltable[0].roll();tableResult.results[0].type===CONST.TABLE_RESULT_TYPES.TEXT&&(this.object.bioSections[index].value=(this.object.bioSections[index].value+"\n"+tableResult.results[0].text.trim()).trim())}}this.render(!0)}async _onResetBackstory(event){const index=$(event.currentTarget).data("index");void 0!==this.object.bioSections[index]&&(this.object.bioSections[index].value=""),this.render(!0)}async _onRollLuck(event){const setup=await this.getCacheItemByCoCID(this.object.setup);if(setup){const die=await new Roll(setup.system.characteristics.rolls.luck.toString()).evaluate({async:!0});this.object.setupModifiers.luck=[die.total];const html=await renderTemplate(Roll.CHAT_TEMPLATE,{formula:game.i18n.localize("CoC7.InvestigatorWizard.RollTwiceForLuck")+": "+setup.system.characteristics.rolls.luck.toString(),tooltip:await die.getTooltip(),total:die.total});ChatMessage.create({user:game.user.id,speaker:{alias:game.user.name},content:html,whisper:ChatMessage.getWhisperRecipients("GM")}),this.render(!0)}}async _onRollEdu(event){if(event.preventDefault(),void 0!==this.object.requiresAgeAdjustments.edu&&!this.object.requiresAgeAdjustments.edu.rolled&&this.object.requiresAgeAdjustments.edu.total){let value=parseInt(this.object.setupPoints.edu,10);const message=[];for(let rolls=this.object.requiresAgeAdjustments.edu.total;rolls>0;rolls--){const die=await new Roll("1d100").evaluate({async:!0});if(die.total>value){const augmentDie=await new Roll("1d10").evaluate({async:!0});message.push(`<span class="upgrade-success">${game.i18n.format("CoC7.DevSuccess",{item:game.i18n.localize("CHARAC.Education"),die:die.total,score:value,augment:augmentDie.total})}</span><br>`),value+=parseInt(augmentDie.total,10)}else message.push(`<span class="upgrade-failed">${game.i18n.format("CoC7.DevFailure",{item:game.i18n.localize("CHARAC.Education"),die:die.total,score:value})}</span><br>`)}ChatMessage.create({flavor:game.i18n.localize("CoC7.RollAll4Dev"),user:game.user.id,speaker:{alias:game.user.name},content:message.join(""),whisper:ChatMessage.getWhisperRecipients("GM")}),this.object.setupModifiers.edu=value-parseInt(this.object.setupPoints.edu,10),this.object.requiresAgeAdjustments.edu.rolled=!0,this.render(!0)}}async _onRollAll(event){event.preventDefault();const rolls=[];for(const key of["str","con","siz","dex","app","int","pow","edu","luck"]){const result=await this.rollCharacteristic(key);!1!==result&&rolls.push(result)}this.rollMessage(rolls),this.render(!0)}async _onIncreaseCharacteristic10(event){event.preventDefault();const li=event.currentTarget.closest(".item");void 0!==li.dataset.offset&&void 0!==li.dataset.min&&void 0!==li.dataset.max?this.modifyOffset(li.dataset.offset,10,li.dataset.min,li.dataset.max):void 0!==li.dataset.key&&this.modifyCharacteristic(li.dataset.key,10),this.render(!0)}async _onIncreaseCharacteristic(event){event.preventDefault();const li=event.currentTarget.closest(".item");void 0!==li.dataset.offset&&void 0!==li.dataset.min&&void 0!==li.dataset.max?this.modifyOffset(li.dataset.offset,1,li.dataset.min,li.dataset.max):void 0!==li.dataset.key&&this.modifyCharacteristic(li.dataset.key,1),this.render(!0)}async _onDecreaseCharacteristic(event){event.preventDefault();const li=event.currentTarget.closest(".item");void 0!==li.dataset.offset&&void 0!==li.dataset.min&&void 0!==li.dataset.max?this.modifyOffset(li.dataset.offset,-1,li.dataset.min,li.dataset.max):void 0!==li.dataset.key&&this.modifyCharacteristic(li.dataset.key,-1),this.render(!0)}_onDecreaseCharacteristic10(event){event.preventDefault();const li=event.currentTarget.closest(".item");void 0!==li.dataset.offset&&void 0!==li.dataset.min&&void 0!==li.dataset.max?this.modifyOffset(li.dataset.offset,-10,li.dataset.min,li.dataset.max):void 0!==li.dataset.key&&this.modifyCharacteristic(li.dataset.key,-10),this.render(!0)}modifyOffset(key,value,min,max){this.object.setupModifiers[key]=Math.max(Math.min(parseInt(this.object.setupModifiers[key],10)+value,parseInt(max,10)),parseInt(min,10))}modifyCharacteristic(key,value){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input");input&&(input.value=Number(input.value)+value,this.object.setupPoints[key]=Number(input.value))}async _onRollCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key,result=await this.rollCharacteristic(characKey);!1!==result&&this.rollMessage([result]),this.render(!0)}async rollCharacteristic(key){const li=$(`#investigator-wizard-application li.item[data-key=${key}]`),input=li.find("input"),formula=li.data("roll");if(input&&formula&&(this.object.rerollsEnabled||""===this.object.setupPoints[key])){const roll=new Roll(formula.toString());return await roll.evaluate({async:!0}),input.val(roll.total),this.object.setupPoints[key]=Number(roll.total),[key,formula.toString(),roll]}return!1}_onChangeSubmit(event){this._onSubmit(event)}_onChangeSaveCharacteristic(event){const obj=$(event.currentTarget),name=obj.prop("name");if(void 0!==this.object.setupPoints[name]){this.object.setupPoints[name]=obj.val();let empties=!1,total=0;for(const key in this.object.setupPoints)""!==this.object.setupPoints[key]?"luck"!==key&&(total+=parseInt(this.object.setupPoints[key],10)):empties=!0;const objTotal=obj.closest("ol.item-list").find("span.total"),max=parseInt(objTotal.siblings("span.value").text(),10);objTotal.text(total),total!==max||empties?obj.closest("form").find("button.submit-button[data-button=next]").length>0&&this.render(!0):0===obj.closest("form").find("button.submit-button[data-button=next]").length&&this.render(!0)}}getPageNumber(direction){const pageOrder=this.pageOrder,key=parseInt(Object.keys(pageOrder).find((key=>pageOrder[key]===this.object.step)),10)+direction;return pageOrder[key]}async _updateObject(event,formData){if(["back","next"].includes(event.submitter?.dataset.button)){if(event.submitter.className.indexOf("currently-submitting")>-1)return;event.submitter.className=event.submitter.className+" currently-submitting"}if(void 0!==formData["default-setup"]&&void 0!==formData["world-era"]&&void 0!==formData["default-ownership"]){if(this.object.defaultSetup!==formData["default-setup"]&&(this.object.defaultSetup=formData["default-setup"],game.settings.set("CoC7","InvestigatorWizardSetup",this.object.defaultSetup),this.object.setup=this.object.defaultSetup,this.clearSetupPoints(),await this.setSkillLists()),this.object.defaultOwnership!==formData["default-ownership"]&&(this.object.defaultOwnership=formData["default-ownership"],game.settings.set("CoC7","InvestigatorWizardOwnership",this.object.defaultOwnership)),this.object.defaultEra!==formData["world-era"]){const obj=$(this.element.find("form")),started=Date.now();obj.find(".dialog-buttons:first").hide(),obj.find(".scrollsection:first").hide(),obj.find(".erachange:first").show(),this.object.defaultEra=formData["world-era"],await game.settings.set("CoC7","worldEra",this.object.defaultEra),this.object.cacheCoCID=await CoC7InvestigatorWizard.loadCacheItemByCoCID();const buffer=500-(Date.now()-started);buffer>10&&await new Promise((resolve=>setTimeout(resolve,buffer)))}if(void 0!==formData["characteristics-method"]){const type=Number(formData["characteristics-method"]);type===this.characteristicsMethods.METHOD_DEFAULT?(this.object.enforcePointBuy=!1,this.object.quickFireValues=[]):type===this.characteristicsMethods.METHOD_POINTS?(this.object.enforcePointBuy=!0,this.object.quickFireValues=[]):type===this.characteristicsMethods.METHOD_VALUES&&(this.object.enforcePointBuy=!1,game.settings.get("CoC7","pulpRuleArchetype")?this.object.quickFireValues=[90,80,70,60,60,50,50,40]:this.object.quickFireValues=[80,70,60,60,50,50,50,40]),game.settings.set("CoC7","InvestigatorWizardPointBuy",this.object.enforcePointBuy),game.settings.set("CoC7","InvestigatorWizardQuickFire",this.object.quickFireValues)}this.object.rerollsEnabled="string"==typeof formData["rerolls-enabled"],game.settings.set("CoC7","InvestigatorWizardRerolls",this.object.rerollsEnabled);for(let i=0,im=this.object.quickFireValues.length;i<im;i++){const num=Number(formData["quick-fire-values-"+i]);num>0&&(this.object.quickFireValues[i]=num)}this.object.quickFireValues.sort().reverse(),this.object.placeable=foundry.utils.duplicate(this.object.quickFireValues),"string"==typeof formData["default-enabled"]?"0"===this.object.defaultQuantity.toString()?(this.object.defaultQuantity=1,game.settings.set("CoC7","InvestigatorWizardQuantity",this.object.defaultQuantity)):(this.object.defaultQuantity=formData["default-quantity"],game.settings.set("CoC7","InvestigatorWizardQuantity",this.object.defaultQuantity)):"0"!==this.object.defaultQuantity.toString()&&(this.object.defaultQuantity=0,game.settings.set("CoC7","InvestigatorWizardQuantity",this.object.defaultQuantity))}else if(void 0!==formData["coc-setup"])this.object.setup!==formData["coc-setup"]&&(this.object.setup=formData["coc-setup"],this.clearSetupPoints(),await this.setSkillLists());else if(void 0!==formData["coc-archetype"])this.object.archetype!==formData["coc-archetype"]&&(this.object.archetype=formData["coc-archetype"],this.object.coreCharacteristic="",this.clearSetupPoints(),await this.setSkillLists());else if(void 0!==formData["coc-occupation"])this.object.occupation!==formData["coc-occupation"]&&(this.object.occupation=formData["coc-occupation"],await this.setSkillLists());else{for(const key in this.object.setupPoints)void 0!==formData[key]&&this.object.setupPoints[key]!==formData[key]&&(this.object.setupPoints[key]=formData[key]);void 0!==formData["coc-core-characteristic"]&&this.object.coreCharacteristic!==formData["coc-core-characteristic"]&&(this.object.coreCharacteristic=formData["coc-core-characteristic"],this.clearSetupPoints(),this.object.placeable=foundry.utils.duplicate(this.object.quickFireValues))}const flatKeys=["name","age","residence","birthplace","language","avatar","token"];for(const key of flatKeys)void 0!==formData[key]&&this.object[key]!==formData[key]&&(this.object[key]=formData[key],"age"===key&&this.getAgeAdjustments());if("back"===event.submitter?.dataset.button){const pageNumber=this.getPageNumber(-1);if(void 0!==pageNumber){this.object.step=pageNumber;const obj=this.element.find(".scrollsection");obj.length&&obj[0].scrollTop&&(obj[0].scrollTop=0)}}else if("next"===event.submitter?.dataset.button){if(this.object.step===this.pageList.PAGE_CREATE||this.object.step===this.pageList.PAGE_BACKSTORY&&game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole)return void this.attemptToCreate();{const pageNumber=this.getPageNumber(1);if(void 0!==pageNumber){this.object.step=pageNumber;const obj=this.element.find(".scrollsection");obj.length&&obj[0].scrollTop&&(obj[0].scrollTop=0)}}}this.render(!0)}async attemptToCreate(){const actorData=await this.normalizeCharacterData(this.object);if(game.user.isGM||game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole){(await CoC7InvestigatorWizard.createCharacter(actorData)).sheet.render(!0),this.close()}else{const keepers=game.users.filter((u=>u.active&&u.isGM));if(keepers.length){actorData.ownership[game.user.id]=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;const data={type:"character-wizard",listener:keepers[0].id,payload:actorData};game.socket.emit("system.CoC7",data),ui.notifications.info(game.i18n.localize("CoC7.InvestigatorWizard.CreatingInvestigator")),this.close()}else ui.notifications.error(game.i18n.localize("CoC7.ErrorMissingKeeperUser"))}}async normalizeCharacterData(data){const weaponSkills={melee:{},rngd:{}},items=[];for(const key in data.skillItems){const skill=data.skillItems[key];for(let index=0,im=skill.rows.length;index<im;index++){const row=skill.rows[index];if(!skill.flags.isMultiple||!1!==row.selected){let item=foundry.utils.duplicate(skill.item);!1!==row.selected&&"string"!=typeof row.selected&&(item=foundry.utils.duplicate(row.selected),row.selected=!1),row.occupationToggle&&(item.system.flags.occupation=!0),row.archetypeToggle&&(item.system.flags.archetype=!0);let base=item.system.base;if(!Number.isNumeric(base))for(const key in data.setupPoints){const regEx=new RegExp("@"+key,"i");base=base.replace(regEx,parseInt(data.setupPoints[key],10)+parseInt(data.setupModifiers[key],10))}Number.isNumeric(base)||(base=Math.floor(new Roll(base).evaluate({async:!1}).total)),item.system.base=base,item.system.adjustments=item.system.adjustments??{},Number(row.personalPoints)>0&&(item.system.adjustments.personal=parseInt(row.personalPoints,10)),Number(row.occupationPoints)>0&&(item.system.adjustments.occupation=parseInt(row.occupationPoints,10)),Number(row.archetypePoints)>0&&(item.system.adjustments.archetype=parseInt(row.archetypePoints,10)),Number(row.experiencePoints)>0&&(item.system.adjustments.experience=parseInt(row.experiencePoints,10)),key===this.cocidLanguageOwn?(item.system.skillName=data.language,item.name=item.system.specialization+" ("+item.system.skillName+")"):"string"==typeof row.selected&&(item.system.skillName=row.selected,item._id=foundry.utils.randomID(),item.name=item.system.specialization+" ("+item.system.skillName+")",void 0!==item.flags.CoC7?.cocidFlag?.id&&(item.flags.CoC7.cocidFlag.id=game.system.api.cocid.guessId(item))),item.system.properties?.fighting?(weaponSkills.melee[item.name]=item._id,weaponSkills.melee[item.system.skillName]=item._id):item.system.properties?.firearm&&(weaponSkills.rngd[item.name]=item._id,weaponSkills.rngd[item.system.skillName]=item._id),items.push(item)}}}for(const sourceItem of data.investigatorItems){const item=foundry.utils.duplicate(sourceItem);item.system.properties.melee?(void 0!==weaponSkills.melee[item.system.skill.main.name]&&(item.system.skill.main.id=weaponSkills.melee[item.system.skill.main.name]),void 0!==weaponSkills.melee[item.system.skill.alternativ.name]&&(item.system.skill.alternativ.id=weaponSkills.melee[item.system.skill.alternativ.name])):item.system.properties.rngd&&(void 0!==weaponSkills.rngd[item.system.skill.main.name]&&(item.system.skill.main.id=weaponSkills.rngd[item.system.skill.main.name]),void 0!==weaponSkills.rngd[item.system.skill.alternativ.name]&&(item.system.skill.alternativ.id=weaponSkills.rngd[item.system.skill.alternativ.name])),items.push(item)}let monetary={};const setup=await this.getCacheItemByCoCID(this.object.setup);setup&&(monetary=foundry.utils.duplicate(setup.system.monetary));const development={personal:2*(parseInt(data.setupPoints.int,10)+parseInt(data.setupModifiers.int,10)),occupation:0,archetype:0};if(""!==data.archetype){const archetype=await game.system.api.cocid.fromCoCID(data.archetype);1===archetype.length&&(items.push(archetype[0].toObject()),development.archetype=archetype[0].system.bonusPoints)}if(""!==data.occupation){const occupation=await game.system.api.cocid.fromCoCID(data.occupation);if(1===occupation.length){items.push(occupation[0].toObject());const options=[];for(const[key,carac]of Object.entries(occupation[0].system.occupationSkillPoints))carac.selected&&(carac.optional?options.push(carac.multiplier*(parseInt(data.setupPoints[key],10)+parseInt(data.setupModifiers[key],10))):development.occupation+=carac.multiplier*(parseInt(data.setupPoints[key],10)+parseInt(data.setupModifiers[key],10)));options.length>0&&(development.occupation+=Math.max(...options))}}const biography=[];for(let index=0,im=data.bioSections.length;index<im;index++)biography.push({title:data.bioSections[index].name,value:data.bioSections[index].value});return{type:"character",name:data.name,img:data.avatar,system:{characteristics:{str:{value:parseInt(data.setupPoints.str,10)+parseInt(data.setupModifiers.str,10)},con:{value:parseInt(data.setupPoints.con,10)+parseInt(data.setupModifiers.con,10)},siz:{value:parseInt(data.setupPoints.siz,10)+parseInt(data.setupModifiers.siz,10)},dex:{value:parseInt(data.setupPoints.dex,10)+parseInt(data.setupModifiers.dex,10)},app:{value:parseInt(data.setupPoints.app,10)+parseInt(data.setupModifiers.app,10)},int:{value:parseInt(data.setupPoints.int,10)+parseInt(data.setupModifiers.int,10)},pow:{value:parseInt(data.setupPoints.pow,10)+parseInt(data.setupModifiers.pow,10)},edu:{value:parseInt(data.setupPoints.edu,10)+parseInt(data.setupModifiers.edu,10)}},attribs:{lck:{value:Math.max(parseInt(data.setupPoints.luck,10),parseInt(data.setupModifiers.luck,10))},san:{value:parseInt(data.setupPoints.pow,10)+parseInt(data.setupModifiers.pow,10)}},infos:{age:data.age,residence:data.residence,birthplace:data.birthplace},development,biography,monetary},prototypeToken:{name:data.name,actorLink:!0,texture:{src:data.token},disposition:CONST.TOKEN_DISPOSITIONS.FRIENDLY,sight:{enabled:!0}},items,ownership:{default:parseInt(data.defaultOwnership,10)}}}static async createCharacterFromData(actorData){const actor=await CoC7InvestigatorWizard.createCharacter(actorData),functionId=Hooks.on("renderActorSheet",((app,html,data)=>{app.object.id===actor.id&&(game.socket.emit("system.CoC7",{type:"open-character",listener:Object.keys(actorData.ownership).find((k=>"default"!==k)),payload:actor.id}),Hooks.off("renderActorSheet",functionId))}));actor.sheet.render(!0)}static async createCharacter(actorData){const actor=await Actor.create(actorData);return await actor.update({"system.attribs.hp.value":actor.rawHpMax,"system.attribs.mp.value":actor.rawMpMax,"system.attribs.san.max":actor.rawMpMax}),await actor.resetDailySanity(),actor}static async create(options={}){options=foundry.utils.mergeObject({step:0,defaultSetup:game.settings.get("CoC7","InvestigatorWizardSetup"),defaultQuantity:game.settings.get("CoC7","InvestigatorWizardQuantity"),defaultOwnership:game.settings.get("CoC7","InvestigatorWizardOwnership"),defaultEra:game.settings.get("CoC7","worldEra"),rerollsEnabled:game.settings.get("CoC7","InvestigatorWizardRerolls"),enforcePointBuy:game.settings.get("CoC7","InvestigatorWizardPointBuy"),quickFireValues:game.settings.get("CoC7","InvestigatorWizardQuickFire"),placeable:foundry.utils.duplicate(game.settings.get("CoC7","InvestigatorWizardQuickFire")),cacheCoCID:CoC7InvestigatorWizard.loadCacheItemByCoCID(),cacheBackstories:game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:/^rt\.\.backstory-/,type:"rt"}),cacheItems:{},setup:game.settings.get("CoC7","InvestigatorWizardSetup"),skillItems:{},occupationGroups:{},investigatorItems:[],setupPoints:{str:"",con:"",siz:"",dex:"",app:"",int:"",pow:"",edu:"",luck:""},setupModifiers:{str:0,con:0,siz:0,dex:0,app:0,int:0,pow:0,edu:0,luck:0},archetype:"",coreCharacteristic:"",occupation:"",bioSections:[],personal:0,personalText:"",creditRating:{min:0,max:0},name:"",age:"",requiresAgeAdjustments:!1,residence:"",birthplace:"",language:"",avatar:"icons/svg/mystery-man.svg",token:"icons/svg/mystery-man.svg"},options),new CoC7InvestigatorWizard(options).render(!0)}}class CoC7MenuLayer extends PlaceablesLayer{constructor(){super(),this.objects={}}static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"coc7menu",zIndex:60})}static get documentName(){return"Token"}get placeables(){return[]}}class CoC7Menu{static getButtons(controls){canvas.coc7gmtools=new CoC7MenuLayer;const isKeeper=game.user.isGM,showHiddenDevMenu=game.settings.get("CoC7","hiddendevmenu");controls.push({name:"coc7menu",title:"CoC7.GmTools",layer:"coc7gmtools",icon:"game-icon game-icon-tentacle-strike",visible:isKeeper,tools:[{toggle:!0,icon:"fas fa-angle-double-up",name:"devphase",active:game.settings.get("CoC7","developmentEnabled"),title:"CoC7.DevPhase",onClick:async toggle=>await CoC7Utilities.toggleDevPhase(toggle)},{toggle:!0,icon:"fas fa-user-edit",name:"charcreate",active:game.settings.get("CoC7","charCreationEnabled"),title:"CoC7.CharCreationMode",onClick:async toggle=>await CoC7Utilities.toggleCharCreation(toggle)},{button:!0,icon:"fas fa-user-plus",name:"actor-import",title:"CoC7.ActorImporter",onClick:async()=>await CoC7ActorImporterDialog.create()},{button:!0,icon:"fas fa-user-check",name:"investigator-wizard",title:"CoC7.InvestigatorWizard.Title",onClick:async()=>await CoC7InvestigatorWizard.create()},{toggle:!0,icon:"fas fa-certificate",class:"xp_toggle",name:"xptoggle",active:game.settings.get("CoC7","xpEnabled"),title:"CoC7.toggleXP",onClick:async toggle=>await CoC7Utilities.toggleXPGain(toggle)},{button:!0,icon:"game-icon game-icon-card-joker",name:"fakeroll",title:"CoC7.FakeRoll",onClick:CoC7Chat.fakeRollMessage},{button:!0,icon:"fas fa-moon",name:"startrest",title:"CoC7.startRest",onClick:async()=>await CoC7Utilities.getTarget()}]}),showHiddenDevMenu&&(canvas.coc7DevTools=new CoC7MenuLayer,controls.push({name:"coc7DevMenu",title:"Dev tools. If you don't know what it is, you don't need it and you shouldn't use it !!",layer:"coc7DevTools",icon:"game-icon game-icon-police-badge",visible:isKeeper,tools:[{toggle:!0,icon:"game-icon game-icon-dice-fire",name:"alwaysCrit",active:game.CoC7.dev.dice.alwaysCrit,title:"All rolls will crit",onClick:toggle=>{game.CoC7.dev.dice.alwaysFumble=!1,game.CoC7.dev.dice.alwaysCrit=toggle}},{toggle:!0,icon:"game-icon game-icon-fire-extinguisher",name:"alwaysFumble",active:game.CoC7.dev.dice.alwaysFumble,title:"All rolls will fumble",onClick:toggle=>{game.CoC7.dev.dice.alwaysFumble=toggle,game.CoC7.dev.dice.alwaysCrit=!1}}]}))}static renderControls(app,html,data){const isKeeper=game.user.isGM,keeperMenu=html.find(".game-icon-tentacle-strike").parent();keeperMenu.addClass("coc7-menu"),isKeeper&&keeperMenu.after('<li class="scene-control coc7-menu coc7-create-link" title="'+game.i18n.localize("CoC7.CreateLink")+'"><i class="fas fa-link"></i></li>'),keeperMenu.after('<li class="scene-control coc7-menu coc7-dice-roll" title="'+game.i18n.localize("CoC7.RollDice")+'"><i class="game-icon game-icon-d10"></i></li>'),html.find(".coc7-menu.coc7-dice-roll").click((event=>CoC7Utilities.rollDice(event))),html.find(".coc7-menu.coc7-create-link").click((event=>CoC7ContentLinkDialog.create(event)))}}class CoC7Canvas{static get COC7_TYPES_SUPPORTED(){return["CoC7Link","locator","getToken"]}static async onDropSomething(canvas,data){if(data.type&&CoC7Canvas.COC7_TYPES_SUPPORTED.includes(data.type)){const gridSize=canvas.scene.grid.size,x=data.x-gridSize/2,y=data.y-gridSize/2,height=gridSize,width=gridSize;let dropTargetTokens=canvas.tokens.placeables.filter((obj=>{const c=obj.center;return Number.between(c.x,x,x+width)&&Number.between(c.y,y,y+height)}));switch(dropTargetTokens.length||(dropTargetTokens=canvas.tokens.controlled),data.type){case"CoC7Link":if(data.check===CoC7Link.CHECK_TYPE.EFFECT){if(dropTargetTokens.length)for(const token of dropTargetTokens)CoC7Link._onLinkActorClick(token.actor,data)}else dropTargetTokens.length?CoC7Link.toWhisperMessage(data,dropTargetTokens.filter((t=>t.actor.owners.length)).map((t=>t.actor))):CoC7Link.toWhisperMessage(data,game.users.players.filter((u=>!!u.character)).map((u=>u.character)));break;case"getToken":void 0!==data.appId&&"string"==typeof data.callBack&&void 0!==ui.windows[data.appId]&&"function"==typeof ui.windows[data.appId][data.callBack]&&ui.windows[data.appId][data.callBack](dropTargetTokens);break;default:if(data.docUuid&&data.callBack){const doc=CoC7Utilities.SfromUuid(data.docUuid);if(doc[data.callBack]&&"function"==typeof doc[data.callBack])try{data.scene=canvas.scene.uuid,doc[data.callBack](data)}catch(error){console.warn(error.message)}}}}}}class CoC7SettingsDirectory extends Settings{activateListeners(html){super.activateListeners(html),game.user.isGM&&(html.find("#settings-game").append('<button class="trigger-data-migration"><i class="fas fa-wrench"></i> '+game.i18n.localize("CoC7.Migrate.TriggerButton")+"</button>"),html.find("#settings-documentation").append('<button class="trigger-system-manual"><i class="fas fa-books"></i> '+game.i18n.localize("CoC7.System.Documentation")+"</button>"),html.find(".trigger-data-migration").click((()=>{new Dialog({title:game.i18n.localize("CoC7.Migrate.TriggerTitle"),content:game.i18n.localize("CoC7.Migrate.TriggerContents"),buttons:{migrate:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Migrate.TriggerRestart"),callback:async()=>{await game.settings.set("CoC7","systemUpdateVersion",0),window.location.reload()}},close:{icon:'<i class="fas fa-ban"></i>',label:game.i18n.localize("Cancel"),callback:()=>{}}},default:"close"},{}).render(!0)})),html.find(".trigger-system-manual").click((async()=>{(await game.packs.get("CoC7.system-doc").getDocument(CONFIG.CoC7.Manual))?.sheet.render(!0)})))}}class CoC7CompendiumDirectory extends CompendiumDirectory{activateListeners(html){super.activateListeners(html);let translated=!1;if("en"===game.i18n.lang)translated=!0;else if(void 0!==game.babele)for(const v of Object.values(game.babele.modules))v.lang===game.i18n.lang&&(translated=!0);translated||(html.find("footer.directory-footer").append('<a class="compendium-translation" title="'+game.i18n.localize("CoC7.HowToTranslateTitle")+'">'+game.i18n.localize("CoC7.HowToTranslateTitle")+"</a>"),html.find(".compendium-translation").click((()=>{const message="<p>"+game.i18n.localize("CoC7.HowToTranslateWarning")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateInstallBabele")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateInstallTranslation")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateEnableTranslation")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateNoTranslation")+"</p>";new Dialog({title:game.i18n.localize("CoC7.HowToTranslateTitle"),content:message,buttons:{},default:"close"},{}).render(!0)})))}}class CoC7ActorDirectory extends ActorDirectory{activateListeners(html){super.activateListeners(html);let allowWizard=game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole;if(!allowWizard){const allowed=game.settings.get("CoC7","InvestigatorWizardQuantity");if(allowed>0){allowWizard=game.actors.filter((a=>[a.ownership.default,a.ownership[game.user.id]??CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE].includes(CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER))).length<allowed}}allowWizard&&(html.find("footer.directory-footer").append('<a class="investigator-wizard">'+game.i18n.localize("CoC7.InvestigatorWizard.Title")+"</a>"),html.find(".investigator-wizard").click((()=>{CoC7InvestigatorWizard.create()}))),game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole&&(html.find("footer.directory-footer").append('<a class="actor-import">'+game.i18n.localize("CoC7.ActorImporter")+"</a>"),html.find(".actor-import").click((()=>{CoC7ActorImporterDialog.create()})))}}class CoC7Spell extends CoC7Item{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/pentagram-rose.svg"),super(data,context),this.context=context}async cast(){if(!this.isOwned)return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"));const costs=foundry.utils.duplicate(this.system.costs),losses=[];let convertSurplusIntoHitPoints;if(costs.magicPoints=CoC7Utilities.isFormula(costs.magicPoints)?(await new Roll(costs.magicPoints).roll({async:!0})).total:parseInt(costs.magicPoints),costs.magicPoints&&costs.magicPoints>this.actor.system.attribs.mp.value&&(convertSurplusIntoHitPoints=await new Promise((resolve=>{const convertedHitPoints=costs.magicPoints-this.actor.system.attribs.mp.value,convertedMagicPoints=costs.magicPoints-convertedHitPoints,data={title:" ",content:game.i18n.format("CoC7.NotEnoughMagicPoints",{actorMagicPoints:this.actor.system.attribs.mp.value,convertedHitPoints,convertedMagicPoints,originalMagicPoints:costs.magicPoints,spell:this.name}),buttons:{cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel"),callback:()=>resolve(!1)},proceed:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Proceed"),callback:()=>(costs.hitPoints=convertedHitPoints,costs.magicPoints=convertedMagicPoints,resolve(!0))}},default:"cancel",classes:["coc7","dialog"]};new Dialog(data).render(!0)})),!convertSurplusIntoHitPoints))return;for(const[key,value]of Object.entries(costs))value&&0!==Number(value)&&losses.push(await this.resolveLosses(key,value));const description=this.system.description.value,html=await renderTemplate("systems/CoC7/templates/items/spell/chat.html",{description,losses});return await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:this.name,content:html})}async resolveLosses(characteristic,value){let characteristicName,loss;loss=CoC7Utilities.isFormula(value)?(await new Roll(value).roll({async:!0})).total:parseInt(value);const actorData=this.actor.system;switch(characteristic){case"hitPoints":characteristicName=game.i18n.localize("CoC7.HitPoints"),this.actor.dealDamage(loss,{ignoreArmor:!0});break;case"sanity":characteristicName=game.i18n.localize("CoC7.SanityPoints"),this.grantSanityLoss(loss);break;case"magicPoints":characteristicName=game.i18n.localize("CoC7.MagicPoints"),this.actor.setMp(actorData.attribs.mp.value-loss);break;case"power":characteristicName=game.i18n.localize("CHARAC.Power"),this.actor.update({"system.characteristics.pow.value":actorData.characteristics.pow.value-loss})}return{characteristicName,loss}}async grantSanityLoss(value){const template=SanCheckCard.template;let html=await renderTemplate(template,{});const message=await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:game.i18n.format("CoC7.CastingSpell",{spell:this.name}),content:html}),card=await message.getHTML();if(void 0!==card.length&&1===card.length){const sanityLoss=value;html=card.find(".chat-card")[0],html.dataset.object=escape(JSON.stringify({actorKey:this.actor.id,fastForward:!1,sanData:{sanMin:sanityLoss,sanMax:sanityLoss}}));const sanityCheck=SanCheckCard.getFromCard(html);await sanityCheck.bypassRollSan(),await sanityCheck.rollSanLoss(),sanityCheck.updateChatCard()}}async update(data,context){if(void 0!==this.context.parent&&void 0!==this.context.bookId){let item,book;null===this.context.parent?(item=game.items.get(this.context.bookId),book=item.toObject()):book=this.context.parent.items.get(this.context.bookId).toObject();for(let i=0,im=book.system.spells.length;i<im;i++)book.system.spells[i]._id===this.id&&(book.system.spells[i]=foundry.utils.mergeObject(book.system.spells[i],data));null===this.context.parent?(await item.update({"system.spells":book.system.spells}),this.sheet.object=new CoC7Spell(book.system.spells.find((spell=>spell._id===this.id)),this.context)):(await this.context.parent.updateEmbeddedDocuments("Item",[book]),this.sheet.object=new CoC7Spell(book.system.spells.find((spell=>spell._id===this.id)),this.context)),this.sheet.render(!0)}else await super.update(data,context)}}class CoC7Book extends CoC7Item{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/secret-book.svg"),super(data,context)}static convertDifficulty(difficulty){switch(difficulty){case"hard":return CoC7Check.difficultyLevel.hard;case"extreme":return CoC7Check.difficultyLevel.extreme;case"critical":return CoC7Check.difficultyLevel.critical;case"unreadable":return CoC7Check.difficultyLevel.impossible;default:return CoC7Check.difficultyLevel.regular}}async addSpells(spells){const collection=this.system.spells?foundry.utils.duplicate(this.system.spells):[];for(const spell of spells)collection.push(spell);return await this.update({"system.spells":collection})}async spellDetail(index){const isKeeper=game.user.isGM,data=this.system.spells[index],parent=this.actor?this.actor:null,spell=new CoC7Spell(data,{parent,bookId:this.id});if(isKeeper||spell.system.learned)return await spell.sheet.render(!0)}async attemptInitialReading(){const difficulty=CoC7Book.convertDifficulty(this.system.difficultyLevel),language=this.system.language,skill=this.actor?.getSkillsByName(language);if(skill){if(0===skill.length)return ui.notifications.error(game.i18n.format("CoC7.UnknownLanguage",{actor:this.actor.name}));{const check=new CoC7Check;return check.actor=this.actor,check.skill=skill[0].id,check.difficulty=difficulty,check.parent=this.uuid,check.context="INITIAL_READING",check.flavor=game.i18n.format("CoC7.ReadAttempt",{book:this.name,language,difficulty:this.system.difficultyLevel}),await check.roll(),await check.toMessage()}}return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"))}async changeProgress(mode,value){if(!this.isOwned&&"reset"!==mode)return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"));if(!this.system.initialReading&&"reset"!==mode)return ui.notifications.error(game.i18n.format("CoC7.InitialReadingNeeded",{actor:this.actor.name,book:this.name}));if(!this.system.type.mythos&&"reset"!==mode)return ui.notifications.error(game.i18n.localize("CoC7.NotMythosTome"));const necessary=this.system.study.necessary;let fullStudy=this.system.fullStudy,progress=this.system.study.progress;if(isNaN(progress))return await this.update({"system.study.progress":0});if(value&&progress>value)return await this.update({"system.fullStudy":++fullStudy,"system.study.progress":value}),await this.completeFullStudy();if("increase"===mode&&progress<necessary){if(!1!==await this.checkExhaustion())return;if(await this.update({"system.study.progress":++progress}),progress===necessary)return await this.update({"system.fullStudy":++fullStudy}),await this.grantFullStudy()}else if("decrease"===mode&&progress>0)return await this.update({"system.study.progress":--progress})}async checkExhaustion(){const actorMythosValue=this.actor?.cthulhuMythos,mythosRating=this.system.mythosRating;if(this.system.initialReading)return actorMythosValue>=mythosRating&&(await this.update({"system.study.progress":this.system.study.necessary}),ui.notifications.warn(game.i18n.format("CoC7.BookHasNothingMoreToTeach",{actor:this.actor.name,book:this.name})))}async grantFullStudy(){if(!this.system.type.mythos)return;if(!1!==await this.checkExhaustion())return;const actorMythosValue=this.actor.cthulhuMythos,developments=[],mythosRating=this.system.mythosRating;let mythosFinal=this.system.gains.cthulhuMythos.final;if(actorMythosValue+mythosFinal>mythosRating)for(let index=1;index<=mythosFinal;index++)actorMythosValue+mythosFinal-index<=mythosRating&&(mythosFinal-=index);return developments.push({name:game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.cthulhu-mythos"),gain:parseInt(mythosFinal)},{name:this.system.language,gain:"development"}),await this.grantSkillDevelopment(developments),await this.rollSanityLoss(),await this.update({"system.fullStudies":++this.system.fullStudies})}async grantInitialReading(){if(this.system.initialReading)return;const developments=[],mythos={gains:this.system.gains.cthulhuMythos.initial,type:this.system.type.mythos},occult={gains:this.system.gains.occult,type:this.system.type.occult},other_gains=this.system.gains.others,other_type=this.system.type.other;if(mythos.type&&mythos.gains&&developments.push({name:game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.cthulhu-mythos"),gain:parseInt(mythos.gains)}),occult.type&&occult.gains&&developments.push({name:game.i18n.localize("CoC7.Occult"),gain:parseInt(occult.gains)}),other_type)for(const skill of other_gains){const pattern=skill.name.match(/^(.+) \((.+)\)$/);pattern&&(skill.specialization=pattern[1],skill.name=pattern[2]),"development"!==skill.value&&(skill.value=(await new Roll(skill.value).roll({async:!0})).total),skill.value&&developments.push({name:skill.name,gain:skill.value,specialization:skill.specialization})}return await this.grantSkillDevelopment(developments),(mythos.type||occult.type)&&this.system.sanityLoss&&await this.rollSanityLoss(),await this.update({"system.initialReading":!0})}async grantSpellLearning(spelllearned){for(const spell of this.system.spells)if(spell._id===spelllearned._id){spell.system.learned=!0;await this.actor.items.find((item=>"spell"===item.type&&item.name===spelllearned.name))?ui.notifications.warn(game.i18n.format("CoC7.SpellAlreadyLearned",{spell:spelllearned.name,book:this.name})):spelllearned.system.learned=!0;break}await this.update({"system.spells":this.system.spells}),spelllearned.system.learned&&(ui.notifications.info(game.i18n.format("CoC7.SpellSuccessfullyLearned",{spell:spelllearned.name,book:this.name})),await this.actor.createEmbeddedDocuments("Item",[foundry.utils.duplicate(spelllearned)]))}async grantSkillDevelopment(developments){if(0!==developments.length){for(const development of developments){if(!development.gain)continue;let skill=await this.actor.getSkillsByName(development.name);if(0===skill.length){const existingSkill=await game.items.find((item=>"skill"===item.type&&item.name===development.name));existingSkill?skill=await this.actor.createEmbeddedDocuments("Item",[foundry.utils.duplicate(existingSkill)]):(skill=await this.actor.createSkill(development.name,0),development.specialization&&await skill[0].update({"system.properties.special":!0,"system.specialization":development.specialization}))}if(skill=skill[0],"development"===development.gain)await skill.flagForDevelopement();else{if(skill.value+development.gain>99)for(let index=1;index<=development.gain;index++)skill.value+development.gain-index<=99&&(development.gain-=index,await skill.increaseExperience(development.gain));await skill.increaseExperience(development.gain)}}return this.showDevelopmentsTable(developments)}}async redoFullStudy(){return await this.update({"system.study.progress":0}),await this.update({"system.study.necessary":2*this.system.study.necessary})}async rollSanityLoss(){const value=this.system.sanityLoss;if(!value||""===value)return;const template=SanCheckCard.template;let html=await renderTemplate(template,{});const message=await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:game.i18n.format("CoC7.ReadingMythosTome",{book:this.name}),content:html}),card=await message.getHTML();if(void 0!==card.length&&1===card.length){const sanityLoss=(await new Roll(value).roll({async:!0})).total;html=card.find(".chat-card")[0],html.dataset.object=escape(JSON.stringify({actorKey:this.actor.id,fastForward:!1,sanData:{sanMin:sanityLoss,sanMax:sanityLoss}}));const sanityCheck=SanCheckCard.getFromCard(html);await sanityCheck.bypassRollSan(),await sanityCheck.rollSanLoss(),sanityCheck.updateChatCard()}}async showDevelopmentsTable(developments){for(const development of developments)development.specialization&&(development.name=`${development.specialization} (${development.name})`),"development"===development.gain?development.gain=game.i18n.localize("CoC7.MarkedForDevelopment"):development.gain=`+${development.gain} ${game.i18n.localize("CoC7.Points")}`;const html=await renderTemplate("systems/CoC7/templates/items/book/development.html",{developments});return await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:game.i18n.format("CoC7.GainsForReading",{book:this.name}),content:html})}async attemptSpellLearning(id){if(!this.isOwned)return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"));if(!this.system.initialReading)return ui.notifications.error(game.i18n.format("CoC7.InitialReadingNeeded",{actor:this.actor.name,book:this.name}));const spell=this.system.spells.find((spell=>spell._id===id));if(spell){const check=new CoC7Check;check.actor=this.actor,check.difficulty=CoC7Check.difficultyLevel.hard,check.parent=this.uuid,check.flavor=game.i18n.format("CoC7.LearnSpellAttempt",{book:this.name,spell:spell.name}),check.context="SPELL_LEARNING",check.spell=spell,await check.rollCharacteristic("int"),await check.toMessage()}}async updateRoll(roll){const check=CoC7Check.fromRollString(roll);if(check.passed){if("INITIAL_READING"===check.context)return await this.grantInitialReading();if("SPELL_LEARNING"===check.context)return await this.grantSpellLearning(check.spell)}}}const ECC_CLASS="enhanced-chat-card",PERMISSION_TYPE_GM="gm",PERMISSION_TYPE_NOT_GM="!gm",PERMISSION_TYPE_SPEAKER="speaker",PERMISSION_TYPE_USER="user",PERMISSION_TYPE_BLACKLIST="blacklist",STATE_ON="switched-on",STATE_OFF="switched-off";async function updateMessage(messageId,newContent){const chatMessage=game.messages.get(messageId);await chatMessage.update({content:newContent})}async function GMUpdate(data,options,cardClassName,messageId=void 0){const card=await EnhancedChatCard.fromData(data,options,cardClassName,messageId);return await card.GMUpdate(),card.toObject()}async function advise(){}class EnhancedChatCardLib{constructor(){this.types=new Map,this.socket=null}static injectCSS(){let style=$("head").find("style");style?.length||($("head").append($('<style  type="text/css"></style>')),style=$("head").find("style")),style.append(".ecc-restricted {color: red}\n    .ecc-restricted:hover {cursor: not-allowed}")}static set socket(x){game.enhancedChatCardsLib||(game.enhancedChatCardsLib=new EnhancedChatCardLib),game.enhancedChatCardsLib.socket=x}static get socket(){if(game.enhancedChatCardsLib){if(game.enhancedChatCardsLib.socket)return game.enhancedChatCardsLib.socket;ui.notifications.error("ECC no socket")}else ui.notifications.error("ECC not Initialized")}static get types(){return game.enhancedChatCardsLib||(game.enhancedChatCardsLib=new EnhancedChatCardLib),game.enhancedChatCardsLib.types}static register(cardConstructors){cardConstructors.forEach((cardConstructor=>{EnhancedChatCardLib.types.get(cardConstructor.name)||EnhancedChatCardLib.types.set(cardConstructor.name,cardConstructor)}))}}function setByPath(obj,path,value){const parts=path.split(".");let o=obj;if(parts.length>1)for(let i=0;i<parts.length-1;i++)o[parts[i]]||(o[parts[i]]={}),o=o[parts[i]];o[parts[parts.length-1]]=value}function getByPath(obj,path){const parts=path.split(".");let o=obj;if(parts.length>1)for(let i=0;i<parts.length-1;i++){if(!o[parts[i]])return;o=o[parts[i]]}return o[parts[parts.length-1]]}class EnhancedChatCard{constructor(data={},options={}){this.data=data,this.data.flags||(this.data.flags={}),this._options=options}async initialize(){}get options(){return foundry.utils.mergeObject(this.constructor.defaultOptions,this._options)}set options(x){this._options=x}get template(){return this.options.template}get cssClasses(){return this.options.classes?.join(" ")}get speaker(){return this.options.ooc?game.user:this.options.speaker&&ChatMessage.getSpeakerActor(this.options.speaker)?ChatMessage.getSpeakerActor(this.options.speaker):game.user}async getData(){return{card:this,flags:this.flags,data:this.toObject(),options:this.options,css:this.cssClasses,user:game.user,speaker:this.speaker}}toObject(){if(!this.data)return;const data={};for(const k of Object.keys(this.data)){const v=this.data[k];data[k]=v instanceof Object?v.toObject?v.toObject():foundry.utils.deepClone(v):v}return data}async toMessage(optionnalChatData={}){await this.initialize();const data=await this.getData(),html=await renderTemplate(this.template,data),htmlCardElement=$(html)[0];this.options.attachObject&&(htmlCardElement.dataset.object=escape(this.objectDataString)),htmlCardElement.dataset.eccClass=this.constructor.name,htmlCardElement.classList.add(...this.options.classes);const speaker=this.options.speaker&&!this.options.ooc?ChatMessage.getSpeaker(this.options.speaker):{},chatData=foundry.utils.mergeObject({user:game.user.id,speaker,flavor:game.i18n.localize(this.options.title),content:htmlCardElement.outerHTML},optionnalChatData);["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"selfroll"===this.rollMode&&(chatData.whisper=[game.user.id]),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}async updateChatCard({attachObject=!0}={}){if(this.options.compute&&await this.localCompute(),this.options.GMUpdate&&await this.ExecuteGMUpdate(),this.messageId){const data=await this.getData(),html=await renderTemplate(this.template,data),htmlCardElement=$.parseHTML(html)[0];attachObject&&!this.data.EEC_ACTION?.detachData&&(htmlCardElement.dataset.object=escape(this.objectDataString)),htmlCardElement.dataset.eccClass=this.constructor.name,htmlCardElement.classList.add(...this.options.classes),game.enhancedChatCardsLib.socket.executeAsGM("updateMessage",this.messageId,htmlCardElement.outerHTML)}else this.toMessage()}async activateListeners(html){html.on("change","input,select,textarea",this._onChange.bind(this)),html.on("click",`.${ECC_CLASS} .ecc-switch`,this._onToggle.bind(this)),html.on("click",`.${ECC_CLASS} .submit`,this._onSubmit.bind(this)),html.on("focusout",`.${ECC_CLASS} input`,this._onChange.bind(this)),html.on("click",`.${ECC_CLASS} button`,this._onButton.bind(this)),html.on("keydown",`.${ECC_CLASS} form`,this._onKey.bind(this)),html.find("[data-ecc-visibility]").each((async(i,el)=>await this.setVisibility(el))),html.find("[data-ecc-permissions]").each((async(i,el)=>await this.setPermission(el))),html.find(`.${ECC_CLASS} .ecc-switch`).each(((i,el)=>this.setState(el))),html.find(`.${ECC_CLASS} input[type="radio"]`).each(((i,el)=>this.setRadioState(el)))}setState(element){if(element&&(element.dataset.flag&&element.classList.add(this.flags[element.dataset.flag]?STATE_ON:STATE_OFF),element.dataset.name)){const value=getByPath(this,element.dataset.name);element.classList.add(value?STATE_ON:STATE_OFF)}}setRadioState(element){if(!element||!element.name)return;const splited=element.name.split(".");"data"===splited[0].toLowerCase()&&this.data&&void 0!==this.data[splited[1]]&&this.data[splited[1]]===element.value&&(element.checked=!0)}async setVisibility(element){if(!element.dataset.eccVisibility)return;await this.hasPerm(element.dataset.eccVisibility,!0)||(element.style.display="none")}async setPermission(element){if(!element.dataset.eccPermissions)return;await this.hasPerm(element.dataset.eccPermissions)||(element.classList.add("ecc-restricted"),$(element).is("input")&&("range"===element.type?$(element).attr("disabled",!0):$(element).attr("readonly",!0)),$(element).is("select")&&$(element).attr("disabled",!0))}async hasPerm(restrictedTo,vision=!1){if(!restrictedTo.length)return!0;let permissionsArray=restrictedTo.split(" ");const whiteList=!permissionsArray.includes(PERMISSION_TYPE_BLACKLIST);if(whiteList||(permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_BLACKLIST))),game.user.isGM){if(!vision)return!0;if(permissionsArray.includes(PERMISSION_TYPE_GM))return whiteList;if(permissionsArray.includes(PERMISSION_TYPE_NOT_GM))return!whiteList}if(permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_GM)),permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_NOT_GM)),permissionsArray.includes(PERMISSION_TYPE_USER)){if(this.message.isAuthor)return whiteList;permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_USER))}if(permissionsArray.includes(PERMISSION_TYPE_SPEAKER)){const speaker=this.message.data.speaker;if(speaker.token&&speaker.scene){const actor=await fromUuid(`Scene.${speaker.scene}.Token.${speaker.token}`);if(actor&&actor.isOwner)return whiteList}else if(speaker.actor){const actor=game.actors.get(speaker.actor);if(actor&&actor.isOwner)return whiteList}permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_SPEAKER))}if(permissionsArray.length)for(let i=0;i<permissionsArray.length;i++){const uuid=permissionsArray[i];let actor=await fromUuid(uuid);if(actor||(actor=game.actors.get(uuid)),actor)return actor.isOwner;ui.notifications.error(`Unable to find actor ${uuid}`)}return!whiteList}static async bindListeners(html){const htmlCardElement=html[0].querySelector(`.${ECC_CLASS}`);if(!htmlCardElement)return;const card=await EnhancedChatCard.fromHTMLCardElement(htmlCardElement);card&&card.activateListeners(html)}get flags(){return this.data.flags}async assignObjects(){}async localCompute(){}async GMUpdate(){}async ExecuteGMUpdate(){const newData=await game.enhancedChatCardsLib.socket.executeAsGM("GMUpdate",this.toObject(),this._options,this.constructor.name,this.messageId);this.data=newData,await this.assignObjects()}async _onButton(event){event.preventDefault();const target=event.currentTarget;target.style.display="none";const action=target.dataset.action;let formUpdate,actionUpdate=!1;const card=target.closest(`.${ECC_CLASS}`);card?formUpdate=this._update(card):console.error(`Could not find a EEC class for this card: ${this.constructor.name}`);const originalDisplayStyle=target.style.display;(action||(console.warn("no action associated with this button"),formUpdate))&&(this[action]||(console.warn(`no ${action} action found for this card`),formUpdate))&&(this[action]&&(actionUpdate=await this[action]({event,updateCard:!1})),formUpdate||actionUpdate?await this.updateChatCard():target.style.display=originalDisplayStyle)}_onKey(event){return"Enter"===event.key&&this._onSubmit(event),"Enter"!==event.key}_onChange(event){if(this.options.submitOnChange)return this._onSubmit(event)}_onSubmit(event){const target=event.currentTarget;if("BUTTON"===target.tagName&&"action"in target.dataset)return;event.preventDefault();const card=target.closest(`.${ECC_CLASS}`);if(!card)return;this._update(card)&&this.updateChatCard()}_update(card){const forms=card.querySelectorAll("form");let updates=!1;for(let i=0;i<forms.length;i++){const form=forms[i],data=new FormDataExtended(form).object;for(const[key,value]of Object.entries(data)){getByPath(this,key)!==value&&(setByPath(this,key,value),updates=!0)}}return updates}get message(){return this._message?this._message:this._messageId?game.messages.get(this._messageId):void 0}set message(x){this._message=x}get messageId(){return this._messageId?this._messageId:this._message?this._message.id:void 0}set messageId(x){this._messageId=x}static get defaultOptions(){return{attachObject:!0,classes:[ECC_CLASS],exclude:[],excludeStartWith:"_",submitOnChange:!0,speaker:ChatMessage.getSpeaker(),ooc:!1,compute:!0,GMUpdate:!1}}get objectDataString(){const saveData={data:this.data,options:this._options};return JSON.stringify(saveData,((key,value)=>{if(null!==value&&!this.options.exclude?.includes(key)&&!key.startsWith(this.options.excludeStartWith))return value}))}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}static async fromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return;const card=await this.fromMessage(message);return card.messageId=messageId,card}static async fromMessage(message){const cardElement=$(message.data.content)[0];if(!cardElement)return;const card=await this.fromHTMLCardElement(cardElement);return card.message=message,card}static async fromHTMLCardElement(htmmlCard){if(!htmmlCard)return;if(!htmmlCard.dataset.eccClass)return;if(!htmmlCard.dataset.object)return;const cardData=JSON.parse(unescape(htmmlCard.dataset.object)),message=htmmlCard.closest(".message"),messageId=message?.dataset?.messageId;return await this.fromData(cardData.data,cardData.options,htmmlCard.dataset.eccClass,messageId)}static async fromData(data,options,cardClassName,messageId=void 0){const CardClass=game.enhancedChatCardsLib.types.get(cardClassName);if(!CardClass)return void console.error(`Unknown chat card type: ${cardClassName}`);const card=new CardClass(data,options);return messageId&&(card.messageId=messageId),await card.assignObjects(),card}setData(name){(name||"string"===$.type(name))&&setByPath(this,name,!0)}unsetData(name){(name||"string"===$.type(name))&&setByPath(this,name,!1)}toggleData(name){if(!name&&"string"!==$.type(name))return;setByPath(this,name,!getByPath(this,name))}async _onToggle(event){event.preventDefault();const target=event.currentTarget;if("action"in target.dataset)return this._onButton(event);if(target&&target.classList.contains("gm-select-only")&&!game.user.isGM)return;const name=target.dataset.flag?`data.flags.${target.dataset.flag}`:target.dataset.name;if(!name)return;const toggle=target.closest(".ecc-radio");if(toggle){const buttons=toggle.querySelectorAll(".ecc-switch");for(const b of buttons){const bName=b.dataset.flag?`data.flags.${b.dataset.flag}`:b.dataset.name;this.unsetData(bName)}this.setData(name)}else this.toggleData(name);const card=target.closest(`.${ECC_CLASS}`);this.options.submitOnChange&&card&&this._update(card),await this.updateChatCard()}}class _participant{constructor(data={}){this.data=data}_fetch(){if(!this._doc&&this.data.docUuid&&(this._doc=CoC7Utilities.getDocumentFromKey(this.data.docUuid)),!this._actor)if(this._doc)switch(this._doc.constructor?.name){case"TokenDocument":this._actor=this._doc.actor;break;case"CoCActor":this._actor=this._doc}else this._actor=CoC7Utilities.getActorFromKey(this.data.docUuid)}get actor(){return this._fetch(),this._actor}get isActor(){return this.hasActor||this.hasVehicle}get isActive(){return this.data.active||!1}get key(){return this.hasVehicle?this.vehicle.actorKey:this.hasActor?this.actor.actorKey:void 0}get icon(){return this.isActor?this.hasVehicle?this.vehicle.img:this.hasActor?this.actor.img:void 0:"systems/CoC7/assets/icons/question-circle-regular.svg"}get driver(){return this._driver||(this._driver=CoC7Utilities.getActorFromKey(this.data.docUuid)),this._driver}get vehicle(){return this.data.vehicleKey&&(this._vehicle=chatHelper.getActorFromKey(this.data.vehicleKey)),this._vehicle}get hasActor(){return!!this.actor}get hasVehicle(){return!!this.vehicle}get name(){return this.hasVehicle?this.vehicle.name:this.hasActor?this.actor.name:this.data.name||void 0}get mov(){return this.data.mov||(this.hasVehicle?this.data.mov=this.vehicle.mov:this.hasActor&&(this.data.mov=this.actor.mov)),this.data.mov&&(isNaN(Number(this.data.mov))?(this.data.hasValidMov=!1,this.data.mov=void 0):this.data.hasValidMov=!0),this.data.mov}get uuid(){return this.data.uuid}get hasMaxBonusDice(){return this.bonusDice>=2}get bonusDice(){return isNaN(this.data.bonusDice)||this.data.bonusDice<0||this.data.bonusDice>2?0:this.data.bonusDice}set bonusDice(x){isNaN(x)?ui.notifications.error("Bonus dice can Only be a number"):x>2?ui.notifications.error("Max 2 bonus dice"):x<0?ui.notifications.error("No negativ bonus dice"):this.data.bonusDice=x}get hp(){return this.data.hp||(this.data.hp=0),this.actor&&(this.data.hp=this.actor.hp),this.data.hp}set hp(x){this.data.hp=x,this.actor&&this.actor.setHp(x)}addBonusDice(){this.data.bonusDice>=2?ui.notifications.error("Already have max bonus dice"):this.data.bonusDice+=1}removeBonusDice(){this.data.bonusDice<=0?ui.notifications.error("Already have 0 bonus dice"):this.data.bonusDice-=1}resetBonusDice(){this.data.bonusDice=0}get hasBonusDice(){return this.hasOneBonusDice||this.hasTwoBonusDice}get hasOneBonusDice(){return this.bonusDice>=1}get hasTwoBonusDice(){return this.bonusDice>=2}get canAssist(){return this.assist?.length>0}get canBeCautious(){return!this.hasMaxBonusDice}get assist(){return this.data.assist||[]}get dex(){return this.data.dex||(this.hasVehicle&&this.hasDriver?this.data.dex=this.driver.characteristics.dex.value:this.hasActor&&(this.data.dex=this.actor.characteristics.dex.value)),this.data.dex&&(isNaN(Number(this.data.dex))?(this.data.hasValidDex=!1,this.data.dex=0):this.data.hasValidDex=!0),this.data.dex}get hasAGunReady(){return this.data.hasAGunReady||!1}get initiative(){let init=this.dex;return this.hasAGunReady&&(init+=50),init}get isChaser(){return!!this.data.chaser}get isPrey(){return!this.isChaser}get isValid(){return this.hasValidDex&&this.hasValidMov}get hasValidDex(){return!isNaN(Number(this.data.dex))}get hasValidMov(){return!isNaN(Number(this.data.mov))}get hasDriver(){return this.hasVehicle&&this.hasActor}get movAdjustment(){if(this.data.speedCheck?.rollDataString){const roll=CoC7Check.fromRollString(this.data.speedCheck.rollDataString);if(roll&&!roll.standby){if(roll.successLevel>=CoC7Check.successLevel.extreme)return 1;if(roll.failed)return-1}}return 0}get adjustedMov(){if(void 0!==this.mov&&!isNaN(Number(this.mov)))return Number(this.mov)+this.movAdjustment}get hasMovAdjustment(){return this.hasBonusMov||this.hasMalusMov}get hasBonusMov(){return this.data.movAdjustment>0}get hasMalusMov(){return this.data.movAdjustment<0}tooSlow(){this.data.excluded=!0}includeInChase(){this.data.excluded=!1,this.data.escaped=!1}escaped(){this.data.escaped=!0}set slowest(x){this.data.slowest=x}get slowest(){return this.data.slowest}set fastest(x){this.data.fastest=x}get fastest(){return this.data.fastest}calculateMovementActions(minMov){void 0===this.movementAction||void 0===this.adjustedMov||isNaN(minMov)?this.movementAction=0:this.movementAction=this.adjustedMov-minMov+1}set movementAction(x){this.data.movementAction=x}get movementAction(){return this.data.movementAction}set currentMovementActions(x){this.data.currentMovementActions=x}get currentMovementActions(){return this.data.currentMovementActions||0}get hasMaxMvtActions(){return this.currentMovementActions>=this.movementAction}get hasNoMvtActions(){return this.currentMovementActions<=0}addMovementActions(x=1){this.currentMovementActions+=x,this.currentMovementActions>this.movementAction&&(this.currentMovementActions=this.movementAction)}alterMovementActions(x){this.currentMovementActions+=x,this.currentMovementActions>this.movementAction&&(this.currentMovementActions=this.movementAction)}get movementActionArray(){const baseArray=Array(this.movementAction).fill("base");if(this.currentMovementActions>=0){for(let i=0;i<this.currentMovementActions;i++)baseArray[i]="base available";return baseArray}if(this.currentMovementActions<0){return Array(Math.abs(this.currentMovementActions)).fill("deficit").concat(baseArray)}}get cssClass(){const cssClasses=[];return this.isChaser?cssClasses.push("chaser"):cssClasses.push("prey"),this.data.excluded&&cssClasses.push("excluded","too_slow"),this.data.escaped&&cssClasses.push("escaped"),this.data.fastest&&cssClasses.push("fastest"),this.data.slowest&&cssClasses.push("slowest"),this.data.active&&cssClasses.push("active"),this.data.currentMovementActions<=0&&cssClasses.push("no-actions"),cssClasses.join(" ")}get speedCheck(){const check={};if(this.data.speedCheck?.name&&(check.name=this.data.speedCheck.name),this.data.speedCheck?.score&&(check.score=this.data.speedCheck.score),check.cssClasses="",this.data.speedCheck?.rollDataString&&(check.roll=CoC7Check.fromRollString(this.data.speedCheck.rollDataString),check.roll&&(check.roll.standby&&!check.roll.hasCard||(check.rolled=!0,check.inlineRoll=check.roll.inlineCheck.outerHTML,check.cssClasses+="rolled",check.roll.standby||(check.roll.successLevel>=CoC7Check.successLevel.extreme?check.modifierCss="upgrade":check.roll.failed&&(check.modifierCss="downgrade"),(check.roll.successLevel>=CoC7Check.successLevel.extreme||check.roll.failed)&&(check.hasModifier=!0))))),this.hasActor){check.options=[];for(const c of["con"]){const characteristic=this.actor.getCharacteristic(c);characteristic?.value&&check.options.push(characteristic.label)}for(const s of this.actor.driveSkills)check.options.push(s.name);for(const s of this.actor.pilotSkills)check.options.push(s.name);if(check.hasOptions=!!check.options.length,this.data.speedCheck?.id){let item=this.actor.find(this.data.speedCheck.id);if(!item){const gameItem=game.items.get(this.data.speedCheck.id);gameItem&&(item=this.actor.find(gameItem.name))}item&&("item"===item.type&&"skill"===item.value.data?.type&&(check.ref=item.value,check.name=item.value.name,check.type="skill",check.isSkill=!0,check.refSet=!0,check.score=item.value.value),"characteristic"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="characteristic",check.isCharacteristic=!0,check.refSet=!0,check.score=item.value.value),"attribute"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="attribute",check.isAttribute=!0,check.refSet=!0,check.score=item.value.value))}else if(this.data.speedCheck?.name){const item=this.actor.find(this.data.speedCheck.name);item&&("item"===item.type&&"skill"===item.value.data?.type&&(check.ref=item.value,check.name=item.value.name,check.type="skill",check.isSkill=!0,check.refSet=!0,check.score=item.value.value),"characteristic"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="characteristic",check.isCharacteristic=!0,check.refSet=!0,check.score=item.value.value),"attribute"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="attribute",check.isAttribute=!0,check.refSet=!0,check.score=item.value.value))}}else if(this.data.speedCheck?.id){const item=game.items.get(this.data.speedCheck.id);item&&"skill"===item.data?.type&&(check.ref=item,check.name=item.name,check.type="skill",check.isSkill=!0,check.refSet=!1,check.score=item.base)}else this.data.speedCheck?.name&&this.data.speedCheck?.score&&(check.name=this.data.speedCheck.name,check.score=this.data.speedCheck.score,check.refSet=!1);return check.canBeRolled=!0,check.rolled||check.score||(check.cssClasses+=" invalid",check.canBeRolled=!1),check.isValid=check.rolled&&!isNaN(check.score),check}}function sortByRoleAndDex(a,b){return!a&&b?1:!b&&a?-1:a||b?b.chaser&&!a.chaser?1:a.chaser&&!b.chaser?-1:a.dex-b.dex:0}class ChaseObstacleCard extends EnhancedChatCard{static get defaultOptions(){const options=foundry.utils.mergeObject(super.defaultOptions,{template:"systems/CoC7/templates/chat/cards/chase-obstacle.html",GMUpdate:!0});return options.classes.push("obstacle-card"),options}async getData(){const data=await super.getData();if(data.status=[],data.strings={},data.displayActorOnCard=game.settings.get("CoC7","displayActorOnCard"),data.status.push({name:game.i18n.localize("CoC7.ActionCost")+` :${this.data.totalActionCost}`}),data.card.breakableObstacle=data.data.obstacle?.barrier&&data.data.obstacle.hasHitPoints,data.card.validCheck=!1,data.data.states?.obstacleDefined&&(data.data.obstacle.hazard||data.data.obstacle.barrier&&!data.data.obstacle.hasHitPoints)&&(data.data.states.tryToNegotiate=!0,data.data.states.tryToBreak=!1,data.data.states.breakOrNegotiateDefined=!0),this.participant?.actor?(data.skill=this.participant.actor.find(data.data.obstacle.checkName),data.checkOptions=this.chase.getActorSkillsAndCharacteristics(this.data.participantUuid),data.skill?(data.validCheck=!0,data.validSkill=!0):data.data.obstacle.checkName&&data.data.checkThreshold&&(data.validCheck=!0)):(data.checkOptions=this.chase.allSkillsAndCharacteristics,data.dummyActor=!0,data.data.obstacle.checkName&&data.data.checkThreshold&&(data.validCheck=!0)),data.data.bonusDice||(data.data.bonusDice=0),data.data.bonusDice<2&&data.data.totalActionCost<data.data.movementAction&&(data.canTakeCautiousApproach=!0),data.customWeapon=!1,"0"===this.data.weaponChoice&&(data.customWeapon=!0),data.validCheck){let checkName,value;data.skill?(checkName=data.skill.value.name,value=data.skill.value.value):(checkName=data.data.obstacle.checkName,value=data.data.checkThreshold),data.strings.checkRollRequest=game.i18n.format("CoC7.AskRoll",{name:checkName,value}),0!==data.data.bonusDice&&(data.data.bonusDice>0?data.strings.checkRollRequest+=` (+${data.data.bonusDice})`:data.strings.checkRollRequest+=` (${data.data.bonusDice})`)}if(data.data.states?.obstacleDefined){if(data.strings.obstacleDefined=game.i18n.format("CoC7.FacingObstacle",{type:data.data.obstacle.barrier?game.i18n.localize("CoC7.ABarrier"):game.i18n.localize("CoC7.AHazard")}),data.data.obstacle.name&&(data.strings.obstacleDefined+=` (${data.data.obstacle.name})`),data.data.states.canAskRoll=!0,data.data.obstacle.barrier&&(data.status.push({name:game.i18n.localize("CoC7.Barrier")}),data.data.obstacle.hasHitPoints&&data.status.push({name:game.i18n.localize("CoC7.Breakable")})),data.data.obstacle.hazard&&data.status.push({name:game.i18n.localize("CoC7.Hazard")}),this.data.states.tryToNegotiate&&(data.validCheck?data.validSkill||data.status.push({name:game.i18n.localize("CoC7.NoValidSkill"),css:"warning"}):(data.status.push({name:game.i18n.localize("CoC7.NoValidCheck"),css:"error"}),data.strings.EnterValueTitle=game.i18n.format("CoC7.SkillSelectBase",{name:data.data.obstacle.checkName}),data.data.checkThreshold||(data.data.states.canAskRoll=!1))),this.data.states.tryToBreak){let damageStatus=game.i18n.localize("CoC7.BreakDown");this.data.objects?.obstacleDamageRoll?.total&&(damageStatus+=` : ${this.data.objects.obstacleDamageRoll.total}`),data.status.push({name:damageStatus}),this.data.states.obstacleDamageRolled&&(this.data.objects?.obstacleDamageRoll?.total<=0?data.strings.obstacleDamage=game.i18n.localize("CoC7.NoDamageDealt"):(data.inlineDamageRoll=createInlineRoll(this.data.objects.obstacleDamageRoll)?.outerHTML,data.strings.obstacleDamage=game.i18n.format("CoC7.DamageDealt",{value:data.inlineDamageRoll})))}if(this.data.states.tryToNegotiate&&data.status.push({name:game.i18n.localize("CoC7.Negotiate")}),this.data.totalCautiousApproach){const cautiousStatus={name:game.i18n.localize("CoC7.Cautious"),css:""};this.data.totalCautiousApproach>1?(cautiousStatus.css="strong",data.strings.cautiousApproachType=game.i18n.localize("CoC7.BeingVeryCautious")):data.strings.cautiousApproachType=game.i18n.localize("CoC7.BeingCautious"),this.data.flags.consumeBonusDice&&(cautiousStatus.css+=" consume"),data.status.push(cautiousStatus)}this.data.objects?.check&&(this.data.obstacle.hazard&&(this.data.movePlayer=!0),this.data.objects.check.passed?(void 0===this.data.movePlayer&&(this.data.movePlayer=!0),data.strings.obstaclePassed=game.i18n.localize("CoC7.ObstaclePassed"),this.data.objects.check.luckSpent&&(data.strings.obstaclePassed+=` (${game.i18n.localize("CoC7.GotLucky")})`),data.status.push({name:game.i18n.localize("CoC7.Success"),css:"success"})):this.data.objects.check.isFumble?(data.strings.checkFailed=game.i18n.localize("CoC7.ObstacleFumble"),data.status.push({name:game.i18n.localize("CoC7.Fumble"),css:"fumble"})):(data.strings.checkFailed=game.i18n.localize("CoC7.ObstacleFail"),data.status.push({name:game.i18n.localize("CoC7.Failure"),css:"failure"})))}if(this.data.states.playerActionDefined&&(this.data.obstacle.hazard?data.strings.playerIntentions=game.i18n.localize("CoC7.TryToNegotiateHazard"):this.data.obstacle.barrier&&(this.data.states.tryToNegotiate?data.strings.playerIntentions=game.i18n.localize("CoC7.TryToGetPastBarriers"):this.data.states.tryToBreak&&(data.strings.playerIntentions=game.i18n.localize("CoC7.TryToBreak")))),this.data.states.checkRolled&&(this.data.states.cardResolved?data.htmlCheck=await(this.data.objects.check.inlineCheck?.outerHTML):data.htmlCheck=await this.data.objects.check.getHtmlRoll()),this.data.states.cardResolved){data.playerDamageTaken=!1,data.obstalceDefinitionChanged=!1;this.listChanges().changes&&(data.obstalceDefinitionChanged=!0),this.data.obstacle.hasDamage&&this.data.objects?.check?.isFailure&&(data.playerDamageTaken=!0,data.inlineDamageTakenRoll=createInlineRoll(this.data.objects.failedDamageRoll)?.outerHTML,0===data.data.totalPlayerDamageTaken?data.strings.damageTaken=game.i18n.localize("CoC7.YouTakeNoDamage"):data.strings.damageTaken=game.i18n.format("CoC7.YouTakeSomeDamage",{amount:data.data.totalPlayerDamageTaken}),data.status.push({name:game.i18n.localize("CoC7.TotalDamage")+` :${data.data.totalPlayerDamageTaken}`})),this.data.obstacle.hasActionCost&&this.data.obstacle.hazard&&this.data.objects?.check?.isFailure&&(data.actionLost=!0,data.strings.actionLost=game.i18n.localize("CoC7.YouLostTime"),data.inlineActionLostRoll=createInlineRoll(this.data.objects.failedActionRoll)?.outerHTML),data.status.push({name:game.i18n.localize("CoC7.CardResolved")})}return this.data.states.closed&&(this.data.movePlayer?data.strings.finalOutcome=game.i18n.localize("CoC7.MoveToLocation"):data.strings.finalOutcome=game.i18n.localize("CoC7.DontMoveToLocation")),data}async GMUpdate(){if(game.user.isGM){if(this.data.states.cardResolved){if(this.data.objects?.failedDamageRoll?.total){const totalDamage=this.data.objects.failedDamageRoll.total,armorValue=this.data.flags.ignoreArmor?0:this.data.armor;CoC7Utilities.isFormula(armorValue)?this.data.armor=(await new Roll(armorValue).roll({async:!0})).total:isNaN(Number(armorValue))||(this.data.armor=Number(armorValue)),void 0===this.data.totalPlayerDamageTaken&&(this.data.totalPlayerDamageTaken=totalDamage-this.data.armor,this.data.totalPlayerDamageTaken<0&&(this.data.totalPlayerDamageTaken=0))}void 0===this.data.reflectObstaleChanges&&(this.data.reflectObstaleChanges=!0),void 0===this.data.movePlayer&&(this.data.movePlayer=(this.data.states.tryToNegotiate||this.data.obstacle.hazard)&&!this.data.states.failedConsequencesRolled),this.data.obstacle.barrier&&this.data.obstacle.hasHitPoints&&this.data.objects?.obstacleDamageRoll?.total&&(void 0===this.data.totalObstacleDamage&&(this.data.totalObstacleDamage=this.data.objects.obstacleDamageRoll.total),void 0===this.data.flags.obstacleDestoyed&&(this.data.flags.obstacleDestoyed=this.data.obstacle.HitPoints-this.data.totalObstacleDamage<=0))}this.data.states.closed&&(this.data.movementActionArray=foundry.utils.duplicate(this.participant.movementActionArray),this.data.EEC_ACTION={detachData:!0})}else console.error("CoC7: GMUpdate called from non GM user")}async localCompute(){}async assignObjects(){this.data.objects?.check&&"Object"===this.data.objects.check?.constructor?.name&&(this.data.objects.check=CoC7Check.fromData(this.data.objects.check)),this.data.objects?.obstacleDamageRoll&&"Object"===this.data.objects.obstacleDamageRoll?.constructor?.name&&(this.data.objects.obstacleDamageRoll=Roll.fromData(this.data.objects.obstacleDamageRoll)),this.data.objects?.failedDamageRoll&&"Object"===this.data.objects.failedDamageRoll?.constructor?.name&&(this.data.objects.failedDamageRoll=Roll.fromData(this.data.objects.failedDamageRoll)),this.data.objects?.failedActionRoll&&"Object"===this.data.objects.failedActionRoll?.constructor?.name&&(this.data.objects.failedActionRoll=Roll.fromData(this.data.objects.failedActionRoll))}async initialize(){this.chase&&void 0!==this.chase.activeParticipantData?.uuid&&(void 0===this.data&&(this.data={}),void 0===this.data.states&&(this.data.states={}),this.data.obstacle=this.location?.obstacleDetails,this.data.participantUuid=this.chase.activeParticipantData.uuid,this.participantData?.bonusDice>0&&(this.data.bonusDice=this.participantData.bonusDice,this.data.flags.consumeBonusDice=!0,this.data.flags.hasBonusDice=this.participant.hasBonusDice),this.data.movementActionArray=foundry.utils.duplicate(this.participant.movementActionArray),this.data.movementAction=this.participant.currentMovementActions,this.data.totalActionCost=0)}get participant(){if(this.participantData)return new _participant(this.participantData)}get participantData(){if(this.chase&&this.data.participantUuid)return this.chase.getParticipantData(this.data.participantUuid)}get location(){if(this.chase)return this.chase.getLocationData(this.data.locationUuid)}get obstacle(){if(this.location)return this.location.obstacleDetails}get chase(){if(this.data.chaseUuid)return this._chase||(this._chase=CoC7Utilities.SfromUuid(this.data.chaseUuid)),this._chase}get roll(){let rollData;if(this.participant.actor&&this.data.obstacle.checkName){const actorSkill=this.participant.actor.find(this.data.obstacle.checkName);rollData=void 0!==actorSkill?actorSkill:{type:"value",value:{name:this.data.obstacle.checkName,threshold:this.data.checkThreshold}},rollData.actor={actorKey:this.participant.actor.id}}else this.data.obstacle.checkName&&this.data.checkThreshold&&(rollData={type:"value",value:{name:this.data.obstacle.checkName,threshold:this.data.checkThreshold},actor:{name:this.participant.name}});return rollData&&(rollData.diceModifier=this.data?.bonusDice||0,rollData.difficulty=CoC7Check.difficultyLevel.regular,rollData.denyPush=!0),rollData||void 0}get validFailedRolls(){if(!this.data.objects?.check?.isFailure)return!1;if(this.data.obstacle.hasDamage){const damage="number"==typeof this.data.obstacle.failedCheckDamage?`${this.data.obstacle.failedCheckDamage}`:this.data.obstacle.failedCheckDamage;if(!this.data.obstacle.failedCheckDamage)return!1;if(this.data.obstacle.failedCheckDamage&&!Roll.validate(damage))return!1}if(this.data.obstacle.hazard&&this.data.obstacle.hasActionCost){const actionCost="number"==typeof this.data.obstacle.failedActionCost?`${this.data.obstacle.failedActionCost}`:this.data.obstacle.failedActionCost;if(!this.data.obstacle.failedActionCost)return!1;if(this.data.obstacle.failedActionCost&&!Roll.validate(actionCost))return!1}return!0}get weaponsOptions(){const weapons=[];if(this.participant.actor?.itemTypes?.weapon?.forEach((w=>{let formula=w.data.data.range.normal.damage,db=this.participant.actor.db;db=null===db||0===Number(db)?"":`${db}`,db&&!db.startsWith("-")&&(db="+"+db),w.data.data.properties.addb&&(formula+=db),w.data.data.properties.ahbd&&(formula=formula+db+"/2"),weapons.push({name:`${w.data.name} (${formula})`,damage:formula,uuid:w.uuid})})),weapons.sort(CoC7Utilities.sortByNameKey),!weapons.find((w=>w.name.toUpperCase().startsWith(game.i18n.localize("CoC7.UnarmedWeaponName")?.toUpperCase())))){let db="";this.participant.actor&&(db=this.participant.actor.db,db&&!db.startsWith("-")&&(db="+"+db),null!==db&&0!==Number(db)||(db="")),weapons.unshift({name:`${game.i18n.localize("CoC7.UnarmedWeaponName")} (1D3${db})`,damage:`1D3${db}`,uuid:"unarmed"})}return weapons.push({name:game.i18n.localize("CoC7.Other"),damage:this.data?.customWeaponDamage||null,uuid:0}),weapons}get usedWeapon(){if(!this.data?.weaponChoice){if(!this.weaponsOptions)return;this.data||(this.data={}),this.data.weaponChoice=this.weaponsOptions[0].uuid}if(this.data.weaponChoice){const weapon=this.weaponsOptions.find((e=>e.uuid===this.data.weaponChoice));if(weapon)return weapon}}get inflictedDamageFormula(){if(this.usedWeapon){const weapon=this.usedWeapon;return weapon&&weapon.damage&&Roll.validate(weapon.damage)?weapon.damage:void 0}}get validObstacleDamage(){return!!(this.data.obstacle.hasHitPoints&&!isNaN(Number(this.data.obstacle.HitPoints))&&Number(this.data.obstacle.HitPoints)>0&&this.inflictedDamageFormula)}get strings(){const strings={};return strings.damageRollRequest=this.usedWeapon.name,strings}async validateCard(options){let loactionChanged,participantChaged=!1;const obstacleUpdate={obstacleDetails:{}},participantUpdate={};this.data.flags.obstacleDestoyed&&(loactionChanged=!0,obstacleUpdate.obstacle=!1,obstacleUpdate.obstacleDetails.hazard=!1,obstacleUpdate.obstacleDetails.barrier=!1);const diff=this.listChanges();if(diff.changes&&this.data.reflectObstaleChanges)for(const[key,value]of Object.entries(diff.obstacle))"type"!==key&&(obstacleUpdate.obstacleDetails[value.key]=value.new,loactionChanged=!0);if(this.data.totalObstacleDamage>0&&this.data.obstacle.hasHitPoints){let remainingHp=this.data.obstacle.HitPoints;remainingHp-=this.data.totalObstacleDamage,remainingHp<0&&(remainingHp=0),this.obstacle.HitPoints!==remainingHp&&(obstacleUpdate.obstacleDetails.HitPoints=remainingHp,this.data.obstacle.HitPoints=remainingHp,loactionChanged=!0)}if(this.data.totalPlayerDamageTaken>0&&(participantChaged=!0,this.participant.actor?await this.participant.actor.dealDamage(this.data.totalPlayerDamageTaken,{ignoreArmor:!0}):(participantUpdate.hp=this.participantData.hp,participantUpdate.hp-=this.data.totalPlayerDamageTaken,participantUpdate.hp<0&&(participantUpdate.hp=0))),this.data.totalActionCost>0&&(participantChaged=!0,participantUpdate.currentMovementActions=this.participantData.currentMovementActions,participantUpdate.currentMovementActions-=this.data.totalActionCost),void 0===this.data.flags.consumeBonusDice&&(this.data.flags.consumeBonusDice=!0),this.data.flags.consumeBonusDice?(participantChaged=!0,participantUpdate.bonusDice=0):isNaN(this.data.bonusDice)||this.data.bonusDice===this.participant.bonusDice||(participantUpdate.bonusDice=this.data.bonusDice),this.data.movePlayer){let targetLocation;targetLocation=this.data.forward?this.location:this.chase.getLocationShift(this.location.uuid,{skip:-1}),targetLocation.uuid&&await this.chase.moveParticipantToLocation(this.participantData.uuid,targetLocation.uuid,{scrollToLocation:!0,activateLocation:!1,render:!1})}return loactionChanged&&await this.chase.updateLocation(this.location.uuid,obstacleUpdate,{render:!1}),participantChaged&&await this.chase.updateParticipant(this.participantData.uuid,participantUpdate,{render:!1}),this.data.states.closed=!0,await this.chase.activateNextParticipantTurn(),!0}async defineObstacle(options){return this.data.states||(this.data.states={}),this.data.states.obstacleDefined=!0,!0}async tryToNegotiateObstacle(options){return this.data.states.breakOrNegotiateDefined=!0,this.data.states.tryToNegotiate=!0,this.data.states.tryToBreak=!1,!0}async tryToBreakDownObstacle(options){return this.data.states.breakOrNegotiateDefined=!0,this.data.states.tryToNegotiate=!1,this.data.states.tryToBreak=!0,!0}async cancelObstacleDefinition(options){return this.data.states.obstacleDefined=!1,this.data.states.breakOrNegotiateDefined=!1,this.data.states.tryToNegotiate=!1,this.data.states.tryToBreak=!1,!0}async cancelBreakOrPassChoice(options){return this.data.obstacle.hasHitPoints?(this.data.states.breakOrNegotiateDefined=!1,this.data.states.tryToNegotiate=!1,this.data.states.tryToBreak=!1,!0):this.cancelObstacleDefinition()}async requestRoll(options){return this.data.states.playerActionDefined=!0,!0}async takeCautiousApproach(options){return this.data.totalCautiousApproach||(this.data.totalCautiousApproach=0),this.data.totalCautiousApproach+=1,this.data.bonusDice+=1,this.data.totalActionCost+=1,this.data.flags.consumeBonusDice||(this.data.flags.consumeBonusDice=!0),this.data.flags.hasBonusDice||(this.data.flags.hasBonusDice=!0),this.data.movementAction<=this.data.totalActionCost&&(this.data.flags.consumeBonusDice=!1,this.data.states.cardResolved=!0,this.data.movePlayer=!1),!0}async rollSkillCheck(options){const target=options.event.currentTarget;if(!target.classList.contains("disabled")){if(target.classList.toggle("disabled"),this.roll)return this.data.objects||(this.data.objects={}),this.data.objects.check=CoC7Check.createFromActorRollData(this.roll),!!this.data.objects.check&&(this.data.objects.check.denyPush=!0,await this.data.objects.check._perform({forceDSN:!0}),this.data.totalActionCost+=1,this.data.states.checkRolled=!0,target.classList.toggle("disabled"),this.data.objects.check.passed?(this.data.movePlayer=!0,this.data.states.cardResolved=!0):void 0===this.data.armor&&this.participant.actor&&(this.data.armor=this.participant.actor.data.data.attribs.armor.value||0),!0);ui.notifications.error(game.i18n.localize("CoC7.NothingToRoll"))}}async useLuck(options){return await CoC7Check.alter(this.data.objects.check,"useLuck",{target:options.event.currentTarget,update:!1}),this.data.objects.check.passed&&(this.data.states.cardResolved=!0,this.data.movePlayer=!0,this.data.totalActionCost+=1),!0}async rollFailConsequences(options){if(this.data.objects||(this.data.objects={}),this.data.obstacle.hasDamage&&this.data.objects.check?.isFailure){const damage="number"==typeof this.data.obstacle.failedCheckDamage?`${this.data.obstacle.failedCheckDamage}`:this.data.obstacle.failedCheckDamage;this.data.objects.failedDamageRoll=new Roll(damage),await this.data.objects.failedDamageRoll.evaluate({async:!0})}if(this.data.obstacle.hazard&&this.data.obstacle.hasActionCost&&this.data.objects.check?.isFailure){const actionCost="number"==typeof this.data.obstacle.failedActionCost?`${this.data.obstacle.failedActionCost}`:this.data.obstacle.failedActionCost;this.data.objects.failedActionRoll=new Roll(actionCost),await this.data.objects.failedActionRoll.evaluate({async:!0}),this.data.totalActionCost+=this.data.objects.failedActionRoll.total-1}return this.data.states.failedConsequencesRolled=!0,this.data.states.cardResolved=!0,!0}async askRollObstacleDamage(options){return this.data.states.playerActionDefined=!0,!0}async rollObstacleDamage(options){return this.data.objects||(this.data.objects={}),this.data.objects.obstacleDamageRoll=new Roll(this.usedWeapon?.damage),await this.data.objects.obstacleDamageRoll.evaluate({async:!0}),await CoC7Dice.showRollDice3d(this.data.objects.obstacleDamageRoll),this.data.states.obstacleDamageRolled=!0,this.data.totalActionCost+=1,this.data.states.cardResolved=!0,!0}listChanges(validate=!1){const diff={obstacle:{},player:{},changes:!1},names={barrier:game.i18n.localize("CoC7.Type"),hazard:game.i18n.localize("CoC7.Type"),hasHitPoints:game.i18n.localize("CoC7.Breakable"),HitPoints:game.i18n.localize("CoC7.HitPoints"),hasActionCost:game.i18n.localize("CoC7.ActionCost"),failedActionCost:game.i18n.localize("CoC7.ActionCost"),hasDamage:game.i18n.localize("CoC7.FightBack"),failedCheckDamage:game.i18n.localize("CoC7.WeaponDamage"),checkName:game.i18n.localize("CoC7.Check"),name:game.i18n.localize("CoC7.Name")};validate&&!this.data.validation&&(this.data.validation={});const newObstacle=foundry.utils.diffObject(this.obstacle,this.data.obstacle);for(const[key]of Object.entries(newObstacle))""===newObstacle[key]&&null===this.obstacle[key]||!isNaN(Number(newObstacle[key]))&&Number(newObstacle[key])===this.obstacle[key]||(diff.changes=!0,diff.obstacle[key]={old:this.obstacle[key],new:newObstacle[key],name:names[key],key},validate&&(this.data.validation[key]=!0));return diff}}class CoC7Chase extends CoC7Item{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/running-solid.svg"),super(data,context),this.context=context}get participants(){const pList=[],preys=this.system.participants.filter((p=>!p.chaser)).map((p=>new _participant(p))),chasers=this.system.participants.filter((p=>p.chaser)).map((p=>new _participant(p)));return this.system.participants.forEach((p=>{p.assist=[],p.chaser?p.assist=chasers.filter((c=>c.uuid!==p.uuid&&!c.hasMaxBonusDice)).map((c=>({uuid:c.uuid,name:c.name}))):p.assist=preys.filter((c=>c.uuid!==p.uuid&&!c.hasMaxBonusDice)).map((c=>({uuid:c.uuid,name:c.name})));const particpant=new _participant(p);pList.push(particpant)})),pList}get participantsObject(){const participants=this.participants;return participants.forEach((p=>{p.location=this.getParticipantLocation(p.uuid)})),participants}get activeParticipantData(){return this.system.participants.find((p=>p.active))}get activeActor(){const p=this.activeParticipantData;if(p)return p.docUuid?CoC7Utilities.getActorFromKey(p.docUuid):void 0}get participantsByAdjustedMov(){const pList=this.actualParticipants.sort(((a,b)=>a.adjustedMov-b.adjustedMov));return pList.forEach((p=>{p.location=this.getParticipantLocation(p.uuid)})),pList}get participantsByInitiative(){const pList=this.actualParticipants.sort(((a,b)=>b.initiative-a.initiative));return pList.forEach((p=>{p.location=this.getParticipantLocation(p.uuid)})),pList}get preys(){return this.participants.filter((p=>!p.isChaser&&p.isValid))||[]}get chasers(){return this.participants.filter((p=>p.isChaser&&p.isValid))||[]}get allHaveValidMov(){return this.participants.every((e=>e.hasValidMov))}get allHaveSpeedRoll(){return this.participants.every((p=>p.speedCheck?.rolled))}getParticipantLocation(participantUuid){if(!this.system.locations?.list?.length)return;if(!this.started)return;const location=this.locations.find((l=>{const lp=l.participants?.find((p=>participantUuid===p.uuid));return!!lp}));return location||void 0}getParticipantData(participantUuid){const participant=this.system.participants.find((p=>participantUuid===p.uuid));if(participant)return foundry.utils.duplicate(participant)}getParticipant(participantUuid){const participantData=this.getParticipantData(participantUuid);if(participantData)return new _participant(participantData)}get nextActiveParticipant(){if(this.started)return this.participantsByInitiative.find((p=>p.data.currentMovementActions>0))}get slowestPrey(){const preys=this.participants.sort(((a,b)=>a.adjustedMov-b.adjustedMov))?.filter((p=>p.isPrey));if(preys.length>0)return preys[0]}get fastestChaser(){const chasers=this.participants.sort(((a,b)=>a.adjustedMov-b.adjustedMov))?.filter((p=>p.isChaser));if(chasers.length>0)return chasers.slice(-1).pop()}get actualParticipants(){const slowestPrey=this.slowestPrey,fastestChaser=this.fastestChaser;let pList=this.participants;return!this.system.includeLatecomers&&slowestPrey&&(pList=pList.filter((p=>p.isPrey||p.isChaser&&p.adjustedMov>=slowestPrey.adjustedMov))),!this.system.includeEscaped&&fastestChaser&&(pList=pList.filter((p=>p.isChaser||p.isPrey&&p.adjustedMov<=fastestChaser.adjustedMov))),pList}get slowestParticipant(){const pList=this.participantsByAdjustedMov;if(pList.length>0)return pList[0]}async updateParticipants(list,{render=!0}={}){const participantsData=this.cleanParticipantList(list);return await this.update({"system.participants":participantsData},{render})}async updateParticipant(particiantUuid,updateData,{render=!0}={}){const participants=foundry.utils.duplicate(this.system.participants),update=foundry.utils.duplicate(updateData),participantIndex=participants.findIndex((p=>particiantUuid===p.uuid));-1!==participantIndex&&(update.uuid&&delete update.uuid,foundry.utils.mergeObject(participants[participantIndex],update,{overwrite:!0}),await this.updateParticipants(participants,{render}))}cleanParticipantList(list){const participantsData=list||foundry.utils.duplicate(this.system.participants);return list.forEach((p=>{let data;data="_participant"===p.constructor.name?p.data:p;const index=this.findIndex(participantsData,data.uuid);-1===index?(participantsData.push(data),ui.notifications.warn(game.i18n.localize("CoC7.ParticipantDataMissing"))):participantsData[index]=data})),participantsData}async assistParticipant(assistantUuid,beneficiaryUuid,{useMovementActions=!0,render=!0}={}){const assistant=this.getParticipant(assistantUuid),beneficiary=this.getParticipant(beneficiaryUuid),participantsData=foundry.utils.duplicate(this.system.participants),assistantIndex=participantsData.findIndex((p=>assistantUuid===p.uuid)),beneficiaryIndex=participantsData.findIndex((p=>beneficiaryUuid===p.uuid));if(assistant&&beneficiary)if(beneficiary.hasMaxBonusDice)ui.notifications.error(game.i18n.format("CoC7.ErrorBeneficiaryAtMaxBonus",{name:beneficiary.name}));else{if(useMovementActions){if(assistant.currentMovementActions<1)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantNotEnoughMovement",{assistantUuid,actions:assistant.currentMovementActions}));assistant.alterMovementActions(-1),participantsData[assistantIndex]=foundry.utils.duplicate(assistant.data)}beneficiary.addBonusDice(),participantsData[beneficiaryIndex]=foundry.utils.duplicate(beneficiary.data),await this.update({"system.participants":participantsData},{render})}else ui.notifications.error(game.i18n.localize("CoC7.ParticipantNotFound"))}async toggleBonusDice(participantUuid,diceNumber,{render=!0}={}){const participant=this.getParticipant(participantUuid);if(!participant)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantUuidNotFound",{participantUuid}));const participantsData=foundry.utils.duplicate(this.system.participants),participantIndex=participantsData.findIndex((p=>participantUuid===p.uuid));participant.bonusDice>=diceNumber?participant.removeBonusDice():participant.addBonusDice(),participantsData[participantIndex]=foundry.utils.duplicate(participant.data),await this.update({"system.participants":participantsData},{render})}async cautiousApproach(participantUuid,{useMovementActions=!0,render=!0}={}){const participant=this.getParticipant(participantUuid);if(!participant)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantUuidNotFound",{participantUuid}));const participantsData=foundry.utils.duplicate(this.system.participants),participantIndex=participantsData.findIndex((p=>participantUuid===p.uuid));if(participant.hasMaxBonusDice)ui.notifications.error(game.i18n.format("CoC7.ErrorParticipantAtMaxBonus",{participantUuid}));else{if(useMovementActions){if(participant.currentMovementActions<1)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantNotEnoughMovement",{assistantUuid:participantUuid,actions:participant.currentMovementActions}));participant.alterMovementActions(-1)}participant.addBonusDice(),participantsData[participantIndex]=foundry.utils.duplicate(participant.data),await this.update({"system.participants":participantsData},{render})}}async alterParticipantMovementAction(participantUuid,count,{render=!0}={}){const participant=this.getParticipant(participantUuid);if(!participant)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantUuidNotFound",{participantUuid}));const participantsData=foundry.utils.duplicate(this.system.participants),participantIndex=participantsData.findIndex((p=>participantUuid===p.uuid));participant.alterMovementActions(count),participantsData[participantIndex]=foundry.utils.duplicate(participant.data),await this.update({"system.participants":participantsData},{render})}async activateNextParticipantTurn({scrollToLocation=!0,activateLocation=!0,render=!0,html=null}={}){const activeParticipant=this.nextActiveParticipant,options={scrollToLocation,activateLocation,render,html};return activeParticipant?this.activateParticipant(activeParticipant.uuid,options):this.activateParticipant(void 0,options)}async activateParticipant(participantUuid,{scrollToLocation=!0,activateLocation=!0,render=!0,html=null}={}){const dataUpdate=this.getActivateParticipantUpdateData(participantUuid,{scrollToLocation,activeLocation:activateLocation,html});await this.update(dataUpdate,{render})}getActivateParticipantUpdateData(participantUuid,{scrollToLocation=!0,activateLocation=!0,html=null}={}){const pUuid=participantUuid,participantsDataUpdate={},participants=this.system.participants?foundry.utils.duplicate(this.system.participants):[];participants.forEach((p=>{delete p.active,pUuid&&pUuid===p.uuid&&(p.active=!0)})),participantsDataUpdate["system.participants"]=participants;const participantLocation=this.getParticipantLocation(pUuid);let locationsDataUpdate=null;return participantLocation?activateLocation?locationsDataUpdate=this.getActivateLocationUpdateData(participantLocation.uuid,{scrollToLocation,html}):scrollToLocation&&(locationsDataUpdate={},locationsDataUpdate["system.scroll.chaseTrack.from"]=this.chaseTrackCurrentScrollPosition,locationsDataUpdate["system.scroll.chaseTrack.to"]=this.getChaseTrackLocationScrollPosition(participantLocation.uuid,{html})):locationsDataUpdate=this.getActivateLocationUpdateData(void 0,{scrollToLocation}),locationsDataUpdate?foundry.utils.mergeObject(participantsDataUpdate,locationsDataUpdate):participantsDataUpdate}activeParticipantObstacleCheck(locationUuid,{moveParticipant=!0}={}){new ChaseObstacleCard({chaseUuid:this.uuid,locationUuid,moveParticipant,forward:locationUuid!==this.activeLocation.uuid}).toMessage()}async progressToNextRound({render=!0}={}){const participants=this.system.participants?foundry.utils.duplicate(this.system.participants):[];participants.forEach((p=>{p.currentMovementActions<p.movementAction&&(p.currentMovementActions+=p.movementAction,p.currentMovementActions>p.movementAction&&(p.currentMovementActions=p.movementAction))})),await this.updateParticipants(participants,{render:!1}),this.activateNextParticipantTurn({render})}async updateRoll(rollString){if(game.user.isGM){const roll=CoC7Check.fromRollString(rollString),participants=this.system.participants?foundry.utils.duplicate(this.system.participants):[],index=participants.findIndex((p=>p.rollUuid===roll.uuid));index>=0&&(participants[index].speedCheck.rollDataString=roll.JSONRollString,await this.update({"system.participants":participants}))}else{const data={data:rollString,type:"invoke",method:"updateRoll",item:this.uuid};game.socket.emit("system.CoC7",data)}}get locations(){const locations=this.started?this.system.locations.list?foundry.utils.duplicate(this.system.locations.list):[]:this.initTrack;return this.processLocations(locations),locations}getLocationData(locationUuid,{duplicateData=!0}={}){return(duplicateData?foundry.utils.duplicate(this.locations):this.locations).find((l=>locationUuid===l.uuid))}processLocations(locations){if(locations?.length){locations[0].first=!0;for(let index=0;index<locations.length;index++){const classes=[],location=locations[index];location.name||classes.push("empty"),location.active&&classes.push("active"),location.init&&!this.started&&classes.push("init"),location.cssClasses=classes.join(" ")}locations.length>1&&(locations[locations.length-1].last=!0),locations.forEach((l=>{if(l.participants&&l.participants.length){l.participants=l.participants.filter((p=>!(null===p)));for(let i=0;i<l.participants.length;i++){const elem=l.participants[i];let p;"string"==typeof elem||elem instanceof String?p=this.system.participants.find((p=>elem===p.uuid)):"_participant"===elem?.constructor?.name?(p=void 0,ui.notifications.warn(game.i18n.localize("CoC7.ParticipantAlreadyProcessed"))):p=void 0,void 0!==p?l.participants[i]=new _participant(p):console.error("Undefined paticipant while processing participants array")}l.participants.sort(sortByRoleAndDex)}}))}}get initTrack(){if(!this.system.locations.list||0===this.system.locations.list.length)return;const locations=[],init=this.startingLine;let locationsIndexStart,initIndexStart,locationsLength;if(locationsIndexStart=init.length<=0||this.system.startingIndex>=init.length?0:init.length-this.system.startingIndex,initIndexStart=this.system.startingIndex<=0||this.system.startingIndex<=init.length?0:this.system.startingIndex-init.length,locationsLength=0===locationsIndexStart?this.system.locations.list.length:this.system.locations.list.length+locationsIndexStart,0!==init.length&&this.system.startingIndex<0)for(let index=0;index<Math.abs(this.system.startingIndex);index++)init.push({uuid:this.generateNewUuid(),init:!0,participants:[]});const chaseLocations=foundry.utils.duplicate(this.system.locations);for(let index=0;index<locationsLength;index++){let location={};const participants=[];index>=locationsIndexStart&&index-locationsIndexStart<chaseLocations.list.length&&(location=foundry.utils.duplicate(chaseLocations.list[index-locationsIndexStart]),location.init=!1,location.participants?.forEach((p=>{null!=p&&participants.push(p)}))),index>=initIndexStart&&index-initIndexStart<init.length&&(foundry.utils.mergeObject(location,init[index-initIndexStart],{overwrite:!1}),init[index-initIndexStart].participants?.forEach((p=>{null!=p&&participants.push(p)})),location.participants=participants),location.first=!1,location.end=!1,locations.push(location)}return locations}get startingLine(){const preys=this.system.includeEscaped?this.preys:this.preys?.filter((p=>!p.data.escaped)),chasers=this.system.includeLatecomers?this.chasers:this.chasers?.filter((c=>!c.data.excluded)),chaseTrack=[],chasersMinMov=this.findMinMov(chasers),chasersMaxMov=this.findMaxMov(chasers),preysMinMov=this.findMinMov(preys),preysMaxMov=this.findMaxMov(preys);if(-1!==chasersMinMov&&-1!==chasersMaxMov){for(let mov=chasersMinMov;mov<=chasersMaxMov;mov++){const location={uuid:this.generateNewUuid(),init:!0,participants:[]};chasers.filter((p=>mov===p.adjustedMov)).sort(((a,b)=>a.dex-b.dex)).forEach((p=>location.participants.push(p.uuid))),chaseTrack.push(location)}for(let index=0;index<this.system.startingRange;index++)chaseTrack.push({uuid:this.generateNewUuid(),init:!0,participants:[]})}if(-1!==preysMinMov&&-1!==preysMaxMov)for(let mov=preysMinMov;mov<=preysMaxMov;mov++){const location={uuid:this.generateNewUuid(),init:!0,participants:[]};preys.filter((p=>mov===p.adjustedMov)).sort(((a,b)=>a.dex-b.dex)).forEach((p=>location.participants.push(p.uuid))),chaseTrack.push(location)}return chaseTrack}async updateLocationsList(list,{render=!0}={}){const updatedList=this.cleanLocationsList(list);await this.update({"system.locations.list":updatedList},{render})}async updateLocation(locationUuid,updateData,{render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),update=foundry.utils.duplicate(updateData),locationIndex=locations.findIndex((l=>locationUuid===l.uuid));-1!==locationIndex&&(update.uuid&&delete update.uuid,foundry.utils.mergeObject(locations[locationIndex],update,{overwrite:!0}),await this.updateLocationsList(locations,{render}))}cleanLocationsList(list){const updatedList=foundry.utils.duplicate(list),partipantsUuidArray=this.system.participants.map((p=>p.uuid));return updatedList.forEach((l=>{if(delete l.cssClasses,delete l.first,delete l.last,delete l.end,l.participants&&l.participants.length){for(let i=0;i<l.participants.length;i++)l.participants=l.participants.filter((p=>!(null===p))),l.participants[i].data?.uuid&&(l.participants[i]=l.participants[i].data.uuid);l.participants=l.participants.filter((uuid=>partipantsUuidArray.includes(uuid)))}})),updatedList}async insertLocation(insertAtUuid,{shift=0,locData={},render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list);locations.forEach((l=>{delete l.active}));const locationIndex=locations.findIndex((l=>insertAtUuid===l.uuid));if(-1===locationIndex)return!1;const newLocationIndex=locationIndex+shift;if(newLocationIndex>locations.length)return!1;const newLocation=foundry.utils.duplicate(locData);return newLocation.uuid=this.generateNewUuid(),newLocation.init=locations[locationIndex].init,newLocation.active=!0,locations.splice(newLocationIndex,0,newLocation),await this.updateLocationsList(locations,{render})}async removeLocation(uuid,{render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),locationIndex=locations.findIndex((l=>uuid===l.uuid));if(locations.splice(locationIndex,1),locations.forEach((l=>{delete l.active})),locations.length>0){let index=locationIndex-1;index<0&&(index=0),locations[index].active=!0}return await this.updateLocationsList(locations,{render})}async activateLocation(locationUuid,{scrollToLocation=!0,render=!0}={}){const updateData=this.getActivateLocationUpdateData(locationUuid,{scrollToLocation});await this.update(updateData,{render})}getClearActiveLocationUpdateData({scrollToLocation=!0,html=null}={}){const updateData={},locations=this.system.locations.list?foundry.utils.duplicate(this.system.locations.list):[];return locations.forEach((l=>{delete l.active})),updateData["system.locations.list"]=this.cleanLocationsList(locations),scrollToLocation&&(updateData["system.scroll.chaseTrack.from"]=0,updateData["system.scroll.chaseTrack.to"]=-1),updateData}getActivateLocationUpdateData(locationUuid,{scrollToLocation=!0,html=null}={}){if(!locationUuid)return this.getClearActiveLocationUpdateData({scrollToLocation});const updateData={},locations=this.system.locations.list?foundry.utils.duplicate(this.system.locations.list):[];return locations.forEach((l=>{delete l.active,locationUuid===l.uuid&&(l.active=!0)})),updateData["system.locations.list"]=this.cleanLocationsList(locations),scrollToLocation&&(updateData["system.scroll.chaseTrack.from"]=this.chaseTrackCurrentScrollPosition,updateData["system.scroll.chaseTrack.to"]=this.getChaseTrackLocationScrollPosition(locationUuid,{html})),updateData}get activeLocation(){if(!this.locations)return;const location=this.locations.find((l=>l.active));if(!location)return;location.participants?.length&&(location.hasParticipant=!0);const actor=this.activeActor;if(actor){const test=actor.find(location.obstacleDetails?.checkName);test&&(location.activeActorHasSkill=!0,location.activeActorTest=test)}return location}get previousLocation(){if(!this.locations)return;const activeIndex=this.locations.findIndex((l=>l.active));if(-1===activeIndex)return;if(0===activeIndex)return;const location=this.locations[activeIndex-1],actor=this.activeActor;if(actor){const test=actor.find(location.obstacleDetails?.checkName);test&&(location.activeActorHasSkill=!0,location.activeActorTest=test)}return location}get nextLocation(){if(!this.locations)return;const activeIndex=this.locations.findIndex((l=>l.active));if(-1===activeIndex)return;if(activeIndex===this.locations.length-1)return;const location=this.locations[activeIndex+1],actor=this.activeActor;if(actor){const test=actor.find(location.obstacleDetails?.checkName);test&&(location.activeActorHasSkill=!0,location.activeActorTest=test)}return location}async locatorDropped(data){await this.setLocationCoordinates(data.locationUuid,data.x,data.y,data.scene)}async setLocationCoordinates(locationUuid,x,y,sceneId,{render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),locationIndex=locations.findIndex((l=>locationUuid===l.uuid));return locations[locationIndex].coordinates={x,y,scene:sceneId},await this.updateLocationsList(locations,{render})}async clearActiveLocationCoordinates({render=!0}={}){if(this.activeLocation)return await this.clearLocationCoordinates(this.activeLocation.uuid,{render})}async clearLocationCoordinates(locationUuid,{render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),locationIndex=locations.findIndex((l=>locationUuid===l.uuid));return delete locations[locationIndex].coordinates,await this.updateLocationsList(locations,{render})}async cutToTheChase(){if(this.allHaveSpeedRoll){if(this.actualParticipants?.length<2)ui.notifications.warn(game.i18n.localize("CoC7.NeedMin2Participants"));else if(this.allHaveValidMov){const participants=this.participants,minMov=this.findMinMov(this.actualParticipants);participants.forEach((p=>{p.calculateMovementActions(minMov),p.currentMovementActions=p.movementAction,p.bonusDice=0})),await this.updateParticipants(participants,{render:!1}),await this.updateLocationsList(this.locations,{render:!1}),await this.start()}}else ui.notifications.warn(game.i18n.localize("CoC7.NotAllHaveSpeedRoll"))}async restart(){const locations=this.locations.filter((l=>!l.init));for(let i=0;i<locations.length;i++)locations[i].participants&&(locations[i].participants=[]),locations[i].active&&delete locations[i].active;const participantsData=this.system.participants?foundry.utils.duplicate(this.system.participants):[];for(let i=0;i<participantsData.length;i++)participantsData[i].active&&delete participantsData[i].active;await this.setchaseTrackScroll(0,0,{render:!1}),await this.updateLocationsList(locations,{render:!1}),await this.updateParticipants(participantsData,{render:!1}),await this.stop()}getLocationShift(locationUuid,{skip=1}={}){const locations=foundry.utils.duplicate(this.system.locations.list),destinationIndex=locations.findIndex((l=>locationUuid===l.uuid))+skip;return 0===locations.length?null:destinationIndex>=locations.length?locations[locations.length-1]:destinationIndex<0?locations[0]:locations[destinationIndex]}async removeParticipant(participantUuid,{render=!0}={}){const p=this.getParticipant(participantUuid);await Dialog.confirm({title:game.i18n.localize("CoC7.RemoveParticipant"),content:`<p>${game.i18n.format("CoC7.RemoveParticipantHint",{name:p.name})}</p>`,yes:async()=>{const newParticipantsData=foundry.utils.duplicate(this.system.participants).filter((p=>participantUuid!==p.uuid)),locationsData=foundry.utils.duplicate(this.system.locations.list);locationsData.forEach((l=>{l.participants&&l.participants.length&&(l.participants=l.participants.filter((uuid=>participantUuid!==uuid)))})),await this.updateParticipants(newParticipantsData,{render:!1}),await this.updateLocationsList(locationsData,{render})}})}async addParticipant(participant,{render=!0,locationUuid=null,recalculateMovementActions=!0,update=!1}={}){const participantsData=this.system.participants?foundry.utils.duplicate(this.system.participants):[];if(participant.data.chaseUuid&&delete participant.data.chaseUuid,participant.data.locationUuid&&delete participant.data.locationUuid,participant.data.update&&delete participant.data.update,!participant.uuid){let unique=!1;for(;!unique;)participant.data.uuid=foundry.utils.randomID(16),unique=0===participantsData.filter((p=>p.uuid===participant.uuid)).length}if(update){participant.currentMovementActions>participant.movementAction&&(participant.currentMovementActions=participant.movementAction);const index=participantsData.findIndex((p=>p.uuid===participant.uuid));participantsData[index]=participant.data}else participantsData.push(participant.data);if(await this.updateParticipants(participantsData,{render:render&&!this.started&&!this.recalculateMovementActions}),recalculateMovementActions){const slowest=this.slowestParticipant?.adjustedMov,participants=this.participants;participants.forEach((p=>p.calculateMovementActions(slowest))),await this.updateParticipants(participants,{render:render&&!this.started})}if(this.started&&!participant.data.escaped&&!participant.data.excluded){const locationsData=this.system.locations.list?foundry.utils.duplicate(this.system.locations.list):[];0===locationsData.length&&ui.notifications.error(game.i18n.localize("CoC7.ErrorEmptyLocationsList"));let locationIndex=locationsData.findIndex((l=>locationUuid===l.uuid));-1===locationIndex&&(locationIndex=0),locationsData[locationIndex].participants||(locationsData[locationIndex].participants=[]),-1===locationsData[locationIndex].participants.findIndex((p=>p===participant.uuid))&&locationsData[locationIndex].participants.push(participant.uuid),await this.updateLocationsList(locationsData,{render})}}async editParticipant(participantUuid,{useMovementActions=!0,scrollToLocation=!0,activateLocation=!0,activateParticipant=!0,render=!0}={}){}async moveParticipant(participantUuid,locationMoved,{useMovementActions=!0,scrollToLocation=!0,activateLocation=!0,activateParticipant=!0,render=!0}={}){let modified=!1;const locations=foundry.utils.duplicate(this.system.locations.list),originIndex=locations.findIndex((l=>l.participants?.includes(participantUuid)));let destinationIndex=originIndex+locationMoved;destinationIndex>locations.length-1&&(destinationIndex=locations.length-1),destinationIndex<0&&(destinationIndex=0);const totalMove=destinationIndex-originIndex,participant=this.getParticipant(participantUuid),participantsData=foundry.utils.duplicate(this.system.participants),participantIndex=participantsData.findIndex((p=>participantUuid===p.uuid));if(useMovementActions){if(!participant)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantUuidNotFound",{participantUuid:this.participantUuid}));if(participant.currentMovementActions<Math.abs(totalMove))return void ui.notifications.error(game.i18n.format("CoC7.ParticipantNotEnoughMovement",{assistantUuid:participantUuid,actions:participant.currentMovementActions}));participant.alterMovementActions(0-Math.abs(totalMove)),participantsData[participantIndex]=foundry.utils.duplicate(participant.data),await this.update({"system.participants":participantsData},{render:!1}),modified=!0}return 0!==totalMove&&(await this.moveParticipantToLocation(participantUuid,locations[destinationIndex].uuid,{render:!1}),modified=!0),activateParticipant&&(await this.activateParticipant(participantUuid,{scrollToLocation,activateLocation,render:!1}),modified=!0),activateLocation&&!activateParticipant&&(await this.activateLocation(locations[destinationIndex].uuid,{scrollToLocation,render:!1}),modified=!0),modified&&render&&await this.sheet.render(!0),totalMove}async moveParticipantToLocation(participantUuid,locationUuid,{scrollToLocation=!0,activateLocation=!0,animate=null,moveToken=!0,render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),destination=locations.find((l=>locationUuid===l.uuid));if(!destination)return void console.error(`Failed to move ${participantUuid}. Location ${locationUuid} unknown`);const origin=locations.find((l=>l.participants?.includes(participantUuid)));if(!origin)return void console.error(`Failed to find ${participantUuid} in locations`);if(destination.participants||(destination.participants=[]),destination.participants.includes(participantUuid))return;destination.participants.push(participantUuid);const oldParticipantsList=origin.participants.filter((p=>participantUuid!==p));if(origin.participants=oldParticipantsList,moveToken&&destination.coordinates){const participant=this.getParticipant(participantUuid);let particpantDocument=CoC7Utilities.getDocumentFromKey(participant?.data?.docUuid);if(particpantDocument&&!(particpantDocument instanceof TokenDocument||particpantDocument?.object instanceof Token)){const foundTokens=canvas.scene.tokens.filter((d=>d.actorLink&&d.actor?.id===particpantDocument.id));1===foundTokens.length&&(particpantDocument=foundTokens[0])}if(particpantDocument&&!(particpantDocument instanceof TokenDocument||particpantDocument?.object instanceof Token))console.warn("No token associated with this actor");else if(destination.coordinates.scene!==game.scenes.viewed.uuid&&console.warn("Caution the scene is not the active scene"),particpantDocument.parent?.uuid!==destination.coordinates.scene)ui.notifications.error(game.i18n.localize("CoC7.ErrorTokenNotOnScene"));else{const scene=CoC7Utilities.getDocumentFromKey(destination.coordinates.scene);let x=destination.coordinates.x;const y=destination.coordinates.y;let targetRect=new PIXI.Rectangle(x,y,particpantDocument.object.width,particpantDocument.object.height).normalize();const update=[];let foundFreeSpace=!1;for(;!foundFreeSpace;){const overlapingToken=scene.tokens.find((t=>t.id!==particpantDocument.id&&t.object.bounds.intersects(targetRect)));overlapingToken?(x=overlapingToken.object.bounds.right+1,targetRect=new PIXI.Rectangle(x,y,particpantDocument.object.width,particpantDocument.object.height).normalize()):foundFreeSpace=!0}update.push({_id:particpantDocument.id,x,y});const showTokenMovement="boolean"==typeof animate?animate:this.system.showTokenMovement;await particpantDocument.parent.updateEmbeddedDocuments("Token",update,{animate:showTokenMovement})}}await this.updateLocationsList(locations,{render})}async setchaseTrackScroll({from,to=-1,render=!0}={}){await this.update({"system.scroll.chaseTrack.from":void 0===from?this.chaseTrackCurrentScrollPosition:from,"system.scroll.chaseTrack.to":void 0===to?this.chaseTrackCurrentScrollPosition:to},{render})}get chaseTrackCurrentScrollPosition(){const html=this.sheet?._element;if(!html)return-1;const chaseTrack=html[0].querySelector(".chase-track");return chaseTrack?chaseTrack.scrollLeft:-1}get chaseTrackActiveLocationScrollPosition(){return this.activeLocation?this.getChaseTrackLocationScrollPosition(this.activeLocation.uuid):-1}getChaseTrackLocationScrollPosition(locationUuid,{html=null}){const htmlElement=html||this.sheet?._element;if(!htmlElement||!htmlElement[0])return-1;const chaseTrack=htmlElement[0].querySelector(".chase-track");if(!chaseTrack)return-1;const activeLocationElement=chaseTrack.querySelector(`.chase-location[data-uuid="${locationUuid}"]`);if(!activeLocationElement)return-1;const leftScroll=activeLocationElement.offsetLeft+activeLocationElement.clientWidth/2-chaseTrack.clientWidth/2;return leftScroll<0?0:Math.floor(leftScroll)}findMinMov(list){return list?.length?list.reduce(((prev,current)=>prev.adjustedMov<current.adjustedMov?prev:current)).adjustedMov:-1}findMaxMov(list){return list?.length?list.reduce(((prev,current)=>prev.adjustedMov>current.adjustedMov?prev:current)).adjustedMov:-1}findIndex(list,uuid){return list.findIndex((p=>p.uuid===uuid))}get started(){return this.getFlag("CoC7","started")}async start(){const remString=$(":root").css("font-size"),remSize=Number(remString.replace("px","")),pCount=this.actualParticipants.length,width=Math.max((11.2*pCount+3)*remSize,40*remSize);this.sheet._tabs[0].active="setup",this.sheet.position.width=width,await this.setFlag("CoC7","started",!0),await this.activateNextParticipantTurn()}async stop(){return this.unsetFlag("CoC7","started")}generateNewUuid(){return foundry.utils.randomID(16)}getActorSkillsAndCharacteristics(participantUuid){const participant=this.getParticipant(participantUuid);if(!participant.actor)return;const list=[];return CoCActor.getCharacteristicDefinition().forEach((c=>list.push(`${game.i18n.localize("CoC7.Characteristics")} (${c.shortName})`))),list.push(`${game.i18n.localize("CoC7.Attribute")} (${game.i18n.localize("CoC7.Luck")})`),list.push(`${game.i18n.localize("CoC7.Attribute")} (${game.i18n.localize("CoC7.SAN")})`),participant.actor.skills.forEach((s=>list.push(s.name))),list}get activeActorSkillsAndCharacteristics(){const particicpantData=this.activeParticipantData;if(particicpantData)return this.getActorSkillsAndCharacteristics(particicpantData.uuid)}get allSkillsAndCharacteristics(){const list=[];return CoCActor.getCharacteristicDefinition().forEach((c=>list.push(`${game.i18n.localize("CoC7.Characteristics")} (${c.shortName})`))),list.push(`${game.i18n.localize("CoC7.Attribute")} (${game.i18n.localize("CoC7.Luck")})`),list.push(`${game.i18n.localize("CoC7.Attribute")} (${game.i18n.localize("CoC7.SAN")})`),game.CoC7.skillList?.forEach((s=>{list.includes(s.name)||s.name.toLowerCase().includes(`(${game.i18n.localize("CoC7.AnySpecName")})`.toLowerCase())||list.push(s.name)})),this.participants.forEach((p=>{p.actor&&p.actor.skills.forEach((s=>{list.includes(s.name)||list.push(s.name)}))})),list.sort(Intl.Collator().compare)}get allSkillsAndCharacteristicsShort(){const list=[];return CoCActor.getCharacteristicDefinition().forEach((c=>list.push(`${c.label}`))),list.push(`${game.i18n.localize("CoC7.Luck")}`),list.push(`${game.i18n.localize("CoC7.SAN")}`),game.CoC7.skillList?.forEach((s=>{list.includes(s.name)||s.name.toLowerCase().includes(`(${game.i18n.localize("CoC7.AnySpecName")})`.toLowerCase())||list.push(s.name)})),this.participants.forEach((p=>{p.actor&&p.actor.skills.forEach((s=>{list.includes(s.name)||list.push(s.name)}))})),list.sort(Intl.Collator().compare)}}class CoC7Skill extends CoC7Item{constructor(data,context){if(void 0===data.system?.skillName){const skill=CoC7Skill.guessNameParts(data.name),{name,skillName,specialization,...newProperties}=skill;data.name=name,data.system||={};const properties={...data.system.properties,...newProperties};data.system={...data.system,skillName,specialization,properties}}super(data,context)}static guessNameParts(skillName){const output={combat:!1,fighting:!1,firearm:!1,name:skillName,skillName,special:!1,specialization:""},match=skillName.match(/^(.+)\s*\(([^)]+)\)$/);if(match){output.skillName=match[2].trim(),output.special=!0;const specialization=match[1].trim();output.specialization=specialization,output.name=specialization+" ("+output.skillName+")",output.fighting=specialization===game.i18n.localize("CoC7.FightingSpecializationName"),output.firearm=specialization===game.i18n.localize("CoC7.FirearmSpecializationName"),output.combat=output.fighting||output.firearm}return output}get hasActiveEffects(){return this.activeEffects.length>0}get activeEffects(){if(this.parent&&this.parent.effects){const effectKeyFull=`skill.${this.name}`.toLowerCase(),effectKeyShort=`skill.${this.system.skillName}`.toLowerCase();let changes=this.parent.effects.reduce(((changes,e)=>e.disabled||e.isSuppressed?changes:changes.concat(e.data.changes.map((c=>((c=foundry.utils.duplicate(c)).effect=e,c.priority=c.priority??10*c.mode,c))))),[]);return changes.sort(((a,b)=>a.priority-b.priority)),changes=changes.filter((e=>e.key.toLowerCase()===effectKeyShort||e.key.toLowerCase()===effectKeyFull)),changes}return[]}get itemIdentifier(){return this.name}get rawValue(){let value=0;return"character"===this.actor.type?(value=this.base,value+=this.system.adjustments?.personal?parseInt(this.system.adjustments?.personal):0,value+=this.system.adjustments?.occupation?parseInt(this.system.adjustments?.occupation):0,value+=this.system.adjustments?.experience?parseInt(this.system.adjustments?.experience):0,game.settings.get("CoC7","pulpRuleArchetype")&&this.system.adjustments?.archetype&&(value+=parseInt(this.system.adjustments?.archetype))):value=parseInt(this.system.value),isNaN(value)?null:value}get value(){const value=this.parent?.system.skills?.[`${this.itemIdentifier}`]?.value;return value||this.rawValue}async updateValue(value){if("character"===this.actor.type){const delta=parseInt(value)-this.rawValue,exp=(this.system.adjustments?.experience?parseInt(this.system.adjustments.experience):0)+delta;await this.update({"system.adjustments.experience":exp>0?exp:0})}else await this.update({"system.value":value})}async increaseExperience(x){if("skill"!==this.type)return null;if("character"===this.actor.type){const exp=(this.system.adjustments?.experience?parseInt(this.system.adjustments.experience):0)+parseInt(x);await this.update({"system.adjustments.experience":exp>0?exp:0})}}}class CoC7Vehicle extends CoCActor{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/jeep.svg"),super(data,context)}get rawBuild(){return this.build}get build(){const build=parseInt(this.system.attribs.build.value);return isNaN(build)?null:build}get hp(){if(null===this.system.attribs.build.current||void 0===this.system.attribs.build.current||""===this.system.attribs.build.current)return this.build;if(this.system.attribs.build.current>this.system.attribs.build.value)return this.build;const hp=parseInt(this.system.attribs.build.current);return isNaN(hp)?null:hp}get hpMax(){return this.build}get rawHpMax(){return this.build}async setHp(value){return value>this.build&&(value=this.build),await this.update({"system.attribs.build.current":value})}get rawDb(){return this.db}get db(){const db=parseInt(this.system.attribs.db?.value);return isNaN(db)?null:db}get rawMov(){return this.mov}get mov(){const mov=parseInt(this.system.attribs.mov?.value);return isNaN(mov)?null:mov}get mpMax(){return parseInt(this.system.attribs?.mp?.max)||0}get rawMpMax(){return this.mpMax}get sanMax(){return null}get rawSanMax(){return null}}class CoC7DecaderDie extends Die{constructor(termData){termData.faces=10,super(termData)}get total(){const total=super.total;return 10===total?0:10*total}static get DENOMINATION(){return"t"}}class CoC7DecaderDieOther extends CoC7DecaderDie{static get DENOMINATION(){return"o"}}const SETTINGS={pulpRules:{name:"",hint:"",scope:"world",config:!1,default:!1,type:Boolean},initiativeRule:{name:"SETTINGS.InitiativeRule",hint:"SETTINGS.InitiativeRuleHint",scope:"world",config:!1,default:"basic",type:String,choices:{basic:"SETTINGS.InitiativeRuleBasic",optional:"SETTINGS.InitiativeRuleOptional"},onChange:rule=>_setInitiativeOptions(rule)},developmentRollForLuck:{name:"SETTINGS.developmentRollForLuck",hint:"SETTINGS.developmentRollForLuckHint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleDoubleMaxHealth:{name:"CoC7.Settings.PulpRules.DoubleMaxHealth.Name",hint:"CoC7.Settings.PulpRules.DoubleMaxHealth.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleDevelopmentRollLuck:{name:"CoC7.Settings.PulpRules.DevelopmentRollLuck.Name",hint:"CoC7.Settings.PulpRules.DevelopmentRollLuck.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleArchetype:{name:"CoC7.Settings.PulpRules.Archetype.Name",hint:"CoC7.Settings.PulpRules.Archetype.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleOrganization:{name:"CoC7.Settings.PulpRules.Organization.Name",hint:"CoC7.Settings.PulpRules.Organization.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleTalents:{name:"CoC7.Settings.PulpRules.Talents.Name",hint:"CoC7.Settings.PulpRules.Talents.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleFasterRecovery:{name:"CoC7.Settings.PulpRules.FasterRecovery.Name",hint:"CoC7.Settings.PulpRules.FasterRecovery.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleIgnoreMajorWounds:{name:"CoC7.Settings.PulpRules.IgnoreMajorWounds.Name",hint:"CoC7.Settings.PulpRules.IgnoreMajorWounds.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleIgnoreAgePenalties:{name:"CoC7.Settings.PulpRules.IgnoreAgePenalties.Name",hint:"CoC7.Settings.PulpRules.IgnoreAgePenalties.Hint",scope:"world",config:!1,default:!1,type:Boolean},opposedRollTieBreaker:{name:"SETTINGS.OpposedRollTieBreaker",hint:"SETTINGS.OpposedRollTieBreakerHint",scope:"world",config:!1,default:!1,type:Boolean}};function _setInitiativeOptions(rule){let decimals=0;switch(rule){case"optional":decimals=2;break;case"basic":decimals=0}CONFIG.Combat.initiative={formula:null,decimals}}class CoC7GameRuleSettings extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{title:"SETTINGS.TitleRules",id:"rules-settings",template:"systems/CoC7/templates/system/rule-settings.html",width:550,height:"auto",closeOnSubmit:!0})}getData(){const options={},pulpRules={true:!1,false:!1};for(const[k,v]of Object.entries(SETTINGS))options[k]={value:game.settings.get("CoC7",k),setting:v},k.match(/^pulpRule.{2,}$/)&&(pulpRules[options[k].value]=!0);return options.pulpSelection=pulpRules.true?pulpRules.false?"some":"all":"none",options}static registerSettings(){for(const[k,v]of Object.entries(SETTINGS))game.settings.register("CoC7",k,v);_setInitiativeOptions(game.settings.get("CoC7","initiativeRule"))}activateListeners(html){super.activateListeners(html),html.find("#pulpRulesSelect").on("change",(event=>this.onChangePulpSelect(event))),html.find("input.pulpRulesSelect[type=checkbox]").on("click",(event=>this.onClickPulp(event))),html.find("button[name=reset]").on("click",(event=>this.onResetDefaults(event)))}onChangePulpSelect(event){const val=$(event.currentTarget).val();"none"!==val&&"all"!==val||$("#rules-settings").find("input.pulpRulesSelect[type=checkbox]").each((function(){const checkbox=$(this);"none"===val?checkbox.prop("checked",!1):checkbox.prop("checked",!0)}))}onClickPulp(event){const pulpRules={true:!1,false:!1};$("#rules-settings").find("input.pulpRulesSelect[type=checkbox]").each((function(){$(this).prop("checked")?pulpRules.true=!0:pulpRules.false=!0})),$("#pulpRulesSelect").val(pulpRules.true?pulpRules.false?"some":"all":"none")}async onResetDefaults(event){event.preventDefault();for await(const[k,v]of Object.entries(SETTINGS))await game.settings.set("CoC7",k,v?.default);return this.render()}async _updateObject(event,data){const pulpRules={true:!1,false:!1};for await(const key of Object.keys(SETTINGS))game.settings.set("CoC7",key,data[key]),key.match(/^pulpRule.{2,}$/)&&(pulpRules[data[key]]=!0);game.settings.set("CoC7","pulpRules",pulpRules.true&&!pulpRules.false)}}class CoC7ArchetypeSheet extends ItemSheet{activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"skills"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"skills"))))}async _onDrop(event,type="skill",collectionName="skills"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");let useCoCID=0;const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];for(const item of dataList)item&&item.system&&[type].includes(item.type)&&(!CoC7Item.isAnySpec(item)&&collection.find((el=>el.name===item.name))||(0===useCoCID&&(useCoCID=await DropCoCID.create()),collection.push(DropCoCID.processItem(useCoCID,item))));await this.item.update({[`system.${collectionName}`]:collection})}async _onItemSummary(event,collectionName="items"){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.item.system[collectionName].find((s=>s._id===li.data("item-id")));if(!item)return;const chatData=await TextEditor.enrichHTML(item.system.description.value,{async:!0,secrets:this.item.editable});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const item=$(event.currentTarget).closest(".item"),itemId=item.data("item-id"),CoCId=item.data("cocid"),itemIndex=this.item.system[collectionName].findIndex((i=>itemId&&i._id===itemId||CoCId&&i===CoCId));if(itemIndex>-1){const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`system.${collectionName}`]:collection})}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","occupation"],template:"systems/CoC7/templates/items/archetype.html",width:520,height:480,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.hasOwner=!0===this.item.isEmbedded;const coreCharacteristics=[];for(const[key,selected]of Object.entries(sheetData.data.system.coreCharacteristics))if(selected){const characName=game.i18n.localize(`CHARAC.${key.toUpperCase()}`);coreCharacteristics.push(characName)}sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.enrichedSuggestedOccupations=await TextEditor.enrichHTML(sheetData.data.system.suggestedOccupations,{async:!0,secrets:sheetData.editable}),sheetData.enrichedSuggestedTraits=await TextEditor.enrichHTML(sheetData.data.system.suggestedTraits,{async:!0,secrets:sheetData.editable}),sheetData.data.system.skills=await game.system.api.cocid.expandItemArray({itemList:sheetData.data.system.skills}),sheetData.skillListEmpty=0===sheetData.data.system.skills.length,sheetData.data.system.skills.sort(CoC7Utilities.sortByNameKey),sheetData.coreCharacteristicsString="";const orString=` ${game.i18n.localize("CoC7.Or")} `;return coreCharacteristics.length&&(sheetData.coreCharacteristicsString+=coreCharacteristics.join(orString)),sheetData.itemProperties=[],sheetData.itemProperties.push(`${game.i18n.localize("CoC7.PulpTalents")}: ${sheetData.data.system.talents}`),sheetData.itemProperties.push(`${game.i18n.localize("CoC7.BonusPoints")}: ${sheetData.data.system.bonusPoints}`),sheetData.isKeeper=game.user.isGM,sheetData}}class CoC7BookSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{template:"systems/CoC7/templates/items/book/main.html",classes:["coc7","item","book"],width:500,height:"auto",resizable:!1,dragDrop:[{dragSelector:".spells",dropSelector:null}],scrollY:[".body"],tabs:[{navSelector:".navigation",contentSelector:".body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();return sheetData.initialReading=this.item.system.initialReading,sheetData.isKeeper=game.user.isGM,sheetData.isOwner=this.item.isOwner,sheetData.spellsLearned=this.spellsLearned,sheetData.exhausted=!1!==await this.item.checkExhaustion(),sheetData.studyCompleted=this.item.system.study.progress===this.item.system.study.necessary,sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.spellListEmpty=0===this.item.system.spells.length,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.enrichedContent=await TextEditor.enrichHTML(sheetData.data.system.content,{async:!0,secrets:sheetData.editable}),sheetData}get spellsLearned(){let amount=0;const spells=this.item.system.spells;for(const spell of spells)spell.system.learned&&amount++;return`${amount} / ${spells.length}`}activateListeners(html){super.activateListeners(html),html.find("#attempt-initial-reading").click((event=>{event.preventDefault(),this.item.attemptInitialReading()})),html.find(".delete-spell").click((event=>this._onDelete(event))),html.find(".edit-spell").click((event=>this._onSpellDetail(event))),html.find(".spell-name").click((event=>this._onSpellDetail(event))),html.find(".teach-spell").click((event=>{const id=$(event.currentTarget).parents("li").data("id");this.item.attemptSpellLearning(id)})),html.find('[name="system.study.necessary"]').change((event=>{const value=parseInt(event.currentTarget.value);this.item.changeProgress("reset",value)})),html.find("#increase-progress").click((()=>{this.item.changeProgress("increase")})),html.find("#decrease-progress").click((()=>{this.item.changeProgress("decrease")})),html.find(".add-other-gains").click((event=>{this.modifyOthersGains(event,"add")})),html.find(".change-other-gains").change((event=>{this.modifyOthersGains(event,"change")})),html.find("#redo-full-study").click((()=>{this.item.redoFullStudy()})),html.find(".remove-other-gains").click((event=>{this.modifyOthersGains(event,"remove")})),html.find(".option").click((event=>this.modifyType(event)))}async _onSpellDetail(event){event.preventDefault();const index=$(event.currentTarget).parents("li").data("index");return await this.item.spellDetail(index)}async _onDelete(event){if(!game.user.isGM)return;event.preventDefault();const index=$(event.currentTarget).parents("li").data("index"),spells=this.item.system.spells?foundry.utils.duplicate(this.item.system.spells):[];return index>=0&&spells.splice(index,1),await this.item.update({"system.spells":spells})}async _onDrop(event,type="spell"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item"),spells=[];for(const item of dataList)item&&["skill","spell"].includes(item.type)&&("spell"===item.type?spells.push(item):"skill"===item.type&&this.item.system.type.other&&this.modifyOthersGains(null,"add",{name:item.name}));await this.item.addSpells(spells)}modifyType(event){event.preventDefault(),event.stopPropagation();return $(event.currentTarget).prev().trigger("click")}async modifyOthersGains(event,mode,options={}){let index=null,element=null;event&&(event.preventDefault(),element=$(event.currentTarget),index=element.parents("tr").data("index"));const skills=this.item.system.gains.others?foundry.utils.duplicate(this.item.system.gains.others):[];switch(mode){case"add":skills.push({name:options.name||game.i18n.localize("CoC7.NewSkillName"),value:"development"});break;case"change":skills[index]={name:element.is("input")?element.val():skills[index].name,value:element.is("select")?element.val():skills[index].value};break;case"remove":index>=0&&skills.splice(index,1)}return await this.item.update({"system.gains.others":skills})}}class CoC7ContainerSheet extends ActorSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","actor","storage"],template:"systems/CoC7/templates/actors/storage-sheet.html",width:672,height:765,dragDrop:[{dragSelector:".item",dropSelector:null}],tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"items"}]})}async _onDrop(event){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");if(!this.options.editable)return;const items=this.actor.items.toObject()||[];for(const item of dataList)item&&item.system&&["book","item","spell","weapon"].includes(item.type)&&items.push(item.toObject());await this.actor.update({items})}onCloseSheet(){}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=await super.getData();if(sheetData.isKeeper=game.user.isGM,sheetData.editable=this.isEditable,sheetData.itemsByType={},sheetData.items){for(const item of sheetData.items)Object.prototype.hasOwnProperty.call(sheetData.itemsByType,item.type)||(sheetData.itemsByType[item.type]=[]),sheetData.itemsByType[item.type].push(item);for(const itemType in sheetData.itemsByType)sheetData.itemsByType[itemType].sort(CoC7Utilities.sortByNameKey)}return sheetData.allowUnlock="always"===game.settings.get("CoC7","playerUnlockSheetMode")||game.user.isGM,sheetData.showInventoryItems=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"item")||!sheetData.data.system.flags.locked,sheetData.showInventoryBooks=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"book")||!sheetData.data.system.flags.locked,sheetData.showInventorySpells=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"spell")||!sheetData.data.system.flags.locked,sheetData.showInventoryTalents=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"talent")||!sheetData.data.system.flags.locked&&game.settings.get("CoC7","pulpRuleTalents"),sheetData.showInventoryWeapons=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"weapon")||!sheetData.data.system.flags.locked,sheetData.hasInventory=sheetData.showInventoryItems||sheetData.showInventoryBooks||sheetData.showInventorySpells||sheetData.showInventoryTalents||sheetData.showInventoryWeapons,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){super.activateListeners(html),html.find(".item-edit").click((ev=>{const li=$(ev.currentTarget).parents(".item");this.actor.items.get(li.data("itemId")).sheet.render(!0)})),html.find(".inventory-header").click(this._onInventoryHeader.bind(this)),html.find(".item-trade").click(this._onTradeItem.bind(this)),html.find(".show-detail").click(this._onItemSummary.bind(this)),html.find(".item-delete").click((async ev=>{const li=$(ev.currentTarget).parents(".item"),itemToDelete=this.actor.items.get(li.data("itemId"),{strict:!0});await itemToDelete.delete(),li.slideUp(200,(()=>this.render(!1)))})),html.find(".add-item").click((ev=>{switch(ev.currentTarget.dataset.type){case"book":this.actor.createEmptyBook(ev);break;case"item":this.actor.createEmptyItem(ev);break;case"skill":this.actor.createEmptySkill(ev);break;case"spell":this.actor.createEmptySpell(ev);break;case"weapon":this.actor.createEmptyWeapon(ev)}})),html.find(".lock").click(this._onLockClicked.bind(this))}async _onLockClicked(event){event.preventDefault();const isLocked=this.actor.locked;this.actor.locked=!isLocked}async _onTradeItem(event){const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("itemId"));let content="<p>"+game.i18n.localize("CoC7.MessageSelectUserToGiveTo");const message={actorFrom:this.actor.id,scene:null,actorTo:this.actor.id,item:item.id};this.token?.actor&&(message.actorFrom=this.token.id,message.scene=this.token.parent.id);const actors=game.actors.filter((e=>{if(!["character","npc","creature","container"].includes(e.type))return!1;if(this.actor.id===e.id)return!1;let visible=!1;for(const[k,v]of Object.entries(e.ownership))"default"!==k&&k!==game.user.id||(visible=visible||v!==CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE);return visible}));content+='<form id="selectform"><select name="user">';for(const actor of actors)content=content+'<option value="'+actor.id+'">'+actor.name+"</option>";content+="</select></form></p>",await Dialog.prompt({title:game.i18n.localize("CoC7.MessageTitleSelectUserToGiveTo"),content,callback:html=>{const formData=new FormData(html[0].querySelector("#selectform"));for(const[name,value]of formData)"user"===name&&(message.actorTo=value)}}),await game.CoC7socket.executeAsGM("gmtradeitemto",message)}async _onItemSummary(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("item-id")),chatData=await item.getChatData({secrets:this.actor.isOwner});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$('<div class="item-summary"></div>'),labels=$('<div class="item-labels"></div>');for(const p of chatData.labels)labels.append(`<div class="item-label"><span class="label-name">${p.name} :</span><span class="label-value">${p.value}</span></div>`);if(div.append(labels),div.append($(`<div class="item-description">${chatData.description.value}</div>`)),item.system.properties?.spcl){const specialDiv=$(`<div class="item-special">${chatData.description.special}</div>`);div.append(specialDiv)}const props=$('<div class="item-properties"></div>');for(const p of chatData.properties)props.append(`<div class="tag item-property">${game.i18n.localize(p)}</div>`);div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}_onInventoryHeader(event){event.preventDefault(),$(event.currentTarget).siblings("li").slideToggle(200)}}class CoC7ChaseParticipantImporter extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{title:game.i18n.localize("CoC7.AddActorToChase"),template:"systems/CoC7/templates/apps/chase-participant-importer.html",classes:["coc7","dialog","chase-participant-importer"],editable:!0,resizable:!1,submitOnChange:!0,closeOnSubmit:!1,width:300,height:"auto"})}activateListeners(html){super.activateListeners(html);new DragDrop({dropSelector:".form-container",permissions:{drop:game.user.isGM},callbacks:{drop:this._onDropParticipant.bind(this)}}).bind(html[0]);new DragDrop({dragSelector:".chase-token",permissions:{dragstart:game.user.isGM},callbacks:{dragstart:this._onTokenSelectorDragStart.bind(this)}}).bind(html[0]),html.find(".reset-participant").click((async()=>{this.object={},this._actor=null,await this.render(!0)})),html.find(".food-chain").click((async()=>{this.object.chaser=!this.object.chaser,await this.render(!0)})),html.find("[data-action]").click(this._onAction.bind(this))}async _onTokenSelectorDragStart(event){const data={type:"getToken",appId:this.appId,callBack:"addTokenToChase"};event.dataTransfer.setData("text/plain",JSON.stringify(data))}async getData(){if(!this.object.initiative){const init=CoCActor.getCharacteristicDefinition().find((c=>"dex"===c.key));this.object.initiative=init.label}if(!this.object.speedCheck){const speedCheck=CoCActor.getCharacteristicDefinition().find((c=>"con"===c.key));this.object.speedCheck={name:speedCheck.label}}this.validateParticipant();const data=await super.getData();if(data.participant=new _participant(this.object),data.object.speedCheck.name&&this.actor){const speedCheck=this.actor.find(data.object.speedCheck.name);speedCheck?(data.object.speedCheck.score=speedCheck.value.value,data.speedCheckReadOnly=!0):data.participant.speedCheck.score&&!this.object.speedCheck?.score&&(data.object.speedCheck.score=data.participant.speedCheck.score)}if(data.object.initiative&&this.actor){const initiative=this.actor.find(data.object.initiative);initiative?(data.object.dex=initiative.value.value,data.initReadOnly=!0):data.object.dex=data.participant.initiative}return data.actor=this.actor,data.chase=this.chase,data.data=this.data,data.optionsList={},this.chase&&(data.skillsAndCharacteristicsList=this.chase.allSkillsAndCharacteristicsShort),this.actor&&(data.skillsAndCharacteristicsList=[],CoCActor.getCharacteristicDefinition().forEach((c=>data.skillsAndCharacteristicsList.push(`${c.label}`))),data.skillsAndCharacteristicsList.push(`${game.i18n.localize("CoC7.Luck")}`),data.skillsAndCharacteristicsList.push(`${game.i18n.localize("CoC7.SAN")}`),this.actor.skills.forEach((s=>data.skillsAndCharacteristicsList.push(s.name)))),data}get chase(){return this._chase||(this._chase=CoC7Utilities.SfromUuid(this.object.chaseUuid)),this._chase}get actor(){return this.object.docUuid?(this._actor||(this._actor=CoC7Utilities.getActorFromKey(this.object.docUuid)),this._actor):null}async _updateObject(event,formData){foundry.utils.mergeObject(this,formData),await this.render(!0)}async _onDropParticipant(event){const dropString=event.dataTransfer.getData("text/plain"),dropData=JSON.parse(dropString),docUuid=CoC7Utilities.getActorDocumentFromDropData(dropData);this.object.docUuid=docUuid,this.object.chaser=0===this.actor?.owners?.filter((u=>!u.isGM)).length,this.object.speedCheck.rollDataString&&delete this.object.speedCheck.rollDataString,await this.render(!0)}async addTokenToChase(tokens){1===tokens.length?(this.object.docUuid=tokens[0].document?.uuid,this.object.chaser=0===this.actor?.owners?.filter((u=>!u.isGM)).length,this.object.speedCheck.rollDataString&&delete this.object.speedCheck.rollDataString,await this.render(!0)):ui.notifications.warn(game.i18n.localize("CoC7.ErrorTokenIncorrect"))}async _onAction(event){event.preventDefault();switch(event.currentTarget.dataset.action){case"chase-cancel":this.close();break;case"chase-add":{const participant=new _participant(this.object);if(this.chase.started){if(!(participant.movementAction&&participant.movementAction>0))return void ui.notifications.warn(game.i18n.localize("CoC7.DoesNotMeetMinimumReqToBeAdded"));if(this.data.overrideMovementAction){const slowest=this.chase.slowestParticipant;isNaN(participant.adjustedMov)&&(participant.mov=slowest.adjustedMov),this.data.recalculationNeeded=!1}}await this.chase.addParticipant(participant,{locationUuid:this.object.locationUuid,recalculateMovementActions:this.data.recalculationNeeded,update:this.object.update}),this.close()}break;case"roll-speed-check":{const participant=new _participant(this.object);if(participant.speedCheck.refSet){const roll=new CoC7Check;participant.data.rolled=!0,roll.actor=participant.actor.actorKey,participant.speedCheck.isCharacteristic?(await roll.rollCharacteristic(participant.speedCheck.ref.key),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isSkill?(roll.skill=participant.speedCheck.ref,await roll.roll(),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isAttribute&&(await roll.rollAttribute(participant.speedCheck.ref.key),participant.data.speedCheck.rollDataString=roll.JSONRollString)}else if(participant.speedCheck.score){const rollData={rawValue:participant.speedCheck.score,displayName:participant.speedCheck.name,actorName:participant.name?participant.name:void 0};participant.hasActor&&(rollData.actor=participant.actor.actorKey);const roll=CoC7Check.create(rollData);await roll.roll(),participant.data.speedCheck.rollDataString=roll.JSONRollString,participant.data.rolled=!0}foundry.utils.mergeObject(this.object,participant.data),this.render(!0)}}}validateParticipant(){const participant=new _participant(this.object);if(this.data||(this.data={}),this.object.excluded=!1,this.object.escaped=!1,this.data.recalculationNeeded=!1,this.data.participantExcluded=!1,this.data.movementActionDelta=0,!this.data.overrideMovementAction){const slowestPrey=this.chase.slowestPrey,fastestChaser=this.chase.fastestChaser,slowest=this.chase.slowestParticipant;participant.adjustedMov<slowest?.adjustedMov?(this.data.recalculationNeeded=!0,participant.movementAction=1):(this.data.recalculationNeeded=!1,participant.calculateMovementActions(slowest?.adjustedMov)),participant.isChaser&&slowestPrey&&!this.chase.system.includeLastCommers&&participant.adjustedMov<slowestPrey.adjustedMov&&(this.object.excluded=!0,this.data.participantExcluded=!0,this.data.excludedBecause=game.i18n.localize("CoC7.TooSlow"),this.data.recalculationNeeded=!1),participant.isPrey&&fastestChaser&&!this.chase.system.includeEscaped&&participant.adjustedMov>fastestChaser.adjustedMov&&(this.object.escaped=!0,this.data.participantExcluded=!0,this.data.excludedBecause=game.i18n.localize("CoC7.TooFast"),this.data.recalculationNeeded=!1)}}static async create(data){if(data.dropData){const docUuid=CoC7Utilities.getActorDocumentFromDropData(data.dropData);docUuid&&(data.docUuid=docUuid),delete data.dropData}return new CoC7ChaseParticipantImporter(data).render(!0)}}class CoC7ChaseSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","item","chase"],template:"systems/CoC7/templates/items/chase.html",width:550,height:500,resizable:!0,tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"participants"}]})}static get type(){return"coc7ChaseSheet"}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(options={}){const sheetData=super.getData(options);return sheetData.participants=this.item.participantsObject,sheetData.participantsByInitiative=this.item.participantsByInitiative,sheetData.preys=this.item.preys,sheetData.chasers=this.item.chasers,sheetData.preysMinMov=sheetData.preys.length?sheetData.preys.reduce(((prev,current)=>prev.adjustedMov<current.adjustedMov?prev:current)).adjustedMov:-1,sheetData.preysMaxMov=sheetData.preys.length?sheetData.preys.reduce(((prev,current)=>prev.adjustedMov>current.adjustedMov?prev:current)).adjustedMov:-1,sheetData.chasersMinMov=sheetData.chasers.length?sheetData.chasers.reduce(((prev,current)=>prev.adjustedMov<current.adjustedMov?prev:current)).adjustedMov:-1,sheetData.chasersMaxMov=sheetData.chasers.length?sheetData.chasers.reduce(((prev,current)=>prev.adjustedMov>current.adjustedMov?prev:current)).adjustedMov:-1,sheetData.chasers.forEach((p=>{p.adjustedMov<sheetData.preysMinMov?p.tooSlow():p.includeInChase(),p.fastest=p.adjustedMov===sheetData.chasersMaxMov,p.slowest=p.adjustedMov===sheetData.chasersMinMov})),sheetData.preys.forEach((p=>{p.adjustedMov>sheetData.chasersMaxMov?p.escaped():p.includeInChase(),p.fastest=p.adjustedMov===sheetData.preysMaxMov,p.slowest=p.adjustedMov===sheetData.preysMinMov})),sheetData.locations=this.item.locations,sheetData.allHaveValidMov=this.allHaveValidMov,sheetData.activeLocation=this.item.activeLocation,sheetData.activeLocation&&(sheetData.activeLocation.title=sheetData.activeLocation.coordinates?game.i18n.format("CoC7.LocationCoordinate",{x:sheetData.activeLocation.coordinates.x,y:sheetData.activeLocation.coordinates.y}):game.i18n.localize("CoC7.DragOnCanvas")),sheetData.previousLocation=this.item.previousLocation,sheetData.nextLocation=this.item.nextLocation,sheetData.started=this.item.started,sheetData.isKeeper=game.user.isGM,sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){super.activateListeners(html),html.find(".dropdown-element").on("click",(event=>this._onDropDownElementSelected(event))),html.find(".dropbtn").click((event=>{event.preventDefault(),event.stopPropagation();event.currentTarget.closest(".dropdown").querySelector(".dropdown-content").classList.toggle("show")})),html.find(".dropdown").mouseleave((event=>event.currentTarget.querySelector(".dropdown-content").classList.remove("show"))),html.on("dblclick",".open-actor",CoC7Chat._onOpenActor.bind(this)),html.find(".pin-location").contextmenu(this.clearActiveLocationCoordinates.bind(this)),html.find(".participant").on("dragenter",(event=>this._onDragEnterParticipant(event))),html.find(".participant").on("dragover",(event=>this._onDragEnterParticipant(event))),html.find(".participant").on("dragleave",(event=>this._onDragLeaveParticipant(event))),html.find(".participant").on("drop",(event=>this._onDragLeaveParticipant(event))),html.find(".p-side").click(this._onChangeSide.bind(this)),html.find(".delete-participant").click(this._onDeleteParticipant.bind(this)),html.find(".reset-roll").click(this._onResetRoll.bind(this)),html.find(".delete-driver").click(this._onDeleteDriver.bind(this)),html.find(".new-participant").on("dragenter",(event=>this._onDragEnterParticipant(event))),html.find(".new-participant").on("dragover",(event=>this._onDragEnterParticipant(event))),html.find(".new-participant").on("dragleave",(event=>this._onDragLeaveParticipant(event))),html.find(".new-participant").on("drop",(event=>this._onDragLeaveParticipant(event))),html.find(".add-sign").click(this._onAddParticipant.bind(this)),html.find(".roll-participant").click(this._onRollParticipant.bind(this)),html.find(".button").click(this._onButtonClick.bind(this)),html.find(".name-container").click(this._onLocationClick.bind(this)),html.find(".obstacle-type").click(this._onObstacleTypeClick.bind(this)),html.find(".toggle").click(this._onToggle.bind(this)),html.find(".participant-control").click(this._onParticipantControlClicked.bind(this)),html.find(".chase-control").click(this._onChaseControlClicked.bind(this)),html.find(".location-control").click(this._onLocationControlClick.bind(this));new DragDrop({dragSelector:".pin-location",permissions:{dragstart:this._canPinLocationDragStart.bind(this)},callbacks:{dragstart:this._onPinLocationDragStart.bind(this)}}).bind(html[0]);new DragDrop({dropSelector:".participant",callbacks:{drop:this._onDropParticipant.bind(this)}}).bind(html[0]);if(new DragDrop({dropSelector:".new-participant",callbacks:{drop:this._onAddParticipant.bind(this)}}).bind(html[0]),this.item.started){html.find(".chase-location .chase-participant").click(this._onChaseParticipantClick.bind(this));new DragDrop({dragSelector:".chase-participant",dropSelector:".chase-location",permissions:{dragstart:this._canChaseParticipantDragStart.bind(this),drop:this._canChaseParticipantDragDrop.bind(this)},callbacks:{dragstart:this._onChaseParticipantDragStart.bind(this),drop:this._onChaseParticipantDragDrop.bind(this),dragover:this._onDragEnter.bind(this)}}).bind(html[0]),html.find(".chase-location").on("dragleave",(event=>this._onDragLeave(event)))}}_getSubmitData(updateData={}){let data=new FormDataExtended(this.form,{editors:this.editors}).object;if(data=updateData?foundry.utils.mergeObject(data,updateData):foundry.utils.expandObject(data),this.item.system.locations?.list?.length&&data.system.startingIndex>this.item.system.locations.list.length&&(data.system.startingIndex=this.item.system.locations.list.length),data.system.participants){const participants=foundry.utils.duplicate(this.item.system.participants);for(const[k,v]of Object.entries(data.system.participants)){const index=participants.findIndex((p=>p.uuid===k));if(-1===index)ui.notifications.error("Participant table corrupted");else{const original=participants[index],cleaned=clean(v);foundry.utils.mergeObject(original,cleaned),participants[index]=original}}data.system.participants=participants}if(data.locations){const locations=foundry.utils.duplicate(this.item.system.locations.list);for(const[key,value]of Object.entries(data.locations)){const locationIndex=locations.findIndex((l=>l.uuid===key));if(-1===locationIndex)ui.notifications.error("Locations table corrupted");else{const originalLocation=locations[locationIndex],cleaned=clean(value);foundry.utils.mergeObject(originalLocation,cleaned),locations[locationIndex]=originalLocation}}delete data.locations,data.system.locations={list:locations}}return foundry.utils.flattenObject(data)}async _updateObject(event,formData){const target=event.currentTarget,override="true"===target?.dataset?.override;if(target?.name?.includes(".hp")){const[,,uuid]=target.name.split("."),participant=this.item.getParticipant(uuid);participant&&participant.actor&&(isNaN(Number(target.value))||await participant.actor.setHp(Number(target.value)))}if(override){const[,type,uuid,subType,data]=target.name.split("."),index=this.findParticipantIndex(uuid);if("participants"===type&&!isNaN(index)&&"speed-check"===subType&&"name"===data){const participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];return participants[index].speedCheck?(delete participants[index].speedCheck.id,delete participants[index].speedCheck.type):participants[index].speedCheck={},participants[index].speedCheck.name=target.value,void await this.item.update({"system.participants":participants})}}super._updateObject(event,formData)}static async setScroll(app,html,data){if(!data.editable)return;const initialOpening=html[0].classList.contains("window-app"),chaseTrack=html[0].querySelector(".chase-track");if(!chaseTrack)return;let start=data.data.scroll?.chaseTrack.from,end=data.data.scroll?.chaseTrack.to;if(void 0===start&&(start=0),void 0===end&&(end=-1),initialOpening){const remString=$(":root").css("font-size"),remSize=Number(remString.replace("px",""));if(app.item.started){const pCount=app.item.actualParticipants?.length,width=(11.2*pCount+3)*remSize;app.activateTab("setup"),app.position.width=Math.max(width,40*remSize)}else app.position.width=45*remSize;return await app.item.activateNextParticipantTurn({html})}start&&-1!==start&&chaseTrack.scrollTo({top:0,left:start,behavior:"instant"}),-1!==end&&chaseTrack.scrollTo({top:0,left:end,behavior:"smooth"})}static onClose(app,html){app.item.update({"system.trackScrollPosition":-1})}findParticipantIndex(uuid){return this.item.system.participants.findIndex((p=>p.uuid===uuid))}findLocationIndex(uuid){return this.item.system.locations.list.findIndex((p=>p.uuid===uuid))}findLocation(uuid){return this.item.system.locations.list.find((p=>p.uuid===uuid))}findIndex(list,uuid){return list.findIndex((p=>p.uuid===uuid))}async _onDropDownElementSelected(event){event.preventDefault(),event.stopPropagation();const target=event.currentTarget;target.closest(".dropdown-content")?.classList.toggle("show");const assistantUuid=target.closest(".initiative-block")?.dataset?.uuid,beneficiaryUuid=target.dataset.beneficiaryUuid;await this.item.assistParticipant(assistantUuid,beneficiaryUuid)}async _onToggle(event){const target=event.currentTarget,toggle=target.getAttribute("toggle"),data=foundry.utils.expandObject({[toggle]:!target.classList.contains("switched-on")});if(data.locations){const locations=foundry.utils.duplicate(this.item.system.locations.list);for(const[key,value]of Object.entries(data.locations)){const locationIndex=locations.findIndex((l=>l.uuid===key));if(-1===locationIndex)ui.notifications.error("Locations table corrupted");else{const originalLocation=locations[locationIndex],cleaned=clean(value);foundry.utils.mergeObject(originalLocation,cleaned),locations[locationIndex]=originalLocation}}await this.item.updateLocationsList(locations)}}async _onObstacleTypeClick(event){const target=event.currentTarget,uuid=target.closest(".obstacle").dataset.uuid,locations=foundry.utils.duplicate(this.item.system.locations.list),locationIndex=this.findIndex(locations,uuid);locations[locationIndex].obstacleDetails||(locations[locationIndex].obstacleDetails={});const obstacle=locations[locationIndex].obstacleDetails,type=target.classList.contains("barrier")?"barrier":"hazard",active=obstacle[type];obstacle.barrier=!1,obstacle.hazard=!1,obstacle[type]=!active,locations[locationIndex].obstacle=!active,await this.item.updateLocationsList(locations)}async _onLocationClick(event){const lUuid=event.currentTarget.closest(".chase-location").dataset.uuid;await this.item.activateLocation(lUuid)}async _onLocationControlClick(event){event.preventDefault();const target=event.currentTarget;if(target.classList.contains("inactive"))return;const action=target.dataset.action,lUuid=target.closest(".chase-location").dataset.uuid;switch(action){case"remove":await this.item.removeLocation(lUuid);break;case"add-after":await this.item.insertLocation(lUuid,{shift:1});break;case"add-before":await this.item.insertLocation(lUuid,{shift:0});break;case"add-participant":CoC7ChaseParticipantImporter.create({chaseUuid:this.item.uuid,locationUuid:lUuid,dropData:{}})}}async _onChaseParticipantClick(event){const pUuid=event.currentTarget.dataset?.uuid;await this.item.activateParticipant(pUuid)}async _onParticipantControlClicked(event){event.preventDefault();const target=event.currentTarget;if(target.classList.contains("inactive"))return;if(target.classList.contains("dropdown"))return;event.stopPropagation();const participantUuid=target.closest(".initiative-block")?.dataset?.uuid;if(participantUuid){switch(target.dataset.action){case"drawGun":await this.toggleParticipantGun(participantUuid);break;case"decreaseActions":await this._onChangeMovementActions(-1,event);break;case"increaseActions":await this._onChangeMovementActions(1,event);break;case"moveBackward":await this.item.moveParticipant(participantUuid,-1,{render:!0});break;case"moveForward":await this.item.moveParticipant(participantUuid,1,{render:!0});break;case"activateParticipant":return await this.item.activateParticipant(participantUuid);case"bonusDice":{const diceNumber=target.dataset.count;await this.item.toggleBonusDice(participantUuid,diceNumber),this.item.activateNextParticipantTurn()}break;case"cautiousApproach":await this.item.cautiousApproach(participantUuid);break;case"editParticipant":{const participant=this.item.getParticipant(participantUuid),location=this.item.getParticipantLocation(participantUuid);participant.data.chaseUuid=this.item.uuid,participant.data.locationUuid=location.uuid,participant.data.update=!0,CoC7ChaseParticipantImporter.create(participant.data)}break;case"removeParticipant":await this.item.removeParticipant(participantUuid)}this.item.activateNextParticipantTurn()}}async _onChaseControlClicked(event){event.preventDefault();const target=event.currentTarget;event.stopPropagation();const locationUuid=target.closest(".obstacle")?.dataset?.uuid;if(locationUuid)return"obstacle-skill-check"===target.dataset.action?this.item.activeParticipantObstacleCheck(locationUuid):void 0}async _onChangeMovementActions(count,event){event.preventDefault(),event.stopPropagation();const target=event.currentTarget,participantUuid=target.closest(".initiative-block")?.dataset?.uuid;if(!participantUuid)return;const participants=this.item.participants,participant=participants.find((p=>participantUuid===p.uuid));participant.hasMaxMvtActions&&count>0||(participant.alterMovementActions(count),await this.item.setchaseTrackScroll({render:!1}),await this.item.updateParticipants(participants))}async _onButtonClick(event){const target=event.currentTarget,action=target.dataset?.action;if(action)switch(action){case"init":if(!isNaN(this.item.system.locations.total)&&this.item.system.locations.total>0){const locations=Array.apply(null,Array(this.item.system.locations.total)).map((function(){return{uuid:foundry.utils.randomID(16)}}));locations[0].name="Start",locations.length>1&&(locations[locations.length-1].name="End"),await this.item.updateLocationsList(locations)}break;case"reset":Dialog.confirm({title:`${game.i18n.localize("CoC7.ConfirmResetChase")}`,content:`<p>${game.i18n.localize("CoC7.ConfirmResetChaseHint")}</p>`,yes:async()=>{await this.item.updateLocationsList([]),await this.item.stop()}});break;case"cut2chase":this.item.allHaveSpeedRoll?Dialog.confirm({title:`${game.i18n.localize("CoC7.ConfirmCut2Chase")}`,content:`<p>${game.i18n.localize("CoC7.ConfirmCut2ChaseHint")}</p>`,yes:()=>this.item.cutToTheChase()}):ui.notifications.warn(game.i18n.localize("CoC7.NotAllHaveSpeedRoll"));break;case"restart":Dialog.confirm({title:`${game.i18n.localize("CoC7.ConfirmRestartChase")}`,content:`<p>${game.i18n.localize("CoC7.ConfirmRestartChaseHint")}</p>`,yes:()=>this.item.restart()});break;case"nextRound":this.item.nextActiveParticipant?Dialog.confirm({title:`${game.i18n.localize("CoC7.ConfirmNextChaseRound")}`,content:`<p>${game.i18n.localize("CoC7.ConfirmNextChaseRoundHint")}</p>`,yes:()=>this.item.progressToNextRound()}):this.item.progressToNextRound()}}_canPinLocationDragStart(selector){return!!game.user.isGM}async _onPinLocationDragStart(event){const a=event.currentTarget,i=a.querySelector("i.icon"),dragIcon=a.querySelector(".pin-image");event.dataTransfer.setDragImage(dragIcon,0,dragIcon.height);const locationElement=a.closest(".chase-location"),data={type:"locator",CoC7Type:"chase"};data.icon=i.dataset.linkIcon,data.locationUuid=locationElement.dataset.uuid,data.docUuid=this.item.uuid,data.callBack="locatorDropped",event.dataTransfer.setData("text/plain",JSON.stringify(data))}_canChaseParticipantDragStart(selector){return!!game.user.isGM}_canChaseParticipantDragDrop(selector){return!!game.user.isGM}async _onChaseParticipantDragStart(dragEvent){const dragData={uuid:dragEvent.currentTarget.dataset.uuid,type:"participant"};dragEvent.dataTransfer.setData("text/plain",JSON.stringify(dragData))}async _onChaseParticipantDragDrop(dragEvent){const dataString=dragEvent.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);this._onDragLeave(dragEvent);const locationUuid=dragEvent.currentTarget.dataset.uuid;if("participant"===data.type){const oldLocation=this.findLocation(locationUuid);if(oldLocation&&oldLocation.participants?.includes(data.uuid))return;await this.item.setchaseTrackScroll({render:!1}),await this.item.moveParticipantToLocation(data.uuid,locationUuid)}else CoC7ChaseParticipantImporter.create({chaseUuid:this.item.uuid,locationUuid,dropData:data})}_onDragOver(dragEvent){this._onDragEnter(dragEvent)}_onDragEnter(dragEvent){dragEvent.currentTarget.classList.add("drag-over")}_onDragLeave(dragEvent){const target=dragEvent.currentTarget;target.classList?.remove("drag-over")}async _onDropParticipant(event){const target=event.currentTarget,uuid=target.dataset?.uuid,dataString=event.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);await this.alterParticipant(data,uuid)}async _onAddParticipant(event){event.preventDefault();const data={chaseUuid:this.item.uuid};if(event.dataTransfer){const dataString=event.dataTransfer.getData("text/plain");data.dropData=JSON.parse(dataString)}CoC7ChaseParticipantImporter.create(data)}async _onRollParticipant(event){const uuid=event.currentTarget.closest(".participant").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[],participant=new _participant(participants[index]);if(participant.speedCheck.refSet){const roll=new CoC7Check;roll.parent=this.item.uuid,participant.data.rolled=!0,participant.data.rollUuid=roll.uuid,roll.actor=participant.actor.actorKey,!event.shiftKey&&participant.actor.player&&(roll.standby=!0,roll.standbyText="CoC7.Chase",roll.standbyRightIcon="systems/CoC7/assets/icons/running-solid.svg"),participant.speedCheck.isCharacteristic?(await roll.rollCharacteristic(participant.speedCheck.ref.key),await roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isSkill?(roll.skill=participant.speedCheck.ref,await roll.roll(),await roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isAttribute&&(await roll.rollAttribute(participant.speedCheck.ref.key),await roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString)}else if(participant.speedCheck.score){const rollData={rawValue:participant.speedCheck.score,displayName:participant.speedCheck.name,actorName:participant.name?participant.name:void 0};participant.hasActor&&(rollData.actor=participant.actor.actorKey);const roll=CoC7Check.create(rollData);roll.parent=this.item.uuid,await roll.roll(),await roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString,participant.data.rolled=!0,participant.data.rollUuid=roll.uuid}await this.item.update({"data.participants":participants})}_onDragEnterParticipant(event){event.currentTarget.classList.add("drag-over")}_onDragLeaveParticipant(event){event.currentTarget.classList.remove("drag-over")}async _onChangeSide(event){const uuid=event.currentTarget.closest(".participant").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];participants[index].chaser=!participants[index].chaser,await this.item.update({"data.participants":participants})}async _onDeleteDriver(event){const uuid=event.currentTarget.closest(".driver").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];delete participants[index].docUuid,await this.item.update({"data.participants":participants})}async _onDeleteParticipant(event){const uuid=event.currentTarget.closest(".participant").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];participants.splice(index,1),await this.item.update({"data.participants":participants})}async _onResetRoll(event){const uuid=event.currentTarget.closest(".participant").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];delete participants[index].speedCheck.rollDataString,await this.item.update({"data.participants":participants})}async alterParticipant(data,uuid){let docUuid,actor;docUuid=data.tokenUuid?data.tokenUuid:data.sceneId&&data.tokenId?`Scene.${data.sceneId}.Token.${data.tokenId}`:data.actorId||data.actorKey||data.id,"Token"===data.type?docUuid=data.uuid:docUuid&&(actor=chatHelper.getActorFromKey(docUuid),actor||"Item"!==data.type||(docUuid=null)),actor&&docUuid!==actor.uuid&&(docUuid=actor.uuid);const participant={};switch(docUuid&&(participant.docUuid=docUuid),data.type?.toLowerCase()){case"actor":default:break;case"item":participant.speedCheck={id:data.data?._id||data.id,type:"item"};break;case"characteristic":participant.speedCheck={id:data.name,type:"characteristic"};break;case"attribute":participant.speedCheck={id:data.name,type:"attribute"}}const participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[],oldParticipant=participants[this.findParticipantIndex(uuid)];oldParticipant.mov&&delete oldParticipant.mov,foundry.utils.mergeObject(oldParticipant,participant),await this.item.update({"data.participants":participants})}async clearActiveLocationCoordinates(){await this.item.clearActiveLocationCoordinates()}async addParticipant(data){let docUuid,actor;docUuid=data.tokenUuid?data.tokenUuid:data.sceneId&&data.tokenId?`Scene.${data.sceneId}.Token.${data.tokenId}`:data.actorId||data.actorKey||data.id,"Token"===data.type?docUuid=data.uuid:docUuid&&(actor=chatHelper.getActorFromKey(docUuid),actor||"Item"!==data.type||(docUuid=null)),actor&&docUuid!==actor.uuid&&(docUuid=actor.uuid);const participant={};switch(docUuid&&(participant.docUuid=docUuid),data.type?.toLowerCase()){case"actor":default:break;case"item":if(data.id){const item=game.items.get(data.id);if("skill"!==item?.data?.type)return}participant.speedCheck={id:data.data?._id||data.id,type:"item"};break;case"characteristic":participant.speedCheck={id:data.name,type:"characteristic"};break;case"attribute":participant.speedCheck={id:data.name,type:"attribute"}}participant.speedCheck||(this.item.system.vehicle?participant.speedCheck={type:"item",name:game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.drive-auto")}:participant.speedCheck={id:"con",type:"characteristic",name:game.i18n.localize("CHARAC.Constitution")});const participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];let unique=!1;for(;!unique;)participant.uuid=foundry.utils.randomID(16),unique=0===participants.filter((p=>p.uuid===participant.uuid)).length;participants.push(participant),await this.item.update({"data.participants":participants})}async toggleParticipantGun(participantUuid){const participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[],participant=participants.find((p=>participantUuid===p.uuid));participant&&(participant.hasAGunReady=!participant.hasAGunReady,await this.item.setchaseTrackScroll({render:!1}),await this.item.updateParticipants(participants))}}function clean(obj){for(const propName in obj){const tp=foundry.utils.getType(obj[propName]);"Object"===tp&&(obj[propName]=clean(obj[propName])),("Object"!==tp||Object.entries(obj[propName]).length)&&("string"!==tp||obj[propName].length)?"string"!==tp||isNaN(Number(obj[propName]))||(obj[propName]=Number(obj[propName])):obj[propName]=null}return obj}class CoC7ItemSheetV2 extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","item"],template:"systems/CoC7/templates/items/item-sheetV2.html",width:500,height:450,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(options={}){const sheetData=super.getData(options);return sheetData.effects=CoC7ActiveEffect.prepareActiveEffectCategories(this.item.effects,{status:!1}),sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}activateListeners(html){super.activateListeners(html),this.options.editable&&html.find(".effect-control").click((ev=>CoC7ActiveEffect.onManageActiveEffect(ev,this.item)))}}class CoC7ItemSheet extends CoC7ItemSheetV2{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{width:525,height:506})}}class CoC7JournalSheet extends JournalSheet{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7MacroConfig extends MacroConfig{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7PlaylistConfig extends PlaylistConfig{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7RollTableConfig extends RollTableConfig{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7SceneConfig extends SceneConfig{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7SetupSheet extends ItemSheet{activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"items"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"items"))),html.find(".add-bio").click((async()=>await this._onAddBio())),html.find(".remove-section").click(this._onRemoveSection.bind(this)),html.find(".toggle-switch").click(this._onClickToggle.bind(this)),html.find(".add-monetary").click(this._onAddMonetary.bind(this)),html.find(".remove-monetary").click(this._onRemoveMonetary.bind(this)))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.dataset.property;await this.item.toggleProperty(propertyId,isCtrlKey(event))}async _onDrop(event,collectionName="items"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");let useCoCID=0;const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];for(const item of dataList)item&&item.system&&["item","weapon","skill","book","spell"].includes(item.type)&&(!CoC7Item.isAnySpec(item)&&collection.find((el=>el.name===item.name))||(0===useCoCID&&(useCoCID=await DropCoCID.create()),collection.push(DropCoCID.processItem(useCoCID,item))));await this.item.update({[`system.${collectionName}`]:collection})}async _onRemoveSection(event){const div=event.currentTarget.closest(".item"),bio=foundry.utils.duplicate(this.item.system.bioSections);bio.splice(Number(div.dataset.index),1),await this.item.update({"system.bioSections":bio})}async _onAddBio(){const bio=this.item.system.bioSections?foundry.utils.duplicate(this.item.system.bioSections):[];bio.push(null),await this.item.update({"system.bioSections":bio})}_onAddMonetary(){const values=this.item.system.monetary.values?foundry.utils.duplicate(this.item.system.monetary.values):[];values.push({name:"",min:null,max:null,cashType:0,cashValue:"",assetsType:0,assetsValue:"",spendingType:0,spendingValue:""}),this.item.update({"system.monetary.values":values})}_onRemoveMonetary(event){const div=event.currentTarget.closest(".item"),values=foundry.utils.duplicate(this.item.system.monetary.values);values.splice(Number(div.dataset.index),1),this.item.update({"system.monetary.values":values})}async _onItemSummary(event,collectionName="items"){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.item.system[collectionName].find((s=>s._id===li.data("item-id")));if(!item)return;const chatData=await TextEditor.enrichHTML(item.system.description.value,{async:!0,secrets:this.item.editable});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const item=$(event.currentTarget).closest(".item"),itemId=item.data("item-id"),CoCId=item.data("cocid"),itemIndex=this.item.system[collectionName].findIndex((i=>itemId&&i._id===itemId||CoCId&&i===CoCId));if(itemIndex>-1){const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`system.${collectionName}`]:collection})}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","setup"],template:"systems/CoC7/templates/items/setup.html",width:565,height:530,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.hasOwner=!0===this.item.isEmbedded;const era=Object.entries(this.item.flags?.CoC7?.cocidFlag?.eras??{}).filter((e=>e[1])).map((e=>e[0])),items=await game.system.api.cocid.expandItemArray({itemList:this.item.system.items,era:void 0===era[0]||era[0]});sheetData.skills=items.filter((it=>"skill"===it.type)),sheetData.otherItems=items.filter((it=>"skill"!==it.type)),sheetData.skillListEmpty=0===sheetData.skills.length,sheetData.itemsListEmpty=0===sheetData.otherItems.length,sheetData.skills.sort(CoC7Utilities.sortByNameKey),sheetData._eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData._eras.push({id:key,name:game.i18n.localize(value),isEnabled:!0===(this.item.flags?.CoC7?.cocidFlag?.eras??{})[key]});sheetData._eras.sort(CoC7Utilities.sortByNameKey),sheetData._monetaryFormats=[];for(const key in COC7.monetaryFormats)sheetData._monetaryFormats.push({key,val:game.i18n.localize(COC7.monetaryFormats[key])});sheetData.showCurrencySymbol=["decimalLeft","decimalRight","integerLeft","integerRight"].includes(sheetData.data.system.monetary.format),sheetData._monetaryTypes=[];for(const key in COC7.monetaryTypes)(0===COC7.monetaryTypes[key].filter.length||COC7.monetaryTypes[key].filter.includes(sheetData.data.system.monetary.format))&&sheetData._monetaryTypes.push({key,val:game.i18n.localize(COC7.monetaryTypes[key].name)});return sheetData.oneBlockBackStory=game.settings.get("CoC7","oneBlockBackstory"),sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.enrichedBackstory=await TextEditor.enrichHTML(sheetData.data.system.backstory,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}_updateObject(event,formData){const system=foundry.utils.expandObject(formData)?.system;system.bioSections&&(formData["system.bioSections"]=Object.values(system.bioSections||[])),system.monetary.values&&(formData["system.monetary.values"]=Object.values(system.monetary.values||[])),"system.characteristics.points.enabled"===event.currentTarget?.name&&(formData["system.characteristics.rolls.enabled"]=!event.currentTarget.checked),"system.characteristics.rolls.enabled"===event.currentTarget?.name&&(formData["system.characteristics.points.enabled"]=!event.currentTarget.checked),super._updateObject(event,formData)}}class CoC7SkillSheet extends ItemSheet{constructor(...args){super(...args),this._sheetTab="items"}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","item"],width:520,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}get template(){return`systems/CoC7/templates/items/${this.item.type}-sheet.html`}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.hadNonCharacterOwner=sheetData.hasOwner&&"character"!==this.actor?.type,sheetData.effects=CoC7ActiveEffect.prepareActiveEffectCategories(this.item.effects),sheetData._properties=[];for(const[key,value]of Object.entries(COC7.skillProperties))sheetData._properties.push({id:key,name:value,isEnabled:!0===this.item.system.properties[key]});sheetData._eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData._eras.push({id:key,name:game.i18n.localize(value),isEnabled:!0===(this.item.flags?.CoC7?.cocidFlag?.eras??{})[key]});return sheetData._eras.sort(CoC7Utilities.sortByNameKey),sheetData.isSpecialized=this.item.system.properties.special,sheetData.canModifySpec=!this.item.system.properties.firearm&&!this.item.system.properties.fighting,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}activateListeners(html){super.activateListeners(html),this.options.editable&&html.find(".toggle-switch").click(this._onClickToggle.bind(this))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.closest(".toggle-switch").dataset.property;await this.item.toggleProperty(propertyId,isCtrlKey(event))}async _updateObject(event,formData){const skillName=formData["system.skillName"]||this.item.system.skillName;if(this.item.system.properties?.special){const specialization=formData["system.specialization"]||this.item.system.specialization;formData.name=specialization+" ("+skillName+")"}else formData.name=skillName;return super._updateObject(event,formData)}}class CoC7SpellSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{template:"systems/CoC7/templates/items/spell/main.html",classes:["coc7","item","spell"],width:500,height:"auto",resizable:!1,scrollY:[".body"],tabs:[{navSelector:".navigation",contentSelector:".body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();return sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.isKeeper=game.user.isGM,sheetData.isOwner=this.item.isOwner,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){super.activateListeners(html),html.find(".option").click((event=>this.modifyType(event))),html.find("#cast-spell").click((event=>{event.preventDefault(),this.item.cast()}))}modifyType(event){event.preventDefault(),event.stopPropagation();return $(event.currentTarget).prev().trigger("click")}}class CoC7StatusSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","status"],template:"systems/CoC7/templates/items/status.html",width:525,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}activateListeners(html){super.activateListeners(html),html.find(".effect-control").click((ev=>CoC7ActiveEffect.onManageActiveEffect(ev,this.item)))}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.effects=CoC7ActiveEffect.prepareActiveEffectCategories(this.item.effects,{status:!1}),sheetData.itemProperties=[];for(const[key,value]of Object.entries(this.item.system.type))value&&sheetData.itemProperties.push(COC7.statusType[key]?COC7.statusType[key]:null);return sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionNotes=await TextEditor.enrichHTML(sheetData.data.system.description.notes,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}}class CoC7TalentSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","talent"],template:"systems/CoC7/templates/items/talent.html",width:525,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.itemProperties=[];for(const[key,value]of Object.entries(this.item.system.type))value&&sheetData.itemProperties.push(COC7.talentType[key]?COC7.talentType[key]:null);return sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionNotes=await TextEditor.enrichHTML(sheetData.data.system.description.notes,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}}class CoC7VehicleSheet extends CoC7ActorSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","actor","item","vehicle"],width:555,height:420,resizable:!0,template:"systems/CoC7/templates/actors/vehicle.html",dragDrop:[{dragSelector:".actor",dropSelector:".dropZone"}],tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"description"}]})}async getData(){const sheetData=await super.getData();sheetData.properties=[],this.actor.system.properties.armed&&sheetData.properties.push(game.i18n.localize("CoC7.ArmedVehicle"));const expanded=this.actor.getFlag("CoC7","expanded");return sheetData.expanded=void 0===expanded||expanded,sheetData.expanded?sheetData.options.height=420:sheetData.options.height="auto",sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionNotes=await TextEditor.enrichHTML(sheetData.data.system.description.notes,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){super.activateListeners(html),html.find(".add-armor").click((async()=>await this._onAddArmor())),html.find(".remove-armor").click((async event=>await this._onRemoveArmor(event))),html.find(".expand-button").click(this._onToggleExpand.bind(this))}async _onToggleExpand(){const expanded=this.actor.getFlag("CoC7","expanded");expanded?(this.oldSize=this.position.height,this.position.height="auto"):this.position.height=this.oldSize||420,await this.actor.setFlag("CoC7","expanded",!expanded)}async _onAddArmor(){const locations=foundry.utils.duplicate(this.actor.system.attribs.armor.locations||[]);locations.push({name:null,value:null}),await this.actor.update({"system.attribs.armor.locations":locations})}async _onRemoveArmor(event){const index=event.currentTarget.closest(".armor").dataset.index,locations=foundry.utils.duplicate(this.actor.system.attribs.armor.locations||null);locations&&(locations.splice(index,1),await this.actor.update({"system.attribs.armor.locations":locations}))}onCloseSheet(){super.onCloseSheet()}_updateObject(event,formData){const system=foundry.utils.expandObject(formData)?.system;system.attribs.armor.locations&&(formData["system.attribs.armor.locations"]=Object.values(system.attribs.armor.locations||[])),super._updateObject(event,formData)}}class CoC7WeaponSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","item"],width:545,height:480,tabs:[{navSelector:".sheet-tabs",contentSelector:".sheet-body",initial:"skills"}]})}get template(){return"systems/CoC7/templates/items/weapon-sheet.html"}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.combatSkill=[],sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.hasOwner&&(sheetData.firearmSkills=this.actor.firearmSkills,sheetData.fightingSkills=this.actor.fightingSkills,sheetData.combatSkill=this.item.actor.items.filter((item=>!("skill"!==item.type||!item.system.properties.combat))),sheetData.combatSkill.sort(CoC7Utilities.sortByNameKey)),sheetData._properties=[];for(const[key,value]of Object.entries(COC7.weaponProperties))sheetData._properties.push({id:key,name:value,isEnabled:!0===this.item.system.properties[key]});sheetData._eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData._eras.push({price:this.item.system.price[key]??0,id:key,name:game.i18n.localize(value),isEnabled:!0===(this.item.flags?.CoC7?.cocidFlag?.eras??{})[key]});return sheetData._eras.sort(CoC7Utilities.sortByNameKey),sheetData.usesAlternateSkill=!0===this.item.system.properties.auto||!0===this.item.system.properties.brst||!0===this.item.system.properties.thrown,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionSpecial=await TextEditor.enrichHTML(sheetData.data.system.description.special,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".toggle-switch").click(this._onClickToggle.bind(this)),html.find(".weapon-property").click(this._onPropertyClick.bind(this)))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.closest(".toggle-switch").dataset.property;await this.item.toggleProperty(propertyId,isCtrlKey(event))}async _onPropertyClick(event){event.preventDefault();const propertyId=event.currentTarget.closest(".weapon-property").dataset.property;await this.item.toggleProperty(propertyId)}}async function performFilter(e){const appId=e.currentTarget.name.replace(/^coc7[^0-9]+(\d+)$/,"$1"),app=$("div.app[data-appid="+appId+"]"),type=app.find("select[name=coc7type"+appId+"]").val(),name=app.find("input[name=search]").val(),eraElement=app.find("select[name=coc7era"+appId+"]");let era="";switch(type){case"setup":case"skill":case"weapon":eraElement.closest("div.era_select").show(),era=eraElement.val();break;default:eraElement.closest("div.era_select").hide()}const items=await(game.packs.get(app.data("packId"))?.getDocuments());if(void 0===items)return;const show=[],nameFilter=new RegExp(RegExp.escape(name),"i");for(const[,item]of Object.entries(items)){let filter=!0;if(filter&&""!==name&&(filter=item.name.match(nameFilter)),filter&&""!==type&&(filter=item.type===type),filter&&""!==era){const eras=item.flags?.CoC7?.cocidFlag?.eras;eras&&Object.keys(eras).length>0&&!eras[era]&&(filter=!1)}filter&&show.push(item.id)}app.find("ol.directory-list li").each((function(){this.style.display=show.includes(this.dataset.documentId)?"flex":"none"}))}class CoCID{static init(){CONFIG.Actor.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Item.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Item.compendiumIndexFields.push("system.base"),CONFIG.Item.compendiumIndexFields.push("system.properties"),CONFIG.JournalEntry.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Macro.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Playlist.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.RollTable.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Scene.compendiumIndexFields.push("flags.CoC7.cocidFlag"),game.system.api={cocid:CoCID}}static regExKey(){return new RegExp("^("+Object.keys(CoCID.gamePropertyLookup).join("|")+")\\.(.*?)\\.(.+)$")}static getPrefix(document){for(const type in CoCID.documentNameLookup)if(document instanceof CoCID.documentNameLookup[type])return type+"."+(document.type??"")+".";return""}static guessId(document){return CoCID.getPrefix(document)+CoC7Utilities.toKebabCase(document.name)}static guessGroupFromKey(id){if(id){const key=id.replace(/([^\\.-]+)$/,"");if("-"===key.substr(-1))return key}return""}static guessGroupFromDocument(document){return CoCID.guessGroupFromKey(document.flags?.CoC7?.cocidFlag?.id)}static eraText(era){return!1===era?game.i18n.localize("CoC7.Any"):(!0===era&&(era=game.settings.get("CoC7","worldEra")),game.i18n.format(COC7.eras[era]??"CoC7.CoCIDFlag.error.unknown-era",{era}))}static async expandItemArray({itemList,lang=game.i18n.lang,era=!0,langFallback=!0,showLoading=!1}={}){let items=[];const cocids=itemList.filter((it=>"string"==typeof it));if(items=itemList.filter((it=>"string"!=typeof it)),cocids.length){const found=await CoCID.fromCoCIDRegexBest({cocidRegExp:CoCID.makeGroupRegEx(cocids),type:"i",lang,era,langFallback,showLoading}),all=[];for(const cocid of cocids){const item=found.find((i=>i.flags.CoC7.cocidFlag.id===cocid));item&&all.push(item)}if(all.length<cocids.length){const notmissing=[];for(const doc of all)notmissing.push(doc.flags.CoC7.cocidFlag.id);!0===era&&(era=game.settings.get("CoC7","worldEra")),ui.notifications.warn(game.i18n.format("CoC7.CoCIDFlag.error.documents-not-found",{cocids:cocids.filter((x=>!notmissing.includes(x))).join(", "),lang,era:CoCID.eraText(era)}))}items=items.concat(all)}return items}static findCocIdInList(cocid,list){let itemName="";const CoCIDKeys=foundry.utils.flattenObject(game.i18n.translations.CoC7.CoCIDFlag.keys);return void 0!==CoCIDKeys[cocid]&&(itemName=CoCIDKeys[cocid]),(void 0===list.filter?Object.values(list):list).filter((i=>i.flags?.CoC7?.cocidFlag?.id===cocid||""!==itemName&&itemName===i.name))}static makeGroupRegEx(cocids){if("string"==typeof cocids)cocids=[cocids];else if(void 0===cocids||"function"!=typeof cocids.filter)return;const splits={},rgx=CoCID.regExKey();for(const i of cocids){const key=i.match(rgx);key&&(void 0===splits[key[1]]&&(splits[key[1]]={}),void 0===splits[key[1]][key[2]]&&(splits[key[1]][key[2]]=[]),splits[key[1]][key[2]].push(key[3]))}const regExParts=[];for(const t in splits){const row=[];for(const s in splits[t])splits[t][s].length>1?row.push(s+"\\.("+splits[t][s].join("|")+")"):row.push(s+"\\."+splits[t][s].join(""));row.length>1?regExParts.push(t+"\\.("+row.join("|")+")"):regExParts.push(t+"\\."+row.join(""))}return regExParts.length>1?new RegExp("^("+regExParts.join("|")+")$"):new RegExp("^"+regExParts.join("")+"$")}static async fromCoCIDRegexAll({cocidRegExp,type,lang=game.i18n.lang,era=!1,scope="match",langFallback=!0,showLoading=!1}={}){if(!cocidRegExp)return[];const result=[];let count=0;if(showLoading&&(["match","all","world"].includes(scope)&&count++,["match","all","compendiums"].includes(scope)&&(count+=game.packs.size)),["match","all","world"].includes(scope)){const worldDocuments=await CoCID.documentsFromWorld({cocidRegExp,type,lang,era,langFallback,progressBar:count});if("match"===scope&&worldDocuments.length)return showLoading&&SceneNavigation.displayProgressBar({label:game.i18n.localize("SETUP.PackagesLoading"),pct:100}),this.filterAllCoCID(worldDocuments,langFallback&&"en"!==lang);result.splice(0,0,...worldDocuments)}if(["match","all","compendiums"].includes(scope)){const compendiaDocuments=await CoCID.documentsFromCompendia({cocidRegExp,type,lang,era,langFallback,progressBar:count});result.splice(result.length,0,...compendiaDocuments)}return showLoading&&SceneNavigation.displayProgressBar({label:game.i18n.localize("SETUP.PackagesLoading"),pct:100}),this.filterAllCoCID(result,langFallback&&"en"!==lang)}static async fromCoCIDAll({cocid,lang=game.i18n.lang,era=!1,scope="match",langFallback=!0,showLoading=!1}={}){if(!cocid||"string"!=typeof cocid)return[];const parts=cocid.match(CoCID.regExKey());return parts?(""===lang&&(lang=game.i18n.lang),CoCID.fromCoCIDRegexAll({cocidRegExp:new RegExp("^"+CoC7Utilities.quoteRegExp(cocid)+"$"),type:parts[1],lang,era,scope,langFallback,showLoading})):[]}static async fromCoCIDRegexBest({cocidRegExp,type,lang=game.i18n.lang,era=!0,langFallback=!0,showLoading=!1}={}){if(!1===era)return ui.notifications.error(game.i18n.format("CoC7.CoCIDFlag.error.unknown-era",{era:game.i18n.localize("CoC7.Any")})),[];const allDocuments=await this.fromCoCIDRegexAll({cocidRegExp,type,lang,era,scope:"all",langFallback,showLoading});return this.filterBestCoCID(allDocuments)}static fromCoCID(cocid,lang=game.i18n.lang,era=!0,langFallback=!0){return!1===era?(ui.notifications.error(game.i18n.format("CoC7.CoCIDFlag.error.unknown-era",{era:game.i18n.localize("CoC7.Any")})),[]):CoCID.fromCoCIDBest({cocid,lang,era,langFallback})}static fromCoCIDBest({cocid,lang=game.i18n.lang,era=!0,langFallback=!0,showLoading=!1}={}){if(!cocid||"string"!=typeof cocid)return[];if(!1===era)return ui.notifications.error(game.i18n.format("CoC7.CoCIDFlag.error.unknown-era",{era:game.i18n.localize("CoC7.Any")})),[];const type=cocid.split(".")[0],cocidRegExp=new RegExp("^"+CoC7Utilities.quoteRegExp(cocid)+"$");return CoCID.fromCoCIDRegexBest({cocidRegExp,type,lang,era,langFallback,showLoading})}static filterBestCoCID(documents){const bestMatchDocuments=new Map;for(const doc of documents){const docCoCID=doc.getFlag("CoC7","cocidFlag")?.id;if(docCoCID){const currentDoc=bestMatchDocuments.get(docCoCID);if(void 0===currentDoc){bestMatchDocuments.set(docCoCID,doc);continue}if(!(""===(doc.pack??"")||""!==(currentDoc?.pack??"")))continue;let docPriority=parseInt(doc.getFlag("CoC7","cocidFlag")?.priority??Number.MIN_SAFE_INTEGER,10);docPriority=isNaN(docPriority)?Number.MIN_SAFE_INTEGER:docPriority;let existingPriority=parseInt(currentDoc.getFlag("CoC7","cocidFlag")?.priority??Number.MIN_SAFE_INTEGER,10);existingPriority=isNaN(existingPriority)?Number.MIN_SAFE_INTEGER:existingPriority;if(!(docPriority>=existingPriority))continue;bestMatchDocuments.set(docCoCID,doc)}}return[...bestMatchDocuments.values()]}static filterAllCoCID(documents,langFallback){if(!langFallback)return documents;const bestMatchDocuments=new Map;for(const doc of documents){const docCoCID=doc.getFlag("CoC7","cocidFlag")?.id;if(docCoCID){const docEras=Object.entries(doc.getFlag("CoC7","cocidFlag")?.eras??{}).filter((e=>e[1])).map((e=>e[0])).sort().join("/");let docPriority=parseInt(doc.getFlag("CoC7","cocidFlag")?.priority??Number.MIN_SAFE_INTEGER,10);docPriority=isNaN(docPriority)?Number.MIN_SAFE_INTEGER:docPriority;const key=docCoCID+"/"+docEras+"/"+(isNaN(docPriority)?Number.MIN_SAFE_INTEGER:docPriority),currentDoc=bestMatchDocuments.get(key);if(void 0===currentDoc){bestMatchDocuments.set(key,doc);continue}const docLang=doc.getFlag("CoC7","cocidFlag")?.lang??"en",existingLang=currentDoc?.getFlag("CoC7","cocidFlag")?.lang??"en";"en"===existingLang&&existingLang!==docLang&&bestMatchDocuments.set(key,doc)}}return[...bestMatchDocuments.values()]}static async documentsFromWorld({cocidRegExp,type,lang=game.i18n.lang,era=!1,langFallback=!0,progressBar=0}={}){if(!cocidRegExp)return[];""===lang&&(lang=game.i18n.lang),!0===era&&(era=game.settings.get("CoC7","worldEra")),progressBar>0&&SceneNavigation.displayProgressBar({label:game.i18n.localize("SETUP.PackagesLoading"),pct:Math.floor(100/progressBar)});const gameProperty=CoCID.getGameProperty(`${type}..`),candidateDocuments=game[gameProperty]?.filter((d=>{const cocidFlag=d.getFlag("CoC7","cocidFlag");if(void 0===cocidFlag)return!1;const eras=cocidFlag.eras??[],matchingEras=!1===era||0===Object.entries(eras).length||Object.prototype.hasOwnProperty.call(eras,era)&&eras[era];return cocidRegExp.test(cocidFlag.id)&&[lang,langFallback?"en":"-"].includes(cocidFlag.lang)&&matchingEras}));return void 0===candidateDocuments?[]:candidateDocuments.sort(CoCID.compareCoCIDPrio)}static async documentsFromCompendia({cocidRegExp,type,lang=game.i18n.lang,era=!1,langFallback=!0,progressBar=0}){if(!cocidRegExp)return[];""===lang&&(lang=game.i18n.lang),!0===era&&(era=game.settings.get("CoC7","worldEra"));const eraText=CoCID.eraText(era),documentType=CoCID.getDocumentType(type).schema.name,candidateDocuments=[];let count=1;for(const pack of game.packs)if(progressBar>0&&(SceneNavigation.displayProgressBar({label:game.i18n.localize("SETUP.PackagesLoading"),pct:Math.floor(100*count/progressBar)}),count++),pack.documentName===documentType){pack.indexed||await pack.getIndex();const indexInstances=pack.index.filter((i=>{const cocidFlag=i.flags?.CoC7?.cocidFlag;if(void 0===cocidFlag)return!1;const eras=cocidFlag.eras??[],matchingEras=!1===era||0===Object.entries(eras).length||Object.prototype.hasOwnProperty.call(eras,era)&&eras[era];return cocidRegExp.test(cocidFlag.id)&&[lang,langFallback?"en":"-"].includes(cocidFlag.lang)&&matchingEras}));for(const index of indexInstances){const document=await pack.getDocument(index._id);if(!document){const msg=game.i18n.format("CoC7.CoCIDFlag.error.document-not-found",{cocid:cocidRegExp,lang,era:eraText});throw ui.notifications.error(msg),console.log("CoC7 |",msg,index),new Error}candidateDocuments.push(document)}}return candidateDocuments.sort(CoCID.compareCoCIDPrio)}static compareCoCIDPrio(a,b){return b.getFlag("CoC7","cocidFlag")?.priority-a.getFlag("CoC7","cocidFlag")?.priority}static getGameProperty(cocid){const type=cocid.split(".")[0],gameProperty=CoCID.gamePropertyLookup[type];if(!gameProperty)throw ui.notifications.warn(game.i18n.format("CoC7.CoCIDFlag.error.incorrect.type")),console.log("CoC7 | ",cocid),new Error;return gameProperty}static get gamePropertyLookup(){return{a:"actors",c:"cards",i:"items",je:"journal",m:"macros",p:"playlists",rt:"tables",s:"scenes"}}static getDocumentType(cocid){const type=cocid.split(".")[0],documentType=CoCID.documentNameLookup[type];if(!documentType)throw ui.notifications.warn(game.i18n.format("CoC7.CoCIDFlag.error.incorrect.type")),console.log("CoC7 | ",cocid),new Error;return documentType}static get documentNameLookup(){return{a:Actor,c:Card,i:Item,je:JournalEntry,m:Macro,p:Playlist,rt:RollTable,s:Scene}}}function init_listen(){Hooks.once("init",(async()=>{CONFIG.ActiveEffect.documentClass=CoC7ActiveEffect,CONFIG.Actor.documentClass=CoCActor,CONFIG.Actor.documentClasses={vehicle:CoC7Vehicle},CONFIG.Item.documentClass=CoC7Item,CONFIG.Item.documentClasses={book:CoC7Book,spell:CoC7Spell,chase:CoC7Chase,skill:CoC7Skill},async function(){loadTemplates(["systems/CoC7/templates/actors/parts/npc-skills.html","systems/CoC7/templates/actors/parts/npc-combat.html","systems/CoC7/templates/actors/parts/actor-inventory.html","systems/CoC7/templates/actors/parts/actor-inventory-items.html","systems/CoC7/templates/actors/parts/actor-background.html","systems/CoC7/templates/common/active-effects.hbs","systems/CoC7/templates/actors/parts/actor-mythos-enounters.hbs","systems/CoC7/templates/actors/parts/actor-keeper-mythos-enounters.hbs","systems/CoC7/templates/actors/parts/actor-skills-v2.html","systems/CoC7/templates/actors/parts/character-development-v2.html","systems/CoC7/templates/actors/parts/development-controls.html","systems/CoC7/templates/actors/parts/vitals.html","systems/CoC7/templates/actors/parts/combat.html","systems/CoC7/templates/actors/character-sheet-v2.html","systems/CoC7/templates/actors/character/summary.html","systems/CoC7/templates/items/book/details.html","systems/CoC7/templates/items/spell/details.html","systems/CoC7/templates/apps/investigator-wizard/introduction.hbs","systems/CoC7/templates/apps/investigator-wizard/configuration.hbs","systems/CoC7/templates/apps/investigator-wizard/select-setup.hbs","systems/CoC7/templates/apps/investigator-wizard/select-archetype.hbs","systems/CoC7/templates/apps/investigator-wizard/select-occupation.hbs","systems/CoC7/templates/apps/investigator-wizard/set-characteristics.hbs","systems/CoC7/templates/apps/investigator-wizard/set-attributes.hbs","systems/CoC7/templates/apps/investigator-wizard/view-attributes.hbs","systems/CoC7/templates/apps/investigator-wizard/set-investigator.hbs","systems/CoC7/templates/apps/investigator-wizard/set-occupation-skills.hbs","systems/CoC7/templates/apps/investigator-wizard/toggle-skill.hbs","systems/CoC7/templates/apps/investigator-wizard/set-archetype-skills.hbs","systems/CoC7/templates/apps/investigator-wizard/points-skills.hbs","systems/CoC7/templates/apps/investigator-wizard/backstory.hbs","systems/CoC7/templates/apps/investigator-wizard/create.hbs"])}(),function(){if(game.settings.registerMenu("CoC7","gameRules",{name:"CoC7.Settings.Rules.Name",label:"CoC7.Settings.Rules.Label",hint:"CoC7.Settings.Rules.Hint",icon:"fas fa-book",type:CoC7GameRuleSettings,restricted:!0}),CoC7GameRuleSettings.registerSettings(),game.settings.register("CoC7","useContextMenus",{name:"SETTINGS.UseContextMenus",hint:"SETTINGS.UseContextMenusHint",scope:"world",config:!0,type:Boolean,default:!1}),game.settings.register("CoC7","dholeUploadDirectory",{name:"CoC7.Settings.DholeUpload.Directory.Name",hint:"CoC7.Settings.DholeUpload.Directory.Hint",scope:"world",config:!0,type:CoC7DirectoryPicker.DefaultDirectory,default:"[data] worlds/"+game.world.id+"/dhole-images"}),game.settings.register("CoC7","worldEra",{name:"CoC7.Settings.WorldEra.Name",hint:"CoC7.Settings.WorldEra.Hint",scope:"world",config:!0,default:"standard",type:String,choices:COC7.eras,onChange:()=>{ui.players.render(!0)}}),game.settings.register("CoC7","dropCoCID",{name:"CoC7.Settings.DropCoCID.Name",hint:"CoC7.Settings.DropCoCID.Hint",scope:"world",config:!0,default:"",type:String,choices:{"":"CoC7.Settings.DropCoCID.Prompt",Y:"CoC7.Settings.DropCoCID.UseCoCID",N:"CoC7.Settings.DropCoCID.IgnoreCoCID"}}),game.settings.register("CoC7","displayInitDices",{name:"SETTINGS.displayInitDices",hint:"SETTINGS.displayInitDicesHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","displayInitAsText",{name:"SETTINGS.displayInitAsText",hint:"SETTINGS.displayInitAsTextHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","stanbyGMRolls",{name:"SETTINGS.StanbyGMRolls",hint:"SETTINGS.StanbyGMRollsHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","allowFlatDiceModifier",{name:"SETTINGS.AllowFlatDiceModifier",hint:"SETTINGS.AllowFlatDiceModifierHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","allowFlatThresholdModifier",{name:"SETTINGS.AllowFlatThresholdModifier",hint:"SETTINGS.AllowFlatThresholdModifierHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","defaultCheckDifficulty",{name:"SETTINGS.DefaultDifficulty",hint:"SETTINGS.DefaultDifficultyHint",scope:"world",config:!0,default:"regular",type:String,choices:{regular:"SETTINGS.CheckDifficultyRegular",unknown:"SETTINGS.CheckDifficultyUnknown"}}),game.settings.register("CoC7","selfRollWhisperTarget",{name:"SETTINGS.SelfRollWhisperTarget",hint:"SETTINGS.SelfRollWhisperTargetHint",scope:"world",config:!0,default:"everyone",type:String,choices:{nobody:"SETTINGS.DoNotAdvise",owners:"SETTINGS.AdviseOwnersOnly",everyone:"SETTINGS.AdviseAllPlayer"}}),game.settings.register("CoC7","trustedCanModfyChatCard",{name:"SETTINGS.TrustedCanModfyChatCard",hint:"SETTINGS.TrustedCanModfyChatCardHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","trustedCanSeeChatCard",{name:"SETTINGS.TrustedCanSeeChatCard",hint:"SETTINGS.TrustedCanSeeChatCardHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","displayActorOnCard",{name:"SETTINGS.DisplayActorOnCard",hint:"SETTINGS.DisplayActorOnCardHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","displayCheckSuccessLevel",{name:"SETTINGS.DisplayCheckSuccessLevel",scope:"client",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","displayResultType",{name:"SETTINGS.DisplayResultType",scope:"client",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","useToken",{name:"SETTINGS.UseToken",hint:"SETTINGS.UseTokenHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","enableStatusIcons",{name:"SETTINGS.EnableStatusIcons",hint:"SETTINGS.EnableStatusIconsHint",scope:"world",config:!0,type:Boolean,default:!0}),game.settings.register("CoC7","gridSpaces",{name:"SETTINGS.RestrictGridSpaces",hint:"SETTINGS.RestrictGridSpacesHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","distanceElevation",{name:"SETTINGS.CheckElevation",hint:"SETTINGS.CheckElevationHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","distanceTheatreOfTheMind",{name:"SETTINGS.SceneDistanceNotCalcualtedNoError",hint:"SETTINGS.SceneDistanceNotCalcualtedNoErrorHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","overrideGameArtwork",{name:"SETTINGS.OverrideGameArtwork",hint:"SETTINGS.OverrideGameArtworkHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.get("CoC7","overrideGameArtwork")&&(game.settings.register("CoC7","artPauseImage",{name:"SETTINGS.ArtPauseImage",hint:"SETTINGS.ArtPauseImageHint",scope:"world",config:!0,default:"systems/CoC7/assets/icons/time-trap.svg",type:String}),game.settings.register("CoC7","artPauseText",{name:"SETTINGS.ArtPauseText",hint:"SETTINGS.ArtPauseTextHint",scope:"world",config:!0,default:"The Blind Idiot God is dreaming...",type:String})),game.settings.register("CoC7","displayPlayerNameOnSheet",{name:"SETTINGS.displayPlayerNameOnSheet",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","toolTipDelay",{name:"CoC7.toolTipDelay",scope:"world",config:!0,default:2e3,type:Number}),game.settings.register("CoC7","showIconsOnly",{name:"SETTINGS.showIconsOnly",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","playerUnlockSheetMode",{name:"SETTINGS.PlayerUnlockSheetMode",scope:"world",config:!0,default:"always",type:String,choices:{always:"SETTINGS.AlwaysEditable",creation:"SETTINGS.CreationModeOnly",never:"SETTINGS.NeverEditable"}}),game.settings.register("CoC7","statusPlayerEditable",{name:"SETTINGS.StatusPlayerEditable",hint:"SETTINGS.StatusPlayerEditableHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","oneBlockBackstory",{name:"SETTINGS.OneBlockBackStory",hint:"SETTINGS.OneBlockBackStoryHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","overrideSheetArtwork",{name:"SETTINGS.OverrideSheetArtwork",hint:"SETTINGS.OverrideSheetArtworkHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.get("CoC7","overrideSheetArtwork")){function _setRootFontSize(size){$(":root").css("font-size",size),ui.sidebar.render(!0);for(const[,w]of Object.entries(ui.windows))w.render(!0)}game.settings.register("CoC7","artWorkSheetBackground",{name:"SETTINGS.ArtWorkSheetBackground",hint:"SETTINGS.ArtWorkSheetBackgroundHint",scope:"world",config:!0,default:"url('./assets/images/background.webp') 4 repeat",type:String}),game.settings.register("CoC7","artWorkSheetBackgroundType",{name:"SETTINGS.ArtWorkSheetBackgroundType",scope:"world",config:!0,default:"slice",type:String,choices:{slice:"SETTINGS.BackgroundSlice",auto:"SETTINGS.BackgroundAuto",contain:"SETTINGS.BackgroundContain",cover:"SETTINGS.BackgroundCover"}}),game.settings.register("CoC7","artWorkOtherSheetBackground",{name:"SETTINGS.ArtWorkOtherSheetBackground",hint:"SETTINGS.ArtWorkOtherSheetBackgroundHint",scope:"world",config:!0,default:"url( './assets/images/background.webp')",type:String}),game.settings.register("CoC7","artworkSheetImage",{name:"SETTINGS.ArtworkSheetImage",hint:"SETTINGS.ArtworkSheetImageHint",scope:"world",config:!0,default:"url('./assets/images/tentacles.webp')",type:String}),game.settings.register("CoC7","artworkFrontColor",{name:"SETTINGS.ArtworkFrontColor",hint:"SETTINGS.ArtworkFrontColorHint",scope:"world",config:!0,default:"rgba(43,55,83,1)",type:String}),game.settings.register("CoC7","artworkBackgroundColor",{name:"SETTINGS.ArtworkBackgroundColor",hint:"SETTINGS.ArtworkBackgroundColorHint",scope:"world",config:!0,default:"rgba(103,11,11,1)",type:String}),game.settings.register("CoC7","artworkInteractiveColor",{name:"SETTINGS.ArtworkInteractiveColor",hint:"SETTINGS.ArtworkInteractiveColorHint",scope:"world",config:!0,default:"rgba(103,11,11,1)",type:String}),game.settings.register("CoC7","artworkFixedSkillLength",{name:"SETTINGS.ArtworkFixedSkillLength",hint:"SETTINGS.ArtworkFixedSkillLengthHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","artworkMainFont",{name:"SETTINGS.ArtworkMainFont",scope:"world",config:!0,default:"",type:String}),game.settings.register("CoC7","artworkMainFontBold",{name:"SETTINGS.ArtworkMainFontBold",scope:"world",config:!0,default:"",type:String}),game.settings.register("CoC7","artworkMainFontSize",{name:"SETTINGS.ArtworkMainFontSize",scope:"world",config:!0,default:16,type:Number,onChange:size=>_setRootFontSize(size)})}if(game.settings.register("CoC7","disregardUsePerRound",{name:"SETTINGS.DisregardUsePerRound",hint:"SETTINGS.DisregardUsePerRoundHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","disregardAmmo",{name:"SETTINGS.DisregardAmmo",hint:"SETTINGS.DisregardAmmoHint",scope:"world",config:!0,default:!1,type:Boolean}),game.modules.get("dice-so-nice")?.active){game.settings.register("CoC7","syncDice3d",{name:"SETTINGS.SyncDice3D",hint:"SETTINGS.SyncDice3DHint",scope:"world",config:!0,default:!0,type:Boolean});const[version]=game.modules.get("dice-so-nice")?.version.split(".");!isNaN(Number(version))&&Number(version)>=3&&(game.settings.register("CoC7","tenDieBonus",{name:"SETTINGS.TenDieBonus",hint:"SETTINGS.TenDieBonusHint",scope:"client",config:!0,default:"bronze",type:String}),game.settings.register("CoC7","tenDiePenalty",{name:"SETTINGS.TenDiePenalty",hint:"SETTINGS.TenDiePenaltyHint",scope:"client",config:!0,default:"bloodmoon",type:String}))}game.settings.register("CoC7","debugmode",{name:"SETTINGS.DebugMode",hint:"SETTINGS.DebugModeHint",scope:"client",config:!0,type:Boolean,default:!1}),game.settings.register("CoC7","experimentalFeatures",{name:"SETTINGS.ShowExperimentalFeatures",hint:"SETTINGS.ShowExperimentalFeaturesHint",scope:"world",config:!0,type:Boolean,default:!1}),game.settings.register("CoC7","hiddendevmenu",{name:"Hidden dev menu",hint:"Use at your own risk",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","developmentEnabled",{name:"Dev phased allowed",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","showWelcomeMessage",{name:"SETTINGS.showWelcomeMessage",hint:"SETTINGS.showWelcomeMessage",scope:"world",config:!1,default:!0,type:Boolean}),game.settings.register("CoC7","charCreationEnabled",{name:"Char creation allowed",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","systemUpdateVersion",{name:"System update version",scope:"world",config:!1,type:String,default:"0"}),game.settings.register("CoC7","systemUpdatedModuleVersion",{scope:"world",config:!1,default:{}}),game.settings.register("CoC7","xpEnabled",{name:"Enable XP gain",scope:"world",config:!1,type:Boolean,default:!0}),game.settings.register("CoC7","showInstructions",{name:"Show changelog/instructions",scope:"world",config:!1,type:String,default:"0"}),game.settings.register("CoC7","InvestigatorWizardSetup",{name:"Force specific setup CoC ID for Investigator Wizard",scope:"world",config:!1,type:String,default:""}),game.settings.register("CoC7","InvestigatorWizardQuantity",{name:"Number of investigators a single user without create actor rights can own",scope:"world",config:!1,type:Number,default:0}),game.settings.register("CoC7","InvestigatorWizardOwnership",{name:"Default permissions for non owner players",scope:"world",config:!1,type:Number,default:CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE}),game.settings.register("CoC7","InvestigatorWizardRerolls",{name:"Allow players to reroll characteristics",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","InvestigatorWizardPointBuy",{name:"Force point buy instead of setup choice",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","InvestigatorWizardQuickFire",{name:"Quick fire setup values",scope:"world",config:!1,type:Array,default:[]}),CONFIG.Combat.initiative={formula:"@characteristics.dex.value",decimals:4},CONFIG.debug.hooks=!!game.settings.get("CoC7","debugmode"),CONFIG.Dice.terms.t=CoC7DecaderDie,CONFIG.Dice.terms.o=CoC7DecaderDieOther}(),Actors.unregisterSheet("core",ActorSheet),Actors.registerSheet("CoC7",CoC7NPCSheet,{types:["npc"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7VehicleSheet,{types:["vehicle"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7CreatureSheet,{types:["creature"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7ContainerSheet,{types:["container"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7CharacterSheet,{types:["character"],makeDefault:!0}),Items.unregisterSheet("core",ItemSheet),Items.registerSheet("CoC7",CoC7SkillSheet,{types:["skill"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7WeaponSheet,{types:["weapon"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7BookSheet,{types:["book"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7SpellSheet,{types:["spell"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7TalentSheet,{types:["talent"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7StatusSheet,{types:["status"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7OccupationSheet,{types:["occupation"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ArchetypeSheet,{types:["archetype"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7SetupSheet,{types:["setup"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ChaseSheet,{types:["chase"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ItemSheet,{types:["item"]}),Items.registerSheet("CoC7",CoC7ItemSheetV2,{types:["item"],makeDefault:!0}),Scenes.unregisterSheet("core",SceneConfig),Scenes.registerSheet("CoC7",CoC7SceneConfig,{makeDefault:!0}),Journal.unregisterSheet("core",JournalSheet),Journal.registerSheet("CoC7",CoC7JournalSheet,{makeDefault:!0}),RollTables.unregisterSheet("core",RollTableConfig),RollTables.registerSheet("CoC7",CoC7RollTableConfig,{makeDefault:!0}),Macros.unregisterSheet("core",MacroConfig),Macros.registerSheet("CoC7",CoC7MacroConfig,{makeDefault:!0}),Playlists.unregisterSheet("core",PlaylistConfig),Playlists.registerSheet("CoC7",CoC7PlaylistConfig,{makeDefault:!0}),Handlebars.registerHelper("rollActorImg",(function(actorKey){return chatHelper.getActorImgFromKey(actorKey)||"../icons/svg/mystery-man-black.svg"})),function(){Hooks.on("renderCompendium",(async(app,html,data)=>{if("Item"===app.collection.documentName){await app.collection.getIndex();const types=[...new Set(data.index.filter((i=>"#[CF_tempEntity]"!==i.name)).map((item=>item.type)))],select=[];select.push('<option value="">'+game.i18n.localize("CoC7.All")+"</option>"),types.includes("archetype")&&select.push('<option value="archetype">'+game.i18n.localize("CoC7.Entities.Archetype")+"</option>"),types.includes("book")&&select.push('<option value="book">'+game.i18n.localize("CoC7.Entities.Book")+"</option>"),types.includes("item")&&select.push('<option value="item">'+game.i18n.localize("CoC7.Entities.Item")+"</option>"),types.includes("occupation")&&select.push('<option value="occupation">'+game.i18n.localize("CoC7.Entities.Occupation")+"</option>"),types.includes("setup")&&select.push('<option value="setup">'+game.i18n.localize("CoC7.Entities.Setup")+"</option>"),types.includes("skill")&&select.push('<option value="skill">'+game.i18n.localize("CoC7.Entities.Skill")+"</option>"),types.includes("spell")&&select.push('<option value="spell">'+game.i18n.localize("CoC7.Entities.Spell")+"</option>"),types.includes("status")&&select.push('<option value="status">'+game.i18n.localize("CoC7.Entities.Status")+"</option>"),types.includes("talent")&&select.push('<option value="talent">'+game.i18n.localize("CoC7.Entities.Talent")+"</option>"),types.includes("weapon")&&select.push('<option value="weapon">'+game.i18n.localize("CoC7.Entities.Weapon")+"</option>");const eras=[];eras.push('<option value="">'+game.i18n.localize("CoC7.All")+"</option>");for(const era of Object.entries(COC7.eras).map((e=>({id:e[0],name:game.i18n.localize(e[1])}))).sort(CoC7Utilities.sortByNameKey))eras.push('<option value="'+era.id+'">'+era.name+"</option>");html.data("packId",app.metadata.id);let uncommon=game.i18n.localize("CoC7.SkillRarityShort");"CoC7.SkillRarityShort"===uncommon&&(uncommon="??"),html.find("li.directory-item").each((function(){const row=$(this);let item=[];item=void 0!==data.index?data.index.find((i=>i._id===row.data("document-id"))):app.collection.index.get(row.data("document-id")),item&&"skill"===item.type&&row.find("a").html(item.name+" ("+(item.system?.base??"?")+"%"+(item.system?.properties?.rarity?" "+uncommon:"")+")")})),html.find("header.directory-header").after('<div class="compendiumfilter"><div class="header-search flexrow"><i class="fas fa-layer-group"></i><select name="coc7type'+app.appId+'" style="">'+select.join("")+'</select></div><div class="header-search flexrow era_select" style="display:none"><i class="fas fa-layer-group"></i><select name="coc7era'+app.appId+'" style="">'+eras.join("")+"</select></div></div>"),html.find("select").change(performFilter.bind(this)),html.find("input").keyup(performFilter.bind(this))}}))}(),CoCID.init(),CoC7Link.init(),Hooks.once("diceSoNiceReady",(dice3d=>{for(const system in dice3d.DiceFactory.systems){const d100=dice3d.DiceFactory.systems[system].dice.find((d=>"d100"===d.type));if(void 0!==d100){if(void 0===dice3d.DiceFactory.systems[system].dice.find((d=>"dt"===d.type))){const diceDecader=Object.assign(Object.create(Object.getPrototypeOf(d100)),d100);diceDecader.type="dt",dice3d.DiceFactory.systems[system].dice.push(diceDecader)}if(void 0===dice3d.DiceFactory.systems[system].dice.find((d=>"do"===d.type))){const diceDecader=Object.assign(Object.create(Object.getPrototypeOf(d100)),d100);diceDecader.type="do",dice3d.DiceFactory.systems[system].dice.push(diceDecader)}}}}))}))}class CoC7Tooltips{constructor(){this.ToolTipHover=null,this.toolTipTimer=null}displayToolTip(toolTip){if(void 0!==this.ToolTipHover){const bounds=this.ToolTipHover.getBoundingClientRect();if(!isNaN(bounds.left||"")&&!isNaN(bounds.top||"")){let left=bounds.left,top=bounds.top;const heightText=$(this.ToolTipHover).outerHeight();$("body").append('<div id="help-tooltip">'+toolTip+"</div>");const tip=$("#help-tooltip"),heightTip=tip.outerHeight(),widthTip=tip.outerWidth();window.innerHeight<1.5*heightText+heightTip+top?top-=heightTip:top+=1.5*heightText,window.innerWidth<widthTip+left&&(left=window.innerWidth-widthTip),tip.css({left:left+"px",top:top+"px"})}}}toolTipLeave(event){game.CoC7Tooltips.ToolTipHover===event.currentTarget&&(clearTimeout(game.CoC7Tooltips.toolTipTimer),game.CoC7Tooltips.ToolTipHover=null,$("#help-tooltip").remove())}}let CoC7Tour=class{};"undefined"!=typeof Tour&&(CoC7Tour=class extends Tour{async waitForElement(selector){return new Promise(((resolve,reject)=>{if(document.querySelector(selector))return void resolve();new MutationObserver(((mutations,observer)=>{document.querySelectorAll(selector).forEach((el=>{resolve(),observer.disconnect()}))})).observe(document.body,{childList:!0,subtree:!0})}))}async _preStep(){if(await super._preStep(),0===this.stepIndex)for(const app of Object.values(ui.windows))app.close();await this.waitForElement(this.currentStep.selector),void 0!==this.currentStep.sidebarTab&&ui.sidebar.activateTab(this.currentStep.sidebarTab)}async _postStep(){if(await super._postStep(),!(this.stepIndex<0)&&this.hasNext&&this.currentStep.action)if(this.isResetting)this.isResetting=!1;else if("click"===this.currentStep.action)document.querySelector(this.currentStep.selector).click()}async reset(){"completed"!==this.status&&(this.isResetting=!0),await super.reset()}});class EnableVariantRulesEn extends CoC7Tour{constructor(config){super(foundry.utils.mergeObject({title:"Enable optional/variant rules.",description:"Learn how to enable Pulp Cthulhu rules, or other variant rules",canBeResumed:!1,display:!0,steps:[{id:"goto-settings",selector:'.tabs>a[data-tab="settings"]',title:"COC7.Tour.GotoSettingsTitle",content:"COC7.Tour.GotoSettingsContent",sidebarTab:"settings"},{id:"goto-configure",selector:'[data-action="configure"]',title:"COC7.Tour.GotoConfigureTitle",content:"COC7.Tour.GotoConfigureContent",action:"click"},{id:"goto-system-settings",selector:'[data-tab="system"]',title:"COC7.Tour.GotoSystemSettingsTitle",content:"COC7.Tour.GotoSystemSettingsContent",action:"click"},{id:"goto-game-rules",selector:'[data-category="system"] [data-key="CoC7.gameRules"]',title:"COC7.Tour.GotoGameRulesTitle",content:"COC7.Tour.GotoGameRulesContent",action:"click"},{id:"save-game-rules",selector:"#rules-settings [name=submit]",title:"COC7.Tour.SaveGameRulesTitle",content:"COC7.Tour.SaveGameRulesContent"}],localization:{"COC7.Tour.GotoSettingsTitle":"Game Settings","COC7.Tour.GotoSettingsContent":"Go to the Game Settings tab","COC7.Tour.GotoConfigureTitle":"Configure Settings","COC7.Tour.GotoConfigureContent":"Click on the Configure Settings button","COC7.Tour.GotoSystemSettingsTitle":"System Settings","COC7.Tour.GotoSystemSettingsContent":"Go to the System Settings tab","COC7.Tour.GotoGameRulesTitle":"Configure Variant/Optional Rules","COC7.Tour.GotoGameRulesContent":"Click on the Configure Variant/Optional Rules button","COC7.Tour.SaveGameRulesTitle":"Save rule changes","COC7.Tour.SaveGameRulesContent":"Once you have made your changes click on the Save Changes button"}},config))}}class EnableVariantRulesFr extends EnableVariantRulesEn{constructor(config){super({title:"Activez les règles optionnelles.",description:"Activez les règles optionelles et Pulp Cthulhu",localization:{"COC7.Tour.GotoSettingsTitle":"Paramètres","COC7.Tour.GotoSettingsContent":'Ouvrir l\'onglet "Paramètres"',"COC7.Tour.GotoConfigureTitle":"Configuration des options","COC7.Tour.GotoConfigureContent":'Cliquez sur "Configuration des options"',"COC7.Tour.GotoSystemSettingsTitle":"Système de jeu","COC7.Tour.GotoSystemSettingsContent":'Ouvrez l\'onglet "Système de jeu"',"COC7.Tour.GotoGameRulesTitle":"Configurer les variantes/règles optionnelles","COC7.Tour.GotoGameRulesContent":'Clickez sur le boutton "Configurer les variantes/règles optionnelles"',"COC7.Tour.SaveGameRulesTitle":"Sauvegarder les modifications","COC7.Tour.SaveGameRulesContent":'Apres avoir choisis les options cliquez sur le bouton "Sauvegarder les modifications"'}})}}function ready_listen(){Hooks.once("ready",(async()=>{console.log("Call of Cthulhu 7th Edition | Ready"),game.settings.get("CoC7","showWelcomeMessage")&&game.user.isGM,game.CoC7Tooltips=new CoC7Tooltips;const instructionsVersion=game.settings.get("CoC7","showInstructions");let lang=game.i18n.lang;const readMe={en:"sxB2OXbfwV6M0nyQ",es:"35FM7ZOdzC6L2xlj",fr:"tdakyzTVOQsAMdSm"};void 0===readMe[lang]&&(lang="en"),CONFIG.CoC7=CONFIG.CoC7??{},CONFIG.CoC7.Manual=readMe[lang],foundry.utils.isNewerVersion(game.system.version,instructionsVersion??"0")&&((await game.packs.get("CoC7.system-doc").getDocument(CONFIG.CoC7.Manual))?.sheet.render(!0),game.settings.set("CoC7","showInstructions",game.system.version)),async function(){try{let lang=game.i18n.lang;const tours={en:{"enable-variant-rules":EnableVariantRulesEn},fr:{"enable-variant-rules":EnableVariantRulesFr}};void 0===tours[lang]&&(lang="en");for(const tourName in tours[lang])game.tours.register("CoC7",tourName,new tours[lang][tourName])}catch(err){console.error("TOUR ERROR",err)}}()}))}const CoC7Hooks={listen(){Hooks.on("createToken",(async(tokenDocument,options,actorId)=>{"icons/svg/mystery-man.svg"===tokenDocument.texture.src&&tokenDocument.texture.src!==tokenDocument._object.actor.img&&(tokenDocument.texture.src=tokenDocument._object.actor.img),"character"!==tokenDocument._object.actor.type&&(tokenDocument._object.actor.hasRollableCharacteristics||tokenDocument._object.actor.hosRollableSkills)&&new Dialog({title:game.i18n.localize("CoC7.TokenCreationRoll.Title"),content:game.i18n.localize("CoC7.TokenCreationRoll.Prompt"),buttons:{roll:{label:game.i18n.localize("CoC7.TokenCreationRoll.ButtonRoll"),callback:async()=>await tokenDocument._object.actor.rollCharacteristicsValue()},average:{label:game.i18n.localize("CoC7.TokenCreationRoll.ButtonAverage"),callback:async()=>await tokenDocument._object.actor.averageCharacteristicsValue()},skip:{label:game.i18n.localize("CoC7.Migrate.ButtonSkip")}}}).render(!0)})),Hooks.once("diceSoNiceReady",(dice3d=>{dice3d.addDicePreset({type:"dt",labels:["10","20","30","40","50","60","70","80","90","00"],fontScale:.75,system:"standard"}),dice3d.addDicePreset({type:"do",labels:["10","20","30","40","50","60","70","80","90","00"],fontScale:.75,system:"standard"})})),init_listen(),ready_listen(),Hooks.on("renderActorSheet",(async(data,html,options)=>{})),Hooks.on("renderChatMessage",((app,html,data)=>{CoC7Chat.renderMessageHook(app,html,data),CoC7Chat.renderChatMessageHook(app,html,data)})),Hooks.on("renderDialog",((dialog,html)=>{const form=html.find("form");if(form.is("#document-create")&&0!==form.find("select").length){const entityCreateSelectTag=form.find("[name='type']"),entitySortedList=[],showExperimental=!!game.settings.get("CoC7","experimentalFeatures");entityCreateSelectTag.children().each(((o,entityOption)=>{const key=entityOption.textContent?.capitalize();game.i18n.has(`CoC7.Entities.${key}`)&&(entityOption.textContent=game.i18n.localize(`CoC7.Entities.${key}`)),!showExperimental&&["vehicle"].includes(entityOption.value)||entitySortedList.push(entityOption)})),entityCreateSelectTag.empty(),entityCreateSelectTag.append(entitySortedList.sort(((first,second)=>first.innerText.localeCompare(second.innerText)))),"actor"===entityCreateSelectTag.val()?entityCreateSelectTag.val("character"):"book"===entityCreateSelectTag.val()&&entityCreateSelectTag.val("item")}})),Hooks.on("renderItemSheet",(async(data,html,options)=>{})),Hooks.on("renderPause",(async(data,html,options)=>{game.settings.get("CoC7","overrideGameArtwork")&&("null"===game.settings.get("CoC7","artPauseImage").toLowerCase()&&html.find("img").remove(),""!==game.settings.get("CoC7","artPauseImage")&&html.find("img").attr("src",game.settings.get("CoC7","artPauseImage")),""!==game.settings.get("CoC7","artPauseText")&&html.find("h3").html(game.settings.get("CoC7","artPauseText")))})),Hooks.on("renderPlayerList",((playerList,html,data)=>{$("<h4>").append('<div><i class="fa-regular fa-calendar"></i>'+game.i18n.format(COC7.eras[game.settings.get("CoC7","worldEra")]??"CoC7.CoCIDFlag.error.unknown-era",{era:game.settings.get("CoC7","worldEra")})+"</div>").insertAfter($("h3",html))})),Hooks.on("renderRealRoll",((app,html,options)=>{for(const term in options.dieTerms)for(const input in options.dieTerms[term].inputs)if(options.dieTerms[term]instanceof CoC7DecaderDie){const tag=html.find('[name="'+term+"."+input+'"]');1===tag.length&&(tag[0].placeholder=game.i18n.localize("CoC7.RealRollDecaderPlaceholderName"))}})),Hooks.on("renderSettingsConfig",((app,html,user)=>{CoC7DirectoryPicker.processHtml(html)}))}};async function gmcreatemessageas(data){const meleeTarget=new CoC7MeleeTarget(data.targetKey,data.messageId,data.fastForward);meleeTarget.initiatorKey=data.actorKey;return await meleeTarget.createChatCard()}async function gmtradeitemto(data){try{let actor;actor=data.scene?game.scenes.get(data.scene).tokens.get(data.actorFrom).actor:game.actors.get(data.actorFrom);const item=actor.items.get(data.item);await game.actors.get(data.actorTo).createEmbeddedDocuments("Item",[item.toJSON()])&&actor.deleteEmbeddedDocuments("Item",[item.id])}catch(e){return ui.notifications.error(e),!1}return!0}class CoC7SystemSocket{static async callSocket(data){if(void 0!==data.listener){if(game.user.id===data.listener)switch(data.type){case"character-wizard":CoC7InvestigatorWizard.createCharacterFromData(data.payload);break;case"open-character":game.actors.get(data.payload).sheet.render(!0)}}else{if(game.user.isGM)switch(data.type){case OpposedCheckCard.defaultConfig.type:OpposedCheckCard.dispatch(data);break;case CombinedCheckCard.defaultConfig.type:CombinedCheckCard.dispatch(data);break;case"invoke":(await fromUuid(data.item))[data.method](data.data)}if("updateChar"===data.type)CoC7Utilities.updateCharSheets()}}static requestKeeperAction(data){if(game.user.isGM)data.listener=game.user.id,CoC7SystemSocket.callSocket(data);else{const keepers=game.users.filter((u=>u.active&&u.isGM));keepers.length?(data.listener=keepers[0].id,game.socket.emit("system.CoC7",data)):ui.notifications.error(game.i18n.localize("CoC7.ErrorMissingKeeperUser"))}}static requestUserAction(data,{userId=null,errorIfMissing=!0,includeSelf=!0}={}){if(userId&&void 0!==userId)if(userId===game.user.id)data.listener=game.user.id,CoC7SystemSocket.callSocket(data);else{const user=game.users.get(userId);void 0!==user.id&&user.active?(data.listener=user.id,game.socket.emit("system.CoC7",data)):errorIfMissing&&ui.notifications.error(game.i18n.localize("CoC7.ErrorMissingUser"))}else includeSelf&&CoC7SystemSocket.callSocket(data),game.socket.emit("system.CoC7",data)}}function _onLeftClick(event){return event.shiftKey}Hooks.on("renderSettingsConfig",((app,html,options)=>{const systemTab=$(app.form).find(".tab[data-tab=system]");systemTab.find("input[name=CoC7\\.displayInitDices]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleInitiative")+"</h2>"),systemTab.find("input[name=CoC7\\.stanbyGMRolls]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleRoll")+"</h2>"),systemTab.find("input[name=CoC7\\.trustedCanModfyChatCard]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleChatCards")+"</h2>"),systemTab.find("input[name=CoC7\\.enableStatusIcons]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleScene")+"</h2>"),systemTab.find("input[name=CoC7\\.overrideGameArtwork]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleGameArtwork")+"</h2>"),systemTab.find("input[name=CoC7\\.displayPlayerNameOnSheet]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleSheet")+"</h2>"),systemTab.find("input[name=CoC7\\.disregardUsePerRound]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleWeapon")+"</h2>"),systemTab.find("input[name=CoC7\\.syncDice3d]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleDiceSoNice")+"</h2>"),systemTab.find("input[name=CoC7\\.debugmode]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleDeveloperDebug")+"</h2>"),systemTab.find("select[name=CoC7\\.boutOfMadnessSummaryTable]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleRollTable")+"</h2>")})),Hooks.once("init",(async function(){game.CoC7={macros:{skillCheck:CoC7Utilities.skillCheckMacro,weaponCheck:CoC7Utilities.weaponCheckMacro,check:CoC7Utilities.checkMacro},cards:{DamageCard},dev:{dice:{alwaysCrit:!1,alwaysFumble:!1}},eras:(era,name)=>{COC7.eras[era]=name}},Combat.prototype.rollInitiative=rollInitiative})),function(...cardclass){Hooks.on("renderChatLog",((app,html,data)=>EnhancedChatCardLib.injectCSS(app,html,data))),Hooks.once("socketlib.ready",(function(){EnhancedChatCardLib.register(cardclass),EnhancedChatCardLib.socket=socketlib.registerSystem(game.system.id),EnhancedChatCardLib.socket.register("updateMessage",updateMessage),EnhancedChatCardLib.socket.register("GMUpdate",GMUpdate),EnhancedChatCardLib.socket.register("advise",advise)})),Hooks.on("renderChatMessage",((app,html,data)=>EnhancedChatCard.bindListeners(html)))}(ChaseObstacleCard),Hooks.on("renderCombatTracker",((app,html,data)=>CoC7Combat.renderCombatTracker(app,html,data))),Hooks.on("chatMessage",((html,content)=>{if(content.match(/^\/(cbr|cc)/i)){const commands=content.match(/(\d+)/g);return commands?new Roll("1d100").roll({async:!0}).then((r=>{const s=r.result,res=commands.map((m=>{let res="";return res=s<=1?game.i18n.localize("CoC7.CriticalSuccess"):s>=100?game.i18n.localize("CoC7.Fumble"):s<=m/5?game.i18n.localize("CoC7.ExtremeSuccess"):s<=m/2?game.i18n.localize("CoC7.HardSuccess"):s<=m?game.i18n.localize("CoC7.RegularSuccess"):s>=96&&m<50?game.i18n.localize("CoC7.Fumble"):game.i18n.localize("CoC7.Failure"),res+=" "+game.i18n.localize("CoC7.Value")+" "+m,res})).join(" / ");r.toMessage({speaker:ChatMessage.getSpeaker(),flavor:res})})):ui.notifications.error("Incorrect usage of command"),!1}})),CoC7Hooks.listen(),Hooks.once("socketlib.ready",(function(){game.CoC7socket=socketlib.registerSystem("CoC7"),game.CoC7socket.register("gmcreatemessageas",gmcreatemessageas),game.CoC7socket.register("gmtradeitemto",gmtradeitemto)})),Hooks.once("setup",(function(){const toLocalize=["spellProperties","bookType","talentType","occupationProperties","statusType"];for(const o of toLocalize){const localized=Object.entries(COC7[o]).map((e=>[e[0],game.i18n.localize(e[1])]));COC7[o]=localized.reduce(((obj,e)=>(obj[e[0]]=e[1],obj)),{})}let effectIndex=CONFIG.statusEffects.findIndex((t=>t.id===COC7.status.dead));-1!==effectIndex&&(CONFIG.statusEffects[effectIndex].icon="systems/CoC7/assets/icons/tombstone.svg"),effectIndex=CONFIG.statusEffects.findIndex((t=>t.id===COC7.status.unconscious)),-1!==effectIndex&&(CONFIG.statusEffects[effectIndex].icon="systems/CoC7/assets/icons/knocked-out-stars.svg");const effectNameKey=foundry.utils.isNewerVersion(game.version,"11")?"name":"label";CONFIG.statusEffects.unshift({id:COC7.status.tempoInsane,[effectNameKey]:"CoC7.BoutOfMadnessName",icon:"systems/CoC7/assets/icons/hanging-spider.svg"},{id:COC7.status.indefInsane,[effectNameKey]:"CoC7.InsanityName",icon:"systems/CoC7/assets/icons/tentacles-skull.svg"},{id:COC7.status.criticalWounds,[effectNameKey]:"CoC7.CriticalWounds",icon:"systems/CoC7/assets/icons/arm-sling.svg"},{id:COC7.status.dying,[effectNameKey]:"CoC7.Dying",icon:"systems/CoC7/assets/icons/heart-beats.svg"})})),Hooks.on("createActiveEffect",((data,options,userId)=>{if(game.userId===userId){const statusKey=CoC7ActiveEffect.getStatusKey(data);if(statusKey)switch(statusKey){case COC7.status.indefInsane:case COC7.status.unconscious:case COC7.status.criticalWounds:case COC7.status.dying:case COC7.status.prone:case COC7.status.dead:data.parent.setCondition(statusKey,{forceValue:!0});break;case COC7.status.tempoInsane:{const realTime=data.flags.CoC7?.realTime;let duration=null;!0===realTime?duration=data.duration?.rounds:!1===realTime&&(duration=data.duration?.seconds,isNaN(duration)||(duration=Math.floor(duration/3600))),data.parent.setCondition(COC7.status.tempoInsane,{forceValue:!0,realTime,duration})}}}})),Hooks.on("deleteActiveEffect",((data,options,userId)=>{if(game.userId===userId){const statusKey=CoC7ActiveEffect.getStatusKey(data);if(statusKey)switch(statusKey){case COC7.status.tempoInsane:case COC7.status.indefInsane:case COC7.status.unconscious:case COC7.status.criticalWounds:case COC7.status.dying:case COC7.status.prone:case COC7.status.dead:data.parent.unsetCondition(statusKey,{forceValue:!0})}}})),Hooks.on("changeSidebarTab",(directory=>{if(directory instanceof ItemDirectory){const item=game.items.find((i=>"__CoC7InternalItem__"===i.name));if(item){const itemElement=directory._element.find(`[data-document-id='${item.id}']`);itemElement&&(itemElement[0].style.display="none")}}})),Hooks.on("hotbarDrop",((bar,data,slot)=>CoC7Utilities.createMacro(bar,data,slot))),Hooks.on("renderChatLog",((app,html,data)=>CoC7Chat.chatListeners(app,html,data))),Hooks.on("updateChatMessage",((chatMessage,chatData,diff,speaker)=>CoC7Chat.onUpdateChatMessage(chatMessage,chatData,diff,speaker))),Hooks.on("ready",(async()=>{function _tableSettingsChanged(table,id){game.CoC7.tables[table]="none"===id?null:game.tables.get(id)}await Updater.checkForUpdate(),function(){const body=$("body");document.addEventListener("click",CoC7ContextMenu.closeAll),body.on("click","a.coc7-inline-check",CoC7Check._onClickInlineRoll),document.addEventListener("mousedown",_onLeftClick)}(),game.CoC7.skillList=await(game.packs.get("CoC7.skills")?.getDocuments()),game.socket.on("system.CoC7",(async data=>{CoC7SystemSocket.callSocket(data)}));const tableChoice={none:"SETTINGS.LetKeeperDecide"};for(const t of game.tables)tableChoice[t._id]=t.name;game.settings.register("CoC7","boutOfMadnessSummaryTable",{name:"SETTINGS.BoutOfMadnessSummaryTable",scope:"world",config:!0,default:"none",type:String,choices:tableChoice,onChange:id=>_tableSettingsChanged("boutOfMadness_Summary",id)}),game.settings.register("CoC7","boutOfMadnessRealTimeTable",{name:"SETTINGS.BoutOfMadnessRealTimeTable",scope:"world",config:!0,default:"none",type:String,choices:tableChoice,onChange:id=>_tableSettingsChanged("boutOfMadness_RealTime",id)}),game.CoC7.tables={boutOfMadness_Summary:"none"===game.settings.get("CoC7","boutOfMadnessSummaryTable")?null:game.tables.get(game.settings.get("CoC7","boutOfMadnessSummaryTable")),boutOfMadness_RealTime:"none"===game.settings.get("CoC7","boutOfMadnessRealTimeTable")?null:game.tables.get(game.settings.get("CoC7","boutOfMadnessRealTimeTable"))}})),Hooks.on("renderCoC7ChaseSheet",((app,html,data)=>CoC7ChaseSheet.setScroll(app,html,data))),Hooks.on("closeCoC7ChaseSheet",((app,html)=>CoC7ChaseSheet.onClose(app,html))),Hooks.on("closeActorSheet",(characterSheet=>characterSheet.onCloseSheet())),Hooks.on("renderCoC7CreatureSheet",((app,html,data)=>CoC7CreatureSheet.forceAuto(app,html,data))),Hooks.on("renderCoC7NPCSheet",((app,html,data)=>CoC7NPCSheet.forceAuto(app,html,data))),Hooks.on("chatMessage",CoC7Utilities.ParseChatEntry),Hooks.on("getSceneControlButtons",(()=>{})),Hooks.on("renderActorSheet",CoC7CharacterSheet.renderSheet),Hooks.on("renderItemSheet",CoC7CharacterSheet.renderSheet),Hooks.on("getSceneControlButtons",CoC7Menu.getButtons),Hooks.on("renderSceneControls",CoC7Menu.renderControls),Hooks.on("dropCanvasData",CoC7Canvas.onDropSomething),Hooks.on("dropActorSheetData",(function(actor,sheet,data){if("Item"===data.type&&data.actorId){if(actor.data._id===data.actorId)return;let actorFrom=null;switch(actorFrom=data.sceneId&&data.tokenId?game.scenes.get(data.sceneId).tokens.get(data.tokenId).actor:game.actors.get(data.actorId),actor.data.type){case"character":case"npc":case"creature":if(!["chase"].includes(data.data.type))return;break;case"vehicle":return;case"container":if(!["book","item","spell","weapon"].includes(data.data.type))return}actorFrom&&actorFrom.deleteEmbeddedDocuments("Item",[data.data._id])}})),CONFIG.ui.settings=CoC7SettingsDirectory,CONFIG.ui.compendium=CoC7CompendiumDirectory,CONFIG.ui.actors=CoC7ActorDirectory})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTLFVBQVUyRSxTQUFTc0MsS0FBS0EsS0FBS2pILE1BQzFELE9BR0Z1NEQsV0FDRkEsVUFBVWhiLHdCQUF3QixPQUFRLENBQUN0MkMsS0FBS0EsS0FBS3VsQyxLQUV6RCxDQUNGLElGNGNBam9DLE9BQU9tRyxHQUFHdEgsU0FBV3MvRSxzQkFDckJuK0UsT0FBT21HLEdBQUc0cEQsV0FBYXd1Qix3QkFDdkJ2K0UsT0FBT21HLEdBQUcyRCxPQUFTNjBFLGtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYWN0aXZlLWVmZmVjdC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvZGljZS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvaXRlbS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvYXZlcmFnZS1yb2xsLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2NhcmQtYWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvY2FyZHMvc2FuLWNoZWNrLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NvYzctbGluay5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9jb2M3LWNvbnRlbnQtbGluay1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvcm9sbC1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvY2FyZHMvcm9sbC1jYXJkLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2NhcmRzL2NvbWJpbmVkLXJvbGwuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvaW50ZXJhY3RpdmUtY2hhdC1jYXJkLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2NhcmRzL2RhbWFnZS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9jYXJkcy9vcHBvc2VkLXJvbGwuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvc2FuZGF0YS1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY29jNy1jaGF0LW1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvY29uY2hlY2suanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvc2tpbGwtc2VsZWN0aW9uLWRpYWxvZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9wb2ludC1zZWxlY3Rpb24tZGlhbG9nLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NoYXItc2VsZWN0aW9uLWRpYWxvZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9jaGFyLXJvbGwtZGlhbG9nLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL3NraWxsLXNwZWMtc2VsZWN0LWRpYWxvZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9za2lsbC1zcGVjaWFsaXphdGlvbi1zZWxlY3QtZGlhbG9nLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL3NraWxsLXZhbHVlLWRpYWxvZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9jb21iYXQvbWVsZWUtcmVzb2x1dGlvbi5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9jb21iYXQvbWVsZWUtdGFyZ2V0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L3JhbmdlY29tYmF0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2NvbWJhdC9tZWxlZS1pbml0aWF0b3IuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FjdG9ycy9hY3Rvci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hlY2suanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3V0aWxpdGllcy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9jb2MtaWQtZWRpdG9yLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NvbnRleHQtbWVudS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYWN0b3JzL3NoZWV0cy9iYXNlLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hY3RvcnMvc2hlZXRzL25wYy1zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYWN0b3JzL3NoZWV0cy9jcmVhdHVyZS1zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9jcmVhdGUtbXl0aG9zLWVuY291bnRlcnMuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FjdG9ycy9zaGVldHMvY2hhcmFjdGVyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jb21iYXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY29jLWlkLWJhdGNoLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS91cGRhdGVyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2FjdG9yLWltcG9ydGVyLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9hY3Rvci1pbXBvcnRlci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9jb2M3LWRpcmVjdG9yeS1waWNrZXIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvZGhvbGVob3VzZV9pbXBvcnRlci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9hY3Rvci1pbXBvcnRlci1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvZHJvcC1jb2MtaWQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL3NoZWV0cy9vY2N1cGF0aW9uLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2ludmVzdGlnYXRvci13aXphcmQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL21lbnUuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY2FudmFzLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zZXR0aW5ncy1kaXJlY3RvcnkuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NvbXBlbmRpdW0tZGlyZWN0b3J5LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hY3Rvci1kaXJlY3RvcnkuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL3NwZWxsL2RhdGEuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL2Jvb2svZGF0YS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY29tbW9uL2NoYXRjYXJkbGliL3NyYy9jaGF0Y2FyZGxpYi5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvY2hhc2UvcGFydGljaXBhbnQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvY2FyZHMvY2hhc2Utb2JzdGFjbGUuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL2NoYXNlL2RhdGEuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL3NraWxsL2RhdGEuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FjdG9ycy92ZWhpY2xlL2RhdGEuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvZGVjYWRlci1kaWUuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvZGVjYWRlci1kaWUtb3RoZXIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3NjcmlwdHMvZ2FtZS1ydWxlcy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvc2hlZXRzL2FyY2hldHlwZS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvYm9vay9zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYWN0b3JzL3NoZWV0cy9jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY2hhc2UtcGFydGljaXBhbnQtaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL2NoYXNlL3NoZWV0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9zaGVldHMvaXRlbS1zaGVldFYyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9zaGVldHMvaXRlbS1zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2hlZXRzL2NvYzctam91cm5hbC1zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2hlZXRzL2NvYzctbWFjcm8tY29uZmlnLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zaGVldHMvY29jNy1wbGF5bGlzdC1jb25maWcuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3NoZWV0cy9jb2M3LXJvbGwtdGFibGUtY29uZmlnLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zaGVldHMvY29jNy1zY2VuZS1jb25maWcuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL3NoZWV0cy9zZXR1cC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvc2hlZXRzL3NraWxsLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9zcGVsbC9zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvc2hlZXRzL3N0YXR1cy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvc2hlZXRzL3RhbGVudC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYWN0b3JzL3NoZWV0cy92ZWhpY2xlLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9zaGVldHMvd2VhcG9uLXNoZWV0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zY3JpcHRzL2NvbXBlbmRpdW0tZmlsdGVyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zY3JpcHRzL2NvYy1pZC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvaW5pdC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9jb25maWd1cmUtZG9jdW1lbnRzLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zY3JpcHRzL2xvYWQtdGVtcGxhdGVzLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zY3JpcHRzL3JlZ2lzdGVyLXNldHRpbmdzLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zY3JpcHRzL3JlZ2lzdGVyLXNoZWV0cy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9oYW5kbGViYXJzLWhlbHBlci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvZGljZS1zby1uaWNlLXJlYWR5LWxhc3QuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvdG9vbHRpcHMuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY29jNy10b3VyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS90b3Vycy9lbmFibGUtdmFyaWFudC1ydWxlcy1lbi5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvdG91cnMvZW5hYmxlLXZhcmlhbnQtcnVsZXMtZnIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL3JlYWR5LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zY3JpcHRzL3JlZ2lzdGVyLXRvdXJzLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvY3JlYXRlLXRva2VuLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9kaWNlLXNvLW5pY2UtcmVhZHkuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL3JlbmRlci1hY3Rvci1zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvcmVuZGVyLWNoYXQtbWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvcmVuZGVyLWRpYWxvZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvcmVuZGVyLWl0ZW0tc2hlZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL3JlbmRlci1wYXVzZS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvcmVuZGVyLXBsYXllci1saXN0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9yZW5kZXItcmVhbC1yb2xsLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9yZW5kZXItc2V0dGluZ3MtY29uZmlnLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY29jNy1zeXN0ZW0tc29ja2V0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jb2M3LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9kaWNlYm90LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9kcm9wLWFjdG9yLXNoZWV0LWRhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTmFtZXNwYWNlIENPQzcgQ29uZmlndXJhdGlvbiBWYWx1ZXNcbmV4cG9ydCBjb25zdCBDT0M3ID0ge31cblxuLy8gQ3VzdG9tIGNoYXRNZXNzYWdlXG4vLyBDT05GSUcuQ2hhdE1lc3NhZ2UudGVtcGxhdGUgPSAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L2NoYXQtbWVzc2FnZS5odG1sJztcblxuLyoqXG4gKiBUaGUgc2V0IG9mIEVyYXMgdXNlZCB3aXRoaW4gdGhlIHN5c3RlbVxuICogQHR5cGUge09iamVjdH1cbiAqL1xuQ09DNy5lcmFzID0ge1xuICBzdGFuZGFyZDogJ0NvQzcuRXJhMTkyMCcsXG4gIG1vZGVybjogJ0NvQzcuRXJhTW9kZXJuJyxcbiAgbW9kZXJuUHVscDogJ0NvQzcuRXJhTW9kZXJuUHVscCcsXG4gIHB1bHA6ICdDb0M3LkVyYVB1bHAnLFxuICBkb3duRGFya2VyVHJhaWxzOiAnQ29DNy5FcmFEb3duRGFya2VyVHJhaWxzJyxcbiAgZG93bkRhcmtlclRyYWlsc1B1bHA6ICdDb0M3LkVyYURvd25EYXJrZXJUcmFpbHNQdWxwJyxcbiAgZGFya0FnZXM6ICdDb0M3LkVyYURhcmtBZ2VzJyxcbiAgZGFya0FnZXNQdWxwOiAnQ29DNy5FcmFEYXJrQWdlc1B1bHAnLFxuICByZWdlbmN5OiAnQ29DNy5FcmFSZWdlbmN5JyxcbiAgcmVnZW5jeVB1bHA6ICdDb0M3LkVyYVJlZ2VuY3lQdWxwJyxcbiAgLy8gUmVpZ24gb2YgVGVycm9yXG4gIGdhc0xpZ2h0OiAnQ29DNy5FcmFHYXNMaWdodCcsXG4gIGludmljdHVzOiAnQ29DNy5FcmFJbnZpY3R1cydcbn1cblxuQ09DNy5tb25ldGFyeUZvcm1hdEtleXMgPSB7XG4gIGRlY2ltYWxMZWZ0OiAnZGVjaW1hbExlZnQnLFxuICBkZWNpbWFsUmlnaHQ6ICdkZWNpbWFsUmlnaHQnLFxuICBpbnRlZ2VyTGVmdDogJ2ludGVnZXJMZWZ0JyxcbiAgaW50ZWdlclJpZ2h0OiAnaW50ZWdlclJpZ2h0JyxcbiAgbHNkOiAnbHNkJyxcbiAgcm9tYW46ICdyb21hbidcbn1cblxuQ09DNy5tb25ldGFyeUZvcm1hdHMgPSB7XG4gIGRlY2ltYWxMZWZ0OiAnQ29DNy5Nb25ldGFyeUZvcm1hdERlY2ltYWxMZWZ0JyxcbiAgZGVjaW1hbFJpZ2h0OiAnQ29DNy5Nb25ldGFyeUZvcm1hdERlY2ltYWxSaWdodCcsXG4gIGludGVnZXJMZWZ0OiAnQ29DNy5Nb25ldGFyeUZvcm1hdEludGVnZXJMZWZ0JyxcbiAgaW50ZWdlclJpZ2h0OiAnQ29DNy5Nb25ldGFyeUZvcm1hdEludGVnZXJSaWdodCcsXG4gIGxzZDogJ0NvQzcuTW9uZXRhcnlGb3JtYXRMc2QnLFxuICByb21hbjogJ0NvQzcuTW9uZXRhcnlGb3JtYXRSb21hbidcbn1cblxuQ09DNy5tb25ldGFyeVR5cGVLZXlzID0ge1xuICBub25lOiAnbm9uZScsXG4gIGFzc2VzOiAnYXNzZXMnLFxuICBzZXN0ZXJ0aWk6ICdzZXN0ZXJ0aWknLFxuICBxdWluYXJpaTogJ3F1aW5hcmlpJyxcbiAgZGVuYXJpaTogJ2RlbmFyaWknLFxuICBkOiAnZCcsXG4gIHM6ICdzJyxcbiAgdmFsdWU6ICd2YWx1ZScsXG4gIG11bHRpcGxpZXI6ICdtdWx0aXBsaWVyJ1xufVxuXG5DT0M3Lm1vbmV0YXJ5VHlwZXMgPSB7XG4gIG5vbmU6IHtcbiAgICBuYW1lOiAnQ29DNy5Nb25ldGFyeVR5cGVOb25lJyxcbiAgICBmaWx0ZXI6IFtdXG4gIH0sXG4gIGFzc2VzOiB7XG4gICAgbmFtZTogJ0NvQzcuTW9uZXRhcnlUeXBlQXNzZXMnLFxuICAgIGZpbHRlcjogWydyb21hbiddXG4gIH0sXG4gIHNlc3RlcnRpaToge1xuICAgIG5hbWU6ICdDb0M3Lk1vbmV0YXJ5VHlwZVNlc3RlcnRpaScsXG4gICAgZmlsdGVyOiBbJ3JvbWFuJ11cbiAgfSxcbiAgcXVpbmFyaWk6IHtcbiAgICBuYW1lOiAnQ29DNy5Nb25ldGFyeVR5cGVRdWluYXJpaScsXG4gICAgZmlsdGVyOiBbJ3JvbWFuJ11cbiAgfSxcbiAgZGVuYXJpaToge1xuICAgIG5hbWU6ICdDb0M3Lk1vbmV0YXJ5VHlwZURlbmFyaWknLFxuICAgIGZpbHRlcjogWydyb21hbiddXG4gIH0sXG4gIGQ6IHtcbiAgICBuYW1lOiAnQ29DNy5Nb25ldGFyeVR5cGVEZW5pZXJzJyxcbiAgICBmaWx0ZXI6IFsnbHNkJ11cbiAgfSxcbiAgczoge1xuICAgIG5hbWU6ICdDb0M3Lk1vbmV0YXJ5VHlwZVNvdXMnLFxuICAgIGZpbHRlcjogWydsc2QnXVxuICB9LFxuICB2YWx1ZToge1xuICAgIG5hbWU6ICdDb0M3Lk1vbmV0YXJ5VHlwZU9uZScsXG4gICAgZmlsdGVyOiBbXVxuICB9LFxuICBtdWx0aXBsaWVyOiB7XG4gICAgbmFtZTogJ0NvQzcuTW9uZXRhcnlUeXBlQ3JlZGl0UmF0aW5nJyxcbiAgICBmaWx0ZXI6IFtdXG4gIH1cbn1cblxuQ09DNy5jaGFyYWN0ZXJpc3RpY3MgPSB7XG4gIHN0cjogJ0NvQzcuQ2hhcmFjU3RyJyxcbiAgY29uOiAnQ29DNy5DaGFyYWNDb24nLFxuICBzaXo6ICdDb0M3LkNoYXJhY1NpeicsXG4gIGRleDogJ0NvQzcuQ2hhcmFjRGV4JyxcbiAgYXBwOiAnQ29DNy5DaGFyYWNBcHAnLFxuICBpbnQ6ICdDb0M3LkNoYXJhY0ludCcsXG4gIHBvdzogJ0NvQzcuQ2hhcmFjUG93JyxcbiAgZWR1OiAnQ29DNy5DaGFyYWNFZHUnXG59XG5cbi8qKlxuICogVGhlIHNldCBvZiBTa2lsbHMgYXR0cmlidXRlcyB1c2VkIHdpdGhpbiB0aGUgc3lzdGVtXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5DT0M3LnNraWxsUHJvcGVydGllcyA9IHtcbiAgbm9hZGp1c3RtZW50czogJ0NvQzcuU2tpbGxOb0FkanVzdG1lbnRzJyxcbiAgbm94cGdhaW46ICdDb0M3LlNraWxsTm9YcEdhaW4nLFxuICBzcGVjaWFsOiAnQ29DNy5Ta2lsbFNwZWNpYWwnLFxuICByYXJpdHk6ICdDb0M3LlNraWxsUmFyaXR5JyxcbiAgcHVzaDogJ0NvQzcuU2tpbGxQdXNoJyxcbiAgY29tYmF0OiAnQ29DNy5Ta2lsbENvbWJhdCcsXG4gIGZpZ2h0aW5nOiAnQ29DNy5Ta2lsbEZpZ2h0aW5nJyxcbiAgZmlyZWFybTogJ0NvQzcuU2tpbGxGaXJlYXJtJyxcbiAgcmVxdWlyZXNuYW1lOiAnQ29DNy5Ta2lsbFJlcXVpcmVzTmFtZScsXG4gIGtlZXBiYXNldmFsdWU6ICdDb0M3LlNraWxsS2VlcEJhc2VWYWx1ZScsXG4gIHBpY2tuYW1lb25seTogJ0NvQzcuU2tpbGxQaWNrTmFtZU9ubHknLFxuICBvbmx5b25lOiAnQ29DNy5Ta2lsbFNwZWNpYWxpemF0aW9uSXNVbmlxdWUnXG59XG5cbkNPQzcud2VhcG9uUHJvcGVydGllcyA9IHtcbiAgbWVsZWU6ICdDb0M3LldlYXBvbi5Qcm9wZXJ0eS5NZWxlZScsXG4gIHJuZ2Q6ICdDb0M3LldlYXBvblJuZ2QnLFxuICBtbnZyOiAnQ29DNy5XZWFwb25Qcm9wZXJ5TWFuZXV2ZXInLFxuICB0aHJvd246ICdDb0M3LldlYXBvbi5Qcm9wZXJ0eS5UaHJvd24nLFxuICBzaG90Z3VuOiAnQ29DNy5XZWFwb24uUHJvcGVydHkuU2hvdGd1bicsXG4gIGRicmw6ICdDb0M3LldlYXBvbkRicmwnLFxuICBpbXBsOiAnQ29DNy5XZWFwb25JbXBsJyxcbiAgYnJzdDogJ0NvQzcuV2VhcG9uQnJzdCcsXG4gIGF1dG86ICdDb0M3LldlYXBvbkF1dG8nLFxuICBhaGRiOiAnQ29DNy5XZWFwb25BaGRiJyxcbiAgYWRkYjogJ0NvQzcuV2VhcG9uQWRkYicsXG4gIHNsbnQ6ICdDb0M3LldlYXBvblNsbnQnLFxuICBzcGNsOiAnQ29DNy5XZWFwb25TcGNsJyxcbiAgbW9udDogJ0NvQzcuV2VhcG9uTW9udCcsXG4gIGJsc3Q6ICdDb0M3LldlYXBvbkJsc3QnLFxuICBzdHVuOiAnQ29DNy5XZWFwb25TdHVuJyxcbiAgcmFyZTogJ0NvQzcuV2VhcG9uUmFyZScsXG4gIGJ1cm46ICdDb0M3LldlYXBvbi5Qcm9wZXJ0eS5CdXJuJ1xufVxuXG5DT0M3LnNwZWxsUHJvcGVydGllcyA9IHtcbiAgY2FsbDogJ0NvQzcuQ2FsbFNwZWxsJyxcbiAgZGlzbWlzczogJ0NvQzcuRGlzbWlzc1NwZWxsJyxcbiAgY29udGFjdDogJ0NvQzcuQ29udGFjdFNwZWxsJyxcbiAgc3VtbW9uOiAnQ29DNy5TdW1tb25TcGVsbCcsXG4gIGJpbmQ6ICdDb0M3LkJpbmRTcGVsbCcsXG4gIGVuY2hhbnRtZW50OiAnQ29DNy5FbmNoYW50bWVudFNwZWxsJyxcbiAgZ2F0ZTogJ0NvQzcuR2F0ZVNwZWxsJyxcbiAgY29tYmF0OiAnQ29DNy5Db21iYXRTcGVsbCdcbn1cblxuQ09DNy5ib29rVHlwZSA9IHtcbiAgbXl0aG9zOiAnQ29DNy5NeXRob3NCb29rJyxcbiAgb2NjdWx0OiAnQ29DNy5PY2N1bHRCb29rJyxcbiAgb3RoZXI6ICdDb0M3Lk90aGVyJ1xufVxuXG5DT0M3LnRhbGVudFR5cGUgPSB7XG4gIHBoeXNpY2FsOiAnQ29DNy5QaHlzaWNhbFRhbGVudCcsXG4gIG1lbnRhbDogJ0NvQzcuTWVudGFsVGFsZW50JyxcbiAgY29tYmF0OiAnQ29DNy5Db21iYXRUYWxlbnQnLFxuICBtaXNjZWxsYW5lb3VzOiAnQ29DNy5NaXNjZWxsYW5lb3VzVGFsZW50JyxcbiAgYmFzaWM6ICdDb0M3LkJhc2ljVGFsZW50JyxcbiAgaW5zYW5lOiAnQ29DNy5JbnNhbmVUYWxlbnQnLFxuICBvdGhlcjogJ0NvQzcuT3RoZXJUYWxlbnQnXG59XG5cbkNPQzcuc3RhdHVzVHlwZSA9IHtcbiAgbWFuaWE6ICdDb0M3Lk1hbmlhJyxcbiAgcGhvYmlhOiAnQ29DNy5QaG9iaWEnXG59XG5cbkNPQzcub2NjdXBhdGlvblByb3BlcnRpZXMgPSB7XG4gIGNsYXNzaWM6ICdDb0M3LkNsYXNzaWMnLFxuICBsb3ZlY3JhZnRpYW46ICdDb0M3LkxvdmVjcmFmdGlhbicsXG4gIG1vZGVybjogJ0NvQzcuTW9kZXJuJyxcbiAgcHVscDogJ0NvQzcuUHVscCdcbn1cblxuQ09DNy5mb3JtdWxhID0ge31cblxuQ09DNy5mb3JtdWxhLmFjdG9yID0ge1xuICAnQFNUUic6ICd0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Muc3RyLnZhbHVlJyxcbiAgJ0BDT04nOiAndGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmNvbi52YWx1ZScsXG4gICdAU0laJzogJ3RoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5zaXoudmFsdWUnLFxuICAnQERFWCc6ICd0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuZGV4LnZhbHVlJyxcbiAgJ0BBUFAnOiAndGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmFwcC52YWx1ZScsXG4gICdASU5UJzogJ3RoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5pbnQudmFsdWUnLFxuICAnQFBPVyc6ICd0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MucG93LnZhbHVlJyxcbiAgJ0BFRFUnOiAndGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmVkdS52YWx1ZSdcbn1cblxuQ09DNy5mb3JtdWxhLmFjdG9yc2hlZXQgPSB7XG4gICdAU1RSJzogJ3RoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5zdHIudmFsdWUnLFxuICAnQENPTic6ICd0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuY29uLnZhbHVlJyxcbiAgJ0BTSVonOiAndGhpcy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZScsXG4gICdAREVYJzogJ3RoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5kZXgudmFsdWUnLFxuICAnQEFQUCc6ICd0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuYXBwLnZhbHVlJyxcbiAgJ0BJTlQnOiAndGhpcy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmludC52YWx1ZScsXG4gICdAUE9XJzogJ3RoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5wb3cudmFsdWUnLFxuICAnQEVEVSc6ICd0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuZWR1LnZhbHVlJ1xufVxuXG5DT0M3LnN0YXR1cyA9IHtcbiAgdGVtcG9JbnNhbmU6ICd0ZW1wb0luc2FuZScsXG4gIGluZGVmSW5zYW5lOiAnaW5kZWZJbnNhbmUnLFxuICB1bmNvbnNjaW91czogJ3VuY29uc2Npb3VzJyxcbiAgY3JpdGljYWxXb3VuZHM6ICdjcml0aWNhbFdvdW5kcycsXG4gIGR5aW5nOiAnZHlpbmcnLFxuICBwcm9uZTogJ3Byb25lJyxcbiAgZGVhZDogJ2RlYWQnXG59XG5cbkNPQzcubmV3Qm9va05hbWUgPSAnQ29DNy5OZXdCb29rTmFtZSdcbkNPQzcubmV3U2tpbGxOYW1lID0gJ0NvQzcuTmV3U2tpbGxOYW1lJ1xuQ09DNy5uZXdTcGVsbE5hbWUgPSAnQ29DNy5OZXdTcGVsbE5hbWUnXG5DT0M3Lm5ld0l0ZW1OYW1lID0gJ0NvQzcuTmV3SXRlbU5hbWUnXG5DT0M3Lm5ld1dlYXBvbk5hbWUgPSAnQ29DNy5OZXdXZWFwb25OYW1lJ1xuXG5DT0M3LmNyZWF0dXJlRmlnaHRpbmdTa2lsbCA9ICdDb0M3LmNyZWF0dXJlRmlnaHRpbmdTa2lsbCdcblxuQ09DNy5maWdodGluZ1NwZWNpYWxpemF0aW9uTmFtZSA9ICdDb0M3LkZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lJ1xuQ09DNy5maXJlYXJtU3BlY2lhbGl6YXRpb25OYW1lID0gJ0NvQzcuRmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSdcblxuQ09DNy5jb21iYXRDYXJkcyA9IHtcbiAgZmlnaHRCYWNrOiAnQ29DNy5GaWdodEJhY2snLFxuICBkb2RnZTogJ0NvQzcuRG9kZ2UnLFxuICBtYW5ldXZlcjogJ0NvQzcuTWFuZXV2ZXInLFxuICBub1Jlc3BvbnNlOiAnQ29DNy5Ob1Jlc3BvbnNlJ1xufVxuIiwiLyogZ2xvYmFsIEFjdGl2ZUVmZmVjdCwgZm91bmRyeSwgZ2FtZSAqL1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4vY29uZmlnLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb0M3QWN0aXZlRWZmZWN0IGV4dGVuZHMgQWN0aXZlRWZmZWN0IHtcbiAgYXBwbHkgKGFjdG9yLCBjaGFuZ2UpIHtcbiAgICBpZiAoY2hhbmdlLmtleSA9PT0gJ3N5c3RlbS5hdHRyaWJzLmFybW9yLnZhbHVlJykge1xuICAgICAgLy8gQXJtb3IgY2FuIGJlIGZyZWUgdGV4dCBpZiBib3RoIGFyZSBudW1iZXJzIGFsbG93IGNhbGN1bGF0aW9uXG4gICAgICBpZiAoIWlzTmFOKGNoYW5nZS52YWx1ZSkgJiYgIWlzTmFOKGFjdG9yLnN5c3RlbS5hdHRyaWJzLmFybW9yLnZhbHVlKSkge1xuICAgICAgICBhY3Rvci5zeXN0ZW0uYXR0cmlicy5hcm1vci52YWx1ZSA9IE51bWJlcihhY3Rvci5zeXN0ZW0uYXR0cmlicy5hcm1vci52YWx1ZSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoYW5nZS5rZXkgPT09ICdzeXN0ZW0uYXR0cmlicy5kYi52YWx1ZScpIHtcbiAgICAgIC8vIElmIGRiIGlzIGN1cnJlbnRseSBhIG51bWJlciBhbGxvdyBzdHJpbmdzIHRvIGJlIGFwcGxpZWRcbiAgICAgIGlmIChpc05hTihjaGFuZ2UudmFsdWUpICYmICFpc05hTihhY3Rvci5zeXN0ZW0uYXR0cmlicy5kYi52YWx1ZSkpIHtcbiAgICAgICAgYWN0b3Iuc3lzdGVtLmF0dHJpYnMuZGIudmFsdWUgPSBTdHJpbmcoYWN0b3Iuc3lzdGVtLmF0dHJpYnMuZGIudmFsdWUpXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZXMgPSBzdXBlci5hcHBseShhY3RvciwgY2hhbmdlKVxuICAgIHJldHVybiBjaGFuZ2VzXG4gIH1cblxuICAvKipcbiAgICogTWFuYWdlIEFjdGl2ZSBFZmZlY3QgaW5zdGFuY2VzIHRocm91Z2ggdGhlIEFjdG9yIFNoZWV0IHZpYSBlZmZlY3QgY29udHJvbCBidXR0b25zLlxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50ICAgICAgVGhlIGxlZnQtY2xpY2sgZXZlbnQgb24gdGhlIGVmZmVjdCBjb250cm9sXG4gICAqIEBwYXJhbSB7QWN0b3J8SXRlbX0gb3duZXIgICAgICBUaGUgb3duaW5nIGRvY3VtZW50IHdoaWNoIG1hbmFnZXMgdGhpcyBlZmZlY3RcbiAgICogQHJldHVybnMge1Byb21pc2V8bnVsbH0gICAgICAgIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjaGFuZ2VzIGFyZSBjb21wbGV0ZS5cbiAgICovXG4gIHN0YXRpYyBvbk1hbmFnZUFjdGl2ZUVmZmVjdCAoZXZlbnQsIG93bmVyKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGEgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgbGkgPSBhLmNsb3Nlc3QoJ2xpJylcbiAgICBjb25zdCBlZmZlY3QgPSBsaS5kYXRhc2V0LmVmZmVjdElkXG4gICAgICA/IG93bmVyLmVmZmVjdHMuZ2V0KGxpLmRhdGFzZXQuZWZmZWN0SWQpXG4gICAgICA6IG51bGxcbiAgICBzd2l0Y2ggKGEuZGF0YXNldC5hY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICAgIHJldHVybiBvd25lci5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnQWN0aXZlRWZmZWN0JywgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRWZmZWN0TmV3JyksXG4gICAgICAgICAgICBpY29uOiAnaWNvbnMvc3ZnL2F1cmEuc3ZnJyxcbiAgICAgICAgICAgIG9yaWdpbjogb3duZXIudXVpZCxcbiAgICAgICAgICAgICdkdXJhdGlvbi5yb3VuZHMnOlxuICAgICAgICAgICAgICBsaS5kYXRhc2V0LmVmZmVjdFR5cGUgPT09ICd0ZW1wb3JhcnknID8gMSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRpc2FibGVkOiBsaS5kYXRhc2V0LmVmZmVjdFR5cGUgPT09ICdpbmFjdGl2ZSdcbiAgICAgICAgICB9XG4gICAgICAgIF0pXG4gICAgICBjYXNlICdlZGl0JzpcbiAgICAgICAgcmV0dXJuIGVmZmVjdC5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgIHJldHVybiBlZmZlY3QuZGVsZXRlKClcbiAgICAgIGNhc2UgJ3RvZ2dsZSc6XG4gICAgICAgIHJldHVybiBlZmZlY3QudXBkYXRlKHsgZGlzYWJsZWQ6ICFlZmZlY3QuZGlzYWJsZWQgfSlcbiAgICB9XG4gIH1cblxuICBfcHJlcGFyZUR1cmF0aW9uICgpIHtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHN1cGVyLl9wcmVwYXJlRHVyYXRpb24oKVxuICAgIGlmIChkdXJhdGlvbi50eXBlID09PSAnc2Vjb25kcycpIHtcbiAgICAgIGlmIChkdXJhdGlvbi5zZWNvbmRzID4gMzYwMCkge1xuICAgICAgICBkdXJhdGlvbi5sYWJlbCA9IG5ldyBEYXRlKGR1cmF0aW9uLnNlY29uZHMgKiAxMDAwKS50b0lTT1N0cmluZygpLnNsaWNlKDExLCAxOSlcbiAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24uc2Vjb25kcyA+IDEwMCkge1xuICAgICAgICBkdXJhdGlvbi5sYWJlbCA9IG5ldyBEYXRlKGR1cmF0aW9uLnNlY29uZHMgKiAxMDAwKS50b0lTT1N0cmluZygpLnNsaWNlKDE0LCAxOSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGR1cmF0aW9uXG4gIH1cblxuICBzdGF0aWMgZmlsdGVyQWN0aXZlRWZmZWN0cyAoZWZmZWN0LCBjb25kaXRpb25OYW1lKSB7XG4gICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzExJykpIHtcbiAgICAgIC8vIEZvdW5kcnlWVFQgdjEwXG4gICAgICByZXR1cm4gZWZmZWN0LmZsYWdzLmNvcmU/LnN0YXR1c0lkID09PSBjb25kaXRpb25OYW1lXG4gICAgfVxuICAgIHJldHVybiBlZmZlY3Quc3RhdHVzZXMuaGFzKGNvbmRpdGlvbk5hbWUpXG4gIH1cblxuICBzdGF0aWMgZ2V0U3RhdHVzS2V5IChlZmZlY3QpIHtcbiAgICBsZXQgb3B0aW9ucyA9IFtdXG4gICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzExJykpIHtcbiAgICAgIC8vIEZvdW5kcnlWVFQgdjEwXG4gICAgICBvcHRpb25zID0gW2VmZmVjdC5nZXRGbGFnKCdjb3JlJywgJ3N0YXR1c0lkJyldXG4gICAgfSBlbHNlIGlmIChlZmZlY3Quc3RhdHVzZXMuc2l6ZSA+IDApIHtcbiAgICAgIG9wdGlvbnMgPSBbLi4uZWZmZWN0LnN0YXR1c2VzLnZhbHVlcygpXVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucy5maW5kKHYgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKENPQzcuc3RhdHVzLCB2KSlcbiAgfVxuXG4gIGdldCBpc1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBDb0M3QWN0aXZlRWZmZWN0LmdldFN0YXR1c0tleSh0aGlzKSA9PT0gJ3N0cmluZydcbiAgfVxuXG4gIHN0YXRpYyBwcmVwYXJlQWN0aXZlRWZmZWN0Q2F0ZWdvcmllcyAoZWZmZWN0cywgeyBzdGF0dXMgPSB0cnVlIH0gPSB7fSkge1xuICAgIC8vIERlZmluZSBlZmZlY3QgaGVhZGVyIGNhdGVnb3JpZXNcbiAgICBjb25zdCBjYXRlZ29yaWVzID0ge1xuICAgICAgdGVtcG9yYXJ5OiB7XG4gICAgICAgIHR5cGU6ICd0ZW1wb3JhcnknLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdUZW1wb3JhcnknKSxcbiAgICAgICAgZWZmZWN0czogW11cbiAgICAgIH0sXG4gICAgICBwYXNzaXZlOiB7XG4gICAgICAgIHR5cGU6ICdwYXNzaXZlJyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUGFzc2l2ZScpLFxuICAgICAgICBlZmZlY3RzOiBbXVxuICAgICAgfSxcbiAgICAgIGluYWN0aXZlOiB7XG4gICAgICAgIHR5cGU6ICdpbmFjdGl2ZScsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0luYWN0aXZlJyksXG4gICAgICAgIGVmZmVjdHM6IFtdXG4gICAgICB9LFxuICAgICAgc3VwcHJlc3NlZDoge1xuICAgICAgICB0eXBlOiAnc3VwcHJlc3NlZCcsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1N1cHByZXNzZWQnKSxcbiAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgIGluZm86IFtnYW1lLmkxOG4ubG9jYWxpemUoJ1VuYXZhaWxhYmxlJyldXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cykge1xuICAgICAgY2F0ZWdvcmllcy5zdGF0dXMgPSB7XG4gICAgICAgIHR5cGU6ICdzdGF0dXMnLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdTdGF0dXMnKSxcbiAgICAgICAgZWZmZWN0czogW11cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFjdGl2ZSBlZmZlY3RzLCBjbGFzc2lmeWluZyB0aGVtIGludG8gY2F0ZWdvcmllc1xuICAgIGZvciAoY29uc3QgZSBvZiBlZmZlY3RzKSB7XG4gICAgICBpZiAoZS5pc1N1cHByZXNzZWQpIGNhdGVnb3JpZXMuc3VwcHJlc3NlZC5lZmZlY3RzLnB1c2goZSlcbiAgICAgIGVsc2UgaWYgKGUuaXNTdGF0dXMpIGNhdGVnb3JpZXMuc3RhdHVzLmVmZmVjdHMucHVzaChlKVxuICAgICAgZWxzZSBpZiAoZS5kaXNhYmxlZCkgY2F0ZWdvcmllcy5pbmFjdGl2ZS5lZmZlY3RzLnB1c2goZSlcbiAgICAgIGVsc2UgaWYgKGUuaXNUZW1wb3JhcnkpIGNhdGVnb3JpZXMudGVtcG9yYXJ5LmVmZmVjdHMucHVzaChlKVxuICAgICAgZWxzZSBjYXRlZ29yaWVzLnBhc3NpdmUuZWZmZWN0cy5wdXNoKGUpXG4gICAgfVxuXG4gICAgY2F0ZWdvcmllcy5zdXBwcmVzc2VkLmhpZGRlbiA9ICFjYXRlZ29yaWVzLnN1cHByZXNzZWQuZWZmZWN0cy5sZW5ndGhcbiAgICByZXR1cm4gY2F0ZWdvcmllc1xuICB9XG5cbiAgc3RhdGljIHByZXBhcmVOUENBY3RpdmVFZmZlY3RDYXRlZ29yaWVzIChlZmZlY3RzKSB7XG4gICAgbGV0IGNvdW50ID0gMFxuICAgIC8vIERlZmluZSBlZmZlY3QgaGVhZGVyIGNhdGVnb3JpZXNcbiAgICBjb25zdCBjYXRlZ29yaWVzID0ge1xuICAgICAgYWN0aXZlOiB7XG4gICAgICAgIHR5cGU6ICdhY3RpdmUnLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdBY3RpdmUnKSxcbiAgICAgICAgZWZmZWN0czogW11cbiAgICAgIH0sXG4gICAgICBpbmFjdGl2ZToge1xuICAgICAgICB0eXBlOiAnaW5hY3RpdmUnLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdJbmFjdGl2ZScpLFxuICAgICAgICBlZmZlY3RzOiBbXVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBJdGVyYXRlIG92ZXIgYWN0aXZlIGVmZmVjdHMsIGNsYXNzaWZ5aW5nIHRoZW0gaW50byBjYXRlZ29yaWVzXG4gICAgZm9yIChjb25zdCBlIG9mIGVmZmVjdHMpIHtcbiAgICAgIGNvdW50ICs9IDFcbiAgICAgIGUuX2dldFNvdXJjZU5hbWUoKSAvLyBUcmlnZ2VyIGEgbG9va3VwIGZvciB0aGUgc291cmNlIG5hbWVcbiAgICAgIGlmIChlLmlzU3VwcHJlc3NlZCB8fCBlLmRpc2FibGVkKSBjYXRlZ29yaWVzLmluYWN0aXZlLmVmZmVjdHMucHVzaChlKVxuICAgICAgZWxzZSBjYXRlZ29yaWVzLmFjdGl2ZS5lZmZlY3RzLnB1c2goZSlcbiAgICB9XG5cbiAgICBpZiAoY291bnQgPiAwKSBjYXRlZ29yaWVzLmV4cGVuZGVkID0gdHJ1ZVxuICAgIHJldHVybiBjYXRlZ29yaWVzXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBDaGF0TWVzc2FnZSwgQ09ORklHLCBnYW1lLCBSb2xsICovXG5cbmV4cG9ydCBjbGFzcyBDb0M3RGljZSB7XG4gIHN0YXRpYyBhc3luYyByb2xsIChtb2RpZiA9IDAsIHJvbGxNb2RlID0gbnVsbCwgaGlkZURpY2UgPSBmYWxzZSkge1xuICAgIGxldCBhbHRlcm5hdGl2ZURpY2UgPSAnJ1xuICAgIGlmIChnYW1lLm1vZHVsZXMuZ2V0KCdkaWNlLXNvLW5pY2UnKT8uYWN0aXZlKSB7XG4gICAgICBpZiAobW9kaWYgPCAwKSB7XG4gICAgICAgIGFsdGVybmF0aXZlRGljZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3RlbkRpZVBlbmFsdHknKVxuICAgICAgfSBlbHNlIGlmIChtb2RpZiA+IDApIHtcbiAgICAgICAgYWx0ZXJuYXRpdmVEaWNlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndGVuRGllQm9udXMnKVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgcm9sbFxuICAgIGlmIChcbiAgICAgIGdhbWUuQ29DNy5kZXYuZGljZS5hbHdheXNDcml0ICYmXG4gICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdoaWRkZW5kZXZtZW51JylcbiAgICApIHtcbiAgICAgIHJvbGwgPSBSb2xsLmZyb21EYXRhKENvQzdEaWNlLmNyaXQwMSlcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZ2FtZS5Db0M3LmRldi5kaWNlLmFsd2F5c0Z1bWJsZSAmJlxuICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnaGlkZGVuZGV2bWVudScpXG4gICAgKSB7XG4gICAgICByb2xsID0gUm9sbC5mcm9tRGF0YShDb0M3RGljZS5mdW1ibGU5OSlcbiAgICB9IGVsc2Uge1xuICAgICAgcm9sbCA9IGF3YWl0IG5ldyBSb2xsKFxuICAgICAgICAnMWR0JyArXG4gICAgICAgICAgKGFsdGVybmF0aXZlRGljZSAhPT0gJydcbiAgICAgICAgICAgID8gJysxZG9bJyArIGFsdGVybmF0aXZlRGljZSArICddJ1xuICAgICAgICAgICAgOiAnKzFkdCdcbiAgICAgICAgICApLnJlcGVhdChNYXRoLmFicyhtb2RpZikpICtcbiAgICAgICAgICAnKzFkMTAnXG4gICAgICApLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHVuaXQ6IHtcbiAgICAgICAgdG90YWw6IDAsXG4gICAgICAgIHJlc3VsdHM6IFtdXG4gICAgICB9LFxuICAgICAgdGVuczoge1xuICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgcmVzdWx0czogW11cbiAgICAgIH0sXG4gICAgICB0b3RhbDogMCxcbiAgICAgIHJvbGxcbiAgICB9XG5cbiAgICBpZiAocm9sbE1vZGUpIHJlc3VsdC5yb2xsTW9kZSA9IHJvbGxNb2RlXG4gICAgaWYgKGhpZGVEaWNlKSByZXN1bHQuaGlkZURpY2UgPSBoaWRlRGljZVxuICAgIGZvciAoY29uc3QgZCBvZiByb2xsLmRpY2UpIHtcbiAgICAgIGlmIChkIGluc3RhbmNlb2YgQ09ORklHLkRpY2UudGVybXMudCkge1xuICAgICAgICByZXN1bHQudGVucy5yZXN1bHRzLnB1c2goZC50b3RhbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC51bml0LnRvdGFsID0gZC50b3RhbCA9PT0gMTAgPyAwIDogZC50b3RhbFxuICAgICAgICByZXN1bHQudW5pdC5yZXN1bHRzLnB1c2gocmVzdWx0LnVuaXQudG90YWwpXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtb2RpZiA8IDApIHtcbiAgICAgIHJlc3VsdC50ZW5zLnRvdGFsID1cbiAgICAgICAgcmVzdWx0LnVuaXQudG90YWwgPT09IDAgJiYgcmVzdWx0LnRlbnMucmVzdWx0cy5pbmNsdWRlcygwKVxuICAgICAgICAgID8gMTAwXG4gICAgICAgICAgOiBNYXRoLm1heCguLi5yZXN1bHQudGVucy5yZXN1bHRzKVxuICAgIH0gZWxzZSBpZiAocmVzdWx0LnVuaXQudG90YWwgPT09IDApIHtcbiAgICAgIGNvbnN0IGRpY2UgPSByZXN1bHQudGVucy5yZXN1bHRzLmZpbHRlcih0ID0+IHQgPiAwKVxuICAgICAgcmVzdWx0LnRlbnMudG90YWwgPSBkaWNlLmxlbmd0aCA9PT0gMCA/IDEwMCA6IE1hdGgubWluKC4uLmRpY2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC50ZW5zLnRvdGFsID0gTWF0aC5taW4oLi4ucmVzdWx0LnRlbnMucmVzdWx0cylcbiAgICB9XG4gICAgcmVzdWx0LnRvdGFsID0gcmVzdWx0LnVuaXQudG90YWwgKyByZXN1bHQudGVucy50b3RhbFxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBzaG93Um9sbERpY2UzZCAocm9sbCkge1xuICAgIGlmIChnYW1lLm1vZHVsZXMuZ2V0KCdkaWNlLXNvLW5pY2UnKT8uYWN0aXZlKSB7XG4gICAgICBjb25zdCBzeW5jRGljZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3N5bmNEaWNlM2QnKVxuXG4gICAgICBjb25zdCBjaGF0RGF0YSA9IHtcbiAgICAgICAgd2hpc3BlcjogbnVsbCxcbiAgICAgICAgYmxpbmQ6IGZhbHNlXG4gICAgICB9XG4gICAgICBDaGF0TWVzc2FnZS5hcHBseVJvbGxNb2RlKGNoYXREYXRhLCBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpKVxuXG4gICAgICBhd2FpdCBnYW1lLmRpY2UzZC5zaG93Rm9yUm9sbChcbiAgICAgICAgcm9sbCxcbiAgICAgICAgZ2FtZS51c2VyLFxuICAgICAgICBzeW5jRGljZSxcbiAgICAgICAgY2hhdERhdGEud2hpc3BlcixcbiAgICAgICAgY2hhdERhdGEuYmxpbmRcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY29tYmluZWRSb2xsIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucy5wb29sID0gb3B0aW9ucy5wb29sID8/IHt9XG4gICAgb3B0aW9ucy5wb29sWycwJ10gPSBmYWxzZVxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zLnBvb2wpLm1hcCh2ID0+IHBhcnNlSW50KHYsIDEwKSlcbiAgICBsZXQgcGVuYWx0eURpY2UgPSBNYXRoLmFicyhNYXRoLm1pbigwLCBNYXRoLm1pbiguLi5rZXlzKSkpXG4gICAgbGV0IGJvbnVzRGljZSA9IE1hdGgubWF4KDAsIE1hdGgubWF4KC4uLmtleXMpKVxuICAgIGNvbnN0IGhhc0RTTiA9IGdhbWUubW9kdWxlcy5nZXQoJ2RpY2Utc28tbmljZScpPy5hY3RpdmVcblxuICAgIGNvbnN0IHBvb2wgPSBbXVxuICAgIHBvb2wucHVzaCgnMWR0KzFkMTAnKVxuXG4gICAgaWYgKHBlbmFsdHlEaWNlID4gMCkge1xuICAgICAgcG9vbC5wdXNoKFxuICAgICAgICAoaGFzRFNOXG4gICAgICAgICAgPyAnKzFkb1snICsgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndGVuRGllUGVuYWx0eScpICsgJ10nXG4gICAgICAgICAgOiAnMWR0J1xuICAgICAgICApLnJlcGVhdChNYXRoLmFicyhwZW5hbHR5RGljZSkpXG4gICAgICApXG4gICAgfVxuICAgIGlmIChib251c0RpY2UgPiAwKSB7XG4gICAgICBwb29sLnB1c2goXG4gICAgICAgIChoYXNEU05cbiAgICAgICAgICA/ICcrMWRvWycgKyBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd0ZW5EaWVCb251cycpICsgJ10nXG4gICAgICAgICAgOiAnMWR0J1xuICAgICAgICApLnJlcGVhdChNYXRoLmFicyhib251c0RpY2UpKVxuICAgICAgKVxuICAgIH1cbiAgICBjb25zdCByb2xsID0gYXdhaXQgbmV3IFJvbGwocG9vbC5qb2luKCcnKSkucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgZ3JvdXBzOiB7XG4gICAgICAgIGJhc2VEaWU6IDAsXG4gICAgICAgIHBlbmFsdHlEaWNlOiBbXSxcbiAgICAgICAgYm9udXNEaWNlOiBbXVxuICAgICAgfSxcbiAgICAgIHVuaXQ6IDAsXG4gICAgICByb2xsXG4gICAgfVxuICAgIGxldCBiYXNlU2V0ID0gZmFsc2VcbiAgICBmb3IgKGNvbnN0IGQgb2Ygcm9sbC5kaWNlKSB7XG4gICAgICBpZiAoZCBpbnN0YW5jZW9mIENPTkZJRy5EaWNlLnRlcm1zLnQpIHtcbiAgICAgICAgaWYgKCFiYXNlU2V0KSB7XG4gICAgICAgICAgcmVzdWx0Lmdyb3Vwcy5iYXNlRGllID0gZC50b3RhbFxuICAgICAgICAgIGJhc2VTZXQgPSB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAocGVuYWx0eURpY2UgPiAwKSB7XG4gICAgICAgICAgcmVzdWx0Lmdyb3Vwcy5wZW5hbHR5RGljZS5wdXNoKGQudG90YWwpXG4gICAgICAgICAgcGVuYWx0eURpY2UtLVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5ncm91cHMuYm9udXNEaWNlLnB1c2goZC50b3RhbClcbiAgICAgICAgICBib251c0RpY2UtLVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQudW5pdCA9IGQudG90YWwgPT09IDEwID8gMCA6IGQudG90YWxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvdXRwdXQgPSB7fVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucy5wb29sKSB7XG4gICAgICBvdXRwdXRba2V5XSA9IHtcbiAgICAgICAgdW5pdDoge1xuICAgICAgICAgIHRvdGFsOiByZXN1bHQudW5pdCxcbiAgICAgICAgICByZXN1bHRzOiBbcmVzdWx0LnVuaXRdXG4gICAgICAgIH0sXG4gICAgICAgIHRlbnM6IHtcbiAgICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgICByZXN1bHRzOiBbXVxuICAgICAgICB9LFxuICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgcm9sbFxuICAgICAgfVxuICAgICAgY29uc3QgbW9kaWYgPSBwYXJzZUludChrZXksIDEwKVxuICAgICAgbGV0IG1vZGlmaWVyID0gbW9kaWZcbiAgICAgIG91dHB1dFtrZXldLnRlbnMucmVzdWx0cy5wdXNoKHJlc3VsdC5ncm91cHMuYmFzZURpZSlcbiAgICAgIGZvciAoY29uc3Qgb2Zmc2V0ID0gTWF0aC5hYnMobW9kaWZpZXIpOyBtb2RpZmllciA8IDA7IG1vZGlmaWVyKyspIHtcbiAgICAgICAgb3V0cHV0W2tleV0udGVucy5yZXN1bHRzLnB1c2goXG4gICAgICAgICAgcmVzdWx0Lmdyb3Vwcy5wZW5hbHR5RGljZVttb2RpZmllciArIG9mZnNldF1cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBvZmZzZXQgPSBtb2RpZmllcjsgbW9kaWZpZXIgPiAwOyBtb2RpZmllci0tKSB7XG4gICAgICAgIG91dHB1dFtrZXldLnRlbnMucmVzdWx0cy5wdXNoKFxuICAgICAgICAgIHJlc3VsdC5ncm91cHMuYm9udXNEaWNlW01hdGguYWJzKG1vZGlmaWVyIC0gb2Zmc2V0KV1cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKG1vZGlmIDwgMCkge1xuICAgICAgICBvdXRwdXRba2V5XS50ZW5zLnRvdGFsID1cbiAgICAgICAgICBvdXRwdXRba2V5XS51bml0LnRvdGFsID09PSAwICYmIG91dHB1dFtrZXldLnRlbnMucmVzdWx0cy5pbmNsdWRlcygwKVxuICAgICAgICAgICAgPyAxMDBcbiAgICAgICAgICAgIDogTWF0aC5tYXgoLi4ub3V0cHV0W2tleV0udGVucy5yZXN1bHRzKVxuICAgICAgfSBlbHNlIGlmIChvdXRwdXRba2V5XS51bml0LnRvdGFsID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGRpY2UgPSBvdXRwdXRba2V5XS50ZW5zLnJlc3VsdHMuZmlsdGVyKHQgPT4gdCA+IDApXG4gICAgICAgIG91dHB1dFtrZXldLnRlbnMudG90YWwgPSBkaWNlLmxlbmd0aCA9PT0gMCA/IDEwMCA6IE1hdGgubWluKC4uLmRpY2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XS50ZW5zLnRvdGFsID0gTWF0aC5taW4oLi4ub3V0cHV0W2tleV0udGVucy5yZXN1bHRzKVxuICAgICAgfVxuICAgICAgb3V0cHV0W2tleV0udG90YWwgPSBvdXRwdXRba2V5XS51bml0LnRvdGFsICsgb3V0cHV0W2tleV0udGVucy50b3RhbFxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cblxuICAvLyBQcmVkZXRlcm1pbmVkIHZhbHVlIG9mIGRpY2UsIHVzZWQgb25seSBmb3IgREVWIGFuZCB0ZXN0IHB1cnBvc2VzXG4gIHN0YXRpYyBmdW1ibGU5OSA9IHtcbiAgICBjbGFzczogJ1JvbGwnLFxuICAgIG9wdGlvbnM6IHt9LFxuICAgIGRpY2U6IFtdLFxuICAgIGZvcm11bGE6ICcxZHQgKyAxZDEwJyxcbiAgICB0ZXJtczogW1xuICAgICAge1xuICAgICAgICBjbGFzczogJ0NvQzdEZWNhZGVyRGllJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIGV2YWx1YXRlZDogdHJ1ZSxcbiAgICAgICAgbnVtYmVyOiAxLFxuICAgICAgICBmYWNlczogMTAsXG4gICAgICAgIG1vZGlmaWVyczogW10sXG4gICAgICAgIHJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQ6IDksXG4gICAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzOiAnT3BlcmF0b3JUZXJtJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIGV2YWx1YXRlZDogdHJ1ZSxcbiAgICAgICAgb3BlcmF0b3I6ICcrJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3M6ICdEaWUnLFxuICAgICAgICBvcHRpb25zOiB7fSxcbiAgICAgICAgZXZhbHVhdGVkOiB0cnVlLFxuICAgICAgICBudW1iZXI6IDEsXG4gICAgICAgIGZhY2VzOiAxMCxcbiAgICAgICAgbW9kaWZpZXJzOiBbXSxcbiAgICAgICAgcmVzdWx0czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlc3VsdDogOSxcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF0sXG4gICAgdG90YWw6IDk5LFxuICAgIGV2YWx1YXRlZDogdHJ1ZVxuICB9XG5cbiAgc3RhdGljIGNyaXQwMSA9IHtcbiAgICBjbGFzczogJ1JvbGwnLFxuICAgIG9wdGlvbnM6IHt9LFxuICAgIGRpY2U6IFtdLFxuICAgIGZvcm11bGE6ICcxZHQgKyAxZDEwJyxcbiAgICB0ZXJtczogW1xuICAgICAge1xuICAgICAgICBjbGFzczogJ0NvQzdEZWNhZGVyRGllJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIGV2YWx1YXRlZDogdHJ1ZSxcbiAgICAgICAgbnVtYmVyOiAxLFxuICAgICAgICBmYWNlczogMTAsXG4gICAgICAgIG1vZGlmaWVyczogW10sXG4gICAgICAgIHJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQ6IDEwLFxuICAgICAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzczogJ09wZXJhdG9yVGVybScsXG4gICAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgICBldmFsdWF0ZWQ6IHRydWUsXG4gICAgICAgIG9wZXJhdG9yOiAnKydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzOiAnRGllJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIGV2YWx1YXRlZDogdHJ1ZSxcbiAgICAgICAgbnVtYmVyOiAxLFxuICAgICAgICBmYWNlczogMTAsXG4gICAgICAgIG1vZGlmaWVyczogW10sXG4gICAgICAgIHJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQ6IDEsXG4gICAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdLFxuICAgIHRvdGFsOiAxLFxuICAgIGV2YWx1YXRlZDogdHJ1ZVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ09ORklHLCBmb3VuZHJ5LCBnYW1lLCBJdGVtLCBSb2xsLCBUZXh0RWRpdG9yLCBUb2tlbiwgdWksIGZyb21VdWlkICovXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IENvQ0lERWRpdG9yIH0gZnJvbSAnLi4vYXBwcy9jb2MtaWQtZWRpdG9yLmpzJ1xuXG4vKipcbiAqIE92ZXJyaWRlIGFuZCBleHRlbmQgdGhlIGJhc2ljIDpjbGFzczpgSXRlbWAgaW1wbGVtZW50YXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdJdGVtIGV4dGVuZHMgSXRlbSB7XG4gIC8qKiBDcmVhdGUgZGVyaXZlZCBkb2N1bWVudCBjbGFzc2VzIGZvciBzcGVjaWZpYyBJdGVtIHR5cGVzICovXG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgLyoqIEBzZWUgQ09ORklHLkl0ZW0uZG9jdW1lbnRDbGFzc2VzIGluIG1vZHVsZS9zY3JpcHRzL2NvbmZpZ3VyZS1kb2N1bWVudHMgKi9cbiAgICBpZiAoZGF0YS50eXBlIGluIENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3NlcyAmJiAhY29udGV4dD8uZXh0ZW5kZWQpIHtcbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB0aGUgY29uc3RydWN0b3IgZm9yIHRoZSBuZXcgY2xhc3Mgd2lsbCBjYWxsIGl0J3Mgc3VwZXIoKSxcbiAgICAgICAqIHRoZSBleHRlbmRlZCBmbGFnIHdpbGwgYmUgdHJ1ZSwgdGh1cyBieXBhc3NpbmcgdGhpcyB3aG9sZSBwcm9jZXNzXG4gICAgICAgKiBhbmQgcmVzdW1lIGRlZmF1bHQgYmVoYXZpb3JcbiAgICAgICAqL1xuICAgICAgcmV0dXJuIG5ldyBDT05GSUcuSXRlbS5kb2N1bWVudENsYXNzZXNbZGF0YS50eXBlXShkYXRhLCB7XG4gICAgICAgIC4uLnsgZXh0ZW5kZWQ6IHRydWUgfSxcbiAgICAgICAgLi4uY29udGV4dFxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChkYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgZGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9za2lsbHMuc3ZnJ1xuICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdzdGF0dXMnKSB7XG4gICAgICAgIGRhdGEuaW1nID0gJ2ljb25zL3N2Zy9hdXJhLnN2ZydcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnd2VhcG9uJykge1xuICAgICAgICBkYXRhLmltZyA9ICdpY29ucy9zdmcvc3dvcmQuc3ZnJ1xuICAgICAgfVxuICAgIH1cbiAgICAvKiogRGVmYXVsdCBiZWhhdmlvciwganVzdCBjYWxsIHN1cGVyKCkgYW5kIGRvIGFsbCB0aGUgZGVmYXVsdCBJdGVtIGluaXRzICovXG4gICAgc3VwZXIoZGF0YSwgY29udGV4dClcbiAgfVxuXG4gIGFzeW5jIF9jcmVhdGVEb2N1bWVudExpbmsgKGV2ZW50RGF0YSwgeyByZWxhdGl2ZVRvLCBsYWJlbCB9ID0ge30pIHtcbiAgICBpZiAodHlwZW9mIGV2ZW50RGF0YS50eXBlID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgZXZlbnREYXRhLnV1aWQgPT09ICdzdHJpbmcnICYmIGV2ZW50RGF0YS50eXBlID09PSAnSXRlbScgJiYgZXZlbnREYXRhLnV1aWQubWF0Y2goL15BY3RvclxcLi8pICYmIHJlbGF0aXZlVG8gaW5zdGFuY2VvZiBDT05GSUcuSm91cm5hbEVudHJ5UGFnZS5kb2N1bWVudENsYXNzKSB7XG4gICAgICAvLyBJZiBkcm9wcGluZyBhIHNraWxsL3dlYXBvbiBmcm9tIGFuIEFjdG9yIG9udG8gYSBKb3VybmFsIEVudHJ5IFBhZ2UgY29udmVydCB0byBhIGNoZWNrIGxpbmtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCBmcm9tVXVpZChldmVudERhdGEudXVpZClcbiAgICAgIGlmIChbJ3NraWxsJywgJ3dlYXBvbiddLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcbiAgICAgICAgcmV0dXJuICdAY29jNy5jaGVja1t0eXBlOicgKyBpdGVtLnR5cGUgKyAnLG5hbWU6JyArIGl0ZW0ubmFtZSArICddJ1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuX2NyZWF0ZURvY3VtZW50TGluayhldmVudERhdGEsIHsgcmVsYXRpdmVUbywgbGFiZWwgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaWNvbkxhbmd1YWdlICgpIHtcbiAgICByZXR1cm4gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvc2tpbGxzL2xhbmd1YWdlLnN2ZydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZmxhZ3MgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYWxmdW5jdGlvbjogJ21hbGZjJ1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgb24gb2YgdGhlIGl0ZW0gcHJvcGVydHkgaW4gZGF0YS5kYXRhLnByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5SWQgOiBuYW1lIGZvciB0aGUgcHJvcGVydHkgdG8gdG9nZ2xlXG4gICAqL1xuICBhc3luYyB0b2dnbGVQcm9wZXJ0eSAocHJvcGVydHlJZCwgb3ZlcnJpZGUgPSBmYWxzZSkge1xuICAgIGxldCBjaGVja2VkUHJvcHMgPSB7fVxuICAgIGxldCBmaWdodGluZ1xuICAgIGxldCBmaXJlYXJtc1xuICAgIGlmICh0eXBlb2YgQ09DNy5lcmFzW3Byb3BlcnR5SWRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIENvQ0lERWRpdG9yLmVyYVRvZ2dsZSh0aGlzLCBwcm9wZXJ0eUlkKVxuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSAnd2VhcG9uJyAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgIGlmIChwcm9wZXJ0eUlkID09PSAnYWhkYicpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmFoZGIpIHtcbiAgICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuYWhkYic6IHRydWUsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuYWRkYic6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5haGRiJzogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5SWQgPT09ICdhZGRiJykge1xuICAgICAgICBpZiAoIXRoaXMuc3lzdGVtLnByb3BlcnRpZXMuYWRkYikge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5hZGRiJzogdHJ1ZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5haGRiJzogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2tlZFByb3BzID0ge1xuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmFkZGInOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcGVydHlJZCA9PT0gJ3Nob3RndW4nKSB7XG4gICAgICAgIGlmICghdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5zaG90Z3VuKSB7XG4gICAgICAgICAgY2hlY2tlZFByb3BzID0ge1xuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QnOiB0cnVlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLm1lbGVlJzogZmFsc2UsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuc2hvdGd1bic6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2tlZFByb3BzID0ge1xuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnNob3RndW4nOiBmYWxzZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucmFuZ2UuZXh0cmVtZS52YWx1ZSc6IG51bGwsXG4gICAgICAgICAgICAnc3lzdGVtLnJhbmdlLmV4dHJlbWUuZGFtYWdlJzogbnVsbCxcbiAgICAgICAgICAgICdzeXN0ZW0ucmFuZ2UubG9uZy52YWx1ZSc6IG51bGwsXG4gICAgICAgICAgICAnc3lzdGVtLnJhbmdlLmxvbmcuZGFtYWdlJzogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcGVydHlJZCA9PT0gJ21lbGVlJyB8fCBwcm9wZXJ0eUlkID09PSAncm5nZCcpIHtcbiAgICAgICAgbGV0IG1lbGVlV2VhcG9uXG4gICAgICAgIGlmIChwcm9wZXJ0eUlkID09PSAnbWVsZWUnICYmICF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLm1lbGVlKSB7XG4gICAgICAgICAgbWVsZWVXZWFwb24gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5SWQgPT09ICdtZWxlZScgJiYgdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5tZWxlZSkge1xuICAgICAgICAgIG1lbGVlV2VhcG9uID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcGVydHlJZCA9PT0gJ3JuZ2QnICYmICF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgICAgICBtZWxlZVdlYXBvbiA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5SWQgPT09ICdybmdkJyAmJiB0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgICAgICBtZWxlZVdlYXBvbiA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVsZWVXZWFwb24pIHtcbiAgICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMubWVsZWUnOiB0cnVlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QnOiBmYWxzZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5zaG90Z3VuJzogZmFsc2UsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuYnJzdCc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmF1dG8nOiBmYWxzZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5kYnJsJzogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2tlZFByb3BzID0ge1xuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLm1lbGVlJzogZmFsc2UsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMucm5nZCc6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ3NraWxsJyAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgIGxldCBtb2RpZiA9IGZhbHNlXG4gICAgICBpZiAocHJvcGVydHlJZCA9PT0gJ2NvbWJhdCcpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCkge1xuICAgICAgICAgIC8vIENsb3NlIGNvbWJhdCBieSBkZWZhdWx0XG4gICAgICAgICAgaWYgKCF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0pIHtcbiAgICAgICAgICAgIGZpZ2h0aW5nID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSBmaXJlYXJtcyA9IHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuY29tYmF0JzogZmFsc2UsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nJzogZmFsc2UsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5zcGVjaWFsaXphdGlvbic6ICcnLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5zeXN0ZW0uc2tpbGxOYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1vZGlmID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcGVydHlJZCA9PT0gJ2ZpZ2h0aW5nJykge1xuICAgICAgICBpZiAoIXRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcpIHtcbiAgICAgICAgICBmaXJlYXJtcyA9IGZhbHNlXG4gICAgICAgICAgZmlnaHRpbmcgPSB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyZWFybXMgPSB0cnVlXG4gICAgICAgICAgZmlnaHRpbmcgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIG1vZGlmID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcGVydHlJZCA9PT0gJ2ZpcmVhcm0nKSB7XG4gICAgICAgIGlmICghdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtKSB7XG4gICAgICAgICAgZmlyZWFybXMgPSB0cnVlXG4gICAgICAgICAgZmlnaHRpbmcgPSBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcmVhcm1zID0gZmFsc2VcbiAgICAgICAgICBmaWdodGluZyA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBtb2RpZiA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGlmKSB7XG4gICAgICAgIC8vIHNldCBzcGVjaWFsaXNhdGlvbiBpZiBmaWdodGluZyBvciBmaXJlYXJtXG4gICAgICAgIGlmIChmaWdodGluZykge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5maWdodGluZyc6IHRydWUsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCc6IHRydWUsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCc6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgdGhpcy5zeXN0ZW0uc2tpbGxOYW1lLFxuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKENPQzcuZmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUpXG4gICAgICAgICAgKVxuICAgICAgICAgIGNoZWNrZWRQcm9wcy5uYW1lID0gcGFydHMubmFtZVxuICAgICAgICAgIGNoZWNrZWRQcm9wcy5za2lsbE5hbWUgPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgICAgICBjaGVja2VkUHJvcHNbJ3N5c3RlbS5zcGVjaWFsaXphdGlvbiddID0gcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyZWFybXMpIHtcbiAgICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcnOiBmYWxzZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtJzogdHJ1ZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5jb21iYXQnOiB0cnVlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWwnOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHBhcnRzID0gQ29DN0l0ZW0uZ2V0TmFtZVBhcnRzU3BlYyhcbiAgICAgICAgICAgIHRoaXMuc3lzdGVtLnNraWxsTmFtZSxcbiAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3LmZpcmVhcm1TcGVjaWFsaXphdGlvbk5hbWUpXG4gICAgICAgICAgKVxuICAgICAgICAgIGNoZWNrZWRQcm9wcy5uYW1lID0gcGFydHMubmFtZVxuICAgICAgICAgIGNoZWNrZWRQcm9wcy5za2lsbE5hbWUgPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgICAgICBjaGVja2VkUHJvcHNbJ3N5c3RlbS5zcGVjaWFsaXphdGlvbiddID0gcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9wZXJ0eUlkID09PSAnc3BlY2lhbCcpIHtcbiAgICAgIGlmICh0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzW3Byb3BlcnR5SWRdKSB7XG4gICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCc6IGZhbHNlLFxuICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5maWdodGluZyc6IGZhbHNlLFxuICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtJzogZmFsc2UsXG4gICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCc6IGZhbHNlLFxuICAgICAgICAgICdzeXN0ZW0uc3BlY2lhbGl6YXRpb24nOiAnJyxcbiAgICAgICAgICBuYW1lOiB0aGlzLnN5c3RlbS5za2lsbE5hbWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hlY2tlZFByb3BzID0ge1xuICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5zcGVjaWFsJzogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiB0aGlzLnN5c3RlbS5zcGVjaWFsaXphdGlvbiArICcgKCcgKyB0aGlzLnN5c3RlbS5za2lsbE5hbWUgKyAnKSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyhjaGVja2VkUHJvcHMpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCB0aGlzLnVwZGF0ZShjaGVja2VkUHJvcHMpXG4gICAgICByZXR1cm4gaXRlbVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwcm9wTmFtZSA9IGBzeXN0ZW0ucHJvcGVydGllcy4ke3Byb3BlcnR5SWR9YFxuICAgICAgY29uc3QgcHJvcFZhbHVlID0gIXRoaXMuc3lzdGVtLnByb3BlcnRpZXNbcHJvcGVydHlJZF1cbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgW3Byb3BOYW1lXTogcHJvcFZhbHVlIH0pLnRoZW4oaXRlbSA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGhhc1Byb3BlcnR5IChwcm9wZXJ0eUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbmNsdWRlZEluU2V0KCdwcm9wZXJ0aWVzJywgcHJvcGVydHlJZClcbiAgfVxuXG4gIGdldCBzaG9ydE5hbWUgKCkge1xuICAgIGlmICh0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN5c3RlbS5za2lsbE5hbWVcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubmFtZVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlUm9sbCAocm9sbCkge1xuICAgIGlmICgndXBkYXRlUm9sbCcgaW4gdGhpcy5zaGVldCkgcmV0dXJuIGF3YWl0IHRoaXMuc2hlZXQudXBkYXRlUm9sbChyb2xsKVxuICAgIGVsc2UgaWYgKCd1cGRhdGVSb2xsJyBpbiB0aGlzKSByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGVSb2xsKHJvbGwpXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgc3RhdGljIGdldE5hbWVQYXJ0c1NwZWMgKHNraWxsTmFtZSwgc3BlY2lhbGl6YXRpb24pIHtcbiAgICBpZiAoIXNwZWNpYWxpemF0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBza2lsbE5hbWUsXG4gICAgICAgIHNwZWNpYWxpemF0aW9uOiAnJyxcbiAgICAgICAgc2tpbGxOYW1lXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNwZWNOYW1lUmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgJ14oJyArIENvQzdVdGlsaXRpZXMucXVvdGVSZWdFeHAoc3BlY2lhbGl6YXRpb24pICsgJylcXFxccypcXFxcKCguKylcXFxcKSQnLFxuICAgICAgJ2knXG4gICAgKVxuICAgIGNvbnN0IG1hdGNoID0gc2tpbGxOYW1lLm1hdGNoKHNwZWNOYW1lUmVnZXgpXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBzcGVjaWFsaXphdGlvbiA9IG1hdGNoWzFdXG4gICAgICBza2lsbE5hbWUgPSBtYXRjaFsyXVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogc3BlY2lhbGl6YXRpb24gKyAnICgnICsgc2tpbGxOYW1lICsgJyknLFxuICAgICAgc3BlY2lhbGl6YXRpb24sXG4gICAgICBza2lsbE5hbWVcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0TmFtZVdpdGhvdXRTcGVjIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBDb0M3SXRlbSkge1xuICAgICAgaWYgKGl0ZW0uc3lzdGVtPy5wcm9wZXJ0aWVzPy5zcGVjaWFsICYmIHR5cGVvZiBpdGVtLnN5c3RlbS5za2lsbE5hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnN5c3RlbS5za2lsbE5hbWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGl0ZW0ucHJvcGVydGllcz8uc3BlY2lhbCAmJiB0eXBlb2YgaXRlbS5za2lsbE5hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnNraWxsTmFtZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlbS5uYW1lXG4gIH1cblxuICBzdGF0aWMgaXNBbnlTcGVjIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0udHlwZSAhPT0gJ3NraWxsJyB8fCAhaXRlbS5zeXN0ZW0ucHJvcGVydGllcz8uc3BlY2lhbCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5yZXF1aXJlc25hbWUgfHwgaXRlbS5zeXN0ZW0ucHJvcGVydGllcz8ucGlja25hbWVvbmx5KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFueVNwZWNOYW1lJykudG9Mb3dlckNhc2UoKSxcbiAgICAgICdhbnknXG4gICAgXS5pbmNsdWRlcyhDT05GSUcuSXRlbS5kb2N1bWVudENsYXNzZXMuc2tpbGwuZ3Vlc3NOYW1lUGFydHMoaXRlbS5uYW1lKS5za2lsbE5hbWUudG9Mb3dlckNhc2UoKSlcbiAgfVxuXG4gIGFzeW5jIGNoZWNrU2tpbGxQcm9wZXJ0aWVzICgpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnc2tpbGwnKSByZXR1cm5cbiAgICBjb25zdCBjaGVja2VkUHJvcHMgPSB7fVxuICAgIGlmICh0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCkge1xuICAgICAgLy8gaWYgc2tpbGwgaXMgbm90IGEgc3BlY2lhbGlzYXRpb24gbWFrZSBpdCBhIHNwZWNpYWxpc2F0aW9uXG4gICAgICBpZiAoIXRoaXMuc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCkge1xuICAgICAgICB0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWwgPSB0cnVlXG4gICAgICAgIGNoZWNrZWRQcm9wc1snc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCddID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICAvLyBJZiBza2lsbCBpcyBjb21iYXQgc2tpbGwgYW5kIG5vIHNwZWNpYWxpc2F0aW9uIHNldCB0aGVuIG1ha2UgaXQgYSBmaWdodGluZyggY2xvc2Vjb21iYXQpIHNraWxsXG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nICYmXG4gICAgICAgICF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm1cbiAgICAgICkge1xuICAgICAgICB0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nID0gdHJ1ZVxuICAgICAgICBjaGVja2VkUHJvcHNbJ3N5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nJ10gPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHNraWxsIGlzIGNsb3NlIGNvbWJhdCB3aXRob3V0IHNwZWNpYWxpc2F0aW9uIG5hbWUgbWFrZSBzZXQgaXQgYWNjb3JkaW5nIHRvIHRoZSBmaWdodGluZ1NwZWNpYWxpemF0aW9uTmFtZVxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nICYmXG4gICAgICAgICghdGhpcy5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gfHwgdGhpcy5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPT09ICcnKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnNwZWNpYWxpemF0aW9uID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgIENPQzcuZmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWVcbiAgICAgICAgKVxuICAgICAgICBjaGVja2VkUHJvcHNbJ3N5c3RlbS5zcGVjaWFsaXphdGlvbiddID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgIENPQzcuZmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWVcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICAvLyBpZiBza2lsbCBpcyByYW5nZSBjb21iYXQgd2l0aG91dCBhIHNwZWNpYWxpc2F0aW9uIG5hbWUgbWFrZSBzZXQgaXQgYWNjb3JkaW5nIHRvIHRoZSBmaXJlYXJtU3BlY2lhbGl6YXRpb25OYW1lXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSAmJlxuICAgICAgICAoIXRoaXMuc3lzdGVtLnNwZWNpYWxpemF0aW9uIHx8IHRoaXMuc3lzdGVtLnNwZWNpYWxpemF0aW9uID09PSAnJylcbiAgICAgICkge1xuICAgICAgICB0aGlzLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICBDT0M3LmZpcmVhcm1TcGVjaWFsaXphdGlvbk5hbWVcbiAgICAgICAgKVxuICAgICAgICBjaGVja2VkUHJvcHNbJ3N5c3RlbS5zcGVjaWFsaXphdGlvbiddID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgIENPQzcuZmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZVxuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcgPSBmYWxzZVxuICAgICAgICBjaGVja2VkUHJvcHNbJ3N5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nJ10gPSBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSkge1xuICAgICAgICB0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0gPSBmYWxzZVxuICAgICAgICBjaGVja2VkUHJvcHNbJ3N5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0nXSA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKGNoZWNrZWRQcm9wcykubGVuZ3RoID4gMCkge1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoY2hlY2tlZFByb3BzKVxuICAgIH1cblxuICAgIHJldHVybiBjaGVja2VkUHJvcHNcbiAgfVxuXG4gIGlzSW5jbHVkZWRJblNldCAoc2V0LCBwcm9wZXJ0eUlkKSB7XG4gICAgaWYgKCF0aGlzLnN5c3RlbVtzZXRdKSB0aGlzLnN5c3RlbVtzZXRdID0gW11cbiAgICBjb25zdCBwcm9wZXJ0eUluZGV4ID0gdGhpcy5zeXN0ZW1bc2V0XS5pbmRleE9mKHByb3BlcnR5SWQpXG4gICAgaWYgKHByb3BlcnR5SW5kZXggPiAtMSkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGFzeW5jIGZsYWdGb3JEZXZlbG9wZW1lbnQgKCkge1xuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd4cEVuYWJsZWQnKSB8fCBnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaWYgKCF0aGlzLnN5c3RlbS5mbGFncykge1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MnOiB7fSB9KVxuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmZsYWdzLmRldmVsb3BlbWVudCc6IHRydWUgfSlcbiAgICB9XG4gIH1cblxuICBhc3luYyB1bmZsYWdGb3JEZXZlbG9wZW1lbnQgKCkge1xuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd4cEVuYWJsZWQnKSB8fCBnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaWYgKCF0aGlzLnN5c3RlbS5mbGFncykge1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MnOiB7fSB9KVxuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmZsYWdzLmRldmVsb3BlbWVudCc6IGZhbHNlIH0pXG4gICAgfVxuICB9XG5cbiAgZ2V0IGRldmVsb3BlbWVudEZsYWcgKCkge1xuICAgIHJldHVybiB0aGlzLmdldEl0ZW1GbGFnKCdkZXZlbG9wZW1lbnQnKVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlSXRlbUZsYWcgKGZsYWdOYW1lLCBlcmFzZUFkanVzdG1lbnQgPSB0cnVlKSB7XG4gICAgY29uc3QgZmxhZ1ZhbHVlID0gIXRoaXMuZ2V0SXRlbUZsYWcoZmxhZ05hbWUpXG4gICAgY29uc3QgbmFtZSA9IGBzeXN0ZW0uZmxhZ3MuJHtmbGFnTmFtZX1gXG4gICAgaWYgKFxuICAgICAgKGZsYWdOYW1lID09PSAnb2NjdXBhdGlvbicgfHwgZmxhZ05hbWUgPT09ICdhcmNoZXR5cGUnKSAmJlxuICAgICAgIWZsYWdWYWx1ZSAmJlxuICAgICAgZXJhc2VBZGp1c3RtZW50XG4gICAgKSB7XG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgIFtgc3lzdGVtLmFkanVzdG1lbnRzLiR7ZmxhZ05hbWV9YF06IG51bGwsXG4gICAgICAgIFtuYW1lXTogZmxhZ1ZhbHVlXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAoZmxhZ05hbWUgPT09ICdkZXZlbG9wZW1lbnQnKSB7XG4gICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAneHBFbmFibGVkJykgfHwgZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyBbbmFtZV06IGZsYWdWYWx1ZSB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ta2lsbFhwR2FpbkRpc2FibGVkJykpXG4gICAgICB9XG4gICAgfSBlbHNlIGF3YWl0IHRoaXMudXBkYXRlKHsgW25hbWVdOiBmbGFnVmFsdWUgfSlcbiAgfVxuXG4gIGFzeW5jIHNldEl0ZW1GbGFnIChmbGFnTmFtZSkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgW2BzeXN0ZW0uZmxhZ3MuJHtmbGFnTmFtZX1gXTogdHJ1ZSB9KVxuICB9XG5cbiAgYXN5bmMgdW5zZXRJdGVtRmxhZyAoZmxhZ05hbWUsIGVyYXNlQWRqdXN0bWVudCA9IHRydWUpIHtcbiAgICBjb25zdCBuYW1lID0gYHN5c3RlbS5mbGFncy4ke2ZsYWdOYW1lfWBcbiAgICBpZiAoXG4gICAgICAoZmxhZ05hbWUgPT09ICdvY2N1cGF0aW9uJyB8fCBmbGFnTmFtZSA9PT0gJ2FyY2hldHlwZScpICYmXG4gICAgICBlcmFzZUFkanVzdG1lbnRcbiAgICApIHtcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgW2BzeXN0ZW0uYWRqdXN0bWVudHMuJHtmbGFnTmFtZX1gXTogbnVsbCxcbiAgICAgICAgW25hbWVdOiBmYWxzZVxuICAgICAgfSlcbiAgICB9IGVsc2UgYXdhaXQgdGhpcy51cGRhdGUoeyBbbmFtZV06IGZhbHNlIH0pXG4gIH1cblxuICBnZXRJdGVtRmxhZyAoZmxhZ05hbWUpIHtcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmZsYWdzKSB7XG4gICAgICB0aGlzLnN5c3RlbS5mbGFncyA9IHt9XG4gICAgICB0aGlzLnN5c3RlbS5mbGFncy5sb2NrZWQgPSB0cnVlXG4gICAgICB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MnOiB7fSB9KVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN5c3RlbS5mbGFnc1tmbGFnTmFtZV0pIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0aGlzLnN5c3RlbS5mbGFnc1tmbGFnTmFtZV1cbiAgfVxuXG4gIGdldCB1c2VzQWx0ZXJuYXRpdmVTa2lsbCAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMudHlwZSA9PT0gJ3dlYXBvbicgJiZcbiAgICAgICh0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzPy5hdXRvID09PSB0cnVlIHx8XG4gICAgICAgIHRoaXMuc3lzdGVtLnByb3BlcnRpZXM/LmJyc3QgPT09IHRydWUgfHxcbiAgICAgICAgdGhpcy5zeXN0ZW0ucHJvcGVydGllcz8udGhyb3duID09PSB0cnVlKVxuICAgIClcbiAgfVxuXG4gIGdldCBtYXhVc2VzUGVyUm91bmQgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICd3ZWFwb24nKSByZXR1cm4gbnVsbFxuICAgIGNvbnN0IG11bHRpU2hvdCA9IHBhcnNlSW50KHRoaXMuc3lzdGVtLnVzZXNQZXJSb3VuZC5tYXgpXG4gICAgaWYgKGlzTmFOKG11bHRpU2hvdCkpIHJldHVybiAwXG4gICAgcmV0dXJuIG11bHRpU2hvdFxuICB9XG5cbiAgZ2V0IHVzZXNQZXJSb3VuZCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgY29uc3Qgc2luZ2xlU2hvdCA9IHBhcnNlSW50KHRoaXMuc3lzdGVtLnVzZXNQZXJSb3VuZC5ub3JtYWwpXG4gICAgaWYgKGlzTmFOKHNpbmdsZVNob3QpKSByZXR1cm4gMFxuICAgIHJldHVybiBzaW5nbGVTaG90XG4gIH1cblxuICBnZXQgdXNlc1BlclJvdW5kU3RyaW5nICgpIHtcbiAgICBsZXQgdXNlc1BlclJvdW5kXG4gICAgaWYgKHRoaXMuc3lzdGVtLnVzZXNQZXJSb3VuZC5ub3JtYWwpIHtcbiAgICAgIHVzZXNQZXJSb3VuZCA9IHRoaXMuc3lzdGVtLnVzZXNQZXJSb3VuZC5ub3JtYWxcbiAgICB9IGVsc2Uge1xuICAgICAgdXNlc1BlclJvdW5kID0gJzEnXG4gICAgfVxuICAgIGlmICh0aGlzLnN5c3RlbS51c2VzUGVyUm91bmQubWF4KSB7XG4gICAgICB1c2VzUGVyUm91bmQgKz0gYCgke3RoaXMuc3lzdGVtLnVzZXNQZXJSb3VuZC5tYXh9KWBcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuYXV0bykge1xuICAgICAgdXNlc1BlclJvdW5kICs9IGAgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2VhcG9uQXV0bycpfWBcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuYnJzdCkge1xuICAgICAgdXNlc1BlclJvdW5kICs9IGAgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2VhcG9uQnJzdCcpfWBcbiAgICAgIGlmICh0aGlzLnN5c3RlbS51c2VzUGVyUm91bmQuYnVyc3QpIHtcbiAgICAgICAgdXNlc1BlclJvdW5kICs9IGAoJHt0aGlzLnN5c3RlbS51c2VzUGVyUm91bmQuYnVyc3R9KWBcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdXNlc1BlclJvdW5kXG4gIH1cblxuICBnZXQgbXVsdGlwbGVTaG90cyAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgaWYgKHRoaXMubWF4VXNlc1BlclJvdW5kIDw9IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZ2V0IHNpbmdsZVNob3QgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICd3ZWFwb24nKSByZXR1cm4gbnVsbFxuICAgIGlmICghdGhpcy51c2VzUGVyUm91bmQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZ2V0IGJhc2VSYW5nZSAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLnJhbmdlLm5vcm1hbC52YWx1ZSlcbiAgfVxuXG4gIGdldCBsb25nUmFuZ2UgKCkge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLnN5c3RlbS5yYW5nZS5sb25nLnZhbHVlKVxuICB9XG5cbiAgZ2V0IGV4dHJlbWVSYW5nZSAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLnJhbmdlLmV4dHJlbWUudmFsdWUpXG4gIH1cblxuICBnZXQgc2tpbGxQcm9wZXJ0aWVzICgpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnc2tpbGwnKSByZXR1cm4gW11cblxuICAgIGNvbnN0IHNraWxsUHJvcGVydGllcyA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5za2lsbFByb3BlcnRpZXMpKSB7XG4gICAgICBpZiAodGhpcy5zeXN0ZW0ucHJvcGVydGllc1trZXldID09PSB0cnVlKSB7XG4gICAgICAgIHNraWxsUHJvcGVydGllcy5wdXNoKGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZSkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBza2lsbFByb3BlcnRpZXNcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjYWxjdWxhdGVCYXNlIChhY3RvciwgZGF0YSkge1xuICAgIGlmIChkYXRhLnR5cGUgIT09ICdza2lsbCcpIHJldHVybiBudWxsXG4gICAgaWYgKFN0cmluZyhkYXRhLnN5c3RlbS5iYXNlKS5pbmNsdWRlcygnQCcpKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSB7fVxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5mb3JtdWxhLmFjdG9yc2hlZXQpKSB7XG4gICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnQCcpICYmIHZhbHVlLnN0YXJ0c1dpdGgoJ3RoaXMuYWN0b3IuJykpIHtcbiAgICAgICAgICBwYXJzZWRba2V5LnN1YnN0cmluZygxKV0gPSBmb3VuZHJ5LnV0aWxzLmdldFByb3BlcnR5KGFjdG9yLCB2YWx1ZS5zdWJzdHJpbmcoMTEpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5mbG9vcihcbiAgICAgICAgICBuZXcgUm9sbChkYXRhLnN5c3RlbS5iYXNlLCBwYXJzZWQpLmV2YWx1YXRlKHtcbiAgICAgICAgICAgIG1heGltaXplOiB0cnVlXG4gICAgICAgICAgfSkudG90YWxcbiAgICAgICAgKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHZhbHVlID0gMFxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuICAgIHJldHVybiAhaXNOYU4ocGFyc2VJbnQoZGF0YS5zeXN0ZW0uYmFzZSkpID8gcGFyc2VJbnQoZGF0YS5zeXN0ZW0uYmFzZSkgOiBudWxsXG4gIH1cblxuICBnZXQgX2Jhc2UgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICdza2lsbCcpIHJldHVybiBbbnVsbCwgZmFsc2VdXG4gICAgaWYgKHR5cGVvZiB0aGlzLnN5c3RlbS5iYXNlICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIFt0aGlzLnN5c3RlbS5iYXNlLCBmYWxzZV1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zeXN0ZW0uYmFzZS5pbmNsdWRlcygnQCcpKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSB7fVxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5mb3JtdWxhLmFjdG9yc2hlZXQpKSB7XG4gICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnQCcpICYmIHZhbHVlLnN0YXJ0c1dpdGgoJ3RoaXMuJykpIHtcbiAgICAgICAgICBwYXJzZWRba2V5LnN1YnN0cmluZygxKV0gPSBmb3VuZHJ5LnV0aWxzLmdldFByb3BlcnR5KHRoaXMsIHZhbHVlLnN1YnN0cmluZyg1KSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZSA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgbmV3IFJvbGwodGhpcy5zeXN0ZW0uYmFzZSwgcGFyc2VkKS5ldmFsdWF0ZSh7XG4gICAgICAgICAgICBtYXhpbWl6ZTogdHJ1ZVxuICAgICAgICAgIH0pLnRvdGFsXG4gICAgICAgIClcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB2YWx1ZSA9IDBcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFt2YWx1ZSwgdHJ1ZV1cbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgICFpc05hTihwYXJzZUludCh0aGlzLnN5c3RlbS5iYXNlKSlcbiAgICAgICAgPyBwYXJzZUludCh0aGlzLnN5c3RlbS5iYXNlKVxuICAgICAgICA6IG51bGwsXG4gICAgICBmYWxzZVxuICAgIF1cbiAgfVxuXG4gIGFzeW5jIGFzeW5jQmFzZSAoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuX2Jhc2VcbiAgICBpZiAoZVsxXSkge1xuICAgICAgY29uc29sZS5pbmZvKFxuICAgICAgICBgW0NPQzddICgke3RoaXMucGFyZW50Py5uYW1lfSkgRXZhbHVhdGluZyBza2lsbCAke3RoaXMubmFtZX06JHt0aGlzLnN5c3RlbS5iYXNlfSB0byAke2VbMF19YFxuICAgICAgKVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmJhc2UnOiBlWzBdIH0pXG4gICAgfVxuICAgIHJldHVybiBlWzBdXG4gIH1cblxuICBnZXQgYmFzZSAoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuX2Jhc2VcbiAgICBpZiAoZVsxXSkge1xuICAgICAgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmJhc2UnOiBlWzBdIH0pXG4gICAgfVxuICAgIHJldHVybiBlWzBdXG4gIH1cblxuICBnZXRCdWxsZXRMZWZ0ICgpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnd2VhcG9uJykgcmV0dXJuIG51bGxcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmFtbW8pIHtcbiAgICAgIHRoaXMuc2V0QnVsbGV0cygwKVxuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmFtbW9cbiAgfVxuXG4gIGFzeW5jIHJlbG9hZCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgY29uc3QgbWF4QnVsbGV0ID0gdGhpcy5zeXN0ZW0uYnVsbGV0c1xuICAgICAgPyBwYXJzZUludCh0aGlzLnN5c3RlbS5idWxsZXRzKVxuICAgICAgOiAxXG4gICAgYXdhaXQgdGhpcy5zZXRCdWxsZXRzKG1heEJ1bGxldClcbiAgfVxuXG4gIGFzeW5jIHNldEJ1bGxldHMgKGJ1bGxldHMpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnd2VhcG9uJykgcmV0dXJuIG51bGxcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYW1tbyc6IGJ1bGxldHMgfHwgMCB9KVxuICB9XG5cbiAgYXN5bmMgYWRkQnVsbGV0ICgpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnd2VhcG9uJykgcmV0dXJuIG51bGxcbiAgICBjb25zdCBidWxsZXRzID0gYXdhaXQgdGhpcy5nZXRCdWxsZXRMZWZ0KClcbiAgICBjb25zdCBtYXhCdWxsZXRzID0gdGhpcy5zeXN0ZW0uYnVsbGV0c1xuICAgICAgPyBwYXJzZUludCh0aGlzLnN5c3RlbS5idWxsZXRzKVxuICAgICAgOiAxXG4gICAgaWYgKGJ1bGxldHMgKyAxID49IG1heEJ1bGxldHMpIGF3YWl0IHRoaXMuc2V0QnVsbGV0cyhtYXhCdWxsZXRzKVxuICAgIGVsc2UgYXdhaXQgdGhpcy5zZXRCdWxsZXRzKGJ1bGxldHMgKyAxKVxuICB9XG5cbiAgYXN5bmMgc2hvb3RCdWxsZXRzICh4KSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgY29uc3QgYnVsbGV0cyA9IGF3YWl0IHRoaXMuZ2V0QnVsbGV0TGVmdCgpXG4gICAgaWYgKHggPiBidWxsZXRzKSBhd2FpdCB0aGlzLnNldEJ1bGxldHMoMClcbiAgICBlbHNlIGF3YWl0IHRoaXMuc2V0QnVsbGV0cyhidWxsZXRzIC0geClcbiAgfVxuXG4gIHN0YXRpYyBtZXJnZU9wdGlvbmFsU2tpbGxzIChza2lsbExpc3QsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBqb2ludEFycmF5ID0gc2tpbGxMaXN0LmNvbmNhdChvcHRpb25zKVxuICAgIHJldHVybiBqb2ludEFycmF5XG4gICAgICAucmVkdWNlKChuZXdBcnJheSwgaXRlbSkgPT4ge1xuICAgICAgICAvLyBJZiBza2lsbCBpcyBub3QgYSBnZW5lcmljIHNwZWMgYW5kIGlzIGFscmVhZHkgaW5jbHVkZWQgd2UgZG9uJ3QgYWRkIGl0ZW1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICFDb0M3SXRlbS5pc0FueVNwZWMoaXRlbSkgJiZcbiAgICAgICAgICBuZXdBcnJheS5maW5kKHNraWxsID0+IHNraWxsLm5hbWUgPT09IGl0ZW0ubmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIG5ld0FycmF5XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSBpdGVtIGlzIGFkZGVkXG4gICAgICAgIHJldHVybiBbLi4ubmV3QXJyYXksIGl0ZW1dXG4gICAgICB9LCBbXSlcbiAgICAgIC5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgfVxuXG4gIC8qKiBUT0RPIDogcmllbiBhIGZhaXJlIGljaSAhIVxuICAgKiBHZXQgdGhlIEFjdG9yIHdoaWNoIGlzIHRoZSBhdXRob3Igb2YgYSBjaGF0IGNhcmRcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2FyZCAgICBUaGUgY2hhdCBjYXJkIGJlaW5nIHVzZWRcbiAgICogQHJldHVybiB7QWN0b3J8bnVsbH0gICAgICAgICBUaGUgQWN0b3IgZW50aXR5IG9yIG51bGxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBfZ2V0Q2hhdENhcmRBY3RvciAoY2FyZCkge1xuICAgIC8vIENhc2UgMSAtIGEgc3ludGhldGljIGFjdG9yIGZyb20gYSBUb2tlblxuICAgIGNvbnN0IHRva2VuS2V5ID0gY2FyZC5kYXRhc2V0LnRva2VuSWRcbiAgICBpZiAodG9rZW5LZXkpIHtcbiAgICAgIGNvbnN0IFtzY2VuZUlkLCB0b2tlbklkXSA9IHRva2VuS2V5LnNwbGl0KCcuJylcbiAgICAgIGlmIChzY2VuZUlkID09PSAnVE9LRU4nKSB7XG4gICAgICAgIHJldHVybiBnYW1lLmFjdG9ycy50b2tlbnNbdG9rZW5JZF0gLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzY2VuZSA9IGdhbWUuc2NlbmVzLmdldChzY2VuZUlkKVxuICAgICAgICBpZiAoIXNjZW5lKSByZXR1cm4gbnVsbFxuICAgICAgICBjb25zdCB0b2tlbkRhdGEgPSBzY2VuZS5nZXRFbWJlZGRlZERvY3VtZW50KCdUb2tlbicsIHRva2VuSWQpXG4gICAgICAgIGlmICghdG9rZW5EYXRhKSByZXR1cm4gbnVsbFxuICAgICAgICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlbih0b2tlbkRhdGEpXG4gICAgICAgIHJldHVybiB0b2tlbi5hY3RvclxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhc2UgMiAtIHVzZSBBY3RvciBJRCBkaXJlY3RvcnlcbiAgICBjb25zdCBhY3RvcklkID0gY2FyZC5kYXRhc2V0LmFjdG9ySWRcbiAgICByZXR1cm4gZ2FtZS5hY3RvcnMuZ2V0KGFjdG9ySWQpIHx8IG51bGxcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gIC8qICBDaGF0IE1lc3NhZ2UgSGVscGVycyAgICAgICAgICAgICAgICAgICAgICAgICovXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLyoqXG4gICAqIFByZXBhcmUgYW4gb2JqZWN0IG9mIGNoYXQgZGF0YSB1c2VkIHRvIGRpc3BsYXkgYSBjYXJkIGZvciB0aGUgSXRlbSBpbiB0aGUgY2hhdCBsb2dcbiAgICogQHBhcmFtIHtPYmplY3R9IGh0bWxPcHRpb25zICAgIE9wdGlvbnMgdXNlZCBieSB0aGUgVGV4dEVkaXRvci5lbnJpY2hIVE1MIGZ1bmN0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICBBbiBvYmplY3Qgb2YgY2hhdCBkYXRhIHRvIHJlbmRlclxuICAgKi9cbiAgYXN5bmMgZ2V0Q2hhdERhdGEgKGh0bWxPcHRpb25zID0ge30pIHtcbiAgICAvLyBGb3VuZHJ5VlRUIHYxMVxuICAgIGh0bWxPcHRpb25zLmFzeW5jID0gdHJ1ZVxuICAgIGNvbnN0IGRhdGEgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbSlcbiAgICAvLyBGaXggOiBkYXRhIGNhbiBoYXZlIGRlc2NyaXB0aW9uIGRpcmVjdGx5IGluIGZpZWxkLCBub3QgdW5kZXIgdmFsdWUuXG4gICAgaWYgKHR5cGVvZiBkYXRhLmRlc2NyaXB0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgZGF0YS5kZXNjcmlwdGlvbiA9IHtcbiAgICAgICAgdmFsdWU6IGRhdGEuZGVzY3JpcHRpb24sXG4gICAgICAgIHNwZWNpYWw6ICcnXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5kZXNjcmlwdGlvbi52YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuZGVzY3JpcHRpb24udmFsdWUgPSAnJ1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEuZGVzY3JpcHRpb24uc3BlY2lhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuZGVzY3JpcHRpb24uc3BlY2lhbCA9ICcnXG4gICAgfVxuICAgIGNvbnN0IGxhYmVscyA9IFtdXG5cbiAgICAvLyBSaWNoIHRleHQgZGVzY3JpcHRpb25cbiAgICBkYXRhLmRlc2NyaXB0aW9uLnZhbHVlID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgZGF0YS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIGh0bWxPcHRpb25zXG4gICAgKVxuICAgIGRhdGEuZGVzY3JpcHRpb24uc3BlY2lhbCA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIGRhdGEuZGVzY3JpcHRpb24uc3BlY2lhbCxcbiAgICAgIGh0bWxPcHRpb25zXG4gICAgKVxuXG4gICAgLy8gSXRlbSB0eXBlIHNwZWNpZmljIHByb3BlcnRpZXNcbiAgICBjb25zdCBwcm9wcyA9IFtdXG4gICAgY29uc3QgZm4gPSB0aGlzW2BfJHt0aGlzLnR5cGV9Q2hhdERhdGFgXVxuICAgIGlmIChmbikgZm4uYmluZCh0aGlzKShkYXRhLCBsYWJlbHMsIHByb3BzLCBodG1sT3B0aW9ucylcblxuICAgIGlmICh0aGlzLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENPQzcuc2tpbGxQcm9wZXJ0aWVzKSkge1xuICAgICAgICBpZiAodGhpcy5zeXN0ZW0ucHJvcGVydGllc1trZXldID09PSB0cnVlKSBwcm9wcy5wdXNoKHZhbHVlKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbHRlciBwcm9wZXJ0aWVzIGFuZCByZXR1cm5cbiAgICBkYXRhLnByb3BlcnRpZXMgPSBwcm9wcy5maWx0ZXIocCA9PiAhIXApXG4gICAgZGF0YS5sYWJlbHMgPSBsYWJlbHNcbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgX3dlYXBvbkNoYXREYXRhIChkYXRhLCBsYWJlbHMsIHByb3BzKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy53ZWFwb25Qcm9wZXJ0aWVzKSkge1xuICAgICAgaWYgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXNba2V5XSA9PT0gdHJ1ZSkgcHJvcHMucHVzaCh2YWx1ZSlcbiAgICB9XG5cbiAgICBsZXQgc2tpbGxMYWJlbCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ta2lsbCcpXG4gICAgbGV0IHNraWxsTmFtZSA9ICcnXG4gICAgbGV0IGZvdW5kID0gZmFsc2VcbiAgICBpZiAodGhpcy5zeXN0ZW0uc2tpbGwubWFpbi5pZCkge1xuICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLmFjdG9yPy5pdGVtcy5nZXQodGhpcy5zeXN0ZW0uc2tpbGwubWFpbi5pZClcbiAgICAgIGlmIChza2lsbCkge1xuICAgICAgICBza2lsbE5hbWUgKz0gQ29DN0l0ZW0uZ2V0TmFtZVdpdGhvdXRTcGVjKHNraWxsKVxuICAgICAgICBmb3VuZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy51c2VzQWx0ZXJuYXRpdmVTa2lsbCAmJiB0aGlzLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkKSB7XG4gICAgICBza2lsbExhYmVsID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxscycpXG4gICAgICBjb25zdCBza2lsbCA9IHRoaXMuYWN0b3I/Lml0ZW1zLmdldCh0aGlzLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkKVxuICAgICAgaWYgKHNraWxsKSB7XG4gICAgICAgIHNraWxsTmFtZSArPSBgLyR7Q29DN0l0ZW0uZ2V0TmFtZVdpdGhvdXRTcGVjKHNraWxsKX1gXG4gICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZm91bmQpIHtcbiAgICAgIHNraWxsTmFtZSA9IHRoaXMuc3lzdGVtLnNraWxsLm1haW4ubmFtZVxuICAgICAgaWYgKHRoaXMudXNlc0FsdGVybmF0aXZlU2tpbGwgJiYgdGhpcy5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lKSB7XG4gICAgICAgIHNraWxsTmFtZSArPSBgLyR7dGhpcy5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lfWBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2tpbGxOYW1lKSB7XG4gICAgICBsYWJlbHMucHVzaCh7XG4gICAgICAgIG5hbWU6IHNraWxsTGFiZWwsXG4gICAgICAgIHZhbHVlOiBza2lsbE5hbWVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgbGFiZWxzLnB1c2goe1xuICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LldlYXBvblVzZXNQZXJSb3VuZCcpLFxuICAgICAgdmFsdWU6IHRoaXMudXNlc1BlclJvdW5kU3RyaW5nXG4gICAgfSlcblxuICAgIGxhYmVscy5wdXNoKHtcbiAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XZWFwb25NYWxmdW5jdGlvbicpLFxuICAgICAgdmFsdWU6IHRoaXMuc3lzdGVtLm1hbGZ1bmN0aW9uID8gdGhpcy5zeXN0ZW0ubWFsZnVuY3Rpb24gOiAnLSdcbiAgICB9KVxuXG4gICAgaWYgKHRoaXMuc3lzdGVtLmJ1bGxldHMpIHtcbiAgICAgIGxhYmVscy5wdXNoKHtcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LldlYXBvbkJ1bGxldHNJbk1hZycpLFxuICAgICAgICB2YWx1ZTogdGhpcy5zeXN0ZW0uYnVsbGV0c1xuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBjYW5CZVB1c2hlZCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ3NraWxsJyAmJiB0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLnB1c2gpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgaW1wYWxlICgpIHtcbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5pbXBsXG4gIH1cblxuICBnZXQgaXNEb2RnZSAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3NraWxsJykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMubmFtZS50b0xvd2VyQ2FzZSgpID09PVxuICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvQ0lERmxhZy5rZXlzLmkuc2tpbGwuZG9kZ2UnKS50b0xvd2VyQ2FzZSgpXG4gICAgKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgY2FudmFzLCBDaGF0TWVzc2FnZSwgQ09OU1QsIGZvdW5kcnksIGZyb21VdWlkLCBnYW1lLCBSYXksIFRva2VuLCB1aSAqL1xuXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi9jaGVjay5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbi8qKlxuICogUmV0dXJuIDxhPiBlbGVtZW50IG9mIGEgcm9sbCBpbnN0YW5jZS4gZm91bmRyeS5qcyByZWY6VGV4dEVkaXRvci5fY3JlYXRlSW5saW5lUm9sbFxuICogQHBhcmFtIHtSb2xsfSByb2xsICAgICAgVGhlIHJvbGwgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbmxpbmVSb2xsIChyb2xsKSB7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgY2xzOiBbJ2lubGluZS1yb2xsJ10sXG4gICAgZGF0YXNldDoge31cbiAgfVxuXG4gIHRyeSB7XG4gICAgZGF0YS5jbHMucHVzaCgnaW5saW5lLXJlc3VsdCcpXG4gICAgZGF0YS5yZXN1bHQgPSByb2xsLnRvdGFsXG4gICAgZGF0YS50aXRsZSA9IHJvbGwuZm9ybXVsYVxuICAgIGRhdGEuZGF0YXNldC5yb2xsID0gZXNjYXBlKEpTT04uc3RyaW5naWZ5KHJvbGwpKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLy8gQ29uc3RydWN0IGFuZCByZXR1cm4gdGhlIGZvcm1lZCBsaW5rIGVsZW1lbnRcbiAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuICBhLmNsYXNzTGlzdC5hZGQoLi4uZGF0YS5jbHMpXG4gIGEudGl0bGUgPSBkYXRhLnRpdGxlXG4gIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEuZGF0YXNldCkpIHtcbiAgICBhLmRhdGFzZXRba10gPSB2XG4gIH1cbiAgYS5pbm5lckhUTUwgPSBgPGkgY2xhc3M9XCJmYXMgZmEtZGljZS1kMjBcIj48L2k+ICR7ZGF0YS5yZXN1bHR9YFxuICByZXR1cm4gYVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgZm9yIEpTT04uc3RyaW5naWZ5IHJlcGxhY2VyLlxuICogRXhjbHVkZSBhbnkga2V5IHN0YXJ0aW5nIHdpdGggX1xuICogQHBhcmFtIHsqfSBrZXkgICAgIFRoZSBvYmplY3QncyBwcm9wZXJ0eSBLZXlcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgICBUaGUgYXNzb2NpYXRlZCB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhjbHVkZV8gKGtleSwgdmFsdWUpIHtcbiAgLy8gY29udmVydCBSZWdFeHAgdG8gc3RyaW5nXG4gIGlmIChrZXkuc3RhcnRzV2l0aCgnXycpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZCAvLyByZW1vdmUgZnJvbSByZXN1bHRcbiAgfVxuICByZXR1cm4gdmFsdWUgLy8gcmV0dXJuIGFzIGlzXG59XG5cbi8qKlxuICogRnVuY3Rpb24gdXNlZCBmb3IgSlNPTi5zdHJpbmdpZnkgcmVwbGFjZXIuXG4gKiBFeGNsdWRlIGFueSBrZXkgc3RhcnRpbmcgd2l0aCBfX1xuICogQHBhcmFtIHsqfSBrZXkgICAgIFRoZSBvYmplY3QncyBwcm9wZXJ0eSBLZXlcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgICBUaGUgYXNzb2NpYXRlZCB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhjbHVkZV9fIChrZXksIHZhbHVlKSB7XG4gIC8vIGNvbnZlcnQgUmVnRXhwIHRvIHN0cmluZ1xuICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ19fJykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkIC8vIHJlbW92ZSBmcm9tIHJlc3VsdFxuICB9XG4gIHJldHVybiB2YWx1ZSAvLyByZXR1cm4gYXMgaXNcbn1cblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpcyBDVFJMIGtleSBpcyBwcmVzc2VkXG4gKiBVc2VkIGZvciBNQUMgY29tcGF0LlxuICogQHBhcmFtIHtTLkV2ZW50fSBldmVudFxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ3RybEtleSAoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiAoXG4gICAgZXZlbnQubWV0YUtleSB8fFxuICAgIGV2ZW50LmN0cmxLZXkgfHxcbiAgICBldmVudC5rZXlDb2RlID09PSA5MSB8fFxuICAgIGV2ZW50LmtleUNvZGUgPT09IDIyNFxuICApXG59XG5cbmV4cG9ydCBjbGFzcyBjaGF0SGVscGVyIHtcbiAgc3RhdGljIGh5cGhlblRvQ2FtZWxDYXNlIChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLy0oW2Etel0pL2csIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmdbMV0udG9VcHBlckNhc2UoKVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlTWVzc2FnZSAodGl0bGUsIG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IG1lc3NhZ2VEYXRhID0ge31cbiAgICBtZXNzYWdlRGF0YS5mbGF2b3IgPSB0aXRsZVxuICAgIG1lc3NhZ2VEYXRhLnNwZWFrZXIgPSBvcHRpb25zLnNwZWFrZXIgfHwgQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpXG4gICAgaWYgKG9wdGlvbnMud2hpc3Blcikge1xuICAgICAgbWVzc2FnZURhdGEudHlwZSA9IENPTlNULkNIQVRfTUVTU0FHRV9UWVBFUy5XSElTUEVSXG4gICAgICBtZXNzYWdlRGF0YS53aGlzcGVyID0gb3B0aW9ucy53aGlzcGVyXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yb2xsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbWVzc2FnZURhdGEucm9sbCA9IG9wdGlvbnMucm9sbFxuICAgICAgbWVzc2FnZURhdGEudHlwZSA9IENPTlNULkNIQVRfTUVTU0FHRV9UWVBFUy5ST0xMXG4gICAgICBtZXNzYWdlRGF0YS5yb2xsTW9kZSA9IENPTlNULkRJQ0VfUk9MTF9NT0RFUy5TRUxGXG4gICAgfVxuICAgIG1lc3NhZ2VEYXRhLnVzZXIgPSBnYW1lLnVzZXIuaWRcbiAgICBtZXNzYWdlRGF0YS5jb250ZW50ID0gbWVzc2FnZVxuXG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKG1lc3NhZ2VEYXRhKS50aGVuKG1zZyA9PiB7XG4gICAgICByZXR1cm4gbXNnXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBjYW1lbENhc2VUb0h5cGhlbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHJldHVybiAnLScgKyBzdHJpbmcudG9Mb3dlckNhc2UoKVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgZ2V0QWN0b3JGcm9tS2V5IChrZXkpIHtcbiAgICBpZiAoIWtleSkgcmV0dXJuIG51bGxcbiAgICAvLyBDYXNlIDAgLSBhIGRvY3VtZW50IFV1aWRcbiAgICBpZiAoQ29DN1V0aWxpdGllcy5pc0RvY3VtZW50VXVpZChrZXkpKSB7XG4gICAgICBpZiAoQ29DN1V0aWxpdGllcy5pc0RvY3VtZW50VXVpZFBhY2soa2V5KSkgcmV0dXJuIGZyb21VdWlkKGtleSkgLy8gVE9ETyBDaGVjayB3ZSBjYW4gZG8gdGhhdFxuICAgICAgcmV0dXJuIENvQzdVdGlsaXRpZXMuU2Zyb21VdWlkKGtleSlcbiAgICB9XG5cbiAgICAvLyBDYXNlIDEgLSBhIHN5bnRoZXRpYyBhY3RvciBmcm9tIGEgVG9rZW5cbiAgICBpZiAoa2V5LmluY2x1ZGVzKCcuJykpIHtcbiAgICAgIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgY29uc3QgW3NjZW5lSWQsIHRva2VuSWRdID0ga2V5LnNwbGl0KCcuJylcbiAgICAgIGlmIChzY2VuZUlkID09PSAnVE9LRU4nKSB7XG4gICAgICAgIHJldHVybiBnYW1lLmFjdG9ycy50b2tlbnNbdG9rZW5JZF0gLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICB9XG4gICAgICBjb25zdCB0b2tlbiA9IGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KGtleSlcbiAgICAgIHJldHVybiB0b2tlbj8uYWN0b3JcbiAgICB9XG5cbiAgICAvLyBDYXNlIDIgLSB1c2UgQWN0b3IgSUQgZGlyZWN0b3J5XG4gICAgcmV0dXJuIGdhbWUuYWN0b3JzLmdldChrZXkpIHx8IG51bGxcbiAgfVxuXG4gIHN0YXRpYyBnZXRTcGVha2VyRnJvbUtleSAoYWN0b3JLZXkpIHtcbiAgICBjb25zdCBzcGVha2VyID0ge31cbiAgICBjb25zdCBhY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KGFjdG9yS2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICBpZiAoYWN0b3JLZXkuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgY29uc3QgW3NjZW5lSWQsIHRva2VuSWRdID0gYWN0b3JLZXkuc3BsaXQoJy4nKSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIHNwZWFrZXIudG9rZW4gPSB0b2tlbklkXG4gICAgICBzcGVha2VyLnNjZW5lID0gc2NlbmVJZFxuICAgICAgaWYgKGFjdG9yLnRva2VuPy5uYW1lKSBzcGVha2VyLmFsaWFzID0gYWN0b3IudG9rZW4ubmFtZVxuICAgICAgc3BlYWtlci5hY3RvciA9IGFjdG9yLmlkXG4gICAgfSBlbHNlIHtcbiAgICAgIHNwZWFrZXIuYWN0b3IgPSBhY3RvcktleVxuICAgICAgc3BlYWtlci5hbGlhcyA9IGFjdG9yLm5hbWVcbiAgICB9XG4gICAgcmV0dXJuIHNwZWFrZXJcbiAgfVxuXG4gIHN0YXRpYyBhdHRhY2hPYmplY3RUb0VsZW1lbnQgKG9iamVjdCwgZWxlbWVudCwgb2JqZWN0TmFtZSA9ICcnKSB7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIE9iamVjdC5rZXlzKG9iamVjdCkpIHtcbiAgICAgIGlmICghcHJvcC5zdGFydHNXaXRoKCdfJykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgY2hhdEhlbHBlci5hdHRhY2hPYmplY3RUb0VsZW1lbnQoXG4gICAgICAgICAgICBvYmplY3RbcHJvcF0sXG4gICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgYCR7b2JqZWN0TmFtZX06JHtwcm9wfTpgXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQuZGF0YXNldFtgJHtvYmplY3ROYW1lfSR7cHJvcH1gXSA9IG9iamVjdFtwcm9wXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldE9iamVjdEZyb21FbGVtZW50IChvYmplY3QsIGVsZW1lbnQpIHtcbiAgICBmdW5jdGlvbiBkZXNlcmlhbGl6ZSAob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgICBjb25zdCBzID0ga2V5LnNsaWNlKDEpXG4gICAgICAgIGNvbnN0IG9ialByb3AgPSBzLnNsaWNlKHMuaW5kZXhPZignOicpICsgMSlcbiAgICAgICAgY29uc3Qgb2JqTmFtZSA9IHMuc3Vic3RyaW5nKDAsIHMuaW5kZXhPZignOicpKVxuICAgICAgICBpZiAodHlwZW9mIG9ialtvYmpOYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIG9ialtvYmpOYW1lXSA9IHt9XG4gICAgICAgIGRlc2VyaWFsaXplKG9ialtvYmpOYW1lXSwgb2JqUHJvcCwgdmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmFsdWUgPT09ICd0cnVlJykgb2JqW2tleV0gPSB0cnVlXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSAnZmFsc2UnKSBvYmpba2V5XSA9IGZhbHNlXG4gICAgICAgIGVsc2UgaWYgKE51bWJlcih2YWx1ZSkudG9TdHJpbmcoKSA9PT0gdmFsdWUpIG9ialtrZXldID0gTnVtYmVyKHZhbHVlKVxuICAgICAgICBlbHNlIG9ialtrZXldID0gdmFsdWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWVsZW1lbnQgfHwgIW9iamVjdCkgcmV0dXJuXG4gICAgZm9yIChjb25zdCBwcm9wIG9mIE9iamVjdC5rZXlzKGVsZW1lbnQuZGF0YXNldCkpIHtcbiAgICAgIGlmIChwcm9wID09PSAndGVtcGxhdGUnKSByZXR1cm5cbiAgICAgIGRlc2VyaWFsaXplKG9iamVjdCwgcHJvcCwgZWxlbWVudC5kYXRhc2V0W3Byb3BdKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRUb2tlbkZyb21LZXkgKGtleSkge1xuICAgIGlmICgha2V5KSByZXR1cm4gbnVsbFxuICAgIGlmIChrZXkuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgY29uc3QgW3NjZW5lSWQsIHRva2VuSWRdID0ga2V5LnNwbGl0KCcuJylcbiAgICAgIGlmIChzY2VuZUlkID09PSAnVE9LRU4nKSB7XG4gICAgICAgIGNvbnN0IHRva2VuRG9jID0gZ2FtZS5hY3RvcnMudG9rZW5zW3Rva2VuSWRdPy50b2tlblxuICAgICAgICByZXR1cm4gdG9rZW5Eb2Mub2JqZWN0IC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBnYW1lLnNjZW5lcy5nZXQoc2NlbmVJZClcbiAgICAgICAgaWYgKCFzY2VuZSkgcmV0dXJuIG51bGxcbiAgICAgICAgY29uc3QgdG9rZW5EYXRhID0gc2NlbmUuZ2V0RW1iZWRkZWREb2N1bWVudCgnVG9rZW4nLCB0b2tlbklkKVxuICAgICAgICBpZiAoIXRva2VuRGF0YSkgcmV0dXJuIG51bGxcbiAgICAgICAgY29uc3QgdG9rZW4gPSBuZXcgVG9rZW4odG9rZW5EYXRhKVxuICAgICAgICBpZiAoIXRva2VuLnNjZW5lKSB0b2tlbi5zY2VuZSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHNjZW5lLmRvY3VtZW50KVxuICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoa2V5KVxuICAgICAgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0QWN0b3JUb2tlbihhY3RvcilcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0QWN0b3JUb2tlbiAoYWN0b3IpIHtcbiAgICBpZiAoIWFjdG9yKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBhY3Rvci50b2tlbiB8fCBhY3Rvci5wcm90b3R5cGVUb2tlblxuICAgIC8qKioqKioqKioqKioqKioqKioqL1xuICAgIC8vIC8vIENhc2UgMCAtIEFjdG9yIGlzIGEgdG9rZW4gKHN5bnRoZXRpYyBhY3RvciksIHJldHVybiB0aGF0IHRva2VuLlxuICAgIC8vIGlmKGFjdG9yLmlzVG9rZW4pIHJldHVybiBhY3Rvci50b2tlbjtcbiAgICAvLyBlbHNle1xuICAgIC8vICAvLyBDYXNlIDEgLSBBY3RvciBpcyBub3QgYSB0b2tlbiwgZmluZCBpZiBhIHRva2VuIGV4aXN0IGZvciB0aGF0IGFjdG9yLlxuICAgIC8vICBjb25zdCBhY3RvclRva2VucyA9IGFjdG9yLmdldEFjdGl2ZVRva2VucygpO1xuICAgIC8vICBpZiggYWN0b3JUb2tlbnMubGVuZ3RoKXtcbiAgICAvLyAgICAvLyBDYXNlIDEuMSAtIElmIGhlIGhhcyBvbmx5IG9uZSBUb2tlbiByZXR1cm4gaXQuXG4gICAgLy8gICAgaWYoIDEgPT09IGFjdG9yVG9rZW5zLmxlbmd0aCkgcmV0dXJuIGFjdG9yVG9rZW5zWzBdO1xuXG4gICAgLy8gICAgLy8gQ2FzZSAxLjIgLSBBY3RvciBoYXMgbXVsdGlwbGUgdG9rZW5zLCBmaW5kIGlmIG9uZSBvZiB0aGVtIGlzIHRoZSBjb250cm9sbGVkIHRva2VuLlxuICAgIC8vICAgIGNvbnN0IGNvbnRyb2xsZWRUb2tlbnMgPSBhY3RvclRva2Vucy5maWx0ZXIoIHQgPT4gdC5fY29udHJvbGxlZCk7XG4gICAgLy8gICAgaWYoIGNvbnRyb2xsZWRUb2tlbnMubGVuZ3RoKXtcbiAgICAvLyAgICAgIC8vIFJldHVybiB0aGUgMXN0IGNvbnRyb2xsZWQgdG9rZW4sIHJpc2UgYSB3YXJuaW5nIGlmIGhlIGhhcyBtdWx0aXBsZSBjb250cm9sbGVkIHRva2Vucy5cbiAgICAvLyAgICAgIGlmKCB2ZXJib3NlICYmIGNvbnRyb2xsZWRUb2tlbnMubGVuZ3RoID4gMSkgdWkubm90aWZpY2F0aW9ucy53YXJuKCBgQWN0b3IgJHthY3Rvci5uYW1lfSBoYXMgJHtjb250cm9sbGVkVG9rZW5zLmxlbmd0aH0gY29udHJvbGxlZCB0b2tlbnMuIFVzaW5nIHRoZSBmaXJzdCBmb3VuZGApO1xuICAgIC8vICAgICAgcmV0dXJuIGNvbnRyb2xsZWRUb2tlbnNbMF07XG4gICAgLy8gICAgfVxuXG4gICAgLy8gICAgLy8gQ2FzZSAxLjMgYWN0b3IgZG9lc24ndCBoYXZlIGFueSBhY3RpdmUgdG9rZW4uIFJldHVybiB0aGUgZmlyc3QgdmFsaWQgdG9rZW4gZm9yIHRoYXQgYWN0b3IgYW5kIHJhaXNlIGEgd2FybmluZy5cbiAgICAvLyAgICBpZiggdmVyYm9zZSkgdWkubm90aWZpY2F0aW9ucy53YXJuKCBgQWN0b3IgJHthY3Rvci5uYW1lfSBkb2Vzbid0IGhhdmUgYW55IGNvbnRyb2xsZWQgdG9rZW4uIFVzaW5nIGZpcnN0IHRva2VuIGZvdW5kLmApO1xuICAgIC8vICAgIHJldHVybiBhY3RvclRva2Vuc1swXTtcbiAgICAvLyAgfVxuXG4gICAgLy8gIGlmKCB2ZXJib3NlKSB1aS5ub3RpZmljYXRpb25zLmVycm9yKCBgQ291bGQgbm90IGZpbiBhbnkgdG9rZW4gZm9yICR7YWN0b3IubmFtZX0uYCk7XG4gICAgLy8gIHJldHVybiBudWxsO1xuICAgIC8vIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRBY3RvckltZ0Zyb21LZXkgKGFjdG9yS2V5KSB7XG4gICAgaWYgKCFhY3RvcktleSkgcmV0dXJuIG51bGxcbiAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndXNlVG9rZW4nKSkge1xuICAgICAgLy8gVHJ5IHRvIGZpbmQgYSB0b2tlbi5cbiAgICAgIGNvbnN0IHRva2VuID0gY2hhdEhlbHBlci5nZXRUb2tlbkZyb21LZXkoYWN0b3JLZXkpXG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgaWYgKCh0b2tlbi5kb2N1bWVudCB8fCB0b2tlbikudGV4dHVyZS5zcmMpIHtcbiAgICAgICAgICBpZiAoKHRva2VuLmRvY3VtZW50IHx8IHRva2VuKS50ZXh0dXJlLnNyYy5pbmRleE9mKCcqJykgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRva2VuLmRvY3VtZW50IHx8IHRva2VuKS50ZXh0dXJlLnNyY1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KGFjdG9yS2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndXNlVG9rZW4nKSkge1xuICAgICAgLy8gaWYgbm8gdG9rZW4gZm91bmQgZm9yIHRoYXQgYWN0b3IgcmV0dXJuIHRoZSBwcm90b3R5cGUgdG9rZW4gaW1hZ2UuXG4gICAgICBpZiAoYWN0b3IucHJvdG90eXBlVG9rZW4pIHtcbiAgICAgICAgaWYgKGFjdG9yLnByb3RvdHlwZVRva2VuLnRleHR1cmUuc3JjKSB7XG4gICAgICAgICAgaWYgKGFjdG9yLnByb3RvdHlwZVRva2VuLnRleHR1cmUuc3JjPy5pbmRleE9mKCcqJykgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0b3IucHJvdG90eXBlVG9rZW4udGV4dHVyZS5zcmNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFjdG9yLmltZ1xuICB9XG5cbiAgc3RhdGljIGdldERpc3RhbmNlIChzdGFydFRva2VuLCBlbmRUb2tlbikge1xuICAgIC8vIHN0YXJ0VG9rZW4udXBkYXRlU291cmNlKCk7XG4gICAgLy8gY2FudmFzLnNpZ2h0LmluaXRpYWxpemVUb2tlbnMoKTtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgZW5kVG9rZW4uY2VudGVyID09PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIGVuZFRva2VuLmlkICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgaWYgKHN0YXJ0VG9rZW4uc2NlbmU/LmlkIHx8IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHN0YXJ0VG9rZW4uc2NlbmUuaWQpXG4gICAgICAgIGlmICh0eXBlb2Ygc2NlbmU/LnRva2VucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCB0b2tlbnMgPSBzY2VuZT8udG9rZW5zXG4gICAgICAgICAgICAuZmlsdGVyKHRva2VuID0+IHRva2VuLmFjdG9yLmlkID09PSBlbmRUb2tlbi5kYXRhLmRvY3VtZW50LmlkKVxuICAgICAgICAgICAgLm1hcCh0b2tlbiA9PiB0b2tlbi5vYmplY3QpXG4gICAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGVuZFRva2VuID0gdG9rZW5zWzBdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBkaXN0YW5jZSA9IHtcbiAgICAgIGdyaWRVbml0OiAwLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICB1bml0OiBjYW52YXMuc2NlbmUuZ3JpZC51bml0c1xuICAgIH1cbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygc3RhcnRUb2tlbiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBzdGFydFRva2VuLmNlbnRlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBlbmRUb2tlbiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBlbmRUb2tlbi5jZW50ZXIgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zdCByYXkgPSBuZXcgUmF5KHN0YXJ0VG9rZW4uY2VudGVyLCBlbmRUb2tlbi5jZW50ZXIpXG4gICAgICBjb25zdCBzZWdtZW50ID0gW3sgcmF5IH1dXG4gICAgICBkaXN0YW5jZSA9IHtcbiAgICAgICAgZ3JpZFVuaXQ6IHJheS5kaXN0YW5jZSAvIGNhbnZhcy5zY2VuZS5ncmlkLnNpemUsXG4gICAgICAgIC8vIHZhbHVlOiAocmF5LmRpc3RhbmNlL2NhbnZhcy5zY2VuZS5kYXRhLmdyaWQpKmNhbnZhcy5zY2VuZS5kYXRhLmdyaWREaXN0YW5jZSxcbiAgICAgICAgdmFsdWU6IGNhbnZhcy5ncmlkLm1lYXN1cmVEaXN0YW5jZXMoc2VnbWVudCwge1xuICAgICAgICAgIGdyaWRTcGFjZXM6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2dyaWRTcGFjZXMnKVxuICAgICAgICB9KVswXSxcbiAgICAgICAgdW5pdDogY2FudmFzLnNjZW5lLmdyaWQudW5pdHNcbiAgICAgIH1cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXN0YW5jZUVsZXZhdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IGVsZXZhdGlvbiA9IE1hdGguYWJzKFxuICAgICAgICAgIChzdGFydFRva2VuLmRvY3VtZW50LmVsZXZhdGlvbiB8fCAwKSAtIChlbmRUb2tlbi5kb2N1bWVudC5lbGV2YXRpb24gfHwgMClcbiAgICAgICAgKVxuICAgICAgICBkaXN0YW5jZS52YWx1ZSA9IE1hdGguc3FydChcbiAgICAgICAgICBkaXN0YW5jZS52YWx1ZSAqIGRpc3RhbmNlLnZhbHVlICsgZWxldmF0aW9uICogZWxldmF0aW9uXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXN0YW5jZVRoZWF0cmVPZlRoZU1pbmQnKSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWVzc2FnZURpc3RhbmNlQ2FsY3VsYXRpb25GYWlsdXJlJylcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGRpc3RhbmNlXG4gIH1cblxuICBzdGF0aWMgdG9ZYXJkcyAoZGlzdGFuY2UpIHtcbiAgICBzd2l0Y2ggKGRpc3RhbmNlLnVuaXQpIHtcbiAgICAgIGNhc2UgJ2Z0JzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlLnZhbHVlIC8gM1xuXG4gICAgICBjYXNlICd5ZCc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZS52YWx1ZVxuXG4gICAgICBjYXNlICdtJzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlLnZhbHVlXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZS52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29DN1JvbGwge1xuICBzdGF0aWMgZ2V0RnJvbUNhcmQgKGNhcmQpIHtcbiAgICBjb25zdCByb2xsRGl2ID0gY2FyZC5xdWVyeVNlbGVjdG9yKCdkaXYuZGljZS1yb2xsJylcbiAgICBpZiAoIXJvbGxEaXYpIHJldHVybiBudWxsXG5cbiAgICBjb25zdCByb2xsID0gbmV3IENvQzdSb2xsKClcbiAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KHJvbGwsIHJvbGxEaXYpXG5cbiAgICByZXR1cm4gcm9sbFxuICB9XG5cbiAgZ2V0IHJlc3VsdFR5cGUgKCkge1xuICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gcGFyc2VJbnQodGhpcy5zdWNjZXNzTGV2ZWwpXG4gICAgc3dpdGNoICh0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXI6XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlJlZ3VsYXJTdWNjZXNzJylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5IYXJkU3VjY2VzcycpXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZTpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXh0cmVtZVN1Y2Nlc3MnKVxuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmNyaXRpY2FsOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Dcml0aWNhbFN1Y2Nlc3MnKVxuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZ1bWJsZTpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRnVtYmxlJylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mYWlsdXJlOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5GYWlsdXJlJylcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBnZXQgYWN0b3IgKCkge1xuICAgIGlmICh0aGlzLmFjdG9yS2V5KSByZXR1cm4gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5hY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBpdGVtICgpIHtcbiAgICBpZiAodGhpcy5pdGVtSWQgJiYgdGhpcy5hY3RvcikgcmV0dXJuIHRoaXMuYWN0b3IuaXRlbXMuZ2V0KHRoaXMuaXRlbUlkKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgc2tpbGwgKCkge1xuICAgIGlmICh0aGlzLnNraWxsSWQgJiYgdGhpcy5hY3RvcikgcmV0dXJuIHRoaXMuYWN0b3IuaXRlbXMuZ2V0KHRoaXMuc2tpbGxJZClcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgc2hvd0RpY2VSb2xsICgpIHtcbiAgICBpZiAoZ2FtZS5tb2R1bGVzLmdldCgnZGljZS1zby1uaWNlJyk/LmFjdGl2ZSkge1xuICAgICAgY29uc3QgZGljZVJlc3VsdHMgPSBbXVxuICAgICAgZm9yIChjb25zdCBkaWVSZXN1bHQgb2YgdGhpcy5kaWNlcy50ZW5zKSB7XG4gICAgICAgIGRpY2VSZXN1bHRzLnB1c2goZGllUmVzdWx0LnZhbHVlID09PSAxMDAgPyAwIDogZGllUmVzdWx0LnZhbHVlIC8gMTApXG4gICAgICB9XG4gICAgICBkaWNlUmVzdWx0cy5wdXNoKHRoaXMuZGljZXMudW5pdC52YWx1ZSlcblxuICAgICAgY29uc3QgZGljZURhdGEgPSB7XG4gICAgICAgIGZvcm11bGE6IGAke3RoaXMuZGljZXMudGVucy5sZW5ndGh9ZDEwMCsxZDEwYCxcbiAgICAgICAgcmVzdWx0czogZGljZVJlc3VsdHMsXG4gICAgICAgIHdoaXNwZXI6IG51bGwsXG4gICAgICAgIGJsaW5kOiBmYWxzZVxuICAgICAgfVxuICAgICAgZ2FtZS5kaWNlM2Quc2hvdyhkaWNlRGF0YSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbUVsZW1lbnQgKGVsZW1lbnQsIG9iamVjdCA9IG51bGwpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHJldHVyblxuICAgIGNvbnN0IHJvbGwgPSBvYmplY3QgfHwgbmV3IENvQzdSb2xsKClcbiAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KHJvbGwsIGVsZW1lbnQpXG4gICAgcm9sbC5kaWNlcyA9IHtcbiAgICAgIHRlbnM6IFtdLFxuICAgICAgdW5pdDoge31cbiAgICB9XG4gICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudChcbiAgICAgIHJvbGwuZGljZXMsXG4gICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kaWNlLXJlc3VsdCcpXG4gICAgKVxuICAgIHJvbGwuZGljZXMuaGFzQm9udXMgPSByb2xsLmRpY2VNb2RpZmllciAhPT0gMFxuICAgIHJvbGwuZGljZXMuYm9udXMgPSBNYXRoLmFicyhyb2xsLmRpY2VNb2RpZmllcilcbiAgICByb2xsLmRpY2VzLmJvbnVzVHlwZSA9XG4gICAgICByb2xsLmRpY2VNb2RpZmllciA8IDBcbiAgICAgICAgPyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRpY2VNb2RpZmllclBlbmFsdHknKVxuICAgICAgICA6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRGljZU1vZGlmaWVyQm9udXMnKVxuICAgIGNvbnN0IHRlbkRpY2UgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZW4tZGljZScpXG4gICAgaWYgKHRlbkRpY2UpIHtcbiAgICAgIGZvciAoY29uc3QgZCBvZiB0ZW5EaWNlLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJykpIHtcbiAgICAgICAgY29uc3QgZGllID0ge1xuICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICBpc01heDogZmFsc2UsXG4gICAgICAgICAgaXNNaW46IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiAtMVxuICAgICAgICB9XG4gICAgICAgIGNoYXRIZWxwZXIuZ2V0T2JqZWN0RnJvbUVsZW1lbnQoZGllLCBkKVxuICAgICAgICByb2xsLmRpY2VzLnRlbnMucHVzaChkaWUpXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHVuaXREaWUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy51bml0LWRpZScpXG4gICAgICA/IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLnVuaXQtZGllJykucXVlcnlTZWxlY3RvcignbGknKVxuICAgICAgOiBudWxsXG4gICAgcm9sbC5kaWNlcy51bml0LnZhbHVlID0gdW5pdERpZSA/IHBhcnNlSW50KHVuaXREaWUuZGF0YXNldC52YWx1ZSkgOiBudWxsXG5cbiAgICByb2xsLmluY3JlYXNlU3VjY2VzcyA9IFtdXG4gICAgY29uc3QgaW5jcmVhc2VTdWNjZXNzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuaW5jcmVhc2Utc3VjY2VzcycpXG4gICAgaWYgKGluY3JlYXNlU3VjY2VzcyAmJiBpbmNyZWFzZVN1Y2Nlc3MucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykpIHtcbiAgICAgIGZvciAoY29uc3QgaXNsIG9mIGluY3JlYXNlU3VjY2Vzcy5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKSkge1xuICAgICAgICBjb25zdCBuZXdTdWNjZXNMZXZlbCA9IHt9XG4gICAgICAgIGNoYXRIZWxwZXIuZ2V0T2JqZWN0RnJvbUVsZW1lbnQobmV3U3VjY2VzTGV2ZWwsIGlzbClcbiAgICAgICAgcm9sbC5pbmNyZWFzZVN1Y2Nlc3MucHVzaChuZXdTdWNjZXNMZXZlbClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocm9sbC5sdWNrTmVlZGVkKSB7XG4gICAgICByb2xsLmx1Y2tOZWVkZWRUeHQgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlNwZW5kTHVjaycsIHtcbiAgICAgICAgbHVja05lZWRlZFZhbHVlOiByb2xsLmx1Y2tOZWVkZWRcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmICghb2JqZWN0KSByZXR1cm4gcm9sbFxuICB9XG5cbiAgc3RhdGljIGdldEZyb21DaGVjayAoY2hlY2spIHtcbiAgICBjb25zdCByb2xsID0gbmV3IENvQzdSb2xsKClcblxuICAgIHJvbGwucm9sbFR5cGUgPSBjaGVjay5yb2xsVHlwZVxuICAgIHJvbGwuc2lkZSA9IGNoZWNrLnNpZGVcbiAgICByb2xsLmFjdGlvbiA9IGNoZWNrLmFjdGlvblxuICAgIHJvbGwucmVmTWVzc2FnZUlkID0gY2hlY2sucmVmTWVzc2FnZUlkXG4gICAgcm9sbC5yZWZlcmVuY2VNZXNzYWdlSWQgPSBjaGVjay5yZWZlcmVuY2VNZXNzYWdlSWRcblxuICAgIHJvbGwuc3VjY2Vzc0xldmVsID0gY2hlY2suc3VjY2Vzc0xldmVsXG4gICAgcm9sbC5kaWZmaWN1bHR5ID0gY2hlY2suZGlmZmljdWx0eVxuICAgIHJvbGwuc2tpbGxJZCA9IGNoZWNrLnNraWxsID8gY2hlY2suc2tpbGwuaWQgOiBudWxsXG4gICAgcm9sbC5pdGVtSWQgPSBjaGVjay5pdGVtID8gY2hlY2suaXRlbS5pZCA6IG51bGxcbiAgICByb2xsLmRpY2VNb2QgPSBjaGVjay5kaWNlTW9kaWZpZXJcbiAgICByb2xsLnZhbHVlID0gcGFyc2VJbnQoY2hlY2sucmF3VmFsdWUpXG4gICAgcm9sbC5mdW1ibGUgPSBjaGVjay5pc0Z1bWJsZVxuICAgIHJvbGwuY3JpdGljYWwgPSBjaGVjay5pc0NyaXRpY2FsXG4gICAgcm9sbC5jaGFyYWN0ZXJpc3RpYyA9IGNoZWNrLmNoYXJhY3RlcmlzdGljID8gY2hlY2suY2hhcmFjdGVyaXN0aWMgOiBudWxsXG4gICAgcm9sbC5yZXN1bHQgPSBjaGVjay5kaWNlLnRvdGFsXG5cbiAgICByb2xsLmFjdG9yS2V5ID0gY2hlY2suYWN0b3IudG9rZW5LZXkgLy8gUkVGQUNUT1JJTkcgKDIpXG5cbiAgICBpZiAoY2hlY2suYWN0b3IuaXNUb2tlbikge1xuICAgICAgcm9sbC50b2tlbklkID0gY2hlY2suYWN0b3IudG9rZW5LZXkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICByb2xsLmFjdG9ySWQgPSBudWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIHJvbGwudG9rZW5LZXkgPSBudWxsXG4gICAgICByb2xsLmFjdG9ySWQgPSBjaGVjay5hY3Rvci50b2tlbktleSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICB9XG5cbiAgICByZXR1cm4gcm9sbFxuICB9XG5cbiAgc3RhdGljIGF0dGFjaENoZWNrVG9FbGVtZW50IChodG1sRWxlbWVudCwgY2hlY2spIHtcbiAgICBjb25zdCByb2xsID0gQ29DN1JvbGwuZ2V0RnJvbUNoZWNrKGNoZWNrKVxuICAgIHJvbGwuYXR0YWNoVG9FbGVtZW50KGh0bWxFbGVtZW50KVxuXG4gICAgcmV0dXJuIHJvbGxcbiAgfVxuXG4gIGF0dGFjaFRvRWxlbWVudCAoaHRtbEVsZW1lbnQpIHtcbiAgICBjaGF0SGVscGVyLmF0dGFjaE9iamVjdFRvRWxlbWVudCh0aGlzLCBodG1sRWxlbWVudClcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29DN0RhbWFnZSB7XG4gIHN0YXRpYyBnZXRNYWluRGllIChkYW1hZ2VTdHJpbmcpIHtcbiAgICBpZiAoZGFtYWdlU3RyaW5nLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2QyMCcpKSByZXR1cm4gJ2QyMCdcbiAgICBpZiAoZGFtYWdlU3RyaW5nLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2QxMicpKSByZXR1cm4gJ2QxMidcbiAgICBpZiAoZGFtYWdlU3RyaW5nLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2QxMCcpKSByZXR1cm4gJ2QxMCdcbiAgICBpZiAoZGFtYWdlU3RyaW5nLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2Q4JykpIHJldHVybiAnZDgnXG4gICAgaWYgKGRhbWFnZVN0cmluZy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkNCcpKSByZXR1cm4gJ2Q0J1xuICAgIHJldHVybiAnZDYnXG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbUVsZW1lbnQgKGVsZW1lbnQsIG9iamVjdCA9IG51bGwpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHJldHVyblxuICAgIGNvbnN0IGRhbWFnZSA9IG9iamVjdCB8fCB7fVxuICAgIGNoYXRIZWxwZXIuZ2V0T2JqZWN0RnJvbUVsZW1lbnQoZGFtYWdlLCBlbGVtZW50KVxuICAgIGNvbnN0IHJvbGxzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZGljZS1yb2xscycpLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJylcbiAgICBkYW1hZ2Uucm9sbHMgPSBbXVxuICAgIGZvciAoY29uc3QgciBvZiByb2xscykge1xuICAgICAgY29uc3Qgcm9sbCA9IHt9XG4gICAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KHJvbGwsIHIpXG4gICAgICBkYW1hZ2Uucm9sbHMucHVzaChyb2xsKVxuICAgIH1cblxuICAgIGlmICghb2JqZWN0KSByZXR1cm4gZGFtYWdlXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBNYXRoVGVybSwgTnVtZXJpY1Rlcm0sIFBhcmVudGhldGljYWxUZXJtLCBSb2xsLCBSb2xsVGVybSAqL1xuY2xhc3MgQXZlcmFnZVBhcmVudGhldGljYWxUZXJtIGV4dGVuZHMgUGFyZW50aGV0aWNhbFRlcm0ge1xuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgX2V2YWx1YXRlU3luYyAoeyBtaW5pbWl6ZSA9IGZhbHNlLCBtYXhpbWl6ZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIC8vIEV2YWx1YXRlIHRoZSBpbm5lciBSb2xsXG4gICAgY29uc3Qgcm9sbCA9IHRoaXMucm9sbCB8fCBuZXcgQXZlcmFnZVJvbGwodGhpcy50ZXJtKVxuICAgIHRoaXMucm9sbCA9IHJvbGwuZXZhbHVhdGUoeyBtaW5pbWl6ZSwgbWF4aW1pemUsIGFzeW5jOiBmYWxzZSB9KVxuXG4gICAgLy8gUHJvcGFnYXRlIGZsYXZvciB0ZXh0IHRvIGlubmVyIHRlcm1zXG4gICAgaWYgKHRoaXMuZmxhdm9yKSB0aGlzLnJvbGwudGVybXMuZm9yRWFjaCh0ID0+IHsgdC5vcHRpb25zLmZsYXZvciA9IHQub3B0aW9ucy5mbGF2b3IgPz8gdGhpcy5mbGF2b3IgfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBdmVyYWdlUm9sbCBleHRlbmRzIFJvbGwge1xuICAvKipcbiAgICogRXZhbHVhdGUgdGhlIHJvbGwgc3luY2hyb25vdXNseS5cbiAgICogQSB0ZW1wb3JhcnkgaGVscGVyIG1ldGhvZCB1c2VkIHRvIG1pZ3JhdGUgYmVoYXZpb3IgZnJvbSAwLjcueCAoc3luYyBieSBkZWZhdWx0KSB0byAwLjkueCAoYXN5bmMgYnkgZGVmYXVsdCkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gICAgICBPcHRpb25zIHdoaWNoIGluZm9ybSBob3cgZXZhbHVhdGlvbiBpcyBwZXJmb3JtZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5taW5pbWl6ZV0gICAgRm9yY2UgdGhlIHJlc3VsdCB0byBiZSBtaW5pbWl6ZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5tYXhpbWl6ZV0gICAgRm9yY2UgdGhlIHJlc3VsdCB0byBiZSBtYXhpbWl6ZWRcbiAgICogQHJldHVybnMge1JvbGx9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZhbHVhdGVTeW5jICh7IG1pbmltaXplID0gZmFsc2UsIG1heGltaXplID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgLy8gU3RlcCAxIC0gUmVwbGFjZSBpbnRlcm1lZGlhdGUgdGVybXMgd2l0aCBldmFsdWF0ZWQgbnVtYmVyc1xuICAgIHRoaXMudGVybXMgPSB0aGlzLnRlcm1zLm1hcCh0ZXJtID0+IHtcbiAgICAgIGlmICghKHRlcm0gaW5zdGFuY2VvZiBSb2xsVGVybSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSb2xsIGV2YWx1YXRpb24gZW5jb3VudGVyZWQgYW4gaW52YWxpZCB0ZXJtIHdoaWNoIHdhcyBub3QgYSBSb2xsVGVybSBpbnN0YW5jZScpXG4gICAgICB9XG4gICAgICBpZiAodGVybS5pc0ludGVybWVkaWF0ZSkge1xuICAgICAgICB0ZXJtLmV2YWx1YXRlKHsgbWluaW1pemUsIG1heGltaXplLCBhc3luYzogZmFsc2UgfSlcbiAgICAgICAgdGhpcy5fZGljZSA9IHRoaXMuX2RpY2UuY29uY2F0KHRlcm0uZGljZSlcblxuICAgICAgICAvLyBUaGlzIHNlY3Rpb24gaXMgcmVwbGFjZWQgdG8gY2FsY3VsYXRlIHRoZSBhdmVyYWdlXG4gICAgICAgIGxldCB0b3RhbCA9IHRlcm0udG90YWxcbiAgICAgICAgaWYgKG1pbmltaXplICYmIG1heGltaXplICYmIHRlcm0uZGljZS5sZW5ndGgpIHtcbiAgICAgICAgICB0b3RhbCA9IE1hdGguZmxvb3IoKHRlcm0uZGljZVswXS5mYWNlcyArIDEpIC8gMiAqIHRlcm0udG90YWwpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IE51bWVyaWNUZXJtKHsgbnVtYmVyOiB0b3RhbCwgb3B0aW9uczogdGVybS5vcHRpb25zIH0pXG4gICAgICB9XG4gICAgICByZXR1cm4gdGVybVxuICAgIH0pXG5cbiAgICAvLyBTdGVwIDIgLSBTaW1wbGlmeSByZW1haW5pbmcgdGVybXNcbiAgICB0aGlzLnRlcm1zID0gdGhpcy5jb25zdHJ1Y3Rvci5zaW1wbGlmeVRlcm1zKHRoaXMudGVybXMpXG5cbiAgICAvLyBTdGVwIDMgLSBFdmFsdWF0ZSByZW1haW5pbmcgdGVybXNcbiAgICB0aGlzLnRlcm1zID0gdGhpcy50ZXJtcy5tYXAodGVybSA9PiB7XG4gICAgICBpZiAoIXRlcm0uX2V2YWx1YXRlZCkge1xuICAgICAgICBpZiAodHlwZW9mIHRlcm0uZmFjZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBOdW1lcmljVGVybSh7IG51bWJlcjogTWF0aC5mbG9vcigodGVybS5mYWNlcyArIDEpIC8gMiAqIHRlcm0ubnVtYmVyKSwgb3B0aW9uczogdGVybS5vcHRpb25zIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGVybS5ldmFsdWF0ZSh7IG1pbmltaXplLCBtYXhpbWl6ZSwgYXN5bmM6IGZhbHNlIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXJtXG4gICAgfSlcblxuICAgIC8vIFN0ZXAgNCAtIEV2YWx1YXRlIHRoZSBmaW5hbCBleHByZXNzaW9uXG4gICAgdGhpcy5fdG90YWwgPSB0aGlzLl9ldmFsdWF0ZVRvdGFsKClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0IGEgZm9ybXVsYSBieSBpZGVudGlmeWluZyBpdHMgb3V0ZXItbW9zdCBwYXJlbnRoZXRpY2FsIGFuZCBtYXRoIHRlcm1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBfZm9ybXVsYSAgICAgIFRoZSByYXcgZm9ybXVsYSB0byBzcGxpdFxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119ICAgICAgICAgIEFuIGFycmF5IG9mIHRlcm1zLCBzcGxpdCBvbiBwYXJlbnRoZXRpY2FsIHRlcm1zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgX3NwbGl0UGFyZW50aGVzZXMgKF9mb3JtdWxhKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NwbGl0R3JvdXAoX2Zvcm11bGEsIHtcbiAgICAgIG9wZW5SZWdleHA6IEF2ZXJhZ2VQYXJlbnRoZXRpY2FsVGVybS5PUEVOX1JFR0VYUCxcbiAgICAgIGNsb3NlUmVnZXhwOiBBdmVyYWdlUGFyZW50aGV0aWNhbFRlcm0uQ0xPU0VfUkVHRVhQLFxuICAgICAgb3BlblN5bWJvbDogJygnLFxuICAgICAgY2xvc2VTeW1ib2w6ICcpJyxcbiAgICAgIG9uQ2xvc2U6IGdyb3VwID0+IHtcbiAgICAgICAgLy8gRXh0cmFjdCBncm91cCBhcmd1bWVudHNcbiAgICAgICAgY29uc3QgZm4gPSBncm91cC5vcGVuLnNsaWNlKDAsIC0xKVxuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gZ3JvdXAudGVybXMuam9pbignJylcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgZmxhdm9yOiBncm91cC5mbGF2b3IgPyBncm91cC5mbGF2b3Iuc2xpY2UoMSwgLTEpIDogdW5kZWZpbmVkIH1cblxuICAgICAgICAvLyBDbGFzc2lmeSB0aGUgcmVzdWx0aW5nIHRlcm1zXG4gICAgICAgIGNvbnN0IHRlcm1zID0gW11cbiAgICAgICAgaWYgKGZuIGluIE1hdGgpIHtcbiAgICAgICAgICBjb25zdCBhcmdzID0gdGhpcy5fc3BsaXRNYXRoQXJncyhleHByZXNzaW9uKVxuICAgICAgICAgIHRlcm1zLnB1c2gobmV3IE1hdGhUZXJtKHsgZm4sIHRlcm1zOiBhcmdzLCBvcHRpb25zIH0pKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChmbikgdGVybXMucHVzaChmbilcbiAgICAgICAgICB0ZXJtcy5wdXNoKG5ldyBBdmVyYWdlUGFyZW50aGV0aWNhbFRlcm0oeyB0ZXJtOiBleHByZXNzaW9uLCBvcHRpb25zIH0pKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXJtc1xuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBDaGF0TWVzc2FnZSwgZ2FtZSAqL1xuaW1wb3J0IHsgY2hhdEhlbHBlciB9IGZyb20gJy4vaGVscGVyLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ2hhdENhcmRBY3RvciB7XG4gIGNvbnN0cnVjdG9yIChhY3RvcktleSA9IG51bGwsIGZhc3RGb3J3YXJkID0gZmFsc2UpIHtcbiAgICB0aGlzLmFjdG9yS2V5ID0gYWN0b3JLZXlcbiAgICB0aGlzLmZhc3RGb3J3YXJkID0gZmFzdEZvcndhcmRcbiAgfVxuXG4gIGdldCBkaXNwbGF5QWN0b3JPbkNhcmQgKCkge1xuICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNwbGF5QWN0b3JPbkNhcmQnKVxuICB9XG5cbiAgZ2V0IGlzQmxpbmQgKCkge1xuICAgIGlmICghdGhpcy5yb2xsTW9kZSkgcmV0dXJuIG51bGxcbiAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9pc0JsaW5kKSB7XG4gICAgICB0aGlzLl9pc0JsaW5kID0gdGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCdcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2lzQmxpbmRcbiAgfVxuXG4gIHNldCBpc0JsaW5kICh4KSB7XG4gICAgdGhpcy5faXNCbGluZCA9IHhcbiAgfVxuXG4gIGdldCByb2xsTW9kZSAoKSB7XG4gICAgaWYgKCF0aGlzLl9yb2xsTW9kZSkgdGhpcy5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgcmV0dXJuIHRoaXMuX3JvbGxNb2RlXG4gIH1cblxuICBzZXQgcm9sbE1vZGUgKHgpIHtcbiAgICB0aGlzLl9yb2xsTW9kZSA9IHhcbiAgfVxuXG4gIGdldCBhY3RvciAoKSB7XG4gICAgaWYgKCF0aGlzLmFjdG9yS2V5KSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLmFjdG9yS2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgfVxuXG4gIGdldCB0b2tlbiAoKSB7XG4gICAgaWYgKCF0aGlzLmFjdG9yKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLmFjdG9yS2V5KVxuICB9XG5cbiAgZ2V0IGl0ZW0gKCkge1xuICAgIGlmICghdGhpcy5pdGVtSWQpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIHRoaXMuYWN0b3IuaXRlbXMuZ2V0KHRoaXMuaXRlbUlkKVxuICB9XG5cbiAgZ2V0IHdlYXBvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbVxuICB9XG5cbiAgZ2V0IHRhcmdldGVkVG9rZW5zICgpIHtcbiAgICByZXR1cm4gWy4uLmdhbWUudXNlci50YXJnZXRzXVxuICB9XG5cbiAgZ2V0IHRhcmdldCAoKSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0VG9rZW4pIHJldHVybiB0aGlzLnRhcmdldFRva2VuXG4gICAgcmV0dXJuIHRoaXMudGFyZ2V0QWN0b3JcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBhIHRhcmdldEtleSB3YXMgcHJvdmlkZWQgdHJ5IHRvIGZpbmQgYSB0b2tlbiB3aXRoIHRoYXQga2V5IGFuZCB1c2UgaXQuXG4gICAqIElmIG5vdCB0YXJnZXRLZXkgcHJvdmlkZWQgcmV0dXJuIHRoZSBmaXJzdCB0YXJnZXQuXG4gICAqL1xuICBnZXQgdGFyZ2V0VG9rZW4gKCkge1xuICAgIGlmICghdGhpcy5fdGFyZ2V0VG9rZW4pIHtcbiAgICAgIGlmICh0aGlzLl90YXJnZXRLZXkpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0VG9rZW4gPSBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLl90YXJnZXRLZXkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl90YXJnZXRUb2tlbiA9IHRoaXMudGFyZ2V0ZWRUb2tlbnMucG9wKClcbiAgICAgICAgaWYgKHRoaXMuX3RhcmdldFRva2VuKSB7XG4gICAgICAgICAgdGhpcy5fdGFyZ2V0S2V5ID0gYCR7dGhpcy5fdGFyZ2V0VG9rZW4uc2NlbmUuaWR9LiR7dGhpcy5fdGFyZ2V0VG9rZW4uaWR9YFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgICAgIHRoaXMuX3RhcmdldFRva2VuID0gbnVsbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90YXJnZXRUb2tlblxuICB9XG5cbiAgZ2V0IHRhcmdldEFjdG9yICgpIHtcbiAgICBpZiAoIXRoaXMuX3RhcmdldEFjdG9yKSB7XG4gICAgICBpZiAodGhpcy50YXJnZXRUb2tlbikgdGhpcy5fdGFyZ2V0QWN0b3IgPSB0aGlzLnRhcmdldFRva2VuLmFjdG9yXG4gICAgICBlbHNlIHRoaXMuX3RhcmdldEFjdG9yID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5fdGFyZ2V0S2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldEFjdG9yXG4gIH1cblxuICBnZXQgdGFyZ2V0S2V5ICgpIHtcbiAgICBpZiAoIXRoaXMudGFyZ2V0VG9rZW4gJiYgIXRoaXMudGFyZ2V0QWN0b3IpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldEtleVxuICB9XG5cbiAgZ2V0IGhhc1RhcmdldCAoKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldFRva2VuICYmICF0aGlzLnRhcmdldEFjdG9yKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc2V0IHRhcmdldEtleSAoeCkge1xuICAgIHRoaXMuX3RhcmdldEtleSA9IHhcbiAgfVxuXG4gIGdldCBza2lsbHMgKCkge1xuICAgIHJldHVybiB0aGlzLmFjdG9yLmdldFdlYXBvblNraWxscyh0aGlzLml0ZW1JZClcbiAgfVxuXG4gIGdldCB0YXJnZXRJbWcgKCkge1xuICAgIGNvbnN0IGltZyA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JJbWdGcm9tS2V5KHRoaXMudGFyZ2V0S2V5KVxuICAgIGlmIChpbWcpIHJldHVybiBpbWdcbiAgICByZXR1cm4gJy4uL2ljb25zL3N2Zy9teXN0ZXJ5LW1hbi1ibGFjay5zdmcnXG4gIH1cblxuICBnZXQgbmFtZSAoKSB7XG4gICAgaWYgKHRoaXMudG9rZW4pIHJldHVybiB0aGlzLnRva2VuLm5hbWVcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5uYW1lXG4gIH1cblxuICBnZXQgdGFyZ2V0TmFtZSAoKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldCkgcmV0dXJuICdkdW1teSdcbiAgICByZXR1cm4gdGhpcy50YXJnZXQubmFtZVxuICB9XG5cbiAgZ2V0IGFjdG9ySW1nICgpIHtcbiAgICBjb25zdCBpbWcgPSBjaGF0SGVscGVyLmdldEFjdG9ySW1nRnJvbUtleSh0aGlzLmFjdG9yS2V5KVxuICAgIGlmIChpbWcpIHJldHVybiBpbWdcbiAgICByZXR1cm4gJy4uL2ljb25zL3N2Zy9teXN0ZXJ5LW1hbi1ibGFjay5zdmcnXG4gIH1cblxuICBhc3luYyBzYXkgKG1lc3NhZ2UsIGZsYXZvciA9IG51bGwpIHtcbiAgICBjb25zdCBzcGVha2VyRGF0YSA9IHt9XG4gICAgbGV0IHNwZWFrZXJcbiAgICBpZiAodGhpcy5hY3Rvcikge1xuICAgICAgc3BlYWtlckRhdGEuYWN0b3IgPSB0aGlzLmFjdG9yXG4gICAgICBpZiAodGhpcy50b2tlbikge1xuICAgICAgICBzcGVha2VyRGF0YS50b2tlbiA9IHRoaXMudG9rZW4uZG9jdW1lbnRcbiAgICAgIH1cbiAgICAgIHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHNwZWFrZXJEYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpXG4gICAgfVxuXG4gICAgY29uc3QgdXNlciA9IHRoaXMuYWN0b3IudXNlciA/IHRoaXMuYWN0b3IudXNlciA6IGdhbWUudXNlclxuXG4gICAgY29uc3QgY2hhdERhdGEgPSB7XG4gICAgICB1c2VyOiB1c2VyLmlkLFxuICAgICAgc3BlYWtlcixcbiAgICAgIGZsYXZvcixcbiAgICAgIGNvbnRlbnQ6IG1lc3NhZ2VcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBbJ2dtcm9sbCcsICdibGluZHJvbGwnXS5pbmNsdWRlcyhnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpKVxuICAgICkge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpIC8vIENoYW5nZSBmb3IgdXNlclxuICAgIH1cbiAgICBpZiAodGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCcpIGNoYXREYXRhLmJsaW5kID0gdHJ1ZVxuXG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKS50aGVuKG1zZyA9PiB7XG4gICAgICByZXR1cm4gbXNnXG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIGdhbWUsIHJlbmRlclRlbXBsYXRlLCBSb2xsLCB1aSAqL1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uLy4uL2NvbmZpZy5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgQ29DN0RpY2UgfSBmcm9tICcuLi8uLi9kaWNlLmpzJ1xuaW1wb3J0IHsgQ2hhdENhcmRBY3RvciB9IGZyb20gJy4uL2NhcmQtYWN0b3IuanMnXG5pbXBvcnQgeyBjcmVhdGVJbmxpbmVSb2xsLCBjaGF0SGVscGVyIH0gZnJvbSAnLi4vaGVscGVyLmpzJ1xuXG5mdW5jdGlvbiByZXBsYWNlciAoa2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ19fJykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkIC8vIHJlbW92ZSBmcm9tIHJlc3VsdFxuICB9XG5cbiAgY29uc3QgZXhjbHVkZSA9IFsnX2FjdG9yJ11cbiAgaWYgKGV4Y2x1ZGUuaW5jbHVkZXMoa2V5KSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGNvbnN0IGNoZWNrcyA9IFsnc2FuQ2hlY2snLCAnaW50Q2hlY2snXVxuICBpZiAoY2hlY2tzLmluY2x1ZGVzKGtleSkpIHtcbiAgICByZXR1cm4gdmFsdWUuSlNPTlJvbGxEYXRhXG4gIH1cblxuICByZXR1cm4gdmFsdWUgLy8gcmV0dXJuIGFzIGlzXG59XG5cbmV4cG9ydCBjbGFzcyBTYW5DaGVja0NhcmQgZXh0ZW5kcyBDaGF0Q2FyZEFjdG9yIHtcbiAgY29uc3RydWN0b3IgKGFjdG9yS2V5ID0gbnVsbCwgc2FuRGF0YSA9IHt9LCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihcbiAgICAgIGFjdG9yS2V5LFxuICAgICAgdHlwZW9mIG9wdGlvbnMuZmFzdEZvcndhcmQgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gQm9vbGVhbihvcHRpb25zLmZhc3RGb3J3YXJkKVxuICAgICAgICA6IGZhbHNlXG4gICAgKVxuICAgIHNhbkRhdGEuc2FuUmVhc29uID0gc2FuRGF0YS5zYW5SZWFzb24gPz8gJydcbiAgICB0aGlzLnNhbkRhdGEgPSBzYW5EYXRhXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIGlmIChzYW5EYXRhLm1vZGlmaWVyICYmICFpc05hTihOdW1iZXIoc2FuRGF0YS5tb2RpZmllcikpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuc2FuTW9kaWZpZXIgPSBOdW1iZXIoc2FuRGF0YS5tb2RpZmllcilcbiAgICB9XG4gICAgaWYgKHNhbkRhdGEuZGlmZmljdWx0eSAmJiAhaXNOYU4oTnVtYmVyKHNhbkRhdGEuZGlmZmljdWx0eSkpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuc2FuRGlmZmljdWx0eSA9IE51bWJlcihzYW5EYXRhLmRpZmZpY3VsdHkpXG4gICAgfVxuICAgIHRoaXMuc3RhdGUgPSB7fVxuICB9XG5cbiAgZ2V0IGlzQmxpbmQgKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5vcHRpb25zLmlzQmxpbmQgIT09ICd1bmRlZmluZWQnXG4gICAgICA/IEJvb2xlYW4odGhpcy5vcHRpb25zLmlzQmxpbmQpXG4gICAgICA6IHN1cGVyLmlzQmxpbmRcbiAgfVxuXG4gIGdldCBkaWZmaWN1bHR5ICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMub3B0aW9ucy5kaWZmaWN1bHR5ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgPyB0aGlzLm9wdGlvbnMuZGlmZmljdWx0eVxuICAgICAgOiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgfVxuXG4gIGdldCBtb2RpZmllciAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMubW9kaWZpZXIgIT09ICd1bmRlZmluZWQnXG4gICAgICA/IHRoaXMub3B0aW9ucy5tb2RpZmllclxuICAgICAgOiAwXG4gIH1cblxuICBnZXQgc2FuTG9zc1NvdXJjZSAoKSB7XG4gICAgaWYgKCF0aGlzLnNhbkRhdGEudG9rZW5LZXkpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuc2FuRGF0YS50b2tlbktleSlcbiAgfVxuXG4gIGdldCBpbnZvbHVudGFyeUFjdGlvbiAoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5zdGF0ZS5zYW5Sb2xsZWQgJiZcbiAgICAgICh0aGlzLnNhbkNoZWNrLmlzRmFpbHVyZSB8fCB0aGlzLnNhbkNoZWNrLmlzRnVtYmxlKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgc2FuTG9zc0Zvcm11bGEgKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNhblJvbGxlZCkge1xuICAgICAgaWYgKHRoaXMuc2FuRGF0YS5zYW5NYXggJiYgdGhpcy5zYW5DaGVjay5mYWlsZWQpIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihOdW1iZXIodGhpcy5zYW5EYXRhLnNhbk1heCkpXG4gICAgICAgICAgPyBOdW1iZXIodGhpcy5zYW5EYXRhLnNhbk1heClcbiAgICAgICAgICA6IHRoaXMuc2FuRGF0YS5zYW5NYXhcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNhbkRhdGEuc2FuTWluICYmIHRoaXMuc2FuQ2hlY2sucGFzc2VkKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4oTnVtYmVyKHRoaXMuc2FuRGF0YS5zYW5NaW4pKVxuICAgICAgICAgID8gTnVtYmVyKHRoaXMuc2FuRGF0YS5zYW5NaW4pXG4gICAgICAgICAgOiB0aGlzLnNhbkRhdGEuc2FuTWluXG4gICAgICB9XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHNhbkxvc3RUb1JlYXNvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0b3Iuc2FuTG9zdFRvUmVhc29uKHRoaXMuc2FuRGF0YS5zYW5SZWFzb24pXG4gIH1cblxuICBnZXQgbWF4UG9zc2libGVTYW5Mb3NzICgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5tYXhMb3NzVG9TYW5SZWFzb24oXG4gICAgICB0aGlzLnNhbkRhdGEuc2FuUmVhc29uLFxuICAgICAgdGhpcy5zYW5EYXRhLnNhbk1heFxuICAgIClcbiAgfVxuXG4gIGdldCBtYXhTYW5Mb3NzICgpIHtcbiAgICByZXR1cm4gbmV3IFJvbGwodGhpcy5zYW5EYXRhLnNhbk1heC50b1N0cmluZygpKS5ldmFsdWF0ZSh7XG4gICAgICBtYXhpbWl6ZTogdHJ1ZVxuICAgIH0pLnRvdGFsXG4gIH1cblxuICBnZXQgc2FuTG9zc1JlYXNvbkVuY291bnRlcmVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5zYW5Mb3NzUmVhc29uRW5jb3VudGVyZWQodGhpcy5zYW5EYXRhLnNhblJlYXNvbilcbiAgfVxuXG4gIGdldCBmaXJzdEVuY291bnRlciAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmFjdG9yLm15dGhvc0luc2FuaXR5RXhwZXJpZW5jZWRcbiAgfVxuXG4gIGdldCBpc0FjdG9yTG9vc2luZ1NhbiAoKSB7XG4gICAgLy8gTm8gc2FuIGxvc3MgZHVyaW5nIGJvdXQgb2YgbWFkLlxuICAgIGlmICh0aGlzLmFjdG9yLmhhc1RlbXBvSW5zYW5lKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBUaGUgc2FuIGxvc3MgaXMgYSAwXG4gICAgaWYgKHRoaXMuc2FuTG9zc0Zvcm11bGEgPT09IDApIHJldHVybiBmYWxzZVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5zYW5EYXRhLnNhblJlYXNvbiAmJlxuICAgICAgdGhpcy5hY3Rvci5tYXhMb3NzVG9TYW5SZWFzb24oXG4gICAgICAgIHRoaXMuc2FuRGF0YS5zYW5SZWFzb24sXG4gICAgICAgIHRoaXMuc2FuRGF0YS5zYW5NYXhcbiAgICAgICkgPT09IDBcbiAgICApIHtcbiAgICAgIHRoaXMuc3RhdGUuaW1tdW5lVG9DcmVhdHVyZSA9IHRydWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBnZXQgYm91dER1cmF0aW9uVGV4dCAoKSB7XG4gICAgaWYgKHRoaXMuYm91dER1cmF0aW9uKSB7XG4gICAgICBpZiAodGhpcy5ib3V0UmVhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuYm91dER1cmF0aW9ufSAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5yb3VuZHMnKX1gXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5ib3V0U3VtbWFyeSkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5ib3V0RHVyYXRpb259ICR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LmhvdXJzJyl9YFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHlvdUdhaW5DdGh1bGh1TXl0aG9zU3RyaW5nICgpIHtcbiAgICBpZiAodGhpcy5teXRob3NHYWluKSB7XG4gICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Zb3VHYWluZWRDdGh1bGh1TXl0aG9zJywge1xuICAgICAgICB2YWx1ZTogdGhpcy5teXRob3NHYWluXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgYXN5bmMgYWR2YW5jZVN0YXRlIChzdGF0ZSkge1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgJ2tlZXBDcmVhdHVyZVNhbkRhdGEnOiB7XG4gICAgICAgIHRoaXMuc3RhdGUua2VlcENyZWF0dXJlU2FuRGF0YSA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2ludm9sdW50YXJ5QWN0aW9uUGVyZm9ybWVkJzoge1xuICAgICAgICB0aGlzLnN0YXRlW3N0YXRlXSA9IHRydWVcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0b3JMb29zaW5nU2FuKSB0aGlzLnN0YXRlLmZpbmlzaCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3Nhbkxvc3NBcHBsaWVkJzoge1xuICAgICAgICBhd2FpdCB0aGlzLmFwcGx5U2FuTG9zcygpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdlbnRlckJvdXRPZk1hZG5lc3NSZWFsVGltZSc6IHtcbiAgICAgICAgdGhpcy5ib3V0RHVyYXRpb24gPSAoYXdhaXQgbmV3IFJvbGwoJzFEMTAnKS5yb2xsKHsgYXN5bmM6IHRydWUgfSkpLnRvdGFsXG4gICAgICAgIHRoaXMuYm91dFJlYWxUaW1lID0gdHJ1ZVxuICAgICAgICB0aGlzLmJvdXRTdW1tYXJ5ID0gZmFsc2VcbiAgICAgICAgdGhpcy5ib3V0UmVzdWx0ID0gYXdhaXQgdGhpcy5hY3Rvci5lbnRlckJvdXRPZk1hZG5lc3MoXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICB0aGlzLmJvdXREdXJhdGlvblxuICAgICAgICApXG4gICAgICAgIHRoaXMuc3RhdGUuYm91dE9mTWFkbmVzc1Jlc29sdmVkID0gdHJ1ZVxuICAgICAgICB0aGlzLnN0YXRlLmJvdXRPZk1hZG5lc3NPdmVyID0gZmFsc2VcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2VudGVyQm91dE9mTWFkbmVzc1N1bW1hcnknOiB7XG4gICAgICAgIHRoaXMuYm91dER1cmF0aW9uID0gKGF3YWl0IG5ldyBSb2xsKCcxRDEwJykucm9sbCh7IGFzeW5jOiB0cnVlIH0pKS50b3RhbFxuICAgICAgICB0aGlzLmJvdXRSZWFsVGltZSA9IGZhbHNlXG4gICAgICAgIHRoaXMuYm91dFN1bW1hcnkgPSB0cnVlXG4gICAgICAgIHRoaXMuYm91dFJlc3VsdCA9IGF3YWl0IHRoaXMuYWN0b3IuZW50ZXJCb3V0T2ZNYWRuZXNzKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHRoaXMuYm91dER1cmF0aW9uXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5zdGF0ZS5ib3V0T2ZNYWRuZXNzUmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgIGF3YWl0IHRoaXMudHJpZ2dlckluc2FuaXR5KClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2JvdXRPZk1hZG5lc3NPdmVyJzoge1xuICAgICAgICBhd2FpdCB0aGlzLmFjdG9yLnVuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLnRlbXBvSW5zYW5lKVxuICAgICAgICBhd2FpdCB0aGlzLnRyaWdnZXJJbnNhbml0eSgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdub015dGhvc0dhaW5lZCc6IHtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdGh1bGh1TXl0aG9zQXdhcmRlZCA9IHRydWVcbiAgICAgICAgdGhpcy5teXRob3NHYWluID0gMFxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAnY3RodWxodU15dGhvc0F3YXJkZWQnOiB7XG4gICAgICAgIGxldCBhbW91bnRHYWluZWQgPSAxXG4gICAgICAgIGlmICghdGhpcy5hY3Rvci5teXRob3NJbnNhbml0eUV4cGVyaWVuY2VkKSB7XG4gICAgICAgICAgYW1vdW50R2FpbmVkID0gNVxuICAgICAgICAgIGF3YWl0IHRoaXMuYWN0b3IuZXhwZXJpZW5jZUZpcnN0TXl0aG9zSW5zYW5pdHkoKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUuY3RodWxodU15dGhvc0F3YXJkZWQgPSB0cnVlXG4gICAgICAgIGNvbnN0IGN0aHVsaHVNeXRob3NTa2lsbCA9IHRoaXMuYWN0b3IuY3RodWxodU15dGhvc1NraWxsXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID1cbiAgICAgICAgICBjdGh1bGh1TXl0aG9zU2tpbGwuZGF0YS5kYXRhLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UgfHwgMFxuICAgICAgICBpZiAoY3RodWxodU15dGhvc1NraWxsKSB7XG4gICAgICAgICAgYXdhaXQgY3RodWxodU15dGhvc1NraWxsLnVwZGF0ZSh7XG4gICAgICAgICAgICAnZGF0YS5hZGp1c3RtZW50cy5leHBlcmllbmNlJzogb2xkVmFsdWUgKyBhbW91bnRHYWluZWRcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubXl0aG9zR2FpbiA9IGFtb3VudEdhaW5lZFxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGJ5cGFzc1JvbGxTYW4gKCkge1xuICAgIHRoaXMuaXNCeXBhc3NlZCA9IHRydWVcbiAgICB0aGlzLnNhbkNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgdGhpcy5zYW5DaGVjay5hY3RvciA9IHRoaXMuYWN0b3JLZXlcbiAgICB0aGlzLnNhbkNoZWNrLmF0dHJpYnV0ZSA9ICdzYW4nXG4gICAgdGhpcy5zYW5DaGVjay5kaWZmaWN1bHR5ID1cbiAgICAgIHRoaXMub3B0aW9ucy5zYW5EaWZmaWN1bHR5IHx8IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgIHRoaXMuc2FuQ2hlY2suZGljZU1vZGlmaWVyID0gdGhpcy5vcHRpb25zLnNhbk1vZGlmaWVyIHx8IDBcbiAgICBhd2FpdCB0aGlzLnNhbkNoZWNrLl9wZXJmb3JtKHsgZm9yY2VEU046IHRydWUgfSlcbiAgICB0aGlzLnN0YXRlLnNhblJvbGxlZCA9IHRydWVcbiAgICB0aGlzLnN0YXRlLmludm9sdW50YXJ5QWN0aW9uUGVyZm9ybWVkID0gdGhpcy5zYW5DaGVjay5wYXNzZWRcbiAgICB0aGlzLnN0YXRlLnNhbkxvc3NSb2xsZWQgPSB0cnVlXG4gICAgdGhpcy5zdGF0ZS5pZ25vcmVTYW5DaGVjayA9IHRydWVcbiAgICB0aGlzLnNhbkxvc3MgPSB0aGlzLnNhbkxvc3NGb3JtdWxhXG4gIH1cblxuICBhc3luYyByb2xsU2FuICgpIHtcbiAgICB0aGlzLnNhbkNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgdGhpcy5zYW5DaGVjay5hY3RvciA9IHRoaXMuYWN0b3JLZXlcbiAgICB0aGlzLnNhbkNoZWNrLmF0dHJpYnV0ZSA9ICdzYW4nXG4gICAgdGhpcy5zYW5DaGVjay5kaWZmaWN1bHR5ID1cbiAgICAgIHRoaXMub3B0aW9ucy5zYW5EaWZmaWN1bHR5IHx8IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgIHRoaXMuc2FuQ2hlY2suZGljZU1vZGlmaWVyID0gdGhpcy5vcHRpb25zLnNhbk1vZGlmaWVyIHx8IDBcbiAgICBhd2FpdCB0aGlzLnNhbkNoZWNrLl9wZXJmb3JtKHsgZm9yY2VEU046IHRydWUgfSlcbiAgICB0aGlzLnN0YXRlLnNhblJvbGxlZCA9IHRydWVcbiAgICB0aGlzLnN0YXRlLmludm9sdW50YXJ5QWN0aW9uUGVyZm9ybWVkID0gdGhpcy5zYW5DaGVjay5wYXNzZWRcbiAgICBpZiAoIXRoaXMuaXNBY3Rvckxvb3NpbmdTYW4pIHtcbiAgICAgIHRoaXMuc3RhdGUuZmluaXNoID0gdHJ1ZVxuICAgICAgaWYgKHRoaXMuYWN0b3IuaGFzVGVtcG9JbnNhbmUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5pbW11bmVBbHJlYWR5SW5Cb3V0ID0gdHJ1ZVxuICAgICAgICBpZiAoIXRoaXMuc2FuQ2hlY2sucGFzc2VkKSB0aGlzLnN0YXRlLmZpbmlzaCA9IGZhbHNlXG4gICAgICB9XG4gICAgICB0aGlzLnN0YXRlLnNhbkxvc3NSb2xsZWQgPSB0cnVlXG4gICAgICB0aGlzLnN0YXRlLnNhbkxvc3NBcHBsaWVkID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0ZS5pbnRSb2xsZWQgPSB0cnVlXG4gICAgICB0aGlzLnN0YXRlLmluc2FuaXR5ID0gZmFsc2VcbiAgICAgIHRoaXMuc2FuTG9zcyA9IDBcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnNhbkxvc3NGb3JtdWxhID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5zdGF0ZS5zYW5Mb3NzUm9sbGVkID0gdHJ1ZVxuICAgICAgaWYgKHRoaXMuc2FuRGF0YS5zYW5SZWFzb24pIHtcbiAgICAgICAgdGhpcy5zYW5Mb3NzID0gdGhpcy5hY3Rvci5tYXhMb3NzVG9TYW5SZWFzb24oXG4gICAgICAgICAgdGhpcy5zYW5EYXRhLnNhblJlYXNvbixcbiAgICAgICAgICB0aGlzLnNhbkxvc3NGb3JtdWxhXG4gICAgICAgIClcbiAgICAgICAgaWYgKHRoaXMuc2FuTG9zcyA8IHRoaXMuc2FuTG9zc0Zvcm11bGEpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmxpbWl0ZWRMb3NzVG9DcmVhdHVyZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zYW5Mb3NzID0gdGhpcy5zYW5Mb3NzRm9ybXVsYVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zYW5DaGVjay5pc0Z1bWJsZSkge1xuICAgICAgdGhpcy5zdGF0ZS5zYW5Mb3NzUm9sbGVkID0gdHJ1ZVxuICAgICAgdGhpcy5zYW5Mb3NzID0gdGhpcy5hY3Rvci5tYXhMb3NzVG9TYW5SZWFzb24oXG4gICAgICAgIHRoaXMuc2FuRGF0YS5zYW5SZWFzb24sXG4gICAgICAgIHRoaXMuc2FuRGF0YS5zYW5NYXhcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2FuRGF0YS5zYW5SZWFzb24pIHtcbiAgICAgIGNvbnN0IG1pbiA9IG5ldyBSb2xsKHRoaXMuc2FuTG9zc0Zvcm11bGEpLmV2YWx1YXRlKHtcbiAgICAgICAgbWluaW1pemU6IHRydWVcbiAgICAgIH0pLnRvdGFsXG4gICAgICBjb25zdCBtYXggPSB0aGlzLmFjdG9yLm1heExvc3NUb1NhblJlYXNvbihcbiAgICAgICAgdGhpcy5zYW5EYXRhLnNhblJlYXNvbixcbiAgICAgICAgdGhpcy5zYW5EYXRhLnNhbk1heFxuICAgICAgKVxuICAgICAgaWYgKG1pbiA+PSBtYXgpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5zYW5Mb3NzUm9sbGVkID0gdHJ1ZVxuICAgICAgICB0aGlzLnNhbkxvc3MgPSBtYXhcbiAgICAgICAgdGhpcy5zdGF0ZS5saW1pdGVkTG9zc1RvQ3JlYXR1cmUgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcm9sbFNhbkxvc3MgKCkge1xuICAgIHRoaXMuc2FuTG9zc1JvbGwgPSBuZXcgUm9sbChgJHt0aGlzLnNhbkxvc3NGb3JtdWxhfWApXG5cbiAgICBhd2FpdCB0aGlzLnNhbkxvc3NSb2xsLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuXG4gICAgYXdhaXQgQ29DN0RpY2Uuc2hvd1JvbGxEaWNlM2QodGhpcy5zYW5Mb3NzUm9sbClcblxuICAgIGNvbnN0IG1heCA9IHRoaXMuYWN0b3IubWF4TG9zc1RvU2FuUmVhc29uKFxuICAgICAgdGhpcy5zYW5EYXRhLnNhblJlYXNvbixcbiAgICAgIHRoaXMuc2FuRGF0YS5zYW5NYXhcbiAgICApXG5cbiAgICBpZiAodGhpcy5zYW5Mb3NzUm9sbC50b3RhbCA+IG1heCkge1xuICAgICAgdGhpcy5zdGF0ZS5saW1pdGVkTG9zc1RvQ3JlYXR1cmUgPSB0cnVlXG4gICAgfVxuXG4gICAgdGhpcy5zYW5Mb3NzID0gTWF0aC5taW4odGhpcy5zYW5Mb3NzUm9sbC50b3RhbCwgbWF4KVxuICAgIHRoaXMuc3RhdGUuc2FuTG9zc1JvbGxlZCA9IHRydWVcbiAgfVxuXG4gIGFzeW5jIGFwcGx5U2FuTG9zcyAoKSB7XG4gICAgYXdhaXQgdGhpcy5hY3Rvci5sb29zZVNhbih0aGlzLnNhbkRhdGEuc2FuUmVhc29uLCB0aGlzLnNhbkxvc3MpXG5cbiAgICBpZiAodGhpcy5zYW5Mb3NzID4gMCkgdGhpcy5zdGF0ZS5hY3Rvckxvc3RTYW4gPSB0cnVlXG4gICAgdGhpcy5zdGF0ZS5zYW5Mb3NzQXBwbGllZCA9IHRydWVcbiAgICBpZiAodGhpcy5hY3Rvci5zYW4gPD0gMCkge1xuICAgICAgdGhpcy5zdGF0ZS5pbnRSb2xsZWQgPSB0cnVlXG4gICAgICB0aGlzLnN0YXRlLmJvdXRPZk1hZG5lc3NPdmVyID0gdHJ1ZVxuXG4gICAgICB0aGlzLnN0YXRlLmluc2FuaXR5ID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0ZS5wZXJtYW5lbnRseUluc2FuZSA9IHRydWVcblxuICAgICAgdGhpcy5zdGF0ZS5maW5pc2ggPSB0cnVlXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zYW5Mb3NzIDwgNSkge1xuICAgICAgdGhpcy5zdGF0ZS5pbnRSb2xsZWQgPSB0cnVlXG4gICAgICBpZiAodGhpcy5hY3Rvci5oYXNJbmRlZkluc2FuZSkge1xuICAgICAgICB0aGlzLnN0YXRlLmluc2FuaXR5ID0gdHJ1ZVxuICAgICAgICB0aGlzLnN0YXRlLnNoYWtlbiA9IHRydWVcbiAgICAgICAgdGhpcy5zdGF0ZS5pbnNhbml0eVRhYmxlUm9sbGVkID0gZmFsc2VcbiAgICAgICAgdGhpcy5zdGF0ZS5maW5pc2ggPSBmYWxzZVxuICAgICAgICB0aGlzLnN0YXRlLmludFJvbGxlZCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUuaW5zYW5pdHkgPSBmYWxzZVxuICAgICAgICB0aGlzLnN0YXRlLnNoYWtlbiA9IHRydWVcbiAgICAgICAgdGhpcy5zdGF0ZS5pbnNhbml0eVRhYmxlUm9sbGVkID0gdHJ1ZVxuICAgICAgICB0aGlzLnN0YXRlLmZpbmlzaCA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZS5pbnRSb2xsZWQgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0aGlzLmFjdG9yLmRhaWx5U2FuTG9zcyA+PSB0aGlzLmFjdG9yLmRhaWx5U2FuTGltaXQpIHtcbiAgICAgIC8vIHRoaXMuYWN0b3Iuc2FuLzVcbiAgICAgIHRoaXMuc3RhdGUuaW5zYW5pdHkgPSB0cnVlXG4gICAgICB0aGlzLnN0YXRlLmludFJvbGxlZCA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUudGVtcG9yYXJ5SW5zYW5lID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdGUuaW5kZWZpbml0ZWx5SW5zYW5lID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0ZS5pbnNhbml0eVRhYmxlUm9sbGVkID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdGUubWVtb3J5UmVwcmVzc2VkID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdGUuZmluaXNoID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICBhc3luYyByb2xsSW50ICgpIHtcbiAgICB0aGlzLmludENoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgdGhpcy5pbnRDaGVjay5hY3RvciA9IHRoaXMuYWN0b3JLZXlcbiAgICB0aGlzLmludENoZWNrLmNoYXJhY3RlcmlzdGljID0gJ2ludCdcbiAgICB0aGlzLmludENoZWNrLmRpZmZpY3VsdHkgPVxuICAgICAgdGhpcy5vcHRpb25zLmludERpZmZpY3VsdHkgfHwgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgdGhpcy5pbnRDaGVjay5kaWNlTW9kaWZpZXIgPSB0aGlzLm9wdGlvbnMuaW50TW9kaWZpZXIgfHwgMFxuICAgIGF3YWl0IHRoaXMuaW50Q2hlY2suX3BlcmZvcm0oeyBmb3JjZURTTjogdHJ1ZSB9KVxuICAgIHRoaXMuc3RhdGUuaW50Um9sbGVkID0gdHJ1ZVxuICAgIGlmICh0aGlzLmludENoZWNrLnBhc3NlZCB8fCB0aGlzLnN0YXRlLmFscmVhZHlJbnNhbmUpIHtcbiAgICAgIHRoaXMuc3RhdGUuaW5zYW5pdHkgPSB0cnVlXG4gICAgICB0aGlzLnN0YXRlLnRlbXBvcmFyeUluc2FuZSA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUuaW5kZWZpbml0ZWx5SW5zYW5lID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdGUubWVtb3J5UmVwcmVzc2VkID0gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZS5pbnNhbml0eSA9IGZhbHNlXG4gICAgICB0aGlzLnN0YXRlLnRlbXBvcmFyeUluc2FuZSA9IGZhbHNlXG4gICAgICB0aGlzLnN0YXRlLmluZGVmaW5pdGVseUluc2FuZSA9IGZhbHNlXG4gICAgICB0aGlzLnN0YXRlLm1lbW9yeVJlcHJlc3NlZCA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUuZmluaXNoID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHRyaWdnZXJJbnNhbml0eSAoKSB7XG4gICAgdGhpcy5zdGF0ZS5ib3V0T2ZNYWRuZXNzT3ZlciA9IHRydWVcbiAgICBpZiAodGhpcy5zdGF0ZS5pbmRlZmluaXRlbHlJbnNhbmUpIHtcbiAgICAgIGF3YWl0IHRoaXMuYWN0b3Iuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmluZGVmSW5zYW5lKVxuICAgIH1cbiAgICB0aGlzLnN0YXRlLmZpbmlzaCA9IHRydWVcbiAgfVxuXG4gIGFzeW5jIGNsZWFyU2FuTG9zc1JlYXNvbiAoKSB7XG4gICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRSZWFzb25TYW5Mb3NzKHRoaXMuc2FuRGF0YS5zYW5SZWFzb24sIDApXG4gICAgaWYgKCF0aGlzLnNhbkxvc3NSZWFzb25FbmNvdW50ZXJlZCkge1xuICAgICAgdGhpcy5zdGF0ZS5rZWVwQ3JlYXR1cmVTYW5EYXRhID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkICgpIHtcbiAgICAvLyBBdHRhY2hlIHRoZSBzYW5DaGVjayByZXN1bHQgdG8gdGhlIG1lc3NhZ2UuXG4gICAgaWYgKHRoaXMuc3RhdGUuc2FuUm9sbGVkKSB7XG4gICAgICB0aGlzLl9faW5saW5lU2FuQ2hlY2sgPSB0aGlzLnNhbkNoZWNrLmlubGluZUNoZWNrLm91dGVySFRNTFxuICAgIH1cblxuICAgIGlmICh0aGlzLnNhbkxvc3NSb2xsKSB7XG4gICAgICBjb25zdCBhID0gY3JlYXRlSW5saW5lUm9sbCh0aGlzLnNhbkxvc3NSb2xsKVxuICAgICAgdGhpcy5fX2lubGluZVNhbkxvc3NSb2xsID0gYS5vdXRlckhUTUxcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5pbnRSb2xsZWQgJiYgdGhpcy5pbnRDaGVjaykge1xuICAgICAgdGhpcy5fX2lubGluZUludENoZWNrID0gdGhpcy5pbnRDaGVjay5pbmxpbmVDaGVjay5vdXRlckhUTUxcbiAgICB9XG5cbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUoU2FuQ2hlY2tDYXJkLnRlbXBsYXRlLCB0aGlzKVxuICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9ICQucGFyc2VIVE1MKGh0bWwpWzBdXG5cbiAgICAvLyBBdHRhY2ggdGhlIHNhbkNoZWNrQ2FyZCBvYmplY3QgdG8gdGhlIG1lc3NhZ2UuXG4gICAgaHRtbENhcmRFbGVtZW50LmRhdGFzZXQub2JqZWN0ID0gZXNjYXBlKEpTT04uc3RyaW5naWZ5KHRoaXMsIHJlcGxhY2VyKSlcblxuICAgIC8vIFVwZGF0ZSB0aGUgbWVzc2FnZS5cbiAgICBjb25zdCBjaGF0TWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuXG4gICAgY29uc3QgbXNnID0gYXdhaXQgY2hhdE1lc3NhZ2UudXBkYXRlKHtcbiAgICAgIGNvbnRlbnQ6IGh0bWxDYXJkRWxlbWVudC5vdXRlckhUTUxcbiAgICB9KVxuICAgIGF3YWl0IHVpLmNoYXQudXBkYXRlTWVzc2FnZShtc2csIGZhbHNlKVxuICAgIHJldHVybiBtc2dcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUgKCkge1xuICAgIHJldHVybiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L2NhcmRzL3Nhbi1jaGVjay5odG1sJ1xuICB9XG5cbiAgc3RhdGljIGNoZWNrVGFyZ2V0cyAoc2FuRGF0YSwgZmFzdEZvcndhcmQgPSBmYWxzZSkge1xuICAgIGNvbnN0IHRhcmdldHMgPSBbLi4uZ2FtZS51c2VyLnRhcmdldHNdXG4gICAgaWYgKHRhcmdldHMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IHQgb2YgdGFyZ2V0cykge1xuICAgICAgICBpZiAodC5hY3Rvci5pc1Rva2VuKSB7XG4gICAgICAgICAgU2FuQ2hlY2tDYXJkLmNyZWF0ZSh0LmFjdG9yLnRva2VuS2V5LCBzYW5EYXRhLCB7XG4gICAgICAgICAgICBmYXN0Rm9yd2FyZFxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgU2FuQ2hlY2tDYXJkLmNyZWF0ZSh0LmFjdG9yLmlkLCBzYW5EYXRhLCB7IGZhc3RGb3J3YXJkIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XYXJuTm9UYXJnZXRzU2FuQ2hlY2snKSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlICguLi5hcmdzKSB7XG4gICAgY29uc3QgY2hhdENhcmQgPSBuZXcgU2FuQ2hlY2tDYXJkKC4uLmFyZ3MpXG4gICAgaWYgKGNoYXRDYXJkLmFjdG9yLmhhc0luZGVmSW5zYW5lKSB7XG4gICAgICBjaGF0Q2FyZC5zdGF0ZS5hbHJlYWR5SW5zYW5lID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChjaGF0Q2FyZC5hY3Rvci5zYW4gPD0gMCkge1xuICAgICAgY2hhdENhcmQuc3RhdGUuaW50Um9sbGVkID0gdHJ1ZVxuICAgICAgY2hhdENhcmQuc3RhdGUuYm91dE9mTWFkbmVzc092ZXIgPSB0cnVlXG5cbiAgICAgIGNoYXRDYXJkLnN0YXRlLmluc2FuaXR5ID0gdHJ1ZVxuICAgICAgY2hhdENhcmQuc3RhdGUucGVybWFuZW50bHlJbnNhbmUgPSB0cnVlXG5cbiAgICAgIGNoYXRDYXJkLnN0YXRlLmZpbmlzaCA9IHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUoU2FuQ2hlY2tDYXJkLnRlbXBsYXRlLCBjaGF0Q2FyZClcbiAgICBjb25zdCBodG1sQ2FyZEVsZW1lbnQgPSAkLnBhcnNlSFRNTChodG1sKVswXVxuXG4gICAgaHRtbENhcmRFbGVtZW50LmRhdGFzZXQub2JqZWN0ID0gZXNjYXBlKEpTT04uc3RyaW5naWZ5KGNoYXRDYXJkLCByZXBsYWNlcikpXG4gICAgYXdhaXQgY2hhdENhcmQuc2F5KGh0bWxDYXJkRWxlbWVudC5vdXRlckhUTUwpXG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbU1lc3NhZ2VJZCAobWVzc2FnZUlkKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VJZClcbiAgICBjb25zdCBodG1sTWVzc2FnZSA9ICQucGFyc2VIVE1MKG1lc3NhZ2UuY29udGVudClbMF1cblxuICAgIGNvbnN0IGh0bWxDYXJkID0gaHRtbE1lc3NhZ2UucXVlcnlTZWxlY3RvcignLmNoYXQtY2FyZCcpXG5cbiAgICByZXR1cm4gU2FuQ2hlY2tDYXJkLmdldEZyb21DYXJkKGh0bWxDYXJkKVxuICB9XG5cbiAgc3RhdGljIGdldEZyb21DYXJkIChjYXJkKSB7XG4gICAgY29uc3Qgc2FuQ2hlY2tDYXJkRGF0YSA9IEpTT04ucGFyc2UodW5lc2NhcGUoY2FyZC5kYXRhc2V0Lm9iamVjdCkpXG5cbiAgICBjb25zdCBzYW5DaGVja0NhcmQgPSBuZXcgU2FuQ2hlY2tDYXJkKClcbiAgICBPYmplY3QuYXNzaWduKHNhbkNoZWNrQ2FyZCwgc2FuQ2hlY2tDYXJkRGF0YSlcbiAgICBpZiAoIXNhbkNoZWNrQ2FyZC5tZXNzYWdlSWQpIHtcbiAgICAgIHNhbkNoZWNrQ2FyZC5tZXNzYWdlSWQgPSBjYXJkLmNsb3Nlc3QoJy5tZXNzYWdlJykuZGF0YXNldC5tZXNzYWdlSWRcbiAgICB9XG5cbiAgICBpZiAoc2FuQ2hlY2tDYXJkLnNhbkNoZWNrPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gJ09iamVjdCcpIHtcbiAgICAgIHNhbkNoZWNrQ2FyZC5zYW5DaGVjayA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIG5ldyBDb0M3Q2hlY2soKSxcbiAgICAgICAgc2FuQ2hlY2tDYXJkLnNhbkNoZWNrXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHNhbkNoZWNrQ2FyZC5pbnRDaGVjaz8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdPYmplY3QnKSB7XG4gICAgICBzYW5DaGVja0NhcmQuaW50Q2hlY2sgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICBuZXcgQ29DN0NoZWNrKCksXG4gICAgICAgIHNhbkNoZWNrQ2FyZC5pbnRDaGVja1xuICAgICAgKVxuICAgIH1cblxuICAgIGlmIChzYW5DaGVja0NhcmQuc2FuTG9zc1JvbGw/LmNvbnN0cnVjdG9yPy5uYW1lID09PSAnT2JqZWN0Jykge1xuICAgICAgc2FuQ2hlY2tDYXJkLnNhbkxvc3NSb2xsID0gUm9sbC5mcm9tRGF0YShzYW5DaGVja0NhcmQuc2FuTG9zc1JvbGwpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNhbkNoZWNrQ2FyZFxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgY2FudmFzLCBDaGF0TWVzc2FnZSwgQ09ORklHLCBDT05TVCwgZm91bmRyeSwgZ2FtZSwgdWkgKi9cbmltcG9ydCB7IENvQ0FjdG9yIH0gZnJvbSAnLi4vYWN0b3JzL2FjdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29udGVudExpbmtEaWFsb2cgfSBmcm9tICcuL2NvYzctY29udGVudC1saW5rLWRpYWxvZy5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBTYW5DaGVja0NhcmQgfSBmcm9tICcuLi9jaGF0L2NhcmRzL3Nhbi1jaGVjay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIsIGlzQ3RybEtleSB9IGZyb20gJy4uL2NoYXQvaGVscGVyLmpzJ1xuXG4vKipcbiAqIEFsbG93IGZvciBwYXJzaW5nIG9mIENvQzcgZWxlbWVudHMgaW4gY2hhdCBtZXNzYWdlIGFuZCBzaGVldHMuXG4gKiBGb3JtYXQgaXMgOlxuICogQGNvYzcuVFlQRV9PRl9SRVFVRVNUW09QVElPTlNde0RJU1BMQVlFRF9OQU1FfVxuICogVFlQRV9PRl9SRVFVRVNUIDpcbiAqIC0gc2FubG9zczogdHJpZ2dlciBhIHNhbiBjaGVjaywgdXBvbiBmYWlsdXJlIHdpbGwgcHJvcG9zZSB0byBkZWR1Y3QgdGhlIGNvcnJlc3BvbmRpbmcgU0FOLlxuICogLSBjaGVjazogdHJpZ2dlciBhIGNoZWNrIGRlcGVuZGluZyBvbiB0aGUgb3B0aW9ucy5cbiAqIC0gaXRlbTogVHJpZ2dlciBhIHdlYXBvbiBjaGVja1xuICogLSBlZmZlY3Q6IEFkZCBhbiBlZmZlY3RcbiAqXG4gKiBPUFRJT05TOiBbXSA9IG9wdGlvbmFsXG4gKiBzYW5sb3NzOlxuICogICBzYW5NYXg6IG1heCBTQU4gbG9zc1xuICogICBzYW5NaW46IG1pbiBTQU4gbG9zc1xuICogICBzYW5SZWFzb246IFJlYXNvblxuICogY2hlY2s6XG4gKiAgIHR5cGU6IHR5cGUgb2YgY2hlY2sgKGNoYXJhY3RlcmlzdGljLCBza2lsbCwgYXR0cmliKS5cbiAqICAgbmFtZTogbmFtZSBvZiB0aGUgc2tpbGwvY2hhcmFjdGVyaXN0aWMuXG4gKiAgIFtkaWZmaWN1bHR5XTogPyAoYmxpbmQpLCAwIChyZWd1bGFyKSwgKyAoaGFyZCksICsrIChleHRyZW1lKSwgKysrIChjcml0aWNhbCkuXG4gKiAgIFttb2RpZmllcl06IC14ICh4IHBlbmFsdHkgZGljZSksICt4ICh4IGJvbnVzIGRpY2UpLCAwIChubyBtb2RpZmllcikuXG4gKiAgIFtpY29uXTogaWNvbiB0dSB1c2UgKGZvbnQgYXdzb21lKS5cbiAqICAgW2JsaW5kXTogd2lsbCB0cmlnZ2VyIGEgYmxpbmQgcm9sbC5cbiAqXG4gKiBbRElTUExBWUVEX05BTUU6IG5hbWUgdG8gZGlzcGxheS5dXG4gKlxuICogVG8gYWRkL2VkaXQgYSBuZXcgbGluayB1cGRhdGUgdGhlc2Ugc2VjdGlvbnNcbiAqICAgZnJvbURyb3BEYXRhID0+IEFkZCBhbGwgZGVmYXVsdHMgaGVyZVxuICogICBfY3JlYXRlTGluayA9PiBDcmVhdGUgSFRNTCBmcm9tIGRvY3VtZW50IGRhdGFcbiAqICAgX2NyZWF0ZURvY3VtZW50TGluayA9PiBDcmVhdGUgQGxpbmsgZnJvbSBkb2N1bWVudCBkYXRhXG4gKiAgIF9vbkxpbmtBY3RvckNsaWNrID0+IFByb2Nlc3MgbGlua1xuICovXG5leHBvcnQgY2xhc3MgQ29DN0xpbmsge1xuICBzdGF0aWMgZ2V0IENIRUNLX1RZUEUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBDSEVDSzogJ2NoZWNrJyxcbiAgICAgIFNBTkxPU1M6ICdzYW5sb3NzJyxcbiAgICAgIElURU06ICdpdGVtJyxcbiAgICAgIEVGRkVDVDogJ2VmZmVjdCdcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IExJTktfVFlQRSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIENIQVJBQ1RFUklTVElDOiAnY2hhcmFjdGVyaXN0aWMnLFxuICAgICAgQVRUUklCVVRFOiAnYXR0cmlidXRlJyxcbiAgICAgIFNLSUxMOiAnc2tpbGwnXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGluaXQgKCkge1xuICAgIENPTkZJRy5Db0M3TGluayA9IHtcbiAgICAgIGRvY3VtZW50Q2xhc3M6IENvQzdMaW5rXG4gICAgfVxuICAgIGNvbnN0IGJvZHkgPSAkKCdib2R5JylcbiAgICBib2R5Lm9uKCdjbGljaycsICdhLmNvYzctbGluaycsIENvQzdMaW5rLl9vbkxpbmtDbGljaylcbiAgICBib2R5Lm9uKCdkcmFnc3RhcnQnLCAnYS5jb2M3LWxpbmsnLCBldmVudCA9PiBDb0M3TGluay5fb25EcmFnQ29DN0xpbmsoZXZlbnQpKVxuXG4gICAgQ09ORklHLlRleHRFZGl0b3IuZW5yaWNoZXJzLnB1c2goe1xuICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnQChjb2M3KVxcXFwuJyArICcoY2hlY2t8ZWZmZWN0fGl0ZW18c2FubG9zcyknICsgJ1xcXFxbKFteXFxcXFtcXFxcXV0qKD86XFxcXFtbXlxcXFxbXFxcXF1dKig/OlxcXFxbW15cXFxcW1xcXFxdXSpcXFxcXSkqW15cXFxcW1xcXFxdXSpcXFxcXSkqW15cXFxcW1xcXFxdXSopXFxcXF0nICsgJyg/OnsoW159XSspfSk/JywgJ2dpJyksXG4gICAgICBlbnJpY2hlcjogQ29DN0xpbmsuX2NyZWF0ZUxpbmtcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIF9saW5rRnJvbUV2ZW50IChldmVudCkge1xuICAgIGNvbnN0IGEgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgaSA9IGEucXVlcnlTZWxlY3RvcignW2RhdGEtbGluay1pY29uXScpXG4gICAgY29uc3QgZGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGEuZGF0YXNldClcblxuICAgIGNvbnN0IG9sZFR5cGUgPSBkYXRhLnR5cGVcblxuICAgIGRhdGEudHlwZSA9ICdDb0M3TGluaydcbiAgICBkYXRhLmljb24gPSBudWxsXG5cbiAgICBpZiAob2xkVHlwZSkge1xuICAgICAgZGF0YS5saW5rVHlwZSA9IG9sZFR5cGVcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBkYXRhLm9iamVjdCAmJlxuICAgICAgKHR5cGVvZiBkYXRhLm9iamVjdCA9PT0gJ3N0cmluZycgfHwgZGF0YS5vYmplY3QgaW5zdGFuY2VvZiBTdHJpbmcpXG4gICAgKSB7XG4gICAgICBkYXRhLm9iamVjdCA9IEpTT04ucGFyc2UoZGF0YS5vYmplY3QpXG4gICAgICAvLyBkYXRhLmxpbmtUeXBlID0gQ29DN0xpbmsuTElOS19UWVBFLkVGRkVDVFxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGkuZGF0YXNldCAmJlxuICAgICAgaS5kYXRhc2V0LmxpbmtJY29uICYmXG4gICAgICBpLmRhdGFzZXQubGlua0ljb24gIT09ICdmYXMgZmEtZGljZSdcbiAgICApIHtcbiAgICAgIGRhdGEuaWNvbiA9IGkuZGF0YXNldC5saW5rSWNvblxuICAgIH1cbiAgICBkYXRhLmRpc3BsYXlOYW1lID0gYS5kYXRhc2V0LmRpc3BsYXlOYW1lID8gYS5pbm5lclRleHQgOiBudWxsXG4gICAgaWYgKGRhdGEuZGlmZmljdWx0eSkge1xuICAgICAgZGF0YS5kaWZmaWN1bHR5ID0gQ29DN1V0aWxpdGllcy5jb252ZXJ0RGlmZmljdWx0eShkYXRhLmRpZmZpY3VsdHkpXG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBzdGF0aWMgX29uRHJhZ0NvQzdMaW5rIChldmVudCkge1xuICAgIGNvbnN0IGRhdGEgPSBDb0M3TGluay5fbGlua0Zyb21FdmVudChldmVudClcbiAgICBldmVudC5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gIH1cblxuICAvKipcbiAgICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gaGFuZGxlIG9idGFpbmluZyB0aGUgcmVsZXZhbnQgRG9jdW1lbnQgZnJvbSBkcm9wcGVkIGRhdGEgcHJvdmlkZWQgdmlhIGEgRGF0YVRyYW5zZmVyIGV2ZW50LlxuICAgKiBUaGUgZHJvcHBlZCBkYXRhIGNvdWxkIGhhdmU6XG4gICAqIDEuIEEgZGF0YSBvYmplY3QgZXhwbGljaXRseSBwcm92aWRlZFxuICAgKiBAbWVtYmVyb2YgQ2xpZW50RG9jdW1lbnRNaXhpblxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAgICAgICAgICAgVGhlIGRhdGEgb2JqZWN0IGV4dHJhY3RlZCBmcm9tIGEgRGF0YVRyYW5zZmVyIGV2ZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zICAgICAgICBBZGRpdGlvbmFsIG9wdGlvbnMgd2hpY2ggYWZmZWN0IGRyb3AgZGF0YSBiZWhhdmlvclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudD59ICAgVGhlIHJlc29sdmVkIERvY3VtZW50XG4gICAqIEB0aHJvd3MgSWYgYSBEb2N1bWVudCBjb3VsZCBub3QgYmUgcmV0cmlldmVkIGZyb20gdGhlIHByb3ZpZGVkIGRhdGEuXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZnJvbURyb3BEYXRhIChkYXRhLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBjbHMgPSBuZXcgQ29DN0xpbmsoKVxuICAgIGNscy5vYmplY3QgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHtcbiAgICAgIHR5cGU6ICdDb0M3TGluaycsXG4gICAgICBjaGVjazogQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDSyxcbiAgICAgIGxpbmtUeXBlOiBDb0M3TGluay5MSU5LX1RZUEUuU0tJTEwsXG4gICAgICBkaWZmaWN1bHR5OiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIsXG4gICAgICBtb2RpZmllcjogMCxcbiAgICAgIG9iamVjdDoge1xuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVmZmVjdE5ldycpLFxuICAgICAgICBpY29uOiAnaWNvbnMvc3ZnL2F1cmEuc3ZnJyxcbiAgICAgICAgY2hhbmdlczogW11cbiAgICAgIH1cbiAgICB9LCBkYXRhKVxuICAgIGZvciAoY29uc3Qga2V5IG9mIFsnbmFtZScsICdkaXNwbGF5TmFtZScsICdpY29uJywgJ2lkJywgJ3BhY2snLCAnc2FuTWluJywgJ3Nhbk1heCcsICdzYW5SZWFzb24nXSkge1xuICAgICAgY2xzLm9iamVjdFtrZXldID0gY2xzLm9iamVjdFtrZXldID8/ICcnXG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2xzLm9iamVjdC5vYmplY3QuaWNvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNscy5vYmplY3Qub2JqZWN0LmV4dGVybmFsICE9PSAndW5kZWZpbmVkJyAmJiBbJ2h0dHAnLCAnaHR0cHMnXS5pbmNsdWRlcyhjbHMub2JqZWN0Lm9iamVjdC5leHRlcm5hbCkpIHtcbiAgICAgIGNscy5vYmplY3Qub2JqZWN0Lmljb24gPSBjbHMub2JqZWN0Lm9iamVjdC5leHRlcm5hbCArICc6Ly8nICsgY2xzLm9iamVjdC5vYmplY3QuaWNvblxuICAgIH1cbiAgICBjbHMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICByZXR1cm4gY2xzXG4gIH1cblxuICBzdGF0aWMgX2NyZWF0ZUxpbmsgKG1hdGNoKSB7XG4gICAgY29uc3QgbmFtZSA9IG1hdGNoWzRdID8/IHVuZGVmaW5lZFxuICAgIGNvbnN0IG9wdGlvbnMgPSBtYXRjaFszXSA/PyB1bmRlZmluZWRcbiAgICBjb25zdCB0eXBlID0gbWF0Y2hbMl0gPz8gdW5kZWZpbmVkXG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgY2xzOiBbJ2NvYzctbGluayddLFxuICAgICAgZGF0YXNldDogeyBjaGVjazogdHlwZSB9LFxuICAgICAgaWNvbjogbnVsbCxcbiAgICAgIGJsaW5kOiBmYWxzZSxcbiAgICAgIG5hbWVcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5FRkZFQ1QpIHtcbiAgICAgIGRhdGEuZWZmZWN0ID0gSlNPTi5wYXJzZShvcHRpb25zKVxuICAgICAgZGF0YS5kYXRhc2V0Lm9iamVjdCA9IG9wdGlvbnNcbiAgICAgIGlmICh0eXBlb2YgZGF0YS5lZmZlY3QuaWNvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRhdGEuZWZmZWN0LmV4dGVybmFsICE9PSAndW5kZWZpbmVkJyAmJiBbJ2h0dHAnLCAnaHR0cHMnXS5pbmNsdWRlcyhkYXRhLmVmZmVjdC5leHRlcm5hbCkpIHtcbiAgICAgICAgZGF0YS5lZmZlY3QuaWNvbiA9IGRhdGEuZWZmZWN0LmV4dGVybmFsICsgJzovLycgKyBkYXRhLmVmZmVjdC5pY29uXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBvcHRpb25zLm1hdGNoQWxsKC9bXixdKy9naSlcbiAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgQXJyYXkuZnJvbShtYXRjaGVzKSkge1xuICAgICAgICBsZXQgW2tleSwgdmFsdWVdID0gbWF0Y2hbMF0uc3BsaXQoJzonKVxuICAgICAgICBpZiAoa2V5ID09PSAnaWNvbicpIHtcbiAgICAgICAgICBkYXRhLmljb24gPSB2YWx1ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkgPT09ICdibGluZCcgJiYgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhbHVlID0gdHJ1ZVxuICAgICAgICAgIGRhdGEuYmxpbmQgPSB0cnVlICYmIFtDb0M3TGluay5DSEVDS19UWVBFLkNIRUNLXS5pbmNsdWRlcyh0eXBlLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5kYXRhc2V0W2tleV0gPSB2YWx1ZVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkYXRhLmRhdGFzZXQuaWNvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRhdGEuZGF0YXNldC5leHRlcm5hbCAhPT0gJ3VuZGVmaW5lZCcgJiYgWydodHRwJywgJ2h0dHBzJ10uaW5jbHVkZXMoZGF0YS5kYXRhc2V0LmV4dGVybmFsKSkge1xuICAgICAgICBkYXRhLmRhdGFzZXQuaWNvbiA9IGRhdGEuZGF0YXNldC5leHRlcm5hbCArICc6Ly8nICsgZGF0YS5kYXRhc2V0Lmljb25cbiAgICAgICAgZGF0YS5pY29uID0gZGF0YS5kYXRhc2V0Lmljb25cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdGl0bGVcbiAgICBjb25zdCBkaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlTdHJpbmcoZGF0YS5kYXRhc2V0LmRpZmZpY3VsdHkpXG5cbiAgICBzd2l0Y2ggKHR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLkNIRUNLOiB7XG4gICAgICAgIGxldCBodW1hbk5hbWUgPSBkYXRhLmRhdGFzZXQubmFtZVxuICAgICAgICBpZiAoWydhdHRyaWJ1dGVzJywgJ2F0dHJpYnV0ZScsICdhdHRyaWInLCAnYXR0cmlicyddLmluY2x1ZGVzKGRhdGEuZGF0YXNldC50eXBlPy50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIGlmIChkYXRhLmRhdGFzZXQubmFtZSA9PT0gJ2xjaycpIHtcbiAgICAgICAgICAgIGh1bWFuTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5MdWNrJylcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRhdGEuZGF0YXNldC5uYW1lID09PSAnc2FuJykge1xuICAgICAgICAgICAgaHVtYW5OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNhbml0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChbJ2NoYXJhYycsICdjaGFyJywgJ2NoYXJhY3RlcmlzdGljJywgJ2NoYXJhY3RlcmlzdGljcyddLmluY2x1ZGVzKGRhdGEuZGF0YXNldC50eXBlPy50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIGh1bWFuTmFtZSA9IENvQzdVdGlsaXRpZXMuZ2V0Q2hhcmFjdGVyaXN0aWNOYW1lcyhkYXRhLmRhdGFzZXQubmFtZSk/LmxhYmVsXG4gICAgICAgIH1cbiAgICAgICAgdGl0bGUgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgIGBDb0M3LkxpbmtDaGVjayR7IWRhdGEuZGF0YXNldC5kaWZmaWN1bHR5ID8gJycgOiAnRGlmZid9JHshZGF0YS5kYXRhc2V0Lm1vZGlmaWVyID8gJycgOiAnTW9kaWYnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eSxcbiAgICAgICAgICAgIG1vZGlmaWVyOiBkYXRhLmRhdGFzZXQubW9kaWZpZXIsXG4gICAgICAgICAgICBuYW1lOiBodW1hbk5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLlNBTkxPU1M6XG4gICAgICAgIHRpdGxlID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICBgQ29DNy5MaW5rU2FuTG9zcyR7IWRhdGEuZGF0YXNldC5kaWZmaWN1bHR5ID8gJycgOiAnRGlmZid9JHshZGF0YS5kYXRhc2V0Lm1vZGlmaWVyID8gJycgOiAnTW9kaWYnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eSxcbiAgICAgICAgICAgIG1vZGlmaWVyOiBkYXRhLmRhdGFzZXQubW9kaWZpZXIsXG4gICAgICAgICAgICBzYW5NaW46IGRhdGEuZGF0YXNldC5zYW5NaW4sXG4gICAgICAgICAgICBzYW5NYXg6IGRhdGEuZGF0YXNldC5zYW5NYXhcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLklURU06XG4gICAgICAgIHRpdGxlID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICBgQ29DNy5MaW5rSXRlbSR7IWRhdGEuZGF0YXNldC5kaWZmaWN1bHR5ID8gJycgOiAnRGlmZid9JHshZGF0YS5kYXRhc2V0Lm1vZGlmaWVyID8gJycgOiAnTW9kaWYnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eSxcbiAgICAgICAgICAgIG1vZGlmaWVyOiBkYXRhLmRhdGFzZXQubW9kaWZpZXIsXG4gICAgICAgICAgICBuYW1lOiBkYXRhLmRhdGFzZXQubmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIENvQzdMaW5rLkNIRUNLX1RZUEUuRUZGRUNUOlxuICAgICAgICB0aXRsZSA9IGRhdGEuZWZmZWN0LmxhYmVsXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBkYXRhLm5hbWUgPSB0aXRsZVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmRhdGFzZXQuZGlzcGxheU5hbWUgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuICAgIGEudGl0bGUgPSBnYW1lLnVzZXIuaXNHTSA/IGRhdGEubmFtZSA6IHRpdGxlXG4gICAgYS5jbGFzc0xpc3QuYWRkKC4uLmRhdGEuY2xzKVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEuZGF0YXNldCkpIHtcbiAgICAgIGEuZGF0YXNldFtrXSA9IHZcbiAgICB9XG4gICAgYS5kcmFnZ2FibGUgPSB0cnVlXG4gICAgZGF0YS5pY29uID0gZGF0YS5pY29uID8/IGRhdGEuZWZmZWN0Py5pY29uID8/ICdmYXMgZmEtZGljZSdcbiAgICAvLyBjaGVjayBpZiBpdCdzIGFuIGltYWdlIG9yIGFuIGljb25cbiAgICBpZiAoZGF0YS5pY29uLmluY2x1ZGVzKCdcXFxcJykgfHwgZGF0YS5pY29uLmluY2x1ZGVzKCcuJykpIHtcbiAgICAgIGRhdGEuaW1nID0gZGF0YS5pY29uXG4gICAgfVxuICAgIGlmIChkYXRhLmJsaW5kKSB7XG4gICAgICBhLmlubmVySFRNTCArPSAnPGkgY2xhc3M9XCJmYXMgZmEtZXllLXNsYXNoXCI+PC9pPidcbiAgICB9XG4gICAgaWYgKGRhdGEuaW1nKSB7XG4gICAgICBhLmlubmVySFRNTCArPSBgPGltZyBkYXRhLWxpbmstaWNvbj1cIiR7ZGF0YS5pY29ufVwiIHNyYz1cIiR7ZGF0YS5pbWd9XCI+YFxuICAgIH0gZWxzZSB7XG4gICAgICBhLmlubmVySFRNTCArPSBgPGkgZGF0YS1saW5rLWljb249XCIke2RhdGEuaWNvbn1cIiBjbGFzcz1cImxpbmstaWNvbiAke2RhdGEuaWNvbn1cIj48L2k+YFxuICAgIH1cbiAgICBhLmlubmVySFRNTCArPSBgPHNwYW4+JHtkYXRhLm5hbWV9PC9zcGFuPmBcblxuICAgIHJldHVybiBhXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgY29udGVudCBsaW5rIGZvciB0aGlzIGRvY3VtZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnREYXRhICAgICAgICAgICAgICAgICAgICAgVGhlIHBhcnNlZCBvYmplY3Qgb2YgZGF0YSBwcm92aWRlZCBieSB0aGUgZHJvcCB0cmFuc2ZlciBldmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAgICAgICAgICAgICAgICAgICAgIEFkZGl0aW9uYWwgb3B0aW9ucyB0byBjb25maWd1cmUgbGluayBnZW5lcmF0aW9uLlxuICAgKiBAcGFyYW0ge0NsaWVudERvY3VtZW50fSBbb3B0aW9ucy5yZWxhdGl2ZVRvXSAgQSBkb2N1bWVudCB0byBnZW5lcmF0ZSBhIGxpbmsgcmVsYXRpdmUgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbF0gICAgICAgICAgICAgICBBIGN1c3RvbSBsYWJlbCB0byB1c2UgaW5zdGVhZCBvZiB0aGUgZG9jdW1lbnQncyBuYW1lLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9jcmVhdGVEb2N1bWVudExpbmsgKGV2ZW50RGF0YSwgeyByZWxhdGl2ZVRvLCBsYWJlbCB9ID0ge30pIHtcbiAgICBpZiAoIWV2ZW50RGF0YS5jaGVjaykge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuICAgIHN3aXRjaCAoZXZlbnREYXRhLmNoZWNrLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDSzoge1xuICAgICAgICAvLyBAY29jNy5jaGVja1t0eXBlOmNoYXJhYyxuYW1lOlNUUixkaWZmaWN1bHR5OissbW9kaWZpZXI6LTFde0hhcmQgU1RSIGNoZWNrKC0xKX1cbiAgICAgICAgLy8gQGNvYzcuY2hlY2tbYmxpbmQsdHlwZTpjaGFyYWN0ZXJpc3RpYyxuYW1lOnN0cixkaWZmaWN1bHR5OjEsbW9kaWZpZXI6MCxpY29uOmZhIGZhLWxpbmtde1N0cmVuZ3RofVxuICAgICAgICAvLyBAY29jNy5jaGVja1tibGluZCx0eXBlOmF0dHJpYnV0ZSxuYW1lOmxjayxkaWZmaWN1bHR5OjEsbW9kaWZpZXI6MCxpY29uOmZhIGZhLWxpbmtde0x1Y2t9XG4gICAgICAgIC8vIEBjb2M3LmNoZWNrW2JsaW5kLHR5cGU6c2tpbGwsbmFtZTpMYXcsZGlmZmljdWx0eToxLG1vZGlmaWVyOjAsaWNvbjpmYSBmYS1saW5rXXtMYXd9XG4gICAgICAgIGlmICghZXZlbnREYXRhLmxpbmtUeXBlIHx8ICFldmVudERhdGEubmFtZSkge1xuICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zID0gYCR7ZXZlbnREYXRhLmJsaW5kID8gJ2JsaW5kLCcgOiAnJ310eXBlOiR7ZXZlbnREYXRhLmxpbmtUeXBlfSxuYW1lOiR7ZXZlbnREYXRhLm5hbWV9YFxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50RGF0YS5kaWZmaWN1bHR5ICE9PSAndW5kZWZpbmVkJyAmJiBldmVudERhdGEuZGlmZmljdWx0eSAhPT0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLGRpZmZpY3VsdHk6JHtldmVudERhdGEuZGlmZmljdWx0eX1gXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBldmVudERhdGEubW9kaWZpZXIgIT09ICd1bmRlZmluZWQnICYmIGV2ZW50RGF0YS5tb2RpZmllciAhPT0gMCkge1xuICAgICAgICAgIG9wdGlvbnMgKz0gYCxtb2RpZmllcjoke2V2ZW50RGF0YS5tb2RpZmllcn1gXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50RGF0YS5pY29uKSB7XG4gICAgICAgICAgY29uc3QgcGFydHMgPSBldmVudERhdGEuaWNvbi5tYXRjaCgvXihodHRwcz8pOlxcL1xcLyguKykkLylcbiAgICAgICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgKz0gYCxleHRlcm5hbDoke3BhcnRzWzFdfSxpY29uOiR7cGFydHNbMl19YFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zICs9IGAsaWNvbjoke2V2ZW50RGF0YS5pY29ufWBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50RGF0YS5wYWNrKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLHBhY2s6JHtldmVudERhdGEucGFja31gXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50RGF0YS5pZCkge1xuICAgICAgICAgIG9wdGlvbnMgKz0gYCxpZDoke2V2ZW50RGF0YS5pZH1gXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxpbmsgPSBgQGNvYzcuY2hlY2tbJHtvcHRpb25zfV1gXG4gICAgICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gZXZlbnREYXRhLmRpc3BsYXlOYW1lID8/IChsYWJlbCA/PyAnJylcbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgbGluayArPSBgeyR7ZGlzcGxheU5hbWV9fWBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlua1xuICAgICAgfVxuXG4gICAgICBjYXNlIENvQzdMaW5rLkNIRUNLX1RZUEUuU0FOTE9TUzoge1xuICAgICAgICAvLyBAY29jNy5zYW5sb3NzW3Nhbk1heDoxRDYsc2FuTWluOjEsZGlmZmljdWx0eTorKyxtb2RpZmllcjotMV17SGFyZCBTYW4gTG9zcyAoLTEpIDEvMUQ2fVxuICAgICAgICBpZiAoIWV2ZW50RGF0YS5zYW5NYXggfHwgIWV2ZW50RGF0YS5zYW5NaW4pIHtcbiAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3B0aW9ucyA9IGAke2V2ZW50RGF0YS5ibGluZCA/ICdibGluZCwnIDogJyd9c2FuTWF4OiR7ZXZlbnREYXRhLnNhbk1heH0sc2FuTWluOiR7ZXZlbnREYXRhLnNhbk1pbn1gXG4gICAgICAgIGlmIChldmVudERhdGEuc2FuUmVhc29uKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLHNhblJlYXNvbjoke2V2ZW50RGF0YS5zYW5SZWFzb259YFxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudERhdGEuZGlmZmljdWx0eSAmJiBldmVudERhdGEuZGlmZmljdWx0eSAhPT0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLGRpZmZpY3VsdHk6JHtldmVudERhdGEuZGlmZmljdWx0eX1gXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50RGF0YS5tb2RpZmllciAmJiBldmVudERhdGEubW9kaWZpZXIgIT09IDApIHtcbiAgICAgICAgICBvcHRpb25zICs9IGAsbW9kaWZpZXI6JHtldmVudERhdGEubW9kaWZpZXJ9YFxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudERhdGEuaWNvbikge1xuICAgICAgICAgIGNvbnN0IHBhcnRzID0gZXZlbnREYXRhLmljb24ubWF0Y2goL14oaHR0cHM/KTpcXC9cXC8oLispJC8pXG4gICAgICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgICAgICBvcHRpb25zICs9IGAsZXh0ZXJuYWw6JHtwYXJ0c1sxXX0saWNvbjoke3BhcnRzWzJdfWBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucyArPSBgLGljb246JHtldmVudERhdGEuaWNvbn1gXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBsaW5rID0gYEBjb2M3LnNhbmxvc3NbJHtvcHRpb25zfV1gXG4gICAgICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gZXZlbnREYXRhLmRpc3BsYXlOYW1lID8/IChsYWJlbCA/PyAnJylcbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgbGluayArPSBgeyR7ZGlzcGxheU5hbWV9fWBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlua1xuICAgICAgfVxuXG4gICAgICBjYXNlIENvQzdMaW5rLkNIRUNLX1RZUEUuSVRFTToge1xuICAgICAgICAvLyBAY29jNy5pdGVtW3R5cGU6b3B0aW9uYWwsbmFtZTpTaG90Z3VuLGRpZmZpY3VsdHk6Kyxtb2RpZmllcjotMV17SGFyZCBTaGl0Z3VuIGNoZWNrKC0xKX1cbiAgICAgICAgaWYgKCFldmVudERhdGEubmFtZSkge1xuICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zID0gYCR7ZXZlbnREYXRhLmJsaW5kID8gJ2JsaW5kLCcgOiAnJ31uYW1lOiR7ZXZlbnREYXRhLm5hbWV9YFxuICAgICAgICBpZiAoZXZlbnREYXRhLmljb24pIHtcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IGV2ZW50RGF0YS5pY29uLm1hdGNoKC9eKGh0dHBzPyk6XFwvXFwvKC4rKSQvKVxuICAgICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgICAgb3B0aW9ucyArPSBgLGV4dGVybmFsOiR7cGFydHNbMV19LGljb246JHtwYXJ0c1syXX1gXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgKz0gYCxpY29uOiR7ZXZlbnREYXRhLmljb259YFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnREYXRhLnBhY2spIHtcbiAgICAgICAgICBvcHRpb25zICs9IGAscGFjazoke2V2ZW50RGF0YS5wYWNrfWBcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnREYXRhLmlkKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLGlkOiR7ZXZlbnREYXRhLmlkfWBcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGluayA9IGBAY29jNy5pdGVtWyR7b3B0aW9uc31dYFxuICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGV2ZW50RGF0YS5kaXNwbGF5TmFtZSA/PyAobGFiZWwgPz8gJycpXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSkge1xuICAgICAgICAgIGxpbmsgKz0gYHske2Rpc3BsYXlOYW1lfX1gXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmtcbiAgICAgIH1cblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLkVGRkVDVDoge1xuICAgICAgICAvLyBAY29jNy5lZmZlY3Rbe1wibGFiZWxcIjpcIkthcG93XCIsXCJpY29uXCI6XCJpY29ucy9zdmcvYXVyYS5zdmdcIixcImNoYW5nZXNcIjpbe1wia2V5XCI6XCJzeXN0ZW0udW5rbm93bi50ZXN0XCIsXCJtb2RlXCI6MixcInZhbHVlXCI6XCI1XCJ9XSxcInRpbnRcIjpcIiNlOTE2MTZcIixcImR1cmF0aW9uXCI6e1wic2Vjb25kc1wiOm51bGwsXCJyb3VuZHNcIjo2LFwidHVybnNcIjpudWxsfX1de0thcG93aW5nfVxuICAgICAgICAvLyBjb25zdCBlZmZlY3REYXRhID0gZm91bmRyeS51dGlscy5kZWVwQ2xvbmUoZXZlbnREYXRhKVxuICAgICAgICAvLyBpZiAoIXRoaXMuZWZmZWN0SXNUZW1wKSBkZWxldGUgZWZmZWN0RGF0YS5kdXJhdGlvblxuICAgICAgICAvLyBpZiAoZWZmZWN0RGF0YS5jaGFuZ2VzPy5sZW5ndGggPT09IDApIGRlbGV0ZSBlZmZlY3REYXRhLmNoYW5nZXNcbiAgICAgICAgLy8gaWYgKCFlZmZlY3REYXRhLmRpc2FibGVkKSBkZWxldGUgZWZmZWN0RGF0YS5kaXNhYmxlZFxuICAgICAgICAvLyBpZiAoIWVmZmVjdERhdGEudGludCkgZGVsZXRlIGVmZmVjdERhdGEudGludFxuICAgICAgICBjb25zdCBwYXJ0cyA9IGV2ZW50RGF0YS5vYmplY3QuaWNvbi5tYXRjaCgvXihodHRwcz8pOlxcL1xcLyguKykkLylcbiAgICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgICAgZXZlbnREYXRhLm9iamVjdC5leHRlcm5hbCA9IHBhcnRzWzFdXG4gICAgICAgICAgZXZlbnREYXRhLm9iamVjdC5pY29uID0gcGFydHNbMl1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbGluayA9IGBAY29jNy5lZmZlY3RbJHtKU09OLnN0cmluZ2lmeShldmVudERhdGEub2JqZWN0KX1dYFxuICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGV2ZW50RGF0YS5kaXNwbGF5TmFtZSA/PyAobGFiZWwgPz8gJycpXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSkge1xuICAgICAgICAgIGxpbmsgKz0gYHske2Rpc3BsYXlOYW1lfX1gXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICc/J1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9vbkxpbmtBY3RvckNsaWNrIChhY3Rvciwgb3B0aW9ucywgeyBzaGlmdEtleSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIHN3aXRjaCAob3B0aW9ucy5jaGVjaykge1xuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLkNIRUNLOlxuICAgICAgICBpZiAoWydjaGFyYWMnLCAnY2hhcicsICdjaGFyYWN0ZXJpc3RpYycsICdjaGFyYWN0ZXJpc3RpY3MnXS5pbmNsdWRlcyhvcHRpb25zLmxpbmtUeXBlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdG9yLmNoYXJhY3RlcmlzdGljQ2hlY2soXG4gICAgICAgICAgICBvcHRpb25zLm5hbWUsXG4gICAgICAgICAgICBzaGlmdEtleSxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFsnc2tpbGwnXS5pbmNsdWRlcyhvcHRpb25zLmxpbmtUeXBlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdG9yLnNraWxsQ2hlY2sob3B0aW9ucywgc2hpZnRLZXksIG9wdGlvbnMpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFsnYXR0cmlidXRlcycsICdhdHRyaWJ1dGUnLCAnYXR0cmliJywgJ2F0dHJpYnMnXS5pbmNsdWRlcyhvcHRpb25zLmxpbmtUeXBlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdG9yLmF0dHJpYnV0ZUNoZWNrKG9wdGlvbnMubmFtZSwgc2hpZnRLZXksIG9wdGlvbnMpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLlNBTkxPU1M6XG4gICAgICAgIFNhbkNoZWNrQ2FyZC5jcmVhdGUoYWN0b3IuYWN0b3JLZXksIG9wdGlvbnMsIHtcbiAgICAgICAgICBmYXN0Rm9yd2FyZDogc2hpZnRLZXlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGNhc2UgQ29DN0xpbmsuQ0hFQ0tfVFlQRS5JVEVNOlxuICAgICAgICByZXR1cm4gYWN0b3Iud2VhcG9uQ2hlY2sob3B0aW9ucywgc2hpZnRLZXkpXG5cbiAgICAgIGNhc2UgQ29DN0xpbmsuQ0hFQ0tfVFlQRS5FRkZFQ1Q6XG4gICAgICAgIGF3YWl0IGFjdG9yLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdBY3RpdmVFZmZlY3QnLCBbe1xuICAgICAgICAgIGxhYmVsOiBvcHRpb25zLm9iamVjdC5sYWJlbCxcbiAgICAgICAgICBpY29uOiBvcHRpb25zLm9iamVjdC5pY29uLFxuICAgICAgICAgIGNoYW5nZXM6IG9wdGlvbnMub2JqZWN0LmNoYW5nZXNcbiAgICAgICAgfV0pXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHRvQ2hhdE1lc3NhZ2UgKG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHRpb24gPSB7XG4gICAgICBzcGVha2VyOiB7XG4gICAgICAgIGFsaWFzOiBnYW1lLnVzZXIubmFtZVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWVzc2FnZVxuICAgIGNvbnN0IGxpbmsgPSAobmV3IENvQzdMaW5rKCkpLl9jcmVhdGVEb2N1bWVudExpbmsob3B0aW9ucylcbiAgICBpZiAob3B0aW9ucy5jaGVjayA9PT0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5FRkZFQ1QpIHtcbiAgICAgIG1lc3NhZ2UgPSBgPGRpdiBjbGFzcz1cImVmZmVjdC1tZXNzYWdlXCI+JHtsaW5rfTwvZGl2PmBcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWVzc2FnZUNoZWNrUmVxdWVzdGVkV2FpdCcsIHtcbiAgICAgICAgY2hlY2s6IGxpbmtcbiAgICAgIH0pXG4gICAgfVxuICAgIGNoYXRIZWxwZXIuY3JlYXRlTWVzc2FnZShudWxsLCBtZXNzYWdlLCBvcHRpb24pXG4gIH1cblxuICBzdGF0aWMgdG9XaGlzcGVyTWVzc2FnZSAob3B0aW9ucywgYWN0b3JzKSB7XG4gICAgZm9yIChjb25zdCBhY3RvciBvZiBhY3RvcnMpIHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IHtcbiAgICAgICAgc3BlYWtlcjoge1xuICAgICAgICAgIGFsaWFzOiBnYW1lLnVzZXIubmFtZVxuICAgICAgICB9LFxuICAgICAgICB3aGlzcGVyOiBhY3Rvci5vd25lcnMubWFwKGEgPT4gYS5pZClcbiAgICAgIH1cbiAgICAgIGxldCBtZXNzYWdlXG4gICAgICBjb25zdCBsaW5rID0gKG5ldyBDb0M3TGluaygpKS5fY3JlYXRlRG9jdW1lbnRMaW5rKG9wdGlvbnMpXG4gICAgICBpZiAob3B0aW9ucy5jaGVjayA9PT0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5FRkZFQ1QpIHtcbiAgICAgICAgbWVzc2FnZSA9IGA8ZGl2IGNsYXNzPVwiZWZmZWN0LW1lc3NhZ2VcIj4ke2xpbmt9PC9kaXY+YFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVzc2FnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWVzc2FnZVRhcmdldENoZWNrUmVxdWVzdGVkJywge1xuICAgICAgICAgIG5hbWU6IGFjdG9yLm5hbWUsXG4gICAgICAgICAgY2hlY2s6IGxpbmtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGNoYXRIZWxwZXIuY3JlYXRlTWVzc2FnZShudWxsLCBtZXNzYWdlLCBvcHRpb24pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgYSBjaGVjayB3aGVuIGEgbGluayBpcyBjbGlja2VkLlxuICAgKiBEZXBlbmRpbmcgdGhlIG9yaWdpblxuICAgKiBAcGFyYW0geyp9IGV2ZW50XG4gICAqXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgX29uTGlua0NsaWNrIChldmVudCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBDb0M3TGluay5fbGlua0Zyb21FdmVudChldmVudClcblxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaWYgKGlzQ3RybEtleShldmVudCkpIHtcbiAgICAgICAgQ29DN0NvbnRlbnRMaW5rRGlhbG9nLmNyZWF0ZShvcHRpb25zKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChjYW52YXMudG9rZW5zLmNvbnRyb2xsZWQubGVuZ3RoKSB7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgY2FudmFzLnRva2Vucy5jb250cm9sbGVkKSB7XG4gICAgICAgICAgQ29DN0xpbmsuX29uTGlua0FjdG9yQ2xpY2sodG9rZW4uYWN0b3IsIG9wdGlvbnMsIHsgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5IH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpXG4gICAgICBjb25zdCBhY3RvciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXJBY3RvcihzcGVha2VyKVxuICAgICAgaWYgKGFjdG9yKSB7XG4gICAgICAgIENvQzdMaW5rLl9vbkxpbmtBY3RvckNsaWNrKGFjdG9yLCBvcHRpb25zLCB7IHNoaWZ0S2V5OiBldmVudC5zaGlmdEtleSB9KVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIENvQzdMaW5rLnRvQ2hhdE1lc3NhZ2Uob3B0aW9ucylcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpXG4gICAgICBsZXQgYWN0b3IgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyQWN0b3Ioc3BlYWtlcilcbiAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgY29uc3QgYWN0b3JzID0gZ2FtZS5hY3RvcnMuZmlsdGVyKGEgPT4gKGEub3duZXJzaGlwW2dhbWUudXNlci5pZF0gPz8gYS5vd25lcnNoaXAuZGVmYXVsdCkgPj0gQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5PQlNFUlZFUilcbiAgICAgICAgaWYgKGFjdG9ycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBhY3RvciA9IGFjdG9yc1swXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWN0b3IpIHtcbiAgICAgICAgQ29DN0xpbmsuX29uTGlua0FjdG9yQ2xpY2soYWN0b3IsIG9wdGlvbnMsIHsgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5IH0pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lldhcm5Ob0NvbnRyb2xsZWRBY3RvcicpKVxuICB9XG5cbiAgc2V0VmFsdWUgKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLm9iamVjdFtrZXldID0gdmFsdWVcbiAgfVxuXG4gIGdldCBsaW5rICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRG9jdW1lbnRMaW5rKHRoaXMub2JqZWN0KVxuICB9XG5cbiAgZ2V0IGlkICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QuaWRcbiAgfVxuXG4gIGdldCBwYWNrICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QucGFja1xuICB9XG5cbiAgZ2V0IGNoZWNrVHlwZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0LmNoZWNrXG4gIH1cblxuICBnZXQgZGlmZmljdWx0eSAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0LmRpZmZpY3VsdHlcbiAgfVxuXG4gIGdldCBpY29uICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QuaWNvblxuICB9XG5cbiAgZ2V0IGRpc3BsYXlOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QuZGlzcGxheU5hbWVcbiAgfVxuXG4gIGdldCBtb2RpZmllciAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0Lm1vZGlmaWVyXG4gIH1cblxuICBnZXQgbGlua1R5cGUgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5saW5rVHlwZVxuICB9XG5cbiAgZ2V0IHNhbk1pbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0LnNhbk1pblxuICB9XG5cbiAgZ2V0IHNhbk1heCAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0LnNhbk1heFxuICB9XG5cbiAgZ2V0IHNhblJlYXNvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0LnNhblJlYXNvblxuICB9XG5cbiAgZ2V0IGVmZmVjdCAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0Lm9iamVjdFxuICB9XG5cbiAgZ2V0IGNoZWNrTmFtZSAoKSB7XG4gICAgaWYgKHRoaXMuaXNDaGFyYWN0ZXJpc3RpY0NoZWNrKSB7XG4gICAgICBjb25zdCBjaGFyYWN0ZXJpc3RpY3MgPSBDb0NBY3Rvci5nZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24oKVxuICAgICAgcmV0dXJuIGNoYXJhY3RlcmlzdGljcy5maW5kKGMgPT4gYy5rZXkgPT09IHRoaXMub2JqZWN0Lm5hbWUgfHwgYy5zaG9ydE5hbWUgPT09IHRoaXMub2JqZWN0Lm5hbWUgfHwgYy5sYWJlbCA9PT0gdGhpcy5vYmplY3QubmFtZSk/LmtleSA/PyAnJ1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vYmplY3QubmFtZVxuICB9XG5cbiAgZ2V0IGlzQ2hlY2sgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5jaGVjayA9PT0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDS1xuICB9XG5cbiAgZ2V0IGlzQ2hhcmFjdGVyaXN0aWNDaGVjayAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNDaGVjayAmJiB0aGlzLm9iamVjdC5saW5rVHlwZSA9PT0gQ29DN0xpbmsuTElOS19UWVBFLkNIQVJBQ1RFUklTVElDXG4gIH1cblxuICBnZXQgaXNBdHRyaWJ1dGVDaGVjayAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNDaGVjayAmJiB0aGlzLm9iamVjdC5saW5rVHlwZSA9PT0gQ29DN0xpbmsuTElOS19UWVBFLkFUVFJJQlVURVxuICB9XG5cbiAgZ2V0IGlzU2tpbGxDaGVjayAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNDaGVjayAmJiB0aGlzLm9iamVjdC5saW5rVHlwZSA9PT0gQ29DN0xpbmsuTElOS19UWVBFLlNLSUxMXG4gIH1cblxuICBnZXQgaXNJdGVtQ2hlY2sgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5jaGVjayA9PT0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5JVEVNXG4gIH1cblxuICBnZXQgaXNTYW5Mb3NzQ2hlY2sgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5jaGVjayA9PT0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5TQU5MT1NTXG4gIH1cblxuICBnZXQgaXNFZmZlY3QgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5jaGVjayA9PT0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5FRkZFQ1RcbiAgfVxuXG4gIGdldCBpc0JsaW5kICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0NoZWNrICYmIHRoaXMub2JqZWN0LmJsaW5kXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBjYW52YXMsIENPTlNULCBGb3JtQXBwbGljYXRpb24sIGZvdW5kcnksIGdhbWUsIHVpICovXG5pbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4uL2FjdG9ycy9hY3Rvci5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgQ29DN0xpbmsgfSBmcm9tICcuL2NvYzctbGluay5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q29udGVudExpbmtEaWFsb2cgZXh0ZW5kcyBGb3JtQXBwbGljYXRpb24ge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgaWQ6ICdsaW5rLWNyZWF0aW9uJyxcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdhY3RpdmUtZWZmZWN0LXNoZWV0J10sXG4gICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyZWF0ZUxpbmsnKSxcbiAgICAgIGRyYWdEcm9wOiBbeyBkcmFnU2VsZWN0b3I6IG51bGwsIGRyb3BTZWxlY3RvcjogJy5jb250YWluZXInIH1dLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvbGluay1jcmVhdGlvbi5odG1sJyxcbiAgICAgIGNsb3NlT25TdWJtaXQ6IGZhbHNlLFxuICAgICAgd2lkdGg6IDU2MCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcudGFicycsXG4gICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLmVmZmVjdC1vcHRpb25zJyxcbiAgICAgICAgICBpbml0aWFsOiAnZGV0YWlscydcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIC8vIFByZXBhcmUgY2hlY2sgdHlwZVxuICAgIHNoZWV0RGF0YS5jaGVja1R5cGUgPSBbXG4gICAgICB7XG4gICAgICAgIGtleTogQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDSyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGVjaycpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IENvQzdMaW5rLkNIRUNLX1RZUEUuU0FOTE9TUyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHlDaGVjaycpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IENvQzdMaW5rLkNIRUNLX1RZUEUuSVRFTSxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5JdGVtV2VhcG9uJylcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogQ29DN0xpbmsuQ0hFQ0tfVFlQRS5FRkZFQ1QsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0VGRkVDVC5UYWJFZmZlY3RzJylcbiAgICAgIH1cbiAgICBdXG5cbiAgICAvLyBQcmVwYXJlICdjaGVjaycgbGluayB0eXBlXG4gICAgc2hlZXREYXRhLmxpbmtUeXBlID0gW1xuICAgICAge1xuICAgICAgICBrZXk6IENvQzdMaW5rLkxJTktfVFlQRS5DSEFSQUNURVJJU1RJQyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGFyYWN0ZXJpc3RpYycpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IENvQzdMaW5rLkxJTktfVFlQRS5BVFRSSUJVVEUsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQXR0cmlidXRlJylcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogQ29DN0xpbmsuTElOS19UWVBFLlNLSUxMLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsJylcbiAgICAgIH1cbiAgICBdXG5cbiAgICAvLyBQcmVwYXJlICdjaGVjaycgJ2F0dHJpYnV0ZScgdHlwZXNcbiAgICBzaGVldERhdGEuYXR0cmlidXRlVHlwZSA9IFtcbiAgICAgIHtcbiAgICAgICAga2V5OiAnbGNrJyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5MdWNrJylcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3NhbicsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2FuaXR5JylcbiAgICAgIH1cbiAgICBdXG5cbiAgICAvLyBQcmVwYXJlIGVmZmVjdCBtb2RlIHR5cGVzXG4gICAgc2hlZXREYXRhLmVmZmVjdE1vZGVzID0gT2JqZWN0LmVudHJpZXMoQ09OU1QuQUNUSVZFX0VGRkVDVF9NT0RFUykucmVkdWNlKFxuICAgICAgKG9iaiwgZSkgPT4ge1xuICAgICAgICBvYmpbZVsxXV0gPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0VGRkVDVC5NT0RFXycgKyBlWzBdKVxuICAgICAgICByZXR1cm4gb2JqXG4gICAgICB9LFxuICAgICAge31cbiAgICApXG5cbiAgICAvLyBQcmVwYXJlICdjaGVjaycgJ2NoYXJhY3RlcmlzdGljJyB0eXBlc1xuICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY1R5cGUgPSBDb0NBY3Rvci5nZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24oKVxuXG4gICAgc2hlZXREYXRhLmxpbmsgPSBzaGVldERhdGEub2JqZWN0LmxpbmtcblxuICAgIHNoZWV0RGF0YS5mcm9tR2FtZSA9IHNoZWV0RGF0YS5saW5rLmlzSXRlbUNoZWNrIHx8IHNoZWV0RGF0YS5saW5rLmlzU2tpbGxDaGVja1xuXG4gICAgc2hlZXREYXRhLmZyb21EaXJlY3RvcnkgPSAoc2hlZXREYXRhLm9iamVjdC5oYXNJRCA9PT0gJ2Zyb21EaXJlY3RvcnknKVxuICAgIHNoZWV0RGF0YS5mcm9tQ29tcGVuZGl1bSA9IChzaGVldERhdGEub2JqZWN0Lmhhc0lEID09PSAnZnJvbUNvbXBlbmRpdW0nKVxuXG4gICAgc2hlZXREYXRhLmlzU2V0RnJvbUdhbWUgPSAoc2hlZXREYXRhLmxpbmsuaWQgJiYgKHNoZWV0RGF0YS5mcm9tRGlyZWN0b3J5IHx8IHNoZWV0RGF0YS5mcm9tQ29tcGVuZGl1bSkpXG5cbiAgICBzaGVldERhdGEuZGlmZmljdWx0eUxldmVsID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbFxuXG4gICAgc2hlZXREYXRhLmFjdG9yTmFtZXMgPSBzaGVldERhdGEub2JqZWN0LmFjdG9ycy5tYXAoYSA9PiBhLm5hbWUpLmpvaW4oJywgJylcblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCdzZWxlY3RbbmFtZT10eXBlXSxzZWxlY3RbbmFtZT1jaGVja10sc2VsZWN0W25hbWU9YXR0cmlidXRlS2V5XSxzZWxlY3RbbmFtZT1jaGFyYWN0ZXJpc3RpY0tleV0saW5wdXRbdHlwZT1jaGVja2JveF0nKVxuICAgICAgLmNoYW5nZSh0aGlzLl9vbkNoYW5nZVN1Ym1pdC5iaW5kKHRoaXMpKVxuXG4gICAgLy8gSGFuZGxpbmcgZWZmZWN0c1xuICAgIGh0bWwuZmluZCgnLmVmZmVjdC1jb250cm9sJykuY2xpY2sodGhpcy5fb25FZmZlY3RDb250cm9sLmJpbmQodGhpcykpXG4gIH1cblxuICBfb25DaGFuZ2VTdWJtaXQgKGV2ZW50KSB7XG4gICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUpIHtcbiAgICAgIGNhc2UgJ2Zyb21Db21wZW5kaXVtJzpcbiAgICAgIGNhc2UgJ2Zyb21EaXJlY3RvcnknOlxuICAgICAgICB0aGlzLm9iamVjdC5oYXNJRCA9IChldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUgPT09IHRoaXMub2JqZWN0Lmhhc0lEID8gJycgOiBldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHRoaXMuX29uU3VibWl0KGV2ZW50KVxuICB9XG5cbiAgX29uRWZmZWN0Q29udHJvbCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgYnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIHN3aXRjaCAoYnV0dG9uLmRhdGFzZXQuYWN0aW9uKSB7XG4gICAgICBjYXNlICdhZGQnOlxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkRWZmZWN0Q2hhbmdlKClcbiAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgIGJ1dHRvbi5jbG9zZXN0KCcuZWZmZWN0LWNoYW5nZScpLnJlbW92ZSgpXG4gICAgICAgIHRoaXMuX29uU3VibWl0KGV2ZW50KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9hZGRFZmZlY3RDaGFuZ2UgKCkge1xuICAgIGNvbnN0IGlkeCA9IHRoaXMub2JqZWN0LmxpbmsuZWZmZWN0LmNoYW5nZXMubGVuZ3RoXG4gICAgcmV0dXJuIHRoaXMuc3VibWl0KHtcbiAgICAgIHByZXZlbnRDbG9zZTogdHJ1ZSxcbiAgICAgIHVwZGF0ZURhdGE6IHtcbiAgICAgICAgW2BlZmZlY3QuY2hhbmdlcy4ke2lkeH1gXToge1xuICAgICAgICAgIGtleTogJycsXG4gICAgICAgICAgbW9kZTogQ09OU1QuQUNUSVZFX0VGRkVDVF9NT0RFUy5BREQsXG4gICAgICAgICAgdmFsdWU6ICcnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGZvcm1EYXRhKSB7XG4gICAgbGV0IGhhc0VmZmVjdCA9IGZhbHNlXG4gICAgY29uc3QgZWZmZWN0ID0ge1xuICAgICAgZHVyYXRpb246IHt9LFxuICAgICAgY2hhbmdlczogW11cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZm9ybURhdGEpIHtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ2NoZWNrTmFtZSc6XG4gICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnbmFtZScsIGZvcm1EYXRhLmNoZWNrTmFtZSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdibGluZCc6XG4gICAgICAgIGNhc2UgJ2RpZmZpY3VsdHknOlxuICAgICAgICBjYXNlICdkaXNwbGF5TmFtZSc6XG4gICAgICAgIGNhc2UgJ2ljb24nOlxuICAgICAgICBjYXNlICdpZCc6XG4gICAgICAgIGNhc2UgJ21vZGlmaWVyJzpcbiAgICAgICAgY2FzZSAncGFjayc6XG4gICAgICAgIGNhc2UgJ3Nhbk1pbic6XG4gICAgICAgIGNhc2UgJ3Nhbk1heCc6XG4gICAgICAgIGNhc2UgJ3NhblJlYXNvbic6XG4gICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZShrZXksIGZvcm1EYXRhW2tleV0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnaGFzTW9kaWZpZXJzJzpcbiAgICAgICAgY2FzZSAnaGFzTGFiZWwnOlxuICAgICAgICBjYXNlICdoYXNJY29uJzpcbiAgICAgICAgICB0aGlzLm9iamVjdFtrZXldID0gZm9ybURhdGFba2V5XVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2VmZmVjdC5sYWJlbCc6XG4gICAgICAgICAgZWZmZWN0LmxhYmVsID0gZm9ybURhdGFba2V5XVxuICAgICAgICAgIGhhc0VmZmVjdCA9IHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdlZmZlY3QuaWNvbic6XG4gICAgICAgICAgZWZmZWN0Lmljb24gPSBmb3JtRGF0YVtrZXldXG4gICAgICAgICAgaGFzRWZmZWN0ID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2VmZmVjdC50aW50JzpcbiAgICAgICAgICBlZmZlY3QudGludCA9IGZvcm1EYXRhW2tleV1cbiAgICAgICAgICBoYXNFZmZlY3QgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZWZmZWN0LmRpc2FibGVkJzpcbiAgICAgICAgICBlZmZlY3QuZGlzYWJsZWQgPSBmb3JtRGF0YVtrZXldXG4gICAgICAgICAgaGFzRWZmZWN0ID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2VmZmVjdC5kdXJhdGlvbi5zZWNvbmRzJzpcbiAgICAgICAgICBlZmZlY3QuZHVyYXRpb24uc2Vjb25kcyA9IGZvcm1EYXRhW2tleV1cbiAgICAgICAgICBoYXNFZmZlY3QgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZWZmZWN0LmR1cmF0aW9uLnJvdW5kcyc6XG4gICAgICAgICAgZWZmZWN0LmR1cmF0aW9uLnJvdW5kcyA9IGZvcm1EYXRhW2tleV1cbiAgICAgICAgICBoYXNFZmZlY3QgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZWZmZWN0LmR1cmF0aW9uLnR1cm5zJzpcbiAgICAgICAgICBlZmZlY3QuZHVyYXRpb24udHVybnMgPSBmb3JtRGF0YVtrZXldXG4gICAgICAgICAgaGFzRWZmZWN0ID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IGtleS5tYXRjaCgvXmVmZmVjdFxcLmNoYW5nZXNcXC4oXFxkKylcXC5rZXkkLylcbiAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGVmZmVjdC5jaGFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IGZvcm1EYXRhW2tleV0sXG4gICAgICAgICAgICAgIG1vZGU6IGZvcm1EYXRhWydlZmZlY3QuY2hhbmdlcy4nICsgbWF0Y2hbMV0gKyAnLm1vZGUnXSxcbiAgICAgICAgICAgICAgdmFsdWU6IGZvcm1EYXRhWydlZmZlY3QuY2hhbmdlcy4nICsgbWF0Y2hbMV0gKyAnLnZhbHVlJ11cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBoYXNFZmZlY3QgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNFZmZlY3QpIHtcbiAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ29iamVjdCcsIGVmZmVjdClcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHN3aXRjaCAodGFyZ2V0Lm5hbWUpIHtcbiAgICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnY2hlY2snLCB0YXJnZXQudmFsdWUpXG4gICAgICAgICAgaWYgKHRhcmdldC52YWx1ZSA9PT0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDSykge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnbGlua1R5cGUnLCBDb0M3TGluay5MSU5LX1RZUEUuU0tJTEwpXG4gICAgICAgICAgICB0aGlzLm9iamVjdC5saW5rLnNldFZhbHVlKCduYW1lJywgJycpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2NoZWNrJzpcbiAgICAgICAgICB0aGlzLm9iamVjdC5saW5rLnNldFZhbHVlKCdsaW5rVHlwZScsIHRhcmdldC52YWx1ZSlcbiAgICAgICAgICBpZiAodGFyZ2V0LnZhbHVlID09PSBDb0M3TGluay5MSU5LX1RZUEUuQ0hBUkFDVEVSSVNUSUMpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ25hbWUnLCBDb0NBY3Rvci5nZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24oKVswXS5rZXkpXG4gICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQudmFsdWUgPT09IENvQzdMaW5rLkxJTktfVFlQRS5BVFRSSUJVVEUpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ25hbWUnLCAnbGNrJylcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnbmFtZScsICcnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdhdHRyaWJ1dGVLZXknOlxuICAgICAgICBjYXNlICdjaGFyYWN0ZXJpc3RpY0tleSc6XG4gICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnbmFtZScsIHRhcmdldC52YWx1ZSlcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdzdWJtaXQnKSB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQuc3VibWl0dGVyLmRhdGFzZXQuYWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSAnY2xpcGJvYXJkJzpcbiAgICAgICAgICAgIENvQzdVdGlsaXRpZXMuY29weVRvQ2xpcGJvYXJkKHRoaXMub2JqZWN0LmxpbmsubGluaylcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAnY2hhdCc6XG4gICAgICAgICAgICBDb0M3TGluay50b0NoYXRNZXNzYWdlKHRoaXMub2JqZWN0Lmxpbmsub2JqZWN0KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICd3aGlzcGVyLW93bmVyJzpcbiAgICAgICAgICAgIENvQzdMaW5rLnRvV2hpc3Blck1lc3NhZ2UodGhpcy5vYmplY3QubGluay5vYmplY3QsIHRoaXMub2JqZWN0LmFjdG9ycylcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAnd2hpc3Blci1zZWxlY3RlZCc6XG4gICAgICAgICAgICBpZiAoIWNhbnZhcy50b2tlbnMuY29udHJvbGxlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FcnJvck5vVG9rZW5zU2VsZWN0ZWQnKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ29DN0xpbmsudG9XaGlzcGVyTWVzc2FnZSh0aGlzLm9iamVjdC5saW5rLm9iamVjdCwgY2FudmFzLnRva2Vucy5jb250cm9sbGVkLmZpbHRlcih0ID0+IHQuYWN0b3Iub3duZXJzLmxlbmd0aCkubWFwKHQgPT4gdC5hY3RvcikpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQpIHtcbiAgICBjb25zdCBkYXRhU3RyaW5nID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvcGxhaW4nKVxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpXG4gICAgaWYgKGRhdGEudHlwZSA9PT0gJ0NvQzdMaW5rJykge1xuICAgICAgdGhpcy5zZXRMaW5rKGF3YWl0IENvQzdMaW5rLmZyb21Ecm9wRGF0YShkYXRhKSlcbiAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoZGF0YS50eXBlID09PSAnRm9sZGVyJyAmJiBkYXRhLmRvY3VtZW50TmFtZSA9PT0gJ0FjdG9yJykgfHwgWydJdGVtJywgJ0FjdG9yJ10uaW5jbHVkZXMoZGF0YS50eXBlKSkge1xuICAgICAgICBjb25zdCBkYXRhTGlzdCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ2V0RGF0YUZyb21Ecm9wRXZlbnQoZXZlbnQsIGRhdGEuZG9jdW1lbnROYW1lID8/IGRhdGEudHlwZSlcbiAgICAgICAgaWYgKGRhdGEuZG9jdW1lbnROYW1lID8/IGRhdGEudHlwZSA9PT0gJ0FjdG9yJykge1xuICAgICAgICAgIHRoaXMub2JqZWN0LmFjdG9ycyA9IGRhdGFMaXN0LmZpbHRlcihhID0+IGEub3duZXJzLmxlbmd0aClcbiAgICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgICB9IGVsc2UgaWYgKGRhdGFMaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChbJ3NraWxsJywgJ3dlYXBvbiddLmluY2x1ZGVzKGRhdGFMaXN0WzBdLnR5cGUpKSB7XG4gICAgICAgICAgICBpZiAoZGF0YUxpc3RbMF0ucGFjaykge1xuICAgICAgICAgICAgICB0aGlzLm9iamVjdC5oYXNJRCA9ICdmcm9tQ29tcGVuZGl1bSdcbiAgICAgICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgncGFjaycsIGRhdGFMaXN0WzBdLnBhY2spXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLm9iamVjdC5oYXNJRCA9ICdmcm9tRGlyZWN0b3J5J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnaWQnLCBkYXRhTGlzdFswXS5pZClcbiAgICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ25hbWUnLCBkYXRhTGlzdFswXS5uYW1lKVxuICAgICAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRMaW5rIChsaW5rKSB7XG4gICAgdGhpcy5vYmplY3QubGluayA9IGxpbmtcbiAgICBpZiAobGluay5wYWNrICE9PSAnJykge1xuICAgICAgdGhpcy5vYmplY3QuaGFzSUQgPSAnZnJvbUNvbXBlbmRpdW0nXG4gICAgfSBlbHNlIGlmIChsaW5rLmlkICE9PSAnJykge1xuICAgICAgdGhpcy5vYmplY3QuaGFzSUQgPSAnZnJvbURpcmVjdG9yeSdcbiAgICB9XG4gICAgaWYgKGxpbmsuZGlmZmljdWx0eSAhPT0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyIHx8IHBhcnNlSW50KGxpbmsubW9kaWZpZXIsIDEwKSAhPT0gMCkge1xuICAgICAgdGhpcy5vYmplY3QuaGFzTW9kaWZpZXJzID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAobGluay5kaXNwbGF5TmFtZSAhPT0gJycpIHtcbiAgICAgIHRoaXMub2JqZWN0Lmhhc0xhYmVsID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAobGluay5pY29uICE9PSAnJykge1xuICAgICAgdGhpcy5vYmplY3QuaGFzSWNvbiA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlIChsaW5rRGF0YSA9IHt9LCBvcHRpb24gPSB7fSkge1xuICAgIGNvbnN0IG9iamVjdCA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoe1xuICAgICAgbGluazogbnVsbCxcbiAgICAgIGhhc0lEOiAnJyxcbiAgICAgIGhhc01vZGlmaWVyczogZmFsc2UsXG4gICAgICBoYXNMYWJlbDogZmFsc2UsXG4gICAgICBoYXNJY29uOiBmYWxzZSxcbiAgICAgIGFjdG9yczogW11cbiAgICB9LCBvcHRpb24pXG4gICAgY29uc3QgZGlhbG9nID0gbmV3IENvQzdDb250ZW50TGlua0RpYWxvZyhvYmplY3QsIHt9KVxuICAgIGRpYWxvZy5zZXRMaW5rKGF3YWl0IENvQzdMaW5rLmZyb21Ecm9wRGF0YShsaW5rRGF0YSkpXG4gICAgZGlhbG9nLnJlbmRlcih0cnVlKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgRGlhbG9nLCBGb3JtRGF0YSwgZ2FtZSwgcmVuZGVyVGVtcGxhdGUgKi9cblxuaW1wb3J0IHsgQ29DN0NoYXRNZXNzYWdlIH0gZnJvbSAnLi9jb2M3LWNoYXQtbWVzc2FnZS5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uL2NoZWNrLmpzJ1xuXG5leHBvcnQgY2xhc3MgUm9sbERpYWxvZyB7XG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChvcHRpb25zLmRpZmZpY3VsdHkpIHtcbiAgICAgIG9wdGlvbnMuZGlmZmljdWx0eUxldmVsID0ge31cbiAgICAgIGlmIChDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnVua25vd24gPT09IG9wdGlvbnMuZGlmZmljdWx0eSkge1xuICAgICAgICBvcHRpb25zLmRpZmZpY3VsdHlMZXZlbC51bmtub3duID0gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhciA9PT0gb3B0aW9ucy5kaWZmaWN1bHR5KSB7XG4gICAgICAgIG9wdGlvbnMuZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIgPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5oYXJkID09PSBvcHRpb25zLmRpZmZpY3VsdHkpIHtcbiAgICAgICAgb3B0aW9ucy5kaWZmaWN1bHR5TGV2ZWwuaGFyZCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmV4dHJlbWUgPT09IG9wdGlvbnMuZGlmZmljdWx0eSkge1xuICAgICAgICBvcHRpb25zLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiggdW5kZWZpbmVkID09IG9wdGlvbnMuYXNrVmFsdWUpIG9wdGlvbnMuYXNrVmFsdWUgPSB0cnVlO1xuICAgIGlmIChvcHRpb25zLm5hbWUgJiYgIW9wdGlvbnMuZGlzcGxheU5hbWUpIG9wdGlvbnMuZGlzcGxheU5hbWUgPSBvcHRpb25zLm5hbWVcbiAgICBjb25zdCB1bmtub3duRGlmZmljdWx0eURlZmF1bHQgPVxuICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGVmYXVsdENoZWNrRGlmZmljdWx0eScpID09PSAndW5rbm93bidcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgYWxsb3dGbGF0RGljZU1vZGlmaWVyOlxuICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhbGxvd0ZsYXREaWNlTW9kaWZpZXInKSAmJlxuICAgICAgICAhb3B0aW9ucy5kaXNhYmxlRmxhdERpY2VNb2RpZmllcixcbiAgICAgIGFsbG93RmxhdFRocmVzaG9sZE1vZGlmaWVyOlxuICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhbGxvd0ZsYXRUaHJlc2hvbGRNb2RpZmllcicpICYmXG4gICAgICAgICFvcHRpb25zLmRpc2FibGVGbGF0VGhyZXNob2xkTW9kaWZpZXIsXG4gICAgICBkaWZmaWN1bHR5OiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLFxuICAgICAgdW5rbm93bkRpZmZpY3VsdHlEZWZhdWx0LFxuICAgICAgaGlkZURpZmZpY3VsdHk6IG9wdGlvbnMuaGlkZURpZmZpY3VsdHkgPz8gZmFsc2UsXG4gICAgICBvcHRpb25zXG4gICAgfVxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvcHRpb25zLmNhcmRUeXBlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgKCFvcHRpb25zLmZvcmNlZENhcmRUeXBlID8/IHRydWUpXG4gICAgKSB7XG4gICAgICBkYXRhLmNhcmRUeXBlcyA9IENvQzdDaGF0TWVzc2FnZS5jYXJkVHlwZXMob3B0aW9ucylcbiAgICB9XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKFxuICAgICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9ib251cy5odG1sJyxcbiAgICAgIGRhdGFcbiAgICApXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgbGV0IGZvcm1EYXRhID0gbnVsbFxuICAgICAgY29uc3QgZGxnID0gbmV3IERpYWxvZyh7XG4gICAgICAgIHRpdGxlOiBvcHRpb25zLmRpc3BsYXlOYW1lXG4gICAgICAgICAgPyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkJvbnVzU2VsZWN0aW9uV2luZG93TmFtZWQnLCB7XG4gICAgICAgICAgICBuYW1lOiBvcHRpb25zLmRpc3BsYXlOYW1lXG4gICAgICAgICAgfSlcbiAgICAgICAgICA6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Cb251c1NlbGVjdGlvbldpbmRvdycpLFxuICAgICAgICBjb250ZW50OiBodG1sLFxuICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgcm9sbDoge1xuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Sb2xsRGljZScpLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGh0bWwgPT4ge1xuICAgICAgICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJyNib251cy1yb2xsLWZvcm0nKSlcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZm9ybURhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiAncm9sbCcsXG4gICAgICAgIGNsb3NlOiAoKSA9PiB7fVxuICAgICAgfSlcbiAgICAgIGRsZy5yZW5kZXIodHJ1ZSlcbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ2hhdE1lc3NhZ2UsIGdhbWUsIHJlbmRlclRlbXBsYXRlLCB1aSAqL1xuLy8gaW1wb3J0IHsgQ29DQWN0b3IgfSBmcm9tICcuLi8uLi9hY3RvcnMvYWN0b3IuanMnO1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5cbmV4cG9ydCBjbGFzcyBSb2xsQ2FyZCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnJvbGxzID0gW11cbiAgICB0aGlzLmluaXRpYXRvciA9IG51bGxcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tTWVzc2FnZUlkIChtZXNzYWdlSWQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCB0aGlzLmZyb21NZXNzYWdlKG1lc3NhZ2UpXG4gICAgY2FyZC5tZXNzYWdlSWQgPSBtZXNzYWdlSWRcbiAgICByZXR1cm4gY2FyZFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21NZXNzYWdlIChtZXNzYWdlKSB7XG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSAkKG1lc3NhZ2UuY29udGVudClbMF1cbiAgICBpZiAoIWNhcmRFbGVtZW50KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgY2FyZCA9IGF3YWl0IHRoaXMuZnJvbUhUTUxDYXJkRWxlbWVudChjYXJkRWxlbWVudClcbiAgICBjYXJkLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgcmV0dXJuIGNhcmRcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tSFRNTENhcmRFbGVtZW50IChjYXJkKSB7XG4gICAgY29uc3QgY2FyZERhdGEgPSBKU09OLnBhcnNlKHVuZXNjYXBlKGNhcmQuZGF0YXNldC5vYmplY3QpKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmZyb21EYXRhKGNhcmREYXRhKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21EYXRhIChkYXRhKSB7XG4gICAgY29uc3QgY2FyZCA9IE9iamVjdC5hc3NpZ24obmV3IHRoaXMoKSwgZGF0YSlcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY2FyZC5yb2xscy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChjYXJkLnJvbGxzW2luZGV4XT8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdPYmplY3QnKSB7XG4gICAgICAgIGNhcmQucm9sbHNbaW5kZXhdID0gT2JqZWN0LmFzc2lnbihuZXcgQ29DN0NoZWNrKCksIGNhcmQucm9sbHNbaW5kZXhdKVxuICAgICAgICBpZiAoY2FyZC5yb2xsc1tpbmRleF0ucm9sbGVkKSB7XG4gICAgICAgICAgY2FyZC5yb2xsc1tpbmRleF0uX2h0bWxSb2xsID0gYXdhaXQgY2FyZC5yb2xsc1tpbmRleF0uZ2V0SHRtbFJvbGwoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYXJkXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgX29uVG9nZ2xlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IHNwYW4gPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgaWYgKHNwYW4gJiYgc3Bhbi5jbGFzc0xpc3QuY29udGFpbnMoJ2dtLXNlbGVjdC1vbmx5JykgJiYgIWdhbWUudXNlci5pc0dNKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IHNwYW4uY2xvc2VzdCgnLmNoYXQtbWVzc2FnZScpXG4gICAgY29uc3QgY2FyZCA9IGF3YWl0IHRoaXMuZnJvbU1lc3NhZ2VJZChtZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkKVxuICAgIGlmICghY2FyZCkgcmV0dXJuXG4gICAgY29uc3QgZmxhZyA9IHNwYW4uZGF0YXNldC5mbGFnXG4gICAgaWYgKCFmbGFnKSByZXR1cm5cbiAgICBjb25zdCB0b2dnbGUgPSBzcGFuLmNsb3Nlc3QoJy50b2dnbGUnKVxuICAgIGlmICghdG9nZ2xlKSB7XG4gICAgICBjYXJkLnRvZ2dsZUZsYWcoZmxhZylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYnV0dG9ucyA9IHRvZ2dsZS5xdWVyeVNlbGVjdG9yQWxsKCcudG9nZ2xlLXN3aXRjaCcpXG4gICAgICBmb3IgKGNvbnN0IGIgb2YgYnV0dG9ucykge1xuICAgICAgICBjYXJkLnVuc2V0RmxhZyhiLmRhdGFzZXQuZmxhZylcbiAgICAgIH1cbiAgICAgIGNhcmQuc2V0RmxhZyhmbGFnKVxuICAgIH1cbiAgICBjYXJkLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBkaXNwYXRjaCAoZGF0YSkge1xuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgbGV0IG1lc3NhZ2VzID0gdWkuY2hhdC5jb2xsZWN0aW9uLmZpbHRlcihtZXNzYWdlID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuZGVmYXVsdENvbmZpZy50eXBlID09PSBtZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAndHlwZScpICYmXG4gICAgICAgICAgbWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ3N0YXRlJykgIT09ICdyZXNvbHZlZCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKFsnY29tYmluZWRDYXJkJ10uaW5jbHVkZXModGhpcy5kZWZhdWx0Q29uZmlnLnR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ2luaXRpYXRvcicpID09PSBkYXRhLnJvbGwuaW5pdGlhdG9yXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9KVxuXG4gICAgICBpZiAobWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIE9sZCBtZXNzYWdlcyBjYW4ndCBiZSB1c2VkIGlmIG1lc3NhZ2UgaXMgbW9yZSB0aGFuIGEgZGF5IG9sZCBtYXJrIGl0IGFzIHJlc29sdmVkXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKG1lc3NhZ2VzWzBdLnRpbWVzdGFtcClcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgICAgICBjb25zdCB0aW1lRGlmZlNlYyA9IChub3cgLSB0aW1lc3RhbXApIC8gMTAwMFxuICAgICAgICBpZiAoMjQgKiA2MCAqIDYwIDwgdGltZURpZmZTZWMpIHtcbiAgICAgICAgICBhd2FpdCBtZXNzYWdlc1swXS5zZXRGbGFnKCdDb0M3JywgJ3N0YXRlJywgJ3Jlc29sdmVkJylcbiAgICAgICAgICBtZXNzYWdlcyA9IFtdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGNhcmRcbiAgICAgIGlmICghbWVzc2FnZXMubGVuZ3RoKSBjYXJkID0gbmV3IHRoaXMoKVxuICAgICAgZWxzZSBjYXJkID0gYXdhaXQgdGhpcy5mcm9tTWVzc2FnZShtZXNzYWdlc1swXSlcbiAgICAgIGlmICh0eXBlb2YgZGF0YS5fcm9sbE1vZGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNhcmQuX3JvbGxNb2RlID0gZGF0YS5fcm9sbE1vZGVcbiAgICAgIH1cbiAgICAgIGF3YWl0IGNhcmQucHJvY2VzcyhkYXRhKVxuICAgIH0gZWxzZSBnYW1lLnNvY2tldC5lbWl0KCdzeXN0ZW0uQ29DNycsIGRhdGEpXG4gIH1cblxuICBhc3luYyB0b01lc3NhZ2UgKCkge1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSwgdGhpcylcbiAgICBjb25zdCBodG1sQ2FyZEVsZW1lbnQgPSAkKGh0bWwpXG4gICAgaHRtbENhcmRFbGVtZW50WzBdLmRhdGFzZXQub2JqZWN0ID0gZXNjYXBlKHRoaXMuZGF0YVN0cmluZylcblxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgZmxhdm9yOiBnYW1lLmkxOG4ubG9jYWxpemUodGhpcy5jb25maWcudGl0bGUpLFxuICAgICAgY29udGVudDogaHRtbENhcmRFbGVtZW50WzBdLm91dGVySFRNTCxcbiAgICAgIGZsYWdzOiB7XG4gICAgICAgIENvQzc6IHtcbiAgICAgICAgICB0eXBlOiB0aGlzLmNvbmZpZy50eXBlLFxuICAgICAgICAgIHN0YXRlOiAnaW5pdGlhdGVkJyxcbiAgICAgICAgICBpbml0aWF0b3I6IHRoaXMuaW5pdGlhdG9yXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoWydnbXJvbGwnLCAnYmxpbmRyb2xsJ10uaW5jbHVkZXModGhpcy5yb2xsTW9kZSkpIHtcbiAgICAgIGNoYXREYXRhLndoaXNwZXIgPSBDaGF0TWVzc2FnZS5nZXRXaGlzcGVyUmVjaXBpZW50cygnR00nKVxuICAgIH1cbiAgICBpZiAodGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCcpIGNoYXREYXRhLmJsaW5kID0gdHJ1ZVxuXG4gICAgY29uc3QgbXNnID0gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKVxuICAgIHJldHVybiBtc2dcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkICgpIHtcbiAgICBhd2FpdCB0aGlzLmNvbXB1dGUoKVxuICAgIGlmICghdGhpcy5tZXNzYWdlSWQpIHtcbiAgICAgIGF3YWl0IHRoaXMudG9NZXNzYWdlKClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMuY29uZmlnLnRlbXBsYXRlLCB0aGlzKVxuICAgICAgY29uc3QgaHRtbENhcmRFbGVtZW50ID0gJC5wYXJzZUhUTUwoaHRtbClbMF1cblxuICAgICAgLy8gQXR0YWNoIHRoZSBzYW5DaGVja0NhcmQgb2JqZWN0IHRvIHRoZSBtZXNzYWdlLlxuICAgICAgaHRtbENhcmRFbGVtZW50LmRhdGFzZXQub2JqZWN0ID0gZXNjYXBlKHRoaXMuZGF0YVN0cmluZylcblxuICAgICAgLy8gVXBkYXRlIHRoZSBtZXNzYWdlLlxuICAgICAgY29uc3QgY2hhdE1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldCh0aGlzLm1lc3NhZ2VJZClcbiAgICAgIGlmICh0aGlzLmNsb3NlZCkgYXdhaXQgY2hhdE1lc3NhZ2Uuc2V0RmxhZygnQ29DNycsICdzdGF0ZScsICdyZXNvbHZlZCcpXG5cbiAgICAgIGNvbnN0IG1zZyA9IGF3YWl0IGNoYXRNZXNzYWdlLnVwZGF0ZSh7XG4gICAgICAgIGNvbnRlbnQ6IGh0bWxDYXJkRWxlbWVudC5vdXRlckhUTUxcbiAgICAgIH0pXG4gICAgICBhd2FpdCB1aS5jaGF0LnVwZGF0ZU1lc3NhZ2UobXNnLCBmYWxzZSlcbiAgICAgIHJldHVybiBtc2dcbiAgICB9XG4gIH1cblxuICB1cGRhdGVSb2xsIChkYXRhKSB7XG4gICAgaWYgKCFkYXRhLmZyb21HTSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnJvbGxzW2RhdGEucmFua10sIGRhdGEucm9sbClcbiAgICB9XG4gIH1cblxuICBhZGRSb2xsRGF0YSAoZGF0YSkge1xuICAgIGNvbnN0IGNoZWNrID0gT2JqZWN0LmFzc2lnbihuZXcgQ29DN0NoZWNrKCksIGRhdGEucm9sbClcbiAgICB0aGlzLnJvbGxzLnB1c2goY2hlY2spXG4gICAgaWYgKHRoaXMuY29uZmlnLnR5cGUgPT09ICdjb21iaW5lZENhcmQnKSB7XG4gICAgICB0aGlzLmluaXRpYXRvciA9IGRhdGEucm9sbC5pbml0aWF0b3JcbiAgICB9XG4gIH1cblxuICBhZGRSb2xsIChkYXRhKSB7XG4gICAgdGhpcy5yb2xscy5wdXNoKGRhdGEpXG4gIH1cblxuICByZW1vdmVSb2xsIChyYW5rKSB7XG4gICAgdGhpcy5yb2xscy5zcGxpY2UocmFuaywgMSlcbiAgfVxuXG4gIHNldEZsYWcgKGZsYWdOYW1lKSB7XG4gICAgaWYgKCFmbGFnTmFtZSAmJiAhKCQudHlwZShmbGFnTmFtZSkgPT09ICdzdHJpbmcnKSkgcmV0dXJuXG4gICAgdGhpc1tmbGFnTmFtZV0gPSB0cnVlXG4gIH1cblxuICB1bnNldEZsYWcgKGZsYWdOYW1lKSB7XG4gICAgaWYgKCFmbGFnTmFtZSAmJiAhKCQudHlwZShmbGFnTmFtZSkgPT09ICdzdHJpbmcnKSkgcmV0dXJuXG4gICAgdGhpc1tmbGFnTmFtZV0gPSBmYWxzZVxuICB9XG5cbiAgdG9nZ2xlRmxhZyAoZmxhZ05hbWUpIHtcbiAgICB0aGlzW2ZsYWdOYW1lXSA9ICF0aGlzW2ZsYWdOYW1lXVxuICB9XG5cbiAgZ2V0IG1lc3NhZ2UgKCkge1xuICAgIGlmICh0aGlzLl9tZXNzYWdlKSByZXR1cm4gdGhpcy5fbWVzc2FnZVxuICAgIGlmICh0aGlzLl9tZXNzYWdlSWQpIHJldHVybiBnYW1lLm1lc3NhZ2VzLmdldCh0aGlzLl9tZXNzYWdlSWQpXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgc2V0IG1lc3NhZ2UgKHgpIHtcbiAgICB0aGlzLl9tZXNzYWdlID0geFxuICB9XG5cbiAgZ2V0IG1lc3NhZ2VJZCAoKSB7XG4gICAgaWYgKHRoaXMuX21lc3NhZ2VJZCkgcmV0dXJuIHRoaXMuX21lc3NhZ2VJZFxuICAgIGlmICh0aGlzLl9tZXNzYWdlKSByZXR1cm4gdGhpcy5fbWVzc2FnZS5pZFxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHNldCBtZXNzYWdlSWQgKHgpIHtcbiAgICB0aGlzLl9tZXNzYWdlSWQgPSB4XG4gIH1cblxuICAvLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdENvbmZpZyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4Y2x1ZGU6IFsnX2FjdG9yJywgJ19za2lsbCcsICdfaXRlbScsICdfbWVzc2FnZScsICdfaHRtbFJvbGwnXSxcbiAgICAgIGV4Y2x1ZGVTdGFydFdpdGg6ICdfXydcbiAgICB9XG4gIH1cblxuICAvLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgZ2V0IHdpbm5lcnMgKCkge1xuICAgIHJldHVybiB0aGlzLnJvbGxzLmZpbHRlcihyID0+IHIud2lubmVyKVxuICB9XG5cbiAgZ2V0IHdpbm5lciAoKSB7XG4gICAgaWYgKHRoaXMud2lubmVycy5sZW5ndGgpIHJldHVybiB0aGlzLndpbm5lcnNbMF1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgbG9vc2VycyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucm9sbHMuZmlsdGVyKHIgPT4gIXIud2lubmVyKVxuICB9XG5cbiAgZ2V0IGxvb3NlciAoKSB7XG4gICAgaWYgKHRoaXMubG9vc2Vycy5sZW5ndGgpIHJldHVybiB0aGlzLmxvb3NlcnNbMF1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgaGFzV2lubmVyICgpIHtcbiAgICBpZiAodGhpcy53aW5uZXJzLmxlbmd0aCA+IDApIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgaXNLZWVwZXIgKCkge1xuICAgIHJldHVybiBnYW1lLnVzZXIuaXNHTVxuICB9XG5cbiAgZ2V0IHJvbGxNb2RlICgpIHtcbiAgICBpZiAoIXRoaXMuX3JvbGxNb2RlKSB0aGlzLl9yb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICByZXR1cm4gdGhpcy5fcm9sbE1vZGVcbiAgfVxuXG4gIHNldCByb2xsTW9kZSAoeCkge1xuICAgIGlmICh4ID09PSBmYWxzZSkgdGhpcy5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgdGhpcy5fcm9sbE1vZGUgPSB4XG4gIH1cblxuICBnZXQgZGF0YSAoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5kYXRhU3RyaW5nKVxuICB9XG5cbiAgZ2V0IGRhdGFTdHJpbmcgKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICBpZiAodGhpcy5jb25maWcuZXhjbHVkZT8uaW5jbHVkZXMoa2V5KSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKHRoaXMuY29uZmlnLmV4Y2x1ZGVTdGFydFdpdGgpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQXVkaW9IZWxwZXIsIENPTkZJRywgZm91bmRyeSwgZ2FtZSAqL1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3RGljZSB9IGZyb20gJy4uLy4uL2RpY2UuanMnXG5pbXBvcnQgeyBSb2xsQ2FyZCB9IGZyb20gJy4vcm9sbC1jYXJkLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29tYmluZWRDaGVja0NhcmQgZXh0ZW5kcyBSb2xsQ2FyZCB7XG4gIHN0YXRpYyBhc3luYyBiaW5kTGlzdGVybmVycyAoaHRtbCkge1xuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5yb2xsLWNhcmQuY29tYmluZWQgLnRvZ2dsZS1zd2l0Y2gnLFxuICAgICAgdGhpcy5fb25Ub2dnbGUuYmluZCh0aGlzKVxuICAgIClcbiAgICAvLyBodG1sLmZpbmQoJy5yb2xsLWNhcmQgYScpLmNsaWNrKGFzeW5jIChldmVudCkgPT4gQ29tYmluZWRDaGVja0NhcmQuX29uQ2xpY2soIGV2ZW50KSk7XG4gICAgaHRtbC5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLnJvbGwtY2FyZC5jb21iaW5lZCBhJyxcbiAgICAgIENvbWJpbmVkQ2hlY2tDYXJkLl9vbkNsaWNrLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLnJvbGwtY2FyZC5jb21iaW5lZCBidXR0b24nLFxuICAgICAgQ29tYmluZWRDaGVja0NhcmQuX29uQ2xpY2suYmluZCh0aGlzKVxuICAgIClcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdENvbmZpZyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdENvbmZpZywge1xuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvY2FyZHMvY29tYmluZWQtcm9sbC5odG1sJyxcbiAgICAgIHR5cGU6ICdjb21iaW5lZENhcmQnLFxuICAgICAgdGl0bGU6ICdDb0M3LkNvbWJpbmVkUm9sbENhcmQnXG4gICAgfSlcbiAgfVxuXG4gIGdldCBjb25maWcgKCkge1xuICAgIHJldHVybiBDb21iaW5lZENoZWNrQ2FyZC5kZWZhdWx0Q29uZmlnXG4gIH1cblxuICBnZXQgc3VjY2Vzc0NvdW50ICgpIHtcbiAgICBpZiAodGhpcy5yb2xsZWQpIHtcbiAgICAgIGxldCBjb3VudCA9IDBcbiAgICAgIGZvciAoY29uc3QgciBvZiB0aGlzLnJvbGxzKSB7XG4gICAgICAgIGlmIChyLnBhc3NlZCkgY291bnQgKz0gMVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvdW50XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBtYWluQWN0b3JLZXkgKCkge1xuICAgIHJldHVybiB0aGlzLnJvbGxzWzBdPy5hY3Rvcj8uYWN0b3JLZXkgfHwgdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgc3VjY2VzcyAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnN1Y2Nlc3NDb3VudCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAodGhpcy5hbnkpIHtcbiAgICAgIGlmICh0aGlzLnN1Y2Nlc3NDb3VudCA+IDApIHJldHVybiB0cnVlXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKHRoaXMuYWxsKSB7XG4gICAgICBpZiAodGhpcy5zdWNjZXNzQ291bnQgPT09IHRoaXMucm9sbHMubGVuZ3RoKSByZXR1cm4gdHJ1ZVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBmYWlsdXJlICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuc3VjY2VzcyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gIXRoaXMuc3VjY2Vzc1xuICB9XG5cbiAgZ2V0IGNoZWNrR01Jbml0aWF0b3IgKCkge1xuICAgIHJldHVybiBnYW1lLnVzZXJzLmdldCh0aGlzLmluaXRpYXRvcik/LmlzR01cbiAgfVxuXG4gIGFzeW5jIGdldEh0bWxSb2xsICgpIHtcbiAgICBpZiAoIXRoaXMucm9sbGVkKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICBhd2FpdCBjaGVjay5fcGVyZm9ybSh7XG4gICAgICByb2xsOiB0aGlzLl9yb2xsW2NoZWNrLmRpY2VNb2RpZmllciB8fCAwXSxcbiAgICAgIHNpbGVudDogdHJ1ZVxuICAgIH0pXG4gICAgcmV0dXJuIGF3YWl0IGNoZWNrLmdldEh0bWxSb2xsKHsgaGlkZVN1Y2Nlc3M6IHRydWUgfSlcbiAgfVxuXG4gIHByb2Nlc3MgKGRhdGEpIHtcbiAgICBzd2l0Y2ggKGRhdGEuYWN0aW9uKSB7XG4gICAgICBjYXNlICduZXcnOlxuICAgICAgICB0aGlzLmFkZFJvbGxEYXRhKGRhdGEpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3JvbGwnOlxuICAgICAgICB0aGlzLmFkZFJvbGxEYXRhKGRhdGEpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3VwZGF0ZVJvbGwnOiB7XG4gICAgICAgIHRoaXMudXBkYXRlUm9sbChkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdhc3NpZ25Sb2xsJzoge1xuICAgICAgICB0aGlzLmFzc2lnblJvbGwoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICAgIGVsc2UgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCBkYXRhKVxuICB9XG5cbiAgYXN5bmMgYXNzaWduUm9sbCAoZGF0YSkge1xuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaWYgKCF0aGlzLnJvbGxlZCkge1xuICAgICAgICB0aGlzLnJvbGxlZCA9IHRydWVcbiAgICAgICAgdGhpcy5fcm9sbCA9IGRhdGEucm9sbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfb25DbGljayAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGFjdGlvbiA9IGEuZGF0YXNldC5hY3Rpb25cbiAgICBjb25zdCBsaSA9IGEuY2xvc2VzdCgnbGkuYWN0b3Itcm9sbCcpXG4gICAgY29uc3QgbWVzc2FnZSA9IGEuY2xvc2VzdCgnLmNoYXQtbWVzc2FnZScpXG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSBhLmNsb3Nlc3QoJ2Rpdi5yb2xsLWNhcmQnKVxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCBDb21iaW5lZENoZWNrQ2FyZC5mcm9tSFRNTENhcmRFbGVtZW50KGNhcmRFbGVtZW50KVxuICAgIGNhcmQubWVzc2FnZUlkID0gbWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZFxuICAgIGNvbnN0IHJhbmsgPSBOdW1iZXIobGk/LmRhdGFzZXQ/LnJhbmspXG5cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAncmVtb3ZlLXJvbGwnOiB7XG4gICAgICAgIGNhcmQucmVtb3ZlUm9sbChyYW5rKVxuICAgICAgICBhd2FpdCBjYXJkLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnY2xvc2UtY2FyZCc6IHtcbiAgICAgICAgY2FyZC5jbG9zZUNhcmQoKVxuICAgICAgICBhd2FpdCBjYXJkLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAncm9sbC1jYXJkJzoge1xuICAgICAgICBjb25zdCBwb29sID0ge31cbiAgICAgICAgZm9yIChjb25zdCBkaWNlIG9mIGNhcmQucm9sbHMpIHtcbiAgICAgICAgICBjb25zdCBkaWNlTW9kaWZpZXIgPSBwYXJzZUludChkaWNlLmRpY2VNb2RpZmllciwgMTApXG4gICAgICAgICAgaWYgKCFpc05hTihkaWNlTW9kaWZpZXIpKSB7XG4gICAgICAgICAgICBwb29sW2RpY2VNb2RpZmllcl0gPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJvbGwgPSBhd2FpdCBDb0M3RGljZS5jb21iaW5lZFJvbGwoeyBwb29sIH0pXG4gICAgICAgIHJvbGwuaW5pdGlhdG9yID0gZ2FtZS51c2VyLmlkXG5cbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICB0eXBlOiB0aGlzLmRlZmF1bHRDb25maWcudHlwZSxcbiAgICAgICAgICBhY3Rpb246ICdhc3NpZ25Sb2xsJyxcbiAgICAgICAgICBmcm9tR006IGdhbWUudXNlci5pc0dNLFxuICAgICAgICAgIHJvbGxcbiAgICAgICAgfVxuICAgICAgICBBdWRpb0hlbHBlci5wbGF5KHsgc3JjOiBDT05GSUcuc291bmRzLmRpY2UgfSwgdHJ1ZSlcbiAgICAgICAgY2FyZC5wcm9jZXNzKGRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cGRhdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IGEuZGF0YXNldCxcbiAgICAgICAgICBjbGFzc2VzOiBhLmNsYXNzTGlzdCxcbiAgICAgICAgICB0YXJnZXQ6IGFcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBDb0M3Q2hlY2suYWx0ZXIoY2FyZC5yb2xsc1tyYW5rXSwgYWN0aW9uLCBvcHRpb25zKVxuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgIHR5cGU6IHRoaXMuZGVmYXVsdENvbmZpZy50eXBlLFxuICAgICAgICAgIGFjdGlvbjogJ3VwZGF0ZVJvbGwnLFxuICAgICAgICAgIHJhbmssXG4gICAgICAgICAgZnJvbUdNOiBnYW1lLnVzZXIuaXNHTSxcbiAgICAgICAgICByb2xsOiB7XG4gICAgICAgICAgICBpbml0aWF0b3I6IGdhbWUudXNlci5pZFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdhbWUudXNlci5pc0dNKSBkYXRhLnJvbGwgPSBjYXJkLnJvbGxzW3JhbmtdLkpTT05Sb2xsRGF0YVxuICAgICAgICBjYXJkLnByb2Nlc3MoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBjb21wdXRlICgpIHtcbiAgICBpZiAoIXRoaXMuX3JvbGwpIHJldHVyblxuXG4gICAgdGhpcy5yb2xscyA9IHRoaXMucm9sbHMuZmlsdGVyKHJvbGwgPT4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiByb2xsLmFjdG9yLmRhdGEgIT09ICd1bmRlZmluZWQnIC8vIHJlbW92ZSBhbnkgYWN0b3JzIHRoYXQgbm8gbG9uZ2VyIGV4aXN0XG4gICAgfSlcblxuICAgIGZvciAoY29uc3QgciBvZiB0aGlzLnJvbGxzKSB7XG4gICAgICBpZiAoIXIucm9sbGVkKSB7XG4gICAgICAgIHIubW9kaWZpZXIgPSByLmRpY2VNb2RpZmllciB8fCAwXG4gICAgICAgIHIuZGlmZmljdWx0eSA9IHIuZGlmZmljdWx0eSB8fCBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgICAgci5mbGF0RGljZU1vZGlmaWVyID0gci5mbGF0RGljZU1vZGlmaWVyIHx8IDBcbiAgICAgICAgci5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSByLmZsYXRUaHJlc2hvbGRNb2RpZmllciB8fCAwXG4gICAgICAgIGF3YWl0IHIuX3BlcmZvcm0oeyByb2xsOiB0aGlzLl9yb2xsW3IubW9kaWZpZXJdLCBzaWxlbnQ6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5yb2xsc1tpXS5yb2xsZWQpIHtcbiAgICAgICAgdGhpcy5yb2xsc1tpXS5faHRtbFJvbGwgPSBhd2FpdCB0aGlzLnJvbGxzW2ldLmdldEh0bWxSb2xsKHtcbiAgICAgICAgICBoaWRlRGljZVJlc3VsdDogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2h0bWxSb2xsID0gYXdhaXQgdGhpcy5nZXRIdG1sUm9sbCgpXG4gIH1cblxuICBjbG9zZUNhcmQgKCkge1xuICAgIHRoaXMuY2xvc2VkID0gdHJ1ZVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ2hhdE1lc3NhZ2UsIEZvcm1EYXRhRXh0ZW5kZWQsIGZvdW5kcnksIGdhbWUsIHJlbmRlclRlbXBsYXRlLCB1aSAqL1xuaW1wb3J0IHsgY2hhdEhlbHBlciB9IGZyb20gJy4vaGVscGVyLmpzJ1xuXG5leHBvcnQgY2xhc3MgSW50ZXJhY3RpdmVDaGF0Q2FyZCB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICB9XG5cbiAgZ2V0IG9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdE9wdGlvbnMsIHRoaXMuX29wdGlvbnMpXG4gIH1cblxuICBnZXQgdGVtcGxhdGUgKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMudGVtcGxhdGVcbiAgfVxuXG4gIGdldCBjc3NDbGFzc2VzICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNsYXNzZXNcbiAgfVxuXG4gIGFzeW5jIHRvTWVzc2FnZSAob3B0aW9ubmFsQ2hhdERhdGEgPSB7fSkge1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCB0aGlzKVxuICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9ICQoaHRtbClbMF1cbiAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5vYmplY3QgPSBlc2NhcGUodGhpcy5kYXRhU3RyaW5nKVxuICAgIGh0bWxDYXJkRWxlbWVudC5kYXRhc2V0LmNhcmRDbGFzcyA9IHRoaXMuY29uc3RydWN0b3IubmFtZVxuICAgIGh0bWxDYXJkRWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLnRoaXMuY3NzQ2xhc3NlcylcblxuICAgIGNvbnN0IGNoYXREYXRhID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChcbiAgICAgIHtcbiAgICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgICBmbGF2b3I6IGdhbWUuaTE4bi5sb2NhbGl6ZSh0aGlzLm9wdGlvbnMudGl0bGUpLFxuICAgICAgICBjb250ZW50OiBodG1sQ2FyZEVsZW1lbnQub3V0ZXJIVE1MXG4gICAgICB9LFxuICAgICAgb3B0aW9ubmFsQ2hhdERhdGFcbiAgICApXG5cbiAgICBpZiAoWydnbXJvbGwnLCAnYmxpbmRyb2xsJ10uaW5jbHVkZXModGhpcy5yb2xsTW9kZSkpIHtcbiAgICAgIGNoYXREYXRhLndoaXNwZXIgPSBDaGF0TWVzc2FnZS5nZXRXaGlzcGVyUmVjaXBpZW50cygnR00nKVxuICAgIH1cbiAgICBpZiAodGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCcpIGNoYXREYXRhLmJsaW5kID0gdHJ1ZVxuXG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKS50aGVuKG1zZyA9PiB7XG4gICAgICByZXR1cm4gbXNnXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkIChvcHRpb25zID0ge30pIHtcbiAgICBpZiAob3B0aW9ucy5jb21wdXRlKSB0aGlzLmNvbXB1dGUoKVxuICAgIGlmICghdGhpcy5tZXNzYWdlSWQpIHtcbiAgICAgIHRoaXMudG9NZXNzYWdlKClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG4gICAgICBjb25zdCBodG1sQ2FyZEVsZW1lbnQgPSAkLnBhcnNlSFRNTChodG1sKVswXVxuXG4gICAgICAvLyBBdHRhY2ggdGhlIHNhbkNoZWNrQ2FyZCBvYmplY3QgdG8gdGhlIG1lc3NhZ2UuXG4gICAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5vYmplY3QgPSBlc2NhcGUodGhpcy5kYXRhU3RyaW5nKVxuICAgICAgaHRtbENhcmRFbGVtZW50LmRhdGFzZXQuY2FyZENsYXNzID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICBodG1sQ2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLmNzc0NsYXNzZXMpXG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgbWVzc2FnZS5cbiAgICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG4gICAgICBpZiAodGhpcy5jbG9zZWQpIGF3YWl0IGNoYXRNZXNzYWdlLnNldEZsYWcoJ0NvQzcnLCAnc3RhdGUnLCAncmVzb2x2ZWQnKVxuXG4gICAgICBjb25zdCBtc2cgPSBhd2FpdCBjaGF0TWVzc2FnZS51cGRhdGUoe1xuICAgICAgICBjb250ZW50OiBodG1sQ2FyZEVsZW1lbnQub3V0ZXJIVE1MXG4gICAgICB9KVxuICAgICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgICByZXR1cm4gbXNnXG4gICAgfVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcuaW50ZXJhY3RpdmUtY2FyZCAuaWMtcmFkaW8tc3dpdGNoJyxcbiAgICAgIHRoaXMuX29uVG9nZ2xlLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbignY2xpY2snLCAnLmludGVyYWN0aXZlLWNhcmQgLmljLXN3aXRjaCcsIHRoaXMuX29uVG9nZ2xlLmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignY2xpY2snLCAnLmludGVyYWN0aXZlLWNhcmQgLnN1Ym1pdCcsIHRoaXMuX29uU3VibWl0LmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignZm9jdXNvdXQnLCAnaW5wdXQnLCB0aGlzLl9vblN1Ym1pdC5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oJ2NsaWNrJywgJy5pbnRlcmFjdGl2ZS1jYXJkIGJ1dHRvbicsIHRoaXMuX29uQnV0dG9uLmJpbmQodGhpcykpXG4gICAgaHRtbC5vbigna2V5ZG93bicsICdmb3JtJywgdGhpcy5fb25LZXkuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBiaW5kTGlzdGVuZXJzIChodG1sKSB7XG4gICAgY29uc3QgaHRtbE1lc3NhZ2VFbGVtZW50ID0gaHRtbFswXVxuICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9IGh0bWxNZXNzYWdlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhdC1jYXJkJylcbiAgICBpZiAoIWh0bWxDYXJkRWxlbWVudCkgcmV0dXJuXG4gICAgaWYgKCFodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5jYXJkQ2xhc3MpIHJldHVyblxuICAgIGlmIChcbiAgICAgICFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnYW1lLkNvQzcuY2FyZHMpLmluY2x1ZGVzKFxuICAgICAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5jYXJkQ2xhc3NcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBjYXJkID0gYXdhaXQgSW50ZXJhY3RpdmVDaGF0Q2FyZC5mcm9tSFRNTENhcmRFbGVtZW50KGh0bWxDYXJkRWxlbWVudClcbiAgICBjb25zdCB0eXBlZENhcmQgPSBPYmplY3QuYXNzaWduKFxuICAgICAgbmV3IGdhbWUuQ29DNy5jYXJkc1todG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5jYXJkQ2xhc3NdKCksXG4gICAgICBjYXJkXG4gICAgKVxuICAgIHR5cGVkQ2FyZC5hc3NpZ25PYmplY3QoKVxuICAgIHR5cGVkQ2FyZC5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRvIHJlYXNzaWduIG9iamVjdCB0eXBlXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBhc3NpZ25PYmplY3QgKCkge31cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudCB3aWxsIGNoZWNrIGZvciBhbiBhY3Rpb24gKGRhdGEtYWN0aW9uKVxuICAgKiBpZiBhIG1ldGhvZCB3aXRoIHRoYXQgbmFtZSBleGlzdCBpdCB3aWxsIGJlIHRyaWdnZXJlZC5cbiAgICovXG4gIF9vbkJ1dHRvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBidXR0b24gPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgLy8gYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScgLy9Bdm9pZCBtdWx0aXBsZSBwdXNoXG4gICAgY29uc3QgYWN0aW9uID0gYnV0dG9uLmRhdGFzZXQuYWN0aW9uXG4gICAgaWYgKHRoaXNbYWN0aW9uXSkgdGhpc1thY3Rpb25dKHsgZXZlbnQsIHVwZGF0ZTogdHJ1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRcbiAgICogQHJldHVybnMgZmFsc2UgaWYga2V5IGlzIGVudGVyIHRvIGF2b2lkIGdsb2JhbCBzdWJtaXNzaW9uXG4gICAqL1xuICBfb25LZXkgKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykgdGhpcy5fb25TdWJtaXQoZXZlbnQpXG4gICAgcmV0dXJuIGV2ZW50LmtleSAhPT0gJ0VudGVyJ1xuICB9XG5cbiAgX29uU3VibWl0IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBjYXJkID0gdGFyZ2V0LmNsb3Nlc3QoJy5pbnRlcmFjdGl2ZS1jYXJkJylcbiAgICBpZiAoIWNhcmQpIHJldHVyblxuICAgIGNvbnN0IHVwZGF0ZXMgPSB0aGlzLl91cGRhdGUoY2FyZClcbiAgICBpZiAodXBkYXRlcykgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICBfdXBkYXRlIChjYXJkKSB7XG4gICAgY29uc3QgZm9ybXMgPSBjYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm0nKVxuICAgIGxldCB1cGRhdGVzID0gZmFsc2VcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmb3JtID0gZm9ybXNbaV1cbiAgICAgIGNvbnN0IGZkID0gbmV3IEZvcm1EYXRhRXh0ZW5kZWQoZm9ybSlcbiAgICAgIGxldCBkYXRhID0gZmQudG9PYmplY3QoKVxuICAgICAgZGF0YSA9IGZvdW5kcnkudXRpbHMuZGlmZk9iamVjdCh0aGlzLCBmb3VuZHJ5LnV0aWxzLmV4cGFuZE9iamVjdChkYXRhKSlcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XG4gICAgICAgIHRoaXNba2V5XSA9IHZhbHVlXG4gICAgICAgIHVwZGF0ZXMgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVzXG4gIH1cblxuICBnZXQgbWVzc2FnZSAoKSB7XG4gICAgaWYgKHRoaXMuX21lc3NhZ2UpIHJldHVybiB0aGlzLl9tZXNzYWdlXG4gICAgaWYgKHRoaXMuX21lc3NhZ2VJZCkgcmV0dXJuIGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMuX21lc3NhZ2VJZClcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBzZXQgbWVzc2FnZSAoeCkge1xuICAgIHRoaXMuX21lc3NhZ2UgPSB4XG4gIH1cblxuICBnZXQgbWVzc2FnZUlkICgpIHtcbiAgICBpZiAodGhpcy5fbWVzc2FnZUlkKSByZXR1cm4gdGhpcy5fbWVzc2FnZUlkXG4gICAgaWYgKHRoaXMuX21lc3NhZ2UpIHJldHVybiB0aGlzLl9tZXNzYWdlLmlkXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgc2V0IG1lc3NhZ2VJZCAoeCkge1xuICAgIHRoaXMuX21lc3NhZ2VJZCA9IHhcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc2VzOiBbJ2ludGVyYWN0aXZlLWNhcmQnXSxcbiAgICAgIGV4Y2x1ZGU6IFsnX2FjdG9yJywgJ19za2lsbCcsICdfaXRlbScsICdfbWVzc2FnZScsICdfaHRtbFJvbGwnXSxcbiAgICAgIGV4Y2x1ZGVTdGFydFdpdGg6ICdfXydcbiAgICB9XG4gIH1cblxuICBnZXQgZGF0YSAoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5kYXRhU3RyaW5nKVxuICB9XG5cbiAgZ2V0IGRhdGFTdHJpbmcgKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4Y2x1ZGU/LmluY2x1ZGVzKGtleSkpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCh0aGlzLm9wdGlvbnMuZXhjbHVkZVN0YXJ0V2l0aCkpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0pXG4gIH1cblxuICBnZXQgcm9sbE1vZGUgKCkge1xuICAgIGlmICghdGhpcy5fcm9sbE1vZGUpIHRoaXMuX3JvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIHJldHVybiB0aGlzLl9yb2xsTW9kZVxuICB9XG5cbiAgc2V0IHJvbGxNb2RlICh4KSB7XG4gICAgaWYgKHggPT09IGZhbHNlKSB0aGlzLl9yb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICB0aGlzLl9yb2xsTW9kZSA9IHhcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tTWVzc2FnZUlkIChtZXNzYWdlSWQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCB0aGlzLmZyb21NZXNzYWdlKG1lc3NhZ2UpXG4gICAgY2FyZC5tZXNzYWdlSWQgPSBtZXNzYWdlSWRcbiAgICByZXR1cm4gY2FyZFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21NZXNzYWdlIChtZXNzYWdlKSB7XG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSAkKG1lc3NhZ2UuY29udGVudClbMF1cbiAgICBpZiAoIWNhcmRFbGVtZW50KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgY2FyZCA9IGF3YWl0IHRoaXMuZnJvbUhUTUxDYXJkRWxlbWVudChjYXJkRWxlbWVudClcbiAgICBjYXJkLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgcmV0dXJuIGNhcmRcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tSFRNTENhcmRFbGVtZW50IChjYXJkKSB7XG4gICAgY29uc3QgY2FyZERhdGEgPSBKU09OLnBhcnNlKHVuZXNjYXBlKGNhcmQuZGF0YXNldC5vYmplY3QpKVxuICAgIGlmICghY2FyZERhdGEubWVzc2FnZUlkKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpXG4gICAgICBjYXJkRGF0YS5tZXNzYWdlSWQgPSBtZXNzYWdlPy5kYXRhc2V0Py5tZXNzYWdlSWRcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZnJvbURhdGEoY2FyZERhdGEpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZnJvbURhdGEgKGRhdGEpIHtcbiAgICBjb25zdCBjYXJkID0gT2JqZWN0LmFzc2lnbihuZXcgdGhpcygpLCBkYXRhKVxuICAgIGF3YWl0IGNhcmQuYXNzaWduT2JqZWN0KClcbiAgICByZXR1cm4gY2FyZFxuICB9XG5cbiAgLy8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHNldEZsYWcgKGZsYWdOYW1lKSB7XG4gICAgaWYgKCFmbGFnTmFtZSAmJiAhKCQudHlwZShmbGFnTmFtZSkgPT09ICdzdHJpbmcnKSkgcmV0dXJuXG4gICAgdGhpc1tmbGFnTmFtZV0gPSB0cnVlXG4gIH1cblxuICB1bnNldEZsYWcgKGZsYWdOYW1lKSB7XG4gICAgaWYgKCFmbGFnTmFtZSAmJiAhKCQudHlwZShmbGFnTmFtZSkgPT09ICdzdHJpbmcnKSkgcmV0dXJuXG4gICAgdGhpc1tmbGFnTmFtZV0gPSBmYWxzZVxuICB9XG5cbiAgdG9nZ2xlRmxhZyAoZmxhZ05hbWUpIHtcbiAgICB0aGlzW2ZsYWdOYW1lXSA9ICF0aGlzW2ZsYWdOYW1lXVxuICB9XG5cbiAgYXN5bmMgX29uVG9nZ2xlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBpZiAoJ2FjdGlvbicgaW4gdGFyZ2V0LmRhdGFzZXQpIHJldHVybiB0aGlzLl9vbkJ1dHRvbihldmVudClcbiAgICBpZiAoXG4gICAgICB0YXJnZXQgJiZcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2dtLXNlbGVjdC1vbmx5JykgJiZcbiAgICAgICFnYW1lLnVzZXIuaXNHTVxuICAgICkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGZsYWcgPSB0YXJnZXQuZGF0YXNldC5mbGFnXG4gICAgaWYgKCFmbGFnKSByZXR1cm5cbiAgICBjb25zdCB0b2dnbGUgPSB0YXJnZXQuY2xvc2VzdCgnLmljLXJhZGlvJylcbiAgICBpZiAoIXRvZ2dsZSkge1xuICAgICAgdGhpcy50b2dnbGVGbGFnKGZsYWcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0b2dnbGUucXVlcnlTZWxlY3RvckFsbCgnLmljLXJhZGlvLXN3aXRjaCcpXG4gICAgICBmb3IgKGNvbnN0IGIgb2YgYnV0dG9ucykge1xuICAgICAgICB0aGlzLnVuc2V0RmxhZyhiLmRhdGFzZXQuZmxhZylcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0RmxhZyhmbGFnKVxuICAgIH1cbiAgICBjb25zdCBjYXJkID0gdGFyZ2V0LmNsb3Nlc3QoJy5pbnRlcmFjdGl2ZS1jYXJkJylcbiAgICBpZiAoY2FyZCkgdGhpcy5fdXBkYXRlKGNhcmQpXG4gICAgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICAvLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGdldCBkaXNwbGF5QWN0b3JPbkNhcmQgKCkge1xuICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNwbGF5QWN0b3JPbkNhcmQnKVxuICB9XG5cbiAgZ2V0IGlzQmxpbmQgKCkge1xuICAgIGlmICghdGhpcy5yb2xsTW9kZSkgcmV0dXJuIG51bGxcbiAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9pc0JsaW5kKSB7XG4gICAgICB0aGlzLl9pc0JsaW5kID0gdGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCdcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2lzQmxpbmRcbiAgfVxuXG4gIHNldCBpc0JsaW5kICh4KSB7XG4gICAgdGhpcy5faXNCbGluZCA9IHhcbiAgfVxuXG4gIGdldCBhY3RvciAoKSB7XG4gICAgaWYgKCF0aGlzLmFjdG9yS2V5KSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLmFjdG9yS2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgfVxuXG4gIGdldCB0b2tlbiAoKSB7XG4gICAgaWYgKCF0aGlzLmFjdG9yKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLmFjdG9yS2V5KVxuICB9XG5cbiAgZ2V0IGl0ZW0gKCkge1xuICAgIGlmICghdGhpcy5pdGVtSWQpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIHRoaXMuYWN0b3IuaXRlbXMuZ2V0KHRoaXMuaXRlbUlkKVxuICB9XG5cbiAgZ2V0IHdlYXBvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbVxuICB9XG5cbiAgZ2V0IHRhcmdldGVkVG9rZW5zICgpIHtcbiAgICByZXR1cm4gWy4uLmdhbWUudXNlci50YXJnZXRzXVxuICB9XG5cbiAgZ2V0IHRhcmdldCAoKSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0VG9rZW4pIHJldHVybiB0aGlzLnRhcmdldFRva2VuXG4gICAgcmV0dXJuIHRoaXMudGFyZ2V0QWN0b3JcbiAgfVxuXG4gIGdldCBpc1RhcmdldE93bmVyICgpIHtcbiAgICByZXR1cm4gdGhpcy50YXJnZXQuaXNPd25lclxuICB9XG5cbiAgZ2V0IGlzS2VlcGVyICgpIHtcbiAgICByZXR1cm4gZ2FtZS51c2VyLmlzR01cbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBhIHRhcmdldEtleSB3YXMgcHJvdmlkZWQgdHJ5IHRvIGZpbmQgYSB0b2tlbiB3aXRoIHRoYXQga2V5IGFuZCB1c2UgaXQuXG4gICAqIElmIG5vdCB0YXJnZXRLZXkgcHJvdmlkZWQgcmV0dXJuIHRoZSBmaXJzdCB0YXJnZXQuXG4gICAqL1xuICBnZXQgdGFyZ2V0VG9rZW4gKCkge1xuICAgIGlmICghdGhpcy5fdGFyZ2V0VG9rZW4pIHtcbiAgICAgIGlmICh0aGlzLl90YXJnZXRLZXkpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0VG9rZW4gPSBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLl90YXJnZXRLZXkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl90YXJnZXRUb2tlbiA9IHRoaXMudGFyZ2V0ZWRUb2tlbnMucG9wKClcbiAgICAgICAgaWYgKHRoaXMuX3RhcmdldFRva2VuKSB7XG4gICAgICAgICAgdGhpcy5fdGFyZ2V0S2V5ID0gYCR7dGhpcy5fdGFyZ2V0VG9rZW4uc2NlbmUuaWR9LiR7dGhpcy5fdGFyZ2V0VG9rZW4uaWR9YFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgICAgIHRoaXMuX3RhcmdldFRva2VuID0gbnVsbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90YXJnZXRUb2tlblxuICB9XG5cbiAgZ2V0IHRhcmdldEFjdG9yICgpIHtcbiAgICBpZiAoIXRoaXMuX3RhcmdldEFjdG9yKSB7XG4gICAgICBpZiAodGhpcy50YXJnZXRUb2tlbikge1xuICAgICAgICB0aGlzLl90YXJnZXRBY3RvciA9XG4gICAgICAgICAgdGhpcy50YXJnZXRUb2tlbi5hY3RvciB8fFxuICAgICAgICAgIHRoaXMudGFyZ2V0VG9rZW4uZGF0YS5hY3RvciB8fFxuICAgICAgICAgIHRoaXMudGFyZ2V0VG9rZW4uZGF0YS5kb2N1bWVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0QWN0b3IgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLl90YXJnZXRLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0QWN0b3JcbiAgfVxuXG4gIGdldCB0YXJnZXRLZXkgKCkge1xuICAgIGlmICghdGhpcy50YXJnZXRUb2tlbiAmJiAhdGhpcy50YXJnZXRBY3RvcikgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0S2V5XG4gIH1cblxuICBnZXQgaGFzVGFyZ2V0ICgpIHtcbiAgICBpZiAoIXRoaXMudGFyZ2V0VG9rZW4gJiYgIXRoaXMudGFyZ2V0QWN0b3IpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBzZXQgdGFyZ2V0S2V5ICh4KSB7XG4gICAgdGhpcy5fdGFyZ2V0S2V5ID0geFxuICB9XG5cbiAgZ2V0IHNraWxscyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0b3IuZ2V0V2VhcG9uU2tpbGxzKHRoaXMuaXRlbUlkKVxuICB9XG5cbiAgZ2V0IHRhcmdldEltZyAoKSB7XG4gICAgY29uc3QgaW1nID0gY2hhdEhlbHBlci5nZXRBY3RvckltZ0Zyb21LZXkodGhpcy50YXJnZXRLZXkpXG4gICAgaWYgKGltZykgcmV0dXJuIGltZ1xuICAgIHJldHVybiAnLi4vaWNvbnMvc3ZnL215c3RlcnktbWFuLWJsYWNrLnN2ZydcbiAgfVxuXG4gIGdldCBuYW1lICgpIHtcbiAgICBpZiAodGhpcy50b2tlbikgcmV0dXJuIHRoaXMudG9rZW4ubmFtZVxuICAgIHJldHVybiB0aGlzLmFjdG9yLm5hbWVcbiAgfVxuXG4gIGdldCB0YXJnZXROYW1lICgpIHtcbiAgICBpZiAoIXRoaXMudGFyZ2V0KSByZXR1cm4gJ2R1bW15J1xuICAgIHJldHVybiB0aGlzLnRhcmdldC5uYW1lXG4gIH1cblxuICBnZXQgYWN0b3JJbWcgKCkge1xuICAgIGNvbnN0IGltZyA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JJbWdGcm9tS2V5KHRoaXMuYWN0b3JLZXkpXG4gICAgaWYgKGltZykgcmV0dXJuIGltZ1xuICAgIHJldHVybiAnLi4vaWNvbnMvc3ZnL215c3RlcnktbWFuLWJsYWNrLnN2ZydcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGNhbnZhcywgQ2hhdE1lc3NhZ2UsIERpYWxvZywgZm91bmRyeSwgZ2FtZSwgUm9sbCwgdWkgKi9cbmltcG9ydCB7IENvQzdEaWNlIH0gZnJvbSAnLi4vLi4vZGljZS5qcydcbmltcG9ydCB7IEludGVyYWN0aXZlQ2hhdENhcmQgfSBmcm9tICcuLi9pbnRlcmFjdGl2ZS1jaGF0LWNhcmQuanMnXG5pbXBvcnQgeyBjcmVhdGVJbmxpbmVSb2xsIH0gZnJvbSAnLi4vaGVscGVyLmpzJ1xuXG5leHBvcnQgY2xhc3MgRGFtYWdlQ2FyZCBleHRlbmRzIEludGVyYWN0aXZlQ2hhdENhcmQge1xuICAvKipcbiAgICogRXh0ZW5kIGFuZCBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zIHVzZWQgYnkgdGhlIDVlIEFjdG9yIFNoZWV0XG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgZXhjbHVkZTogW1xuICAgICAgICAnX3RhcmdldFRva2VuJyxcbiAgICAgICAgJ190YXJnZXRBY3RvcicsXG4gICAgICAgICdfaHRtbFJvbGwnLFxuICAgICAgICAnX2h0bWxJbmxpbmVSb2xsJ1xuICAgICAgXS5jb25jYXQoc3VwZXIuZGVmYXVsdE9wdGlvbnMuZXhjbHVkZSksXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9jYXJkcy9kYW1hZ2UuaHRtbCdcbiAgICB9KVxuICB9XG5cbiAgLy8gYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgLy8gICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAvLyB9XG5cbiAgYXN5bmMgYXNzaWduT2JqZWN0ICgpIHtcbiAgICBpZiAodGhpcy5kYW1hZ2VSb2xsICYmIHRoaXMuZGFtYWdlUm9sbC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnT2JqZWN0Jykge1xuICAgICAgdGhpcy5kYW1hZ2VSb2xsID0gUm9sbC5mcm9tRGF0YSh0aGlzLmRhbWFnZVJvbGwpXG4gICAgfVxuICB9XG5cbiAgX29uQnV0dG9uIChldmVudCkge1xuICAgIHN1cGVyLl9vbkJ1dHRvbihldmVudClcbiAgfVxuXG4gIGdldCBjcml0aWNhbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jcml0aWNhbFxuICB9XG5cbiAgc2V0IGNyaXRpY2FsICh4KSB7XG4gICAgdGhpcy5fb3B0aW9ucy5jcml0aWNhbCA9IHhcbiAgfVxuXG4gIGdldCBpbXBhbGUgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5faW1wYWxlID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHRoaXMud2VhcG9uLmltcGFsZVxuICAgIHJldHVybiB0aGlzLl9pbXBhbGVcbiAgfVxuXG4gIHNldCBpbXBhbGUgKHgpIHtcbiAgICB0aGlzLl9pbXBhbGUgPSB4XG4gIH1cblxuICBnZXQgaXNEYW1hZ2VGb3JtdWxhICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZGFtYWdlRm9ybXVsYSAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZVxuICAgIGlmICghaXNOYU4oTnVtYmVyKHRoaXMuZGFtYWdlRm9ybXVsYSkpKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gUm9sbC52YWxpZGF0ZSh0aGlzLmRhbWFnZUZvcm11bGEpXG4gIH1cblxuICBnZXQgaXNEYW1hZ2VOdW1iZXIgKCkge1xuICAgIHJldHVybiAhaXNOYU4oTnVtYmVyKHRoaXMuZGFtYWdlRm9ybXVsYSkpXG4gIH1cblxuICBnZXQgaXNBcm1vckZvcnVsYSAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmFybW9yICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlXG4gICAgaWYgKCFpc05hTihOdW1iZXIodGhpcy5hcm1vcikpKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gUm9sbC52YWxpZGF0ZSh0aGlzLmFybW9yKVxuICB9XG5cbiAgZ2V0IHRvdGFsRGFtYWdlU3RyaW5nICgpIHtcbiAgICBsZXQgZGFtYWdlID0gTnVtYmVyKFxuICAgICAgdGhpcy5pc0RhbWFnZU51bWJlciA/IHRoaXMuZGFtYWdlRm9ybXVsYSA6IHRoaXMucm9sbC50b3RhbFxuICAgIClcbiAgICBpZiAoIXRoaXMuaWdub3JlQXJtb3IpIHtcbiAgICAgIGlmIChpc05hTihOdW1iZXIodGhpcy5hcm1vcikpIHx8IE51bWJlcih0aGlzLmFybW9yKSA+IDApIHtcbiAgICAgICAgZGFtYWdlID0gZGFtYWdlIC0gTnVtYmVyKHRoaXMuYXJtb3IpXG4gICAgICB9XG4gICAgICBpZiAoIWlzTmFOKE51bWJlcih0aGlzLmFybW9yKSkpIHtcbiAgICAgICAgaWYgKGRhbWFnZSA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Bcm1vckFic29yYnNEYW1hZ2UnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYW1hZ2VcbiAgfVxuXG4gIGdldCBub0RhbWFnZSAoKSB7XG4gICAgaWYgKHRoaXMucm9sbGVkKSB7XG4gICAgICBjb25zdCBkYW1hZ2UgPSB0aGlzLmlzRGFtYWdlTnVtYmVyID8gdGhpcy5kYW1hZ2VGb3JtdWxhIDogdGhpcy5yb2xsLnRvdGFsXG4gICAgICBpZiAoIXRoaXMuaWdub3JlQXJtb3IpIHtcbiAgICAgICAgaWYgKCFpc05hTihOdW1iZXIodGhpcy5hcm1vcikpKSB7XG4gICAgICAgICAgcmV0dXJuICEhKGRhbWFnZSAtIE51bWJlcih0aGlzLmFybW9yKSA8PSAwKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICEhKGRhbWFnZSA8PSAwKVxuICAgICAgfVxuICAgIH0gZWxzZSByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkICgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmZhc3RGb3J3YXJkICYmICF0aGlzLnJvbGwgJiYgIXRoaXMuaXNEYW1hZ2VOdW1iZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMucm9sbERhbWFnZSh7IHVwZGF0ZTogZmFsc2UgfSlcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy5pc0RhbWFnZU51bWJlciB8fFxuICAgICAgKHRoaXMucm9sbCAmJiB0aGlzLnJvbGwudG90YWwgIT0gbnVsbCkgfHxcbiAgICAgIHRoaXMuaGFyZHJvbGxlZFxuICAgICkge1xuICAgICAgdGhpcy5yb2xsZWQgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9sbGVkID0gZmFsc2VcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5mYXN0Rm9yd2FyZCAmJiAhdGhpcy5kYW1hZ2VJbmZsaWN0ZWQgJiYgIXRoaXMubm9EYW1hZ2UpIHtcbiAgICAgIGF3YWl0IHRoaXMuZGVhbERhbWFnZSh7IHVwZGF0ZTogZmFsc2UgfSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yb2xsZWQgJiYgdGhpcy5yb2xsKSB7XG4gICAgICBpZiAodGhpcy5yb2xsLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdPYmplY3QnKSB7XG4gICAgICAgIHRoaXMucm9sbCA9IFJvbGwuZnJvbURhdGEodGhpcy5yb2xsKVxuICAgICAgfVxuICAgICAgY29uc3QgYSA9IGNyZWF0ZUlubGluZVJvbGwodGhpcy5yb2xsKVxuICAgICAgdGhpcy5faHRtbElubGluZVJvbGwgPSBhLm91dGVySFRNTFxuICAgICAgdGhpcy5faHRtbFJvbGwgPSBhd2FpdCB0aGlzLnJvbGwucmVuZGVyKClcbiAgICB9XG4gICAgYXdhaXQgc3VwZXIudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgYXN5bmMgcm9sbERhbWFnZSAob3B0aW9ucyA9IHsgdXBkYXRlOiB0cnVlIH0pIHtcbiAgICB0aGlzLnJvbGwgPSBhd2FpdCBuZXcgUm9sbCh0aGlzLmRhbWFnZUZvcm11bGEgfHwgJzAnKS5ldmFsdWF0ZSh7XG4gICAgICBhc3luYzogdHJ1ZVxuICAgIH0pXG4gICAgYXdhaXQgQ29DN0RpY2Uuc2hvd1JvbGxEaWNlM2QodGhpcy5yb2xsKVxuICAgIHRoaXMuaGFyZHJvbGxlZCA9IHRydWVcbiAgICBvcHRpb25zLnVwZGF0ZSA9XG4gICAgICB0eXBlb2Ygb3B0aW9ucy51cGRhdGUgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMudXBkYXRlXG4gICAgaWYgKG9wdGlvbnMudXBkYXRlKSB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIGFzeW5jIHJvbGxBcm1vciAob3B0aW9ucyA9IHsgdXBkYXRlOiB0cnVlIH0pIHtcbiAgICBjb25zdCByb2xsID0gYXdhaXQgbmV3IFJvbGwodGhpcy5hcm1vcikuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgIHRoaXMuYXJtb3IgPSByb2xsLnRvdGFsXG4gICAgb3B0aW9ucy51cGRhdGUgPVxuICAgICAgdHlwZW9mIG9wdGlvbnMudXBkYXRlID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLnVwZGF0ZVxuICAgIGlmIChvcHRpb25zLnVwZGF0ZSkgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICBhc3luYyBkZWFsRGFtYWdlVG9TZWxlY3RlZFRhcmdldCAob3B0aW9ucyA9IHsgdXBkYXRlOiB0cnVlIH0pIHtcbiAgICBpZiAodGhpcy5pc0FybW9yRm9ydWxhKSBhd2FpdCB0aGlzLnJvbGxBcm1vcigpXG4gICAgaWYgKGlzTmFOKE51bWJlcih0aGlzLnRvdGFsRGFtYWdlU3RyaW5nKSkpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVycm9yRXZhbHVhdGluZ0RhbWFnZScpKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHRhcmdldHMgPSBbXVxuICAgIGNvbnN0IHRhcmdldE5hbWUgPSBbXVxuICAgIGNvbnN0IHNlbGVjdGVkUGxheWVycyA9IGNhbnZhcy50b2tlbnMuY29udHJvbGxlZC5tYXAodG9rZW4gPT4ge1xuICAgICAgcmV0dXJuIHRva2VuLmFjdG9yXG4gICAgfSlcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc2VsZWN0ZWRQbGF5ZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKHRoaXMuYWN0b3IuaWQgPT09IHNlbGVjdGVkUGxheWVyc1tpbmRleF0uaWQpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIHRhcmdldE5hbWUucHVzaChzZWxlY3RlZFBsYXllcnNbaW5kZXhdLm5hbWUpXG4gICAgICB0YXJnZXRzLnB1c2goc2VsZWN0ZWRQbGF5ZXJzW2luZGV4XSlcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHRpdGxlOiAnICcsXG4gICAgICBjb250ZW50OiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRlYWxEYW1hZ2UnLCB7XG4gICAgICAgIGRhbWFnZTogdGhpcy50b3RhbERhbWFnZVN0cmluZyxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXROYW1lXG4gICAgICB9KSxcbiAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgb25lOiB7XG4gICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWNoZWNrXCI+PC9pPicsXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Qcm9jZWVkJyksXG4gICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlybURhbWFnZSh0YXJnZXRzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHdvOiB7XG4gICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPicsXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DYW5jZWwnKSxcbiAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge31cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6ICd0d28nXG4gICAgfVxuICAgIGlmICh0YXJnZXROYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgIG5ldyBEaWFsb2coZGF0YSkucmVuZGVyKHRydWUpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY29uZmlybURhbWFnZSAodGFyZ2V0cykge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0YXJnZXRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgYXdhaXQgdGFyZ2V0c1tpbmRleF0uZGVhbERhbWFnZShOdW1iZXIodGhpcy50b3RhbERhbWFnZVN0cmluZyksIHtcbiAgICAgICAgaWdub3JlQXJtb3I6IGZhbHNlXG4gICAgICB9KVxuICAgICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKHtcbiAgICAgICAgY29udGVudDogZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5EYW1hZ2VEZWFsVG8nLCB7XG4gICAgICAgICAgbmFtZTogdGFyZ2V0c1tpbmRleF0ubmFtZSxcbiAgICAgICAgICBkYW1hZ2U6IHRoaXMudG90YWxEYW1hZ2VTdHJpbmdcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVhbERhbWFnZSAob3B0aW9ucyA9IHsgdXBkYXRlOiB0cnVlIH0pIHtcbiAgICBpZiAodGhpcy5pc0FybW9yRm9ydWxhKSBhd2FpdCB0aGlzLnJvbGxBcm1vcigpXG4gICAgbGV0IGRhbWFnZSA9IHRoaXMudG90YWxEYW1hZ2VTdHJpbmdcbiAgICBpZiAoaXNOYU4oTnVtYmVyKGRhbWFnZSkpKSB7XG4gICAgICBpZiAoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFybW9yQWJzb3Jic0RhbWFnZScpID09PSBkYW1hZ2UpIHtcbiAgICAgICAgZGFtYWdlID0gMFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignRXJyb3IgZXZhbHVhdGluZyBkYW1hZ2UnKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMudGFyZ2V0QWN0b3IpIHtcbiAgICAgIGF3YWl0IHRoaXMudGFyZ2V0QWN0b3IuZGVhbERhbWFnZShOdW1iZXIoZGFtYWdlKSwge1xuICAgICAgICBpZ25vcmVBcm1vcjogdHJ1ZVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5kYW1hZ2VJbmZsaWN0ZWQgPSB0cnVlXG4gICAgb3B0aW9ucy51cGRhdGUgPVxuICAgICAgdHlwZW9mIG9wdGlvbnMudXBkYXRlID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLnVwZGF0ZVxuICAgIGlmIChvcHRpb25zLnVwZGF0ZSkgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICBnZXQgcmFuZ2UgKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmFuZ2UgfHwgJ25vcm1hbCdcbiAgfVxuXG4gIHNldCByYW5nZSAoeCkge1xuICAgIGNvbnN0IHJhbmdlcyA9IFsnbm9ybWFsJywgJ2xvbmcnLCAnZXh0cmVtZSddXG4gICAgaWYgKCFyYW5nZXMuaW5jbHVlcyh4LnRvTG93ZXJDYXNlKCkpKSByZXR1cm5cbiAgICB0aGlzLl9vcHRpb25zLnJhbmdlID0geFxuICB9XG5cbiAgZ2V0IGRhbWFnZUZvcm11bGEgKCkge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5yYW5nZVxuICAgIGxldCBmb3JtdWxhID0gdGhpcy53ZWFwb24/LnN5c3RlbT8ucmFuZ2VbcmFuZ2VdPy5kYW1hZ2VcbiAgICBsZXQgZGIgPSB0aGlzLmFjdG9yLmRiXG4gICAgZGIgPSAoKGRiID8/ICcnKS50b1N0cmluZygpLnRyaW0oKSA9PT0gJycgPyAwIDogZGIpLnRvU3RyaW5nKCkudHJpbSgpXG5cbiAgICBpZiAoIWRiLnN0YXJ0c1dpdGgoJy0nKSkgZGIgPSAnKycgKyBkYlxuICAgIGlmICh0aGlzLndlYXBvbi5zeXN0ZW0ucHJvcGVydGllcy5hZGRiKSBmb3JtdWxhID0gZm9ybXVsYSArIGRiXG4gICAgaWYgKHRoaXMud2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLmFoZGIpIGZvcm11bGEgPSBmb3JtdWxhICsgJysgZmxvb3IoJyArIGRiICsgJy8yKSdcblxuICAgIGlmIChmb3JtdWxhKSB7XG4gICAgICBjb25zdCBtYXhEYW1hZ2UgPSBuZXcgUm9sbChmb3JtdWxhKS5ldmFsdWF0ZSh7IG1heGltaXplOiB0cnVlIH0pLnRvdGFsXG4gICAgICBsZXQgcm9sbFN0cmluZ1xuICAgICAgaWYgKHRoaXMuY3JpdGljYWwpIHtcbiAgICAgICAgaWYgKHRoaXMuaW1wYWxlKSB7XG4gICAgICAgICAgcm9sbFN0cmluZyA9IGZvcm11bGEgKyAnKycgKyBtYXhEYW1hZ2VcbiAgICAgICAgICByZXR1cm4gcm9sbFN0cmluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtYXhEYW1hZ2VcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZvcm11bGFcbiAgICAgIH1cbiAgICB9IGVsc2UgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IGFybW9yICgpIHtcbiAgICBpZiAodW5kZWZpbmVkICE9PSB0aGlzLl9hcm1vciAmJiB0aGlzLl9hcm1vciAhPT0gJycpIHJldHVybiB0aGlzLl9hcm1vclxuICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0QWN0b3Iuc3lzdGVtLmF0dHJpYnMuYXJtb3IudmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIHNldCBhcm1vciAoeCkge1xuICAgIHRoaXMuX2FybW9yID0geFxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ2hhdE1lc3NhZ2UsIGZvdW5kcnksIGdhbWUgKi9cbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgRGFtYWdlQ2FyZCB9IGZyb20gJy4vZGFtYWdlLmpzJ1xuaW1wb3J0IHsgUm9sbENhcmQgfSBmcm9tICcuL3JvbGwtY2FyZC5qcydcblxuZXhwb3J0IGNsYXNzIE9wcG9zZWRDaGVja0NhcmQgZXh0ZW5kcyBSb2xsQ2FyZCB7XG4gIHN0YXRpYyBhc3luYyBiaW5kTGlzdGVybmVycyAoaHRtbCkge1xuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5yb2xsLWNhcmQub3Bwb3NlZCAudG9nZ2xlLXN3aXRjaCcsXG4gICAgICB0aGlzLl9vblRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgKVxuICAgIC8vIHN1cGVyLmJpbmRMaXN0ZXJuZXJzKCBodG1sKTtcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcucm9sbC1jYXJkLm9wcG9zZWQgYScsXG4gICAgICBPcHBvc2VkQ2hlY2tDYXJkLl9vbkNsaWNrLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLnJvbGwtY2FyZC5vcHBvc2VkIGJ1dHRvbicsXG4gICAgICBPcHBvc2VkQ2hlY2tDYXJkLl9vbkNsaWNrLmJpbmQodGhpcylcbiAgICApXG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRDb25maWcgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRDb25maWcsIHtcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L2NhcmRzL29wcG9zZWQtcm9sbC5odG1sJyxcbiAgICAgIHR5cGU6ICdvcHBvc2VkQ2FyZCdcbiAgICB9KVxuICB9XG5cbiAgZ2V0IGNvbmZpZyAoKSB7XG4gICAgcmV0dXJuIE9wcG9zZWRDaGVja0NhcmQuZGVmYXVsdENvbmZpZ1xuICB9XG5cbiAgZ2V0IGF0dGFja2VyUm9sbCAoKSB7XG4gICAgaWYgKHRoaXMuY29tYmF0KSB7XG4gICAgICBpZiAodGhpcy5yb2xscz8ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGF0dGFja2VyID0gdGhpcy5yb2xscy5maWx0ZXIociA9PiByLmluZGV4ID09PSAwIHx8IHIuYXR0YWNrZXIpXG4gICAgICAgIGlmIChhdHRhY2tlci5sZW5ndGgpIHJldHVybiBhdHRhY2tlclswXVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgZGVmZW5kZXJSb2xsICgpIHtcbiAgICBpZiAodGhpcy5jb21iYXQpIHtcbiAgICAgIGlmICh0aGlzLnJvbGxzPy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGVmZW5kZXIgPSB0aGlzLnJvbGxzLmZpbHRlcihyID0+IHIuaW5kZXggIT09IDAgfHwgIXIuYXR0YWNrZXIpXG4gICAgICAgIGlmIChkZWZlbmRlci5sZW5ndGgpIHJldHVybiBkZWZlbmRlclswXVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgZGVmZW5kZXJJc0RvZGdpbmcgKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuZGVmZW5kZXJSb2xsPy5hY3Rvcj8uZG9kZ2VTa2lsbD8ubmFtZSAmJlxuICAgICAgdGhpcy5kZWZlbmRlclJvbGw/LnNraWxsPy5uYW1lXG4gICAgKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLmRlZmVuZGVyUm9sbC5hY3Rvci5kb2RnZVNraWxsLm5hbWUudG9Mb3dlckNhc2UoKSA9PT1cbiAgICAgICAgdGhpcy5kZWZlbmRlclJvbGwuc2tpbGwubmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IGFkdmFudGFnZUF0dGFja2VyICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2FhID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXMuZGVmZW5kZXJSb2xsKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5kZWZlbmRlcklzRG9kZ2luZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hYVxuICB9XG5cbiAgZ2V0IHdpbm5lclJvbGxzRGFtYWdlICgpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbWJhdCAmJlxuICAgICAgdGhpcy5yb2xscy5sZW5ndGggPj0gMiAmJlxuICAgICAgdGhpcy5oYXNXaW5uZXIgJiZcbiAgICAgIHRoaXMud2lubmVyPy5pdGVtPy50eXBlID09PSAnd2VhcG9uJ1xuICAgICkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzZXQgYWR2YW50YWdlQXR0YWNrZXIgKHgpIHtcbiAgICB0aGlzLl9hYSA9IHRydWVcbiAgICB0aGlzLl9hZCA9IGZhbHNlXG4gIH1cblxuICBnZXQgYWR2YW50YWdlRGVmZW5kZXIgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fYWQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcy5kZWZlbmRlcklzRG9kZ2luZ1xuICAgIHJldHVybiB0aGlzLl9hZFxuICB9XG5cbiAgc2V0IGFkdmFudGFnZURlZmVuZGVyICh4KSB7XG4gICAgdGhpcy5fYWQgPSB0cnVlXG4gICAgdGhpcy5fYWEgPSBmYWxzZVxuICB9XG5cbiAgZ2V0IGlzVGllICgpIHtcbiAgICByZXR1cm4gdGhpcy53aW5uZXJDb3VudCA+IDFcbiAgfVxuXG4gIGdldCBuZWVkc1RpZUJyZWFrZXIgKCkge1xuICAgIGlmICghdGhpcy5jb21iYXQpIHJldHVybiBmYWxzZVxuICAgIGlmIChcbiAgICAgIHRoaXMuYXR0YWNrZXJSb2xsICYmXG4gICAgICB0aGlzLmRlZmVuZGVyUm9sbCAmJlxuICAgICAgdGhpcy5hdHRhY2tlclJvbGwuc3VjY2Vzc0xldmVsID09PSB0aGlzLmRlZmVuZGVyUm9sbC5zdWNjZXNzTGV2ZWxcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IHdpbm5lckNvdW50ICgpIHtcbiAgICBsZXQgY291bnQgPSAwXG4gICAgZm9yIChjb25zdCByIG9mIHRoaXMucm9sbHMpIHtcbiAgICAgIGlmIChyLndpbm5lcikgY291bnQgKz0gMVxuICAgIH1cbiAgICByZXR1cm4gY291bnRcbiAgfVxuXG4gIGdldCBpc0F0dGFja01hbmV1dmVyICgpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbWJhdCAmJlxuICAgICAgdGhpcy5hdHRhY2tlclJvbGwgJiZcbiAgICAgICghdGhpcy5hdHRhY2tlclJvbGw/Lml0ZW0gfHxcbiAgICAgICAgdGhpcy5hdHRhY2tlclJvbGw/Lml0ZW0uc3lzdGVtLnByb3BlcnRpZXM/Lm1udnIpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCByZXN1bHRUZXh0ICgpIHtcbiAgICBpZiAodGhpcy5jb21iYXQgJiYgdGhpcy5hdHRhY2tlclJvbGwgJiYgdGhpcy5kZWZlbmRlclJvbGwpIHtcbiAgICAgIGlmICghdGhpcy5hdHRhY2tlclJvbGwud2lubmVyICYmICF0aGlzLmRlZmVuZGVyUm9sbC53aW5uZXIpIHtcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob1dpbm5lcicpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hdHRhY2tlclJvbGwud2lubmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmF0dGFja2VyUm9sbC5tYW5ldXZlcikge1xuICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1hbmV1dmVyU3VjY2VzcycsIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuYXR0YWNrZXJSb2xsLmFjdG9yLm5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkF0dGFja1N1Y2Nlc3MnLCB7XG4gICAgICAgICAgbmFtZTogdGhpcy5hdHRhY2tlclJvbGwuYWN0b3IubmFtZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGVmZW5kZXJSb2xsLndpbm5lcikge1xuICAgICAgICBpZiAodGhpcy5kZWZlbmRlclJvbGwubWFuZXV2ZXIpIHtcbiAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NYW5ldXZlclN1Y2Nlc3MnLCB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmRlZmVuZGVyUm9sbC5hY3Rvci5uYW1lXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kZWZlbmRlcklzRG9kZ2luZykge1xuICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRvZGdlU3VjY2VzcycsIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZGVmZW5kZXJSb2xsLmFjdG9yLm5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkF0dGFja1N1Y2Nlc3MnLCB7XG4gICAgICAgICAgbmFtZTogdGhpcy5kZWZlbmRlclJvbGwuYWN0b3IubmFtZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBhc3luYyBwcm9jZXNzIChkYXRhKSB7XG4gICAgc3dpdGNoIChkYXRhLmFjdGlvbikge1xuICAgICAgY2FzZSAnbmV3JzpcbiAgICAgICAgaWYgKCF0aGlzLnJvbGxzPy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmNvbWJhdCA9IGRhdGEuY29tYmF0IHx8IHVuZGVmaW5lZFxuICAgICAgICAgIGlmICh0aGlzLmNvbWJhdCkge1xuICAgICAgICAgICAgZGF0YS5yb2xsLmF0dGFja2VyID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkYXRhLnJvbGwuaW5kZXggPSB0aGlzLnJvbGxzLmxlbmd0aFxuICAgICAgICB0aGlzLmFkZFJvbGxEYXRhKGRhdGEpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3JvbGwnOlxuICAgICAgICB0aGlzLmFkZFJvbGxEYXRhKGRhdGEpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3VwZGF0ZVJvbGwnOlxuICAgICAgICB0aGlzLnVwZGF0ZVJvbGwoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICAgIGVsc2UgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCBkYXRhKVxuICB9XG5cbiAgYXN5bmMgcm9sbCAocmFuaykge1xuICAgIGF3YWl0IHRoaXMucm9sbHNbcmFua10uX3BlcmZvcm0oKVxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB0eXBlOiB0aGlzLmNvbmZpZy50eXBlLFxuICAgICAgYWN0aW9uOiAndXBkYXRlUm9sbCcsXG4gICAgICByYW5rLFxuICAgICAgZnJvbUdNOiBnYW1lLnVzZXIuaXNHTVxuICAgIH1cbiAgICBpZiAoIWdhbWUudXNlci5pc0dNKSBkYXRhLnJvbGwgPSB0aGlzLnJvbGxzW3JhbmtdLkpTT05Sb2xsRGF0YVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgX29uQ2xpY2sgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBhY3Rpb24gPSBhLmRhdGFzZXQuYWN0aW9uXG4gICAgY29uc3QgbGkgPSBhLmNsb3Nlc3QoJ2xpLmFjdG9yLXJvbGwnKVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhLmNsb3Nlc3QoJy5jaGF0LW1lc3NhZ2UnKVxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gYS5jbG9zZXN0KCdkaXYucm9sbC1jYXJkJylcbiAgICBjb25zdCBjYXJkID0gYXdhaXQgT3Bwb3NlZENoZWNrQ2FyZC5mcm9tSFRNTENhcmRFbGVtZW50KGNhcmRFbGVtZW50KVxuICAgIGNhcmQubWVzc2FnZUlkID0gbWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZFxuICAgIGNvbnN0IHJhbmsgPSBOdW1iZXIobGk/LmRhdGFzZXQ/LnJhbmspXG5cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAndG9nZ2xlLWNvbWJhdCc6IHtcbiAgICAgICAgY2FyZC5jb21iYXQgPSAhY2FyZC5jb21iYXRcbiAgICAgICAgLy8gaWYoICFjYXJkLmFkdmFudGFnZUF0dGFja2VyICYmICFjYXJkLmFkdmFudGFnZURlZmVuZGVyKSBjYXJkLmFkdmFudGFnZUF0dGFja2VyID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ3JlbW92ZS1yb2xsJzoge1xuICAgICAgICBjYXJkLnJlbW92ZVJvbGwocmFuaylcbiAgICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2Nsb3NlLWNhcmQnOiB7XG4gICAgICAgIGNhcmQuY2xvc2VDYXJkKClcbiAgICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ3JvbGwtY2hlY2snOiB7XG4gICAgICAgIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKClcbiAgICAgICAgaWYgKCFjYXJkLnJvbGxzW3JhbmtdLmFjdG9yS2V5KSB7XG4gICAgICAgICAgY2FyZC5yb2xsc1tyYW5rXS5hY3RvcktleSA9IGAke3NwZWFrZXIuc2NlbmV9LiR7c3BlYWtlci50b2tlbn1gXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY2FyZC5yb2xsKHJhbmspXG4gICAgICAgIGF3YWl0IGNhcmQucHJvY2VzcyhkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyb2xsLWRhbWFnZSc6IHtcbiAgICAgICAgY2FyZC5jbG9zZUNhcmQoKVxuICAgICAgICBhd2FpdCBjYXJkLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgY29uc3QgZGFtYWdlQ2hhdENhcmQgPSBuZXcgRGFtYWdlQ2FyZCh7XG4gICAgICAgICAgY3JpdGljYWw6IGNhcmQud2lubmVyLmlzRXh0cmVtZVN1Y2Nlc3MsXG4gICAgICAgICAgZmFzdEZvcndhcmQ6IGV2ZW50LnNoaWZ0S2V5XG4gICAgICAgIH0pXG4gICAgICAgIGRhbWFnZUNoYXRDYXJkLmFjdG9yS2V5ID0gY2FyZC53aW5uZXIuYWN0b3IuYWN0b3JLZXlcbiAgICAgICAgZGFtYWdlQ2hhdENhcmQudGFyZ2V0S2V5ID0gY2FyZC5sb29zZXIuYWN0b3IuYWN0b3JLZXlcbiAgICAgICAgZGFtYWdlQ2hhdENhcmQuaXRlbUlkID0gY2FyZC53aW5uZXIuaXRlbUlkXG4gICAgICAgIC8vIGlmKCBvcmlnaW5NZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkKSBkYW1hZ2VDaGF0Q2FyZC5tZXNzYWdlSWQgPSBvcmlnaW5NZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkO1xuICAgICAgICBkYW1hZ2VDaGF0Q2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cGRhdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IGEuZGF0YXNldCxcbiAgICAgICAgICBjbGFzc2VzOiBhLmNsYXNzTGlzdCxcbiAgICAgICAgICB0YXJnZXQ6IGFcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBDb0M3Q2hlY2suYWx0ZXIoY2FyZC5yb2xsc1tyYW5rXSwgYWN0aW9uLCBvcHRpb25zKVxuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgIHR5cGU6IHRoaXMuZGVmYXVsdENvbmZpZy50eXBlLFxuICAgICAgICAgIGFjdGlvbjogJ3VwZGF0ZVJvbGwnLFxuICAgICAgICAgIHJhbmssXG4gICAgICAgICAgZnJvbUdNOiBnYW1lLnVzZXIuaXNHTVxuICAgICAgICB9XG4gICAgICAgIGlmICghZ2FtZS51c2VyLmlzR00pIGRhdGEucm9sbCA9IGNhcmQucm9sbHNbcmFua10uSlNPTlJvbGxEYXRhXG4gICAgICAgIGNhcmQucHJvY2VzcyhkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbXB1dGUgKHJhbmsgPSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnJvbGxzID0gdGhpcy5yb2xscy5maWx0ZXIocm9sbCA9PiB7XG4gICAgICByZXR1cm4gdHlwZW9mIHJvbGwuYWN0b3IuYWN0b3JLZXkgIT09ICd1bmRlZmluZWQnIC8vIHJlbW92ZSBhbnkgYWN0b3JzIHRoYXQgbm8gbG9uZ2VyIGV4aXN0XG4gICAgfSlcblxuICAgIGlmICghcmFuaykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJvbGxzW2ldLm1hbmV1dmVyXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLmNvbWJhdCAmJlxuICAgICAgICAgICghdGhpcy5yb2xsc1tpXS5pdGVtIHx8XG4gICAgICAgICAgICB0aGlzLnJvbGxzW2ldLml0ZW0uc3lzdGVtLnByb3BlcnRpZXM/Lm1udnIpICYmXG4gICAgICAgICAgKCh0aGlzLnJvbGxzW2ldPy5hY3Rvcj8uZG9kZ2VTa2lsbD8ubmFtZSAmJlxuICAgICAgICAgICAgdGhpcy5yb2xsc1tpXT8uc2tpbGw/Lm5hbWUgJiZcbiAgICAgICAgICAgIHRoaXMucm9sbHNbaV0uYWN0b3IuZG9kZ2VTa2lsbC5uYW1lLnRvTG93ZXJDYXNlKCkgIT09XG4gICAgICAgICAgICAgIHRoaXMucm9sbHNbaV0uc2tpbGwubmFtZS50b0xvd2VyQ2FzZSgpKSB8fFxuICAgICAgICAgICAgIXRoaXMucm9sbHNbaV0/LmFjdG9yPy5kb2RnZVNraWxsPy5uYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnJvbGxzW2ldLm1hbmV1dmVyID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJvbGxzW2ldLnJvbGxlZCkge1xuICAgICAgICAgIHRoaXMucm9sbHNbaV0uX2h0bWxSb2xsID0gYXdhaXQgdGhpcy5yb2xsc1tpXS5nZXRIdG1sUm9sbCh7XG4gICAgICAgICAgICBoaWRlRGljZVJlc3VsdDogdHJ1ZVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMucm9sbHNbcmFua10ucm9sbGVkKSB7XG4gICAgICAgIHRoaXMucm9sbHNbcmFua10uX2h0bWxSb2xsID0gYXdhaXQgdGhpcy5yb2xsc1tyYW5rXS5nZXRIdG1sUm9sbCh7XG4gICAgICAgICAgaGlkZURpY2VSZXN1bHQ6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb21iYXQpIHtcbiAgICAgIC8vIFNvcnQgY29tYmF0IHJvbGxzIGJ5IGluZGV4LlxuICAgICAgdGhpcy5yb2xscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGlmIChhLmluZGV4ID4gYi5pbmRleCkgcmV0dXJuIDFcbiAgICAgICAgaWYgKGEuaW5kZXggPCBiLmluZGV4KSByZXR1cm4gLTFcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH0pXG5cbiAgICAgIC8vIENvbWJhdCByb2xsIGluY2x1ZGVzIG9ubHkgMiBwZXJzb25zLCByZW1vdmUgdGhlIHJlc3QuXG4gICAgICBpZiAodGhpcy5yb2xscy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMucm9sbHMgPSBbdGhpcy5yb2xsc1swXSwgdGhpcy5yb2xsc1sxXV1cbiAgICAgICAgZm9yIChjb25zdCByIG9mIHRoaXMucm9sbHMpIHtcbiAgICAgICAgICBkZWxldGUgci53aW5uZXJcbiAgICAgICAgICBkZWxldGUgci50aWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBGaXJzdCBwZXJzb24gYWRkZWQgaXMgdGhlIGF0dGFja2VyLlxuICAgICAgaWYgKHRoaXMucm9sbHNbMF0pIHRoaXMucm9sbHNbMF0uYXR0YWNrZXIgPSB0cnVlXG5cbiAgICAgIGlmICh0aGlzLnJvbGxzWzBdPy5yb2xsZWQgJiYgdGhpcy5yb2xsc1sxXT8ucm9sbGVkKSB7XG4gICAgICAgIGlmICh0aGlzLnJvbGxzWzBdLnBhc3NlZCB8fCB0aGlzLnJvbGxzWzFdLnBhc3NlZCkge1xuICAgICAgICAgIGlmICh0aGlzLnJvbGxzWzBdLnN1Y2Nlc3NMZXZlbCA+IHRoaXMucm9sbHNbMV0uc3VjY2Vzc0xldmVsKSB7XG4gICAgICAgICAgICB0aGlzLnJvbGxzWzBdLndpbm5lciA9IHRydWVcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucm9sbHNbMV0uc3VjY2Vzc0xldmVsID4gdGhpcy5yb2xsc1swXS5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgICAgICAgIHRoaXMucm9sbHNbMV0ud2lubmVyID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hZHZhbnRhZ2VBdHRhY2tlcikgdGhpcy5yb2xsc1swXS53aW5uZXIgPSB0cnVlXG4gICAgICAgICAgICBlbHNlIHRoaXMucm9sbHNbMV0ud2lubmVyID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvbGxzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgaWYgKGEucm9sbGVkICYmICFiLnJvbGxlZCkgcmV0dXJuIC0xXG4gICAgICAgIGlmICghYS5yb2xsZWQgJiYgYi5yb2xsZWQpIHJldHVybiAxXG4gICAgICAgIGlmICghYS5yb2xsZWQgJiYgIWIucm9sbGVkKSByZXR1cm4gMFxuICAgICAgICBpZiAoYS5zdWNjZXNzTGV2ZWwgPiBiLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEuc3VjY2Vzc0xldmVsIDwgYi5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgICAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZVxuICAgICAgICAgIHJldHVybiAxXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ29wcG9zZWRSb2xsVGllQnJlYWtlcicpKSB7XG4gICAgICAgICAgaWYgKGEubW9kaWZpZWRSZXN1bHQgPiBiLm1vZGlmaWVkUmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhLm1vZGlmaWVkUmVzdWx0IDwgYi5tb2RpZmllZFJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlZCA9IHRydWVcbiAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhLnJhd1ZhbHVlID4gYi5yYXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlZCA9IHRydWVcbiAgICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYS5yYXdWYWx1ZSA8IGIucmF3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMFxuICAgICAgfSlcblxuICAgICAgdGhpcy53aW5Db3VudCA9IDBcbiAgICAgIGlmICh0aGlzLnJvbGxzWzBdICYmIHRoaXMucm9sbHNbMF0ucm9sbGVkICYmICF0aGlzLnJvbGxzWzBdLmZhaWxlZCkge1xuICAgICAgICB0aGlzLndpbkNvdW50ID0gMVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMucm9sbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnJvbGxzW2ldICYmXG4gICAgICAgICAgICB0aGlzLnJvbGxzW2ldLnJvbGxlZCAmJlxuICAgICAgICAgICAgdGhpcy5yb2xsc1swXS5zdWNjZXNzTGV2ZWwgPT09IHRoaXMucm9sbHNbaV0uc3VjY2Vzc0xldmVsICYmXG4gICAgICAgICAgICAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb3Bwb3NlZFJvbGxUaWVCcmVha2VyJylcbiAgICAgICAgICAgICAgPyB0aGlzLnJvbGxzWzBdLm1vZGlmaWVkUmVzdWx0ID09PSB0aGlzLnJvbGxzW2ldLm1vZGlmaWVkUmVzdWx0XG4gICAgICAgICAgICAgIDogdGhpcy5yb2xsc1swXS5yYXdWYWx1ZSA9PT0gdGhpcy5yb2xsc1tpXS5yYXdWYWx1ZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMud2luQ291bnQgPSB0aGlzLndpbkNvdW50ICsgMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm9sbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5yb2xsc1tpXS53aW5uZXIgPSBpIDwgdGhpcy53aW5Db3VudFxuICAgICAgICB0aGlzLnJvbGxzW2ldLnRpZSA9IHRoaXMucm9sbHNbaV0ud2lubmVyICYmIHRoaXMud2luQ291bnQgPiAxXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xvc2VDYXJkICgpIHtcbiAgICB0aGlzLmNsb3NlZCA9IHRydWVcbiAgfVxufVxuIiwiLyogZ2xvYmFsIERpYWxvZywgRm9ybURhdGEsIGdhbWUsIHJlbmRlclRlbXBsYXRlICovXG5cbmV4cG9ydCBjbGFzcyBTYW5EYXRhRGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGh0bWwuZmluZCgnOmNoZWNrYm94JykuY2xpY2soKCkgPT4gdGhpcy5fdG9nZ2xlSW5wdXQoaHRtbCkpXG4gIH1cblxuICBfdG9nZ2xlSW5wdXQgKGh0bWwpIHtcbiAgICBodG1sLmZpbmQoJypbbmFtZT1cImN1c3RvbW5hbWVcIl0nKS50b2dnbGUoKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKFxuICAgICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9zYW5kYXRhLmh0bWwnLFxuICAgICAgb3B0aW9uc1xuICAgIClcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGxldCBmb3JtRGF0YSA9IG51bGxcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBTYW5EYXRhRGlhbG9nKHtcbiAgICAgICAgdGl0bGU6IG9wdGlvbnMuZGlzcGxheU5hbWVcbiAgICAgICAgICA/IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU2FuRGF0YVNlbGVjdGlvbldpbmRvd05hbWVkJywge1xuICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5kaXNwbGF5TmFtZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2FuRGF0YVNlbGVjdGlvbldpbmRvdycpLCAvLyBUT0RPOiBSZW1vdmUgU2FuRGF0YVNlbGVjdGlvbldpbmRvd05hbWVkXG4gICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICBWYWxpZGF0ZToge1xuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5WYWxpZGF0ZScpLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGh0bWwgPT4ge1xuICAgICAgICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJyNzYW4tZGF0YS1mb3JtJykpXG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGZvcm1EYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDogJ1ZhbGlkYXRlJyxcbiAgICAgICAgY2xvc2U6ICgpID0+IHt9XG4gICAgICB9KVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBnYW1lLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29udGVudExpbmtEaWFsb2cgfSBmcm9tICcuL2NvYzctY29udGVudC1saW5rLWRpYWxvZy5qcydcbmltcG9ydCB7IGlzQ3RybEtleSB9IGZyb20gJy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgUm9sbERpYWxvZyB9IGZyb20gJy4vcm9sbC1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb21iaW5lZENoZWNrQ2FyZCB9IGZyb20gJy4uL2NoYXQvY2FyZHMvY29tYmluZWQtcm9sbC5qcydcbmltcG9ydCB7IE9wcG9zZWRDaGVja0NhcmQgfSBmcm9tICcuLi9jaGF0L2NhcmRzL29wcG9zZWQtcm9sbC5qcydcbmltcG9ydCB7IFNhbkNoZWNrQ2FyZCB9IGZyb20gJy4uL2NoYXQvY2FyZHMvc2FuLWNoZWNrLmpzJ1xuaW1wb3J0IHsgU2FuRGF0YURpYWxvZyB9IGZyb20gJy4vc2FuZGF0YS1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb0M3TGluayB9IGZyb20gJy4vY29jNy1saW5rLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdDaGF0TWVzc2FnZSB7XG4gIHN0YXRpYyBnZXQgUk9MTF9UWVBFX0FUVFJJQlVURSAoKSB7XG4gICAgcmV0dXJuICdSL0FUJ1xuICB9XG5cbiAgc3RhdGljIGdldCBST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUMgKCkge1xuICAgIHJldHVybiAnUi9DSCdcbiAgfVxuXG4gIHN0YXRpYyBnZXQgUk9MTF9UWVBFX0NPTUJBVCAoKSB7XG4gICAgcmV0dXJuICdSL0NPJ1xuICB9XG5cbiAgc3RhdGljIGdldCBST0xMX1RZUEVfU0tJTEwgKCkge1xuICAgIHJldHVybiAnUi9TSydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgUk9MTF9UWVBFX0VOQ09VTlRFUiAoKSB7XG4gICAgcmV0dXJuICdSL0VDJ1xuICB9XG5cbiAgc3RhdGljIGdldCBDQVJEX1RZUEVfQ09NQklORUQgKCkge1xuICAgIHJldHVybiAnQy9DTydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ0FSRF9UWVBFX0dST1VQICgpIHtcbiAgICByZXR1cm4gJ0MvR1InXG4gIH1cblxuICBzdGF0aWMgZ2V0IENBUkRfVFlQRV9OT1JNQUwgKCkge1xuICAgIHJldHVybiAnQy9OTydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ0FSRF9UWVBFX09QUE9TRUQgKCkge1xuICAgIHJldHVybiAnQy9PUCdcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ0FSRF9UWVBFX1NBTl9DSEVDSyAoKSB7XG4gICAgcmV0dXJuICdDL1NDJ1xuICB9XG5cbiAgc3RhdGljIGdldCBDQVJEX1RZUEVfTk9ORSAoKSB7XG4gICAgcmV0dXJuICdDL05PJ1xuICB9XG5cbiAgLy8gc3RhdGljIGdldCBST0xMX1RPX0NIQVQgKCkge1xuICAvLyAgIHJldHVybiAnUi9DSCdcbiAgLy8gfVxuXG4gIC8vIHN0YXRpYyBnZXQgUk9MTF9UT19DTElQQk9BUkQgKCkge1xuICAvLyAgIHJldHVybiAnUi9DTCdcbiAgLy8gfVxuXG4gIHN0YXRpYyBjYXJkVHlwZXMgKGNvbmZpZykge1xuICAgIGlmIChjb25maWcucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ09NQkFUKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBjb25zdCBzZWxlY3QgPSB7XG4gICAgICBbQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUxdOiAnQ29DNy5SZWd1bGFyUm9sbENhcmQnLFxuICAgICAgW0NvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfQ09NQklORURdOiAnQ29DNy5Db21iaW5lZFJvbGxDYXJkJyxcbiAgICAgIFtDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX09QUE9TRURdOiAnQ29DNy5PcHBvc2VkUm9sbENhcmQnXG4gICAgICAvLyBbQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9HUk9VUF06ICdDb0M3Lkdyb3VwUm9sbENhcmQnIC0gTllJXG4gICAgfVxuICAgIGlmIChcbiAgICAgIGNvbmZpZy5yb2xsVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEUgJiZcbiAgICAgIGNvbmZpZy5hdHRyaWJ1dGUgPT09ICdzYW4nXG4gICAgKSB7XG4gICAgICBzZWxlY3RbQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9TQU5fQ0hFQ0tdID0gJ0NvQzcuU2FuaXR5TG9zc0VuY291bnRlcidcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdFxuICB9XG5cbiAgc3RhdGljIG5vcm1hbGl6ZVJlcXVlc3QgKG9wdGlvbnMpIHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygb3B0aW9ucy5ldmVudCA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBvcHRpb25zLmNhcmRUeXBlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIG9wdGlvbnMuYWN0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAodHlwZW9mIG9wdGlvbnMuc2tpbGxJZCAhPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgdHlwZW9mIG9wdGlvbnMuc2tpbGxOYW1lICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGUgIT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlcmlzdGljICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBvcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0VOQ09VTlRFUilcbiAgICApIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5za2lsbElkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAob3B0aW9ucy5hY3Rvci5pdGVtcy5nZXQob3B0aW9ucy5za2lsbElkKSkge1xuICAgICAgICAgIG9wdGlvbnMucm9sbFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuc2tpbGxOYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBza2lsbElkcyA9IG9wdGlvbnMuYWN0b3IuZ2V0U2tpbGxzQnlOYW1lKG9wdGlvbnMuc2tpbGxOYW1lKVxuICAgICAgICBpZiAoc2tpbGxJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIG9wdGlvbnMuc2tpbGxJZCA9IHNraWxsSWRzWzBdLmlkXG4gICAgICAgICAgb3B0aW9ucy5yb2xsVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTExcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBbJ2xjaycsICdzYW4nXS5pbmNsdWRlcyhvcHRpb25zLmF0dHJpYnV0ZSlcbiAgICAgICkge1xuICAgICAgICBvcHRpb25zLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEVcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlcmlzdGljICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzW1xuICAgICAgICAgIG9wdGlvbnMuY2hhcmFjdGVyaXN0aWNcbiAgICAgICAgXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICkge1xuICAgICAgICBvcHRpb25zLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DSEFSQUNURVJJU1RJQ1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0eXBlb2Ygb3B0aW9ucy5ldmVudCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgIHR5cGVvZiBvcHRpb25zLmNhcmRUeXBlID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgdHlwZW9mIG9wdGlvbnMucm9sbFR5cGUgPT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yTm90Rm91bmQnLCB7XG4gICAgICAgICAgdmFsdWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Sb2xsJylcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAoXG4gICAgICAhW1xuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX0NPTUJJTkVELFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX0dST1VQLFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PUk1BTCxcbiAgICAgICAgQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9PUFBPU0VELFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX1NBTl9DSEVDS1xuICAgICAgXS5pbmNsdWRlcyhvcHRpb25zLmNhcmRUeXBlKVxuICAgICkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JJbnZhbGlkQ2FyZFR5cGUnKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChcbiAgICAgICFbXG4gICAgICAgIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTEwsXG4gICAgICAgIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUMsXG4gICAgICAgIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQVRUUklCVVRFLFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0VOQ09VTlRFUlxuICAgICAgXS5pbmNsdWRlcyhvcHRpb25zLnJvbGxUeXBlKVxuICAgICkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JJbnZhbGlkUm9sbFR5cGUnKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2FyZFR5cGU6IG9wdGlvbnMuY2FyZFR5cGUsXG4gICAgICAgIHNoaWZ0S2V5OiBvcHRpb25zLmZhc3RGb3J3YXJkID8/IG9wdGlvbnMuZXZlbnQ/LnNoaWZ0S2V5ID8/IG9wdGlvbnMuZmFzdEZvcndhcmQgPz8gZmFsc2UsXG4gICAgICAgIGFsdEtleTogb3B0aW9ucy5ldmVudD8uYWx0S2V5ID8/IGZhbHNlLFxuICAgICAgICBpc0N0cmxLZXk6IGlzQ3RybEtleShvcHRpb25zLmV2ZW50ID8/IGZhbHNlKSxcbiAgICAgICAgY3JlYXRlRW5jb3VudGVyOiBvcHRpb25zLmNyZWF0ZUVuY291bnRlciA/PyBmYWxzZSxcbiAgICAgICAgb3BlbkxpbmtUb29sOiBvcHRpb25zLm9wZW5MaW5rVG9vbCA/PyBmYWxzZSxcbiAgICAgICAgc2VuZFRvQ2hhdDogb3B0aW9ucy5zZW5kVG9DaGF0ID8/IGZhbHNlLFxuICAgICAgICBzZW5kVG9DbGlwYm9hcmQ6IG9wdGlvbnMuc2VuZFRvQ2xpcGJvYXJkID8/IGZhbHNlLFxuICAgICAgICBpc0NvbWJhdDpcbiAgICAgICAgICBvcHRpb25zLmV2ZW50Py5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdD8uY29udGFpbnMoJ2NvbWJhdCcpID8/IGZhbHNlLFxuICAgICAgICBwcmV2ZW50U3RhbmRieTogb3B0aW9ucy5wcmV2ZW50U3RhbmRieSA/PyBmYWxzZSxcbiAgICAgICAgYm9udXNEaWNlOiAwXG4gICAgICB9LFxuICAgICAgZGlhbG9nT3B0aW9uczoge1xuICAgICAgICByb2xsVHlwZTogb3B0aW9ucy5yb2xsVHlwZSxcbiAgICAgICAgY2FyZFR5cGU6IG9wdGlvbnMuY2FyZFR5cGUsXG4gICAgICAgIGF0dHJpYnV0ZTogJycsXG4gICAgICAgIGNoYXRNZXNzYWdlOiBvcHRpb25zLmNoYXRNZXNzYWdlID8/IHRydWUsXG4gICAgICAgIGZvcmNlZENhcmRUeXBlOiBvcHRpb25zLmZvcmNlZENhcmRUeXBlID8/IGZhbHNlLFxuICAgICAgICBoaWRlRGlmZmljdWx0eTogb3B0aW9ucy5oaWRlRGlmZmljdWx0eSA/PyBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlKSB7XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTEw6XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUM6XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQVRUUklCVVRFOlxuICAgICAgY2FzZSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0VOQ09VTlRFUjpcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuc2tpbGxJZCA9XG4gICAgICAgICAgb3B0aW9ucy5za2lsbElkID8/XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpPy5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuaXRlbUlkID1cbiAgICAgICAgICBvcHRpb25zLmV2ZW50Py5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJyk/LmRhdGFzZXQuaXRlbUlkXG4gICAgICAgIGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljID1cbiAgICAgICAgICBvcHRpb25zLmNoYXJhY3RlcmlzdGljID8/XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQuY2hhcmFjdGVyaXN0aWNcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuYXR0cmlidXRlID1cbiAgICAgICAgICBvcHRpb25zLmF0dHJpYnV0ZSA/P1xuICAgICAgICAgIG9wdGlvbnMuZXZlbnQ/LmN1cnJlbnRUYXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0LmF0dHJpYlxuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5hdHRyaWJ1dGUgPSBjb25maWcub3B0aW9ucy5hdHRyaWJ1dGVcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuYWN0b3JJZCA9XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC5hY3RvcklkID8/XG4gICAgICAgICAgb3B0aW9ucy5hY3Rvci5pZFxuICAgICAgICBjb25maWcub3B0aW9ucy50b2tlbktleSA9XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC50b2tlbklkID8/XG4gICAgICAgICAgb3B0aW9ucy5hY3Rvci50b2tlbktleVxuICAgICAgICBjb25maWcub3B0aW9ucy53ZWFwb25BbHRTa2lsbCA9XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FsdGVybmF0aXYtc2tpbGwnKVxuICAgICAgICBjb25maWcub3B0aW9ucy5hY3RvciA9IG9wdGlvbnMuYWN0b3JcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMICYmXG4gICAgICAgICAgY29uZmlnLm9wdGlvbnMuaXNDb21iYXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IGNvbmZpZy5vcHRpb25zLmFjdG9yLml0ZW1zLmdldChjb25maWcub3B0aW9ucy5pdGVtSWQpXG4gICAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3dlYXBvbicpIHtcbiAgICAgICAgICAgIGNvbmZpZy5vcHRpb25zLndlYXBvbk5hbWUgPSBpdGVtLm5hbWVcbiAgICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DT01CQVRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBjb25maWcub3B0aW9ucy5hY3RvcklkID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICh0eXBlb2YgY29uZmlnLm9wdGlvbnMudG9rZW5LZXkgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uZmlnLm9wdGlvbnMuYWN0b3IgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICApIHtcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgICAgICB2YWx1ZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVycm9yQWN0b3InKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMICYmXG4gICAgICAgICAgdHlwZW9mIGNvbmZpZy5vcHRpb25zLnNraWxsSWQgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICkge1xuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9ySW52YWxpZEZvcm11bGEnLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuU2tpbGwnKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09XG4gICAgICAgICAgQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DSEFSQUNURVJJU1RJQ1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ2hhcmFjdGVyaXN0aWMnKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICFnYW1lLnVzZXIuaXNHTSAmJlxuICAgICAgICAgICAgIWNvbmZpZy5vcHRpb25zLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3NbXG4gICAgICAgICAgICAgIGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljXG4gICAgICAgICAgICBdPy52YWx1ZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0FUVFJJQlVURVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5vcHRpb25zLmF0dHJpYnV0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JJbnZhbGlkRm9ybXVsYScsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkF0dHJpYnV0ZScpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgIWdhbWUudXNlci5pc0dNICYmXG4gICAgICAgICAgICAhY29uZmlnLm9wdGlvbnMuYWN0b3Iuc3lzdGVtLmF0dHJpYnNbY29uZmlnLm9wdGlvbnMuYXR0cmlidXRlXVxuICAgICAgICAgICAgICA/LnZhbHVlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ09NQkFUXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLm9wdGlvbnMuaXRlbUlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuV2VhcG9uJylcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLm9wdGlvbnMuYWx0S2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLm9wdGlvbnMuaGFzUGxheWVyT3duZXIgPVxuICAgICAgICAgIGNvbmZpZy5vcHRpb25zLmFjdG9yLmhhc1BsYXllck93bmVyID8/IGZhbHNlXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSA9PT1cbiAgICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0NIQVJBQ1RFUklTVElDXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLmRpc2FibGVGbGF0VGhyZXNob2xkTW9kaWZpZXIgPVxuICAgICAgICAgICAgY29uZmlnLm9wdGlvbnMuaXNDdHJsS2V5XG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuZGlzYWJsZUZsYXREaWNlTW9kaWZpZXIgPVxuICAgICAgICAgICAgY29uZmlnLm9wdGlvbnMuaXNDdHJsS2V5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuZGlzYWJsZUZsYXRUaHJlc2hvbGRNb2RpZmllciA9IGZhbHNlXG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuZGlzYWJsZUZsYXREaWNlTW9kaWZpZXIgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLm1vZGlmaWVyID0gMFxuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5kaWZmaWN1bHR5ID1cbiAgICAgICAgICBvcHRpb25zLmRpZmZpY3VsdHkgPz9cbiAgICAgICAgICBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsW1xuICAgICAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGVmYXVsdENoZWNrRGlmZmljdWx0eScpXG4gICAgICAgICAgXVxuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5mbGF0RGljZU1vZGlmaWVyID0gMFxuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSAwXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB0cmlnZ2VyIChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBjb25maWcgPSBDb0M3Q2hhdE1lc3NhZ2Uubm9ybWFsaXplUmVxdWVzdChvcHRpb25zKVxuICAgIGlmIChjb25maWcgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKFxuICAgICAgKGNvbmZpZy5vcHRpb25zLmlzQ3RybEtleSkgJiZcbiAgICAgIGdhbWUudXNlci5pc0dNICYmXG4gICAgICBbXG4gICAgICAgIENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9STUFMLFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX1NBTl9DSEVDS1xuICAgICAgXS5pbmNsdWRlcyhjb25maWcuZGlhbG9nT3B0aW9ucy5jYXJkVHlwZSlcbiAgICApIHtcbiAgICAgIENvQzdDaGF0TWVzc2FnZS5jcmVhdGVMaW5rKGNvbmZpZylcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKGNvbmZpZy5vcHRpb25zLnNlbmRUb0NoYXQgfHwgY29uZmlnLm9wdGlvbnMuc2VuZFRvQ2xpcGJvYXJkIHx8IGNvbmZpZy5vcHRpb25zLm9wZW5MaW5rVG9vbCB8fCBjb25maWcub3B0aW9ucy5jcmVhdGVFbmNvdW50ZXIpICYmXG4gICAgICBnYW1lLnVzZXIuaXNHTSAmJlxuICAgICAgQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT05FID09PSBjb25maWcuZGlhbG9nT3B0aW9ucy5jYXJkVHlwZVxuICAgICkge1xuICAgICAgQ29DN0NoYXRNZXNzYWdlLmNyZWF0ZUxpbmsoY29uZmlnKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5vcHRpb25zLmFjdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5vcHRpb25zLmF0dHJpYnV0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBib251c0RpY2UgPSBjb25maWcub3B0aW9ucy5hY3Rvci5zeXN0ZW0/LmF0dHJpYnM/Lltjb25maWcub3B0aW9ucy5hdHRyaWJ1dGVdPy5ib251c0RpY2VcbiAgICAgICAgICBpZiAoYm9udXNEaWNlKSB7XG4gICAgICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5tb2RpZmllciA9IGJvbnVzRGljZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnLm9wdGlvbnMuY2hhcmFjdGVyaXN0aWMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgYm9udXNEaWNlID0gY29uZmlnLm9wdGlvbnMuYWN0b3Iuc3lzdGVtPy5jaGFyYWN0ZXJpc3RpY3M/Lltjb25maWcub3B0aW9ucy5jaGFyYWN0ZXJpc3RpY10/LmJvbnVzRGljZVxuICAgICAgICAgIGlmIChib251c0RpY2UpIHtcbiAgICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLm1vZGlmaWVyID0gYm9udXNEaWNlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcub3B0aW9ucy5pdGVtSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgaXRlbU1vZGlmaWVycyA9IE9iamVjdC52YWx1ZXMoY29uZmlnLm9wdGlvbnMuYWN0b3Iuc3lzdGVtLnNraWxscykuZmluZChrID0+IGsuZm91bmRyeUlEID09PSBjb25maWcub3B0aW9ucy5pdGVtSWQpXG4gICAgICAgICAgaWYgKHR5cGVvZiBpdGVtTW9kaWZpZXJzLmJvbnVzRGljZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLm1vZGlmaWVyID0gaXRlbU1vZGlmaWVycy5ib251c0RpY2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMubW9kaWZpZXIgPSBNYXRoLm1pbihNYXRoLm1heChjb25maWcuZGlhbG9nT3B0aW9ucy5tb2RpZmllciwgLTIpLCAyKVxuICAgICAgfVxuICAgICAgaWYgKCFjb25maWcub3B0aW9ucy5zaGlmdEtleSkge1xuICAgICAgICBhd2FpdCBDb0M3Q2hhdE1lc3NhZ2UuY3JlYXRlUm9sbChjb25maWcpXG4gICAgICB9XG4gICAgICByZXR1cm4gQ29DN0NoYXRNZXNzYWdlLnJ1blJvbGwoY29uZmlnKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVMaW5rIChjb25maWcpIHtcbiAgICBzd2l0Y2ggKGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlKSB7XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQVRUUklCVVRFOlxuICAgICAgY2FzZSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0NIQVJBQ1RFUklTVElDOlxuICAgICAgY2FzZSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0NPTUJBVDpcbiAgICAgIGNhc2UgQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9TS0lMTDpcbiAgICAgIGNhc2UgQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9FTkNPVU5URVI6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBsaW5rRGF0YSA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdDb0M3TGluaydcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMKSB7XG4gICAgICAgICAgICBsaW5rRGF0YS5jaGVjayA9IENvQzdMaW5rLkNIRUNLX1RZUEUuQ0hFQ0tcbiAgICAgICAgICAgIGxpbmtEYXRhLmxpbmtUeXBlID0gQ29DN0xpbmsuTElOS19UWVBFLlNLSUxMXG4gICAgICAgICAgICBsaW5rRGF0YS5uYW1lID0gY29uZmlnLm9wdGlvbnMuYWN0b3IuaXRlbXMuZ2V0KGNvbmZpZy5vcHRpb25zLnNraWxsSWQpPy5zaG9ydE5hbWVcbiAgICAgICAgICAgIGlmICghbGlua0RhdGEubmFtZSkgcmV0dXJuXG4gICAgICAgICAgfSBlbHNlIGlmIChjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DSEFSQUNURVJJU1RJQykge1xuICAgICAgICAgICAgbGlua0RhdGEuY2hlY2sgPSBDb0M3TGluay5DSEVDS19UWVBFLkNIRUNLXG4gICAgICAgICAgICBsaW5rRGF0YS5saW5rVHlwZSA9IENvQzdMaW5rLkxJTktfVFlQRS5DSEFSQUNURVJJU1RJQ1xuICAgICAgICAgICAgbGlua0RhdGEubmFtZSA9IGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljXG4gICAgICAgICAgfSBlbHNlIGlmIChjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEUpIHtcbiAgICAgICAgICAgIGlmICgoY29uZmlnLm9wdGlvbnMuYWx0S2V5IHx8IGNvbmZpZy5vcHRpb25zLmNyZWF0ZUVuY291bnRlcikgJiYgY29uZmlnLm9wdGlvbnMuYXR0cmlidXRlID09PSAnc2FuJykge1xuICAgICAgICAgICAgICBsaW5rRGF0YS5jaGVjayA9IENvQzdMaW5rLkNIRUNLX1RZUEUuU0FOTE9TU1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGlua0RhdGEuY2hlY2sgPSBDb0M3TGluay5DSEVDS19UWVBFLkNIRUNLXG4gICAgICAgICAgICAgIGxpbmtEYXRhLmxpbmtUeXBlID0gQ29DN0xpbmsuTElOS19UWVBFLkFUVFJJQlVURVxuICAgICAgICAgICAgICBsaW5rRGF0YS5uYW1lID0gY29uZmlnLm9wdGlvbnMuYXR0cmlidXRlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DT01CQVQpIHtcbiAgICAgICAgICAgIGxpbmtEYXRhLmNoZWNrID0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5JVEVNXG4gICAgICAgICAgICBsaW5rRGF0YS5uYW1lID0gY29uZmlnLm9wdGlvbnMud2VhcG9uTmFtZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfRU5DT1VOVEVSKSB7XG4gICAgICAgICAgICBsaW5rRGF0YS5jaGVjayA9IENvQzdMaW5rLkNIRUNLX1RZUEUuU0FOTE9TU1xuICAgICAgICAgICAgbGlua0RhdGEuc2FuTWluID0gY29uZmlnLm9wdGlvbnMuYWN0b3I/LnN5c3RlbT8uc3BlY2lhbD8uc2FuTG9zcz8uY2hlY2tQYXNzZWRcbiAgICAgICAgICAgIGxpbmtEYXRhLnNhbk1heCA9IGNvbmZpZy5vcHRpb25zLmFjdG9yPy5zeXN0ZW0/LnNwZWNpYWw/LnNhbkxvc3M/LmNoZWNrRmFpbGxlZFxuICAgICAgICAgICAgbGlua0RhdGEuc2FuUmVhc29uID0gY29uZmlnLm9wdGlvbnMuYWN0b3Iuc3lzdGVtLmluZm9zLnR5cGU/Lmxlbmd0aFxuICAgICAgICAgICAgICA/IGNvbmZpZy5vcHRpb25zLmFjdG9yLnN5c3RlbS5pbmZvcy50eXBlXG4gICAgICAgICAgICAgIDogY29uZmlnLm9wdGlvbnMuYWN0b3IubmFtZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJykgPT09ICdibGluZHJvbGwnKSB7XG4gICAgICAgICAgICBsaW5rRGF0YS5ibGluZCA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbmZpZy5vcHRpb25zLnNlbmRUb0NoYXQpIHtcbiAgICAgICAgICAgIENvQzdMaW5rLnRvQ2hhdE1lc3NhZ2UobGlua0RhdGEpXG4gICAgICAgICAgfSBlbHNlIGlmIChjb25maWcub3B0aW9ucy5zZW5kVG9DbGlwYm9hcmQpIHtcbiAgICAgICAgICAgIENvQzdMaW5rLmZyb21Ecm9wRGF0YShsaW5rRGF0YSkudGhlbihsaW5rID0+IHtcbiAgICAgICAgICAgICAgQ29DN1V0aWxpdGllcy5jb3B5VG9DbGlwYm9hcmQobGluay5saW5rKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQ29DN0NvbnRlbnRMaW5rRGlhbG9nLmNyZWF0ZShsaW5rRGF0YSwgeyBhY3RvcnM6IFtjb25maWcub3B0aW9ucy5hY3Rvcl0uZmlsdGVyKGEgPT4gYS5vd25lcnMubGVuZ3RoKSwgaGFzTW9kaWZpZXJzOiBjb25maWcub3B0aW9ucy5zaGlmdEtleSB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVSb2xsIChjb25maWcpIHtcbiAgICBjb25zdCB1c2FnZSA9IGF3YWl0IFJvbGxEaWFsb2cuY3JlYXRlKGNvbmZpZy5kaWFsb2dPcHRpb25zKVxuICAgIGlmICh1c2FnZSkge1xuICAgICAgY29uc3QgY2FyZFR5cGUgPSB1c2FnZS5nZXQoJ2NhcmRUeXBlJylcbiAgICAgIGlmIChjYXJkVHlwZSkge1xuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5jYXJkVHlwZSA9IGNhcmRUeXBlXG4gICAgICB9XG4gICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5tb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2JvbnVzRGljZScpKVxuICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuZGlmZmljdWx0eSA9IE51bWJlcih1c2FnZS5nZXQoJ2RpZmZpY3VsdHknKSlcbiAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLmZsYXREaWNlTW9kaWZpZXIgPSBOdW1iZXIoXG4gICAgICAgIHVzYWdlLmdldCgnZmxhdERpY2VNb2RpZmllcicpXG4gICAgICApXG4gICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBOdW1iZXIoXG4gICAgICAgIHVzYWdlLmdldCgnZmxhdFRocmVzaG9sZE1vZGlmaWVyJylcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcnVuUm9sbCAoY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcuZGlhbG9nT3B0aW9ucy5jYXJkVHlwZSkge1xuICAgICAgY2FzZSBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX1NBTl9DSEVDSzpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHNhbkRhdGEgPSBhd2FpdCBTYW5EYXRhRGlhbG9nLmNyZWF0ZSh7XG4gICAgICAgICAgICBwcm9tcHRMYWJlbDogdHJ1ZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgaWYgKHNhbkRhdGEpIHtcbiAgICAgICAgICAgIGxldCBzYW5NaW4gPSBzYW5EYXRhLmdldCgnc2FuTWluJykgfHwgMFxuICAgICAgICAgICAgbGV0IHNhbk1heCA9IHNhbkRhdGEuZ2V0KCdzYW5NYXgnKSB8fCAwXG4gICAgICAgICAgICBjb25zdCBzYW5SZWFzb24gPSBzYW5EYXRhLmdldCgnc2FuUmVhc29uJylcblxuICAgICAgICAgICAgaWYgKCFpc05hTihOdW1iZXIoc2FuTWluKSkpIHNhbk1pbiA9IE51bWJlcihzYW5NaW4pXG4gICAgICAgICAgICBpZiAoIWlzTmFOKE51bWJlcihzYW5NYXgpKSkgc2FuTWF4ID0gTnVtYmVyKHNhbk1heClcblxuICAgICAgICAgICAgU2FuQ2hlY2tDYXJkLmNyZWF0ZShcbiAgICAgICAgICAgICAgY29uZmlnLm9wdGlvbnMuYWN0b3IuYWN0b3JLZXksXG4gICAgICAgICAgICAgIHsgc2FuTWluLCBzYW5NYXgsIHNhblJlYXNvbiB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2FuTW9kaWZpZXI6IGNvbmZpZy5kaWFsb2dPcHRpb25zLm1vZGlmaWVyLFxuICAgICAgICAgICAgICAgIHNhbkRpZmZpY3VsdHk6IGNvbmZpZy5kaWFsb2dPcHRpb25zLmRpZmZpY3VsdHksXG4gICAgICAgICAgICAgICAgZmFzdEZvcndhcmQ6IGNvbmZpZy5vcHRpb25zLnNoaWZ0S2V5XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUw6IHtcbiAgICAgICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gY29uZmlnLmRpYWxvZ09wdGlvbnMubW9kaWZpZXJcbiAgICAgICAgY2hlY2suZGlmZmljdWx0eSA9IGNvbmZpZy5kaWFsb2dPcHRpb25zLmRpZmZpY3VsdHlcbiAgICAgICAgY2hlY2suYWN0b3IgPSAhY29uZmlnLm9wdGlvbnMudG9rZW5LZXlcbiAgICAgICAgICA/IGNvbmZpZy5vcHRpb25zLmFjdG9ySWRcbiAgICAgICAgICA6IGNvbmZpZy5vcHRpb25zLnRva2VuS2V5XG4gICAgICAgIGNoZWNrLmZsYXREaWNlTW9kaWZpZXIgPSBjb25maWcuZGlhbG9nT3B0aW9ucy5mbGF0RGljZU1vZGlmaWVyXG4gICAgICAgIGNoZWNrLmZsYXRUaHJlc2hvbGRNb2RpZmllciA9IGNvbmZpZy5kaWFsb2dPcHRpb25zLmZsYXRUaHJlc2hvbGRNb2RpZmllclxuICAgICAgICBjaGVjay5zdGFuZGJ5ID1cbiAgICAgICAgICAhY29uZmlnLm9wdGlvbnMucHJldmVudFN0YW5kYnkgJiZcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzdGFuYnlHTVJvbGxzJykgJiZcbiAgICAgICAgICBnYW1lLnVzZXIuaXNHTSAmJlxuICAgICAgICAgIGNvbmZpZy5vcHRpb25zLmhhc1BsYXllck93bmVyXG4gICAgICAgIGlmIChjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9TS0lMTCkge1xuICAgICAgICAgIGNoZWNrLnNraWxsID0gY29uZmlnLm9wdGlvbnMuc2tpbGxJZFxuICAgICAgICAgIGF3YWl0IGNoZWNrLnJvbGwoKVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0FUVFJJQlVURVxuICAgICAgICApIHtcbiAgICAgICAgICBhd2FpdCBjaGVjay5yb2xsQXR0cmlidXRlKGNvbmZpZy5vcHRpb25zLmF0dHJpYnV0ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhd2FpdCBjaGVjay5yb2xsQ2hhcmFjdGVyaXN0aWMoY29uZmlnLm9wdGlvbnMuY2hhcmFjdGVyaXN0aWMpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5kaWFsb2dPcHRpb25zLmNoYXRNZXNzYWdlKSB7XG4gICAgICAgICAgY2hlY2sudG9NZXNzYWdlKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3VsdDogY2hlY2subW9kaWZpZWRSZXN1bHQsXG4gICAgICAgICAgc3VjY2Vzc0xldmVsOiBjaGVjay5yb2xsZWRTdWNjZXNzTGV2ZWwsXG4gICAgICAgICAgaXNGdW1ibGU6IGNoZWNrLmlzRnVtYmxlLFxuICAgICAgICAgIGlzQ3JpdGljYWw6IGNoZWNrLmlzQ3JpdGljYWwsXG4gICAgICAgICAgc3VjY2Vzc0xldmVsczoge1xuICAgICAgICAgICAgMTogY2hlY2sucmVndWxhclRocmVzaG9sZCxcbiAgICAgICAgICAgIDI6IGNoZWNrLmhhcmRUaHJlc2hvbGQsXG4gICAgICAgICAgICAzOiBjaGVjay5leHRyZW1lVGhyZXNob2xkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXNzZWQ6IGNoZWNrLnBhc3NlZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfT1BQT1NFRDpcbiAgICAgIGNhc2UgQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9DT01CSU5FRDpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgICAgICAgY2hlY2suYWN0b3IgPSAhY29uZmlnLm9wdGlvbnMudG9rZW5LZXlcbiAgICAgICAgICAgID8gY29uZmlnLm9wdGlvbnMuYWN0b3JJZFxuICAgICAgICAgICAgOiBjb25maWcub3B0aW9ucy50b2tlbktleVxuICAgICAgICAgIGNoZWNrLmNoYXJhY3RlcmlzdGljID0gY29uZmlnLm9wdGlvbnMuY2hhcmFjdGVyaXN0aWNcbiAgICAgICAgICBjaGVjay5hdHRyaWJ1dGUgPSBjb25maWcub3B0aW9ucy5hdHRyaWJ1dGVcbiAgICAgICAgICBjaGVjay5za2lsbElkID0gY29uZmlnLm9wdGlvbnMuc2tpbGxJZFxuICAgICAgICAgIGNoZWNrLnJvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgICAgICAgIGNoZWNrLmluaXRpYXRvciA9IGdhbWUudXNlci5pZFxuICAgICAgICAgIGxldCBkYXRhID0ge31cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5jYXJkVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9PUFBPU0VEXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgICB0eXBlOiBPcHBvc2VkQ2hlY2tDYXJkLmRlZmF1bHRDb25maWcudHlwZSxcbiAgICAgICAgICAgICAgY29tYmF0OiBjb25maWcub3B0aW9ucy5pc0NvbWJhdCxcbiAgICAgICAgICAgICAgYWN0aW9uOiAnbmV3J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hlY2suaXRlbSA9IGNvbmZpZy5vcHRpb25zLml0ZW1JZFxuICAgICAgICAgICAgY2hlY2sud2VhcG9uQWx0U2tpbGwgPSBjb25maWcub3B0aW9ucy53ZWFwb25BbHRTa2lsbFxuICAgICAgICAgICAgY2hlY2suZGVueVB1c2ggPSB0cnVlIC8vIE9wcG9zZWQgcm9sbGVkIGNhbid0IGJlIHB1c2hlZC5cbiAgICAgICAgICAgIGF3YWl0IGNoZWNrLl9wZXJmb3JtKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogQ29tYmluZWRDaGVja0NhcmQuZGVmYXVsdENvbmZpZy50eXBlLFxuICAgICAgICAgICAgICBhY3Rpb246ICduZXcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVjay5kaWZmaWN1bHR5ID0gY29uZmlnLmRpYWxvZ09wdGlvbnMuZGlmZmljdWx0eVxuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhLnJvbGwgPSBjaGVjay5KU09OUm9sbERhdGFcbiAgICAgICAgICBkYXRhLl9yb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5jYXJkVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9PUFBPU0VEXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBPcHBvc2VkQ2hlY2tDYXJkLmRpc3BhdGNoKGRhdGEpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIENvbWJpbmVkQ2hlY2tDYXJkLmRpc3BhdGNoKGRhdGEpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ2hhdE1lc3NhZ2UsIGdhbWUsIHJlbmRlclRlbXBsYXRlLCB1aSAqL1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uL2NvbmZpZy5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgY2hhdEhlbHBlciwgQ29DN1JvbGwgfSBmcm9tICcuL2hlbHBlci5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdDb25DaGVjayB7XG4gIGNvbnN0cnVjdG9yIChhY3RvcklkID0gbnVsbCwgZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhcikge1xuICAgIHRoaXMuY2hlY2sgPSBuZXcgQ29DN0NoZWNrKGFjdG9ySWQpXG4gICAgdGhpcy5jaGVjay5jaGFyYWN0ZXJpc3RpYyA9ICdjb24nXG4gICAgdGhpcy5jaGVjay5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eVxuICAgIHRoaXMuY2hlY2suZGVueVB1c2ggPSB0cnVlXG4gICAgdGhpcy5hY3RvcklkID0gYWN0b3JJZFxuICB9XG5cbiAgZ2V0IGlzQmxpbmQgKCkge1xuICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuX2lzQmxpbmQpIHtcbiAgICAgIHRoaXMuX2lzQmxpbmQgPSB0aGlzLnJvbGxNb2RlID09PSAnYmxpbmRyb2xsJ1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faXNCbGluZFxuICB9XG5cbiAgc2V0IGlzQmxpbmQgKHgpIHtcbiAgICB0aGlzLl9pc0JsaW5kID0geFxuICB9XG5cbiAgZ2V0IHJvbGxNb2RlICgpIHtcbiAgICBpZiAoIXRoaXMuX3JvbGxNb2RlKSB0aGlzLl9yb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICByZXR1cm4gdGhpcy5fcm9sbE1vZGVcbiAgfVxuXG4gIHNldCByb2xsTW9kZSAoeCkge1xuICAgIGlmICh4ID09PSBmYWxzZSkgdGhpcy5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgdGhpcy5fcm9sbE1vZGUgPSB4XG4gIH1cblxuICBnZXQgYWN0b3IgKCkge1xuICAgIGlmICh0aGlzLmFjdG9ySWQpIHJldHVybiBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLmFjdG9ySWQpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBzZXQgYWN0b3JJZCAoeCkge1xuICAgIHRoaXMuX2FjdG9ySWQgPSB4XG4gICAgdGhpcy5jaGVjay5hY3RvciA9IHhcbiAgfVxuXG4gIGdldCBhY3RvcklkICgpIHtcbiAgICBpZiAodGhpcy5fYWN0b3JJZCkgcmV0dXJuIHRoaXMuX2FjdG9ySWRcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHRva2VuS2V5ICgpIHtcbiAgICBpZiAodGhpcy5hY3Rvci5pc1Rva2VuKSByZXR1cm4gdGhpcy5hY3Rvci50b2tlbktleVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgaXNTdWNjZXNzICgpIHtcbiAgICBpZiAodGhpcy5jaGVjaykgcmV0dXJuIHRoaXMuY2hlY2suaXNTdWNjZXNzXG4gICAgZWxzZSByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCBpc1JvbGxlZCAoKSB7XG4gICAgaWYgKHRoaXMuY2hlY2sgJiYgdGhpcy5jaGVjay5kaWNlcyAmJiB0aGlzLmNoZWNrLmRpY2VzLnRvdGFsKSByZXR1cm4gdHJ1ZVxuICAgIGVsc2UgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbUNhcmQgKGNhcmQpIHtcbiAgICBjb25zdCBjb25DaGVjayA9IG5ldyBDb0M3Q29uQ2hlY2soKVxuICAgIGNoYXRIZWxwZXIuZ2V0T2JqZWN0RnJvbUVsZW1lbnQoY29uQ2hlY2ssIGNhcmQpXG4gICAgY29uc3QgaHRtbENoZWNrID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcucm9sbC1yZXN1bHQnKVxuICAgIENvQzdSb2xsLmdldEZyb21FbGVtZW50KGh0bWxDaGVjaywgY29uQ2hlY2suY2hlY2spXG4gICAgY29uQ2hlY2subWVzc2FnZUlkID0gY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpLmRhdGFzZXQubWVzc2FnZUlkXG4gICAgcmV0dXJuIGNvbkNoZWNrXG4gIH1cblxuICBhc3luYyBnZXRDaGVja0VsZW1lbnQgKCkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9yb2xsLXJlc3VsdC5odG1sJ1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGhpcy5jaGVjaylcbiAgICBjb25zdCBodG1sRWxlbWVudCA9ICQucGFyc2VIVE1MKGh0bWwpWzBdXG4gICAgaWYgKGh0bWxFbGVtZW50KSB7XG4gICAgICBodG1sRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdjaGF0LWNhcmQnLCAnaXRlbS1jYXJkJywgJ3JvbGwtY2FyZCcpXG4gICAgICByZXR1cm4gaHRtbEVsZW1lbnRcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGFzeW5jIHRvTWVzc2FnZSAoZmFzdEZvcndhcmQgPSBmYWxzZSkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9jb24tY2hlY2suaHRtbCdcblxuICAgIGlmIChmYXN0Rm9yd2FyZCkge1xuICAgICAgYXdhaXQgdGhpcy5yb2xsQ29uKClcbiAgICB9XG5cbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHRoaXMpXG4gICAgY29uc3QgaHRtbEVsZW1lbnQgPSAkLnBhcnNlSFRNTChodG1sKVswXVxuXG4gICAgaWYgKGZhc3RGb3J3YXJkKSB7XG4gICAgICBjb25zdCBjaGVjayA9IGh0bWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yb2xsLXJlc3VsdCcpXG4gICAgICBjaGVjay5yZXBsYWNlV2l0aChhd2FpdCB0aGlzLmdldENoZWNrRWxlbWVudCgpKVxuICAgIH1cblxuICAgIGNvbnN0IHNwZWFrZXJEYXRhID0ge31cbiAgICBsZXQgc3BlYWtlclxuICAgIGlmICh0aGlzLmFjdG9yKSB7XG4gICAgICBpZiAodGhpcy50b2tlbikgc3BlYWtlckRhdGEudG9rZW4gPSB0aGlzLnRva2VuXG4gICAgICBlbHNlIHNwZWFrZXJEYXRhLmFjdG9yID0gdGhpcy5hY3RvclxuICAgICAgc3BlYWtlciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoc3BlYWtlckRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKClcbiAgICB9XG5cbiAgICBjb25zdCB1c2VyID0gdGhpcy5hY3Rvci51c2VyID8gdGhpcy5hY3Rvci51c2VyIDogZ2FtZS51c2VyXG5cbiAgICBjb25zdCBjaGF0RGF0YSA9IHtcbiAgICAgIHVzZXI6IHVzZXIuaWQsXG4gICAgICBzcGVha2VyLFxuICAgICAgZmxhdm9yOiB0aGlzLmZsYXZvcixcbiAgICAgIGNvbnRlbnQ6IGh0bWxFbGVtZW50Lm91dGVySFRNTFxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIFsnZ21yb2xsJywgJ2JsaW5kcm9sbCddLmluY2x1ZGVzKGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJykpXG4gICAgKSB7XG4gICAgICBjaGF0RGF0YS53aGlzcGVyID0gQ2hhdE1lc3NhZ2UuZ2V0V2hpc3BlclJlY2lwaWVudHMoJ0dNJykgLy8gQ2hhbmdlIGZvciB1c2VyXG4gICAgfVxuICAgIGlmICh0aGlzLnJvbGxNb2RlID09PSAnYmxpbmRyb2xsJykgY2hhdERhdGEuYmxpbmQgPSB0cnVlXG5cbiAgICBDaGF0TWVzc2FnZS5jcmVhdGUoY2hhdERhdGEpLnRoZW4obXNnID0+IHtcbiAgICAgIHJldHVybiBtc2dcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgcm9sbENvbiAoKSB7XG4gICAgdGhpcy5jaGVjay5oaWRlRGljZVJlc3VsdCA9IHRydWVcbiAgICBhd2FpdCB0aGlzLmNoZWNrLl9wZXJmb3JtKClcbiAgICBpZiAoIXRoaXMuaXNCbGluZCAmJiAhdGhpcy5pc1JvbGxlZCAmJiAhdGhpcy5pc1N1Y2Nlc3MpIHtcbiAgICAgIGlmICh0aGlzLnN0YXlBbGl2ZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmFjdG9yLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5kZWFkKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudW5jb25zY2lvdXMpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYXBwbGllZCA9IHRydWVcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkICgpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvY29uLWNoZWNrLmh0bWwnXG5cbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHRoaXMpXG4gICAgY29uc3QgaHRtbEVsZW1lbnQgPSAkLnBhcnNlSFRNTChodG1sKVswXVxuXG4gICAgY29uc3QgY2hlY2sgPSBodG1sRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucm9sbC1yZXN1bHQnKVxuICAgIGNoZWNrLnJlcGxhY2VXaXRoKGF3YWl0IHRoaXMuZ2V0Q2hlY2tFbGVtZW50KCkpXG5cbiAgICBpZiAoIXRoaXMuaXNCbGluZCAmJiB0aGlzLmlzUm9sbGVkICYmICF0aGlzLmlzU3VjY2Vzcykge1xuICAgICAgaWYgKHRoaXMuc3RheUFsaXZlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWN0b3Iuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmRlYWQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCB0aGlzLmFjdG9yLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy51bmNvbnNjaW91cylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMubWVzc2FnZUlkKSByZXR1cm5cbiAgICBjb25zdCBjaGF0TWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuXG4gICAgY29uc3QgbXNnID0gYXdhaXQgY2hhdE1lc3NhZ2UudXBkYXRlKHsgY29udGVudDogaHRtbEVsZW1lbnQub3V0ZXJIVE1MIH0pXG4gICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgcmV0dXJuIG1zZ1xuICB9XG59XG4iLCIvKiBnbG9iYWwgRGlhbG9nLCByZW5kZXJUZW1wbGF0ZSAqL1xuZXhwb3J0IGNsYXNzIFNraWxsU2VsZWN0RGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5zZWxlY3Qtc2tpbGwnKVxuICAgICAgLmNsaWNrKGFzeW5jIGV2ZW50ID0+IHRoaXMuX29uU2VsZWN0U2tpbGxDbGlja2VkKGV2ZW50KSlcbiAgfVxuXG4gIGFzeW5jIF9vblNlbGVjdFNraWxsQ2xpY2tlZCAoZXZlbnQpIHtcbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuICAgIC8vIGNvbnN0IGFjdG9yID0gZ2FtZS5hY3RvcnMuZ2V0KCB0aGlzLmRhdGEuZGF0YS5hY3RvcklkKTtcbiAgICAvLyBhd2FpdCBhY3Rvci5hZGRTa2lsbCggdGhpcy5kYXRhLmRhdGEuc2tpbGxzW051bWJlcihsaS5kYXRhc2V0LmluZGV4KV0sIHRoaXMuZGF0YS5kYXRhLnR5cGUpO1xuICAgIHRoaXMuZGF0YS5kYXRhLnNraWxsc1tOdW1iZXIobGkuZGF0YXNldC5pbmRleCldLnNlbGVjdGVkID0gdHJ1ZVxuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIGlmICghdGhpcy5kYXRhLmRhdGEuYWRkZWQpIHRoaXMuZGF0YS5kYXRhLmFkZGVkID0gMFxuICAgIHRoaXMuZGF0YS5kYXRhLmFkZGVkKytcbiAgICBjb25zdCBmb3JtID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuc2tpbGwtc2VsZWN0b3InKVxuICAgIGNvbnN0IGRpdkNvdW50ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuY291bnQnKVxuICAgIGRpdkNvdW50LmlubmVyVGV4dCA9IHRoaXMuZGF0YS5kYXRhLmFkZGVkXG4gICAgaWYgKHRoaXMuZGF0YS5kYXRhLmFkZGVkID49IHRoaXMuZGF0YS5kYXRhLm9wdGlvbnNDb3VudCkge1xuICAgICAgdGhpcy5jbG9zZSgpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAoZGF0YSkge1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShcbiAgICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvc2tpbGwtc2VsZWN0Lmh0bWwnLFxuICAgICAgZGF0YVxuICAgICkgLy8gUmVuZGVyIHRlbXBsYXRlIGJ1ZyBhdmVjIGNlcnRhaW5lcyBkYXRhXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgZGxnID0gbmV3IFNraWxsU2VsZWN0RGlhbG9nKFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgY29udGVudDogaHRtbCxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGJ1dHRvbnM6IHt9LFxuICAgICAgICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRhdGEuYWRkZWQgPj0gZGF0YS5vcHRpb25zQ291bnQpIHJldHVybiByZXNvbHZlKGZhbHNlKVxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBkYXRhLnNraWxscy5maWx0ZXIoc2tpbGwgPT4gc2tpbGwuc2VsZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShzZWxlY3RlZClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHsgY2xhc3NlczogWydjb2M3JywgJ2RpYWxvZycsICdza2lsbC1zZWxlY3QnXSB9XG4gICAgICApXG4gICAgICBkbGcucmVuZGVyKHRydWUpXG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIERpYWxvZywgcmVuZGVyVGVtcGxhdGUgKi9cblxuZXhwb3J0IGNsYXNzIFBvaW50U2VsZWN0RGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5pdGVtLW5hbWUnKVxuICAgICAgLmNsaWNrKGFzeW5jIGV2ZW50ID0+IHRoaXMuX29uU2VsZWN0Q2hhcmFjdGVyaXN0aWMoZXZlbnQpKVxuICAgIGh0bWwuZmluZCgnYnV0dG9uJykuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25CdXR0b25DbGlja2VkKGV2ZW50KSlcbiAgfVxuXG4gIGFzeW5jIF9vblNlbGVjdENoYXJhY3RlcmlzdGljIChldmVudCkge1xuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgY29uc3QgaXRlbUxpc3QgPSBsaS5jbG9zZXN0KCcuaXRlbS1saXN0JylcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbUxpc3QucXVlcnlTZWxlY3RvckFsbCgnLnNlbGVjdGFibGUnKSkge1xuICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpXG4gICAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3NbaXRlbS5kYXRhc2V0LmtleV0uc2VsZWN0ZWQgPSBmYWxzZVxuICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzW2l0ZW0uZGF0YXNldC5rZXldLm9wdGlvbmFsID0gZmFsc2VcbiAgICB9XG4gICAgJChsaSkudG9nZ2xlQ2xhc3MoJ3NlbGVjdGVkJylcbiAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3NbbGkuZGF0YXNldC5rZXldLnNlbGVjdGVkID0gdHJ1ZVxuICAgIGNvbnN0IHRvdGFsUG9pbnRzID0gbGlcbiAgICAgIC5jbG9zZXN0KCcjc2tpbGwtc2VsZWN0aW9uLWZvcm0nKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5wb2ludHMnKVxuICAgIHRvdGFsUG9pbnRzLmlubmVyVGV4dCA9XG4gICAgICB0aGlzLmRhdGEuZGF0YS50b3RhbCArXG4gICAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3NbbGkuZGF0YXNldC5rZXldLm11bHRpcGxpZXIgKlxuICAgICAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3NbbGkuZGF0YXNldC5rZXldLnZhbHVlXG4gICAgY29uc3QgYnV0dG9uID0gbGlcbiAgICAgIC5jbG9zZXN0KCcjc2tpbGwtc2VsZWN0aW9uLWZvcm0nKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbi52YWxpZGF0ZScpXG4gICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2luYWN0aXZlJylcbiAgICB0aGlzLmRhdGEuZGF0YS5yZXNvbHZlZCA9IHRydWVcbiAgICAvLyBjb25zdCBhY3RvciA9IGdhbWUuYWN0b3JzLmdldCggdGhpcy5kYXRhLmRhdGEuYWN0b3JJZCk7XG4gICAgLy8gYXdhaXQgYWN0b3IuYWRkU2tpbGwoIHRoaXMuZGF0YS5kYXRhLnNraWxsc1tOdW1iZXIobGkuZGF0YXNldC5pbmRleCldLCB0aGlzLmRhdGEuZGF0YS50eXBlKTtcbiAgICAvLyBldmVudC5jdXJyZW50VGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgLy8gaWYoICF0aGlzLmRhdGEuZGF0YS5hZGRlZCkgdGhpcy5kYXRhLmRhdGEuYWRkZWQgPSAwO1xuICAgIC8vIHRoaXMuZGF0YS5kYXRhLmFkZGVkKys7XG4gICAgLy8gY29uc3QgZm9ybSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLnBvaW50LXNlbGVjdG9yJyk7XG4gICAgLy8gY29uc3QgZGl2Q291bnQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5jb3VudCcpO1xuICAgIC8vIGRpdkNvdW50LmlubmVyVGV4dCA9IHRoaXMuZGF0YS5kYXRhLmFkZGVkO1xuICAgIC8vIGlmKCB0aGlzLmRhdGEuZGF0YS5hZGRlZCA+PSB0aGlzLmRhdGEuZGF0YS5vcHRpb25zKSB0aGlzLmNsb3NlKCk7XG4gICAgLy8gcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgYXN5bmMgX29uQnV0dG9uQ2xpY2tlZCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpbmFjdGl2ZScpKSByZXR1cm5cbiAgICBzdXBlci5jbG9zZSgpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlIChkYXRhKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKFxuICAgICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9wb2ludC1zZWxlY3QuaHRtbCcsXG4gICAgICBkYXRhXG4gICAgKVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBQb2ludFNlbGVjdERpYWxvZyhcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBidXR0b25zOiB7fSxcbiAgICAgICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEucmVzb2x2ZWQpIHJldHVybiByZXNvbHZlKGRhdGEpXG4gICAgICAgICAgICBlbHNlIHJldHVybiByZXNvbHZlKGZhbHNlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgeyBjbGFzc2VzOiBbJ2NvYzcnLCAnZGlhbG9nJywgJ2NoYXItc2VsZWN0J10gfVxuICAgICAgKVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBEaWFsb2csIHJlbmRlclRlbXBsYXRlICovXG5leHBvcnQgY2xhc3MgQ2hhcmFjU2VsZWN0RGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5pdGVtLW5hbWUnKVxuICAgICAgLmNsaWNrKGFzeW5jIGV2ZW50ID0+IHRoaXMuX29uU2VsZWN0Q2hhcmFjdGVyaXN0aWMoZXZlbnQpKVxuICB9XG5cbiAgYXN5bmMgX29uU2VsZWN0Q2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgY29uc3QgbGkgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICB0aGlzLmRhdGEuZGF0YS5zZWxlY3RlZCA9IGxpLmRhdGFzZXQua2V5XG4gICAgdGhpcy5jbG9zZSgpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlIChkYXRhKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKFxuICAgICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9jaGFyLXNlbGVjdC5odG1sJyxcbiAgICAgIGRhdGFcbiAgICApXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgZGxnID0gbmV3IENoYXJhY1NlbGVjdERpYWxvZyhcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBidXR0b25zOiB7fSxcbiAgICAgICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEuc2VsZWN0ZWQpIHJldHVybiByZXNvbHZlKGRhdGEuc2VsZWN0ZWQpXG4gICAgICAgICAgICBlbHNlIHJldHVybiByZXNvbHZlKGZhbHNlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgeyBjbGFzc2VzOiBbJ2NvYzcnLCAnZGlhbG9nJywgJ2NoYXItc2VsZWN0J10gfVxuICAgICAgKVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBEaWFsb2csIGdhbWUsIHJlbmRlclRlbXBsYXRlLCBSb2xsICovXG5leHBvcnQgY2xhc3MgQ2hhcmFjUm9sbERpYWxvZyBleHRlbmRzIERpYWxvZyB7XG4gIGNvbnN0cnVjdG9yIChkYXRhLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoZGF0YSwgb3B0aW9ucylcblxuICAgIHRoaXMucm9sbGVkID0gZGF0YS5yb2xsZWQgfHwge31cbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICBodG1sLm9uKCdjaGFuZ2UnLCAnaW5wdXQnLCB0aGlzLl9vbkNoYW5nZUlucHV0LmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignc3VibWl0JywgJ2Zvcm0nLCB0aGlzLl9vblN1Ym1pdC5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5yb2xsLWNoYXJhY3RlcmlzdGljJyxcbiAgICAgIHRoaXMuX29uUm9sbENoYXJhY3RlcmlzdGljLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLmluY3JlYXNlLWNoYXJhY3RlcmlzdGljJyxcbiAgICAgIHRoaXMuX29uSW5jcmVhc2VDaGFyYWN0ZXJpc3RpYy5iaW5kKHRoaXMpXG4gICAgKVxuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5kZWNyZWFzZS1jaGFyYWN0ZXJpc3RpYycsXG4gICAgICB0aGlzLl9vbkRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMuYmluZCh0aGlzKVxuICAgIClcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcucmVzZXQtY2hhcmFjdGVyaXN0aWMnLFxuICAgICAgdGhpcy5fb25SZXNldENoYXJhY3RlcmlzdGljLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbignY2xpY2snLCAnYnV0dG9uJywgdGhpcy5fb25CdXR0b24uYmluZCh0aGlzKSlcbiAgfVxuXG4gIGFzeW5jIF9vblJvbGxDaGFyYWN0ZXJpc3RpYyAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCBjaGFyYWNLZXkgPSBsaS5kYXRhc2V0LmtleVxuICAgIGF3YWl0IHRoaXMucm9sbENoYXJhY3RlcmlzdGljKGNoYXJhY0tleSlcbiAgfVxuXG4gIGFzeW5jIF9vbkluY3JlYXNlQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgY29uc3QgY2hhcmFjS2V5ID0gbGkuZGF0YXNldC5rZXlcbiAgICB0aGlzLmluY3JlYXNlQ2hhcmFjdGVyaXN0aWMoY2hhcmFjS2V5KVxuICB9XG5cbiAgYXN5bmMgX29uRGVjcmVhc2VDaGFyYWN0ZXJpc3RpYyAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCBjaGFyYWNLZXkgPSBsaS5kYXRhc2V0LmtleVxuICAgIHRoaXMuZGVjcmVhc2VDaGFyYWN0ZXJpc3RpYyhjaGFyYWNLZXkpXG4gIH1cblxuICBhc3luYyBfb25SZXNldENoYXJhY3RlcmlzdGljIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGNvbnN0IGNoYXJhY0tleSA9IGxpLmRhdGFzZXQua2V5XG4gICAgdGhpcy5yZXNldENoYXJhY3RlcmlzdGljKGNoYXJhY0tleSlcbiAgfVxuXG4gIGFzeW5jIF9vbkJ1dHRvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBhY3Rpb24gPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uXG4gICAgaWYgKGFjdGlvbiA9PT0gJ3JvbGwnKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoYXIgb2YgW1xuICAgICAgICAnc3RyJyxcbiAgICAgICAgJ2NvbicsXG4gICAgICAgICdzaXonLFxuICAgICAgICAnZGV4JyxcbiAgICAgICAgJ2FwcCcsXG4gICAgICAgICdpbnQnLFxuICAgICAgICAncG93JyxcbiAgICAgICAgJ2VkdScsXG4gICAgICAgICdsdWNrJ1xuICAgICAgXSkge1xuICAgICAgICBhd2FpdCB0aGlzLnJvbGxDaGFyYWN0ZXJpc3RpYyhjaGFyKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNoZWNrVG90YWwoKVxuICAgIGlmIChhY3Rpb24gPT09ICd2YWxpZGF0ZScgJiYgdGhpcy5kYXRhLmRhdGEudmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuY2xvc2UoKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJvbGxDaGFyYWN0ZXJpc3RpYyAoa2V5KSB7XG4gICAgY29uc3QgbGkgPSB0aGlzLl9lbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoYGxpLml0ZW1bZGF0YS1rZXk9JHtrZXl9XWApXG4gICAgY29uc3QgaW5wdXQgPSBsaT8ucXVlcnlTZWxlY3RvcignaW5wdXQnKVxuICAgIGNvbnN0IGZvcm11bGEgPSB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHNba2V5XVxuICAgIGlmIChpbnB1dCAmJiBmb3JtdWxhKSB7XG4gICAgICBpZiAoaXNOYU4oTnVtYmVyKGZvcm11bGEpKSkge1xuICAgICAgICBjb25zdCByb2xsID0gbmV3IFJvbGwoZm9ybXVsYSlcbiAgICAgICAgYXdhaXQgcm9sbC5ldmFsdWF0ZSh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICAgIHJvbGwudG9NZXNzYWdlKHtcbiAgICAgICAgICBmbGF2b3I6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWVzc2FnZVJvbGxpbmdDaGFyYWN0ZXJpc3RpYycsIHtcbiAgICAgICAgICAgIGxhYmVsOiB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MubGlzdFtrZXldLmxhYmVsLFxuICAgICAgICAgICAgZm9ybXVsYVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIGlucHV0LnZhbHVlID0gcm9sbC50b3RhbFxuICAgICAgfSBlbHNlIGlucHV0LnZhbHVlID0gTnVtYmVyKGZvcm11bGEpXG4gICAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzW2tleV0gPSBOdW1iZXIoaW5wdXQudmFsdWUpXG4gICAgICBpZiAoIXRoaXMucm9sbGVkKSB0aGlzLnJvbGxlZCA9IHt9XG4gICAgICB0aGlzLnJvbGxlZFtrZXldID0gdHJ1ZVxuICAgIH1cbiAgICB0aGlzLmNoZWNrVG90YWwoKVxuICB9XG5cbiAgYXN5bmMgaW5jcmVhc2VDaGFyYWN0ZXJpc3RpYyAoa2V5KSB7XG4gICAgY29uc3QgbGkgPSB0aGlzLl9lbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoYGxpLml0ZW1bZGF0YS1rZXk9JHtrZXl9XWApXG4gICAgY29uc3QgaW5wdXQgPSBsaT8ucXVlcnlTZWxlY3RvcignaW5wdXQnKVxuICAgIGlmIChpbnB1dCkge1xuICAgICAgaW5wdXQudmFsdWUgPSBOdW1iZXIoaW5wdXQudmFsdWUpICsgMVxuICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnZhbHVlc1trZXldID0gTnVtYmVyKGlucHV0LnZhbHVlKVxuICAgIH1cbiAgICB0aGlzLmNoZWNrVG90YWwoKVxuICB9XG5cbiAgYXN5bmMgZGVjcmVhc2VDaGFyYWN0ZXJpc3RpYyAoa2V5KSB7XG4gICAgY29uc3QgbGkgPSB0aGlzLl9lbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoYGxpLml0ZW1bZGF0YS1rZXk9JHtrZXl9XWApXG4gICAgY29uc3QgaW5wdXQgPSBsaT8ucXVlcnlTZWxlY3RvcignaW5wdXQnKVxuICAgIGlmIChpbnB1dCAmJiBOdW1iZXIoaW5wdXQudmFsdWUpID4gMCkge1xuICAgICAgaW5wdXQudmFsdWUgPSBOdW1iZXIoaW5wdXQudmFsdWUpIC0gMVxuICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnZhbHVlc1trZXldID0gTnVtYmVyKGlucHV0LnZhbHVlKVxuICAgIH1cbiAgICB0aGlzLmNoZWNrVG90YWwoKVxuICB9XG5cbiAgYXN5bmMgcmVzZXRDaGFyYWN0ZXJpc3RpYyAoa2V5KSB7XG4gICAgY29uc3QgbGkgPSB0aGlzLl9lbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoYGxpLml0ZW1bZGF0YS1rZXk9JHtrZXl9XWApXG4gICAgY29uc3QgaW5wdXQgPSBsaT8ucXVlcnlTZWxlY3RvcignaW5wdXQnKVxuICAgIGlmIChpbnB1dCkge1xuICAgICAgaW5wdXQudmFsdWUgPSBudWxsXG4gICAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzW2tleV0gPSAwXG4gICAgfVxuICAgIHRoaXMuY2hlY2tUb3RhbCgpXG4gIH1cblxuICBhc3luYyBfb25DaGFuZ2VJbnB1dCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgaW5wdXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgdmFsdWUgPSBOdW1iZXIoaW5wdXQudmFsdWUpXG4gICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgIHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy52YWx1ZXNbaW5wdXQubmFtZV0gPSB2YWx1ZVxuICAgIH1cblxuICAgIHRoaXMuY2hlY2tUb3RhbCgpXG4gIH1cblxuICBjaGVja1RvdGFsICgpIHtcbiAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLnRvdGFsID0gMFxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKFxuICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnZhbHVlc1xuICAgICkpIHtcbiAgICAgIGlmIChrZXkgIT09ICdsdWNrJykge1xuICAgICAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLnRvdGFsICs9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMuX2VsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLnBvaW50cycpXG4gICAgaWYgKHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy5wb2ludHMuZW5hYmxlZCkge1xuICAgICAgaWYgKFxuICAgICAgICBOdW1iZXIodGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy50b3RhbCkgIT09XG4gICAgICAgIE51bWJlcih0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLnZhbHVlKVxuICAgICAgKSB7XG4gICAgICAgIHZhbGlkYXRpb24uY2xhc3NMaXN0LmFkZCgnd2FybmluZycpXG4gICAgICAgIHRoaXMuZGF0YS5kYXRhLnZhbGlkYXRlID0gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRpb24uY2xhc3NMaXN0LnJlbW92ZSgnd2FybmluZycpXG4gICAgICAgIHRoaXMuZGF0YS5kYXRhLnZhbGlkYXRlID0gdHJ1ZVxuICAgICAgfVxuICAgICAgY29uc3QgdmFsdWUgPSB2YWxpZGF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy52YWx1ZScpXG4gICAgICB2YWx1ZS5pbm5lclRleHQgPSB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLnZhbHVlXG4gICAgfVxuXG4gICAgY29uc3QgdG90YWwgPSB2YWxpZGF0aW9uLnF1ZXJ5U2VsZWN0b3IoJy50b3RhbCcpXG4gICAgdG90YWwuaW5uZXJUZXh0ID0gdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy50b3RhbFxuXG4gICAgaWYgKHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy5yb2xscy5lbmFibGVkKSB7XG4gICAgICB0aGlzLmRhdGEuZGF0YS52YWxpZGF0ZSA9IE9iamVjdC52YWx1ZXModGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnZhbHVlcykuZmlsdGVyKHZhbCA9PiBpc05hTihwYXJzZUludCh2YWwpKSkubGVuZ3RoID09PSAwXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uU3VibWl0IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKGRhdGEpIHtcbiAgICBjb25zdCByb2xsZWQgPSB7fVxuICAgIGRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy50b3RhbCA9IDBcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMpKSB7XG4gICAgICBpZiAoa2V5ICE9PSAnbHVjaycpIHtcbiAgICAgICAgZGF0YS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLnRvdGFsICs9IHZhbHVlIHx8IDBcbiAgICAgIH1cbiAgICAgIGlmICghaXNOYU4odmFsdWUpICYmIHZhbHVlID4gMCkge1xuICAgICAgICByb2xsZWRba2V5XSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLmVuYWJsZWQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgTnVtYmVyKGRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy50b3RhbCkgIT09XG4gICAgICAgIE51bWJlcihkYXRhLmNoYXJhY3RlcmlzdGljcy5wb2ludHMudmFsdWUpXG4gICAgICApIHtcbiAgICAgICAgZGF0YS5wb2ludHNXYXJuaW5nID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShcbiAgICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvY2hhci1yb2xsLmh0bWwnLFxuICAgICAgZGF0YVxuICAgIClcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBjb25zdCBkbGcgPSBuZXcgQ2hhcmFjUm9sbERpYWxvZyhcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICByb2xsZWQsXG4gICAgICAgICAgYnV0dG9uczoge30sXG4gICAgICAgICAgY2xvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhLnZhbGlkYXRlKSByZXR1cm4gcmVzb2x2ZSh0cnVlKVxuICAgICAgICAgICAgZWxzZSByZXR1cm4gcmVzb2x2ZShmYWxzZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHsgY2xhc3NlczogWydjb2M3JywgJ2RpYWxvZycsICdjaGFyLXNlbGVjdCddIH1cbiAgICAgIClcbiAgICAgIGRsZy5yZW5kZXIodHJ1ZSlcbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgRGlhbG9nLCBGb3JtRGF0YSwgZ2FtZSwgcmVuZGVyVGVtcGxhdGUgKi9cbmV4cG9ydCBjbGFzcyBTa2lsbFNwZWNTZWxlY3REaWFsb2cge1xuICBzdGF0aWMgYXN5bmMgY3JlYXRlIChcbiAgICBza2lsbHMsXG4gICAgc3BlY2lhbGl6YXRpb25OYW1lLFxuICAgIGJhc2VWYWx1ZSA9IG51bGwsXG4gICAgbmFtZSA9IG51bGxcbiAgKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKFxuICAgICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9za2lsbC1zcGVjLXNlbGVjdC5odG1sJyxcbiAgICAgIHtcbiAgICAgICAgaGFzU2tpbGxzOiBza2lsbHMubGVuZ3RoID4gMCxcbiAgICAgICAgc2tpbGxzLFxuICAgICAgICBiYXNlOiBiYXNlVmFsdWUsXG4gICAgICAgIG5hbWVcbiAgICAgIH1cbiAgICApXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgbGV0IGZvcm1EYXRhID0gbnVsbFxuICAgICAgY29uc3QgZGxnID0gbmV3IERpYWxvZyh7XG4gICAgICAgIHRpdGxlOiBuYW1lXG4gICAgICAgICAgPyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlNraWxsU2VsZWN0QmFzZScsIHsgbmFtZSB9KVxuICAgICAgICAgIDogZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ta2lsbFNwZWNTZWxlY3RUaXRsZScsIHtcbiAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uOiBzcGVjaWFsaXphdGlvbk5hbWVcbiAgICAgICAgICB9KSxcbiAgICAgICAgY29udGVudDogaHRtbCxcbiAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlZhbGlkYXRlJyksXG4gICAgICAgICAgICBjYWxsYmFjazogaHRtbCA9PiB7XG4gICAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKFxuICAgICAgICAgICAgICAgIGh0bWxbMF0ucXVlcnlTZWxlY3RvcignI3NraWxsLXNlbGVjdC1mb3JtJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmb3JtRGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICd2YWxpZGF0ZScsXG4gICAgICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBkbGcucmVuZGVyKHRydWUpXG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIEZvcm1BcHBsaWNhdGlvbiwgZm91bmRyeSwgZ2FtZSAqL1xuXG5leHBvcnQgY2xhc3MgU2tpbGxTcGVjaWFsaXphdGlvblNlbGVjdERpYWxvZyBleHRlbmRzIEZvcm1BcHBsaWNhdGlvbiB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2tpbGwtbmFtZS1kaWFsb2cnXSxcbiAgICAgIHRpdGxlOiAnJyxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL3NraWxsLXNwZWNpYWxpemF0aW9uLXNlbGVjdC5oYnMnLFxuICAgICAgd2lkdGg6IDQwMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgY2xvc2VPblN1Ym1pdDogZmFsc2VcbiAgICB9KVxuICB9XG5cbiAgZ2V0IHRpdGxlICgpIHtcbiAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ta2lsbFNwZWNTZWxlY3RUaXRsZScsIHtcbiAgICAgIHNwZWNpYWxpemF0aW9uOiB0aGlzLm9iamVjdC5zcGVjaWFsaXphdGlvbk5hbWVcbiAgICB9KVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgaHRtbC5maW5kKCcuc3VibWl0LWJ1dHRvbicpLmNsaWNrKHRoaXMuX29uQ2xpY2tTdWJtaXQuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJ1tuYW1lPWV4aXN0aW5nLXNraWxsXScpLmNoYW5nZSh0aGlzLl9vblNlbGVjdENoYW5nZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgYXN5bmMgX29uU2VsZWN0Q2hhbmdlIChldmVudCkge1xuICAgIHRoaXMub2JqZWN0LnNlbGVjdGVkID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyBfb25DbGlja1N1Ym1pdCAoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5vYmplY3Quc2VsZWN0ZWQgPT09ICcnKSB7XG4gICAgICBjb25zdCBvYmogPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJ2Zvcm0nKVxuICAgICAgdGhpcy5vYmplY3QubmFtZSA9IChvYmouZmluZCgnaW5wdXRbbmFtZT1uZXctc2tpbGwtbmFtZV0nKS52YWwoKSA/PyAnJylcbiAgICAgIHRoaXMub2JqZWN0LmJhc2VWYWx1ZSA9IChvYmouZmluZCgnaW5wdXRbbmFtZT1iYXNlLXZhbHVlXScpLnZhbCgpID8/ICcnKVxuICAgIH1cbiAgICBpZiAodGhpcy5vYmplY3Quc2VsZWN0ZWQgPT09ICcnICYmIHRoaXMub2JqZWN0Lm5hbWUgPT09ICcnKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgdGhpcy5vYmplY3QucmVzb2x2ZSh7XG4gICAgICBzZWxlY3RlZDogdGhpcy5vYmplY3Quc2VsZWN0ZWQsXG4gICAgICBuYW1lOiB0aGlzLm9iamVjdC5uYW1lLFxuICAgICAgYmFzZVZhbHVlOiB0aGlzLm9iamVjdC5iYXNlVmFsdWVcbiAgICB9KVxuICAgIHRoaXMuY2xvc2UoKVxuICB9XG5cbiAgYXN5bmMgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGZvcm1EYXRhKSB7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlICh7IHNraWxscyA9IFtdLCBhbGxvd0N1c3RvbSA9IGZhbHNlLCBmaXhlZEJhc2VWYWx1ZSA9IGZhbHNlLCBzcGVjaWFsaXphdGlvbk5hbWUgPSAnJywgbGFiZWwgPSAnJywgYmFzZVZhbHVlID0gbnVsbCB9ID0ge30pIHtcbiAgICBjb25zdCBzZWxlY3QgPSBbXVxuICAgIGZvciAoY29uc3Qgc2tpbGwgb2Ygc2tpbGxzKSB7XG4gICAgICBzZWxlY3QucHVzaCh7XG4gICAgICAgIGlkOiBza2lsbC5pZCxcbiAgICAgICAgbmFtZTogc2tpbGwubmFtZSxcbiAgICAgICAgYmFzZTogc2tpbGwuc3lzdGVtLmJhc2VcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIG5ldyBTa2lsbFNwZWNpYWxpemF0aW9uU2VsZWN0RGlhbG9nKHtcbiAgICAgICAgc3BlY2lhbGl6YXRpb25OYW1lLFxuICAgICAgICBhbGxvd0N1c3RvbSxcbiAgICAgICAgZml4ZWRCYXNlVmFsdWUsXG4gICAgICAgIGFsbG93U2VsZWN0OiBza2lsbHMubGVuZ3RoID4gMCxcbiAgICAgICAgc2tpbGxzOiBzZWxlY3QsXG4gICAgICAgIHNlbGVjdGVkOiAnJyxcbiAgICAgICAgbmFtZTogJycsXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBiYXNlVmFsdWUsXG4gICAgICAgIHJlc29sdmVcbiAgICAgIH0sIHt9KS5yZW5kZXIodHJ1ZSlcbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgRGlhbG9nLCBGb3JtRGF0YSwgZ2FtZSwgcmVuZGVyVGVtcGxhdGUgKi9cbmV4cG9ydCBjbGFzcyBTa2lsbFZhbHVlRGlhbG9nIHtcbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAobmFtZSA9IG51bGwsIGJhc2VWYWx1ZSA9IG51bGwpIHtcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUoXG4gICAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL3NraWxsLXZhbHVlLmh0bWwnLFxuICAgICAgeyBiYXNlOiBiYXNlVmFsdWUsIG5hbWUgfVxuICAgIClcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBsZXQgZm9ybURhdGEgPSBudWxsXG4gICAgICBjb25zdCBkbGcgPSBuZXcgRGlhbG9nKHtcbiAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU2tpbGxWYWx1ZScsIHsgbmFtZSB9KSxcbiAgICAgICAgY29udGVudDogaHRtbCxcbiAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlZhbGlkYXRlJyksXG4gICAgICAgICAgICBjYWxsYmFjazogaHRtbCA9PiB7XG4gICAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKFxuICAgICAgICAgICAgICAgIGh0bWxbMF0ucXVlcnlTZWxlY3RvcignI3NraWxsLXNlbGVjdC1mb3JtJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmb3JtRGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICd2YWxpZGF0ZScsXG4gICAgICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBkbGcucmVuZGVyKHRydWUpXG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIENoYXRNZXNzYWdlLCBnYW1lLCByZW5kZXJUZW1wbGF0ZSwgdWkgKi9cbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgY2hhdEhlbHBlciB9IGZyb20gJy4uL2hlbHBlci5qcydcbmltcG9ydCB7IENvQzdNZWxlZUluaXRpYXRvciB9IGZyb20gJy4vbWVsZWUtaW5pdGlhdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN01lbGVlVGFyZ2V0IH0gZnJvbSAnLi9tZWxlZS10YXJnZXQuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3TWVsZWVSZXNvbHRpb24ge1xuICBjb25zdHJ1Y3RvciAoXG4gICAgaW5pdGlhdG9yTWVzc2FnZSA9IG51bGwsXG4gICAgdGFyZ2V0TWVzc2FnZSA9IG51bGwsXG4gICAgbWVzc2FnZUlkID0gbnVsbFxuICApIHtcbiAgICB0aGlzLmluaXRpYXRvck1lc3NhZ2UgPSBpbml0aWF0b3JNZXNzYWdlXG4gICAgdGhpcy50YXJnZXRNZXNzYWdlID0gdGFyZ2V0TWVzc2FnZVxuICAgIHRoaXMubWVzc2FnZUlkID0gbWVzc2FnZUlkXG4gIH1cblxuICBhc3luYyBwcmVDcmVhdGVNZXNzYWdlICgpIHtcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGhpcy50ZW1wbGF0ZSwgdGhpcylcblxuICAgIC8vIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHthY3RvcjogdGhpcy5hY3Rvcn0pO1xuICAgIC8vIGlmKCB0aGlzLmFjdG9yLmlzVG9rZW4pIHNwZWFrZXIuYWxpYXMgPSB0aGlzLmFjdG9yLnRva2VuLm5hbWU7XG5cbiAgICAvLyBjb25zdCB1c2VyID0gdGhpcy5hY3Rvci51c2VyID8gdGhpcy5hY3Rvci51c2VyIDogZ2FtZS51c2VyO1xuXG4gICAgY29uc3QgY2hhdERhdGEgPSB7XG4gICAgICB1c2VyOiBnYW1lLnVzZXIuaWQsXG4gICAgICBjb250ZW50OiBodG1sXG4gICAgfVxuXG4gICAgLy8gQWRkIGltYWdlIHRvIGNhcmQuXG4gICAgLy8gZGF0YS5mbGFncyA9IHtcbiAgICAvLyAgIGltZzogdGhpcy5hY3Rvci5pc1Rva2VuID8gdGhpcy5hY3Rvci50b2tlbi5kYXRhLmltZzogdGhpcy5hY3Rvci5pbWdcbiAgICAvLyB9O1xuXG4gICAgY29uc3Qgcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgaWYgKFsnZ21yb2xsJywgJ2JsaW5kcm9sbCddLmluY2x1ZGVzKHJvbGxNb2RlKSkge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgfVxuICAgIC8vIGlmICggcm9sbE1vZGUgPT09ICdibGluZHJvbGwnICkgY2hhdERhdGFbJ2JsaW5kJ10gPSB0cnVlO1xuICAgIGNoYXREYXRhLmJsaW5kID0gZmFsc2VcblxuICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKVxuICAgIHRoaXMubWVzc2FnZUlkID0gY2hhdE1lc3NhZ2UuaWRcbiAgICByZXR1cm4gY2hhdE1lc3NhZ2VcbiAgfVxuXG4gIGdldCBkaXNwbGF5QWN0b3JPbkNhcmQgKCkge1xuICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNwbGF5QWN0b3JPbkNhcmQnKVxuICB9XG5cbiAgZ2V0IHRhcmdldCAoKSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0TWVzc2FnZSkge1xuICAgICAgcmV0dXJuIENvQzdNZWxlZVRhcmdldC5nZXRGcm9tTWVzc2FnZUlkKHRoaXMudGFyZ2V0TWVzc2FnZSlcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCB0YXJnZXRUb2tlbiAoKSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0KSByZXR1cm4gY2hhdEhlbHBlci5nZXRUb2tlbkZyb21LZXkodGhpcy50YXJnZXQuYWN0b3JLZXkpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBpbml0aWF0b3IgKCkge1xuICAgIGlmICh0aGlzLmluaXRpYXRvck1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBDb0M3TWVsZWVJbml0aWF0b3IuZ2V0RnJvbU1lc3NhZ2VJZCh0aGlzLmluaXRpYXRvck1lc3NhZ2UpXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgaW5pdGlhdG9yVG9rZW4gKCkge1xuICAgIGlmICh0aGlzLmluaXRpYXRvcikge1xuICAgICAgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHRoaXMuaW5pdGlhdG9yLmFjdG9yS2V5KVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZSAoKSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICBzd2l0Y2ggKHRoaXMudGFyZ2V0LmFjdGlvbikge1xuICAgICAgICBjYXNlICdub1Jlc3BvbnNlJzpcbiAgICAgICAgICBpZiAodGhpcy5pbml0aWF0b3Iucm9sbC5zdWNjZXNzTGV2ZWwgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuV2lubmVyUm9sbERhbWFnZScsIHtcbiAgICAgICAgICAgICAgbmFtZTogdGhpcy5pbml0aWF0b3IubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gJ3JvbGwtbWVsZWUtZGFtYWdlJ1xuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5pdGlhdG9yTWlzc2VkJywge1xuICAgICAgICAgICAgICBuYW1lOiB0aGlzLmluaXRpYXRvci5uYW1lXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy53aW5uZXIgPSB0aGlzLmluaXRpYXRvclxuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy53aW5uZXIgPSB0aGlzLmluaXRpYXRvclxuICAgICAgICAgIHRoaXMud2lubmVySW1nID0gdGhpcy5pbml0aWF0b3Iud2VhcG9uLmltZ1xuICAgICAgICAgIHRoaXMud2lubmVyVGl0bGUgPSB0aGlzLmluaXRpYXRvci53ZWFwb24ubmFtZVxuICAgICAgICAgIHRoaXMubG9vc2VyID0gdGhpcy50YXJnZXRcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ2RvZGdlJzpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmluaXRpYXRvci5yb2xsLnN1Y2Nlc3NMZXZlbCA8PSAwICYmXG4gICAgICAgICAgICB0aGlzLnRhcmdldC5yb2xsLnN1Y2Nlc3NMZXZlbCA8PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob1dpbm5lcicpXG4gICAgICAgICAgICB0aGlzLndpbm5lciA9IG51bGxcbiAgICAgICAgICAgIHRoaXMucm9sbERhbWFnZSA9IGZhbHNlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhdG9yLnJvbGwuc3VjY2Vzc0xldmVsID4gdGhpcy50YXJnZXQucm9sbC5zdWNjZXNzTGV2ZWxcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0U3RyaW5nID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5XaW5uZXJSb2xsRGFtYWdlJywge1xuICAgICAgICAgICAgICBuYW1lOiB0aGlzLmluaXRpYXRvci5uYW1lXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy53aW5uZXIgPSB0aGlzLmluaXRpYXRvclxuICAgICAgICAgICAgdGhpcy53aW5uZXJJbWcgPSB0aGlzLmluaXRpYXRvci53ZWFwb24uaW1nXG4gICAgICAgICAgICB0aGlzLndpbm5lclRpdGxlID0gdGhpcy5pbml0aWF0b3Iud2VhcG9uLm5hbWVcbiAgICAgICAgICAgIHRoaXMubG9vc2VyID0gdGhpcy50YXJnZXRcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gJ3JvbGwtbWVsZWUtZGFtYWdlJ1xuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLmluaXRpYXRvci5yb2xsLnN1Y2Nlc3NMZXZlbCA8PSB0aGlzLnRhcmdldC5yb2xsLnN1Y2Nlc3NMZXZlbFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRvZGdlU3VjY2VzcycsIHtcbiAgICAgICAgICAgICAgbmFtZTogdGhpcy50YXJnZXQubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMud2lubmVyID0gdGhpcy50YXJnZXRcbiAgICAgICAgICAgIHRoaXMubG9vc2VyID0gdGhpcy5pbml0aWF0b3JcbiAgICAgICAgICAgIHRoaXMud2lubmVySW1nID0gdGhpcy50YXJnZXQuc2tpbGwuaW1nXG4gICAgICAgICAgICB0aGlzLndpbm5lclRpdGxlID0gdGhpcy50YXJnZXQuc2tpbGwubmFtZVxuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSAnZG9kZ2UnXG4gICAgICAgICAgICB0aGlzLnJvbGxEYW1hZ2UgPSBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnZmlnaHRCYWNrJzpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmluaXRpYXRvci5yb2xsLnN1Y2Nlc3NMZXZlbCA8PSAwICYmXG4gICAgICAgICAgICB0aGlzLnRhcmdldC5yb2xsLnN1Y2Nlc3NMZXZlbCA8PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob1dpbm5lcicpXG4gICAgICAgICAgICB0aGlzLndpbm5lciA9IG51bGxcbiAgICAgICAgICAgIHRoaXMucm9sbERhbWFnZSA9IGZhbHNlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhdG9yLnJvbGwuc3VjY2Vzc0xldmVsID49IHRoaXMudGFyZ2V0LnJvbGwuc3VjY2Vzc0xldmVsXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuV2lubmVyUm9sbERhbWFnZScsIHtcbiAgICAgICAgICAgICAgbmFtZTogdGhpcy5pbml0aWF0b3IubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMud2lubmVyID0gdGhpcy5pbml0aWF0b3JcbiAgICAgICAgICAgIHRoaXMud2lubmVySW1nID0gdGhpcy5pbml0aWF0b3Iud2VhcG9uLmltZ1xuICAgICAgICAgICAgdGhpcy53aW5uZXJUaXRsZSA9IHRoaXMuaW5pdGlhdG9yLndlYXBvbi5uYW1lXG4gICAgICAgICAgICB0aGlzLmxvb3NlciA9IHRoaXMudGFyZ2V0XG4gICAgICAgICAgICB0aGlzLnJvbGxEYW1hZ2UgPSB0cnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhdG9yLnJvbGwuc3VjY2Vzc0xldmVsIDw9IHRoaXMudGFyZ2V0LnJvbGwuc3VjY2Vzc0xldmVsXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHZlcmlmaWVyIGxhIGNvbmRpdGlvbiA8PSB2cyA8XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuV2lubmVyUm9sbERhbWFnZScsIHtcbiAgICAgICAgICAgICAgbmFtZTogdGhpcy50YXJnZXQubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMud2lubmVyID0gdGhpcy50YXJnZXRcbiAgICAgICAgICAgIHRoaXMud2lubmVySW1nID0gdGhpcy50YXJnZXQud2VhcG9uLmltZ1xuICAgICAgICAgICAgdGhpcy53aW5uZXJUaXRsZSA9IHRoaXMudGFyZ2V0LndlYXBvbi5uYW1lXG4gICAgICAgICAgICB0aGlzLmxvb3NlciA9IHRoaXMuaW5pdGlhdG9yXG4gICAgICAgICAgICB0aGlzLnJvbGxEYW1hZ2UgPSB0cnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdtYW5ldXZlcic6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pbml0aWF0b3Iucm9sbC5zdWNjZXNzTGV2ZWwgPD0gMCAmJlxuICAgICAgICAgICAgdGhpcy50YXJnZXQucm9sbC5zdWNjZXNzTGV2ZWwgPD0gMFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm9XaW5uZXInKVxuICAgICAgICAgICAgdGhpcy53aW5uZXIgPSBudWxsXG4gICAgICAgICAgICB0aGlzLnJvbGxEYW1hZ2UgPSBmYWxzZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLmluaXRpYXRvci5yb2xsLnN1Y2Nlc3NMZXZlbCA+PSB0aGlzLnRhcmdldC5yb2xsLnN1Y2Nlc3NMZXZlbFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lldpbm5lclJvbGxEYW1hZ2UnLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHRoaXMuaW5pdGlhdG9yLm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLndpbm5lciA9IHRoaXMuaW5pdGlhdG9yXG4gICAgICAgICAgICB0aGlzLndpbm5lckltZyA9IHRoaXMuaW5pdGlhdG9yLndlYXBvbi5pbWdcbiAgICAgICAgICAgIHRoaXMud2lubmVyVGl0bGUgPSB0aGlzLmluaXRpYXRvci53ZWFwb24ubmFtZVxuICAgICAgICAgICAgdGhpcy5sb29zZXIgPSB0aGlzLnRhcmdldFxuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLmluaXRpYXRvci5yb2xsLnN1Y2Nlc3NMZXZlbCA8PSB0aGlzLnRhcmdldC5yb2xsLnN1Y2Nlc3NMZXZlbFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1hbmV1dmVyU3VjY2VzcycsIHtcbiAgICAgICAgICAgICAgbmFtZTogdGhpcy50YXJnZXQubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMud2lubmVyID0gdGhpcy50YXJnZXRcbiAgICAgICAgICAgIHRoaXMud2lubmVySW1nID0gdGhpcy50YXJnZXQuc2tpbGwuZGF0YS5pbWdcbiAgICAgICAgICAgIHRoaXMud2lubmVyVGl0bGUgPSB0aGlzLnRhcmdldC5za2lsbC5uYW1lXG4gICAgICAgICAgICB0aGlzLmxvb3NlciA9IHRoaXMuaW5pdGlhdG9yXG4gICAgICAgICAgICB0aGlzLnJvbGxEYW1hZ2UgPSBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5pbml0aWF0b3Iucm9sbC5zdWNjZXNzTGV2ZWwgPiAwKSB7XG4gICAgICB0aGlzLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuV2lubmVyUm9sbERhbWFnZScsIHtcbiAgICAgICAgbmFtZTogdGhpcy5pbml0aWF0b3IubmFtZVxuICAgICAgfSlcbiAgICAgIHRoaXMud2lubmVyID0gdGhpcy5pbml0aWF0b3JcbiAgICAgIHRoaXMucm9sbERhbWFnZSA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkluaXRpYXRvck1pc3NlZCcsIHtcbiAgICAgICAgbmFtZTogdGhpcy5pbml0aWF0b3IubmFtZVxuICAgICAgfSlcbiAgICAgIHRoaXMud2lubmVyID0gdGhpcy5pbml0aWF0b3JcbiAgICAgIHRoaXMucm9sbERhbWFnZSA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMud2lubmVyKSB7XG4gICAgICBpZiAodGhpcy53aW5uZXIucm9sbC5zdWNjZXNzTGV2ZWwgPj0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lKSB7XG4gICAgICAgIHRoaXMud2lubmVyLnJvbGwuY3JpdGljYWxEYW1hZ2UgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndpbm5lci5yb2xsLmNyaXRpY2FsRGFtYWdlID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZVxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCB0aGlzKVxuICAgIGlmICh0aGlzLm1lc3NhZ2VJZCkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuICAgICAgY29uc3Qgc3BlYWtlckRhdGEgPSB7fVxuICAgICAgaWYgKHRoaXMud2lubmVyKSB7XG4gICAgICAgIGlmICh0aGlzLndpbm5lci50b2tlbikgc3BlYWtlckRhdGEudG9rZW4gPSB0aGlzLndpbm5lci50b2tlbi5kb2N1bW1lbnRcbiAgICAgICAgaWYgKHRoaXMud2lubmVyLmFjdG9yKSBzcGVha2VyRGF0YS5hY3RvciA9IHRoaXMud2lubmVyLmFjdG9yXG4gICAgICB9XG4gICAgICBjb25zdCBzcGVha2VyID0gdGhpcy53aW5uZXIgPyBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHNwZWFrZXJEYXRhKSA6IG51bGxcbiAgICAgIGNvbnN0IHVzZXIgPVxuICAgICAgICB0aGlzLndpbm5lciAmJiB0aGlzLndpbm5lci5hY3Rvci51c2VyXG4gICAgICAgICAgPyB0aGlzLndpbm5lci5hY3Rvci51c2VyXG4gICAgICAgICAgOiBnYW1lLnVzZXJcblxuICAgICAgbGV0IG1zZ1xuICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgIC8vIFRPRE86IElmIGNhcmQgaXNuJ3QgZm91bmQgKGNhcmQgd2FzIGRlbGV0ZWQgYmVmb3JlIGNvbXBsZXRpb24pID9cbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKCdSZXNvbGl0aW9uIGNhcmQgbWlzc2luZywgd2FzIGRlbGV0ZWQgPycpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHNwZWFrZXIpIHtcbiAgICAgICAgbXNnID0gYXdhaXQgbWVzc2FnZS51cGRhdGUoe1xuICAgICAgICAgIC8vIFRPRE86IElmIGNhcmQgaXNuJ3QgZm91bmQgKGNhcmQgd2FzIGRlbGV0ZWQgYmVmb3JlIGNvbXBsZXRpb24pID9cbiAgICAgICAgICB1c2VyOiB1c2VyLmlkLFxuICAgICAgICAgIHNwZWFrZXIsXG4gICAgICAgICAgY29udGVudDogaHRtbFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXNnID0gYXdhaXQgbWVzc2FnZS51cGRhdGUoe1xuICAgICAgICAgIHVzZXI6IHVzZXIuaWQsXG4gICAgICAgICAgY29udGVudDogaHRtbFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgICByZXR1cm4gbXNnXG4gICAgfVxuICB9XG5cbiAgZ2V0IHRlbXBsYXRlICgpIHtcbiAgICByZXR1cm4gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9jb21iYXQvbWVsZWUtcmVzb2x1dGlvbi5odG1sJ1xuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ2hhdE1lc3NhZ2UsIENPTlNULCBEaWFsb2csIEZvcm1EYXRhLCBnYW1lLCByZW5kZXJUZW1wbGF0ZSwgdWkgKi9cbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgY2hhdEhlbHBlciwgQ29DN1JvbGwgfSBmcm9tICcuLi9oZWxwZXIuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdCB9IGZyb20gJy4uLy4uL2NoYXQuanMnXG5pbXBvcnQgeyBDaGF0Q2FyZEFjdG9yIH0gZnJvbSAnLi4vY2FyZC1hY3Rvci5qcydcbmltcG9ydCB7IENvQzdNZWxlZVJlc29sdGlvbiB9IGZyb20gJy4vbWVsZWUtcmVzb2x1dGlvbi5qcydcbmltcG9ydCB7IENvQzdNZWxlZUluaXRpYXRvciB9IGZyb20gJy4vbWVsZWUtaW5pdGlhdG9yLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN01lbGVlVGFyZ2V0IGV4dGVuZHMgQ2hhdENhcmRBY3RvciB7XG4gIGNvbnN0cnVjdG9yIChhY3RvcktleSwgcGFyZW50TWVzc2FnZUlkID0gbnVsbCwgZmFzdEZvcndhcmQgPSBmYWxzZSkge1xuICAgIHN1cGVyKGFjdG9yS2V5LCBmYXN0Rm9yd2FyZClcbiAgICB0aGlzLmFjdG9yS2V5ID0gYWN0b3JLZXlcbiAgICB0aGlzLmluaXRpYXRvcktleSA9IG51bGxcbiAgICB0aGlzLnBhcmVudE1lc3NhZ2VJZCA9IHBhcmVudE1lc3NhZ2VJZFxuICAgIHRoaXMuZmFzdEZvcndhcmQgPSBmYXN0Rm9yd2FyZFxuICAgIHRoaXMucmVzb2x2ZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5vdXRudW1iZXJlZCA9IGZhbHNlXG4gICAgdGhpcy5zdXJwcmlzZWQgPSBmYWxzZVxuICAgIHRoaXMuYXV0b1N1Y2Nlc3MgPSBmYWxzZVxuICAgIHRoaXMuYWR2YW50YWdlID0gZmFsc2VcbiAgICB0aGlzLmRpc2FkdmFudGFnZSA9IGZhbHNlXG5cbiAgICB0aGlzLm1lc3NhZ2VJZCA9IG51bGxcbiAgICB0aGlzLnNraWxsSWQgPSBudWxsXG4gICAgdGhpcy5pdGVtSWQgPSBudWxsXG4gICAgdGhpcy5kb2RnaW5nID0gZmFsc2VcbiAgICB0aGlzLm5vdFJlc3BvbmRpbmcgPSBmYWxzZVxuICAgIHRoaXMuZmlnaHRpbmdCYWNrID0gZmFsc2VcbiAgICB0aGlzLm1hbmV1dmVyaW5nID0gZmFsc2VcbiAgfVxuXG4gIGdldCBhY3Rpb25TZWxlY3RlZCAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuZG9kZ2luZyB8fFxuICAgICAgdGhpcy5ub3RSZXNwb25kaW5nIHx8XG4gICAgICB0aGlzLmZpZ2h0aW5nQmFjayB8fFxuICAgICAgdGhpcy5tYW5ldXZlcmluZ1xuICAgIClcbiAgfVxuXG4gIGdldCBhY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmRvZGdpbmcpIHJldHVybiAnZG9kZ2UnXG4gICAgaWYgKHRoaXMubm90UmVzcG9uZGluZykgcmV0dXJuICdub1Jlc3BvbnNlJ1xuICAgIGlmICh0aGlzLmZpZ2h0aW5nQmFjaykgcmV0dXJuICdmaWdodEJhY2snXG4gICAgaWYgKHRoaXMubWFuZXV2ZXJpbmcpIHJldHVybiAnbWFuZXV2ZXInXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCB3ZWFwb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFjdG9yLml0ZW1zLmdldCh0aGlzLml0ZW1JZClcbiAgfVxuXG4gIGdldCBza2lsbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0b3IuaXRlbXMuZ2V0KHRoaXMuc2tpbGxJZClcbiAgfVxuXG4gIHNldCBpbml0aWF0b3JLZXkgKHgpIHtcbiAgICB0aGlzLl9pbml0aWF0b3JLZXkgPSB4XG4gICAgdGhpcy50YXJnZXRLZXkgPSB4XG4gIH1cblxuICBnZXQgaW5pdGlhdG9yS2V5ICgpIHtcbiAgICBpZiAoIXRoaXMuX2luaXRpYXRvcktleSkge1xuICAgICAgaWYgKCF0aGlzLl9pbml0aWF0b3IgJiYgdGhpcy5wYXJlbnRNZXNzYWdlSWQpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhdG9yID0gQ29DN01lbGVlSW5pdGlhdG9yLmdldEZyb21NZXNzYWdlSWQoXG4gICAgICAgICAgdGhpcy5wYXJlbnRNZXNzYWdlSWRcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2luaXRpYXRvcikgdGhpcy5faW5pdGlhdG9yS2V5ID0gdGhpcy5faW5pdGlhdG9yLmFjdG9yS2V5XG4gICAgfVxuICAgIGlmICghdGhpcy5faW5pdGlhdG9yS2V5KSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBgTm8gaW5pdGlhdG9yIGZvdW5kIGZvciB0YXJnZXQgOiAke3RoaXMuYWN0b3IubmFtZX1gXG4gICAgICApXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faW5pdGlhdG9yS2V5XG4gIH1cblxuICBnZXQgaW5pdGlhdG9yICgpIHtcbiAgICBpZiAoIXRoaXMuaW5pdGlhdG9yS2V5KSB7XG4gICAgICBpZiAodGhpcy5wYXJlbnRNZXNzYWdlSWQpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhdG9yID0gQ29DN01lbGVlSW5pdGlhdG9yLmdldEZyb21NZXNzYWdlSWQoXG4gICAgICAgICAgdGhpcy5wYXJlbnRNZXNzYWdlSWRcbiAgICAgICAgKVxuICAgICAgICB0aGlzLmluaXRpYXRvcktleSA9IHRoaXMuX2luaXRpYXRvci5hY3RvcktleVxuICAgICAgfSBlbHNlIHJldHVybiBudWxsXG4gICAgfVxuICAgIHJldHVybiBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLmluaXRpYXRvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gIH1cblxuICBnZXQgbWVsZWVJbml0aWF0b3IgKCkge1xuICAgIGlmICghdGhpcy5faW5pdGlhdG9yKSB7XG4gICAgICB0aGlzLl9pbml0aWF0b3IgPSBDb0M3TWVsZWVJbml0aWF0b3IuZ2V0RnJvbU1lc3NhZ2VJZChcbiAgICAgICAgdGhpcy5wYXJlbnRNZXNzYWdlSWRcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYXRvclxuICB9XG5cbiAgZ2V0IHRlbXBsYXRlICgpIHtcbiAgICByZXR1cm4gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9jb21iYXQvbWVsZWUtdGFyZ2V0Lmh0bWwnXG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbU1lc3NhZ2VJZCAobWVzc2FnZUlkKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VJZClcbiAgICBpZiAoIW1lc3NhZ2UpIHJldHVybiBudWxsXG4gICAgY29uc3QgY2FyZCA9ICQobWVzc2FnZS5jb250ZW50KVswXVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gQ29DN01lbGVlVGFyZ2V0LmdldEZyb21DYXJkKGNhcmQsIG1lc3NhZ2VJZClcbiAgICB0YXJnZXQubWVzc2FnZUlkID0gbWVzc2FnZUlkXG5cbiAgICByZXR1cm4gdGFyZ2V0XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlQ2FyZFN3aXRjaCAoZXZlbnQsIHB1Ymxpc2hVcGRhdGUgPSB0cnVlKSB7XG4gICAgY29uc3QgY2FyZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLm1lbGVlLnRhcmdldCcpXG4gICAgY29uc3QgZmxhZyA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5mbGFnXG4gICAgY29uc3QgY2FtZWxGbGFnID0gY2hhdEhlbHBlci5oeXBoZW5Ub0NhbWVsQ2FzZShmbGFnKVxuXG4gICAgLy8gdXBkYXRlIG9ubHkgZm9yIGxvY2FsIHBsYXllclxuICAgIGlmICghcHVibGlzaFVwZGF0ZSkge1xuICAgICAgY2FyZC5kYXRhc2V0W2NhbWVsRmxhZ10gPSBjYXJkLmRhdGFzZXRbY2FtZWxGbGFnXSAhPT0gJ3RydWUnXG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ3N3aXRjaGVkLW9uJylcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5zZWxlY3RlZCA9IGNhcmQuZGF0YXNldFtjYW1lbEZsYWddXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZSBjYXJkIGZvciBhbGwgcGxheWVyXG4gICAgICBjb25zdCB0YXJnZXQgPSBDb0M3TWVsZWVUYXJnZXQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgIHRhcmdldC50b2dnbGVGbGFnKGZsYWcpXG4gICAgICB0YXJnZXQudXBkYXRlQ2hhdENhcmQoKVxuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZUZsYWcgKGZsYWdOYW1lKSB7XG4gICAgY29uc3QgZmxhZyA9IGZsYWdOYW1lLmluY2x1ZGVzKCctJylcbiAgICAgID8gY2hhdEhlbHBlci5oeXBoZW5Ub0NhbWVsQ2FzZShmbGFnTmFtZSlcbiAgICAgIDogZmxhZ05hbWVcbiAgICB0aGlzW2ZsYWddID0gIXRoaXNbZmxhZ11cbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUNoYXRDYXJkICgpIHtcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGhpcy50ZW1wbGF0ZSwgdGhpcylcblxuICAgIGNvbnN0IHNwZWFrZXJEYXRhID0ge31cbiAgICBjb25zdCB0b2tlbiA9IGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHRoaXMuYWN0b3JLZXkpXG4gICAgaWYgKHRva2VuKSBzcGVha2VyRGF0YS50b2tlbiA9IHRva2VuLmRvY3VtZW50XG4gICAgZWxzZSBzcGVha2VyRGF0YS5hY3RvciA9IHRoaXMuYWN0b3JcblxuICAgIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHNwZWFrZXJEYXRhKVxuICAgIGlmICh0aGlzLmFjdG9yLmlzVG9rZW4pIHNwZWFrZXIuYWxpYXMgPSB0aGlzLmFjdG9yLnRva2VuLm5hbWVcblxuICAgIGxldCB1c2VyID0gZ2FtZS51c2VyXG4gICAgaWYgKHR5cGVvZiB0aGlzLmFjdG9yLnVzZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBsZXQgb3duZXJzID0gW11cbiAgICAgIGNvbnN0IGdtcyA9IGdhbWUudXNlcnMuZmlsdGVyKGEgPT4gYS5pc0dNKS5tYXAoYSA9PiBhLmlkKVxuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5hY3Rvci5vd25lcnNoaXApKSB7XG4gICAgICAgIGlmICh2ID09PSBDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk9XTkVSKSB7XG4gICAgICAgICAgaWYgKGsgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgb3duZXJzID0gZ2FtZS51c2Vycy5tYXAoYSA9PiBhLmlkKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFnbXMuaW5jbHVkZXMoaykpIHtcbiAgICAgICAgICAgIG93bmVycy5wdXNoKGspXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgY29udGVudCA9ICcnXG4gICAgICBzd2l0Y2ggKG93bmVycy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIC8vIEdNXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmICh0eXBlb2YgZ2FtZS51c2Vycy5nZXQob3duZXJzWzBdKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHVzZXIgPSBnYW1lLnVzZXJzLmdldChvd25lcnNbMF0pXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29udGVudCA9XG4gICAgICAgICAgICAnPHA+JyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NZXNzYWdlU2VsZWN0U2luZ2xlVXNlckZvclRhcmdldCcpXG4gICAgICAgICAgY29udGVudCA9IGNvbnRlbnQgKyAnPGZvcm0gaWQ9XCJzZWxlY3Rmb3JtXCI+PHNlbGVjdCBuYW1lPVwidXNlclwiPidcbiAgICAgICAgICBmb3IgKGNvbnN0IGsgb2Ygb3duZXJzKSB7XG4gICAgICAgICAgICBjb250ZW50ID1cbiAgICAgICAgICAgICAgY29udGVudCArXG4gICAgICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiJyArXG4gICAgICAgICAgICAgIGsgK1xuICAgICAgICAgICAgICAnXCI+JyArXG4gICAgICAgICAgICAgIGdhbWUudXNlcnMuZ2V0KGspLm5hbWUgK1xuICAgICAgICAgICAgICAnPC9vcHRpb24+J1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250ZW50ID0gY29udGVudCArICc8L3NlbGVjdD48L2Zvcm0+PC9wPidcbiAgICAgICAgICBhd2FpdCBEaWFsb2cucHJvbXB0KHtcbiAgICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICdDb0M3Lk1lc3NhZ2VUaXRsZVNlbGVjdFNpbmdsZVVzZXJGb3JUYXJnZXQnXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBodG1sID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoXG4gICAgICAgICAgICAgICAgaHRtbFswXS5xdWVyeVNlbGVjdG9yKCcjc2VsZWN0Zm9ybScpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIGZvcm1EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgICAgICAgdXNlciA9IGdhbWUudXNlcnMuZ2V0KHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5hY3Rvci51c2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdXNlciA9IHRoaXMuYWN0b3IudXNlclxuICAgIH1cblxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgdXNlcjogdXNlci5pZCxcbiAgICAgIHNwZWFrZXIsXG4gICAgICBjb250ZW50OiBodG1sXG4gICAgfVxuXG4gICAgaWYgKFsnZ21yb2xsJywgJ2JsaW5kcm9sbCddLmluY2x1ZGVzKHRoaXMucm9sbE1vZGUpKSB7XG4gICAgICBjaGF0RGF0YS53aGlzcGVyID0gQ2hhdE1lc3NhZ2UuZ2V0V2hpc3BlclJlY2lwaWVudHMoJ0dNJylcbiAgICB9XG4gICAgLy8gaWYgKCB0aGlzLmlzQmxpbmQgKSBjaGF0RGF0YVsnYmxpbmQnXSA9IHRydWU7XG4gICAgY2hhdERhdGEuYmxpbmQgPSBmYWxzZVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IENoYXRNZXNzYWdlLmNyZWF0ZShjaGF0RGF0YSlcblxuICAgIHRoaXMubWVzc2FnZUlkID0gbWVzc2FnZS5pZFxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cblxuICBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuICAgIGlmICghZ2FtZS51c2VyLmlzR00gJiYgbWVzc2FnZS51c2VyLmlkICE9PSBnYW1lLnVzZXIuaWQpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlVuYWJsZVRvSW50ZXJhY3RXaXRoQ2hhdENhcmQnKVxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCB0aGlzKVxuXG4gICAgY29uc3QgbXNnID0gYXdhaXQgbWVzc2FnZS51cGRhdGUoeyBjb250ZW50OiBodG1sIH0pXG4gICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgcmV0dXJuIG1zZ1xuICB9XG5cbiAgYXN5bmMgZ2V0VXBkYXRlZENoYXRDYXJkICgpIHtcbiAgICByZW5kZXJUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCB0aGlzKS50aGVuKGh0bWwgPT4ge1xuICAgICAgcmV0dXJuIGh0bWxcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHVwZGF0ZVNlbGVjdGVkIChjYXJkLCBldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IENvQzdNZWxlZVRhcmdldC5nZXRGcm9tQ2FyZChjYXJkKVxuXG4gICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uKSB7XG4gICAgICBjYXNlICdkb2RnZSc6XG4gICAgICAgIHRhcmdldC5kb2RnaW5nID0gdHJ1ZVxuICAgICAgICB0YXJnZXQubm90UmVzcG9uZGluZyA9IGZhbHNlXG4gICAgICAgIHRhcmdldC5maWdodGluZ0JhY2sgPSBmYWxzZVxuICAgICAgICB0YXJnZXQubWFuZXV2ZXJpbmcgPSBmYWxzZVxuICAgICAgICB0YXJnZXQuc2tpbGxJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbElkXG4gICAgICAgIHRhcmdldC5pdGVtSWQgPSBudWxsXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ25vUmVzcG9uc2UnOlxuICAgICAgICB0YXJnZXQuZG9kZ2luZyA9IGZhbHNlXG4gICAgICAgIHRhcmdldC5ub3RSZXNwb25kaW5nID0gdHJ1ZVxuICAgICAgICB0YXJnZXQuZmlnaHRpbmdCYWNrID0gZmFsc2VcbiAgICAgICAgdGFyZ2V0Lm1hbmV1dmVyaW5nID0gZmFsc2VcbiAgICAgICAgdGFyZ2V0LnNraWxsSWQgPSBudWxsXG4gICAgICAgIHRhcmdldC5pdGVtSWQgPSBudWxsXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ2ZpZ2h0QmFjayc6XG4gICAgICAgIHRhcmdldC5kb2RnaW5nID0gZmFsc2VcbiAgICAgICAgdGFyZ2V0Lm5vdFJlc3BvbmRpbmcgPSBmYWxzZVxuICAgICAgICB0YXJnZXQuZmlnaHRpbmdCYWNrID0gdHJ1ZVxuICAgICAgICB0YXJnZXQubWFuZXV2ZXJpbmcgPSBmYWxzZVxuICAgICAgICB0YXJnZXQuc2tpbGxJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbElkXG4gICAgICAgIHRhcmdldC5pdGVtSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQud2VhcG9uSWRcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnbWFuZXV2ZXInOlxuICAgICAgICB0YXJnZXQuZG9kZ2luZyA9IGZhbHNlXG4gICAgICAgIHRhcmdldC5ub3RSZXNwb25kaW5nID0gZmFsc2VcbiAgICAgICAgdGFyZ2V0LmZpZ2h0aW5nQmFjayA9IGZhbHNlXG4gICAgICAgIHRhcmdldC5tYW5ldXZlcmluZyA9IHRydWVcbiAgICAgICAgdGFyZ2V0LnNraWxsSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICB0YXJnZXQuaXRlbUlkID0gbnVsbFxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIHRhcmdldC51cGRhdGVDaGF0Q2FyZCgpXG5cbiAgICByZXR1cm4gdGFyZ2V0XG4gIH1cblxuICBhc3luYyBwZXJmb3JtU2tpbGxDaGVjayAoc2tpbGxJZCA9IG51bGwsIHB1Ymxpc2ggPSBmYWxzZSkge1xuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgLy8gQ29tYmF0IHJvbGwgY2Fubm90IGJlIGJsaW5kIG9yIHVua25vd25cbiAgICBjaGVjay5pc0JsaW5kID0gZmFsc2VcbiAgICBjaGVjay5pc1Vua29ud24gPSBmYWxzZVxuICAgIGNoZWNrLnJlZmVyZW5jZU1lc3NhZ2VJZCA9IHRoaXMubWVzc2FnZUlkXG4gICAgY2hlY2sucm9sbFR5cGUgPSAnb3Bwb3NlZCdcbiAgICBjaGVjay5zaWRlID0gJ3RhcmdldCdcbiAgICBjaGVjay5hY3Rpb24gPSB0aGlzLmFjdGlvblxuICAgIGNoZWNrLmFjdG9yID0gdGhpcy5hY3RvclxuICAgIGNoZWNrLml0ZW0gPSB0aGlzLml0ZW1JZFxuICAgIGNoZWNrLnNraWxsID0gc2tpbGxJZFxuICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICBjaGVjay5kaWNlTW9kaWZpZXIgPSAwXG5cbiAgICBpZiAodGhpcy5kaXNhZHZhbnRhZ2UpIGNoZWNrLmRpY2VNb2RpZmllciAtPSAxXG4gICAgaWYgKHRoaXMuYWR2YW50YWdlKSBjaGVjay5kaWNlTW9kaWZpZXIgKz0gMVxuXG4gICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgdGhpcy5jaGVjayA9IGNoZWNrXG4gICAgdGhpcy5yb2xsZWQgPSB0cnVlXG4gICAgdGhpcy5yZXNvbHZlZCA9IHRydWVcbiAgICBpZiAocHVibGlzaCkgY2hlY2sudG9NZXNzYWdlKClcblxuICAgIHJldHVybiBjaGVja1xuICB9XG5cbiAgYXN5bmMgcHVibGlzaE5vUmVwb25zZVJlc3VsdCAoKSB7XG4gICAgdGhpcy5yb2xsZWQgPSB0cnVlXG4gICAgdGhpcy5yZXNvbHZlZCA9IHRydWVcbiAgICB0aGlzLm5vdFJlc3BvbmRpbmcgPSB0cnVlXG4gICAgY29uc3QgcmVzb2x1dGlvbkNhcmQgPSBuZXcgQ29DN01lbGVlUmVzb2x0aW9uKFxuICAgICAgdGhpcy5wYXJlbnRNZXNzYWdlSWQsXG4gICAgICB0aGlzLm1lc3NhZ2VJZFxuICAgIClcblxuICAgIGNvbnN0IHJlc29sdXRpb25NZXNzYWdlID0gYXdhaXQgcmVzb2x1dGlvbkNhcmQucHJlQ3JlYXRlTWVzc2FnZSgpXG5cbiAgICB0aGlzLnJlc29sdXRpb25DYXJkID0gcmVzb2x1dGlvbk1lc3NhZ2UuaWRcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIGFzeW5jIHB1Ymxpc2hDaGVja1Jlc3VsdCAoY2hlY2sgPSBudWxsKSB7XG4gICAgaWYgKCFjaGVjayAmJiAhdGhpcy5jaGVjaykgcmV0dXJuIG51bGxcblxuICAgIGlmIChjaGVjaykgdGhpcy5jaGVjayA9IGNoZWNrXG4gICAgdGhpcy5yb2xsID0gQ29DN1JvbGwuZ2V0RnJvbUNoZWNrKHRoaXMuY2hlY2spXG4gICAgdGhpcy5yb2xsZWQgPSB0cnVlXG5cbiAgICB0aGlzLnJvbGwucm9sbEljb25zID0gW11cbiAgICBpZiAodGhpcy5yb2xsLmNyaXRpY2FsKSB7XG4gICAgICB0aGlzLnJvbGwucm9sbENvbG9yID0gJ2dvbGRlbnJvZCdcbiAgICAgIHRoaXMucm9sbC5yb2xsVGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ3JpdGljYWxTdWNjZXNzJylcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsSWNvbnMucHVzaCgnbWVkYWwnKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5yb2xsLmZ1bWJsZSkge1xuICAgICAgdGhpcy5yb2xsLnJvbGxDb2xvciA9ICdkYXJrcmVkJ1xuICAgICAgdGhpcy5yb2xsLnJvbGxUaXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GdW1ibGUnKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDQ7IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy5yb2xsLnJvbGxJY29ucy5wdXNoKCdzcGlkZXInKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5yb2xsLnN1Y2Nlc3MpIHtcbiAgICAgIHRoaXMucm9sbC5yb2xsQ29sb3IgPSAnZ29sZGVucm9kJ1xuICAgICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwucmVndWxhciA9PT0gdGhpcy5yb2xsLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlZ3VsYXJTdWNjZXNzJylcbiAgICAgIH1cbiAgICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQgPT09IHRoaXMucm9sbC5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgICAgdGhpcy5yb2xsLnJvbGxUaXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXJkU3VjY2VzcycpXG4gICAgICB9XG4gICAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lID09PSB0aGlzLnJvbGwuc3VjY2Vzc0xldmVsKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsVGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXh0cmVtZVN1Y2Nlc3MnKVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMucm9sbC5zdWNjZXNzTGV2ZWw7IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy5yb2xsLnJvbGxJY29ucy5wdXNoKCdzdGFyJylcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb2xsLnJvbGxDb2xvciA9ICdibGFjaydcbiAgICAgIHRoaXMucm9sbC5yb2xsVGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRmFpbHVyZScpXG4gICAgICB0aGlzLnJvbGwucm9sbEljb25zLnB1c2goJ3NrdWxsJylcbiAgICB9XG5cbiAgICBjb25zdCByZXNvbHV0aW9uQ2FyZCA9IG5ldyBDb0M3TWVsZWVSZXNvbHRpb24oXG4gICAgICB0aGlzLnBhcmVudE1lc3NhZ2VJZCxcbiAgICAgIHRoaXMubWVzc2FnZUlkXG4gICAgKVxuICAgIGNvbnN0IHJlc29sdXRpb25NZXNzYWdlID0gYXdhaXQgcmVzb2x1dGlvbkNhcmQucHJlQ3JlYXRlTWVzc2FnZSgpXG5cbiAgICB0aGlzLnJlc29sdXRpb25DYXJkID0gcmVzb2x1dGlvbk1lc3NhZ2UuaWRcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIHN0YXRpYyBnZXRGcm9tQ2FyZCAoY2FyZCwgbWVzc2FnZUlkID0gbnVsbCkge1xuICAgIGNvbnN0IGFjdG9yS2V5ID0gY2FyZC5kYXRhc2V0LmFjdG9yS2V5XG4gICAgY29uc3QgcGFyZW50TWVzc2FnZUlkID0gY2FyZC5kYXRhc2V0LnBhcmVudE1lc3NhZ2VJZFxuICAgIGNvbnN0IGZhc3RGb3J3YXJkID0gY2FyZC5kYXRhc2V0LmZhc3RGb3J3YXJkID09PSAndHJ1ZSdcbiAgICBjb25zdCB0YXJnZXQgPSBuZXcgQ29DN01lbGVlVGFyZ2V0KGFjdG9yS2V5LCBwYXJlbnRNZXNzYWdlSWQsIGZhc3RGb3J3YXJkKVxuXG4gICAgdGFyZ2V0LnJvbGwgPSBDb0M3Um9sbC5nZXRGcm9tQ2FyZChjYXJkKVxuICAgIGNoYXRIZWxwZXIuZ2V0T2JqZWN0RnJvbUVsZW1lbnQodGFyZ2V0LCBjYXJkKVxuXG4gICAgaWYgKGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKSkge1xuICAgICAgdGFyZ2V0Lm1lc3NhZ2VJZCA9IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKS5kYXRhc2V0Lm1lc3NhZ2VJZFxuICAgIH0gZWxzZSB0YXJnZXQubWVzc2FnZUlkID0gbWVzc2FnZUlkXG4gICAgcmV0dXJuIHRhcmdldFxuICB9XG5cbiAgdXBncmFkZVJvbGwgKGx1Y2tBbW91bnQsIG5ld1N1Y2Nlc3NMZXZlbCwgb2xkQ2FyZCkge1xuICAgIC8vIFRPRE8gOiBDaGVjayBpZiB0aGlzIG5lZWRzIHRvIGJlIGFzeW5jXG4gICAgaWYgKCF0aGlzLmFjdG9yLnNwZW5kTHVjayhsdWNrQW1vdW50KSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgYCR7dGhpcy5hY3Rvci5uYW1lfSBkaWRuJ3QgaGF2ZSBlbm91Z2ggbHVjayB0byBwYXNzIHRoZSBjaGVja2BcbiAgICAgIClcbiAgICB9XG4gICAgdGhpcy5yb2xsLnZhbHVlID0gbnVsbFxuICAgIHRoaXMucm9sbC5zdWNjZXNzTGV2ZWwgPSBuZXdTdWNjZXNzTGV2ZWxcbiAgICB0aGlzLnJvbGwubHVja1NwZW50ID0gdHJ1ZVxuICAgIG9sZENhcmQuZGF0YXNldC5wcm9jZXNzZWQgPSBmYWxzZVxuXG4gICAgY29uc3QgZGljZVJvbGxzID0gb2xkQ2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS1yb2xsJylcbiAgICBkaWNlUm9sbHMuZGF0YXNldC52YWx1ZSA9IG51bGxcbiAgICBkaWNlUm9sbHMuZGF0YXNldC5zdWNjZXNzTGV2ZWwgPSBuZXdTdWNjZXNzTGV2ZWxcbiAgICBkaWNlUm9sbHMuZGF0YXNldC5sdWNrU3BlbnQgPSB0cnVlXG5cbiAgICBjb25zdCByZXN1bERldGFpbHMgPSBvbGRDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5yZXN1bHQtZGV0YWlscycpXG4gICAgY29uc3QgZGljZVRvdGFsID0gb2xkQ2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b3RhbCcpXG4gICAgc3dpdGNoIChuZXdTdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyOlxuICAgICAgICBkaWNlVG90YWwuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlZ3VsYXJTdWNjZXNzJylcbiAgICAgICAgcmVzdWxEZXRhaWxzLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgJ0NvQzcuUm9sbFJlc3VsdC5MdWNrU3BlbmRUZXh0JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsdWNrQW1vdW50LFxuICAgICAgICAgICAgc3VjY2Vzc0xldmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUmVndWxhckRpZmZpY3VsdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZDpcbiAgICAgICAgZGljZVRvdGFsLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXJkU3VjY2VzcycpXG4gICAgICAgIHJlc3VsRGV0YWlscy5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhcmREaWZmaWN1bHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWU6XG4gICAgICAgIGRpY2VUb3RhbC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXh0cmVtZVN1Y2Nlc3MnKVxuICAgICAgICByZXN1bERldGFpbHMuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAnQ29DNy5Sb2xsUmVzdWx0Lkx1Y2tTcGVuZFRleHQnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICBzdWNjZXNzTGV2ZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FeHRyZW1lRGlmZmljdWx0eScpXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5jcml0aWNhbDpcbiAgICAgICAgZGljZVRvdGFsLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Dcml0aWNhbFN1Y2Nlc3MnKVxuICAgICAgICByZXN1bERldGFpbHMuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAnQ29DNy5Sb2xsUmVzdWx0Lkx1Y2tTcGVuZFRleHQnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICBzdWNjZXNzTGV2ZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Dcml0aWNhbERpZmZpY3VsdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIGRpY2VUb3RhbC5jbGFzc0xpc3QucmVwbGFjZSgnZmFpbHVyZScsICdzdWNjZXNzJylcbiAgICBvbGRDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLWJ1dHRvbnMnKS5yZW1vdmUoKVxuICAgIG9sZENhcmQucXVlcnlTZWxlY3RvcignLmRpY2UtdG9vbHRpcCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICBDb0M3Q2hhdC51cGRhdGVDaGF0Q2FyZChvbGRDYXJkKSAvLyBUT0RPIDogQ2hlY2sgaWYgdGhpcyBuZWVkcyB0byBiZSBhc3luY1xuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ2hhdE1lc3NhZ2UsIGdhbWUsIHJlbmRlclRlbXBsYXRlLCBSb2xsLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0RpY2UgfSBmcm9tICcuLi9kaWNlLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vY2hlY2suanMnXG5pbXBvcnQgeyBjaGF0SGVscGVyLCBDb0M3Um9sbCwgQ29DN0RhbWFnZSB9IGZyb20gJy4vaGVscGVyLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN1JhbmdlSW5pdGlhdG9yIHtcbiAgY29uc3RydWN0b3IgKGFjdG9yS2V5ID0gbnVsbCwgaXRlbUlkID0gbnVsbCwgZmFzdEZvcndhcmQgPSBmYWxzZSkge1xuICAgIHRoaXMuYWN0b3JLZXkgPSBhY3RvcktleVxuICAgIHRoaXMuaXRlbUlkID0gaXRlbUlkXG4gICAgdGhpcy5mYXN0Rm9yd2FyZCA9IGZhc3RGb3J3YXJkXG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlXG4gICAgdGhpcy5jb3ZlciA9IGZhbHNlXG4gICAgdGhpcy5zdXJwcmlzZWQgPSBmYWxzZVxuICAgIHRoaXMuYXV0b1N1Y2Nlc3MgPSBmYWxzZVxuICAgIHRoaXMuYWR2YW50YWdlID0gZmFsc2VcbiAgICB0aGlzLmRpc2FkdmFudGFnZSA9IGZhbHNlXG4gICAgdGhpcy5tZXNzYWdlSWQgPSBudWxsXG4gICAgdGhpcy50YXJnZXRDYXJkID0gbnVsbFxuICAgIHRoaXMucm9sbGVkID0gZmFsc2VcbiAgICB0aGlzLnNpbmdsZVNob3QgPSBmYWxzZVxuICAgIHRoaXMubXVsdGlwbGVTaG90cyA9IGZhbHNlXG4gICAgdGhpcy5idXJzdCA9IGZhbHNlXG4gICAgdGhpcy5mdWxsQXV0byA9IGZhbHNlXG4gICAgdGhpcy50b2tlbktleSA9IG51bGxcbiAgICB0aGlzLmFpbWVkID0gZmFsc2VcbiAgICB0aGlzLnRvdGFsQnVsbGV0c0ZpcmVkID0gMFxuICAgIHRoaXMuX3RhcmdldHMgPSBbXVxuICAgIGZvciAoY29uc3QgdCBvZiBbLi4uZ2FtZS51c2VyLnRhcmdldHNdKSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBuZXcgQ29DN1JhbmdlVGFyZ2V0KGAke3Quc2NlbmUuaWR9LiR7dC5pZH1gKSAvL1xuICAgICAgdGFyZ2V0LnRva2VuID0gdFxuICAgICAgdGhpcy5fdGFyZ2V0cy5wdXNoKHRhcmdldClcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RhcmdldHMubGVuZ3RoKSB0aGlzLl90YXJnZXRzWzBdLmFjdGl2ZSA9IHRydWVcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IG5ldyBDb0M3UmFuZ2VUYXJnZXQoKVxuICAgICAgdGFyZ2V0LmFjdGl2ZSA9IHRydWVcbiAgICAgIHRoaXMuX3RhcmdldHMucHVzaCh0YXJnZXQpXG4gICAgfVxuICAgIGlmIChhY3RvcktleSkge1xuICAgICAgY29uc3QgYWN0b3IgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleShhY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICB0aGlzLnRva2VuID0gY2hhdEhlbHBlci5nZXRUb2tlbkZyb21LZXkoYWN0b3JLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgaWYgKHRoaXMudG9rZW4pIHRoaXMudG9rZW5LZXkgPSBhY3Rvci50b2tlbktleVxuICAgICAgaWYgKGl0ZW1JZCkge1xuICAgICAgICBjb25zdCB3ZWFwb24gPSBhY3Rvci5pdGVtcy5nZXQoaXRlbUlkKVxuICAgICAgICBpZiAod2VhcG9uKSB7XG4gICAgICAgICAgaWYgKHRoaXMud2VhcG9uLnNpbmdsZVNob3QpIHRoaXMuc2luZ2xlU2hvdCA9IHRydWVcbiAgICAgICAgICBlbHNlIGlmICh0aGlzLndlYXBvbi5zeXN0ZW0ucHJvcGVydGllcy5hdXRvKSB0aGlzLmZ1bGxBdXRvID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnRva2VuS2V5KSB7XG4gICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5fdGFyZ2V0cykge1xuICAgICAgICBpZiAodC50b2tlbiAmJiB0aGlzLnRva2VuKSB7XG4gICAgICAgICAgdC5kaXN0YW5jZSA9IGNoYXRIZWxwZXIuZ2V0RGlzdGFuY2UodC50b2tlbiwgdGhpcy50b2tlbilcbiAgICAgICAgICB0LnJvdW5kZWREaXN0YW5jZSA9IE1hdGgucm91bmQodC5kaXN0YW5jZS52YWx1ZSAqIDEwMCkgLyAxMDBcbiAgICAgICAgICB0LmRpc3RhbmNlVW5pdCA9IHQuZGlzdGFuY2UudW5pdFxuICAgICAgICAgIGNvbnN0IGRpc3RJbllkID1cbiAgICAgICAgICAgIE1hdGgucm91bmQoY2hhdEhlbHBlci50b1lhcmRzKHQuZGlzdGFuY2UpICogMTAwKSAvIDEwMFxuICAgICAgICAgIC8vIGlmKCBkaXN0SW5ZZCl7XG4gICAgICAgICAgaWYgKHRoaXMuYWN0b3IpIHtcbiAgICAgICAgICAgIHQucG9pbnRCbGFua1JhbmdlID0gZmFsc2VcbiAgICAgICAgICAgIGNvbnN0IHBiUmFuZ2VJbllkID1cbiAgICAgICAgICAgICAgdGhpcy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmRleC52YWx1ZSAvIDE1XG4gICAgICAgICAgICBpZiAoZGlzdEluWWQgPD0gcGJSYW5nZUluWWQpIHQucG9pbnRCbGFua1JhbmdlID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy53ZWFwb24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndlYXBvbi5iYXNlUmFuZ2UpIHtcbiAgICAgICAgICAgICAgdC5iYXNlUmFuZ2UgPSBmYWxzZVxuICAgICAgICAgICAgICB0LmxvbmdSYW5nZSA9IGZhbHNlXG4gICAgICAgICAgICAgIHQuZXh0cmVtZVJhbmdlID0gZmFsc2VcbiAgICAgICAgICAgICAgdC5vdXRPZlJhbmdlID0gZmFsc2VcbiAgICAgICAgICAgICAgaWYgKHRoaXMud2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnNob3RndW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoZGlzdEluWWQgPD0gdGhpcy53ZWFwb24uYmFzZVJhbmdlKSB0LmJhc2VSYW5nZSA9IHRydWVcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBkaXN0SW5ZZCA+IHRoaXMud2VhcG9uLmJhc2VSYW5nZSAmJlxuICAgICAgICAgICAgICAgICAgZGlzdEluWWQgPD0gdGhpcy53ZWFwb24ubG9uZ1JhbmdlXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICB0LmxvbmdSYW5nZSA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgZGlzdEluWWQgPiB0aGlzLndlYXBvbi5sb25nUmFuZ2UgJiZcbiAgICAgICAgICAgICAgICAgIGRpc3RJbllkIDw9IHRoaXMud2VhcG9uLmV4dHJlbWVSYW5nZVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgdC5leHRyZW1lUmFuZ2UgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkaXN0SW5ZZCA+IHRoaXMud2VhcG9uLmV4dHJlbWVSYW5nZSkgdC5vdXRPZlJhbmdlID0gdHJ1ZVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChkaXN0SW5ZZCA8PSB0aGlzLndlYXBvbi5iYXNlUmFuZ2UpIHQuYmFzZVJhbmdlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIGRpc3RJbllkID4gdGhpcy53ZWFwb24uYmFzZVJhbmdlICYmXG4gICAgICAgICAgICAgICAgICBkaXN0SW5ZZCA8PSB0aGlzLndlYXBvbi5iYXNlUmFuZ2UgKiAyXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICB0LmxvbmdSYW5nZSA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgZGlzdEluWWQgPiB0aGlzLndlYXBvbi5iYXNlUmFuZ2UgKiAyICYmXG4gICAgICAgICAgICAgICAgICBkaXN0SW5ZZCA8PSB0aGlzLndlYXBvbi5iYXNlUmFuZ2UgKiA0XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICB0LmV4dHJlbWVSYW5nZSA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpc3RJbllkID4gdGhpcy53ZWFwb24uYmFzZVJhbmdlICogNCkgdC5vdXRPZlJhbmdlID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhKHQuYmFzZVJhbmdlIHx8IHQubG9uZ1JhbmdlIHx8IHQuZXh0cmVtZVJhbmdlIHx8IHQub3V0T2ZSYW5nZSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdC5iYXNlUmFuZ2UgPSB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gfVxuICAgICAgICB9IGVsc2UgdC5iYXNlUmFuZ2UgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0IGRpc3BsYXlBY3Rvck9uQ2FyZCAoKSB7XG4gICAgcmV0dXJuIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rpc3BsYXlBY3Rvck9uQ2FyZCcpXG4gIH1cblxuICBnZXQgYWN0b3JJbWcgKCkge1xuICAgIGNvbnN0IGltZyA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JJbWdGcm9tS2V5KHRoaXMuYWN0b3JLZXkpXG4gICAgaWYgKGltZykgcmV0dXJuIGltZ1xuICAgIHJldHVybiAnLi4vaWNvbnMvc3ZnL215c3RlcnktbWFuLWJsYWNrLnN2ZydcbiAgfVxuXG4gIGdldCBhY3RvciAoKSB7XG4gICAgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuYWN0b3JLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICB9XG5cbiAgZ2V0IGl0ZW0gKCkge1xuICAgIHJldHVybiB0aGlzLmFjdG9yLml0ZW1zLmdldCh0aGlzLml0ZW1JZClcbiAgfVxuXG4gIGdldCB3ZWFwb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1cbiAgfVxuXG4gIGdldCB0YXJnZXRzICgpIHtcbiAgICBpZiAoIXRoaXMuX3RhcmdldHMpIHRoaXMuX3RhcmdldHMgPSBbXVxuICAgIHJldHVybiB0aGlzLl90YXJnZXRzXG4gIH1cblxuICBnZXQgdGFyZ2V0ICgpIHtcbiAgICBpZiAodGhpcy50YXJnZXRzICYmIHRoaXMudGFyZ2V0cy5sZW5ndGgpIHJldHVybiB0aGlzLnRhcmdldHMucG9wKClcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHNraWxscyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0b3IuZ2V0V2VhcG9uU2tpbGxzKHRoaXMuaXRlbUlkKVxuICB9XG5cbiAgZ2V0IG1haW5XZWFwb25Ta2lsbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0b3IuaXRlbXMuZ2V0KHRoaXMud2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLmlkKVxuICB9XG5cbiAgZ2V0IGF1dG9XZWFwb25Ta2lsbCAoKSB7XG4gICAgaWYgKHRoaXMud2VhcG9uLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5hY3Rvci5pdGVtcy5nZXQodGhpcy53ZWFwb24uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1haW5XZWFwb25Ta2lsbFxuICB9XG5cbiAgZ2V0IGF1dG9GaXJlICgpIHtcbiAgICByZXR1cm4gdGhpcy5idXJzdCB8fCB0aGlzLmZ1bGxBdXRvXG4gIH1cblxuICBnZXQgbXVsdGlUYXJnZXQgKCkge1xuICAgIHJldHVybiB0aGlzLmZ1bGxBdXRvIHx8IHRoaXMubXVsdGlwbGVTaG90c1xuICB9XG5cbiAgZ2V0IGFpbWluZyAoKSB7XG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5fYWltaW5nKSB7XG4gICAgICB0aGlzLl9haW1pbmcgPSB0aGlzLmFjdG9yLmdldEFjdG9yRmxhZygnYWltaW5nJylcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FpbWluZ1xuICB9XG5cbiAgZ2V0IGFjdGl2ZVRhcmdldCAoKSB7XG4gICAgaWYgKCF0aGlzLl90YXJnZXRzLmxlbmd0aCkgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cy5maW5kKHQgPT4gdC5hY3RpdmUpXG4gIH1cblxuICBnZXQgc2hvdHMgKCkge1xuICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuX3Nob3RzKSB0aGlzLl9zaG90cyA9IFtdXG4gICAgcmV0dXJuIHRoaXMuX3Nob3RzXG4gIH1cblxuICBnZXQgY3VycmVudFNob3RSYW5rICgpIHtcbiAgICByZXR1cm4gdGhpcy5zaG90cy5sZW5ndGggKyAxXG4gIH1cblxuICBnZXQgYWN0aXZlVGFyZ2V0U2hvdERpZmZpY3VsdHkgKCkge1xuICAgIHJldHVybiB0aGlzLnNob3REaWZmaWN1bHR5KClcbiAgfVxuXG4gIHNldCBhaW1pbmcgKGIpIHtcbiAgICB0aGlzLl9haW1pbmcgPSBiXG4gIH1cblxuICBnZXQgZGlkQW55U2hvdEhpdCAoKSB7XG4gICAgbGV0IGFueUhpdCA9IGZhbHNlXG4gICAgZm9yIChjb25zdCByIG9mIHRoaXMucm9sbHMpIHtcbiAgICAgIGFueUhpdCA9IGFueUhpdCB8fCByLmlzU3VjY2Vzc1xuICAgIH1cbiAgICByZXR1cm4gYW55SGl0XG4gIH1cblxuICBnZXQgc3VjY2Vzc2Z1bEhpdHMgKCkge1xuICAgIGNvbnN0IGhpdHMgPSBbXVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnJvbGxzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKHRoaXMucm9sbHNbaW5kZXhdLmlzU3VjY2Vzcykge1xuICAgICAgICBjb25zdCBoaXQgPSB7XG4gICAgICAgICAgcm9sbDogdGhpcy5yb2xsc1tpbmRleF0sXG4gICAgICAgICAgc2hvdDogdGhpcy5zaG90c1tpbmRleF1cbiAgICAgICAgfVxuICAgICAgICBoaXRzLnB1c2goaGl0KVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaGl0cy5sZW5ndGggIT09IDApIHJldHVybiBoaXRzXG4gICAgZWxzZSByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHNob3RGaXJlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hvdHMgPyB0aGlzLnNob3RzLmxlbmd0aCA6IDBcbiAgfVxuXG4gIGdldCB0b3RhbEFtbW8gKCkge1xuICAgIHJldHVybiB0aGlzLndlYXBvbi5nZXRCdWxsZXRMZWZ0KClcbiAgfVxuXG4gIGdldCBtYXhTaG90cyAoKSB7XG4gICAgaWYgKHRoaXMuZnVsbEF1dG8pIHJldHVybiAn4oieJ1xuICAgIC8vIHJldHVybiB0aGlzLndlYXBvbi5kYXRhLmRhdGEudXNlc1BlclJvdW5kLm1heDtcblxuICAgIHJldHVybiB0aGlzLndlYXBvbi5zeXN0ZW0udXNlc1BlclJvdW5kLm1heFxuICAgICAgPyBwYXJzZUludCh0aGlzLndlYXBvbi5zeXN0ZW0udXNlc1BlclJvdW5kLm1heClcbiAgICAgIDogMVxuICB9XG5cbiAgZ2V0IGlnbm9yZUFtbW8gKCkge1xuICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNyZWdhcmRBbW1vJylcbiAgfVxuXG4gIGdldCBpZ25vcmVVc2VzUGVyUm91bmQgKCkge1xuICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNyZWdhcmRVc2VQZXJSb3VuZCcpXG4gIH1cblxuICBnZXQgb3V0T2ZBbW1vICgpIHtcbiAgICBpZiAodGhpcy5pZ25vcmVBbW1vKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodGhpcy50b3RhbEJ1bGxldHNGaXJlZCA+PSB0aGlzLndlYXBvbi5nZXRCdWxsZXRMZWZ0KCkpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgb3V0T2ZTaG90cyAoKSB7XG4gICAgaWYgKHRoaXMuaWdub3JlVXNlc1BlclJvdW5kKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodGhpcy5zaG90cykgcmV0dXJuIHRoaXMuc2hvdHMubGVuZ3RoID49IHRoaXMubWF4U2hvdHNcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCB2b2xsZXlTaXplICgpIHtcbiAgICBpZiAoIXRoaXMud2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLmF1dG8pIHJldHVybiAxXG4gICAgaWYgKHRoaXMuX3ZvbGxleVNpemUpIHJldHVybiB0aGlzLl92b2xsZXlTaXplXG4gICAgY29uc3Qgc2l6ZSA9IE1hdGguZmxvb3IodGhpcy5hdXRvV2VhcG9uU2tpbGwudmFsdWUgLyAxMClcbiAgICByZXR1cm4gc2l6ZSA8IDMgPyAzIDogc2l6ZVxuICB9XG5cbiAgc2V0IHZvbGxleVNpemUgKHgpIHtcbiAgICBpZiAoeCA+PSBNYXRoLmZsb29yKHRoaXMuYXV0b1dlYXBvblNraWxsLnZhbHVlIC8gMTApKSB7XG4gICAgICB0aGlzLl92b2xsZXlTaXplID0gTWF0aC5mbG9vcih0aGlzLmF1dG9XZWFwb25Ta2lsbC52YWx1ZSAvIDEwKVxuICAgIH0gZWxzZSBpZiAoeCA8PSAzKSB7XG4gICAgICB0aGlzLl92b2xsZXlTaXplID0gM1xuICAgIH1cbiAgICB0aGlzLl92b2xsZXlTaXplID0gcGFyc2VJbnQoeClcbiAgfVxuXG4gIGdldCBpc1ZvbGxleU1pblNpemUgKCkge1xuICAgIGlmICh0aGlzLnZvbGxleVNpemUgPT09IDMpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgaXNWb2xsZXlNYXhTaXplICgpIHtcbiAgICBjb25zdCBtYXhTaXplID1cbiAgICAgIE1hdGguZmxvb3IodGhpcy5hdXRvV2VhcG9uU2tpbGwudmFsdWUgLyAxMCkgPCAzXG4gICAgICAgID8gM1xuICAgICAgICA6IE1hdGguZmxvb3IodGhpcy5hdXRvV2VhcG9uU2tpbGwudmFsdWUgLyAxMClcbiAgICBpZiAobWF4U2l6ZSA9PT0gdGhpcy52b2xsZXlTaXplKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0VGFyZ2V0RnJvbUtleSAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHMuZmluZCh0ID0+IGtleSA9PT0gdC5hY3RvcktleSlcbiAgfVxuXG4gIGNhbGNUYXJnZXRzRGlmZmljdWx0eSAoKSB7XG4gICAgZm9yIChjb25zdCB0IG9mIHRoaXMudGFyZ2V0cykge1xuICAgICAgdC5zaG90RGlmZmljdWx0eSA9IHRoaXMuc2hvdERpZmZpY3VsdHkodClcbiAgICB9XG4gIH1cblxuICBzaG90RGlmZmljdWx0eSAodCA9IG51bGwpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0IHx8IHRoaXMuYWN0aXZlVGFyZ2V0XG4gICAgbGV0IGRhbWFnZSA9IHRoaXMud2VhcG9uLnN5c3RlbS5yYW5nZS5ub3JtYWwuZGFtYWdlXG4gICAgaWYgKHRoaXMud2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnNob3RndW4pIHtcbiAgICAgIGlmICh0LmxvbmdSYW5nZSkgZGFtYWdlID0gdGhpcy53ZWFwb24uc3lzdGVtLnJhbmdlLmxvbmcuZGFtYWdlXG4gICAgICBpZiAodC5leHRyZW1lUmFuZ2UpIGRhbWFnZSA9IHRoaXMud2VhcG9uLnN5c3RlbS5yYW5nZS5leHRyZW1lLmRhbWFnZVxuICAgIH1cbiAgICBsZXQgbW9kaWZpZXIgPSB0YXJnZXQubW9kaWZpZXJcbiAgICBsZXQgZGlmZmljdWx0eVxuICAgIHRoaXMud2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnNob3RndW5cbiAgICAgID8gKGRpZmZpY3VsdHkgPSAxKVxuICAgICAgOiAoZGlmZmljdWx0eSA9IHRhcmdldC5kaWZmaWN1bHR5KVxuICAgIGxldCBkaWZmaWN1bHR5TmFtZSA9ICcnXG4gICAgaWYgKHRoaXMuYWltaW5nICYmIHRoaXMuY3VycmVudFNob3RSYW5rID09PSAxKSBtb2RpZmllcisrXG4gICAgaWYgKHRoaXMuYWR2YW50YWdlKSBtb2RpZmllcisrXG4gICAgaWYgKHRoaXMuZGlzYWR2YW50YWdlKSBtb2RpZmllci0tXG4gICAgaWYgKHRoaXMucmVsb2FkKSBtb2RpZmllci0tXG4gICAgaWYgKHRoaXMubXVsdGlwbGVTaG90cyAmJiAhdGhpcy5mdWxsQXV0bykgbW9kaWZpZXItLVxuICAgIGlmICh0aGlzLmZ1bGxBdXRvKSBtb2RpZmllciAtPSB0aGlzLmN1cnJlbnRTaG90UmFuayAtIDFcbiAgICBpZiAobW9kaWZpZXIgPCAtMikge1xuICAgICAgY29uc3QgZXhjZXNzID0gTWF0aC5hYnMobW9kaWZpZXIgKyAyKVxuICAgICAgZGlmZmljdWx0eSArPSBleGNlc3NcbiAgICAgIGlmIChkaWZmaWN1bHR5ID4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5jcml0aWNhbCkge1xuICAgICAgICBkaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5pbXBvc3NpYmxlXG4gICAgICB9XG4gICAgICBtb2RpZmllciA9IC0yXG4gICAgfVxuXG4gICAgaWYgKENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhciA9PT0gZGlmZmljdWx0eSkge1xuICAgICAgZGlmZmljdWx0eU5hbWUgPSAnUmVndWxhcidcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZCA9PT0gZGlmZmljdWx0eSkgZGlmZmljdWx0eU5hbWUgPSAnSGFyZCdcbiAgICBpZiAoQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lID09PSBkaWZmaWN1bHR5KSB7XG4gICAgICBkaWZmaWN1bHR5TmFtZSA9ICdFeHRyZW1lJ1xuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5jcml0aWNhbCA9PT0gZGlmZmljdWx0eSkge1xuICAgICAgZGlmZmljdWx0eU5hbWUgPSAnQ3JpdGljYWwnXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmltcG9zc2libGUgPT09IGRpZmZpY3VsdHkpIHtcbiAgICAgIGRpZmZpY3VsdHlOYW1lID0gJ0ltcG9zc2libGUnXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsOiBkaWZmaWN1bHR5LFxuICAgICAgbmFtZTogZGlmZmljdWx0eU5hbWUsXG4gICAgICBtb2RpZmllcixcbiAgICAgIGRhbWFnZSxcbiAgICAgIGltcG9zc2libGU6IGRpZmZpY3VsdHkgPT09IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaW1wb3NzaWJsZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG9vdCBhdCB0aGUgYWN0aXZlIHRhcmdldC4gQWRkIGl0IHRvIHRoZSBsaXN0IG9mIHNob3RzLlxuICAgKiBUT0RPIDogcmVjYWxjdWxlciBsYSBkaWZmaWN1bHTDqSBkZSB0b3VzIGxlcyBzaG90cyAhLlxuICAgKi9cbiAgYWRkU2hvdEF0Q3VycmVudFRhcmdldCAoKSB7XG4gICAgdGhpcy5jYWxjVGFyZ2V0c0RpZmZpY3VsdHkoKVxuICAgIGNvbnN0IHNob3QgPSB7XG4gICAgICB0YXJnZXQ6IHRoaXMuYWN0aXZlVGFyZ2V0LFxuICAgICAgZXh0cmVtZVJhbmdlOiB0aGlzLmFjdGl2ZVRhcmdldC5leHRyZW1lUmFuZ2UsXG4gICAgICBhY3RvcktleTogdGhpcy5hY3RpdmVUYXJnZXQuYWN0b3JLZXksXG4gICAgICBhY3Rvck5hbWU6IHRoaXMuYWN0aXZlVGFyZ2V0Lm5hbWUsXG4gICAgICBkaWZmaWN1bHR5OiB0aGlzLmFjdGl2ZVRhcmdldC5zaG90RGlmZmljdWx0eS5sZXZlbCxcbiAgICAgIG1vZGlmaWVyOiB0aGlzLmFjdGl2ZVRhcmdldC5zaG90RGlmZmljdWx0eS5tb2RpZmllcixcbiAgICAgIGRhbWFnZTogdGhpcy5hY3RpdmVUYXJnZXQuc2hvdERpZmZpY3VsdHkuZGFtYWdlLFxuICAgICAgYnVsbGV0c1Nob3Q6IDEsXG4gICAgICB0cmFuc2l0QnVsbGV0czogMCxcbiAgICAgIGJ1bGxldHNTaG90VHJhbnNpdDogMSxcbiAgICAgIHRyYW5zaXQ6IGZhbHNlXG4gICAgfVxuXG4gICAgbGV0IGJ1bGxldExlZnQgPSB0aGlzLnRvdGFsQW1tbyAtIHRoaXMudG90YWxCdWxsZXRzRmlyZWRcblxuICAgIGlmICh0aGlzLmZ1bGxBdXRvKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50U2hvdFJhbmsgPiAxKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzU2hvdCA9IHRoaXMuc2hvdHNbdGhpcy5jdXJyZW50U2hvdFJhbmsgLSAyXVxuICAgICAgICBpZiAocHJldmlvdXNTaG90LmFjdG9yS2V5ICE9PSB0aGlzLmFjdGl2ZVRhcmdldC5hY3RvcktleSkge1xuICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gY2hhdEhlbHBlci5nZXREaXN0YW5jZShcbiAgICAgICAgICAgIGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHByZXZpb3VzU2hvdC5hY3RvcktleSksXG4gICAgICAgICAgICBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLmFjdGl2ZVRhcmdldC5hY3RvcktleSlcbiAgICAgICAgICApXG4gICAgICAgICAgc2hvdC50cmFuc2l0QnVsbGV0cyA9IE1hdGguZmxvb3IoY2hhdEhlbHBlci50b1lhcmRzKGRpc3RhbmNlKSlcbiAgICAgICAgICBpZiAoc2hvdC50cmFuc2l0QnVsbGV0cyA+PSBidWxsZXRMZWZ0ICYmICF0aGlzLmlnbm9yZUFtbW8pIHtcbiAgICAgICAgICAgIHNob3QudHJhbnNpdEJ1bGxldHMgPSBidWxsZXRMZWZ0XG4gICAgICAgICAgICBidWxsZXRMZWZ0ID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnRvdGFsQnVsbGV0c0ZpcmVkID1cbiAgICAgICAgICAgIHBhcnNlSW50KHRoaXMudG90YWxCdWxsZXRzRmlyZWQpICsgc2hvdC50cmFuc2l0QnVsbGV0c1xuICAgICAgICAgIHNob3QudHJhbnNpdCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2hvdC5idWxsZXRzU2hvdCA9IHRoaXMudm9sbGV5U2l6ZVxuICAgICAgaWYgKHNob3QuYnVsbGV0c1Nob3QgPD0gMykgc2hvdC5idWxsZXRzU2hvdCA9IDNcbiAgICAgIGlmIChzaG90LmJ1bGxldHNTaG90ID49IGJ1bGxldExlZnQgJiYgIXRoaXMuaWdub3JlQW1tbykge1xuICAgICAgICBzaG90LmJ1bGxldHNTaG90ID0gYnVsbGV0TGVmdFxuICAgICAgICBidWxsZXRMZWZ0ID0gMFxuICAgICAgfVxuICAgICAgLy8gYnVsbGV0c1Nob3RUcmFuc2l0IGlzIGZvciBsb2NhbGl6aW5nIENvQzcuU2hvdEJ1bGxldHMgdXNpbmcgcGFyYW1ldGVycywgbG9jYWxpemUgZG9lcyBub3QgYWNjZXB0IGFkZGluZyBhIHBhcmFtZXRlciBhcyBhIHN1bSBvZiBzaG90LmJ1bGxldHNTaG90ICsgc2hvdC50cmFuc2l0QnVsbGV0cywgc28gSSBjcmVhdGUgYSBuZXcgdmFsdWUgaW4gYWR2YW5jZSB0byB1c2UgaW5zdGVhZFxuICAgICAgc2hvdC5idWxsZXRzU2hvdFRyYW5zaXQgPSBzaG90LmJ1bGxldHNTaG90ICsgc2hvdC50cmFuc2l0QnVsbGV0c1xuICAgIH1cbiAgICBpZiAodGhpcy5idXJzdCkge1xuICAgICAgc2hvdC5idWxsZXRzU2hvdCA9IHBhcnNlSW50KHRoaXMud2VhcG9uLnN5c3RlbS51c2VzUGVyUm91bmQuYnVyc3QpXG4gICAgICAgID8gcGFyc2VJbnQodGhpcy53ZWFwb24uc3lzdGVtLnVzZXNQZXJSb3VuZC5idXJzdClcbiAgICAgICAgOiAxXG4gICAgICBpZiAoc2hvdC5idWxsZXRzU2hvdCA+PSBidWxsZXRMZWZ0ICYmICF0aGlzLmlnbm9yZUFtbW8pIHtcbiAgICAgICAgc2hvdC5idWxsZXRzU2hvdCA9IGJ1bGxldExlZnRcbiAgICAgICAgYnVsbGV0TGVmdCA9IDBcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRvdGFsQnVsbGV0c0ZpcmVkID0gcGFyc2VJbnQodGhpcy50b3RhbEJ1bGxldHNGaXJlZCkgKyBzaG90LmJ1bGxldHNTaG90XG5cbiAgICBpZiAodGhpcy5haW1pbmcpIHtcbiAgICAgIHRoaXMuYWltaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuYWltZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgdGhpcy5zaG90cy5wdXNoKHNob3QpXG4gIH1cblxuICBnZXQgdGVtcGxhdGUgKCkge1xuICAgIHJldHVybiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L2NvbWJhdC9yYW5nZS1pbml0aWF0b3IuaHRtbCdcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUNoYXRDYXJkICgpIHtcbiAgICB0aGlzLmNhbGNUYXJnZXRzRGlmZmljdWx0eSgpXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICAvLyBjb25zdCBlbGVtZW50ID0gJChodG1sKVswXTtcbiAgICAvLyBjb25zdCB0YXJnZXRFbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudGFyZ2V0VGVzdCcpO1xuICAgIC8vIHRoaXMudGFyZ2V0LmF0dGFjaFRvRWxlbWVudCh0YXJnZXRFbGVtZW50KTtcbiAgICBjb25zdCBzcGVha2VyRGF0YSA9IHt9XG4gICAgY29uc3QgdG9rZW4gPSBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLmFjdG9yS2V5KVxuICAgIGlmICh0b2tlbikgc3BlYWtlckRhdGEudG9rZW4gPSB0b2tlbi5kb2N1bWVudFxuICAgIGVsc2Ugc3BlYWtlckRhdGEuYWN0b3IgPSB0aGlzLmFjdG9yXG5cbiAgICBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcihzcGVha2VyRGF0YSlcbiAgICAvLyBpZiggdGhpcy5hY3Rvci5pc1Rva2VuKSBzcGVha2VyLmFsaWFzID0gdGhpcy5hY3Rvci50b2tlbi5uYW1lO1xuXG4gICAgY29uc3QgdXNlciA9IHRoaXMuYWN0b3IudXNlciA/IHRoaXMuYWN0b3IudXNlciA6IGdhbWUudXNlclxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgdXNlcjogdXNlci5pZCxcbiAgICAgIHNwZWFrZXIsXG4gICAgICBjb250ZW50OiBodG1sXG4gICAgfVxuXG4gICAgY29uc3Qgcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgaWYgKFsnZ21yb2xsJywgJ2JsaW5kcm9sbCddLmluY2x1ZGVzKHJvbGxNb2RlKSkge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgfVxuICAgIC8vIGlmICggcm9sbE1vZGUgPT09ICdibGluZHJvbGwnICkgY2hhdERhdGFbJ2JsaW5kJ10gPSB0cnVlO1xuICAgIGNoYXREYXRhLmJsaW5kID0gZmFsc2VcblxuICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKVxuXG4gICAgcmV0dXJuIGNoYXRNZXNzYWdlXG4gIH1cblxuICBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoKSB7XG4gICAgdGhpcy5jYWxjVGFyZ2V0c0RpZmZpY3VsdHkoKVxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCB0aGlzKVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuXG4gICAgY29uc3QgbXNnID0gYXdhaXQgbWVzc2FnZS51cGRhdGUoeyBjb250ZW50OiBodG1sIH0pXG4gICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgcmV0dXJuIG1zZ1xuICB9XG5cbiAgdG9nZ2xlRmxhZyAoZmxhZ05hbWUpIHtcbiAgICBjb25zdCBmbGFnID0gZmxhZ05hbWUuaW5jbHVkZXMoJy0nKVxuICAgICAgPyBjaGF0SGVscGVyLmh5cGhlblRvQ2FtZWxDYXNlKGZsYWdOYW1lKVxuICAgICAgOiBmbGFnTmFtZVxuICAgIGlmIChcbiAgICAgIGZsYWcgPT09ICdzaW5nbGVTaG90JyB8fFxuICAgICAgZmxhZyA9PT0gJ211bHRpcGxlU2hvdHMnIHx8XG4gICAgICBmbGFnID09PSAnZnVsbEF1dG8nXG4gICAgKSB7XG4gICAgICB0aGlzLnNpbmdsZVNob3QgPSBmYWxzZVxuICAgICAgdGhpcy5tdWx0aXBsZVNob3RzID0gZmFsc2VcbiAgICAgIHRoaXMuZnVsbEF1dG8gPSBmYWxzZVxuICAgICAgaWYgKGZsYWcgPT09ICdmdWxsQXV0bycpIHRoaXMuYnVyc3QgPSBmYWxzZVxuICAgICAgdGhpc1tmbGFnXSA9IHRydWVcbiAgICB9IGVsc2UgaWYgKGZsYWcgPT09ICdidXJzdCcpIHtcbiAgICAgIHRoaXMuZnVsbEF1dG8gPSBmYWxzZVxuICAgICAgaWYgKCF0aGlzLnNpbmdsZVNob3QgJiYgIXRoaXMubXVsdGlwbGVTaG90cykgdGhpcy5zaW5nbGVTaG90ID0gdHJ1ZVxuICAgICAgdGhpcy5idXJzdCA9ICF0aGlzLmJ1cnN0XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbZmxhZ10gPSAhdGhpc1tmbGFnXVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlc29sdmVDYXJkICgpIHtcbiAgICB0aGlzLnJvbGxzID0gW11cbiAgICBpZiAodGhpcy5tdWx0aVRhcmdldCkge1xuICAgICAgbGV0IHdlYXBvbk1hbGZ1bmN0aW9uID0gZmFsc2VcbiAgICAgIGxldCBpbmRleCA9IDBcbiAgICAgIHdoaWxlICghd2VhcG9uTWFsZnVuY3Rpb24gJiYgdGhpcy5zaG90cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgICBjb25zdCByb2xsID0gYXdhaXQgdGhpcy5zaG9vdEF0VGFyZ2V0KHRoaXMuc2hvdHNbaW5kZXhdKVxuICAgICAgICBpZiAocm9sbC5kaWNlPy5yb2xsKSB7XG4gICAgICAgICAgYXdhaXQgQ29DN0RpY2Uuc2hvd1JvbGxEaWNlM2Qocm9sbC5kaWNlLnJvbGwpXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy53ZWFwb24uc2hvb3RCdWxsZXRzKFxuICAgICAgICAgIHBhcnNlSW50KHRoaXMuc2hvdHNbaW5kZXhdLmJ1bGxldHNTaG90KSArXG4gICAgICAgICAgICBwYXJzZUludCh0aGlzLnNob3RzW2luZGV4XS50cmFuc2l0QnVsbGV0cylcbiAgICAgICAgKVxuICAgICAgICBpZiAocm9sbC5oYXNNYWxmdW5jdGlvbikge1xuICAgICAgICAgIHJvbGwuaXNTdWNjZXNzID0gZmFsc2VcbiAgICAgICAgICB3ZWFwb25NYWxmdW5jdGlvbiA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpbmRleCsrXG4gICAgICAgIHRoaXMucm9sbHMucHVzaChyb2xsKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByb2xsID0gYXdhaXQgdGhpcy5zaG9vdEF0VGFyZ2V0KClcbiAgICAgIGlmIChyb2xsLmRpY2U/LnJvbGwpIHtcbiAgICAgICAgYXdhaXQgQ29DN0RpY2Uuc2hvd1JvbGxEaWNlM2Qocm9sbC5kaWNlLnJvbGwpXG4gICAgICB9XG4gICAgICBsZXQgYnVsbGV0RmlyZWQgPSB0aGlzLmJ1cnN0XG4gICAgICAgID8gcGFyc2VJbnQodGhpcy53ZWFwb24uc3lzdGVtLnVzZXNQZXJSb3VuZC5idXJzdClcbiAgICAgICAgOiAxXG4gICAgICBpZiAoYnVsbGV0RmlyZWQgPj0gdGhpcy50b3RhbEFtbW8pIGJ1bGxldEZpcmVkID0gdGhpcy50b3RhbEFtbW9cbiAgICAgIGNvbnN0IHNob3QgPSB7XG4gICAgICAgIHRhcmdldDogdGhpcy5hY3RpdmVUYXJnZXQsXG4gICAgICAgIGV4dHJlbWVSYW5nZTogdGhpcy5hY3RpdmVUYXJnZXQuZXh0cmVtZVJhbmdlLFxuICAgICAgICBhY3RvcktleTogdGhpcy5hY3RpdmVUYXJnZXQuYWN0b3JLZXksXG4gICAgICAgIGFjdG9yTmFtZTogdGhpcy5hY3RpdmVUYXJnZXQubmFtZSxcbiAgICAgICAgZGlmZmljdWx0eTogdGhpcy5hY3RpdmVUYXJnZXQuc2hvdERpZmZpY3VsdHkubGV2ZWwsXG4gICAgICAgIG1vZGlmaWVyOiB0aGlzLmFjdGl2ZVRhcmdldC5zaG90RGlmZmljdWx0eS5tb2RpZmllcixcbiAgICAgICAgZGFtYWdlOiB0aGlzLmFjdGl2ZVRhcmdldC5zaG90RGlmZmljdWx0eS5kYW1hZ2UsXG4gICAgICAgIGJ1bGxldHNTaG90OiBidWxsZXRGaXJlZCxcbiAgICAgICAgdHJhbnNpdEJ1bGxldHM6IDAsXG4gICAgICAgIHRyYW5zaXQ6IGZhbHNlXG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLndlYXBvbi5zaG9vdEJ1bGxldHMoYnVsbGV0RmlyZWQpXG5cbiAgICAgIGlmIChyb2xsLmhhc01hbGZ1bmN0aW9uKSB7XG4gICAgICAgIHJvbGwuaXNTdWNjZXNzID0gZmFsc2VcbiAgICAgIH1cbiAgICAgIHRoaXMuc2hvdHMucHVzaChzaG90KVxuICAgICAgdGhpcy5yb2xscy5wdXNoKHJvbGwpXG4gICAgfVxuICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlXG4gICAgdGhpcy5yb2xsZWQgPSB0cnVlXG5cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIGFzeW5jIHNob290QXRUYXJnZXQgKHNob3QgPSBudWxsKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gc2hvdFxuICAgICAgPyB0aGlzLmdldFRhcmdldEZyb21LZXkoc2hvdC5hY3RvcktleSlcbiAgICAgIDogdGhpcy5hY3RpdmVUYXJnZXRcbiAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgIGNoZWNrLmFjdG9yS2V5ID0gdGhpcy5hY3RvcktleVxuICAgIGNoZWNrLmFjdG9yID0gdGhpcy5hY3RvcktleVxuICAgIGNoZWNrLml0ZW0gPSB0aGlzLml0ZW1JZFxuICAgIC8vIENvbWJhdCByb2xsIGNhbm5vdCBiZSBibGluZCBvciB1bmtub3duXG4gICAgY2hlY2suaXNCbGluZCA9IGZhbHNlXG4gICAgY2hlY2suaXNVbmtvbnduID0gZmFsc2VcbiAgICBpZiAodGhpcy5hdXRvRmlyZSkgY2hlY2suc2tpbGwgPSB0aGlzLmF1dG9XZWFwb25Ta2lsbFxuICAgIGVsc2UgY2hlY2suc2tpbGwgPSB0aGlzLm1haW5XZWFwb25Ta2lsbFxuICAgIGlmICh0aGlzLm11bHRpVGFyZ2V0KSB7XG4gICAgICBjaGVjay5kaWZmaWN1bHR5ID0gc2hvdC5kaWZmaWN1bHR5XG4gICAgICBjaGVjay5kaWNlTW9kaWZpZXIgPSBzaG90Lm1vZGlmaWVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2FsY1RhcmdldHNEaWZmaWN1bHR5KClcbiAgICAgIHRoaXMudG90YWxCdWxsZXRzRmlyZWQgPSBwYXJzZUludCh0aGlzLnRvdGFsQnVsbGV0c0ZpcmVkKSArIDFcbiAgICAgIGlmICh0aGlzLmFpbWluZykge1xuICAgICAgICB0aGlzLmFpbWluZyA9IGZhbHNlXG4gICAgICAgIHRoaXMuYWltZWQgPSB0cnVlXG4gICAgICB9XG4gICAgICBjaGVjay5kaWZmaWN1bHR5ID0gdGhpcy5hY3RpdmVUYXJnZXQuc2hvdERpZmZpY3VsdHkubGV2ZWxcbiAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9IHRoaXMuYWN0aXZlVGFyZ2V0LnNob3REaWZmaWN1bHR5Lm1vZGlmaWVyXG4gICAgfVxuXG4gICAgY2hlY2suZGV0YWlscyA9IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5UYXJnZXQnKX06ICR7dGFyZ2V0Lm5hbWV9YFxuICAgIGNoZWNrLnRhcmdldEtleSA9IHRhcmdldC5hY3RvcktleVxuXG4gICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgcmV0dXJuIGNoZWNrXG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbU1lc3NhZ2VJZCAobWVzc2FnZUlkKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VJZClcbiAgICBpZiAoIW1lc3NhZ2UpIHJldHVybiBudWxsXG4gICAgY29uc3QgY2FyZCA9ICQobWVzc2FnZS5jb250ZW50KVswXVxuXG4gICAgY29uc3QgaW5pdGlhdG9yID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQsIG1lc3NhZ2VJZClcbiAgICBpbml0aWF0b3IubWVzc2FnZUlkID0gbWVzc2FnZUlkXG5cbiAgICByZXR1cm4gaW5pdGlhdG9yXG4gIH1cblxuICBjaGFuZ2VWb2xsZXlTaXplICh4KSB7XG4gICAgdGhpcy52b2xsZXlTaXplID0gdGhpcy52b2xsZXlTaXplICsgeFxuICAgIHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUNhcmRTd2l0Y2ggKGV2ZW50LCBwdWJsaXNoVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IGNhcmQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5yYW5nZS5pbml0aWF0b3InKVxuICAgIGNvbnN0IGZsYWcgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZ1xuICAgIGNvbnN0IGNhbWVsRmxhZyA9IGNoYXRIZWxwZXIuaHlwaGVuVG9DYW1lbENhc2UoZmxhZylcblxuICAgIC8vIHVwZGF0ZSBvbmx5IGZvciBsb2NhbCBwbGF5ZXJcbiAgICBpZiAoIXB1Ymxpc2hVcGRhdGUpIHtcbiAgICAgIGNhcmQuZGF0YXNldFtjYW1lbEZsYWddID0gY2FyZC5kYXRhc2V0W2NhbWVsRmxhZ10gIT09ICd0cnVlJ1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdzd2l0Y2hlZC1vbicpXG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2VsZWN0ZWQgPSBjYXJkLmRhdGFzZXRbY2FtZWxGbGFnXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGUgY2FyZCBmb3IgYWxsIHBsYXllclxuICAgICAgY29uc3QgaW5pdGlhdG9yID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3RhcmdldC1mbGFnJykpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudGFyZ2V0JylcbiAgICAgICAgY29uc3Qga2V5ID0gcGFyc2VJbnQodGFyZ2V0LmRhdGFzZXQudGFyZ2V0S2V5KVxuICAgICAgICBpbml0aWF0b3IudGFyZ2V0c1trZXldLnRvZ2dsZUZsYWcoY2FtZWxGbGFnKVxuICAgICAgfSBlbHNlIGluaXRpYXRvci50b2dnbGVGbGFnKGNhbWVsRmxhZylcbiAgICAgIGluaXRpYXRvci51cGRhdGVDaGF0Q2FyZCgpXG4gICAgfVxuICB9XG5cbiAgcGFzc1JvbGwgKHJvbGxJbmRleCkge1xuICAgIGNvbnN0IHJvbGwgPSB0aGlzLnJvbGxzW3JvbGxJbmRleF1cbiAgICBjb25zdCBsdWNrQW1vdW50ID0gcGFyc2VJbnQocm9sbC5sdWNrTmVlZGVkKVxuICAgIGlmICghdGhpcy5hY3Rvci5zcGVuZEx1Y2sobHVja0Ftb3VudCkpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGAke3RoaXMuYWN0b3IubmFtZX0gZG9lcyBub3QgaGF2ZSBlbm91Z2ggbHVjayB0byBwYXNzIHRoZSBjaGVja2BcbiAgICAgIClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICByb2xsLnN1Y2Nlc3NMZXZlbCA9IHJvbGwuZGlmZmljdWx0eVxuICAgIHJvbGwuaXNTdWNjZXNzID0gdHJ1ZVxuICAgIHJvbGwubHVja1NwZW50ID0gdHJ1ZVxuICAgIHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgdXBncmFkZVJvbGwgKHJvbGxJbmRleCwgdXBncmFkZWluZGV4KSB7XG4gICAgLy8gVE9ETyA6IENoZWNrIGlmIHRoaXMgbmVlZHMgdG8gYmUgYXN5bmNcbiAgICBjb25zdCByb2xsID0gdGhpcy5yb2xsc1tyb2xsSW5kZXhdXG4gICAgY29uc3QgaW5jcmVhc2VkU3VjY2VzcyA9IHJvbGwuaW5jcmVhc2VTdWNjZXNzW3VwZ3JhZGVpbmRleF1cbiAgICBjb25zdCBsdWNrQW1vdW50ID0gcGFyc2VJbnQoaW5jcmVhc2VkU3VjY2Vzcy5sdWNrQW1vdW50KVxuICAgIGlmICghdGhpcy5hY3Rvci5zcGVuZEx1Y2sobHVja0Ftb3VudCkpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGAke3RoaXMuYWN0b3IubmFtZX0gZG9lcyBub3QgaGF2ZSBlbm91Z2ggbHVjayB0byBwYXNzIHRoZSBjaGVja2BcbiAgICAgIClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBuZXdTdWNjZXNzTGV2ZWwgPSBwYXJzZUludChpbmNyZWFzZWRTdWNjZXNzLm5ld1N1Y2Nlc3NMZXZlbClcbiAgICByb2xsLnN1Y2Nlc3NMZXZlbCA9IG5ld1N1Y2Nlc3NMZXZlbFxuICAgIGlmIChyb2xsLmRpZmZpY3VsdHkgPD0gbmV3U3VjY2Vzc0xldmVsKSByb2xsLmlzU3VjY2VzcyA9IHRydWVcbiAgICByb2xsLmx1Y2tTcGVudCA9IHRydWVcbiAgICB0aGlzLnVwZGF0ZUNoYXRDYXJkKCkgLy8gVE9ETyA6IENoZWNrIGlmIHRoaXMgbmVlZHMgdG8gYmUgYXN5bmNcbiAgfVxuXG4gIHN0YXRpYyBnZXRGcm9tQ2FyZCAoY2FyZCwgbWVzc2FnZUlkID0gbnVsbCkge1xuICAgIGNvbnN0IHJhbmdlSW5pdGlhdG9yID0gbmV3IENvQzdSYW5nZUluaXRpYXRvcigpXG4gICAgcmFuZ2VJbml0aWF0b3IuX3RhcmdldHMgPSBbXVxuICAgIGlmIChtZXNzYWdlSWQpIHJhbmdlSW5pdGlhdG9yLm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZFxuICAgIGVsc2UgaWYgKGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKSkge1xuICAgICAgcmFuZ2VJbml0aWF0b3IubWVzc2FnZUlkID0gY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpLmRhdGFzZXQubWVzc2FnZUlkXG4gICAgfVxuXG4gICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudChyYW5nZUluaXRpYXRvciwgY2FyZClcbiAgICBjb25zdCBjYXJkVGFyZ2V0cyA9IGNhcmQucXVlcnlTZWxlY3RvckFsbCgnLnRhcmdldCcpXG4gICAgZm9yIChjb25zdCB0IG9mIGNhcmRUYXJnZXRzKSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBDb0M3UmFuZ2VUYXJnZXQuZ2V0RnJvbUVsZW1lbnQodClcbiAgICAgIHJhbmdlSW5pdGlhdG9yLnRhcmdldHMucHVzaCh0YXJnZXQpXG4gICAgfVxuXG4gICAgY29uc3QgY2FyZFNob3RzID0gY2FyZC5xdWVyeVNlbGVjdG9yQWxsKCcuc2hvdCcpXG4gICAgaWYgKGNhcmRTaG90cykge1xuICAgICAgZm9yIChjb25zdCBzIG9mIGNhcmRTaG90cykge1xuICAgICAgICBjb25zdCBzaG90ID0ge31cbiAgICAgICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudChzaG90LCBzKVxuICAgICAgICByYW5nZUluaXRpYXRvci5zaG90cy5wdXNoKHNob3QpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIGVsc2Uge1xuICAgIC8vICBjb25zdCBzaG90ID0ge1xuICAgIC8vICAgICAgc2hvdE9yZGVyOiAwLFxuICAgIC8vICAgICAgYWN0b3JLZXk6IG51bGwsXG4gICAgLy8gICAgICBhY3Rvck5hbWU6ICdkdW1teSdcbiAgICAvLyAgfVxuICAgIC8vIH1cblxuICAgIHJhbmdlSW5pdGlhdG9yLnJvbGxzID0gW11cbiAgICBjb25zdCByb2xscyA9IGNhcmQucXVlcnlTZWxlY3RvckFsbCgnLnJvbGwtcmVzdWx0JylcbiAgICBmb3IgKGNvbnN0IHIgb2Ygcm9sbHMpIHtcbiAgICAgIGNvbnN0IHJvbGwgPSBDb0M3Um9sbC5nZXRGcm9tRWxlbWVudChyKVxuICAgICAgcmFuZ2VJbml0aWF0b3Iucm9sbHMucHVzaChyb2xsKVxuICAgIH1cblxuICAgIHJhbmdlSW5pdGlhdG9yLmRhbWFnZSA9IFtdXG4gICAgY29uc3QgZGFtYWdlUm9sbHMgPSBjYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kYW1hZ2UtcmVzdWx0cycpXG4gICAgZm9yIChjb25zdCBkciBvZiBkYW1hZ2VSb2xscykge1xuICAgICAgY29uc3QgZGFtYWdlUm9sbCA9IENvQzdEYW1hZ2UuZ2V0RnJvbUVsZW1lbnQoZHIpXG4gICAgICByYW5nZUluaXRpYXRvci5kYW1hZ2UucHVzaChkYW1hZ2VSb2xsKVxuICAgIH1cblxuICAgIHJldHVybiByYW5nZUluaXRpYXRvclxuICB9XG5cbiAgYXN5bmMgcm9sbERhbWFnZSAoKSB7XG4gICAgdGhpcy5kYW1hZ2UgPSBbXVxuICAgIGNvbnN0IGhpdHMgPSB0aGlzLnN1Y2Nlc3NmdWxIaXRzXG5cbiAgICAvLyBsZXQgdm9sbGV5U2l6ZSA9IDE7XG4gICAgLy8gaWYoIHRoaXMuZnVsbEF1dG8pIHtcbiAgICAvLyAgdm9sbGV5U2l6ZSA9IHRoaXMudm9sbGV5U2l6ZTtcbiAgICAvLyAgaWYodm9sbGV5U2l6ZSA8IDMpIHZvbGxleVNpemUgPSAzO1xuICAgIC8vIH1cbiAgICAvLyBpZiggdGhpcy5idXJzdCkgdm9sbGV5U2l6ZSA9IHBhcnNlSW50KHRoaXMud2VhcG9uLmRhdGEuZGF0YS51c2VzUGVyUm91bmQuYnVyc3QpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGl0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaCA9IGhpdHNbaV1cbiAgICAgIGNvbnN0IHZvbGxleVNpemUgPSBwYXJzZUludChoLnNob3QuYnVsbGV0c1Nob3QpXG4gICAgICBjb25zdCBkYW1hZ2VSb2xscyA9IFtdXG5cbiAgICAgIGlmICh2b2xsZXlTaXplID4gMCkge1xuICAgICAgICBsZXQgZGFtYWdlRm9ybXVsYSA9IFN0cmluZyhoLnNob3QuZGFtYWdlKVxuICAgICAgICBpZiAoIWRhbWFnZUZvcm11bGEgfHwgZGFtYWdlRm9ybXVsYSA9PT0gJycpIGRhbWFnZUZvcm11bGEgPSAnMCdcbiAgICAgICAgY29uc3QgZGFtYWdlRGllID0gQ29DN0RhbWFnZS5nZXRNYWluRGllKGRhbWFnZUZvcm11bGEpXG4gICAgICAgIGNvbnN0IG1heERhbWFnZSA9IG5ldyBSb2xsKGRhbWFnZUZvcm11bGEpLmV2YWx1YXRlKHtcbiAgICAgICAgICBtYXhpbWl6ZTogdHJ1ZVxuICAgICAgICB9KS50b3RhbFxuICAgICAgICBjb25zdCBjcml0aWNhbERhbWFnZUZvcm11bGEgPSB0aGlzLndlYXBvbi5pbXBhbGVcbiAgICAgICAgICA/IGAke2RhbWFnZUZvcm11bGF9ICsgJHttYXhEYW1hZ2V9YFxuICAgICAgICAgIDogYCR7bWF4RGFtYWdlfWBcbiAgICAgICAgY29uc3QgY3JpdGljYWxEYW1hZ2VEaWUgPSBDb0M3RGFtYWdlLmdldE1haW5EaWUoY3JpdGljYWxEYW1hZ2VGb3JtdWxhKVxuXG4gICAgICAgIGxldCBpbXBhbGluZ1Nob3RzID0gMFxuICAgICAgICBsZXQgc3VjY2Vzc2Z1bFNob3RzID0gMFxuICAgICAgICBsZXQgY3JpdGljYWwgPSBmYWxzZVxuICAgICAgICBpZiAodGhpcy5mdWxsQXV0byB8fCB0aGlzLmJ1cnN0KSB7XG4gICAgICAgICAgc3VjY2Vzc2Z1bFNob3RzID0gTWF0aC5mbG9vcih2b2xsZXlTaXplIC8gMilcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VjY2Vzc2Z1bFNob3RzID09PSAwKSBzdWNjZXNzZnVsU2hvdHMgPSAxXG4gICAgICAgIGlmIChoLnJvbGwuc3VjY2Vzc0xldmVsID49IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZSkge1xuICAgICAgICAgIGltcGFsaW5nU2hvdHMgPSBzdWNjZXNzZnVsU2hvdHNcbiAgICAgICAgICBzdWNjZXNzZnVsU2hvdHMgPSB2b2xsZXlTaXplIC0gaW1wYWxpbmdTaG90c1xuICAgICAgICAgIGNyaXRpY2FsID0gdHJ1ZVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuY3JpdGljYWwgIT09IGgucm9sbC5zdWNjZXNzTGV2ZWwgJiZcbiAgICAgICAgICAgIChDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmV4dHJlbWUgPD0gaC5yb2xsLmRpZmZpY3VsdHkgfHxcbiAgICAgICAgICAgICAgaC5zaG90LmV4dHJlbWVSYW5nZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHN1Y2Nlc3NmdWxTaG90cyA9IHZvbGxleVNpemVcbiAgICAgICAgICAgIGltcGFsaW5nU2hvdHMgPSAwXG4gICAgICAgICAgICBjcml0aWNhbCA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRvdGFsID0gMFxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc3VjY2Vzc2Z1bFNob3RzOyBpbmRleCsrKSB7XG4gICAgICAgICAgY29uc3Qgcm9sbCA9IG5ldyBSb2xsKGRhbWFnZUZvcm11bGEpXG4gICAgICAgICAgLyoqIE1PRElGIDAuOC54ICoqL1xuICAgICAgICAgIGF3YWl0IHJvbGwuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgIGF3YWl0IENvQzdEaWNlLnNob3dSb2xsRGljZTNkKHJvbGwpXG4gICAgICAgICAgLyoqKioqKioqKioqKioqKioqL1xuICAgICAgICAgIGRhbWFnZVJvbGxzLnB1c2goe1xuICAgICAgICAgICAgZm9ybXVsYTogZGFtYWdlRm9ybXVsYSxcbiAgICAgICAgICAgIHRvdGFsOiByb2xsLnRvdGFsLFxuICAgICAgICAgICAgZGllOiBkYW1hZ2VEaWUsXG4gICAgICAgICAgICBjcml0aWNhbDogZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRvdGFsICs9IHJvbGwudG90YWxcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaW1wYWxpbmdTaG90czsgaW5kZXgrKykge1xuICAgICAgICAgIGNvbnN0IHJvbGwgPSBuZXcgUm9sbChjcml0aWNhbERhbWFnZUZvcm11bGEpXG4gICAgICAgICAgLyoqIE1PRElGIDAuOC54ICoqL1xuICAgICAgICAgIGF3YWl0IHJvbGwuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgIGF3YWl0IENvQzdEaWNlLnNob3dSb2xsRGljZTNkKHJvbGwpXG4gICAgICAgICAgLyoqKioqKioqKioqKioqKioqL1xuICAgICAgICAgIGRhbWFnZVJvbGxzLnB1c2goe1xuICAgICAgICAgICAgZm9ybXVsYTogY3JpdGljYWxEYW1hZ2VGb3JtdWxhLFxuICAgICAgICAgICAgdG90YWw6IHJvbGwudG90YWwsXG4gICAgICAgICAgICBkaWU6IGNyaXRpY2FsRGFtYWdlRGllLFxuICAgICAgICAgICAgY3JpdGljYWw6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRvdGFsICs9IHJvbGwudG90YWxcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YXJnZXROYW1lID0gJ2R1bW15J1xuICAgICAgICBsZXQgdGFyZ2V0ID0gY2hhdEhlbHBlci5nZXRUb2tlbkZyb21LZXkoaC5yb2xsLnRhcmdldEtleSlcbiAgICAgICAgaWYgKCF0YXJnZXQpIHRhcmdldCA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KGgucm9sbC50YXJnZXRLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgICBpZiAodGFyZ2V0KSB0YXJnZXROYW1lID0gdGFyZ2V0Lm5hbWVcblxuICAgICAgICB0aGlzLmRhbWFnZS5wdXNoKHtcbiAgICAgICAgICB0YXJnZXRLZXk6IGgucm9sbC50YXJnZXRLZXksXG4gICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICByb2xsczogZGFtYWdlUm9sbHMsXG4gICAgICAgICAgdG90YWwsXG4gICAgICAgICAgY3JpdGljYWwsXG4gICAgICAgICAgZGVhbHQ6IGZhbHNlLFxuICAgICAgICAgIHJlc3VsdFN0cmluZzogZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5yYW5nZUNvbWJhdERhbWFnZScsIHtcbiAgICAgICAgICAgIG5hbWU6IHRhcmdldE5hbWUsXG4gICAgICAgICAgICB0b3RhbFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kYW1hZ2VSb2xsZWQgPSB0aGlzLmRhbWFnZS5sZW5ndGggIT09IDBcbiAgICB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIGFzeW5jIGRlYWxEYW1hZ2UgKCkge1xuICAgIGZvciAobGV0IGRJbmRleCA9IDA7IGRJbmRleCA8IHRoaXMuZGFtYWdlLmxlbmd0aDsgZEluZGV4KyspIHtcbiAgICAgIGNvbnN0IGFjdG9yID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5kYW1hZ2VbZEluZGV4XS50YXJnZXRLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgaWYgKGFjdG9yID09PSBudWxsKSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vVGFyZ2V0VG9EYW1hZ2UnKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGFtYWdlW2RJbmRleF0udG90YWxUYWtlbiA9IDBcbiAgICAgICAgdGhpcy5kYW1hZ2VbZEluZGV4XS50b3RhbEFic29yYmVkID0gMFxuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBySW5kZXggPSAwO1xuICAgICAgICAgIHJJbmRleCA8IHRoaXMuZGFtYWdlW2RJbmRleF0ucm9sbHMubGVuZ3RoO1xuICAgICAgICAgIHJJbmRleCsrXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGRlYWx0QW1vdW50ID0gYXdhaXQgYWN0b3IuZGVhbERhbWFnZShcbiAgICAgICAgICAgIHRoaXMuZGFtYWdlW2RJbmRleF0ucm9sbHNbckluZGV4XS50b3RhbFxuICAgICAgICAgIClcbiAgICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLnRvdGFsVGFrZW4gKz0gZGVhbHRBbW91bnRcbiAgICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLnJvbGxzW3JJbmRleF0udGFrZW4gPSBkZWFsdEFtb3VudFxuICAgICAgICAgIHRoaXMuZGFtYWdlW2RJbmRleF0ucm9sbHNbckluZGV4XS5hYnNvcmJlZCA9XG4gICAgICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLnJvbGxzW3JJbmRleF0udG90YWwgLSBkZWFsdEFtb3VudFxuICAgICAgICAgIHRoaXMuZGFtYWdlW2RJbmRleF0udG90YWxBYnNvcmJlZCArPVxuICAgICAgICAgICAgdGhpcy5kYW1hZ2VbZEluZGV4XS5yb2xsc1tySW5kZXhdLnRvdGFsIC0gZGVhbHRBbW91bnRcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLmRlYWx0ID0gdHJ1ZVxuICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgJ0NvQzcucmFuZ2VDb21iYXREYW1hZ2VBcm1vcicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5kYW1hZ2VbZEluZGV4XS50YXJnZXROYW1lLFxuICAgICAgICAgICAgdG90YWw6IHRoaXMuZGFtYWdlW2RJbmRleF0udG90YWxUYWtlbixcbiAgICAgICAgICAgIGFybW9yOiB0aGlzLmRhbWFnZVtkSW5kZXhdLnRvdGFsQWJzb3JiZWRcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kYW1hZ2VEZWFsdCA9IHRydWVcbiAgICB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29DN1JhbmdlVGFyZ2V0IHtcbiAgY29uc3RydWN0b3IgKGFjdG9yS2V5ID0gbnVsbCkge1xuICAgIHRoaXMuYWN0b3JLZXkgPSBhY3RvcktleVxuICAgIHRoaXMuY292ZXIgPSBmYWxzZVxuICAgIHRoaXMucG9pbnRCbGFua1JhbmdlID0gZmFsc2VcbiAgICB0aGlzLmJhc2VSYW5nZSA9IHRydWVcbiAgICB0aGlzLmxvbmdSYW5nZSA9IGZhbHNlXG4gICAgdGhpcy5leHRyZW1lUmFuZ2UgPSBmYWxzZVxuICAgIHRoaXMuaW5NZWxlZSA9IGZhbHNlXG4gIH1cblxuICBnZXQgYmlnICgpIHtcbiAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9iaWcpIHtcbiAgICAgIGlmICh0aGlzLmFjdG9yICYmIHRoaXMuYWN0b3IuYnVpbGQpIHRoaXMuX2JpZyA9IHRoaXMuYWN0b3IuYnVpbGQgPj0gNFxuICAgICAgZWxzZSB0aGlzLl9iaWcgPSBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYmlnXG4gIH1cblxuICBzZXQgYmlnIChiKSB7XG4gICAgdGhpcy5fYmlnID0gYlxuICB9XG5cbiAgZ2V0IHNtYWxsICgpIHtcbiAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9zbWFsbCkge1xuICAgICAgaWYgKHRoaXMuYWN0b3IgJiYgdGhpcy5hY3Rvci5idWlsZCkgdGhpcy5fc21hbGwgPSB0aGlzLmFjdG9yLmJ1aWxkIDw9IC0yXG4gICAgICBlbHNlIHRoaXMuX3NtYWxsID0gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NtYWxsXG4gIH1cblxuICBzZXQgc21hbGwgKGIpIHtcbiAgICB0aGlzLl9zbWFsbCA9IGJcbiAgfVxuXG4gIGdldCBub3JtYWwgKCkge1xuICAgIHJldHVybiAhdGhpcy5iaWcgJiYgIXRoaXMuc21hbGxcbiAgfVxuXG4gIHNldCBub3JtYWwgKGIpIHtcbiAgICB0aGlzLl9iaWcgPSBmYWxzZVxuICAgIHRoaXMuX3NtYWxsID0gZmFsc2VcbiAgfVxuXG4gIGdldCBpc0Zhc3QgKCkge1xuICAgIGlmICh0aGlzLmFjdG9yICYmIHRoaXMuYWN0b3IubW92KSByZXR1cm4gdGhpcy5hY3Rvci5tb3YgPj0gOFxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IGZhc3QgKCkge1xuICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuX2Zhc3QpIHtcbiAgICAgIC8vIGlmKCB0aGlzLmFjdG9yICYmIHRoaXMuYWN0b3IubW92KSB0aGlzLl9mYXN0ID0gdGhpcy5hY3Rvci5tb3YgPj0gODtcbiAgICAgIC8vIGVsc2UgdGhpcy5fZmFzdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fZmFzdCA9IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9mYXN0XG4gIH1cblxuICBzZXQgZmFzdCAoYikge1xuICAgIHRoaXMuX2Zhc3QgPSBiXG4gIH1cblxuICBnZXQgYWN0b3IgKCkge1xuICAgIGlmICh0aGlzLmFjdG9yS2V5ICYmICF0aGlzLl9hY3Rvcikge1xuICAgICAgdGhpcy5fYWN0b3IgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLmFjdG9yS2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FjdG9yXG4gIH1cblxuICBnZXQgbmFtZSAoKSB7XG4gICAgaWYgKHRoaXMudG9rZW4pIHJldHVybiB0aGlzLnRva2VuLm5hbWVcbiAgICBpZiAodGhpcy5hY3RvcikgcmV0dXJuIHRoaXMuYWN0b3IubmFtZVxuICAgIHJldHVybiAnRHVtbXknXG4gIH1cblxuICBnZXQgaW1nICgpIHtcbiAgICBpZiAodGhpcy50b2tlbikge1xuICAgICAgaWYgKHRoaXMudG9rZW4uZG9jdW1lbnQ/LnRleHR1cmUuc3JjKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuLmRvY3VtZW50Py50ZXh0dXJlLnNyY1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5hY3RvcikgcmV0dXJuIHRoaXMuYWN0b3IuZGF0YS5pbWdcbiAgICByZXR1cm4gJy4uL2ljb25zL3N2Zy9teXN0ZXJ5LW1hbi1ibGFjay5zdmcnXG4gIH1cblxuICBnZXQgdG9rZW4gKCkge1xuICAgIGlmICghdGhpcy5fdG9rZW4gJiYgdGhpcy5hY3RvcktleSkge1xuICAgICAgdGhpcy5fdG9rZW4gPSBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLmFjdG9yS2V5KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdG9rZW5cbiAgfVxuXG4gIGdldCBzaXplVGV4dCAoKSB7XG4gICAgaWYgKHRoaXMuYmlnKSB7XG4gICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LnJhbmdlQ29tYmF0Q2FyZC5CaWdUYXJnZXRUaXRsZScpXG4gICAgfVxuICAgIGlmICh0aGlzLnNtYWxsKSB7XG4gICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LnJhbmdlQ29tYmF0Q2FyZC5TbWFsbFRhcmdldFRpdGxlJylcbiAgICB9XG4gICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5yYW5nZUNvbWJhdENhcmQuTm9ybWFsVGFyZ2V0VGl0bGUnKVxuICB9XG5cbiAgZ2V0IHNpemVMYWJlbCAoKSB7XG4gICAgaWYgKHRoaXMuYmlnKSByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LnJhbmdlQ29tYmF0Q2FyZC5CaWdUYXJnZXQnKVxuICAgIGlmICh0aGlzLnNtYWxsKSByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LmNvbWJhdENhcmQuU21hbGxUYXJnZXQnKVxuICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcucmFuZ2VDb21iYXRDYXJkLk5vcm1hbFRhcmdldCcpXG4gIH1cblxuICBnZXQgZGlmZmljdWx0eSAoKSB7XG4gICAgaWYgKHRoaXMuYmFzZVJhbmdlIHx8IHRoaXMucG9pbnRCbGFua1JhbmdlKSB7XG4gICAgICByZXR1cm4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgfVxuICAgIGlmICh0aGlzLmxvbmdSYW5nZSkgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZFxuICAgIGlmICh0aGlzLmV4dHJlbWVSYW5nZSkgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZVxuICAgIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmltcG9zc2libGVcbiAgfVxuXG4gIGdldCBtb2RpZmllciAoKSB7XG4gICAgbGV0IG1vZGlmaWVyID0gMFxuICAgIGlmICh0aGlzLmNvdmVyKSBtb2RpZmllci0tXG4gICAgaWYgKHRoaXMucG9pbnRCbGFua1JhbmdlKSBtb2RpZmllcisrXG4gICAgaWYgKHRoaXMuZmFzdCkgbW9kaWZpZXItLVxuICAgIGlmICh0aGlzLnNtYWxsKSBtb2RpZmllci0tXG4gICAgaWYgKHRoaXMuYmlnKSBtb2RpZmllcisrXG4gICAgaWYgKHRoaXMuaW5NZWxlZSkgbW9kaWZpZXItLVxuICAgIGlmICh0aGlzLnN1cnByaXNlZCkgbW9kaWZpZXIrK1xuICAgIHJldHVybiBtb2RpZmllclxuICB9XG5cbiAgc2V0IHRva2VuICh0KSB7XG4gICAgdGhpcy5fdG9rZW4gPSB0XG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbUVsZW1lbnQgKGVsZW1lbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBuZXcgQ29DN1JhbmdlVGFyZ2V0KClcbiAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KHRhcmdldCwgZWxlbWVudClcbiAgICByZXR1cm4gdGFyZ2V0XG4gIH1cblxuICBzdGF0aWMgY2hhbmdlRGlzcGxheWVkVGFyZ2V0IChldmVudCkge1xuICAgIGlmICghZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3RhcmdldC1zZWxlY3RvcicpKSByZXR1cm4gbnVsbFxuICAgIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IHRhcmdldHMgPSB0YXJnZXRTZWxlY3Rvci5jbG9zZXN0KCcudGFyZ2V0cycpXG4gICAgY29uc3QgdGFyZ2V0TGlzdCA9IHRhcmdldHMucXVlcnlTZWxlY3RvckFsbCgnLnRhcmdldCcpXG4gICAgcmV0dXJuIHRhcmdldExpc3RcbiAgfVxuXG4gIGF0dGFjaFRvRWxlbWVudCAoZWxlbWVudCkge1xuICAgIGNoYXRIZWxwZXIuYXR0YWNoT2JqZWN0VG9FbGVtZW50KHRoaXMsIGVsZW1lbnQpXG4gIH1cblxuICB0b2dnbGVGbGFnIChmbGFnKSB7XG4gICAgaWYgKFxuICAgICAgZmxhZyA9PT0gJ2Jhc2VSYW5nZScgfHxcbiAgICAgIGZsYWcgPT09ICdsb25nUmFuZ2UnIHx8XG4gICAgICBmbGFnID09PSAnZXh0cmVtZVJhbmdlJyB8fFxuICAgICAgZmxhZyA9PT0gJ3BvaW50QmxhbmtSYW5nZSdcbiAgICApIHtcbiAgICAgIHRoaXMucG9pbnRCbGFua1JhbmdlID0gZmFsc2VcbiAgICAgIHRoaXMuYmFzZVJhbmdlID0gZmFsc2VcbiAgICAgIHRoaXMubG9uZ1JhbmdlID0gZmFsc2VcbiAgICAgIHRoaXMuZXh0cmVtZVJhbmdlID0gZmFsc2VcbiAgICAgIHRoaXMub3V0T2ZSYW5nZSA9IGZhbHNlXG4gICAgICB0aGlzW2ZsYWddID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoZmxhZyA9PT0gJ3NpemUnKSB7XG4gICAgICBpZiAodGhpcy5zbWFsbCkge1xuICAgICAgICB0aGlzLnNtYWxsID0gZmFsc2VcbiAgICAgICAgdGhpcy5iaWcgPSB0cnVlXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYmlnKSB7XG4gICAgICAgIHRoaXMuc21hbGwgPSBmYWxzZVxuICAgICAgICB0aGlzLmJpZyA9IGZhbHNlXG4gICAgICB9IGVsc2UgdGhpcy5zbWFsbCA9IHRydWVcbiAgICB9IGVsc2UgdGhpc1tmbGFnXSA9ICF0aGlzW2ZsYWddXG4gICAgaWYgKGZsYWcgPT09ICdmYXN0JyAmJiB0aGlzLmZhc3QgJiYgIXRoaXMuaXNGYXN0KSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuV2FybkZhc3RUYXJnZXRXaXRoV3JvbmdNT1YnLCB7XG4gICAgICAgICAgbW92OiB0aGlzLmFjdG9yLm1vdlxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENoYXRNZXNzYWdlLCBDT05TVCwgZ2FtZSwgVG9rZW4sIHRva2VuRGF0YSwgdWkgKi9cbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4vY2hlY2suanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3TWVsZWVJbml0aWF0b3IgfSBmcm9tICcuL2NoYXQvY29tYmF0L21lbGVlLWluaXRpYXRvci5qcydcbmltcG9ydCB7IENvQzdNZWxlZVRhcmdldCB9IGZyb20gJy4vY2hhdC9jb21iYXQvbWVsZWUtdGFyZ2V0LmpzJ1xuaW1wb3J0IHsgQ29DN01lbGVlUmVzb2x0aW9uIH0gZnJvbSAnLi9jaGF0L2NvbWJhdC9tZWxlZS1yZXNvbHV0aW9uLmpzJ1xuaW1wb3J0IHsgQ29DN1JhbmdlSW5pdGlhdG9yIH0gZnJvbSAnLi9jaGF0L3JhbmdlY29tYmF0LmpzJ1xuaW1wb3J0IHsgQ29DN1JvbGwsIGNoYXRIZWxwZXIsIGlzQ3RybEtleSB9IGZyb20gJy4vY2hhdC9oZWxwZXIuanMnXG4vLyBpbXBvcnQgeyBDb0M3RGFtYWdlUm9sbCB9IGZyb20gJy4vY2hhdC9kYW1hZ2VjYXJkcy5qcyc7XG5pbXBvcnQgeyBDb0M3Q29uQ2hlY2sgfSBmcm9tICcuL2NoYXQvY29uY2hlY2suanMnXG5pbXBvcnQgeyBTYW5DaGVja0NhcmQgfSBmcm9tICcuL2NoYXQvY2FyZHMvc2FuLWNoZWNrLmpzJ1xuaW1wb3J0IHsgT3Bwb3NlZENoZWNrQ2FyZCB9IGZyb20gJy4vY2hhdC9jYXJkcy9vcHBvc2VkLXJvbGwuanMnXG5pbXBvcnQgeyBDb21iaW5lZENoZWNrQ2FyZCB9IGZyb20gJy4vY2hhdC9jYXJkcy9jb21iaW5lZC1yb2xsLmpzJ1xuaW1wb3J0IHsgSW50ZXJhY3RpdmVDaGF0Q2FyZCB9IGZyb20gJy4vY2hhdC9pbnRlcmFjdGl2ZS1jaGF0LWNhcmQuanMnXG5pbXBvcnQgeyBEYW1hZ2VDYXJkIH0gZnJvbSAnLi9jaGF0L2NhcmRzL2RhbWFnZS5qcydcbmltcG9ydCB7IENvQzdEaWNlIH0gZnJvbSAnLi9kaWNlLmpzJ1xuXG5jb25zdCBDSEFUX0NPQzdfTUVTU0FHRSA9IHtcbiAgRkFLRVJPTEw6XG4gICAgJzxkaXYgY2xhc3M9XCJkaWNlLXJvbGxcIj48ZGl2IGNsYXNzPVwiZGljZS1yZXN1bHRcIj48ZGl2IGNsYXNzPVwiZGljZS1mb3JtdWxhXCI+Pz8/PC9kaXY+PGg0IGNsYXNzPVwiZGljZS10b3RhbFwiPj88L2g0PjwvZGl2PjwvZGl2Pidcbn1cbmV4cG9ydCBjbGFzcyBDb0M3Q2hhdCB7XG4gIHN0YXRpYyByZW5kZXJDaGF0TWVzc2FnZUhvb2sgKGNoYXRNZXNzYWdlLCBodG1sKSB7XG4gICAgaWYgKGNoYXRNZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAnR01TZWxmUm9sbCcpICYmICFnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaHRtbC5maW5kKCcud2hpc3Blci10bycpLnJlbW92ZSgpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuZmxhdm9yLXRleHQnKVxuICAgICAgICAucmVwbGFjZVdpdGgoXG4gICAgICAgICAgYDxzcGFuIGNsYXNzPVwiZmxhdm9yLXRleHRcIj4ke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICdDb0M3LlJvbGxTZWNyZXREaWNlJ1xuICAgICAgICAgICl9PC9zcGFuPmBcbiAgICAgICAgKVxuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnLm1lc3NhZ2UtY29udGVudCcpXG4gICAgICAgIC5yZXBsYWNlV2l0aChcbiAgICAgICAgICBgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtY29udGVudFwiPiR7Q0hBVF9DT0M3X01FU1NBR0UuRkFLRVJPTEx9PC9kaXY+YFxuICAgICAgICApXG4gICAgfVxuXG4gICAgaWYgKGNoYXRNZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAncmVtb3ZlV2lzcGVyVGFyZ2V0cycpICYmICFnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaHRtbC5maW5kKCcud2hpc3Blci10bycpLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgaWYgKGNoYXRNZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAnZmFrZVJvbGwnKSAmJiBnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnLmZsYXZvci10ZXh0JylcbiAgICAgICAgLnJlcGxhY2VXaXRoKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5LZWVwZXJTZW50RGVjb3knKSlcbiAgICAgIGh0bWwuZmluZCgnLm1lc3NhZ2UtY29udGVudCcpLnJlbW92ZSgpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZha2VSb2xsTWVzc2FnZSAoKSB7XG4gICAgY29uc3QgY2hhdERhdGEgPSB7XG4gICAgICB1c2VyOiBnYW1lLnVzZXIuaWQsXG4gICAgICBmbGF2b3I6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Sb2xsU2VjcmV0RGljZScpLFxuICAgICAgd2hpc3BlcjogZ2FtZS51c2Vycy5wbGF5ZXJzLFxuICAgICAgdHlwZTogQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLldISVNQRVIsXG4gICAgICBmbGFnczoge1xuICAgICAgICBDb0M3OiB7XG4gICAgICAgICAgR01TZWxmUm9sbDogZmFsc2UsXG4gICAgICAgICAgcmVtb3ZlV2lzcGVyVGFyZ2V0czogdHJ1ZSxcbiAgICAgICAgICBmYWtlUm9sbDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29udGVudDogQ0hBVF9DT0M3X01FU1NBR0UuRkFLRVJPTExcbiAgICB9XG5cbiAgICBDaGF0TWVzc2FnZS5jcmVhdGUoY2hhdERhdGEpXG4gIH1cblxuICAvLyBUT0RPIHJlbXBsYWNlciBsZXMgZ2V0RWxlbWVudHNCeXh4eHggcGFyIHF1ZXJ5U2VsZWN0b3JcblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqXG4gICAqICBJbml0IHNvY2tldHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgc3RhdGljIHJlYWR5ICgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnLS0+Q29DN0NoYXQucmVhZHknKTtcbiAgICBnYW1lLkNvQzcgPSAnaW5pdCdcbiAgfVxuXG4gIC8vIHN0YXRpYyBvbk1lc3NhZ2UoIGRhdGEpIHtcbiAgLy8gIGNvbnNvbGUubG9nKCctLT5Db0M3Q2hhdC5vbk1lc3NhZ2UnKTtcbiAgLy8gIGNvbnNvbGUubG9nKGBtZXNzYWdlIHJlY2VpdmVkIHNlbmQmZXIgOiR7ZGF0YS51c2VyfSBtZXNzYWdlIHR5cGUgOiAke2RhdGEuYWN0aW9ufSBmb3IgbWVzc2FnZSA6JHtkYXRhLm1lc3NhZ2VJZH1gKTtcbiAgLy8gfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICpcbiAgICogIENoYXQgTWVzc2FnZSBIZWxwZXJzICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIHN0YXRpYyBhc3luYyBjaGF0TGlzdGVuZXJzIChhcHAsIGh0bWwpIHtcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcuY2FyZC1idXR0b25zIGJ1dHRvbicsXG4gICAgICBDb0M3Q2hhdC5fb25DaGF0Q2FyZEFjdGlvbi5iaW5kKHRoaXMpXG4gICAgKVxuICAgIC8vIGh0bWwub24oJ2NsaWNrJywgJy5jYXJkLWJ1dHRvbnMgYnV0dG9uJywgQ29DN0NoYXQuX29uQ2hhdENhcmRUZXN0LmJpbmQodGhpcykpO1xuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5jYXJkLXRpdGxlJyxcbiAgICAgIENvQzdDaGF0Ll9vbkNoYXRDYXJkVG9nZ2xlQ29udGVudC5iaW5kKHRoaXMpXG4gICAgKVxuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5yYWRpby1zd2l0Y2gnLFxuICAgICAgQ29DN0NoYXQuX29uQ2hhdENhcmRSYWRpb1N3aXRjaC5iaW5kKHRoaXMpXG4gICAgKVxuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5wYW5lbC1zd2l0Y2gnLFxuICAgICAgQ29DN0NoYXQuX29uQ2hhdENhcmRUb2dnbGVTd2l0Y2guYmluZCh0aGlzKVxuICAgIClcblxuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5zaW1wbGUtZmxhZycsXG4gICAgICBDb0M3Q2hhdC5fb25DaGF0Q2FyZFRvZ2dsZVN3aXRjaC5iaW5kKHRoaXMpXG4gICAgKVxuICAgIGh0bWwub24oJ2NsaWNrJywgJy52b2xsZXktc2l6ZScsIENvQzdDaGF0Ll9vbkNoYXRDYXJkVm9sbGV5U2l6ZS5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbC5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLmRyb3Bkb3duLWVsZW1lbnQnLFxuICAgICAgQ29DN0NoYXQuX29uRHJvcERvd25FbGVtZW50U2VsZWN0ZWQuYmluZCh0aGlzKVxuICAgIClcbiAgICBodG1sLm9uKCdjbGljaycsICcuc2ltcGxlLXRvZ2dsZScsIENvQzdDaGF0Ll9vblRvZ2dsZVNlbGVjdGVkLmJpbmQodGhpcykpXG4gICAgLy8gaHRtbC5vbignY2xpY2snLCAnLmlzLW91dG51bWJlcmVkJywgQ29DN0NoYXQuX29uT3V0bnVtYmVyZWRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcblxuICAgIGh0bWwub24oJ2NsaWNrJywgJy50YXJnZXQtc2VsZWN0b3InLCBDb0M3Q2hhdC5fb25UYXJnZXRTZWxlY3QuYmluZCh0aGlzKSlcblxuICAgIGh0bWwub24oJ2RibGNsaWNrJywgJy5vcGVuLWFjdG9yJywgQ29DN0NoYXQuX29uT3BlbkFjdG9yLmJpbmQodGhpcykpXG5cbiAgICBodG1sLm9uKCdjbGljaycsICdjb2M3LWlubGluZS1yZXN1bHQnLCBDb0M3Q2hhdC5fb25JbmxpbmUuYmluZCh0aGlzKSlcblxuICAgIC8vIFJvbGxDYXJkLmJpbmRMaXN0ZXJuZXJzKCBodG1sKTtcbiAgICBPcHBvc2VkQ2hlY2tDYXJkLmJpbmRMaXN0ZXJuZXJzKGh0bWwpXG4gICAgQ29tYmluZWRDaGVja0NhcmQuYmluZExpc3Rlcm5lcnMoaHRtbClcbiAgfVxuXG4gIHN0YXRpYyBfb25PcGVuQWN0b3IgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGFjdG9yS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdG9yS2V5XG4gICAgaWYgKGFjdG9yS2V5KSB7XG4gICAgICBjb25zdCBhY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KGFjdG9yS2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIGlmIChhY3Rvci5pc093bmVyKSBhY3Rvci5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgb25VcGRhdGVDaGF0TWVzc2FnZSAoY2hhdE1lc3NhZ2UpIHtcbiAgICB1aS5jaGF0LnNjcm9sbEJvdHRvbSgpXG5cbiAgICAvLyBpZiggY2hhdE1lc3NhZ2UuZ2V0RmxhZyggJ0NvQzcnLCAncmV2ZWxlZCcpKXtcbiAgICAvLyB9XG4gICAgaWYgKGdhbWUudXNlci5pc0dNICYmIGNoYXRNZXNzYWdlLnR5cGUgPT09IDApIHtcbiAgICAgIGNvbnN0IGNhcmQgPSAkKGNoYXRNZXNzYWdlLmNvbnRlbnQpWzBdXG4gICAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ21lbGVlJykpIHtcbiAgICAgICAgaWYgKGNhcmQuZGF0YXNldC5yZXNvbHZlZCA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgaWYgKGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpbml0aWF0b3InKSkge1xuICAgICAgICAgICAgaWYgKGNhcmQuZGF0YXNldC50YXJnZXRDYXJkKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGluaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tTWVzc2FnZUlkKFxuICAgICAgICAgICAgICAgIGNoYXRNZXNzYWdlLmlkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gQ29DN01lbGVlVGFyZ2V0LmdldEZyb21NZXNzYWdlSWQoXG4gICAgICAgICAgICAgICAgaW5pdGlhdG9yLnRhcmdldENhcmRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpZiAodGFyZ2V0LnJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x1dGlvbkNhcmQgPSBuZXcgQ29DN01lbGVlUmVzb2x0aW9uKFxuICAgICAgICAgICAgICAgICAgY2hhdE1lc3NhZ2UuaWQsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0LnJlc29sdXRpb25DYXJkXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGF3YWl0IHJlc29sdXRpb25DYXJkLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIGlmICghaW5pdGlhdG9yLmNoZWNrUmV2ZWFsZWQpIGF3YWl0IGluaXRpYXRvci5yZXZlYWxDaGVjaygpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGluaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tTWVzc2FnZUlkKFxuICAgICAgICAgICAgICAgIGNoYXRNZXNzYWdlLmlkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgaWYgKGluaXRpYXRvci5yZXNvbHV0aW9uQ2FyZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdXRpb25DYXJkID0gbmV3IENvQzdNZWxlZVJlc29sdGlvbihcbiAgICAgICAgICAgICAgICAgIGNoYXRNZXNzYWdlLmlkLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGluaXRpYXRvci5yZXNvbHV0aW9uQ2FyZFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBhd2FpdCByZXNvbHV0aW9uQ2FyZC5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICBpZiAoIWluaXRpYXRvci5jaGVja1JldmVhbGVkKSBhd2FpdCBpbml0aWF0b3IucmV2ZWFsQ2hlY2soKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygndGFyZ2V0JykpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IENvQzdNZWxlZVRhcmdldC5nZXRGcm9tTWVzc2FnZUlkKGNoYXRNZXNzYWdlLmlkKVxuICAgICAgICAgICAgY29uc3QgcmVzb2x1dGlvbkNhcmQgPSBuZXcgQ29DN01lbGVlUmVzb2x0aW9uKFxuICAgICAgICAgICAgICB0YXJnZXQucGFyZW50TWVzc2FnZUlkLFxuICAgICAgICAgICAgICBjaGF0TWVzc2FnZS5pZCxcbiAgICAgICAgICAgICAgdGFyZ2V0LnJlc29sdXRpb25DYXJkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBhd2FpdCByZXNvbHV0aW9uQ2FyZC5yZXNvbHZlKClcbiAgICAgICAgICAgIGlmICghdGFyZ2V0Lm1lbGVlSW5pdGlhdG9yLmNoZWNrUmV2ZWFsZWQpIHtcbiAgICAgICAgICAgICAgYXdhaXQgdGFyZ2V0Lm1lbGVlSW5pdGlhdG9yLnJldmVhbENoZWNrKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcmVuZGVyTWVzc2FnZUhvb2sgKG1lc3NhZ2UsIGh0bWwpIHtcbiAgICB1aS5jaGF0LnNjcm9sbEJvdHRvbSgpXG5cbiAgICBJbnRlcmFjdGl2ZUNoYXRDYXJkLmJpbmRMaXN0ZW5lcnMoaHRtbClcblxuICAgIGlmIChtZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAnY2hlY2tSZXZlYWxlZCcpKSB7XG4gICAgICBodG1sLmZpbmQoJy5kaWNlLXJvbGwnKS5yZW1vdmVDbGFzcygnZ20tdmlzaWJsZS1vbmx5JylcbiAgICAgIGh0bWxbMF0uZGF0YXNldC5jaGVja1JldmVhbGVkID0gdHJ1ZVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBzaG93aW5nIGRyb3Bkb3duIHNlbGVjdGlvblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuZHJvcGJ0bicpXG4gICAgICAuY2xpY2soZXZlbnQgPT5cbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgICAgIC5jbG9zZXN0KCcuZHJvcGRvd24nKVxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd24tY29udGVudCcpXG4gICAgICAgICAgLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKVxuICAgICAgKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuZHJvcGRvd24nKVxuICAgICAgLm1vdXNlbGVhdmUoZXZlbnQgPT5cbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd24tY29udGVudCcpXG4gICAgICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxuICAgICAgKVxuXG4gICAgLy8gY29uc29sZS5sb2coJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi0tPkNvQzdDaGF0Lm1lc3NhZ2VMaXN0ZW5lcnMgbWVzc2FnZSA6JyArIG1lc3NhZ2UuaWQpO1xuICAgIC8vIG1lc3NhZ2UuZGF0YS5jb250ZW50ID0gXCJcIjtcbiAgICAvLyBkYXRhLm1lc3NhZ2UuY29udGVudCA9IFwiXCI7XG5cbiAgICAvLyBXaGVuIGEgbmV3IGNhcmQgaXMgcHVibGlzaGVkLCBjaGVjayB3ZXRoZXIgaXQncyBhIHJvbGwgdGhhdCBtb2RpZmllcyBhbiBvdGhlciBjYXJkLlxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgY29uc3QgY2FyZCA9IGh0bWxbMF0ucXVlcnlTZWxlY3RvcignLmNvYzcuY2hhdC1jYXJkJylcbiAgICAgIGlmIChjYXJkKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjYXJkLmNsYXNzTGlzdC5jb250YWlucygncm9sbC1jYXJkJykgJiZcbiAgICAgICAgICAhKGNhcmQuZGF0YXNldC5wcm9jZXNzZWQgPT09ICd0cnVlJykgJiZcbiAgICAgICAgICBjYXJkLmRhdGFzZXQucmVmTWVzc2FnZUlkXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHJvbGwgPSBDb0M3Um9sbC5nZXRGcm9tRWxlbWVudChjYXJkKVxuXG4gICAgICAgICAgaWYgKGNhcmQuZGF0YXNldC5zaWRlID09PSAndGFyZ2V0Jykge1xuICAgICAgICAgICAgcm9sbC5kZWZlbmRhbnRJZCA9IGNhcmQuZGF0YXNldC50b2tlbklkXG4gICAgICAgICAgICAgID8gY2FyZC5kYXRhc2V0LnRva2VuSWRcbiAgICAgICAgICAgICAgOiBjYXJkLmRhdGFzZXQuYWN0b3JJZFxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2FyZC5kYXRhc2V0LnNpZGUgPT09ICdpbml0aWF0b3InKSB7XG4gICAgICAgICAgICByb2xsLmluaXRpYXRvcklkID0gY2FyZC5kYXRhc2V0LnRva2VuSWRcbiAgICAgICAgICAgICAgPyBjYXJkLmRhdGFzZXQudG9rZW5JZFxuICAgICAgICAgICAgICA6IGNhcmQuZGF0YXNldC5hY3RvcklkXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcmQuZGF0YXNldC5wcm9jZXNzZWQgPSAndHJ1ZSdcblxuICAgICAgICAgIENvQzdDaGF0LnVwZGF0ZUNvbWJhdENhcmRUYXJnZXQocm9sbClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHVzZXJPbmx5ID0gaHRtbC5maW5kKCcudGFyZ2V0LW9ubHknKVxuICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiB1c2VyT25seSkge1xuICAgICAgaWYgKCFnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgY29uc3QgYWN0b3JJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFjdG9yLWlkJylcbiAgICAgICAgaWYgKGFjdG9ySWQpIHtcbiAgICAgICAgICBpZiAoZ2FtZS5hY3RvcnMuZ2V0KGFjdG9ySWQpLmlzT3duZXIpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnbU9ubHkgPSBodG1sLmZpbmQoJy5nbS1vbmx5JylcbiAgICBmb3IgKGNvbnN0IHpvbmUgb2YgZ21Pbmx5KSB7XG4gICAgICBpZiAoIWdhbWUudXNlci5pc0dNKSB7XG4gICAgICAgIHpvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHVzZXJWaXNpYmxlT25seSA9IGh0bWwuZmluZCgnLnVzZXItdmlzaWJsZS1vbmx5JylcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2YgdXNlclZpc2libGVPbmx5KSB7XG4gICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIGVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIH1cblxuICAgIGNvbnN0IGdtVmlzaWJsZU9ubHkgPSBodG1sLmZpbmQoJy5nbS12aXNpYmxlLW9ubHknKVxuICAgIGZvciAoY29uc3QgZWxlbSBvZiBnbVZpc2libGVPbmx5KSB7XG4gICAgICBpZiAoIShnYW1lLnVzZXIuaXNHTSB8fCAoZ2FtZS51c2VyLmlzVHJ1c3RlZCAmJiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd0cnVzdGVkQ2FuU2VlQ2hhdENhcmQnKSkpKSBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICB9XG5cbiAgICBjb25zdCBvd25lclZpc2libGVPbmx5ID0gaHRtbC5maW5kKCcub3duZXItdmlzaWJsZS1vbmx5JylcbiAgICBmb3IgKGNvbnN0IHpvbmUgb2Ygb3duZXJWaXNpYmxlT25seSkge1xuICAgICAgLy8gVHJ5IHJldHJpZXZpbmcgYWN0b3JcbiAgICAgIGxldCBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoem9uZS5kYXRhc2V0Py5hY3RvcktleSkgLy8gVHJ5IHdpdGggc2VsZi5cbiAgICAgIGlmICghYWN0b3IpIGFjdG9yID0gQ29DN0NoYXQuX2dldENoYXRDYXJkQWN0b3Ioem9uZS5jbG9zZXN0KCcuY2hhdC1jYXJkJykpIC8vIFRyeSB3aXRoIGNsb3Nlc3QgY2hhdCBjYXJkLlxuICAgICAgaWYgKCFhY3Rvcikge1xuICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoem9uZS5wYXJlbnRFbGVtZW50LmRhdGFzZXQuYWN0b3JLZXkpIC8vIFRyeSB3aXRoIHBhcmVudCBlbGVtZW50LlxuICAgICAgfVxuICAgICAgaWYgKCFhY3Rvcikge1xuICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoXG4gICAgICAgICAgem9uZS5jbG9zZXN0KCdbZGF0YS1hY3Rvci1rZXldJyk/LmRhdGFzZXQuYWN0b3JLZXlcbiAgICAgICAgKSAvLyBUcnkgd2l0aCBjbG9zZXN0IGRhdGEtYWN0b3Ita2V5XG4gICAgICB9XG4gICAgICBpZiAoIWFjdG9yKSB7XG4gICAgICAgIGFjdG9yID0gQ29DN0NoYXQuX2dldEFjdG9yRnJvbUtleShcbiAgICAgICAgICB6b25lLmNsb3Nlc3QoJ1tkYXRhLXRva2VuLWtleV0nKT8uZGF0YXNldC5hY3RvcktleVxuICAgICAgICApIC8vIFRyeSB3aXRoIGNsb3Nlc3QgZGF0YS10b2tlbi1rZXlcbiAgICAgIH1cblxuICAgICAgLy8gY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoIGFjdG9ySWQpO1xuICAgICAgaWYgKChhY3RvciAmJiAhYWN0b3IuaXNPd25lcikgfHwgZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgem9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICB9IC8vIGlmIGN1cnJlbnQgdXNlciBkb2Vzbid0IG93biB0aGlzIGhlIGNhbid0IGludGVycmFjdFxuICAgICAgLy8gaWYoICFDb0M3Q2hhdC5pc0NhcmRPd25lciggem9uZS5jbG9zZXN0KCcuY2hhdC1jYXJkJykpKSB7em9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO31cbiAgICB9XG5cbiAgICBpZiAoIWdhbWUudXNlci5pc0dNKSB7XG4gICAgICAvLyBHTSBjYW4gc2VlIGV2ZXJ5dGhpbmdcbiAgICAgIGNvbnN0IG93bmVyT25seSA9IGh0bWwuZmluZCgnLm93bmVyLW9ubHknKVxuICAgICAgZm9yIChjb25zdCB6b25lIG9mIG93bmVyT25seSkge1xuICAgICAgICAvLyBUcnkgcmV0cmlldmluZyBhY3RvclxuICAgICAgICBsZXQgYWN0b3IgPSBDb0M3Q2hhdC5fZ2V0QWN0b3JGcm9tS2V5KFxuICAgICAgICAgIHpvbmUuZGF0YXNldD8uYWN0b3JLZXkgfHwgem9uZS5kYXRhc2V0Py5hY3RvcklkXG4gICAgICAgICkgLy8gVHJ5IHdpdGggc2VsZi5cbiAgICAgICAgaWYgKCFhY3Rvcikge1xuICAgICAgICAgIGFjdG9yID0gQ29DN0NoYXQuX2dldENoYXRDYXJkQWN0b3Ioem9uZS5jbG9zZXN0KCcuY2hhdC1jYXJkJykpIC8vIFRyeSB3aXRoIGNsb3Nlc3QgY2hhdCBjYXJkLlxuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoem9uZS5wYXJlbnRFbGVtZW50LmRhdGFzZXQuYWN0b3JLZXkpIC8vIFRyeSB3aXRoIHBhcmVudCBlbGVtZW50LlxuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoXG4gICAgICAgICAgICB6b25lLmNsb3Nlc3QoJ1tkYXRhLWFjdG9yLWtleV0nKT8uZGF0YXNldC5hY3RvcktleVxuICAgICAgICAgICkgLy8gVHJ5IHdpdGggY2xvc2VzdCBkYXRhLWFjdG9yLWtleVxuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoXG4gICAgICAgICAgICB6b25lLmNsb3Nlc3QoJ1tkYXRhLXRva2VuLWtleV0nKT8uZGF0YXNldC5hY3RvcktleVxuICAgICAgICAgICkgLy8gVHJ5IHdpdGggY2xvc2VzdCBkYXRhLXRva2VuLWtleVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoIGFjdG9ySWQpO1xuICAgICAgICBpZiAoKGFjdG9yICYmICFhY3Rvci5pc093bmVyKSB8fCAoIWFjdG9yICYmICFnYW1lLnVzZXIuaXNHTSkpIHtcbiAgICAgICAgICB6b25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgfSAvLyBpZiBjdXJyZW50IHVzZXIgZG9lc24ndCBvd24gdGhpcyBoZSBjYW4ndCBpbnRlcnJhY3RcbiAgICAgICAgLy8gaWYoICFDb0M3Q2hhdC5pc0NhcmRPd25lciggem9uZS5jbG9zZXN0KCcuY2hhdC1jYXJkJykpKSB7em9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO31cbiAgICAgIH1cblxuICAgICAgY29uc3QgZ21TZWxlY3RPbmx5ID0gaHRtbC5maW5kKCcuZ20tc2VsZWN0LW9ubHknKVxuICAgICAgaWYgKCEoZ2FtZS51c2VyLmlzVHJ1c3RlZCAmJiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd0cnVzdGVkQ2FuTW9kZnlDaGF0Q2FyZCcpKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdCBvZiBnbVNlbGVjdE9ubHkpIHtcbiAgICAgICAgICBzZWxlY3QuY2xhc3NMaXN0LmFkZCgnaW5hY3RpdmUnKVxuICAgICAgICAgIHNlbGVjdC5jbGFzc0xpc3QucmVtb3ZlKCdzaW1wbGUtZmxhZycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IGFjdGlvblR5cGVTdHJpbmcgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaWdodEJhY2s6ICdDb0M3LmZpZ2h0QmFjaycsXG4gICAgICBtYW5ldXZlcjogJ0NvQzcubWFuZXV2ZXInLFxuICAgICAgZG9kZ2luZzogJ0NvQzcuZG9kZ2UnXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9vblRhcmdldFNlbGVjdCAoZXZlbnQpIHtcbiAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5rZXkpXG4gICAgY29uc3QgdGFyZ2V0c1NlbGVjdG9yID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudGFyZ2V0cy1zZWxlY3RvcicpXG4gICAgZm9yIChjb25zdCBpIG9mIHRhcmdldHNTZWxlY3Rvci5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKSkge1xuICAgICAgaS5zdHlsZS5ib3JkZXIgPSAnbm9uZSdcbiAgICB9XG4gICAgdGFyZ2V0c1NlbGVjdG9yXG4gICAgICAucXVlcnlTZWxlY3RvcihgW2RhdGEta2V5PVwiJHtpbmRleH1cIl1gKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgIzAwMCdcbiAgICBjb25zdCB0YXJnZXRzID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudGFyZ2V0cycpXG4gICAgZm9yIChjb25zdCB0IG9mIHRhcmdldHMucXVlcnlTZWxlY3RvckFsbCgnLnRhcmdldCcpKSB7XG4gICAgICB0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgIHQuZGF0YXNldC5hY3RpdmUgPSAnZmFsc2UnXG4gICAgfVxuICAgIGNvbnN0IHRhcmdldFRvRGlzcGxheSA9IHRhcmdldHMucXVlcnlTZWxlY3RvcihcbiAgICAgIGBbZGF0YS10YXJnZXQta2V5PVwiJHtpbmRleH1cIl1gXG4gICAgKVxuICAgIHRhcmdldFRvRGlzcGxheS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgIHRhcmdldFRvRGlzcGxheS5kYXRhc2V0LmFjdGl2ZSA9ICd0cnVlJ1xuICAgIC8vIGNvbnN0IGNoYXRDYXJkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuY2hhdC1jYXJkLnJhbmdlJyk7XG4gICAgLy8gY29uc3QgcmFuZ2VJbml0aWF0b3IgPSBDb0M3UmFuZ2VJbml0aWF0b3IuZ2V0RnJvbUNhcmQoIGNoYXRDYXJkKTtcbiAgfVxuXG4gIHN0YXRpYyBfb25Ecm9wRG93bkVsZW1lbnRTZWxlY3RlZCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCBjYXJkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuY2hhdC1jYXJkJylcbiAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ3RhcmdldCcpKSB7XG4gICAgICBDb0M3TWVsZWVUYXJnZXQudXBkYXRlU2VsZWN0ZWQoY2FyZCwgZXZlbnQpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjbGVhciBhbGwgZHJvcCBkb3duIGFuZCBoaWdobGlnaHQgdGhpcyBwYXJ0aWN1bGFyIG9uZVxuICAgIGNvbnN0IGRyb3BEb3duQm94ZXMgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICAuY2xvc2VzdCgnLnJlc3BvbnNlLXNlbGVjdGlvbicpXG4gICAgICAucXVlcnlTZWxlY3RvckFsbCgnLnRvZ2dsZS1zd2l0Y2gnKVxuICAgIGZvciAoY29uc3QgZHBkbkJveCBvZiBkcm9wRG93bkJveGVzKSB7XG4gICAgICBkcGRuQm94LmNsYXNzTGlzdC5yZW1vdmUoJ3N3aXRjaGVkLW9uJylcbiAgICB9XG4gICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudG9nZ2xlLXN3aXRjaCcpLmNsYXNzTGlzdC5hZGQoJ3N3aXRjaGVkLW9uJylcblxuICAgIC8vIGNsb3NlIGRyb3Bkb3duXG4gICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuZHJvcGRvd24tY29udGVudCcpLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKVxuXG4gICAgLy8gRGlzcGxheSB0aGUgcm9sbCBidXR0b25cbiAgICBjb25zdCBzZWxlY3RlZEJveCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAgIC5jbG9zZXN0KCcuZGVmZW5kZXItYWN0aW9uLXNlbGVjdCcpXG4gICAgICAucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLWFjdGlvbicpXG4gICAgc2VsZWN0ZWRCb3guc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICBjb25zdCBidXR0b24gPSBzZWxlY3RlZEJveC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKVxuXG4gICAgLy8gUGFzcyB0aGUgaW5pdGlhdG9yIElkIC0gQnVpbGQgY2FuIGJlIHJldHJpZXZlZCBmcm9tIHRoYXRcblxuICAgIC8vIFBhc3MgdGhlIGluaXRpYXRvciBpdGVtXG5cbiAgICAvLyBQYXNzIHRoZSBkZWZlbmRhbnQgSWRcblxuICAgIC8vIFBhc3MgdGhlIGRlZmVuZGFudCBhY3Rpb25cbiAgICBidXR0b24uZGF0YXNldC5hY3Rpb24gPSAnZGVmZW5kaW5nJ1xuICAgIGJ1dHRvbi5kYXRhc2V0LmFjdGlvblR5cGUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uXG4gICAgYnV0dG9uLmRhdGFzZXQuZGVmZW5kZXJDaG9pY2UgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uXG4gICAgYnV0dG9uLmRhdGFzZXQuc2tpbGxJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbElkXG4gICAgYnV0dG9uLmRhdGFzZXQuc2tpbGxWYWx1ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbFZhbHVlXG4gICAgYnV0dG9uLmRhdGFzZXQuc2tpbGxOYW1lID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsTmFtZVxuICAgIGJ1dHRvbi5kYXRhc2V0Lml0ZW1JZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC53ZWFwb25JZFxuICAgIGJ1dHRvbi5kYXRhc2V0Lml0ZW1OYW1lID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LndlYXBvbk5hbWVcblxuICAgIC8vIFB1dCBzb21lIHRleHQgaW4gdGhlIGJ1dHRvblxuICAgIHN3aXRjaCAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvbikge1xuICAgICAgY2FzZSAnbWFuZXV2ZXInOlxuICAgICAgICBidXR0b24uaW5uZXJUZXh0ID0gYCR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgIENPQzcuY29tYmF0Q2FyZHNbZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvbl1cbiAgICAgICAgKX0gOiAke2V2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbE5hbWV9ICgke1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbFZhbHVlXG4gICAgICAgIH0lKWBcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2ZpZ2h0QmFjayc6XG4gICAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBgJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgQ09DNy5jb21iYXRDYXJkc1tldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uXVxuICAgICAgICApfSA6ICR7ZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LndlYXBvbk5hbWV9ICgke1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbFZhbHVlXG4gICAgICAgIH0lKWBcbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgLy8gU2F2ZSBhY3Rpb24gZm9yIHRoZSByb2xsXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgX29uSW5saW5lIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldFxuXG4gICAgaWYgKGEuY2xhc3NMaXN0LmNvbnRhaW5zKCdpbmxpbmUtcmVzdWx0JykpIHtcbiAgICAgIGlmIChhLmNsYXNzTGlzdC5jb250YWlucygnZXhwYW5kZWQnKSkge1xuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLl9jb2xsYXBzZUlubGluZVJlc3VsdChhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5fZXhwYW5kSW5saW5lUmVzdWx0KGEpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9vblRvZ2dsZVNlbGVjdGVkIChldmVudCkge1xuICAgIGNvbnN0IGNhcmQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5jaGF0LWNhcmQnKVxuICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygndGFyZ2V0JykpIHtcbiAgICAgIENvQzdNZWxlZVRhcmdldC51cGRhdGVTZWxlY3RlZChjYXJkLCBldmVudClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxJZCA9PT0gJycpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVycm9yTm9Eb2RnZVNraWxsJykpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjbGVhciBhbGwgZHJvcCBkb3duIGFuZCBoaWdobGlnaHQgdGhpcyBwYXJ0aWN1bGFyIG9uZVxuICAgIGNvbnN0IGRyb3BEb3duQm94ZXMgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICAuY2xvc2VzdCgnLnJlc3BvbnNlLXNlbGVjdGlvbicpXG4gICAgICAucXVlcnlTZWxlY3RvckFsbCgnLnRvZ2dsZS1zd2l0Y2gnKVxuICAgIGZvciAoY29uc3QgZHBkbkJveCBvZiBkcm9wRG93bkJveGVzKSB7XG4gICAgICBkcGRuQm94LmNsYXNzTGlzdC5yZW1vdmUoJ3N3aXRjaGVkLW9uJylcbiAgICB9XG4gICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdzd2l0Y2hlZC1vbicpIC8vIE5lZWQgdG8gdGVzdCBpZiBpdCdzIHJlYWxseSBhIGRvZGdlICEhIVxuXG4gICAgLy8gU2F2ZSBhY3Rpb24gZm9yIHRoZSByb2xsXG4gICAgY29uc3Qgc2VsZWN0ZWRCb3ggPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICAuY2xvc2VzdCgnLmRlZmVuZGVyLWFjdGlvbi1zZWxlY3QnKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3RlZC1hY3Rpb24nKVxuICAgIHNlbGVjdGVkQm94LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgY29uc3QgYnV0dG9uID0gc2VsZWN0ZWRCb3gucXVlcnlTZWxlY3RvcignYnV0dG9uJylcblxuICAgIGJ1dHRvbi5kYXRhc2V0LmFjdGlvbiA9ICdkZWZlbmRpbmcnXG4gICAgYnV0dG9uLmRhdGFzZXQuYWN0aW9uVHlwZSA9ICdkb2RnaW5nJ1xuICAgIGJ1dHRvbi5kYXRhc2V0LmRlZmVuZGVyQ2hvaWNlID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvblxuICAgIGJ1dHRvbi5kYXRhc2V0LnNraWxsSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxJZFxuICAgIGJ1dHRvbi5kYXRhc2V0LnNraWxsVmFsdWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxWYWx1ZVxuICAgIGJ1dHRvbi5kYXRhc2V0LnNraWxsTmFtZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbE5hbWVcblxuICAgIGJ1dHRvbi5pbm5lclRleHQgPSBgJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICBDT0M3LmNvbWJhdENhcmRzW2V2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3Rpb25dXG4gICAgKX0gOiAke2V2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbE5hbWV9ICgke1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsVmFsdWVcbiAgICB9JSlgXG4gIH1cblxuICBzdGF0aWMgX29uQ2hhdENhcmRSYWRpb1N3aXRjaCAoZXZlbnQpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnLS0+Q29DN0NoYXQuX29uQ2hhdENhcmRSYWRpb1N3aXRjaCcpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBvcHRpb25MaXN0ID1cbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQucGFyZW50RWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyYWRpby1zd2l0Y2gnKVxuICAgIGxldCBpbmRleFxuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvbkxpc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gb3B0aW9uTGlzdFtpbmRleF1cbiAgICAgIGlmIChlbGVtZW50LmRhdGFzZXQucHJvcGVydHkgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5wcm9wZXJ0eSkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3N3aXRjaGVkLW9uJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc3dpdGNoZWQtb24nKVxuICAgICAgfVxuICAgIH1cbiAgICBldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC5zZWxlY3RlZCA9XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQucHJvcGVydHlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfb25DaGF0Q2FyZFZvbGxleVNpemUgKGV2ZW50KSB7XG4gICAgY29uc3QgY2FyZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmNoYXQtY2FyZCcpXG5cbiAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ3JhbmdlJykpIHtcbiAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygnaW5pdGlhdG9yJykpIHtcbiAgICAgICAgY29uc3QgcmFuZ2VDYXJkID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaW5jcmVhc2UnKSkge1xuICAgICAgICAgIHJhbmdlQ2FyZC5jaGFuZ2VWb2xsZXlTaXplKDEpXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2RlY3JlYXNlJykpIHtcbiAgICAgICAgICByYW5nZUNhcmQuY2hhbmdlVm9sbGV5U2l6ZSgtMSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfb25DaGF0Q2FyZFRvZ2dsZVN3aXRjaCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCBjYXJkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuY2hhdC1jYXJkJylcbiAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ21lbGVlJykpIHtcbiAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygnaW5pdGlhdG9yJykpIHtcbiAgICAgICAgQ29DN01lbGVlSW5pdGlhdG9yLnVwZGF0ZUNhcmRTd2l0Y2goZXZlbnQpXG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygndGFyZ2V0JykpIHtcbiAgICAgICAgQ29DN01lbGVlVGFyZ2V0LnVwZGF0ZUNhcmRTd2l0Y2goZXZlbnQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyYW5nZScpKSB7XG4gICAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ2luaXRpYXRvcicpKSB7XG4gICAgICAgIENvQzdSYW5nZUluaXRpYXRvci51cGRhdGVDYXJkU3dpdGNoKGV2ZW50KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygnZGFtYWdlJykpIHtcbiAgICAgIC8vIENvQzdJdGVtLnVwZGF0ZUNhcmRTd2l0Y2goIGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ3JvbGwtY2FyZCcpKSB7XG4gICAgICBDb0M3Q2hlY2sudXBkYXRlQ2FyZFN3aXRjaChldmVudClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBBY3RvciB3aGljaCBpcyB0aGUgYXV0aG9yIG9mIGEgY2hhdCBjYXJkXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhcmQgICAgVGhlIGNoYXQgY2FyZCBiZWluZyB1c2VkXG4gICAqIEByZXR1cm4ge0FjdG9yfG51bGx9ICAgICAgICAgVGhlIEFjdG9yIGVudGl0eSBvciBudWxsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgX2dldENoYXRDYXJkQWN0b3IgKGNhcmQpIHtcbiAgICAvLyBpZiBkYXRhc2V0Lm9iamVjdCBpcyB0aGVyZSA9PiBuZWVkIHRvIHVuZXNjYXBlIHRoaW5ncyAhIVxuICAgIC8vIGlmIG5vdCB1c2UgdGhlIGRhdGFzZXQgZGlyZWN0bHkuXG4gICAgY29uc3QgY2FyZERhdGEgPSBjYXJkLmRhdGFzZXQub2JqZWN0XG4gICAgICA/IEpTT04ucGFyc2UodW5lc2NhcGUoY2FyZC5kYXRhc2V0Lm9iamVjdCkpXG4gICAgICA6IGNhcmQuZGF0YXNldFxuXG4gICAgaWYgKGNhcmREYXRhLmFjdG9yS2V5KSByZXR1cm4gQ29DN0NoYXQuX2dldEFjdG9yRnJvbUtleShjYXJkRGF0YS5hY3RvcktleSlcblxuICAgIC8vIENhc2UgMSAtIGEgc3ludGhldGljIGFjdG9yIGZyb20gYSBUb2tlblxuICAgIGNvbnN0IHRva2VuS2V5ID0gY2FyZERhdGEudG9rZW5JZFxuICAgIGlmICh0b2tlbktleSkge1xuICAgICAgY29uc3QgW3NjZW5lSWQsIHRva2VuSWRdID0gdG9rZW5LZXkuc3BsaXQoJy4nKVxuICAgICAgaWYgKHNjZW5lSWQgPT09ICdUT0tFTicpIHtcbiAgICAgICAgcmV0dXJuIGdhbWUuYWN0b3JzLnRva2Vuc1t0b2tlbklkXSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHNjZW5lSWQpXG4gICAgICAgIGlmICghc2NlbmUpIHJldHVybiBudWxsXG4gICAgICAgIGNvbnN0IHRva2VuID0gc2NlbmUuZ2V0RW1iZWRkZWREb2N1bWVudCgnVG9rZW4nLCB0b2tlbklkKVxuICAgICAgICBpZiAoIXRva2VuKSByZXR1cm4gbnVsbFxuICAgICAgICByZXR1cm4gdG9rZW4uYWN0b3IgfHwgbmV3IFRva2VuKHRva2VuRGF0YSkuYWN0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYXNlIDIgLSB1c2UgQWN0b3IgSUQgZGlyZWN0b3J5XG4gICAgY29uc3QgYWN0b3JJZCA9IGNhcmREYXRhLmFjdG9ySWRcbiAgICBpZiAoYWN0b3JJZCkgcmV0dXJuIGdhbWUuYWN0b3JzLmdldChhY3RvcklkKVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKVxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IG1lc3NhZ2UgPyBtZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkIDogbnVsbFxuICAgIGlmIChtZXNzYWdlSWQpIHtcbiAgICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgICAgaWYgKGNoYXRNZXNzYWdlLnVzZXIpIHJldHVybiBjaGF0TWVzc2FnZS51c2VyLmNoYXJhY3RlclxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBzdGF0aWMgaXNDYXJkT3duZXIgKGNhcmQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpXG4gICAgY29uc3QgbWVzc2FnZUlkID0gbWVzc2FnZSA/IG1lc3NhZ2UuZGF0YXNldC5tZXNzYWdlSWQgOiBudWxsXG4gICAgaWYgKG1lc3NhZ2VJZCkge1xuICAgICAgY29uc3QgY2hhdE1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgICByZXR1cm4gY2hhdE1lc3NhZ2Uub3dubmVyIHx8IGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzdGF0aWMgX2dldEFjdG9yRnJvbUtleSAoa2V5KSB7XG4gICAgaWYgKCFrZXkpIHJldHVybiB1bmRlZmluZWRcbiAgICAvLyBDYXNlIDEgLSBhIHN5bnRoZXRpYyBhY3RvciBmcm9tIGEgVG9rZW5cbiAgICBpZiAoa2V5LmluY2x1ZGVzKCcuJykpIHtcbiAgICAgIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgY29uc3QgW3NjZW5lSWQsIHRva2VuSWRdID0ga2V5LnNwbGl0KCcuJylcbiAgICAgIGlmIChzY2VuZUlkID09PSAnVE9LRU4nKSB7XG4gICAgICAgIHJldHVybiBnYW1lLmFjdG9ycy50b2tlbnNbdG9rZW5JZF0gLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzY2VuZSA9IGdhbWUuc2NlbmVzLmdldChzY2VuZUlkKVxuICAgICAgICBpZiAoIXNjZW5lKSByZXR1cm4gbnVsbFxuICAgICAgICBjb25zdCB0b2tlbiA9IHNjZW5lLmdldEVtYmVkZGVkRG9jdW1lbnQoJ1Rva2VuJywgdG9rZW5JZClcbiAgICAgICAgaWYgKCF0b2tlbikgcmV0dXJuIG51bGxcbiAgICAgICAgcmV0dXJuIHRva2VuLmFjdG9yIHx8IG5ldyBUb2tlbih0b2tlbkRhdGEpLmFjdG9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FzZSAyIC0gdXNlIEFjdG9yIElEIGRpcmVjdG9yeVxuICAgIHJldHVybiBnYW1lLmFjdG9ycy5nZXQoa2V5KSB8fCBudWxsXG4gIH1cblxuICBzdGF0aWMgZ2V0QWN0b3JGcm9tVG9rZW4gKHRva2VuS2V5KSB7XG4gICAgY29uc3QgdG9rZW4gPSBDb0M3Q2hhdC5nZXRUb2tlbih0b2tlbktleSlcbiAgICByZXR1cm4gdG9rZW4gPyB0b2tlbi5hY3RvciA6IG51bGxcbiAgfVxuXG4gIHN0YXRpYyBnZXRUb2tlbiAodG9rZW5LZXkpIHtcbiAgICBpZiAodG9rZW5LZXkpIHtcbiAgICAgIGNvbnN0IFtzY2VuZUlkLCB0b2tlbklkXSA9IHRva2VuS2V5LnNwbGl0KCcuJylcbiAgICAgIGlmIChzY2VuZUlkID09PSAnVE9LRU4nKSB7XG4gICAgICAgIGNvbnN0IHRva2VuRG9jID0gZ2FtZS5hY3RvcnMudG9rZW5zW3Rva2VuSWRdPy50b2tlblxuICAgICAgICByZXR1cm4gdG9rZW5Eb2Mub2JqZWN0IC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBnYW1lLnNjZW5lcy5nZXQoc2NlbmVJZClcbiAgICAgICAgaWYgKCFzY2VuZSkgcmV0dXJuIG51bGxcbiAgICAgICAgY29uc3QgdG9rZW4gPSBzY2VuZS5nZXRFbWJlZGRlZERvY3VtZW50KCdUb2tlbicsIHRva2VuSWQpXG4gICAgICAgIGlmICghdG9rZW4pIHJldHVybiBudWxsXG4gICAgICAgIHJldHVybiB0b2tlbiB8fCBuZXcgVG9rZW4odG9rZW5EYXRhKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIHVwZGF0ZSBhIGNoYXQgbWVzc2FnZSB3aXRoIGEgbmV3IEhUTUwgY29udGVudCBhbmQgcG9wdWxhdGUgaXQuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhcmRcbiAgICovXG4gIHN0YXRpYyBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoY2FyZCwgbWVzc0lkID0gbnVsbCkge1xuICAgIGNvbnN0IG1lc3NhZ2VJZCA9XG4gICAgICBtZXNzSWQgPT0gbnVsbCA/IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKS5kYXRhc2V0Lm1lc3NhZ2VJZCA6IG1lc3NJZFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG5cbiAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLnVwZGF0ZSh7IGNvbnRlbnQ6IGNhcmQub3V0ZXJIVE1MIH0pXG4gICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgcmV0dXJuIG1zZ1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9vbkNoYXRDYXJkQWN0aW9uIChldmVudCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCctLT5Db0M3Q2hhdC5fb25DaGF0Q2FyZEFjdGlvbicpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBjYXJkID0gYnV0dG9uLmNsb3Nlc3QoJy5jaGF0LWNhcmQnKVxuICAgIGlmICghY2FyZCkgcmV0dXJuXG4gICAgY29uc3Qgb3JpZ2luTWVzc2FnZSA9IGJ1dHRvbi5jbG9zZXN0KCcubWVzc2FnZScpXG4gICAgLy8gY29uc3QgbWVzc2FnZUlkID0gb3JpZ2luTWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZDtcbiAgICBjb25zdCBhY3Rpb24gPSBidXR0b24uZGF0YXNldC5hY3Rpb25cblxuICAgIGlmICghQ29DN0NoYXQuX2dldENoYXRDYXJkQWN0b3IoY2FyZCkpIHJldHVyblxuXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3VzZUx1Y2snOiB7XG4gICAgICAgIGNvbnN0IGx1Y2tBbW91bnQgPSBwYXJzZUludChidXR0b24uZGF0YXNldC5sdWNrQW1vdW50KVxuICAgICAgICBjb25zdCBuZXdTdWNjZXNzTGV2ZWwgPSBwYXJzZUludChcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQubmV3U3VjY2Vzc0xldmVsXG4gICAgICAgIClcblxuICAgICAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ21lbGVlJykpIHtcbiAgICAgICAgICBsZXQgbWVsZWVDYXJkXG4gICAgICAgICAgaWYgKGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YXJnZXQnKSkge1xuICAgICAgICAgICAgbWVsZWVDYXJkID0gQ29DN01lbGVlVGFyZ2V0LmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygnaW5pdGlhdG9yJykpIHtcbiAgICAgICAgICAgIG1lbGVlQ2FyZCA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZWxlZUNhcmQudXBncmFkZVJvbGwobHVja0Ftb3VudCwgbmV3U3VjY2Vzc0xldmVsLCBjYXJkKSAvLyBUT0RPIDogQ2hlY2sgaWYgdGhpcyBuZWVkcyB0byBiZSBhc3luY1xuICAgICAgICB9IGVsc2UgaWYgKGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyYW5nZScpKSB7XG4gICAgICAgICAgY29uc3QgcmFuZ2VDYXJkID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgICAgY29uc3Qgcm9sbFJlc3VsdCA9IGJ1dHRvbi5jbG9zZXN0KCcucm9sbC1yZXN1bHQnKVxuICAgICAgICAgIGNvbnN0IHJvbGxJbmRleCA9IHJvbGxSZXN1bHRcbiAgICAgICAgICAgID8gcGFyc2VJbnQocm9sbFJlc3VsdC5kYXRhc2V0LmluZGV4KVxuICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3Bhc3MtY2hlY2snKSkge1xuICAgICAgICAgICAgcmFuZ2VDYXJkLnBhc3NSb2xsKHJvbGxJbmRleClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdXBncmFkZUluZGV4ID0gcGFyc2VJbnQoYnV0dG9uLmRhdGFzZXQuaW5kZXgpXG4gICAgICAgICAgICByYW5nZUNhcmQudXBncmFkZVJvbGwocm9sbEluZGV4LCB1cGdyYWRlSW5kZXgpIC8vIFRPRE8gOiBDaGVjayBpZiB0aGlzIG5lZWRzIHRvIGJlIGFzeW5jXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyb2xsLWNhcmQnKSB8fFxuICAgICAgICAgIGNhcmQucXVlcnlTZWxlY3RvcignLnJvbGwtcmVzdWx0JykgIT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBjaGVjayA9IGF3YWl0IENvQzdDaGVjay5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICAgIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdwYXNzLWNoZWNrJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGx1Y2tBbW91bnQgPSBwYXJzZUludChidXR0b24uZGF0YXNldC5sdWNrQW1vdW50KVxuICAgICAgICAgICAgY2hlY2suZm9yY2VQYXNzKGx1Y2tBbW91bnQpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHVwZ3JhZGVJbmRleCA9IHBhcnNlSW50KGJ1dHRvbi5kYXRhc2V0LmluZGV4KVxuICAgICAgICAgICAgYXdhaXQgY2hlY2sudXBncmFkZUNoZWNrKHVwZ3JhZGVJbmRleClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgYWN0b3IgPSBDb0M3Q2hhdC5fZ2V0Q2hhdENhcmRBY3RvcihjYXJkKVxuICAgICAgICAgIGNvbnN0IGRldGFpbGVkUmVzdWx0UGxhY2VIb2xkZXIgPVxuICAgICAgICAgICAgY2FyZC5xdWVyeVNlbGVjdG9yKCcucmVzdWx0LWRldGFpbHMnKVxuXG4gICAgICAgICAgaWYgKGFjdG9yLnNwZW5kTHVjayhsdWNrQW1vdW50KSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b3RhbCcpXG4gICAgICAgICAgICBjYXJkLmRhdGFzZXQuc3VjY2Vzc0xldmVsID0gbmV3U3VjY2Vzc0xldmVsXG4gICAgICAgICAgICBjYXJkLmRhdGFzZXQucHJvY2Vzc2VkID0gJ2ZhbHNlJyAvLyB0cmlnZ2VyIDMgdXBkYXRlcyBkZSBjYXJkXG4gICAgICAgICAgICBzd2l0Y2ggKG5ld1N1Y2Nlc3NMZXZlbCkge1xuICAgICAgICAgICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwucmVndWxhcjpcbiAgICAgICAgICAgICAgICByZXN1bHQuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlZ3VsYXJTdWNjZXNzJylcbiAgICAgICAgICAgICAgICBkZXRhaWxlZFJlc3VsdFBsYWNlSG9sZGVyLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgICAgICAnQ29DNy5Sb2xsUmVzdWx0Lkx1Y2tTcGVuZFRleHQnLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsdWNrQW1vdW50LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzTGV2ZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyRGlmZmljdWx0eScpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQ6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXJkU3VjY2VzcycpXG4gICAgICAgICAgICAgICAgZGV0YWlsZWRSZXN1bHRQbGFjZUhvbGRlci5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgJ0NvQzcuUm9sbFJlc3VsdC5MdWNrU3BlbmRUZXh0JyxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0xldmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGFyZERpZmZpY3VsdHknKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXh0cmVtZVN1Y2Nlc3MnKVxuICAgICAgICAgICAgICAgIGRldGFpbGVkUmVzdWx0UGxhY2VIb2xkZXIuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5JylcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuY3JpdGljYWw6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Dcml0aWNhbFN1Y2Nlc3MnKVxuICAgICAgICAgICAgICAgIGRldGFpbGVkUmVzdWx0UGxhY2VIb2xkZXIuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsRGlmZmljdWx0eScpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LmNsYXNzTGlzdC5yZXBsYWNlKCdmYWlsdXJlJywgJ3N1Y2Nlc3MnKVxuICAgICAgICAgICAgcmVzdWx0LmNsYXNzTGlzdC5yZW1vdmUoJ2Z1bWJsZScpXG4gICAgICAgICAgICBjYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLWJ1dHRvbnMnKS5yZW1vdmUoKVxuICAgICAgICAgICAgY2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b29sdGlwJykuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICAgICAgYXdhaXQgQ29DN0NoYXQudXBkYXRlQ2hhdENhcmQoY2FyZClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvck5vdEVub3VnaEx1Y2snLCB7XG4gICAgICAgICAgICAgICAgYWN0b3I6IGFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3B1c2gnOiB7XG4gICAgICAgIGNvbnN0IG5ld0NhcmQgPSBjYXJkLmNsb25lTm9kZSh0cnVlKSAvLyBUT0RPIG5vdCBuZWNlc3NhcnlcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3Q2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b3RhbCcpXG4gICAgICAgIHJlc3VsdC5pbm5lclRleHQgPVxuICAgICAgICAgIHJlc3VsdC5pbm5lclRleHQgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUHVzaGluZ1NraWxsJylcbiAgICAgICAgcmVzdWx0LmNsYXNzTGlzdC5yZW1vdmUoJ2ZhaWx1cmUnKVxuICAgICAgICBuZXdDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLWJ1dHRvbnMnKS5yZW1vdmUoKVxuICAgICAgICBuZXdDYXJkLmRhdGFzZXQucHVzaGVkUm9sbCA9IHRydWVcbiAgICAgICAgYXdhaXQgQ29DN0NoYXQudXBkYXRlQ2hhdENhcmQobmV3Q2FyZCwgb3JpZ2luTWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZClcbiAgICAgICAgYXdhaXQgQ29DN0NoZWNrLnB1c2goY2FyZClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2RlZmVuZGluZyc6IHtcbiAgICAgICAgbGV0IGRlZmVuZGVyS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuZGVmZW5kZXItYWN0aW9uLXNlbGVjdCcpXG4gICAgICAgICAgLmRhdGFzZXQudG9rZW5JZFxuICAgICAgICBsZXQgZGVmZW5kZXJcbiAgICAgICAgaWYgKCFkZWZlbmRlcktleSkge1xuICAgICAgICAgIGRlZmVuZGVyS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuZGVmZW5kZXItYWN0aW9uLXNlbGVjdCcpXG4gICAgICAgICAgICAuZGF0YXNldC5hY3RvcklkXG4gICAgICAgICAgZGVmZW5kZXIgPSBnYW1lLmFjdG9ycy5nZXQoZGVmZW5kZXJLZXkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVmZW5kZXIgPSB0aGlzLmdldEFjdG9yRnJvbVRva2VuKGRlZmVuZGVyS2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VUeXBlID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvblR5cGVcbiAgICAgICAgY29uc3Qgb3V0bnVtYmVyZWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQub3V0bnVtYmVyZWQgPT09ICd0cnVlJ1xuICAgICAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgICBjaGVjay5yZWZlcmVuY2VNZXNzYWdlSWQgPSBvcmlnaW5NZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkXG4gICAgICAgIGNoZWNrLnJvbGxUeXBlID0gJ29wcG9zZWQnXG4gICAgICAgIGNoZWNrLnNpZGUgPSAndGFyZ2V0J1xuICAgICAgICBjaGVjay5hY3Rpb24gPSByZXNwb25zZVR5cGVcbiAgICAgICAgc3dpdGNoIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkb2RnaW5nJzpcbiAgICAgICAgICAgIGNoZWNrLmFjdG9yID0gZGVmZW5kZXJcbiAgICAgICAgICAgIGNoZWNrLnNraWxsID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgICAgICAgIGlmIChvdXRudW1iZXJlZCkgY2hlY2suZGljZU1vZGlmaWVyID0gLTFcblxuICAgICAgICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICAgICAgICBjaGVjay50b01lc3NhZ2UoKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdmaWdodEJhY2snOlxuICAgICAgICAgICAgY2hlY2suYWN0b3IgPSBkZWZlbmRlclxuICAgICAgICAgICAgY2hlY2suc2tpbGwgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICAgICAgY2hlY2suZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgICAgICAgICAgY2hlY2suaXRlbSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pdGVtSWRcbiAgICAgICAgICAgIGlmIChvdXRudW1iZXJlZCkgY2hlY2suZGljZU1vZGlmaWVyID0gLTFcblxuICAgICAgICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICAgICAgICBjaGVjay50b01lc3NhZ2UoKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdtYW5ldXZlcic6IHtcbiAgICAgICAgICAgIGNvbnN0IGFjdG9yID0gQ29DN0NoYXQuX2dldENoYXRDYXJkQWN0b3IoY2FyZClcbiAgICAgICAgICAgIGlmIChkZWZlbmRlci5idWlsZCA8PSBhY3Rvci5idWlsZCAtIDMpIHtcbiAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JNYW5ldXZlck5vdFBvc3NpYmxlJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrLmFjdG9yID0gZGVmZW5kZXJcbiAgICAgICAgICAgIGNoZWNrLnNraWxsID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgICAgICAgIGlmIChvdXRudW1iZXJlZCkgY2hlY2suZGljZU1vZGlmaWVyID0gLTFcbiAgICAgICAgICAgIGlmIChkZWZlbmRlci5idWlsZCA8IGFjdG9yLmJ1aWxkKSB7XG4gICAgICAgICAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9XG4gICAgICAgICAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyIC0gKGFjdG9yLmJ1aWxkIC0gZGVmZW5kZXIuYnVpbGQpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaGVjay5kaWNlTW9kaWZpZXIgPCAtMikge1xuICAgICAgICAgICAgICBjaGVjay5kaWZmaWN1bHR5ID1cbiAgICAgICAgICAgICAgICBjaGVjay5kaWZmaWN1bHR5ICsgTWF0aC5hYnMoY2hlY2suZGljZU1vZGlmaWVyKSAtIDJcbiAgICAgICAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gLTJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICAgICAgICBjaGVjay50b01lc3NhZ2UoKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnbWVsZWUtaW5pdGlhdG9yLXJvbGwnOiB7XG4gICAgICAgIGNvbnN0IGluaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICBjb25zdCBjaGVjayA9IGF3YWl0IGluaXRpYXRvci5wZXJmb3JtU2tpbGxDaGVjayhcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxcbiAgICAgICAgKVxuICAgICAgICAkKGJ1dHRvbikucHJvcCgnZGlzYWJsZWQnLCB0cnVlKVxuICAgICAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZChjaGVjay5kaWNlLnJvbGwpXG4gICAgICAgIGF3YWl0IGluaXRpYXRvci5wdWJsaXNoQ2hlY2tSZXN1bHQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdtZWxlZS10YXJnZXQtbm8tcmVzcG9uc2UnOiB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IENvQzdNZWxlZVRhcmdldC5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICBhd2FpdCB0YXJnZXQucHVibGlzaE5vUmVwb25zZVJlc3VsdCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ21lbGVlLXRhcmdldC1yb2xsJzoge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBDb0M3TWVsZWVUYXJnZXQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgY29uc3QgY2hlY2sgPSBhd2FpdCB0YXJnZXQucGVyZm9ybVNraWxsQ2hlY2soXG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsXG4gICAgICAgIClcbiAgICAgICAgJChidXR0b24pLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSlcbiAgICAgICAgYXdhaXQgQ29DN0RpY2Uuc2hvd1JvbGxEaWNlM2QoY2hlY2suZGljZS5yb2xsKVxuICAgICAgICBhd2FpdCB0YXJnZXQucHVibGlzaENoZWNrUmVzdWx0KClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3JvbGwtbWVsZWUtZGFtYWdlJzoge1xuICAgICAgICBjb25zdCBkYW1hZ2VDaGF0Q2FyZCA9IG5ldyBEYW1hZ2VDYXJkKHtcbiAgICAgICAgICBjcml0aWNhbDogYnV0dG9uLmRhdGFzZXQuY3JpdGljYWwgPT09ICd0cnVlJyxcbiAgICAgICAgICBmYXN0Rm9yd2FyZDogZXZlbnQuc2hpZnRLZXlcbiAgICAgICAgfSlcbiAgICAgICAgZGFtYWdlQ2hhdENhcmQuYWN0b3JLZXkgPSBidXR0b24uZGF0YXNldC5kZWFsZXJcbiAgICAgICAgZGFtYWdlQ2hhdENhcmQudGFyZ2V0S2V5ID0gYnV0dG9uLmRhdGFzZXQudGFyZ2V0XG4gICAgICAgIGRhbWFnZUNoYXRDYXJkLml0ZW1JZCA9IGJ1dHRvbi5kYXRhc2V0LndlYXBvblxuICAgICAgICBpZiAob3JpZ2luTWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZCkge1xuICAgICAgICAgIGRhbWFnZUNoYXRDYXJkLm1lc3NhZ2VJZCA9IG9yaWdpbk1lc3NhZ2UuZGF0YXNldC5tZXNzYWdlSWRcbiAgICAgICAgfVxuICAgICAgICBkYW1hZ2VDaGF0Q2FyZC51cGRhdGVDaGF0Q2FyZCgpXG5cbiAgICAgICAgLy8gY29uc3QgZGFtYWdlQ2FyZCA9IG5ldyBDb0M3RGFtYWdlUm9sbChcbiAgICAgICAgLy8gIGJ1dHRvbi5kYXRhc2V0LndlYXBvbixcbiAgICAgICAgLy8gIGJ1dHRvbi5kYXRhc2V0LmRlYWxlcixcbiAgICAgICAgLy8gIHtcbiAgICAgICAgLy8gICAgdGFyZ2V0S2V5OiBidXR0b24uZGF0YXNldC50YXJnZXQsXG4gICAgICAgIC8vICAgIGNyaXRpY2FsOiAndHJ1ZScgPT0gYnV0dG9uLmRhdGFzZXQuY3JpdGljYWwsXG4gICAgICAgIC8vICAgIGZhc3RGb3J3YXJkOiBldmVudC5zaGlmdEtleVxuICAgICAgICAvLyAgfSk7XG4gICAgICAgIC8vIGlmKCBvcmlnaW5NZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkKSBkYW1hZ2VDYXJkLm1lc3NhZ2VJZCA9IG9yaWdpbk1lc3NhZ2UuZGF0YXNldC5tZXNzYWdlSWQ7XG4gICAgICAgIC8vIGRhbWFnZUNhcmQucm9sbERhbWFnZSgpO1xuICAgICAgICAvLyBpZiggb3JpZ2luTWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZCkge1xuICAgICAgICAvLyAgZm9yIChjb25zdCBiIG9mIGNhcmQucXVlcnlTZWxlY3RvckFsbCgnLmNhcmQtYnV0dG9ucycpKSB7IGIucmVtb3ZlKCkgfVxuICAgICAgICAvLyAgYXdhaXQgQ29DN0NoYXQudXBkYXRlQ2hhdENhcmQoIGNhcmQpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdyYW5nZS1pbml0aWF0b3Itc2hvb3QnOiB7XG4gICAgICAgIGNvbnN0IHJhbmdlSW5pdGlhdG9yID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIHJhbmdlSW5pdGlhdG9yLmFkZFNob3RBdEN1cnJlbnRUYXJnZXQoKVxuICAgICAgICBhd2FpdCByYW5nZUluaXRpYXRvci51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdyYW5nZS1pbml0aWF0b3Itcm9sbCc6IHtcbiAgICAgICAgY29uc3QgcmFuZ2VJbml0aWF0b3IgPSBDb0M3UmFuZ2VJbml0aWF0b3IuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgcmFuZ2VJbml0aWF0b3IucmVzb2x2ZUNhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAncm9sbC1yYW5nZS1kYW1hZ2UnOiB7XG4gICAgICAgIGNvbnN0IHJhbmdlSW5pdGlhdG9yID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGF3YWl0IHJhbmdlSW5pdGlhdG9yLnJvbGxEYW1hZ2UoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAnZGVhbC1tZWxlZS1kYW1hZ2UnOiB7XG4gICAgICAgIGNvbnN0IHRhcmdldEtleSA9IGNhcmQuZGF0YXNldC50YXJnZXRLZXlcbiAgICAgICAgY29uc3QgYW1vdW50ID0gY2FyZC5kYXRhc2V0LnJlc3VsdFxuICAgICAgICBjb25zdCB0YXJnZXRBY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRhcmdldEtleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICAgIGF3YWl0IHRhcmdldEFjdG9yLmRlYWxEYW1hZ2UoYW1vdW50KVxuICAgICAgICBjb25zdCBidXR0b25zID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuY2FyZC1idXR0b25zJylcbiAgICAgICAgY29uc3QgZGljZVRvdGFsID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b3RhbCcpXG4gICAgICAgICQoZGljZVRvdGFsKS5hcHBlbmQoJzxpIGNsYXNzPVwiZmFzIGZhLWNoZWNrXCI+PC9pPicpXG4gICAgICAgIGlmIChidXR0b25zKSBidXR0b25zLnJlbW92ZSgpXG4gICAgICAgIGF3YWl0IENvQzdDaGF0LnVwZGF0ZUNoYXRDYXJkKGNhcmQpXG5cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnZGVhbC1yYW5nZS1kYW1hZ2UnOiB7XG4gICAgICAgIGNvbnN0IHJhbmdlSW5pdGlhdG9yID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGF3YWl0IHJhbmdlSW5pdGlhdG9yLmRlYWxEYW1hZ2UoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICd0ZXN0Y2hlY2snOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmZvcmNlUGFzcygpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2ZvcmNlLXBhc3MnOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmZvcmNlUGFzcygpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2ZvcmNlLWZhaWwnOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmZvcmNlRmFpbCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2luY3JlYXNlLXN1Y2Nlc3MtbGV2ZWwnOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmluY3JlYXNlU3VjY2Vzc0xldmVsKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnZGVjcmVhc2Utc3VjY2Vzcy1sZXZlbCc6IHtcbiAgICAgICAgY29uc3QgY2hlY2sgPSBhd2FpdCBDb0M3Q2hlY2suZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgY2hlY2suZGVjcmVhc2VTdWNjZXNzTGV2ZWwoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyZXZlYWwtY2hlY2snOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmlzQmxpbmQgPSBmYWxzZVxuICAgICAgICBjaGVjay5jb21wdXRlQ2hlY2soKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNDdHJsS2V5KGV2ZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICBjaGVjay51cGRhdGVDaGF0Q2FyZCh7IG1ha2VQdWJsaWM6IHRydWUgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVjay51cGRhdGVDaGF0Q2FyZCh7IG1ha2VQdWJsaWM6IHRydWUgfSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyb2xsLWNoZWNrLWNhcmQnOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLnN0YW5kYnkgPSBmYWxzZVxuICAgICAgICBhd2FpdCBjaGVjay5fcGVyZm9ybSgpXG4gICAgICAgIGNoZWNrLnVwZGF0ZUNoYXRDYXJkKHsgZm9yY2VSb2xsOiB0cnVlIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2ZsYWctZm9yLWRldmVsb3BtZW50Jzoge1xuICAgICAgICBjb25zdCBjaGVjayA9IGF3YWl0IENvQzdDaGVjay5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICBhd2FpdCBjaGVjay5mbGFnRm9yRGV2ZWxvcGVtZW50KClcbiAgICAgICAgY2hlY2suY29tcHV0ZUNoZWNrKClcbiAgICAgICAgY2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyZXNldC1jcmVhdHVyZS1zYW4tZGF0YSc6IHtcbiAgICAgICAgY29uc3Qgc2FuQ2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2suY2xlYXJTYW5Mb3NzUmVhc29uKClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyb2xsLXNhbi1jaGVjayc6IHtcbiAgICAgICAgY29uc3Qgc2FuQ2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2sucm9sbFNhbigpXG4gICAgICAgIGF3YWl0IHNhbkNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnYWR2YW5jZS1zdGF0ZSc6IHtcbiAgICAgICAgY29uc3Qgc2FuQ2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2suYWR2YW5jZVN0YXRlKFxuICAgICAgICAgIGJ1dHRvbi5kYXRhc2V0LnN0YXRlIC8qLCBidXR0b24uZGF0YXNldC5wYXJhbSAqL1xuICAgICAgICApXG4gICAgICAgIGF3YWl0IHNhbkNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAncm9sbC1zYW4tbG9zcyc6IHtcbiAgICAgICAgY29uc3Qgc2FuQ2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2sucm9sbFNhbkxvc3MoKVxuICAgICAgICBzYW5DaGVjay51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ3JvbGwtaW50LWNoZWNrJzoge1xuICAgICAgICBjb25zdCBzYW5DaGVjayA9IFNhbkNoZWNrQ2FyZC5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICBhd2FpdCBzYW5DaGVjay5yb2xsSW50KClcbiAgICAgICAgc2FuQ2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICAvLyBjYXNlICdhcHBseS1zYW4tbG9zcyc6e1xuICAgICAgLy8gIGNvbnN0IHNhbkNoZWNrID0gQ29DN1NhbkNoZWNrLmdldEZyb21DYXJkKCBjYXJkKTtcbiAgICAgIC8vICBhd2FpdCBzYW5DaGVjay5hcHBseVNhbkxvc3MoKTtcbiAgICAgIC8vICBzYW5DaGVjay51cGRhdGVDaGF0Q2FyZCgpO1xuICAgICAgLy8gIGJyZWFrO1xuICAgICAgLy8gfVxuXG4gICAgICAvLyBjYXNlICdyZXZlYWwtc2FuLWNoZWNrJzp7XG4gICAgICAvLyAgY29uc3Qgc2FuQ2hlY2sgPSBDb0M3U2FuQ2hlY2suZ2V0RnJvbUNhcmQoIGNhcmQpO1xuICAgICAgLy8gIHNhbkNoZWNrLmlzQmxpbmQgPSBmYWxzZTtcbiAgICAgIC8vICBzYW5DaGVjay51cGRhdGVDaGF0Q2FyZCgpO1xuICAgICAgLy8gIGJyZWFrO1xuICAgICAgLy8gfVxuXG4gICAgICBjYXNlICdyb2xsLWNvbi1jaGVjayc6IHtcbiAgICAgICAgY29uc3QgY29uQ2hlY2sgPSBDb0M3Q29uQ2hlY2suZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgY29uQ2hlY2sucm9sbENvbigpXG4gICAgICAgIGNvbkNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAncmV2ZWFsLWNvbi1jaGVjayc6IHtcbiAgICAgICAgY29uc3QgY29uQ2hlY2sgPSBDb0M3Q29uQ2hlY2suZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgY29uQ2hlY2suaXNCbGluZCA9IGZhbHNlXG4gICAgICAgIGNvbkNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHRvZ2dsaW5nIHRoZSB2aXNpYmlsaXR5IG9mIGNoYXQgY2FyZCBjb250ZW50IHdoZW4gdGhlIG5hbWUgaXMgY2xpY2tlZFxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAgIFRoZSBvcmlnaW5hdGluZyBjbGljayBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIF9vbkNoYXRDYXJkVG9nZ2xlQ29udGVudCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgaGVhZGVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGNhcmQgPSBoZWFkZXIuY2xvc2VzdCgnLmNoYXQtY2FyZCcpXG4gICAgY29uc3QgY29udGVudCA9IGNhcmQucXVlcnlTZWxlY3RvcignLmNhcmQtY29udGVudCcpXG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIGlmICghY29udGVudC5zdHlsZS5kaXNwbGF5KSB7XG4gICAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9XG4gICAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ2hhdE1lc3NhZ2UsIGdhbWUsIHJlbmRlclRlbXBsYXRlLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBjaGF0SGVscGVyLCBDb0M3Um9sbCB9IGZyb20gJy4uL2hlbHBlci5qcydcbmltcG9ydCB7IENvQzdDaGF0IH0gZnJvbSAnLi4vLi4vY2hhdC5qcydcbmltcG9ydCB7IENvQzdNZWxlZVJlc29sdGlvbiB9IGZyb20gJy4vbWVsZWUtcmVzb2x1dGlvbi5qcydcbmltcG9ydCB7IENoYXRDYXJkQWN0b3IgfSBmcm9tICcuLi9jYXJkLWFjdG9yLmpzJ1xuXG4vLyBUT0RPIDogcsOpY3Vww6lyZXIgbGUgamV0IGVuIHRhbnQgcXUnb2JqZXQgISEhXG5leHBvcnQgY2xhc3MgQ29DN01lbGVlSW5pdGlhdG9yIGV4dGVuZHMgQ2hhdENhcmRBY3RvciB7XG4gIGNvbnN0cnVjdG9yIChhY3RvcktleSA9IG51bGwsIGl0ZW1JZCA9IG51bGwsIGZhc3RGb3J3YXJkID0gZmFsc2UpIHtcbiAgICBzdXBlcihhY3RvcktleSwgZmFzdEZvcndhcmQpXG4gICAgdGhpcy5pdGVtSWQgPSBpdGVtSWRcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2VcbiAgICB0aGlzLm91dG51bWJlcmVkID0gZmFsc2VcbiAgICB0aGlzLnN1cnByaXNlZCA9IGZhbHNlXG4gICAgdGhpcy5hdXRvU3VjY2VzcyA9IGZhbHNlXG4gICAgdGhpcy5hZHZhbnRhZ2UgPSBmYWxzZVxuICAgIHRoaXMuZGlzYWR2YW50YWdlID0gZmFsc2VcbiAgICB0aGlzLm1lc3NhZ2VJZCA9IG51bGxcbiAgICB0aGlzLnRhcmdldENhcmQgPSBudWxsXG4gICAgdGhpcy5yb2xsZWQgPSBmYWxzZVxuICB9XG5cbiAgZ2V0IHRlbXBsYXRlICgpIHtcbiAgICByZXR1cm4gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9jb21iYXQvbWVsZWUtaW5pdGlhdG9yLmh0bWwnXG4gIH1cblxuICBhc3luYyByZXZlYWxDaGVjayAoKSB7XG4gICAgLy8gVE9ETyA6IG9uIHV0aWxpc2UgbCd1cGRhdGUgZHUgbWVzc2FnZSBhdSBsaWV1IGRlIHJlY29uc3RydWlyZSBsJ29iamV0LiBDaGFuZ2VyIGNlIGNvbXBvcnRlbWVudC5cbiAgICBjb25zdCBjaGF0TWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuXG4gICAgYXdhaXQgY2hhdE1lc3NhZ2Uuc2V0RmxhZygnQ29DNycsICdjaGVja1JldmVhbGVkJywgdHJ1ZSlcbiAgICBhd2FpdCB1aS5jaGF0LnVwZGF0ZU1lc3NhZ2UoY2hhdE1lc3NhZ2UsIGZhbHNlKVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlQ2hhdENhcmQgKCkge1xuICAgIGNoYXRIZWxwZXIuZ2V0QWN0b3JJbWdGcm9tS2V5KHRoaXMuYWN0b3JLZXkpXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICBjb25zdCBzcGVha2VyRGF0YSA9IHt9XG4gICAgaWYgKHRoaXMudG9rZW4pIHNwZWFrZXJEYXRhLnRva2VuID0gdGhpc1xuICAgIGVsc2Ugc3BlYWtlckRhdGEuYWN0b3IgPSB0aGlzXG4gICAgY29uc3Qgc3BlYWtlciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoc3BlYWtlckRhdGEpXG5cbiAgICBjb25zdCB1c2VyID0gdGhpcy5hY3Rvci51c2VyID8gdGhpcy5hY3Rvci51c2VyIDogZ2FtZS51c2VyXG5cbiAgICBjb25zdCBjaGF0RGF0YSA9IHtcbiAgICAgIHVzZXI6IHVzZXIuaWQsXG4gICAgICBzcGVha2VyLFxuICAgICAgY29udGVudDogaHRtbFxuICAgIH1cblxuICAgIGlmIChbJ2dtcm9sbCcsICdibGluZHJvbGwnXS5pbmNsdWRlcyh0aGlzLnJvbGxNb2RlKSkge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgfVxuICAgIC8vIGlmICggdGhpcy5pc0JsaW5kICkgY2hhdERhdGFbJ2JsaW5kJ10gPSB0cnVlO1xuICAgIGNoYXREYXRhLmJsaW5kID0gZmFsc2VcblxuICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKVxuXG4gICAgcmV0dXJuIGNoYXRNZXNzYWdlXG4gIH1cblxuICBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG5cbiAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLnVwZGF0ZSh7IGNvbnRlbnQ6IGh0bWwgfSlcbiAgICBhd2FpdCB1aS5jaGF0LnVwZGF0ZU1lc3NhZ2UobXNnLCBmYWxzZSlcbiAgICByZXR1cm4gbXNnXG4gIH1cblxuICB0b2dnbGVGbGFnIChmbGFnTmFtZSkge1xuICAgIGNvbnN0IGZsYWcgPSBmbGFnTmFtZS5pbmNsdWRlcygnLScpXG4gICAgICA/IGNoYXRIZWxwZXIuaHlwaGVuVG9DYW1lbENhc2UoZmxhZ05hbWUpXG4gICAgICA6IGZsYWdOYW1lXG4gICAgdGhpc1tmbGFnXSA9ICF0aGlzW2ZsYWddXG4gIH1cblxuICBhc3luYyBwZXJmb3JtU2tpbGxDaGVjayAoc2tpbGxJZCA9IG51bGwsIHB1Ymxpc2ggPSBmYWxzZSkge1xuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgLy8gQ29tYmF0IHJvbGwgY2Fubm90IGJlIGJsaW5kIG9yIHVua25vd25cbiAgICBjaGVjay5pc0JsaW5kID0gZmFsc2VcbiAgICBjaGVjay5pc1Vua29ud24gPSBmYWxzZVxuICAgIGNoZWNrLnJlZmVyZW5jZU1lc3NhZ2VJZCA9IHRoaXMubWVzc2FnZUlkXG4gICAgY2hlY2sucm9sbFR5cGUgPSAnb3Bwb3NlZCdcbiAgICBjaGVjay5zaWRlID0gJ2luaXRpYXRvcidcbiAgICBjaGVjay5hY3Rpb24gPSAnYXR0YWNrJ1xuICAgIGNoZWNrLmFjdG9yID0gdGhpcy5hY3RvcktleVxuICAgIGNoZWNrLml0ZW0gPSB0aGlzLml0ZW1JZFxuICAgIGNoZWNrLnNraWxsID0gc2tpbGxJZFxuICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICBjaGVjay5kaWNlTW9kaWZpZXIgPSAwXG5cbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHRoaXMuY2hlY2tSZXZlYWxlZCA9IGZhbHNlXG4gICAgZWxzZSB0aGlzLmNoZWNrUmV2ZWFsZWQgPSB0cnVlXG5cbiAgICBpZiAodGhpcy5vdXRudW1iZXJlZCkgY2hlY2suZGljZU1vZGlmaWVyICs9IDFcbiAgICBpZiAodGhpcy5zdXJwcmlzZWQpIGNoZWNrLmRpY2VNb2RpZmllciArPSAxXG4gICAgaWYgKHRoaXMuZGlzYWR2YW50YWdlKSBjaGVjay5kaWNlTW9kaWZpZXIgLT0gMVxuICAgIGlmICh0aGlzLmFkdmFudGFnZSkgY2hlY2suZGljZU1vZGlmaWVyICs9IDFcblxuICAgIGF3YWl0IGNoZWNrLnJvbGwoKVxuICAgIHRoaXMuY2hlY2sgPSBjaGVja1xuICAgIHRoaXMucm9sbGVkID0gdHJ1ZVxuICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlXG4gICAgaWYgKHB1Ymxpc2gpIGNoZWNrLnRvTWVzc2FnZSgpXG5cbiAgICB0aGlzLmNyaXRpY2FsRGFtYWdlID1cbiAgICAgIGNoZWNrLnN1Y2Nlc3NMZXZlbCA9PT0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lIHx8XG4gICAgICBjaGVjay5zdWNjZXNzTGV2ZWwgPT09IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuY3JpdGljYWxcbiAgICBpZiAodGhpcy5oYXNUYXJnZXQgJiYgIXRoaXMuYXV0b1N1Y2Nlc3MpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBnYW1lLkNvQzdzb2NrZXQuZXhlY3V0ZUFzR00oJ2dtY3JlYXRlbWVzc2FnZWFzJywge1xuICAgICAgICB0YXJnZXRLZXk6IHRoaXMudGFyZ2V0S2V5LFxuICAgICAgICBtZXNzYWdlSWQ6IHRoaXMubWVzc2FnZUlkLFxuICAgICAgICBmYXN0Rm9yd2FyZDogdGhpcy5mYXN0Rm9yd2FyZCxcbiAgICAgICAgYWN0b3JLZXk6IHRoaXMuYWN0b3JLZXlcbiAgICAgIH0pXG4gICAgICB0aGlzLnRhcmdldENhcmQgPSBtZXNzYWdlLmlkIHx8IG1lc3NhZ2UuX2lkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXV0b1N1Y2Nlc3MgJiYgIXRoaXMuY2hlY2suaXNGdW1ibGUpIHtcbiAgICAgIHRoaXMuY2hlY2suZm9yY2VQYXNzKClcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrXG4gIH1cblxuICBhc3luYyBwdWJsaXNoQ2hlY2tSZXN1bHQgKGNoZWNrID0gbnVsbCkge1xuICAgIGlmICghY2hlY2sgJiYgIXRoaXMuY2hlY2spIHJldHVybiBudWxsXG5cbiAgICBpZiAoY2hlY2spIHRoaXMuY2hlY2sgPSBjaGVja1xuICAgIHRoaXMucm9sbCA9IENvQzdSb2xsLmdldEZyb21DaGVjayh0aGlzLmNoZWNrKVxuICAgIHRoaXMucm9sbGVkID0gdHJ1ZVxuXG4gICAgdGhpcy5yb2xsLnJvbGxJY29ucyA9IFtdXG4gICAgaWYgKHRoaXMucm9sbC5jcml0aWNhbCkge1xuICAgICAgdGhpcy5yb2xsLnJvbGxDb2xvciA9ICdnb2xkZW5yb2QnXG4gICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsU3VjY2VzcycpXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnJvbGwucm9sbEljb25zLnB1c2goJ21lZGFsJylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucm9sbC5mdW1ibGUpIHtcbiAgICAgIHRoaXMucm9sbC5yb2xsQ29sb3IgPSAnZGFya3JlZCdcbiAgICAgIHRoaXMucm9sbC5yb2xsVGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRnVtYmxlJylcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsSWNvbnMucHVzaCgnc3BpZGVyJylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucm9sbC5zdWNjZXNzKSB7XG4gICAgICB0aGlzLnJvbGwucm9sbENvbG9yID0gJ2dvbGRlbnJvZCdcbiAgICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXIgPT09IHRoaXMucm9sbC5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgICAgdGhpcy5yb2xsLnJvbGxUaXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyU3VjY2VzcycpXG4gICAgICB9XG4gICAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkID09PSB0aGlzLnJvbGwuc3VjY2Vzc0xldmVsKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsVGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGFyZFN1Y2Nlc3MnKVxuICAgICAgfVxuICAgICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSA9PT0gdGhpcy5yb2xsLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVTdWNjZXNzJylcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnJvbGwuc3VjY2Vzc0xldmVsOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsSWNvbnMucHVzaCgnc3RhcicpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9sbC5yb2xsQ29sb3IgPSAnYmxhY2snXG4gICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkZhaWx1cmUnKVxuICAgICAgdGhpcy5yb2xsLnJvbGxJY29ucy5wdXNoKCdza3VsbCcpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRhcmdldENhcmQgJiYgIXRoaXMuYXV0b1N1Y2Nlc3MgJiYgdGhpcy5oYXNUYXJnZXQpIHtcbiAgICAgIGNvbnN0IHJlc29sdXRpb25DYXJkID0gbmV3IENvQzdNZWxlZVJlc29sdGlvbihcbiAgICAgICAgdGhpcy5wYXJlbnRNZXNzYWdlSWQsXG4gICAgICAgIHRoaXMubWVzc2FnZUlkXG4gICAgICApXG4gICAgICBjb25zdCByZXNvbHV0aW9uTWVzc2FnZSA9IGF3YWl0IHJlc29sdXRpb25DYXJkLnByZUNyZWF0ZU1lc3NhZ2UoKVxuICAgICAgdGhpcy5yZXNvbHV0aW9uQ2FyZCA9IHJlc29sdXRpb25NZXNzYWdlLmlkXG4gICAgfVxuICAgIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgc3RhdGljIGdldEZyb21DYXJkIChjYXJkLCBtZXNzYWdlSWQgPSBudWxsKSB7XG4gICAgY29uc3QgaW5pdGlhdG9yID0gbmV3IENvQzdNZWxlZUluaXRpYXRvcigpXG4gICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudChpbml0aWF0b3IsIGNhcmQpXG4gICAgaW5pdGlhdG9yLnJvbGwgPSBDb0M3Um9sbC5nZXRGcm9tQ2FyZChjYXJkKVxuXG4gICAgaWYgKGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKSkge1xuICAgICAgaW5pdGlhdG9yLm1lc3NhZ2VJZCA9IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKS5kYXRhc2V0Lm1lc3NhZ2VJZFxuICAgIH0gZWxzZSBpbml0aWF0b3IubWVzc2FnZUlkID0gbWVzc2FnZUlkXG4gICAgcmV0dXJuIGluaXRpYXRvclxuICB9XG5cbiAgc3RhdGljIGdldEZyb21NZXNzYWdlSWQgKG1lc3NhZ2VJZCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgaWYgKCFtZXNzYWdlKSByZXR1cm4gbnVsbFxuICAgIGNvbnN0IGNhcmQgPSAkKG1lc3NhZ2UuY29udGVudClbMF1cblxuICAgIGNvbnN0IGluaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tQ2FyZChjYXJkLCBtZXNzYWdlSWQpXG4gICAgaW5pdGlhdG9yLm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZFxuXG4gICAgcmV0dXJuIGluaXRpYXRvclxuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUNhcmRTd2l0Y2ggKGV2ZW50LCBwdWJsaXNoVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IGNhcmQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5tZWxlZS5pbml0aWF0b3InKVxuICAgIGNvbnN0IGZsYWcgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZ1xuICAgIGNvbnN0IGNhbWVsRmxhZyA9IGNoYXRIZWxwZXIuaHlwaGVuVG9DYW1lbENhc2UoZmxhZylcblxuICAgIC8vIHVwZGF0ZSBvbmx5IGZvciBsb2NhbCBwbGF5ZXJcbiAgICBpZiAoIXB1Ymxpc2hVcGRhdGUpIHtcbiAgICAgIGNhcmQuZGF0YXNldFtjYW1lbEZsYWddID0gY2FyZC5kYXRhc2V0W2NhbWVsRmxhZ10gIT09ICd0cnVlJ1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdzd2l0Y2hlZC1vbicpXG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2VsZWN0ZWQgPSBjYXJkLmRhdGFzZXRbY2FtZWxGbGFnXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGUgY2FyZCBmb3IgYWxsIHBsYXllclxuICAgICAgY29uc3QgaW5pdGlhdG9yID0gQ29DN01lbGVlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICBpbml0aWF0b3IudG9nZ2xlRmxhZyhmbGFnKVxuICAgICAgaW5pdGlhdG9yLnVwZGF0ZUNoYXRDYXJkKClcbiAgICB9XG4gIH1cblxuICB1cGdyYWRlUm9sbCAobHVja0Ftb3VudCwgbmV3U3VjY2Vzc0xldmVsLCBvbGRDYXJkKSB7XG4gICAgLy8gVE9ETyA6IENoZWNrIGlmIHRoaXMgbmVlZHMgdG8gYmUgYXN5bmNcbiAgICBpZiAoIXRoaXMuYWN0b3Iuc3BlbmRMdWNrKGx1Y2tBbW91bnQpKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lkx1Y2tOb3RFbm91Z2gnLCB7XG4gICAgICAgICAgbmFtZTogdGhpcy5hY3Rvci5uYW1lXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfVxuICAgIHRoaXMucm9sbC52YWx1ZSA9IG51bGxcbiAgICB0aGlzLnJvbGwuc3VjY2Vzc0xldmVsID0gbmV3U3VjY2Vzc0xldmVsXG4gICAgdGhpcy5yb2xsLmx1Y2tTcGVudCA9IHRydWVcbiAgICBvbGRDYXJkLmRhdGFzZXQucHJvY2Vzc2VkID0gZmFsc2VcblxuICAgIGNvbnN0IGRpY2VSb2xscyA9IG9sZENhcmQucXVlcnlTZWxlY3RvcignLmRpY2Utcm9sbCcpXG4gICAgZGljZVJvbGxzLmRhdGFzZXQudmFsdWUgPSBudWxsXG4gICAgZGljZVJvbGxzLmRhdGFzZXQuc3VjY2Vzc0xldmVsID0gbmV3U3VjY2Vzc0xldmVsXG4gICAgZGljZVJvbGxzLmRhdGFzZXQubHVja1NwZW50ID0gdHJ1ZVxuXG4gICAgY29uc3QgcmVzdWxEZXRhaWxzID0gb2xkQ2FyZC5xdWVyeVNlbGVjdG9yKCcucmVzdWx0LWRldGFpbHMnKVxuICAgIGNvbnN0IGRpY2VUb3RhbCA9IG9sZENhcmQucXVlcnlTZWxlY3RvcignLmRpY2UtdG90YWwnKVxuICAgIGNvbnN0IHJvbGxEYW1hZ2VCdXR0b24gPSBvbGRDYXJkLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnYnV0dG9uW2RhdGEtYWN0aW9uPVwicm9sbC1tZWxlZS1kYW1hZ2VcIl0nXG4gICAgKVxuICAgIGlmIChyb2xsRGFtYWdlQnV0dG9uKSByb2xsRGFtYWdlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZScpXG5cbiAgICBzd2l0Y2ggKG5ld1N1Y2Nlc3NMZXZlbCkge1xuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXI6XG4gICAgICAgIGRpY2VUb3RhbC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUmVndWxhclN1Y2Nlc3MnKVxuICAgICAgICByZXN1bERldGFpbHMuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAnQ29DNy5Sb2xsUmVzdWx0Lkx1Y2tTcGVuZFRleHQnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICBzdWNjZXNzTGV2ZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyRGlmZmljdWx0eScpXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkOlxuICAgICAgICBkaWNlVG90YWwuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhcmRTdWNjZXNzJylcbiAgICAgICAgcmVzdWxEZXRhaWxzLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgJ0NvQzcuUm9sbFJlc3VsdC5MdWNrU3BlbmRUZXh0JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsdWNrQW1vdW50LFxuICAgICAgICAgICAgc3VjY2Vzc0xldmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGFyZERpZmZpY3VsdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZTpcbiAgICAgICAgaWYgKHJvbGxEYW1hZ2VCdXR0b24pIHJvbGxEYW1hZ2VCdXR0b24uZGF0YXNldC5jcml0aWNhbCA9IHRydWVcbiAgICAgICAgZGljZVRvdGFsLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FeHRyZW1lU3VjY2VzcycpXG4gICAgICAgIHJlc3VsRGV0YWlscy5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmNyaXRpY2FsOlxuICAgICAgICBpZiAocm9sbERhbWFnZUJ1dHRvbikgcm9sbERhbWFnZUJ1dHRvbi5kYXRhc2V0LmNyaXRpY2FsID0gdHJ1ZVxuICAgICAgICBkaWNlVG90YWwuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsU3VjY2VzcycpXG4gICAgICAgIHJlc3VsRGV0YWlscy5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsRGlmZmljdWx0eScpXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgZGljZVRvdGFsLmNsYXNzTGlzdC5yZXBsYWNlKCdmYWlsdXJlJywgJ3N1Y2Nlc3MnKVxuICAgIG9sZENhcmQucXVlcnlTZWxlY3RvcignLmNhcmQtYnV0dG9ucycpLnJlbW92ZSgpXG4gICAgb2xkQ2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b29sdGlwJykuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIENvQzdDaGF0LnVwZGF0ZUNoYXRDYXJkKG9sZENhcmQpIC8vIFRPRE8gOiBDaGVjayBpZiB0aGlzIG5lZWRzIHRvIGJlIGFzeW5jXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBBY3RvciwgQXBwbGljYXRpb24sIENPTkZJRywgQ09OU1QsIERpYWxvZywgRGllLCBmb3VuZHJ5LCBmcm9tVXVpZCwgZnJvbVV1aWRTeW5jLCBnYW1lLCBIb29rcywgUm9sbCwgVGV4dEVkaXRvciwgVG9rZW4sIHVpICovXG5pbXBvcnQgeyBBdmVyYWdlUm9sbCB9IGZyb20gJy4uL2FwcHMvYXZlcmFnZS1yb2xsLmpzJ1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uL2NvbmZpZy5qcydcbmltcG9ydCBDb0M3QWN0aXZlRWZmZWN0IGZyb20gJy4uL2FjdGl2ZS1lZmZlY3QuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdE1lc3NhZ2UgfSBmcm9tICcuLi9hcHBzL2NvYzctY2hhdC1tZXNzYWdlLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29uQ2hlY2sgfSBmcm9tICcuLi9jaGF0L2NvbmNoZWNrLmpzJ1xuaW1wb3J0IHsgUm9sbERpYWxvZyB9IGZyb20gJy4uL2FwcHMvcm9sbC1kaWFsb2cuanMnXG5pbXBvcnQgeyBTa2lsbFNlbGVjdERpYWxvZyB9IGZyb20gJy4uL2FwcHMvc2tpbGwtc2VsZWN0aW9uLWRpYWxvZy5qcydcbmltcG9ydCB7IFBvaW50U2VsZWN0RGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9wb2ludC1zZWxlY3Rpb24tZGlhbG9nLmpzJ1xuaW1wb3J0IHsgQ2hhcmFjU2VsZWN0RGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9jaGFyLXNlbGVjdGlvbi1kaWFsb2cuanMnXG5pbXBvcnQgeyBDaGFyYWNSb2xsRGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9jaGFyLXJvbGwtZGlhbG9nLmpzJ1xuaW1wb3J0IHsgU2tpbGxTcGVjU2VsZWN0RGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9za2lsbC1zcGVjLXNlbGVjdC1kaWFsb2cuanMnXG5pbXBvcnQgeyBTa2lsbFNwZWNpYWxpemF0aW9uU2VsZWN0RGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9za2lsbC1zcGVjaWFsaXphdGlvbi1zZWxlY3QtZGlhbG9nLmpzJ1xuaW1wb3J0IHsgU2tpbGxWYWx1ZURpYWxvZyB9IGZyb20gJy4uL2FwcHMvc2tpbGwtdmFsdWUtZGlhbG9nLmpzJ1xuaW1wb3J0IHsgQ29DN01lbGVlSW5pdGlhdG9yIH0gZnJvbSAnLi4vY2hhdC9jb21iYXQvbWVsZWUtaW5pdGlhdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN1JhbmdlSW5pdGlhdG9yIH0gZnJvbSAnLi4vY2hhdC9yYW5nZWNvbWJhdC5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIgfSBmcm9tICcuLi9jaGF0L2hlbHBlci5qcydcbmltcG9ydCB7IENvQzdEaWNlIH0gZnJvbSAnLi4vZGljZS5qcydcbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi4vaXRlbXMvaXRlbS5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbi8qKlxuICogRXh0ZW5kIHRoZSBiYXNlIEFjdG9yIGNsYXNzIHRvIGltcGxlbWVudCBhZGRpdGlvbmFsIGxvZ2ljIHNwZWNpYWxpemVkIGZvciBDb0MgN3RoLlxuICovXG5leHBvcnQgY2xhc3MgQ29DQWN0b3IgZXh0ZW5kcyBBY3RvciB7XG4gIC8qKiBDcmVhdGUgZGVyaXZlZCBkb2N1bWVudCBjbGFzc2VzIGZvciBzcGVjaWZpYyBJdGVtIHR5cGVzICovXG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgLyoqIEBzZWUgQ09ORklHLkFjdG9yLmRvY3VtZW50Q2xhc3NlcyBpbiBtb2R1bGUvc2NyaXB0cy9jb25maWd1cmUtZG9jdW1lbnRzICovXG4gICAgaWYgKGRhdGEudHlwZSBpbiBDT05GSUcuQWN0b3IuZG9jdW1lbnRDbGFzc2VzICYmICFjb250ZXh0Py5leHRlbmRlZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIG5ldyBjbGFzcyB3aWxsIGNhbGwgaXQncyBzdXBlcigpLFxuICAgICAgICogdGhlIGV4dGVuZGVkIGZsYWcgd2lsbCBiZSB0cnVlLCB0aHVzIGJ5cGFzc2luZyB0aGlzIHdob2xlIHByb2Nlc3NcbiAgICAgICAqIGFuZCByZXN1bWUgZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICovXG4gICAgICByZXR1cm4gbmV3IENPTkZJRy5BY3Rvci5kb2N1bWVudENsYXNzZXNbZGF0YS50eXBlXShkYXRhLCB7XG4gICAgICAgIC4uLnsgZXh0ZW5kZWQ6IHRydWUgfSxcbiAgICAgICAgLi4uY29udGV4dFxuICAgICAgfSlcbiAgICB9XG4gICAgLy8gaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyAgIGlmIChkYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAvLyAgICAgZGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9za2lsbHMuc3ZnJ1xuICAgIC8vICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdzdGF0dXMnKSB7XG4gICAgLy8gICAgIGRhdGEuaW1nID0gJ2ljb25zL3N2Zy9hdXJhLnN2ZydcbiAgICAvLyAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnd2VhcG9uJykge1xuICAgIC8vICAgICBkYXRhLmltZyA9ICdpY29ucy9zdmcvc3dvcmQuc3ZnJ1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKiogRGVmYXVsdCBiZWhhdmlvciwganVzdCBjYWxsIHN1cGVyKCkgYW5kIGRvIGFsbCB0aGUgZGVmYXVsdCBJdGVtIGluaXRzICovXG4gICAgc3VwZXIoZGF0YSwgY29udGV4dClcbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUgKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKVxuICAgIGF3YWl0IHRoaXMuY3JlYXR1cmVJbml0KCkgLy8gVE9ETyA6IG1vdmUgdGhpcyBpbiBDb0NBY3Rvci5jcmVhdGUoZGF0YSwgb3B0aW9ucylcbiAgfVxuXG4gIC8vICoqKioqKioqKioqKioqKioqKioqKiogVGVzdGluZ1xuICAvLyBhc3luYyB1cGRhdGUoZGF0YSwgb3B0aW9ucz17fSkge1xuICAvLyAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygncmV0dXJuIHN1cGVyLnVwZGF0ZShkYXRhLCBvcHRpb25zKTsnKTtcbiAgLy8gICB1aS5ub3RpZmljYXRpb25zLmluZm8oYGludCA6ICR7dGhpcy5jaGFyYWN0ZXJpc3RpY3MuaW50fWApO1xuICAvLyAgIHRoaXMuY2hhcmFjdGVyaXN0aWNzLmludCA9IDE1O1xuICAvLyAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhgbW9kaWZpZWQgaW50IDogJHt0aGlzLmNoYXJhY3RlcmlzdGljcy5pbnR9YCk7XG4gIC8vICAgcmV0dXJuIHN1cGVyLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgLy8gfVxuXG4gIC8vIGdldCBjaGFyYWN0ZXJpc3RpY3MoKXtcbiAgLy8gICBjb25zdCBhY3RvciA9IHRoaXM7XG4gIC8vICAgICByZXR1cm4ge1xuICAvLyAgICAgICBnZXQgaW50KCl7XG4gIC8vICAgICAgICAgcmV0dXJuIGFjdG9yLmdldFByb3AoJ19pbnQnKTtcbiAgLy8gICAgICAgfSxcblxuICAvLyAgICAgICBzZXQgaW50KHgpe1xuICAvLyAgICAgICAgIGFjdG9yLnNldFByb3AoJ19pbnQnLCB4KTtcbiAgLy8gICAgICAgfVxuICAvLyAgICB9O1xuICAvLyB9XG5cbiAgLy8gc2V0UHJvcChrZXksIHgpe1xuICAvLyAgIHRoaXNba2V5XSA9IHg7XG4gIC8vIH1cblxuICAvLyBnZXRQcm9wKGtleSl7XG4gIC8vICAgcmV0dXJuIHRoaXNba2V5XXx8MDtcbiAgLy8gfVxuICAvL1xuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogUHJlcGFyZSBkYXRhIHJlbGF0ZWQgdG8gdGhpcyBEb2N1bWVudCBpdHNlbGYsIGJlZm9yZSBhbnkgZW1iZWRkZWQgRG9jdW1lbnRzIG9yIGRlcml2ZWQgZGF0YSBpcyBjb21wdXRlZC5cbiAgICogQG1lbWJlcm9mIENsaWVudERvY3VtZW50TWl4aW4jXG4gICAqL1xuICBwcmVwYXJlQmFzZURhdGEgKCkge1xuICAgIGlmIChbJ2NoYXJhY3RlcicsICducGMnLCAnY3JlYXR1cmUnXS5pbmNsdWRlcyh0aGlzLnR5cGUpKSB7XG4gICAgICB0aGlzLnN5c3RlbS5za2lsbHMgPSB7fVxuICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgaWYgKGkudHlwZSAhPT0gJ3NraWxsJykgY29udGludWVcbiAgICAgICAgdGhpcy5zeXN0ZW0uc2tpbGxzW2Ake2kuaXRlbUlkZW50aWZpZXJ9YF0gPSB7IGZvdW5kcnlJRDogaS5pZCwgY29jaWQ6IGkuZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uaWQsIHZhbHVlOiBpLnJhd1ZhbHVlLCBib251c0RpY2U6IGkuc3lzdGVtLmJvbnVzRGljZSB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAqIFJlbW92YWwgb2YgMS81IHNhbml0eVxuICAgICAqIHRoaXMgaXMgdG8gcmVtb3ZlIHRoZVxuICAgICAqIGFjdG9yLmRhdGEuYXR0cmlicy5zYW4ub25lRmlmdGhTYW5pdHkgdG8gYmUgcmVtb3ZlZCBmcm9tIHRlbXBsYXRlXG4gICAgICogYW5kIGluZGVmaW5pdGVJbnNhbml0eUxldmVsIHRvIGJlIHJlbW92ZWQgZnJvbSB0ZW1wbGF0ZVxuICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxpbWl0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4ub25lRmlmdGhTYW5pdHkpIHtcbiAgICAgICAgICBjb25zdCBzID0gdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4ub25lRmlmdGhTYW5pdHkuc3BsaXQoJy8nKVxuICAgICAgICAgIGlmIChzWzFdICYmICFpc05hTihOdW1iZXIoc1sxXSkpKSB7XG4gICAgICAgICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxpbWl0ID0gTnVtYmVyKHNbMV0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TGltaXQgPSAwXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TGltaXQgPSAwXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gcmV0dXJuIGNvbXB1dGVkIHZhbHVlcyBvciBmaXhlZCB2YWx1ZXMgaWYgbm90IGF1dG8uXG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLm1vdi52YWx1ZSA9IHRoaXMucmF3TW92XG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlID0gdGhpcy5yYXdEYlxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZSA9IHRoaXMucmF3QnVpbGRcblxuICAgICAgLy8gRm9yIHZlaGljbGUgb25seSA6XG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLmN1cnJlbnQgPSB0aGlzLmhwXG5cbiAgICAgIC8vIGlmIChcbiAgICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMubXAudmFsdWUgPiBkYXRhLmRhdGEuYXR0cmlicy5tcC5tYXggfHxcbiAgICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMubXAubWF4ID09IG51bGxcbiAgICAgIC8vICkge1xuICAgICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5tcC52YWx1ZSA9IGRhdGEuZGF0YS5hdHRyaWJzLm1wLm1heFxuICAgICAgLy8gfVxuICAgICAgLy8gaWYgKFxuICAgICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5ocC52YWx1ZSA+IGRhdGEuZGF0YS5hdHRyaWJzLmhwLm1heCB8fFxuICAgICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5ocC5tYXggPT0gbnVsbFxuICAgICAgLy8gKSB7XG4gICAgICAvLyAgIGRhdGEuZGF0YS5hdHRyaWJzLmhwLnZhbHVlID0gZGF0YS5kYXRhLmF0dHJpYnMuaHAubWF4XG4gICAgICAvLyB9XG5cbiAgICAvLyBpZiAoXG4gICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5ocC52YWx1ZSA9PSBudWxsICYmXG4gICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5ocC5tYXggIT0gbnVsbFxuICAgIC8vICkge1xuICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMuaHAudmFsdWUgPSBkYXRhLmRhdGEuYXR0cmlicy5ocC5tYXhcbiAgICAvLyB9XG4gICAgLy8gaWYgKFxuICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMubXAudmFsdWUgPT0gbnVsbCAmJlxuICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMubXAubWF4ICE9IG51bGxcbiAgICAvLyApIHtcbiAgICAvLyAgIGRhdGEuZGF0YS5hdHRyaWJzLm1wLnZhbHVlID0gZGF0YS5kYXRhLmF0dHJpYnMubXAubWF4XG4gICAgLy8gfVxuICAgIH1cbiAgICBzdXBlci5wcmVwYXJlQmFzZURhdGEoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBQcmVwYXJlIGFsbCBlbWJlZGRlZCBEb2N1bWVudCBpbnN0YW5jZXMgd2hpY2ggZXhpc3Qgd2l0aGluIHRoaXMgcHJpbWFyeSBEb2N1bWVudC5cbiAgICogQG1lbWJlcm9mIENsaWVudERvY3VtZW50TWl4aW4jXG4gICAqIGFjdGl2ZSBlZmZlY3RzIGFyZSBhcHBsaWVkXG4gICAqL1xuICBwcmVwYXJlRW1iZWRkZWREb2N1bWVudHMgKCkge1xuICAgIHN1cGVyLnByZXBhcmVFbWJlZGRlZERvY3VtZW50cygpXG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEFwcGx5IHRyYW5zZm9ybWF0aW9ucyBvciBkZXJpdmF0aW9ucyB0byB0aGUgdmFsdWVzIG9mIHRoZSBzb3VyY2UgZGF0YSBvYmplY3QuXG4gICAqIENvbXB1dGUgZGF0YSBmaWVsZHMgd2hvc2UgdmFsdWVzIGFyZSBub3Qgc3RvcmVkIHRvIHRoZSBkYXRhYmFzZS5cbiAgICogQG1lbWJlcm9mIENsaWVudERvY3VtZW50TWl4aW4jXG4gICAqL1xuICBwcmVwYXJlRGVyaXZlZERhdGEgKCkge1xuICAgIGlmIChbJ2NoYXJhY3RlcicsICducGMnLCAnY3JlYXR1cmUnXS5pbmNsdWRlcyh0aGlzLnR5cGUpKSB7XG4gICAgICBzdXBlci5wcmVwYXJlRGVyaXZlZERhdGEoKVxuICAgICAgLy8gU2V0IGhwTWF4LCBtcE1heCwgc2FuTWF4LCBtb3YsIGRiLCBidWlsZC4gVGhpcyBpcyB0byBhbGxvdyBjYWxjdWxhdGlvbiBvZiBkZXJpdmVkIHZhbHVlIHdpdGggbW9kaWZlZCBjaGFyYWN0ZXJpc3RpY3MuXG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLm1vdi52YWx1ZSA9IHRoaXMucmF3TW92XG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlID0gdGhpcy5yYXdEYlxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZSA9IHRoaXMucmF3QnVpbGRcblxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXggPSB0aGlzLnJhd0hwTWF4XG4gICAgICBpZiAodGhpcy5ocCA9PT0gbnVsbCkgdGhpcy5zeXN0ZW0uYXR0cmlicy5ocC52YWx1ZSA9IHRoaXMucmF3SHBNYXhcblxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5tcC5tYXggPSB0aGlzLnJhd01wTWF4XG4gICAgICBpZiAodGhpcy5tcCA9PT0gbnVsbCkgdGhpcy5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSA9IHRoaXMucmF3TXBNYXhcblxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4ubWF4ID0gdGhpcy5yYXdTYW5NYXhcbiAgICAgIGlmICh0aGlzLnNhbiA9PT0gbnVsbCkgdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUgPSB0aGlzLnJhd1Nhbk1heFxuXG4gICAgICAvLyBBcHBseSBlZmZlY3RzIHRvIGF1dG9tYXRpY2FseSBjYWxjdWxhdGVkIHZhbHVlcy5cbiAgICAgIGNvbnN0IGZpbHRlck1hdHJpeCA9IFtdXG5cbiAgICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLmF1dG8pIGZpbHRlck1hdHJpeC5wdXNoKCdzeXN0ZW0uYXR0cmlicy5ocC5tYXgnKVxuICAgICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMubXAuYXV0bykgZmlsdGVyTWF0cml4LnB1c2goJ3N5c3RlbS5hdHRyaWJzLm1wLm1heCcpXG4gICAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4uYXV0bykgZmlsdGVyTWF0cml4LnB1c2goJ3N5c3RlbS5hdHRyaWJzLnNhbi5tYXgnKVxuICAgICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMubW92LmF1dG8pIGZpbHRlck1hdHJpeC5wdXNoKCdzeXN0ZW0uYXR0cmlicy5tb3YudmFsdWUnKVxuICAgICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMuZGIuYXV0bykgZmlsdGVyTWF0cml4LnB1c2goJ3N5c3RlbS5hdHRyaWJzLmRiLnZhbHVlJylcbiAgICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLmF1dG8pIGZpbHRlck1hdHJpeC5wdXNoKCdzeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZScpXG5cbiAgICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLmVmZmVjdHMucmVkdWNlKChjaGFuZ2VzLCBlKSA9PiB7XG4gICAgICAgIGlmIChlLmRpc2FibGVkIHx8IGUuaXNTdXBwcmVzc2VkKSByZXR1cm4gY2hhbmdlc1xuICAgICAgICByZXR1cm4gY2hhbmdlcy5jb25jYXQoXG4gICAgICAgICAgZS5jaGFuZ2VzLm1hcChjID0+IHtcbiAgICAgICAgICAgIGMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShjKVxuICAgICAgICAgICAgYy5lZmZlY3QgPSBlXG4gICAgICAgICAgICBjLnByaW9yaXR5ID0gYy5wcmlvcml0eSA/PyBjLm1vZGUgKiAxMFxuICAgICAgICAgICAgcmV0dXJuIGNcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICB9LCBbXSlcbiAgICAgIGNoYW5nZXMuc29ydCgoYSwgYikgPT4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkpXG5cbiAgICAgIGNvbnN0IHNlbGVjdENoYW5nZXMgPSBjaGFuZ2VzLmZpbHRlcihlID0+IGZpbHRlck1hdHJpeC5pbmNsdWRlcyhlLmtleSkpXG5cbiAgICAgIC8vIEFwcGx5IGFsbCBjaGFuZ2VzXG4gICAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiBzZWxlY3RDaGFuZ2VzKSB7XG4gICAgICAgIGNoYW5nZS5lZmZlY3QuYXBwbHkodGhpcywgY2hhbmdlKVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5ocE1heCAmJiB0aGlzLmhwTWF4IDwgdGhpcy5ocCkgeyB0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLnZhbHVlID0gdGhpcy5ocE1heCB9XG4gICAgICBpZiAodGhpcy5tcE1heCAmJiB0aGlzLm1wTWF4IDwgdGhpcy5tcCkgeyB0aGlzLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlID0gdGhpcy5tcE1heCB9XG4gICAgICBpZiAodGhpcy5zYW5NYXggJiYgdGhpcy5zYW5NYXggPCB0aGlzLnNhbikgeyB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSA9IHRoaXMuc2FuTWF4IH1cbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChkYXRhLnR5cGUgPT09ICdjaGFyYWN0ZXInKSB7XG4gICAgICBkYXRhLnByb3RvdHlwZVRva2VuID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChkYXRhLnByb3RvdHlwZVRva2VuIHx8IHt9LCB7XG4gICAgICAgIGFjdG9yTGluazogdHJ1ZSxcbiAgICAgICAgZGlzcG9zaXRpb246IDEsXG4gICAgICAgIHNpZ2h0OiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnbnBjJykge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcgfHwgZGF0YS5pbWcgPT09ICdpY29ucy9zdmcvbXlzdGVyeS1tYW4uc3ZnJykge1xuICAgICAgICBkYXRhLmltZyA9ICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zL2N1bHRpc3Quc3ZnJ1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnY3JlYXR1cmUnKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGEuaW1nID09PSAndW5kZWZpbmVkJyB8fCBkYXRhLmltZyA9PT0gJ2ljb25zL3N2Zy9teXN0ZXJ5LW1hbi5zdmcnKSB7XG4gICAgICAgIGRhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvZmxvYXRpbmctdGVudGFjbGVzLnN2ZydcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YS5pbWcgPT09ICd1bmRlZmluZWQnIHx8IGRhdGEuaW1nID09PSAnaWNvbnMvc3ZnL215c3RlcnktbWFuLnN2ZycpIHtcbiAgICAgICAgZGF0YS5pbWcgPSAnaWNvbnMvc3ZnL2NoZXN0LnN2ZydcbiAgICAgIH1cbiAgICAgIGRhdGEucHJvdG90eXBlVG9rZW4gPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGRhdGEucHJvdG90eXBlVG9rZW4gfHwge30sIHtcbiAgICAgICAgYWN0b3JMaW5rOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlKGRhdGEsIG9wdGlvbnMpXG4gIH1cblxuICAvKipcbiAgICogRWFybHkgdmVyc2lvbiBvbiB0ZW1wbGF0ZXMgZGlkIG5vdCBpbmNsdWRlIHBvc3NpYmlsaXR5IG9mIGF1dG8gY2FsY1xuICAgKiBKdXN0IGNoZWNrIGlmIGF1dG8gaXMgdW5kZWZpbmVkLCBpbiB3aGljaCBjYXNlIGl0IHdpbGwgYmUgc2V0IHRvIHRydWVcbiAgICovXG4gIGNoZWNrVW5kZWZpbmVkQXV0byAoKSB7XG4gICAgY29uc3QgcmV0dXJuRGF0YSA9IHtcbiAgICAgIGF0dHJpYnM6IHtcbiAgICAgICAgaHA6IHt9LFxuICAgICAgICBtcDoge30sXG4gICAgICAgIHNhbjoge30sXG4gICAgICAgIG1vdjoge30sXG4gICAgICAgIGRiOiB7fSxcbiAgICAgICAgYnVpbGQ6IHt9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzPy5ocD8uYXV0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm5EYXRhLmF0dHJpYnMuaHAuYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnM/Lm1wPy5hdXRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybkRhdGEuYXR0cmlicy5tcC5hdXRvID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicz8uc2FuPy5hdXRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybkRhdGEuYXR0cmlicy5zYW4uYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnM/Lm1vdj8uYXV0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm5EYXRhLmF0dHJpYnMubW92LmF1dG8gPSB0cnVlXG4gICAgfVxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzPy5kYj8uYXV0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm5EYXRhLmF0dHJpYnMuZGIuYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnM/LmJ1aWxkPy5hdXRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybkRhdGEuYXR0cmlicy5idWlsZC5hdXRvID0gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiByZXR1cm5EYXRhXG4gIH1cblxuICBnZXQgY2hhcmFjdGVyaXN0aWNzICgpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJpc3RpY3MgPSB7XG4gICAgICBzdHI6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHNob3J0TmFtZTogJ0NIQVJBQy5TVFInLFxuICAgICAgICBsYWJlbDogJ0NIQVJBQy5TdHJlbmd0aCcsXG4gICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgIH0sXG4gICAgICBjb246IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHNob3J0TmFtZTogJ0NIQVJBQy5DT04nLFxuICAgICAgICBsYWJlbDogJ0NIQVJBQy5Db25zdGl0dXRpb24nLFxuICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICB9LFxuICAgICAgc2l6OiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzaG9ydE5hbWU6ICdDSEFSQUMuU0laJyxcbiAgICAgICAgbGFiZWw6ICdDSEFSQUMuU2l6ZScsXG4gICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgIH0sXG4gICAgICBkZXg6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHNob3J0TmFtZTogJ0NIQVJBQy5ERVgnLFxuICAgICAgICBsYWJlbDogJ0NIQVJBQy5EZXh0ZXJpdHknLFxuICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICB9LFxuICAgICAgYXBwOiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzaG9ydE5hbWU6ICdDSEFSQUMuQVBQJyxcbiAgICAgICAgbGFiZWw6ICdDSEFSQUMuQXBwZWFyYW5jZScsXG4gICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgIH0sXG4gICAgICBpbnQ6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHNob3J0TmFtZTogJ0NIQVJBQy5JTlQnLFxuICAgICAgICBsYWJlbDogJ0NIQVJBQy5JbnRlbGxpZ2VuY2UnLFxuICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICB9LFxuICAgICAgcG93OiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzaG9ydE5hbWU6ICdDSEFSQUMuUE9XJyxcbiAgICAgICAgbGFiZWw6ICdDSEFSQUMuUG93ZXInLFxuICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICB9LFxuICAgICAgZWR1OiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzaG9ydE5hbWU6ICdDSEFSQUMuRURVJyxcbiAgICAgICAgbGFiZWw6ICdDSEFSQUMuRWR1Y2F0aW9uJyxcbiAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgICAgdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzXG4gICAgICApKSB7XG4gICAgICAgIGNoYXJhY3RlcmlzdGljc1trZXldID0ge1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBzaG9ydE5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5zaG9ydCksXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5sYWJlbCksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLnZhbHVlLFxuICAgICAgICAgIGhhcmQ6IE1hdGguZmxvb3IodmFsdWUudmFsdWUgLyAyKSB8fCBudWxsLFxuICAgICAgICAgIGV4dHJlbWU6IE1hdGguZmxvb3IodmFsdWUudmFsdWUgLyA1KSB8fCBudWxsLFxuICAgICAgICAgIGZvcm11bGE6IHZhbHVlLmZvcm11bGFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhcmFjdGVyaXN0aWNzXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdG9rZW4gY3JlYXRpb24gZnJvbSBwcmVDcmVhdGVBY3RvciBob29rXG4gICAqIEBwYXJhbSB7Kn0gY3JlYXRlRGF0YVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGluaXRUb2tlbiAoY3JlYXRlRGF0YSkge1xuICAgIC8vIGNhbGxlZCB1cG9uIHRva2VuIGNyZWF0aW9uLmFjdGl2ZVxuICAgIGlmIChjcmVhdGVEYXRhKSB7XG4gICAgICAvL1xuICAgIH1cbiAgfVxuXG4gIGdldCBoYXNUZW1wb0luc2FuZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLnRlbXBvSW5zYW5lKVxuICB9XG5cbiAgZ2V0IGdldFRlbXBvSW5zYW5lRHVyYXRpb25UZXh0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDb25kaXRpb25WYWx1ZShDT0M3LnN0YXR1cy50ZW1wb0luc2FuZSwgJ2R1cmF0aW9uVGV4dCcpXG4gIH1cblxuICBnZXQgaGFzSW5kZWZJbnNhbmUgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0NvbmRpdGlvblN0YXR1cyhDT0M3LnN0YXR1cy5pbmRlZkluc2FuZSlcbiAgfVxuXG4gIGdldCBwb3J0cmFpdCAoKSB7XG4gICAgaWYgKCFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd1c2VUb2tlbicpKSByZXR1cm4gdGhpcy5pbWdcbiAgICByZXR1cm4gdGhpcy50b2tlbj8udGV4dHVyZT8uc3JjIHx8IHRoaXMucHJvdG90eXBlVG9rZW4/LnRleHR1cmU/LnNyYyB8fCB0aGlzLmltZ1xuICB9XG5cbiAgYXN5bmMgZW50ZXJCb3V0T2ZNYWRuZXNzIChyZWFsVGltZSA9IHRydWUsIGR1cmF0aW9uID0gMSkge1xuICAgIC8vIGNvbnN0IGR1cmF0aW9uID0ge3JvdW5kczogMSxcbiAgICAvLyAgIHNlY29uZHM6IDE3LFxuICAgIC8vICAgc3RhcnRSb3VuZDogMyxcbiAgICAvLyAgIHN0YXJ0VGltZTogNTgsXG4gICAgLy8gICBzdGFydFR1cm46IDQsXG4gICAgLy8gICB0dXJuczogMn07XG4gICAgLy8gYXdhaXQgdGhpcy5ib3V0T2ZNYWRuZXNzPy5zZXRGbGFnKCAnQ29DNycsICdtYWRuZXNzJywgdHJ1ZSk7XG5cbiAgICBsZXQgcmVzdWx0ID0gbnVsbFxuICAgIGNvbnN0IGJvdXRPZk1hZG5lc3NUYWJsZUlkID0gcmVhbFRpbWVcbiAgICAgID8gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc1JlYWxUaW1lVGFibGUnKVxuICAgICAgOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdib3V0T2ZNYWRuZXNzU3VtbWFyeVRhYmxlJylcbiAgICBpZiAoYm91dE9mTWFkbmVzc1RhYmxlSWQgIT09ICdub25lJykge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBwaG9iaWE6IGZhbHNlLFxuICAgICAgICBtYW5pYTogZmFsc2UsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBudWxsXG4gICAgICB9XG4gICAgICBjb25zdCBib3V0T2ZNYWRuZXNzVGFibGUgPSBnYW1lLnRhYmxlcy5nZXQoYm91dE9mTWFkbmVzc1RhYmxlSWQpXG4gICAgICByZXN1bHQudGFibGVSb2xsID0gYXdhaXQgYm91dE9mTWFkbmVzc1RhYmxlLnJvbGwoKVxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQudGFibGVSb2xsLnJlc3VsdHNbMF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBDT05TVC5UQUJMRV9SRVNVTFRfVFlQRVMuRE9DVU1FTlQgPT09XG4gICAgICAgICAgcmVzdWx0LnRhYmxlUm9sbC5yZXN1bHRzWzBdLnR5cGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IGdhbWUuaXRlbXMuZ2V0KHJlc3VsdC50YWJsZVJvbGwucmVzdWx0c1swXS5kb2N1bWVudElkKVxuICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnN5c3RlbT8udHlwZT8ucGhvYmlhKSByZXN1bHQucGhvYmlhID0gdHJ1ZVxuICAgICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtPy50eXBlPy5tYW5pYSkgcmVzdWx0Lm1hbmlhID0gdHJ1ZVxuICAgICAgICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gYCR7aXRlbS5uYW1lfTpgICsgYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgICAgICAgICBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgeyBhc3luYzogdHJ1ZSB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXN1bHQubmFtZSA9IGl0ZW0ubmFtZVxuICAgICAgICAgICAgY29uc3QgaXRlbURhdGEgPSBpdGVtLnRvT2JqZWN0KClcbiAgICAgICAgICAgIGRlbGV0ZSBpdGVtRGF0YS5faWRcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbaXRlbURhdGFdKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWVzc2FnZUJvdXRPZk1hZG5lc3NJdGVtTm90Rm91bmQnKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgQ09OU1QuVEFCTEVfUkVTVUxUX1RZUEVTLlRFWFQgPT09XG4gICAgICAgICAgcmVzdWx0LnRhYmxlUm9sbC5yZXN1bHRzWzBdLnR5cGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgICAgICAgcmVzdWx0LnRhYmxlUm9sbC5yZXN1bHRzWzBdLnRleHQsXG4gICAgICAgICAgICB7IGFzeW5jOiB0cnVlIH1cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1lc3NhZ2VCb3V0T2ZNYWRuZXNzVGFibGVOb3RGb3VuZCcpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBpdCdzIG5vdCBhIHJlYWwgdGltZSBubyBuZWVkIHRvIGFjdGl2YXRlIHRoZSBib3V0XG4gICAgaWYgKCFyZWFsVGltZSkgcmV0dXJuIHJlc3VsdFxuXG4gICAgdGhpcy5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudGVtcG9JbnNhbmUsIHtcbiAgICAgIHJlYWxUaW1lLFxuICAgICAgZHVyYXRpb25cbiAgICB9KVxuXG4gICAgLy8gY29uc3QgZWZmZWN0ID0gdGhpcy5lZmZlY3RzLmdldCggZWZmZWN0RGF0YS5faWQpO1xuICAgIC8vIGVmZmVjdC5zaGVldC5yZW5kZXIodHJ1ZSk7XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbmV3IGFjdG9yIGNyZWF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGRhdGFcbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqL1xuICAvLyBzdGF0aWMgYXN5bmMgY3JlYXRlKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gIC8vIElmIHRoZSBjcmVhdGVkIGFjdG9yIGhhcyBpdGVtcyAob25seSBhcHBsaWNhYmxlIHRvIGR1cGxpY2F0ZWQgYWN0b3JzKSBieXBhc3MgdGhlIG5ldyBhY3RvciBjcmVhdGlvbiBsb2dpY1xuICAvLyAgaWYgKGRhdGEuaXRlbXMpIHtcbiAgLy8gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZShkYXRhLCBvcHRpb25zKTtcbiAgLy8gIH1cbiAgLy8gIHJldHVybiBzdXBlci5jcmVhdGUoZGF0YSwgb3B0aW9ucyk7XG4gIC8vIH1cblxuICBzdGF0aWMgZW1wdHlTa2lsbCAoXG4gICAgc2tpbGxOYW1lLFxuICAgIHZhbHVlLFxuICAgIHtcbiAgICAgIHJhcml0eSA9IGZhbHNlLFxuICAgICAgcHVzaCA9IHRydWUsXG4gICAgICBjb21iYXQgPSBmYWxzZSxcbiAgICAgIGltZyA9IGZhbHNlLFxuICAgICAgc3BlY2lhbGl6YXRpb24gPSBmYWxzZVxuICAgIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogc2tpbGxOYW1lLFxuICAgICAgdHlwZTogJ3NraWxsJyxcbiAgICAgIHN5c3RlbToge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgc2tpbGxOYW1lLFxuICAgICAgICBzcGVjaWFsaXphdGlvbjogJycsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBzcGVjaWFsOiBmYWxzZSxcbiAgICAgICAgICByYXJpdHksXG4gICAgICAgICAgcHVzaCxcbiAgICAgICAgICBjb21iYXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW1nICE9PSBmYWxzZSkge1xuICAgICAgZGF0YS5pbWcgPSBpbWdcbiAgICB9XG4gICAgaWYgKHNwZWNpYWxpemF0aW9uICE9PSBmYWxzZSkge1xuICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKHNraWxsTmFtZSwgc3BlY2lhbGl6YXRpb24pXG4gICAgICBkYXRhLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9IHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICBkYXRhLnN5c3RlbS5za2lsbE5hbWUgPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgIGRhdGEubmFtZSA9IHBhcnRzLm5hbWVcbiAgICAgIGRhdGEuc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiBsaXN0IG9mIHNraWxscyBieSByZW1vdmluZyBzcGVjaWFsaXphdGlvbiBmcm9tIG5hbWVcbiAgICovXG4gIC8vIGFzeW5jIGNsZWFuU2tpbGxzICgpIHtcbiAgLy8gICBEaWFsb2cuY29uZmlybSh7XG4gIC8vICAgICB0aXRsZTogYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNsZWFuU2tpbGxMaXN0Jyl9YCxcbiAgLy8gICAgIGNvbnRlbnQ6IGA8cD4ke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DbGVhblNraWxsTGlzdEhpbnQnKX08L3A+YCxcbiAgLy8gICAgIHllczogKCkgPT4gY2xlYW4odGhpcylcbiAgLy8gICB9KVxuICAvLyAgIGFzeW5jIGZ1bmN0aW9uIGNsZWFuIChhY3Rvcikge1xuICAvLyAgICAgY29uc3QgdXBkYXRlID0gW11cbiAgLy8gICAgIGFjdG9yLnNraWxscy5mb3JFYWNoKHMgPT4ge1xuICAvLyAgICAgICBpZiAocy5zeXN0ZW0ucHJvcGVydGllcy5zcGVjaWFsKSB7XG4gIC8vICAgICAgICAgY29uc3QgY2xlYW4gPSBDb0M3SXRlbS5nZXROYW1lV2l0aG91dFNwZWMocyk/LnRyaW0oKVxuICAvLyAgICAgICAgIGlmIChjbGVhbi50b0xvd2VyQ2FzZSgpICE9IHMubmFtZS50b0xvd2VyQ2FzZSgpIHx8IGNsZWFuLnRvTG93ZXJDYXNlKCkgIT0gcy5kYXRhLm5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAvLyAgICAgICAgICAgdXBkYXRlLnB1c2goe1xuICAvLyAgICAgICAgICAgICBfaWQ6IHMuaWQsXG4gIC8vICAgICAgICAgICAgIG5hbWU6IGNsZWFuXG4gIC8vICAgICAgICAgICB9KVxuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSlcbiAgLy8gICAgIGlmICh1cGRhdGUubGVuZ3RoICE9IDApe1xuICAvLyAgICAgICBhd2FpdCBhY3Rvci51cGRhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIHVwZGF0ZSlcbiAgLy8gICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKCBgU2tpbGxzIDogJHtBcnJheS5mcm9tKCB1cGRhdGUsIGUgPT4gZS5uYW1lKS5qb2luKCcsICcpfSB1cGRhdGVkLmApXG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oICdTa2lsbCBsaXN0IHdhcyBjbGVhbiBhbHJlYWR5ICEnKVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXN5bmMgY3JlYXRlU2tpbGwgKHNraWxsTmFtZSwgdmFsdWUsIHNob3dTaGVldCA9IGZhbHNlKSB7XG4gICAgY29uc3QgZGF0YSA9IENvQ0FjdG9yLmVtcHR5U2tpbGwoc2tpbGxOYW1lLCB2YWx1ZSlcbiAgICBjb25zdCBjcmVhdGVkID0gYXdhaXQgdGhpcy5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtkYXRhXSwge1xuICAgICAgcmVuZGVyU2hlZXQ6IHNob3dTaGVldFxuICAgIH0pXG4gICAgcmV0dXJuIGNyZWF0ZWRcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVdlYXBvblNraWxsIChuYW1lLCBmaXJlYXJtcyA9IGZhbHNlLCBiYXNlID0gbnVsbCkge1xuICAgIC8vIFRPRE8gOiBBc2sgZm9yIGJhc2UgdmFsdWUgaWYgbnVsbFxuXG4gICAgY29uc3Qgc2tpbGxEYXRhID0gYXdhaXQgU2tpbGxTcGVjU2VsZWN0RGlhbG9nLmNyZWF0ZShcbiAgICAgIFtdLFxuICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICBmaXJlYXJtc1xuICAgICAgICAgID8gJ0NvQzcuRmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSdcbiAgICAgICAgICA6ICdDb0M3LkZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lJ1xuICAgICAgKSxcbiAgICAgIDAsXG4gICAgICBuYW1lXG4gICAgKVxuICAgIGNvbnN0IHZhbHVlID0gTnVtYmVyKHNraWxsRGF0YS5nZXQoJ2Jhc2UtdmFsdWUnKSlcbiAgICBjb25zdCBwYXJ0cyA9IENvQzdJdGVtLmdldE5hbWVQYXJ0c1NwZWMoXG4gICAgICBuYW1lLFxuICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICBmaXJlYXJtc1xuICAgICAgICAgID8gJ0NvQzcuRmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSdcbiAgICAgICAgICA6ICdDb0M3LkZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lJ1xuICAgICAgKVxuICAgIClcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogcGFydHMubmFtZSxcbiAgICAgIHR5cGU6ICdza2lsbCcsXG4gICAgICBzeXN0ZW06IHtcbiAgICAgICAgYmFzZTogaXNOYU4odmFsdWUpID8gMCA6IHZhbHVlLFxuICAgICAgICBhZGp1c3RtZW50czoge1xuICAgICAgICAgIHBlcnNvbmFsOiBudWxsLFxuICAgICAgICAgIG9jY3VwYXRpb246IG51bGwsXG4gICAgICAgICAgYXJjaGV0eXBlOiBudWxsLFxuICAgICAgICAgIGV4cGVyaWVuY2U6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgc2tpbGxOYW1lOiBwYXJ0cy5za2lsbE5hbWUsXG4gICAgICAgIHNwZWNpYWxpemF0aW9uOiBwYXJ0cy5zcGVjaWFsaXphdGlvbixcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHNwZWNpYWw6IHRydWUsXG4gICAgICAgICAgZmlnaHRpbmc6ICFmaXJlYXJtcyxcbiAgICAgICAgICBmaXJlYXJtOiBmaXJlYXJtcyxcbiAgICAgICAgICBjb21iYXQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW2RhdGFdLCB7XG4gICAgICByZW5kZXJTaGVldDogIWJhc2VcbiAgICB9KVxuICAgIGNvbnN0IHNraWxsID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUobmFtZSlcbiAgICByZXR1cm4gc2tpbGxbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgY3JlYXR1cmUgd2l0aCBtaW5pbXVtcyBza2lsbHNcbiAgICovXG4gIGFzeW5jIGNyZWF0dXJlSW5pdCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ2NyZWF0dXJlJykgcmV0dXJuXG4gICAgaWYgKHRoaXMuZ2V0QWN0b3JGbGFnKCdpbml0aWFsaXplZCcpKSByZXR1cm4gLy8gQ2hhbmdlIHRvIHJldHVybiBza2lsbCA/XG5cbiAgICAvLyBDaGVjayBpZiBmaWdodGluZyBza2lsbHMgZXhpc3RzLCBpZiBub3QgY3JlYXRlIGl0IGFuZCB0aGUgYXNzb2NpYXRlZCBhdHRhY2suXG4gICAgY29uc3Qgc2tpbGxzID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUoXG4gICAgICBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5jcmVhdHVyZUZpZ2h0aW5nU2tpbGwpXG4gICAgKVxuICAgIGlmIChza2lsbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBDcmVhdGluZyBuYXR1cmFsIGF0dGFjayBza2lsbFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3LmNyZWF0dXJlRmlnaHRpbmdTa2lsbCksXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKENPQzcuZmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUpXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICB0eXBlOiAnc2tpbGwnLFxuICAgICAgICAgIG5hbWU6IHBhcnRzLm5hbWUsXG4gICAgICAgICAgc3lzdGVtOiB7XG4gICAgICAgICAgICBiYXNlOiAwLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBza2lsbE5hbWU6IHBhcnRzLnNraWxsTmFtZSxcbiAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uOiBwYXJ0cy5zcGVjaWFsaXphdGlvbixcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgY29tYmF0OiB0cnVlLFxuICAgICAgICAgICAgICBmaWdodGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgc3BlY2lhbDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZsYWdzOiB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBza2lsbCA9IGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YV0sIHtcbiAgICAgICAgICByZW5kZXJTaGVldDogZmFsc2VcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBhdHRhY2sgPSBhd2FpdCB0aGlzLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKFxuICAgICAgICAgICdJdGVtJyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdJbm5hdGUgYXR0YWNrJyxcbiAgICAgICAgICAgICAgdHlwZTogJ3dlYXBvbicsXG4gICAgICAgICAgICAgIHN5c3RlbToge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogXCJDcmVhdHVyZSdzIG5hdHVyYWwgYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgICBjaGF0OiBcIkNyZWF0dXJlJ3MgbmF0dXJhbCBhdHRhY2tcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgd3BuVHlwZTogJ2lubmF0ZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgYWRkYjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIHNsbnQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIHsgcmVuZGVyU2hlZXQ6IGZhbHNlIH1cbiAgICAgICAgKVxuICAgICAgICBpZiAoc2tpbGwubGVuZ3RoID4gMCAmJiBhdHRhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBdHRhY2sgPSB0aGlzLml0ZW1zLmdldChhdHRhY2tbMF0uaWQpXG4gICAgICAgICAgYXdhaXQgY3JlYXRlZEF0dGFjay51cGRhdGUoe1xuICAgICAgICAgICAgJ3N5c3RlbS5za2lsbC5tYWluLmlkJzogc2tpbGxbMF0uaWQsXG4gICAgICAgICAgICAnc3lzdGVtLnNraWxsLm1haW4ubmFtZSc6IHNraWxsWzBdLm5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQ3JlYXR1cmUgaW5pdDogJyArIGVyci5tZXNzYWdlKVxuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2coICdTa2lsbCBjcmVhdGVkJyk7XG4gICAgICBhd2FpdCB0aGlzLnNldEFjdG9yRmxhZygnaW5pdGlhbGl6ZWQnKVxuICAgICAgLy8gQ3JlYXRpbmcgY29ycmVzcG9uZGluZyB3ZWFwb24uXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlSXRlbSAoaXRlbU5hbWUsIHF1YW50aXR5ID0gMSwgc2hvd1NoZWV0ID0gZmFsc2UpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogaXRlbU5hbWUsXG4gICAgICB0eXBlOiAnaXRlbScsXG4gICAgICBzeXN0ZW06IHtcbiAgICAgICAgcXVhbnRpdHlcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY3JlYXRlZCA9IGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YV0sIHtcbiAgICAgIHJlbmRlclNoZWV0OiBzaG93U2hlZXRcbiAgICB9KVxuICAgIHJldHVybiBjcmVhdGVkXG4gIH1cblxuICBhc3luYyBjcmVhdGVFbXB0eUJvb2sgKGV2ZW50ID0gbnVsbCkge1xuICAgIGNvbnN0IHNob3dTaGVldCA9IGV2ZW50ID8gIWV2ZW50LnNoaWZ0S2V5IDogdHJ1ZVxuICAgIGlmICghdGhpcy5nZXRJdGVtSWRCeU5hbWUoZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3Qm9va05hbWUpKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQm9vayhnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdCb29rTmFtZSksIHNob3dTaGVldClcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gMFxuICAgIGxldCBpdGVtTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld0Jvb2tOYW1lKSArICcgJyArIGluZGV4XG4gICAgd2hpbGUgKHRoaXMuZ2V0SXRlbUlkQnlOYW1lKGl0ZW1OYW1lKSkge1xuICAgICAgaW5kZXgrK1xuICAgICAgaXRlbU5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdCb29rTmFtZSkgKyAnICcgKyBpbmRleFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jcmVhdGVCb29rKGl0ZW1OYW1lLCBzaG93U2hlZXQpXG4gIH1cblxuICBhc3luYyBjcmVhdGVCb29rIChpdGVtTmFtZSwgc2hvd1NoZWV0ID0gZmFsc2UpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogaXRlbU5hbWUsXG4gICAgICB0eXBlOiAnYm9vaycsXG4gICAgICBzeXN0ZW06IHt9XG4gICAgfVxuICAgIGNvbnN0IGNyZWF0ZWQgPSBhd2FpdCB0aGlzLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW2RhdGFdLCB7XG4gICAgICByZW5kZXJTaGVldDogc2hvd1NoZWV0XG4gICAgfSlcbiAgICByZXR1cm4gY3JlYXRlZFxuICB9XG5cbiAgYXN5bmMgY3JlYXRlRW1wdHlTcGVsbCAoZXZlbnQgPSBudWxsKSB7XG4gICAgY29uc3Qgc2hvd1NoZWV0ID0gZXZlbnQgPyAhZXZlbnQuc2hpZnRLZXkgOiB0cnVlXG4gICAgaWYgKCF0aGlzLmdldEl0ZW1JZEJ5TmFtZShnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdTcGVsbE5hbWUpKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU3BlbGwoZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3U3BlbGxOYW1lKSwgc2hvd1NoZWV0KVxuICAgIH1cbiAgICBsZXQgaW5kZXggPSAwXG4gICAgbGV0IGl0ZW1OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3U3BlbGxOYW1lKSArICcgJyArIGluZGV4XG4gICAgd2hpbGUgKHRoaXMuZ2V0SXRlbUlkQnlOYW1lKGl0ZW1OYW1lKSkge1xuICAgICAgaW5kZXgrK1xuICAgICAgaXRlbU5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdTcGVsbE5hbWUpICsgJyAnICsgaW5kZXhcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlU3BlbGwoaXRlbU5hbWUsIHNob3dTaGVldClcbiAgfVxuXG4gIHN0YXRpYyBlbXB0eVNwZWxsIChpdGVtTmFtZSkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBuYW1lOiBpdGVtTmFtZSxcbiAgICAgIHR5cGU6ICdzcGVsbCcsXG4gICAgICBzeXN0ZW06IHt9XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBhc3luYyBjcmVhdGVTcGVsbCAoaXRlbU5hbWUsIHNob3dTaGVldCA9IGZhbHNlKSB7XG4gICAgY29uc3QgZGF0YSA9IENvQ0FjdG9yLmVtcHR5U3BlbGwoaXRlbU5hbWUpXG4gICAgY29uc3QgY3JlYXRlZCA9IGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YV0sIHtcbiAgICAgIHJlbmRlclNoZWV0OiBzaG93U2hlZXRcbiAgICB9KVxuICAgIHJldHVybiBjcmVhdGVkXG4gIH1cblxuICBhc3luYyBjcmVhdGVFbXB0eVNraWxsIChldmVudCA9IG51bGwpIHtcbiAgICBjb25zdCBzaG93U2hlZXQgPSBldmVudCA/ICFldmVudC5zaGlmdEtleSA6IHRydWVcbiAgICBpZiAoIXRoaXMuZ2V0SXRlbUlkQnlOYW1lKGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld1NraWxsTmFtZSkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVTa2lsbChcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3U2tpbGxOYW1lKSxcbiAgICAgICAgKHRoaXMudHlwZSAhPT0gJ2NoYXJhY3RlcicgPyAxIDogbnVsbCksXG4gICAgICAgIHNob3dTaGVldFxuICAgICAgKVxuICAgIH1cbiAgICBsZXQgaW5kZXggPSAwXG4gICAgbGV0IHNraWxsTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld1NraWxsTmFtZSkgKyAnICcgKyBpbmRleFxuICAgIHdoaWxlICh0aGlzLmdldEl0ZW1JZEJ5TmFtZShza2lsbE5hbWUpKSB7XG4gICAgICBpbmRleCsrXG4gICAgICBza2lsbE5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdTa2lsbE5hbWUpICsgJyAnICsgaW5kZXhcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jcmVhdGVTa2lsbChza2lsbE5hbWUsIG51bGwsIHNob3dTaGVldClcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUVtcHR5SXRlbSAoZXZlbnQgPSBudWxsKSB7XG4gICAgY29uc3Qgc2hvd1NoZWV0ID0gZXZlbnQgPyAhZXZlbnQuc2hpZnRLZXkgOiB0cnVlXG4gICAgaWYgKCF0aGlzLmdldEl0ZW1JZEJ5TmFtZShnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdJdGVtTmFtZSkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVJdGVtKGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld0l0ZW1OYW1lKSwgMSwgc2hvd1NoZWV0KVxuICAgIH1cbiAgICBsZXQgaW5kZXggPSAwXG4gICAgbGV0IGl0ZW1OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3SXRlbU5hbWUpICsgJyAnICsgaW5kZXhcbiAgICB3aGlsZSAodGhpcy5nZXRJdGVtSWRCeU5hbWUoaXRlbU5hbWUpKSB7XG4gICAgICBpbmRleCsrXG4gICAgICBpdGVtTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld0l0ZW1OYW1lKSArICcgJyArIGluZGV4XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUl0ZW0oaXRlbU5hbWUsIDEsIHNob3dTaGVldClcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUVtcHR5V2VhcG9uIChldmVudCA9IG51bGwsIHByb3BlcnRpZXMgPSB7fSkge1xuICAgIGNvbnN0IHNob3dTaGVldCA9IGV2ZW50ID8gIWV2ZW50LnNoaWZ0S2V5IDogdHJ1ZVxuICAgIGxldCB3ZWFwb25OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3V2VhcG9uTmFtZSlcbiAgICBpZiAodGhpcy5nZXRJdGVtSWRCeU5hbWUoZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3V2VhcG9uTmFtZSkpKSB7XG4gICAgICBsZXQgaW5kZXggPSAwXG4gICAgICB3ZWFwb25OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3V2VhcG9uTmFtZSkgKyAnICcgKyBpbmRleFxuICAgICAgd2hpbGUgKHRoaXMuZ2V0SXRlbUlkQnlOYW1lKHdlYXBvbk5hbWUpKSB7XG4gICAgICAgIGluZGV4KytcbiAgICAgICAgd2VhcG9uTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld1dlYXBvbk5hbWUpICsgJyAnICsgaW5kZXhcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogd2VhcG9uTmFtZSxcbiAgICAgIHR5cGU6ICd3ZWFwb24nLFxuICAgICAgc3lzdGVtOiB7XG4gICAgICAgIHByb3BlcnRpZXM6IHt9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBba2V5XSBvZiBPYmplY3QuZW50cmllcyhDT0M3LndlYXBvblByb3BlcnRpZXMpKSB7XG4gICAgICBkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzW2tleV0gPVxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcGVydGllcywga2V5KSA/PyBmYWxzZVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YV0sIHtcbiAgICAgIHJlbmRlclNoZWV0OiBzaG93U2hlZXRcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlQmlvU2VjdGlvbiAodGl0bGUgPSBudWxsKSB7XG4gICAgY29uc3QgYmlvID0gdGhpcy5zeXN0ZW0uYmlvZ3JhcGh5XG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmJpb2dyYXBoeSlcbiAgICAgIDogW11cbiAgICBiaW8ucHVzaCh7XG4gICAgICB0aXRsZSxcbiAgICAgIHZhbHVlOiBudWxsXG4gICAgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvZ3JhcGh5JzogYmlvIH0sIHsgcmVuZGVyU2hlZXQ6IGZhbHNlIH0pXG4gIH1cblxuICBhc3luYyB1cGRhdGVCaW9WYWx1ZSAoaW5kZXgsIGNvbnRlbnQpIHtcbiAgICBjb25zdCBiaW8gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5iaW9ncmFwaHkpXG4gICAgYmlvW2luZGV4XS52YWx1ZSA9IGNvbnRlbnRcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvZ3JhcGh5JzogYmlvIH0sIHsgcmVuZGVyOiBmYWxzZSB9KVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlQmlvVGl0bGUgKGluZGV4LCB0aXRsZSkge1xuICAgIGNvbnN0IGJpbyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmJpb2dyYXBoeSlcbiAgICBiaW9baW5kZXhdLnRpdGxlID0gdGl0bGVcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvZ3JhcGh5JzogYmlvIH0pXG4gIH1cblxuICBhc3luYyBkZWxldGVCaW9TZWN0aW9uIChpbmRleCkge1xuICAgIGNvbnN0IGJpbyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmJpb2dyYXBoeSlcbiAgICBiaW8uc3BsaWNlKGluZGV4LCAxKVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5iaW9ncmFwaHknOiBiaW8gfSlcbiAgfVxuXG4gIGFzeW5jIG1vdmVCaW9TZWN0aW9uVXAgKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSAwKSByZXR1cm5cbiAgICBjb25zdCBiaW8gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5iaW9ncmFwaHkpXG4gICAgaWYgKGluZGV4ID49IGJpby5sZW5ndGgpIHJldHVyblxuICAgIGNvbnN0IGVsZW0gPSBiaW8uc3BsaWNlKGluZGV4LCAxKVswXVxuICAgIGJpby5zcGxpY2UoaW5kZXggLSAxLCAwLCBlbGVtKVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5iaW9ncmFwaHknOiBiaW8gfSlcbiAgfVxuXG4gIGFzeW5jIG1vdmVCaW9TZWN0aW9uRG93biAoaW5kZXgpIHtcbiAgICBjb25zdCBiaW8gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5iaW9ncmFwaHkpXG4gICAgaWYgKGluZGV4ID49IGJpby5sZW5ndGggLSAxKSByZXR1cm5cbiAgICBjb25zdCBlbGVtID0gYmlvLnNwbGljZShpbmRleCwgMSlbMF1cbiAgICBiaW8uc3BsaWNlKGluZGV4ICsgMSwgMCwgZWxlbSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvZ3JhcGh5JzogYmlvIH0pXG4gIH1cblxuICBhc3luYyB1cGRhdGVUZXh0QXJlYSAodGV4dEFyZWEpIHtcbiAgICBjb25zdCBuYW1lID0gJ3N5c3RlbS4nICsgdGV4dEFyZWEuZGF0YXNldC5hcmVhTmFtZVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgW25hbWVdOiB0ZXh0QXJlYS52YWx1ZSB9KVxuICB9XG5cbiAgLy8gYXN5bmMgX3VwZGF0ZUVtYmVkZGVkRG9jdW1lbnRzIChkb2N1bWVudENsYXNzLCBwYXJlbnQsIHsgdXBkYXRlcywgb3B0aW9ucywgcGFjayB9LCB1c2VyKSB7XG4gIC8vICAgY29uc3QgcG91ZXQgPSAndG90bydcbiAgLy8gfVxuXG4gIC8vIGFzeW5jIHByZVVwZGF0ZUFjdGl2ZUVmZmVjdCAoYSxiLGMsZCkge1xuICAvLyAgIGNvbnN0IHBvdWV0ID0gJ3RvdG8nXG4gIC8vIH1cblxuICAvLyBhc3luYyB1cGRhdGVBY3RpdmVFZmZlY3QgKGEsYixjLGQpIHtcbiAgLy8gICBjb25zdCBwb3VldCA9ICd0b3RvJ1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpdGVtIGZvciB0aGF0IGFjdG9yLlxuICAgKiBJZiBpdCdzIGEgc2tpbGwgZmlyc3QgY2hlY2sgaWYgdGhlIHNraWxsIGlzIGFscmVhZHkgb3duZWQuIElmIGl0IGlzIGRvbid0IGNyZWF0ZSBhIHNlY29uZCB0aW1lLlxuICAgKiBGaWxsIHRoZSB2YWx1ZSBvZiB0aGUgc2tpbGwgd2l0aCBiYXNlIG9yIHRyeSB0byBldmFsdWF0ZSB0aGUgZm9ybXVsYS5cbiAgICogQHBhcmFtIHsqfSBlbWJlZGRlZE5hbWVcbiAgICogQHBhcmFtIHsqfSBkYXRhXG4gICAqIEBwYXJhbSB7Kn0gb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgY3JlYXRlRW1iZWRkZWREb2N1bWVudHMgKGVtYmVkZGVkTmFtZSwgZGF0YUFycmF5LCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvY2Vzc2VkRGF0YUFycmF5ID0gW11cbiAgICBsZXQgYmFzZVZhbHVlID0gMFxuICAgIGxldCBiYXNlQ2FsY3VsYXRlZCA9IDBcbiAgICBsZXQgYXJjaGV0eXBlID0gZmFsc2VcbiAgICBsZXQgb2NjdXBhdGlvbiA9IGZhbHNlXG4gICAgZm9yIChsZXQgZGF0YSBvZiBkYXRhQXJyYXkpIHtcbiAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NraWxsJzoge1xuICAgICAgICAgIGJhc2VWYWx1ZSA9IGRhdGEuc3lzdGVtLmJhc2VcbiAgICAgICAgICBiYXNlQ2FsY3VsYXRlZCA9IGF3YWl0IENvQzdJdGVtLmNhbGN1bGF0ZUJhc2UodGhpcywgZGF0YSlcbiAgICAgICAgICBpZiAodGhpcy50eXBlICE9PSAnY2hhcmFjdGVyJykge1xuICAgICAgICAgICAgLy8gSWYgbm90IGEgUEMgc2V0IHNraWxsIHZhbHVlIHRvIGJhc2VcbiAgICAgICAgICAgIGlmICh0aGlzLmdldEl0ZW1JZEJ5TmFtZShkYXRhLm5hbWUpKSByZXR1cm4gLy8gSWYgc2tpbGwgd2l0aCB0aGlzIG5hbWUgZXhpc3QgcmV0dXJuXG5cbiAgICAgICAgICAgIGlmIChiYXNlVmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKFN0cmluZyhiYXNlVmFsdWUpICE9PSBTdHJpbmcoZGF0YS5zeXN0ZW0udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0udmFsdWUgPSBiYXNlQ2FsY3VsYXRlZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc05hTihOdW1iZXIoZGF0YS5zeXN0ZW0udmFsdWUpKSkge1xuICAgICAgICAgICAgICBsZXQgdmFsdWVcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IChcbiAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBSb2xsKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZUNoYXJhY3RlcmlzdGljcygpXG4gICAgICAgICAgICAgICAgICApLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICAgICAgICApLnRvdGFsXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkgZGF0YS5zeXN0ZW0udmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhLnN5c3RlbS52YWx1ZSA9IG51bGxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgYWRkVGhpcyA9IHRydWVcblxuICAgICAgICAgIGlmIChDb0M3SXRlbS5pc0FueVNwZWMoZGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzQW55QnV0Tm90RmxhZ2dlZCA9ICghKGRhdGEuc3lzdGVtLnByb3BlcnRpZXM/LnJlcXVpcmVzbmFtZSkgPz8gZmFsc2UpICYmICEoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ucGlja25hbWVvbmx5ID8/IGZhbHNlKVxuICAgICAgICAgICAgbGV0IHNraWxsTGlzdCA9IFtdXG4gICAgICAgICAgICBjb25zdCBncm91cCA9IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5ndWVzc0dyb3VwRnJvbURvY3VtZW50KGRhdGEpXG4gICAgICAgICAgICBpZiAoZ3JvdXApIHtcbiAgICAgICAgICAgICAgc2tpbGxMaXN0ID0gKGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSURSZWdleEJlc3QoeyBjb2NpZFJlZ0V4cDogbmV3IFJlZ0V4cCgnXicgKyBDb0M3VXRpbGl0aWVzLnF1b3RlUmVnRXhwKGdyb3VwKSArICcuKyQnKSwgdHlwZTogJ2knIH0pKS5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5zcGVjaWFsID8/IGZhbHNlKSAmJiAhKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LnJlcXVpcmVzbmFtZSA/PyBmYWxzZSkgJiYgIShpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5waWNrbmFtZW9ubHkgPz8gZmFsc2UpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5zeXN0ZW0/LmZsYWdzPy5vY2N1cGF0aW9uIHx8IGRhdGEuc3lzdGVtPy5mbGFncz8uYXJjaGV0eXBlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nU2tpbGxzID0gdGhpcy5za2lsbHMuZmlsdGVyKGVsID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVsLnN5c3RlbS5zcGVjaWFsaXphdGlvbikgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0/LmZsYWdzPy5vY2N1cGF0aW9uICYmXG4gICAgICAgICAgICAgICAgICBlbC5zeXN0ZW0uZmxhZ3M/Lm9jY3VwYXRpb25cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbT8uZmxhZ3M/LmFyY2hldHlwZSAmJlxuICAgICAgICAgICAgICAgICAgZWwuc3lzdGVtLmZsYWdzPy5hcmNoZXR5cGVcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT1cbiAgICAgICAgICAgICAgICAgIGVsLnN5c3RlbS5zcGVjaWFsaXphdGlvbi50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdTa2lsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChza2lsbExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGV4aXN0aW5nU2tpbGxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gc2tpbGxMaXN0LmZpbmRJbmRleChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09PSBleGlzdGluZ1NraWxsc1tpXS5uYW1lIHx8IGl0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uaWQgPT09IGV4aXN0aW5nU2tpbGxzW2ldLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmlkXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2tpbGxMaXN0LnNwbGljZShmb3VuZCwgMSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgc2tpbGxMaXN0ID0gc2tpbGxMaXN0LmNvbmNhdChleGlzdGluZ1NraWxscylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2tpbGxMaXN0ID0gZXhpc3RpbmdTa2lsbHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChza2lsbExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBza2lsbExpc3Quc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBza2lsbERhdGEgPSBhd2FpdCBTa2lsbFNwZWNpYWxpemF0aW9uU2VsZWN0RGlhbG9nLmNyZWF0ZSh7XG4gICAgICAgICAgICAgIHNraWxsczogc2tpbGxMaXN0LFxuICAgICAgICAgICAgICBhbGxvd0N1c3RvbTogKGlzQW55QnV0Tm90RmxhZ2dlZCB8fCAoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ucmVxdWlyZXNuYW1lID8/IGZhbHNlKSksXG4gICAgICAgICAgICAgIGZpeGVkQmFzZVZhbHVlOiAoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ua2VlcGJhc2V2YWx1ZSA/PyBmYWxzZSksXG4gICAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uTmFtZTogZGF0YS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24sXG4gICAgICAgICAgICAgIGxhYmVsOiBkYXRhLm5hbWUsXG4gICAgICAgICAgICAgIGJhc2VWYWx1ZTogZGF0YS5zeXN0ZW0uYmFzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2tpbGxEYXRhLCAnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICBpZiAoc2tpbGxEYXRhLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gdGhpcy5pdGVtcy5nZXQoXG4gICAgICAgICAgICAgICAgICBza2lsbERhdGEuc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nSXRlbSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlcyA9IHt9XG4gICAgICAgICAgICAgICAgICBpZiAoIShkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzPy5rZWVwYmFzZXZhbHVlID8/IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2tpbGxEYXRhLmJhc2VWYWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICBiYXNlQ2FsY3VsYXRlZCA9IHNraWxsRGF0YS5iYXNlVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzWydzeXN0ZW0udmFsdWUnXSA9IGJhc2VDYWxjdWxhdGVkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEuc3lzdGVtLmZsYWdzKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzW2BzeXN0ZW0uZmxhZ3MuJHtrZXl9YF0gPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhjaGFuZ2VzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXMuX2lkID0gZXhpc3RpbmdJdGVtLmlkXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbY2hhbmdlc10pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBkYXRhLm5hbWUgPSBDb0M3SXRlbS5nZXROYW1lV2l0aG91dFNwZWMoZXhpc3RpbmdJdGVtKVxuICAgICAgICAgICAgICAgICAgYWRkVGhpcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gc2tpbGxMaXN0LmZpbmQoaSA9PiBpLmlkID09PSBza2lsbERhdGEuc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxhZ3MgPSBkYXRhLnN5c3RlbT8uZmxhZ3NcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2VlcEJhc2UgPSAoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ua2VlcGJhc2V2YWx1ZSA/PyBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGV4aXN0aW5nKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhmbGFncykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmZsYWdzW2tleV0gPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZWVwQmFzZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lsbERhdGEuYmFzZVZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uYmFzZSA9IHNraWxsRGF0YS5iYXNlVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgYmFzZVZhbHVlID0gc2tpbGxEYXRhLmJhc2VWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIGJhc2VDYWxjdWxhdGVkID0gYXdhaXQgQ29DN0l0ZW0uY2FsY3VsYXRlQmFzZSh0aGlzLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gQ29DN0l0ZW0uZ2V0TmFtZVBhcnRzU3BlYyhcbiAgICAgICAgICAgICAgICAgIHNraWxsRGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgaWYgKCEoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ua2VlcGJhc2V2YWx1ZSA/PyBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChza2lsbERhdGEuYmFzZVZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5iYXNlID0gc2tpbGxEYXRhLmJhc2VWYWx1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYmFzZVZhbHVlID0gc2tpbGxEYXRhLmJhc2VWYWx1ZVxuICAgICAgICAgICAgICAgICAgYmFzZUNhbGN1bGF0ZWQgPSBhd2FpdCBDb0M3SXRlbS5jYWxjdWxhdGVCYXNlKHRoaXMsIGRhdGEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgICAgICAgIGRhdGEubmFtZSA9IHBhcnRzLm5hbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhZGRUaGlzKSB7XG4gICAgICAgICAgICBpZiAoU3RyaW5nKGJhc2VWYWx1ZSkgIT09IFN0cmluZyhiYXNlQ2FsY3VsYXRlZCkpIHtcbiAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uYmFzZSA9IGJhc2VDYWxjdWxhdGVkXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByb2Nlc3NlZERhdGFBcnJheS5wdXNoKGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGRhdGEpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnd2VhcG9uJzoge1xuICAgICAgICAgIGlmICh0aGlzLnR5cGUgIT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgICBjb25zdCBtYWluU2tpbGwgPSBkYXRhLnN5c3RlbT8uc2tpbGw/Lm1haW4/Lm5hbWVcbiAgICAgICAgICAgIGlmIChtYWluU2tpbGwpIHtcbiAgICAgICAgICAgICAgbGV0IHNraWxsID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUobWFpblNraWxsKVswXVxuICAgICAgICAgICAgICBpZiAoIXNraWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IG1haW5Ta2lsbC5tYXRjaCgvXFwoKFteKV0rKVxcKS8pXG4gICAgICAgICAgICAgICAgICA/IG1haW5Ta2lsbC5tYXRjaCgvXFwoKFteKV0rKVxcKS8pWzFdXG4gICAgICAgICAgICAgICAgICA6IG1haW5Ta2lsbFxuICAgICAgICAgICAgICAgIC8vIHRyeSB0byB1c2UgYW4gYWxyZWFkeSBkZWZpbmVkIHNraWxsXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogc2VhcmNoIG9uIHRoZSBjb21wZW5kaXVtc1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gZ2FtZS5pdGVtcy5maW5kKFxuICAgICAgICAgICAgICAgICAgaXRlbSA9PiBpdGVtLnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICAgICAgICAgKGl0ZW0ubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkgfHwgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZEl0ZW1zKFtleGlzdGluZ10pXG4gICAgICAgICAgICAgICAgICBza2lsbCA9IGF3YWl0IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKG1haW5Ta2lsbClbMF1cbiAgICAgICAgICAgICAgICAgIC8vIHNraWxsID0gZXhpc3RpbmcudG9PYmplY3QoKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBza2lsbCA9IGF3YWl0IHRoaXMuY3JlYXRlV2VhcG9uU2tpbGwoXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICEhZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ucm5nZFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc2tpbGwpIGRhdGEuc3lzdGVtLnNraWxsLm1haW4uaWQgPSBza2lsbC5pZFxuICAgICAgICAgICAgfSAvLyBUT0RPIDogRWxzZSA6IHNlbGVjdGlvbm5lciBsZSBza2lsbCBkYW5zIGxhIGxpc3RlIG91IGVuIGNyw6llciB1biBub3V2ZWF1LlxuXG4gICAgICAgICAgICBjb25zdCBzZWNvbmRTa2lsbCA9IGRhdGEuc3lzdGVtPy5za2lsbD8uYWx0ZXJuYXRpdj8ubmFtZVxuICAgICAgICAgICAgaWYgKHNlY29uZFNraWxsKSB7XG4gICAgICAgICAgICAgIGxldCBza2lsbCA9IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKHNlY29uZFNraWxsKVswXVxuICAgICAgICAgICAgICBpZiAoIXNraWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHNlY29uZFNraWxsLm1hdGNoKC9cXCgoW14pXSspXFwpLylcbiAgICAgICAgICAgICAgICAgID8gc2Vjb25kU2tpbGwubWF0Y2goL1xcKChbXildKylcXCkvKVsxXVxuICAgICAgICAgICAgICAgICAgOiBzZWNvbmRTa2lsbFxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gZ2FtZS5pdGVtcy5maW5kKFxuICAgICAgICAgICAgICAgICAgaXRlbSA9PiBpdGVtLnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICAgICAgICAgKGl0ZW0ubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkgfHwgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZEl0ZW1zKFtleGlzdGluZ10pXG4gICAgICAgICAgICAgICAgICBza2lsbCA9IGF3YWl0IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKHNlY29uZFNraWxsKVswXVxuICAgICAgICAgICAgICAgICAgLy8gc2tpbGwgPSBleGlzdGluZy50b09iamVjdCgpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNraWxsID0gYXdhaXQgdGhpcy5jcmVhdGVXZWFwb25Ta2lsbChcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgISFkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzPy5ybmdkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChza2lsbCkgZGF0YS5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZCA9IHNraWxsLmlkXG4gICAgICAgICAgICB9IC8vIFRPRE8gOiBFbHNlIDogc2VsZWN0aW9ubmVyIGxlIHNraWxsIGRhbnMgbGEgbGlzdGUgb3UgZW4gY3LDqWVyIHVuIG5vdXZlYXUuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJvY2Vzc2VkRGF0YUFycmF5LnB1c2goZm91bmRyeS51dGlscy5kdXBsaWNhdGUoZGF0YSkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ3NldHVwJzoge1xuICAgICAgICAgIGlmIChkYXRhLnN5c3RlbS5lbmFibGVDaGFyYWN0ZXJpc2l0aWNzKSB7XG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdCA9IHt9XG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5zdHIgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKCdzdHInKVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuY29uID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYygnY29uJylcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0LnNpeiA9IHRoaXMuZ2V0Q2hhcmFjdGVyaXN0aWMoJ3NpeicpXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5kZXggPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKCdkZXgnKVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuYXBwID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYygnYXBwJylcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0LmludCA9IHRoaXMuZ2V0Q2hhcmFjdGVyaXN0aWMoJ2ludCcpXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5wb3cgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKCdwb3cnKVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuZWR1ID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYygnZWR1JylcblxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QubHVjayA9IHt9XG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5sdWNrLnZhbHVlID0gaXNOYU4odGhpcy5sdWNrKVxuICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgOiB0aGlzLmx1Y2tcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0Lmx1Y2subGFiZWwgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICdDb0M3Lkx1Y2snXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5sdWNrLnNob3J0TmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgJ0NvQzcuTHVjaydcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgaWYgKCFkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzKSB7XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMgPSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnZhbHVlcy5zdHIgPVxuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5zdHIudmFsdWVcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuY29uID1cbiAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuY29uLnZhbHVlXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLnNpeiA9XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0LnNpei52YWx1ZVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnZhbHVlcy5kZXggPVxuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5kZXgudmFsdWVcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuYXBwID1cbiAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuYXBwLnZhbHVlXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLmludCA9XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0LmludC52YWx1ZVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnZhbHVlcy5wb3cgPVxuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5wb3cudmFsdWVcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuZWR1ID1cbiAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuZWR1LnZhbHVlXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLmx1Y2sgPVxuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5sdWNrLnZhbHVlXG4gICAgICAgICAgICBpZiAoZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvaW50cy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNwZW5kUG9pbnRzJylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJvbGxDaGFyYWMnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0ucG9pbnRzV2FybmluZyA9ICEoXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuc3RyICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuY29uICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuc2l6ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuZGV4ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuYXBwICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuaW50ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMucG93ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuZWR1ICE9PSBudWxsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBjb25zdCByb2xsZWQgPSBhd2FpdCBDaGFyYWNSb2xsRGlhbG9nLmNyZWF0ZShkYXRhLnN5c3RlbSlcbiAgICAgICAgICAgIGlmIChyb2xsZWQpIHtcbiAgICAgICAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9XG4gICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIFtcbiAgICAgICAgICAgICAgICAnc3RyJyxcbiAgICAgICAgICAgICAgICAnY29uJyxcbiAgICAgICAgICAgICAgICAnc2l6JyxcbiAgICAgICAgICAgICAgICAnZGV4JyxcbiAgICAgICAgICAgICAgICAnYXBwJyxcbiAgICAgICAgICAgICAgICAnaW50JyxcbiAgICAgICAgICAgICAgICAncG93JyxcbiAgICAgICAgICAgICAgICAnZWR1J1xuICAgICAgICAgICAgICBdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YVtgc3lzdGVtLmNoYXJhY3RlcmlzdGljcy4ke2tleX0udmFsdWVgXSA9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXNba2V5XVxuICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YVtgc3lzdGVtLmNoYXJhY3RlcmlzdGljcy4ke2tleX0uZm9ybXVsYWBdID1cbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzW2tleV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMubHVjaykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5hdHRyaWJzLmxjay52YWx1ZSddID1cbiAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMubHVja1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLnBvdykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSddID1cbiAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMucG93XG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TGltaXQnXSA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLnBvdyAvIDVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmF0dHJpYnMubXAubWF4J10gPSBNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnZhbHVlcy5wb3cgLyA1XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHVwZGF0ZURhdGEsIHsgcmVuZGVyU2hlZXQ6IGZhbHNlIH0pXG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAnc3lzdGVtLmF0dHJpYnMuaHAudmFsdWUnOiB0aGlzLnJhd0hwTWF4LFxuICAgICAgICAgICAgICAgICdzeXN0ZW0uYXR0cmlicy5ocC5tYXgnOiB0aGlzLnJhd0hwTWF4XG4gICAgICAgICAgICAgIH0sIHsgcmVuZGVyU2hlZXQ6IGZhbHNlIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXJhID0gT2JqZWN0LmVudHJpZXMoZGF0YS5mbGFncz8uQ29DNz8uY29jaWRGbGFnPy5lcmFzKS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiBlWzBdKVxuICAgICAgICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmV4cGFuZEl0ZW1BcnJheSh7IGl0ZW1MaXN0OiBkYXRhLnN5c3RlbS5pdGVtcywgZXJhOiAodHlwZW9mIGVyYVswXSAhPT0gJ3VuZGVmaW5lZCcgPyBlcmFbMF0gOiB0cnVlKSB9KVxuICAgICAgICAgIGNvbnN0IHNraWxscyA9IGl0ZW1zLmZpbHRlcihpdCA9PiBpdC50eXBlID09PSAnc2tpbGwnKVxuICAgICAgICAgIGNvbnN0IG90aGVyc0l0ZW1zID0gaXRlbXMuZmlsdGVyKGl0ID0+IGl0LnR5cGUgIT09ICdza2lsbCcpXG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGRVbmlxdWVJdGVtcyhza2lsbHMpXG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGRJdGVtcyhvdGhlcnNJdGVtcylcbiAgICAgICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb25lQmxvY2tCYWNrc3RvcnknKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmJhY2tzdG9yeSc6IGRhdGEuc3lzdGVtLmJhY2tzdG9yeSB9LCB7IHJlbmRlclNoZWV0OiBmYWxzZSB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlY3Rpb25OYW1lIG9mIGRhdGEuc3lzdGVtLmJpb1NlY3Rpb25zKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhdGhpcy5zeXN0ZW0uYmlvZ3JhcGh5Py5maW5kKFxuICAgICAgICAgICAgICAgICAgZWwgPT4gc2VjdGlvbk5hbWUgPT09IGVsLnRpdGxlXG4gICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgIHNlY3Rpb25OYW1lXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlQmlvU2VjdGlvbihzZWN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyByZWZhY3RvciB0aGlzXG4gICAgICAgICAgY29uc3QgbW9uZXRhcnkgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHRoaXMuc3lzdGVtLm1vbmV0YXJ5LCBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShkYXRhLnN5c3RlbS5tb25ldGFyeSkpXG4gICAgICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzLnNoZWV0XG4gICAgICAgICAgbGV0IHN0YXRlID0gZmFsc2VcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBzdGF0ZSA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUoc2hlZXQuX3N0YXRlKVxuICAgICAgICAgICAgfSwgMTAwKSlcbiAgICAgICAgICB9IHdoaWxlIChzdGF0ZSA9PT0gQXBwbGljYXRpb24uUkVOREVSX1NUQVRFUy5SRU5ERVJJTkcpXG4gICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAgICAgJ3N5c3RlbS5tb25ldGFyeSc6IG1vbmV0YXJ5XG4gICAgICAgICAgfSlcbiAgICAgICAgICBIb29rcy5jYWxsKCdzZXR1cEZpbmlzaGVkQ29DNycpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdhcmNoZXR5cGUnOlxuICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdjaGFyYWN0ZXInKSB7XG4gICAgICAgICAgICAvLyBBcmNoZXR5cHJlIG9ubHkgZm9yIFBDc1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJjaGV0eXBlKSB7XG4gICAgICAgICAgICAgIGxldCByZXNldEFyY2hldHlwZSA9IGZhbHNlXG4gICAgICAgICAgICAgIGF3YWl0IERpYWxvZy5jb25maXJtKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlc2V0QXJjaGV0eXBlJyksXG4gICAgICAgICAgICAgICAgY29udGVudDogYDxwPiR7Z2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZXNldEFyY2hldHlwZUhpbnQnLCB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWVcbiAgICAgICAgICAgICAgICB9KX08L3A+YCxcbiAgICAgICAgICAgICAgICB5ZXM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlc2V0QXJjaGV0eXBlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVmYXVsdFllczogZmFsc2VcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgaWYgKHJlc2V0QXJjaGV0eXBlKSBhd2FpdCB0aGlzLnJlc2V0QXJjaGV0eXBlKClcbiAgICAgICAgICAgICAgZWxzZSByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29yZUNoYXJhYyA9IFtdXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIE9iamVjdC5lbnRyaWVzKGRhdGEuc3lzdGVtLmNvcmVDaGFyYWN0ZXJpc3RpY3MpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGVudHJ5XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNvcmVDaGFyYWN0ZXJpc3RpY3Nba2V5XSA9IGZhbHNlXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKGtleSlcbiAgICAgICAgICAgICAgICBjaGFyLmtleSA9IGtleVxuICAgICAgICAgICAgICAgIGNvcmVDaGFyYWMucHVzaChjaGFyKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjaGFyYWNcblxuICAgICAgICAgICAgaWYgKGNvcmVDaGFyYWMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBjb25zdCBjaGFyRGlhbG9nRGF0YSA9IHt9XG4gICAgICAgICAgICAgIGNoYXJEaWFsb2dEYXRhLmNoYXJhY3RlcmlzdGljcyA9IGNvcmVDaGFyYWNcbiAgICAgICAgICAgICAgY2hhckRpYWxvZ0RhdGEudGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2VsZWN0Q29yZUNoYXJhYycpXG4gICAgICAgICAgICAgIGNoYXJhYyA9IGF3YWl0IENoYXJhY1NlbGVjdERpYWxvZy5jcmVhdGUoY2hhckRpYWxvZ0RhdGEpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmVDaGFyYWMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIGNoYXJhYyA9IGNvcmVDaGFyYWNbMF0ua2V5XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY2hhcmFjKSByZXR1cm5cbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNvcmVDaGFyYWN0ZXJpc3RpY3NbY2hhcmFjXSA9IHRydWVcbiAgICAgICAgICAgIGlmIChkYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9IE51bWJlcihkYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS52YWx1ZSlcbiAgICAgICAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKGNoYXJhYylcbiAgICAgICAgICAgICAgICBjb25zdCByb2xsID0gbmV3IFJvbGwoXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS52YWx1ZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBhd2FpdCByb2xsLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgICAgICAgIHJvbGwudG9NZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICAgJ0NvQzcuTWVzc2FnZVJvbGxpbmdDaGFyYWN0ZXJpc3RpYycsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogY2hhci5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICBmb3JtdWxhOiBkYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNoYXIudmFsdWUgPCByb2xsLnRvdGFsID8gcm9sbC50b3RhbCA6IGNoYXIudmFsdWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgW2BzeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLiR7Y2hhcmFjfS52YWx1ZWBdOiB2YWx1ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgYWxsIHNraWxsc1xuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uc2tpbGxzID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmV4cGFuZEl0ZW1BcnJheSh7IGl0ZW1MaXN0OiBkYXRhLnN5c3RlbS5za2lsbHMgfSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkVW5pcXVlSXRlbXMoZGF0YS5zeXN0ZW0uc2tpbGxzLCAnYXJjaGV0eXBlJylcblxuICAgICAgICAgICAgcHJvY2Vzc2VkRGF0YUFycmF5LnB1c2goZm91bmRyeS51dGlscy5kdXBsaWNhdGUoZGF0YSkpXG4gICAgICAgICAgICBhcmNoZXR5cGUgPSB0cnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnb2NjdXBhdGlvbic6XG4gICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2NoYXJhY3RlcicpIHtcbiAgICAgICAgICAgIC8vIE9jY3VwYXRpb24gb25seSBmb3IgUENzXG4gICAgICAgICAgICBpZiAodGhpcy5vY2N1cGF0aW9uKSB7XG4gICAgICAgICAgICAgIGxldCByZXNldE9jY3VwYXRpb24gPSBmYWxzZVxuICAgICAgICAgICAgICBhd2FpdCBEaWFsb2cuY29uZmlybSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZXNldE9jY3VwYXRpb24nKSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBgPHA+JHtnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlJlc2V0T2NjdXBhdGlvbkhpbnQnLCB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWVcbiAgICAgICAgICAgICAgICB9KX08L3A+YCxcbiAgICAgICAgICAgICAgICB5ZXM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlc2V0T2NjdXBhdGlvbiA9IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlZmF1bHRZZXM6IGZhbHNlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIGlmIChyZXNldE9jY3VwYXRpb24pIGF3YWl0IHRoaXMucmVzZXRPY2N1cGF0aW9uKClcbiAgICAgICAgICAgICAgZWxzZSByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29udmVydCBDb0NJRHMgdG8gaXRlbXNcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLnNraWxscyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5leHBhbmRJdGVtQXJyYXkoeyBpdGVtTGlzdDogZGF0YS5zeXN0ZW0uc2tpbGxzIH0pXG5cbiAgICAgICAgICAgIGlmIChOdW1iZXIoZGF0YS5zeXN0ZW0uY3JlZGl0UmF0aW5nLm1heCkgPiAwKSB7XG4gICAgICAgICAgICAgIC8vIE9jY3VwYXRpb25zIHdpdGggYSBjcmVkaXQgcmF0aW5nIHJlcXVpcmUgYSBjcmVkaXQgcmF0aW5nIHNraWxsXG4gICAgICAgICAgICAgIGNvbnN0IGFjdG9yQ3JlZGl0UmF0aW5nID0gZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZpbmRDb2NJZEluTGlzdCgnaS5za2lsbC5jcmVkaXQtcmF0aW5nJywgZGF0YS5zeXN0ZW0uc2tpbGxzKVxuICAgICAgICAgICAgICBpZiAoYWN0b3JDcmVkaXRSYXRpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5maW5kQ29jSWRJbkxpc3QoJ2kuc2tpbGwuY3JlZGl0LXJhdGluZycsIHRoaXMuaXRlbXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uc2tpbGxzLnB1c2goJ2kuc2tpbGwuY3JlZGl0LXJhdGluZycpXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMgPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZXhwYW5kSXRlbUFycmF5KHsgaXRlbUxpc3Q6IGRhdGEuc3lzdGVtLnNraWxscyB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZpbmRDb2NJZEluTGlzdCgnaS5za2lsbC5jcmVkaXQtcmF0aW5nJywgdGhpcy5pdGVtcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMucHVzaChhY3RvckNyZWRpdFJhdGluZ1swXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2VsZWN0IGNoYXJhY3RlcmlzdGljXG4gICAgICAgICAgICBjb25zdCBwb2ludHNEaWFsb2dEYXRhID0ge31cbiAgICAgICAgICAgIHBvaW50c0RpYWxvZ0RhdGEuY2hhcmFjdGVyaXN0aWNzID0gZGF0YS5zeXN0ZW0ub2NjdXBhdGlvblNraWxsUG9pbnRzXG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwXG4gICAgICAgICAgICBsZXQgb3B0aW9uYWxDaGFyID0gZmFsc2VcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LmVudHJpZXMoXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLm9jY3VwYXRpb25Ta2lsbFBvaW50c1xuICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBlbnRyeVxuICAgICAgICAgICAgICBjb25zdCBjaGFyID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYyhrZXkpXG4gICAgICAgICAgICAgIHBvaW50c0RpYWxvZ0RhdGEuY2hhcmFjdGVyaXN0aWNzW2tleV0ubmFtZSA9IGNoYXIubGFiZWxcbiAgICAgICAgICAgICAgcG9pbnRzRGlhbG9nRGF0YS5jaGFyYWN0ZXJpc3RpY3Nba2V5XS52YWx1ZSA9IGNoYXIudmFsdWVcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzRGlhbG9nRGF0YS5jaGFyYWN0ZXJpc3RpY3Nba2V5XS50b3RhbCA9XG4gICAgICAgICAgICAgICAgICBjaGFyLnZhbHVlICpcbiAgICAgICAgICAgICAgICAgIE51bWJlcihwb2ludHNEaWFsb2dEYXRhLmNoYXJhY3RlcmlzdGljc1trZXldLm11bHRpcGxpZXIpXG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZS5vcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgdG90YWwgKz0gcG9pbnRzRGlhbG9nRGF0YS5jaGFyYWN0ZXJpc3RpY3Nba2V5XS50b3RhbFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvcHRpb25hbENoYXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludHNEaWFsb2dEYXRhLnRvdGFsID0gdG90YWxcbiAgICAgICAgICAgIGlmIChvcHRpb25hbENoYXIpIHtcbiAgICAgICAgICAgICAgLy8gSXMgdGhlcmUgYW55IG9wdGlvbmFsIGNoYXIgdG8gY2hvb3NlIGZvciBwb2ludHMgY2FsYyA/XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFBvaW50U2VsZWN0RGlhbG9nLmNyZWF0ZShwb2ludHNEaWFsb2dEYXRhKVxuICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIC8vIFBvaW50IG5vdCBzZWxlY3RlZCA9PiBleGl0LlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgb3B0aW9uYWwgc2tpbGxzXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZGF0YS5zeXN0ZW0uZ3JvdXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAvLyBDb252ZXJ0IENvQ0lkcyB0byBpdGVtc1xuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5ncm91cHNbaW5kZXhdLnNraWxscyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5leHBhbmRJdGVtQXJyYXkoeyBpdGVtTGlzdDogZGF0YS5zeXN0ZW0uZ3JvdXBzW2luZGV4XS5za2lsbHMgfSlcblxuICAgICAgICAgICAgICBjb25zdCBkaWFsb2dEYXRhID0ge31cbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS5za2lsbHMgPSBbXVxuICAgICAgICAgICAgICBkaWFsb2dEYXRhLnR5cGUgPSAnb2NjdXBhdGlvbidcbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS5hY3RvcklkID0gdGhpcy5pZFxuICAgICAgICAgICAgICBkaWFsb2dEYXRhLm9wdGlvbnNDb3VudCA9IE51bWJlcihkYXRhLnN5c3RlbS5ncm91cHNbaW5kZXhdLm9wdGlvbnMpXG4gICAgICAgICAgICAgIGRpYWxvZ0RhdGEudGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2tpbGxTZWxlY3Rpb25XaW5kb3cnKVxuXG4gICAgICAgICAgICAgIC8vIFNlbGVjdCBvbmx5IHNraWxscyB0aGF0IGFyZSBub3QgcHJlc2VudCBvciBhcmUgbm90IGZsYWdnZWQgYXMgb2NjdXBhdGlvbi5cbiAgICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkYXRhLnN5c3RlbS5ncm91cHNbaW5kZXhdLnNraWxscykge1xuICAgICAgICAgICAgICAgIGlmIChDb0M3SXRlbS5pc0FueVNwZWModmFsdWUpKSBkaWFsb2dEYXRhLnNraWxscy5wdXNoKHZhbHVlKVxuICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgYSBnZW5lcmljIHNwZWMgd2UgYWx3YXlzIGFkZCBpdFxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLml0ZW1zLmZpbmQoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09IHZhbHVlLm5hbWUgJiYgaXRlbS50eXBlID09PSAnc2tpbGwnXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgaWYgKCFza2lsbCB8fCAhc2tpbGwuc3lzdGVtLmZsYWdzPy5vY2N1cGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHNraWxsIHdhcyBhZGRlZCB0byBza2lsbCBsaXN0IHByZXZpb3VzbHksIHJlbW92ZSBpdFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHJlYWR5U2VsZWN0ZWRTa2lsbCA9IGRhdGEuc3lzdGVtLnNraWxscy5maW5kKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09IHZhbHVlLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbHJlYWR5U2VsZWN0ZWRTa2lsbCkgZGlhbG9nRGF0YS5za2lsbHMucHVzaCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdzIG5vbmUsIGRvIG5vdGhpbmcuXG4gICAgICAgICAgICAgIGlmIChkaWFsb2dEYXRhLnNraWxscy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoZGlhbG9nRGF0YS5za2lsbHMubGVuZ3RoIDw9IGRpYWxvZ0RhdGEub3B0aW9uc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGlzIGxlc3Mgc2tpbGwgdGhhbiBvcHRpb25zLCBhZGQgdGhlbSBhbGwuXG4gICAgICAgICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oXG4gICAgICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5mb0xlc3NTa2lsbFRoYW5PcHRpb25zJywge1xuICAgICAgICAgICAgICAgICAgICAgIHNraWxsQ291bnQ6IGRpYWxvZ0RhdGEuc2tpbGxzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zQ291bnQ6IGRpYWxvZ0RhdGEub3B0aW9uc0NvdW50XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAvLyBhd2FpdCB0aGlzLmFkZFVuaXF1ZUl0ZW1zKCBkaWFsb2dEYXRhLnNraWxscywgJ29jY3VwYXRpb24nKTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IENvQzdJdGVtLm1lcmdlT3B0aW9uYWxTa2lsbHMoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnNraWxscyxcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nRGF0YS5za2lsbHNcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnNraWxscyA9IG1lcmdlZFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciBza2lsbCBzZWxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGF3YWl0IFNraWxsU2VsZWN0RGlhbG9nLmNyZWF0ZShkaWFsb2dEYXRhKVxuICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RlZCkgcmV0dXJuXG4gICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBDb0M3SXRlbS5tZXJnZU9wdGlvbmFsU2tpbGxzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMgPSBtZXJnZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkluZm9BbGxTa2lsbHNBbHJlYWR5U2VsZWN0ZWQnKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgZXh0cmEgc2tpbGxzXG4gICAgICAgICAgICBpZiAoTnVtYmVyKGRhdGEuc3lzdGVtLnBlcnNvbmFsKSkge1xuICAgICAgICAgICAgICBjb25zdCBkaWFsb2dEYXRhID0ge31cbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS5za2lsbHMgPSBbXVxuICAgICAgICAgICAgICBkaWFsb2dEYXRhLnR5cGUgPSAnb2NjdXBhdGlvbidcbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS5hY3RvcklkID0gdGhpcy5pZFxuICAgICAgICAgICAgICBkaWFsb2dEYXRhLm9wdGlvbnNDb3VudCA9IE51bWJlcihkYXRhLnN5c3RlbS5wZXJzb25hbClcbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS50aXRsZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU2VsZWN0UGVyc29uYWxTa2lsbHMnLCB7XG4gICAgICAgICAgICAgICAgbnVtYmVyOiBOdW1iZXIoZGF0YS5zeXN0ZW0ucGVyc29uYWwpXG4gICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgLy8gU2VsZWN0IG9ubHkgc2tpbGxzIHRoYXQgYXJlIG5vdCBwcmVzZW50IG9yIGFyZSBub3QgZmxhZ2dlZCBhcyBvY2N1cGF0aW9uLlxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5za2lsbHMpIHtcbiAgICAgICAgICAgICAgICAvLyBTZWxlY3QgYWxsIHNraWxscyB0aGF0IGFyZSBub3QgYWxyZWFkeSBmbGFnZ2VkIGFzIG9jY3VwYXRpb24sIGNhbiBoYXZlIGFkanVzdG1lbnRzIGFuZCBYUC5cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAhcy5zeXN0ZW0uZmxhZ3Mub2NjdXBhdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgIXMuc3lzdGVtLnByb3BlcnRpZXMubm9hZGp1c3RtZW50cyAmJlxuICAgICAgICAgICAgICAgICAgIXMuc3lzdGVtLnByb3BlcnRpZXMubm94cGdhaW5cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIC8vIGlmIHNraWxsIGFscmVhZHkgc2VsZWN0ZWQgZG9uJ3QgYWRkIGl0XG4gICAgICAgICAgICAgICAgICBjb25zdCBhbHJlYWR5U2VsZWN0ZWRTa2lsbCA9IGRhdGEuc3lzdGVtLnNraWxscy5maW5kKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09PSBzLm5hbWVcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICBpZiAoIWFscmVhZHlTZWxlY3RlZFNraWxsKSBkaWFsb2dEYXRhLnNraWxscy5wdXNoKHMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBub25lLCBkbyBub3RoaW5nLlxuICAgICAgICAgICAgICBpZiAoZGlhbG9nRGF0YS5za2lsbHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpYWxvZ0RhdGEuc2tpbGxzLmxlbmd0aCA8PSBkaWFsb2dEYXRhLm9wdGlvbnNDb3VudCkge1xuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBpcyBsZXNzIHNraWxsIHRoYW4gb3B0aW9ucywgYWRkIHRoZW0gYWxsLlxuICAgICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkluZm9MZXNzU2tpbGxUaGFuT3B0aW9ucycsIHtcbiAgICAgICAgICAgICAgICAgICAgICBza2lsbENvdW50OiBkaWFsb2dEYXRhLnNraWxscy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0NvdW50OiBkaWFsb2dEYXRhLm9wdGlvbnNDb3VudFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgLy8gYXdhaXQgdGhpcy5hZGRVbmlxdWVJdGVtcyggZGlhbG9nRGF0YS5za2lsbHMsICdvY2N1cGF0aW9uJyk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBDb0M3SXRlbS5tZXJnZU9wdGlvbmFsU2tpbGxzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMsXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ0RhdGEuc2tpbGxzXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMgPSBtZXJnZWRcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gV2FpdCBmb3Igc2tpbGwgc2VsZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBhd2FpdCBTa2lsbFNlbGVjdERpYWxvZy5jcmVhdGUoZGlhbG9nRGF0YSkgLy8gRGlhbG9nIGRhdGEgYnVnID8/P1xuICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RlZCkgcmV0dXJuXG4gICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBDb0M3SXRlbS5tZXJnZU9wdGlvbmFsU2tpbGxzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMgPSBtZXJnZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkluZm9BbGxTa2lsbHNBbHJlYWR5U2VsZWN0ZWQnKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgYWxsIHNraWxsc1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRVbmlxdWVJdGVtcyhkYXRhLnN5c3RlbS5za2lsbHMsICdvY2N1cGF0aW9uJylcbiAgICAgICAgICAgIC8vIENyZWRpdCByYXRpbmcgaXMgYWx3YXlzIHBhcnQgb2Ygb2NjdXBhdGlvblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVkaXRSYXRpbmdTa2lsbD8uc2V0SXRlbUZsYWcoJ29jY3VwYXRpb24nKVxuICAgICAgICAgICAgLy8gc2V0dGluZyBpdCB0byBtaW4gY3JlZGl0IHJhdGluZ1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVkaXRSYXRpbmdTa2lsbD8udXBkYXRlKHtcbiAgICAgICAgICAgICAgJ3N5c3RlbS5hZGp1c3RtZW50cy5vY2N1cGF0aW9uJzogTnVtYmVyKGRhdGEuc3lzdGVtLmNyZWRpdFJhdGluZy5taW4pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBwcm9jZXNzZWREYXRhQXJyYXkucHVzaChmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShkYXRhKSlcbiAgICAgICAgICAgIG9jY3VwYXRpb24gPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwcm9jZXNzZWREYXRhQXJyYXkucHVzaChmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShkYXRhKSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3NlZERhdGFBcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBjb25zdCBwcm9jZXNzZWQgPSBhd2FpdCBzdXBlci5jcmVhdGVFbWJlZGRlZERvY3VtZW50cyhcbiAgICAgIGVtYmVkZGVkTmFtZSxcbiAgICAgIHByb2Nlc3NlZERhdGFBcnJheSxcbiAgICAgIG9wdGlvbnNcbiAgICApXG5cbiAgICBpZiAoYXJjaGV0eXBlKSB7XG4gICAgICAvLyBzZXR0aW5nIHBvaW50c1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLmRldmVsb3BtZW50LmFyY2hldHlwZSc6IHRoaXMuYXJjaGV0eXBlUG9pbnRzXG4gICAgICB9KVxuICAgICAgSG9va3MuY2FsbCgnYXJjaGV0eXBlRmluaXNoZWRDb0M3JylcbiAgICB9XG4gICAgaWYgKG9jY3VwYXRpb24pIHtcbiAgICAgIC8vIHNldHRpbmcgcG9pbnRzXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICdzeXN0ZW0uZGV2ZWxvcG1lbnQub2NjdXBhdGlvbic6IHRoaXMub2NjdXBhdGlvblBvaW50cyxcbiAgICAgICAgJ3N5c3RlbS5kZXZlbG9wbWVudC5wZXJzb25hbCc6IHRoaXMucGVyc29uYWxQb2ludHNcbiAgICAgIH0pXG4gICAgICBIb29rcy5jYWxsKCdvY2N1cGF0aW9uRmluaXNoZWRDb0M3JylcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkXG4gIH1cblxuICAvLyBnZXRTa2lsbElkQnlOYW1lKCBza2lsbE5hbWUpe1xuICAvLyAgIGxldCBpZCA9IG51bGw7XG4gIC8vICAgIGZvciAoY29uc3QgW21hcCwga2V5LCB2YWx1ZV0gb2YgdGhpcy5pdGVtcykge1xuICAvLyAgICAgaWYoIHZhbHVlLm5hbWUgPT0gc2tpbGxOYW1lKSBpZCA9IHZhbHVlLmlkO1xuICAvLyAgIH07XG5cbiAgLy8gICByZXR1cm4gaWQ7XG4gIC8vIH1cblxuICBnZXRJdGVtSWRCeU5hbWUgKGl0ZW1OYW1lKSB7XG4gICAgbGV0IGlkID0gbnVsbFxuICAgIGNvbnN0IG5hbWUgPSBpdGVtTmFtZS5tYXRjaCgvXFwoKFteKV0rKVxcKS8pXG4gICAgICA/IGl0ZW1OYW1lLm1hdGNoKC9cXCgoW14pXSspXFwpLylbMV1cbiAgICAgIDogaXRlbU5hbWVcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgQ29DN0l0ZW0uZ2V0TmFtZVdpdGhvdXRTcGVjKHZhbHVlKS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICkge1xuICAgICAgICBpZCA9IHZhbHVlLmlkXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICBnZXRJdGVtc0J5TmFtZSAoaXRlbU5hbWUpIHtcbiAgICBjb25zdCBpdGVtTGlzdCA9IFtdXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAodmFsdWUubmFtZSA9PT0gaXRlbU5hbWUpIGl0ZW1MaXN0LnB1c2godmFsdWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1MaXN0XG4gIH1cblxuICAvKipcbiAgICpcbiAgICpcbiAgICovXG4gIGdldFNraWxsc0J5TmFtZSAoc2tpbGxOYW1lKSB7XG4gICAgLy8gVE9ETyA6IG1vcmUgYWdncmVzc2l2ZSBmaW5kaW5nIGluY2x1ZGluZyBzcGVjc1xuICAgIGNvbnN0IHNraWxsTGlzdCA9IFtdXG4gICAgY29uc3QgbmFtZSA9IHNraWxsTmFtZS5tYXRjaCgvXFwoKFteKV0rKVxcKS8pXG4gICAgICA/IHNraWxsTmFtZS5tYXRjaCgvXFwoKFteKV0rKVxcKS8pWzFdXG4gICAgICA6IHNraWxsTmFtZVxuXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAoXG4gICAgICAgIChcbiAgICAgICAgICBDb0M3SXRlbS5nZXROYW1lV2l0aG91dFNwZWModmFsdWUpLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIHZhbHVlLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmlkID09PSBza2lsbE5hbWVcbiAgICAgICAgKSAmJlxuICAgICAgICB2YWx1ZS50eXBlID09PSAnc2tpbGwnXG4gICAgICApIHtcbiAgICAgICAgc2tpbGxMaXN0LnB1c2godmFsdWUpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBza2lsbExpc3RcbiAgfVxuXG4gIGdldEZpcnN0U2tpbGxCeUNvQ0lEIChjb2NpZCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbmQoaSA9PiBpLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmlkID09PSBjb2NpZClcbiAgfVxuXG4gIC8vIHBhcnNlRm9ybXVsYSAoZm9ybXVsYSkge1xuICAvLyAgIGxldCBwYXJzZWRGb3JtdWxhID0gZm9ybXVsYVxuICAvLyAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENPQzcuZm9ybXVsYS5hY3RvcikpIHtcbiAgLy8gICAgIHBhcnNlZEZvcm11bGEgPSBwYXJzZWRGb3JtdWxhLnJlcGxhY2Uoa2V5LCB2YWx1ZSlcbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHBhcnNlZEZvcm11bGFcbiAgLy8gfVxuXG4gIHBhcnNlQ2hhcmFjdGVyaXN0aWNzICgpIHtcbiAgICBjb25zdCBwYXJzZWQgPSB7fVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENPQzcuZm9ybXVsYS5hY3RvcikpIHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnQCcpICYmIHZhbHVlLnN0YXJ0c1dpdGgoJ3RoaXMuJykpIHtcbiAgICAgICAgcGFyc2VkW2tleS5zdWJzdHJpbmcoMSldID0gZm91bmRyeS51dGlscy5nZXRQcm9wZXJ0eSh0aGlzLCB2YWx1ZS5zdWJzdHJpbmcoNSkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWRcbiAgfVxuXG4gIHN0YXRpYyBnZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24gKCkge1xuICAgIGNvbnN0IGNoYXJhY3RlcmlzdGljcyA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoXG4gICAgICBnYW1lLnN5c3RlbS50ZW1wbGF0ZS5BY3Rvci50ZW1wbGF0ZXMuY2hhcmFjdGVyaXN0aWNzLmNoYXJhY3RlcmlzdGljc1xuICAgICkpIHtcbiAgICAgIGNoYXJhY3RlcmlzdGljcy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICBzaG9ydE5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5zaG9ydCksXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUubGFiZWwpXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gY2hhcmFjdGVyaXN0aWNzXG4gIH1cblxuICBnZXRDaGFyYWN0ZXJpc3RpYyAoY2hhck5hbWUpIHtcbiAgICBpZiAodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgICAgdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzXG4gICAgICApKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUuc2hvcnQpLnRvTG93ZXJDYXNlKCkgPT09XG4gICAgICAgICAgICBjaGFyTmFtZS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlLmxhYmVsKS50b0xvd2VyQ2FzZSgpID09PVxuICAgICAgICAgICAgY2hhck5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGtleSA9PT0gY2hhck5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgc2hvcnROYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUuc2hvcnQpLFxuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5sYWJlbCksXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUudmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldEF0dHJpYnV0ZSAoYXR0cmliTmFtZSkge1xuICAgIGlmIChcbiAgICAgIFsnbGNrJywgJ2x1Y2snLCBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTHVjaycpLnRvTG93ZXJDYXNlKCldLmluY2x1ZGVzKFxuICAgICAgICBhdHRyaWJOYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogJ2xjaycsXG4gICAgICAgIHNob3J0TmFtZTogJ2x1Y2snLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkx1Y2snKSxcbiAgICAgICAgdmFsdWU6IHRoaXMuc3lzdGVtLmF0dHJpYnMubGNrLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChcbiAgICAgIFtcbiAgICAgICAgJ3NhbicsXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TQU4nKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2FuaXR5JykudG9Mb3dlckNhc2UoKVxuICAgICAgXS5pbmNsdWRlcyhhdHRyaWJOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6ICdzYW4nLFxuICAgICAgICBzaG9ydE5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TQU4nKSxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHknKSxcbiAgICAgICAgdmFsdWU6IHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBhc3luYyBydW5Sb2xsIChvcHRpb25zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2FyZFR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUxcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnByZXZlbnRTdGFuZGJ5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgb3B0aW9ucy5wcmV2ZW50U3RhbmRieSA9IHRydWVcbiAgICB9XG4gICAgb3B0aW9ucy5hY3RvciA9IHRoaXNcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgQ29DN0NoYXRNZXNzYWdlLnRyaWdnZXIob3B0aW9ucylcbiAgICByZXR1cm4gcmVzdWx0c1xuICB9XG5cbiAgZ2V0IG9jY3VwYXRpb24gKCkge1xuICAgIGNvbnN0IG9jY3VwYXRpb24gPSB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0udHlwZSA9PT0gJ29jY3VwYXRpb24nKVxuICAgIHJldHVybiBvY2N1cGF0aW9uWzBdXG4gIH1cblxuICBnZXQgYXJjaGV0eXBlICgpIHtcbiAgICBjb25zdCBhcmNoZXR5cGUgPSB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0udHlwZSA9PT0gJ2FyY2hldHlwZScpXG4gICAgcmV0dXJuIGFyY2hldHlwZVswXVxuICB9XG5cbiAgYXN5bmMgcmVzZXRPY2N1cGF0aW9uIChlcmFzZU9sZCA9IHRydWUpIHtcbiAgICBpZiAoZXJhc2VPbGQpIHtcbiAgICAgIGNvbnN0IG9jY3VwYXRpb25Ta2lsbCA9IHRoaXMuaXRlbXMuZmlsdGVyKGl0ZW0gPT5cbiAgICAgICAgaXRlbS5nZXRJdGVtRmxhZygnb2NjdXBhdGlvbicpXG4gICAgICApXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb2NjdXBhdGlvblNraWxsLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBhd2FpdCBvY2N1cGF0aW9uU2tpbGxbaW5kZXhdLnVuc2V0SXRlbUZsYWcoJ29jY3VwYXRpb24nKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5vY2N1cGF0aW9uKSBhd2FpdCB0aGlzLm9jY3VwYXRpb24uZGVsZXRlKClcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZGV2ZWxvcG1lbnQub2NjdXBhdGlvbic6IG51bGwgfSlcbiAgfVxuXG4gIGFzeW5jIHJlc2V0QXJjaGV0eXBlIChlcmFzZU9sZCA9IHRydWUpIHtcbiAgICBpZiAoZXJhc2VPbGQpIHtcbiAgICAgIGNvbnN0IGFyY2hldHlwZVNraWxsID0gdGhpcy5pdGVtcy5maWx0ZXIoaXRlbSA9PlxuICAgICAgICBpdGVtLmdldEl0ZW1GbGFnKCdhcmNoZXR5cGUnKVxuICAgICAgKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFyY2hldHlwZVNraWxsLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBhd2FpdCBhcmNoZXR5cGVTa2lsbFtpbmRleF0udW5zZXRJdGVtRmxhZygnYXJjaGV0eXBlJylcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuYXJjaGV0eXBlKSBhd2FpdCB0aGlzLmFyY2hldHlwZS5kZWxldGUoKVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5kZXZlbG9wbWVudC5hcmNoZXR5cGUnOiBudWxsIH0pXG4gIH1cblxuICBnZXQgbHVjayAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnM/Lmxjaz8udmFsdWUpXG4gIH1cblxuICBhc3luYyBzZXRMdWNrICh2YWx1ZSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYXR0cmlicy5sY2sudmFsdWUnOiB2YWx1ZSB9KVxuICB9XG5cbiAgYXN5bmMgc3BlbmRMdWNrIChhbW91bnQpIHtcbiAgICBhbW91bnQgPSBwYXJzZUludChhbW91bnQpXG4gICAgaWYgKCEodGhpcy5sdWNrID49IGFtb3VudCkpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0aGlzLnNldEx1Y2sodGhpcy5sdWNrIC0gYW1vdW50KVxuICB9XG5cbiAgZ2V0IGhwICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC52YWx1ZSlcbiAgfVxuXG4gIGdldCByYXdIcE1heCAoKSB7XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMuaHAuYXV0bykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Muc2l6LnZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmNvbi52YWx1ZSAhPSBudWxsXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIENvQ0FjdG9yLmhwRnJvbUNoYXJhY3RlcmlzdGljcyh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MsIHRoaXMudHlwZSlcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXgpXG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXgpXG4gIH1cblxuICBnZXQgaHBNYXggKCkge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heClcbiAgfVxuXG4gIGFzeW5jIF9zZXRIcCAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDBcbiAgICBpZiAodmFsdWUgPiB0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heCkge1xuICAgICAgdmFsdWUgPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heClcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5hdHRyaWJzLmhwLnZhbHVlJzogdmFsdWUgfSlcbiAgfVxuXG4gIGFzeW5jIGFkZFVuaXF1ZUl0ZW1zIChza2lsbExpc3QsIGZsYWcgPSBudWxsKSB7XG4gICAgY29uc3QgcHJvY2Vzc2VkID0gW11cbiAgICBmb3IgKGxldCBza2lsbCBvZiBza2lsbExpc3QpIHtcbiAgICAgIHNraWxsID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoc2tpbGwpXG4gICAgICBpZiAoZmxhZykge1xuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChza2lsbC5zeXN0ZW0sICdmbGFncycpKSB7XG4gICAgICAgICAgc2tpbGwuc3lzdGVtLmZsYWdzID0ge31cbiAgICAgICAgfVxuICAgICAgICBza2lsbC5zeXN0ZW0uZmxhZ3NbZmxhZ10gPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoQ29DN0l0ZW0uaXNBbnlTcGVjKHNraWxsKSkge1xuICAgICAgICBwcm9jZXNzZWQucHVzaChza2lsbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGl0ZW1JZCA9IHRoaXMuZ2V0SXRlbUlkQnlOYW1lKHNraWxsLm5hbWUpXG4gICAgICAgIGlmICghaXRlbUlkKSB7XG4gICAgICAgICAgcHJvY2Vzc2VkLnB1c2goc2tpbGwpXG4gICAgICAgIH0gZWxzZSBpZiAoZmxhZykge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zLmdldChpdGVtSWQpXG4gICAgICAgICAgYXdhaXQgaXRlbS5zZXRJdGVtRmxhZyhmbGFnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIHByb2Nlc3NlZCwge1xuICAgICAgcmVuZGVyU2hlZXQ6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGFkZEl0ZW1zIChpdGVtTGlzdCwgZmxhZyA9IG51bGwpIHtcbiAgICBjb25zdCBwcm9jZXNzZWQgPSBbXVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtTGlzdCkge1xuICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgaWYgKCFpdGVtLnN5c3RlbS5mbGFncykgaXRlbS5zeXN0ZW0uZmxhZ3MgPSB7fVxuICAgICAgICBpdGVtLnN5c3RlbS5mbGFnc1tmbGFnXSA9IHRydWVcbiAgICAgIH1cbiAgICAgIHByb2Nlc3NlZC5wdXNoKGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGl0ZW0pKVxuICAgIH1cbiAgICBpZiAocHJvY2Vzc2VkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgcHJvY2Vzc2VkLCB7XG4gICAgICByZW5kZXJTaGVldDogZmFsc2VcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgYWRkVW5pcXVlSXRlbSAoc2tpbGwsIGZsYWcgPSBudWxsKSB7XG4gICAgY29uc3QgaXRlbUlkID0gdGhpcy5nZXRJdGVtSWRCeU5hbWUoc2tpbGwubmFtZSlcbiAgICBpZiAoIWl0ZW1JZCkge1xuICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgaWYgKCFza2lsbC5zeXN0ZW0uZmxhZ3MpIHNraWxsLnN5c3RlbS5mbGFncyA9IHt9XG4gICAgICAgIHNraWxsLnN5c3RlbS5mbGFnc1tmbGFnXSA9IHRydWVcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbc2tpbGxdLCB7XG4gICAgICAgIHJlbmRlclNoZWV0OiBmYWxzZVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKGZsYWcpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zLmdldChpdGVtSWQpXG4gICAgICBhd2FpdCBpdGVtLnNldEl0ZW1GbGFnKGZsYWcpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHJhd01wTWF4ICgpIHtcbiAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5tcC5hdXRvKSB7XG4gICAgICBpZiAodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvdy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBDb0NBY3Rvci5tcEZyb21DaGFyYWN0ZXJpc3RpY3ModGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKVxuICAgICAgfSBlbHNlIHJldHVybiAwXG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLm1wLm1heClcbiAgfVxuXG4gIGdldFJlYXNvblNhbkxvc3MgKHNhblJlYXNvbikge1xuICAgIGlmICh0eXBlb2Ygc2FuUmVhc29uID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zeXN0ZW0uc2FuaXR5TG9zc0V2ZW50cy5maWx0ZXIoXG4gICAgICAgICAgciA9PiByLnR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gc2FuUmVhc29uLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgICAgKVswXSA/PyB7IHR5cGU6ICcnLCB0b3RhbExvc3M6IDAsIGltbXVuaXR5OiBmYWxzZSB9XG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6ICcnLCB0b3RhbExvc3M6IDAsIGltbXVuaXR5OiBmYWxzZSB9XG4gIH1cblxuICBzYW5Mb3N0VG9SZWFzb24gKHNhblJlYXNvbikge1xuICAgIGlmIChzYW5SZWFzb24pIHtcbiAgICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudCA9IHRoaXMuZ2V0UmVhc29uU2FuTG9zcyhzYW5SZWFzb24pXG4gICAgICByZXR1cm4gc2FuaXR5TG9zc0V2ZW50LnRvdGFsTG9zc1xuICAgIH1cbiAgICByZXR1cm4gMFxuICB9XG5cbiAgc2FuTG9zc1JlYXNvbkVuY291bnRlcmVkIChzYW5SZWFzb24pIHtcbiAgICBpZiAoc2FuUmVhc29uKSB7XG4gICAgICBjb25zdCBzYW5pdHlMb3NzRXZlbnQgPSB0aGlzLmdldFJlYXNvblNhbkxvc3Moc2FuUmVhc29uKVxuICAgICAgcmV0dXJuIHNhbml0eUxvc3NFdmVudC50eXBlICE9PSAnJ1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHNldFJlYXNvblNhbkxvc3MgKHNhblJlYXNvbiwgc2FuTG9zcykge1xuICAgIGlmICh0eXBlb2Ygc2FuUmVhc29uID09PSAnc3RyaW5nJyAmJiBzYW5SZWFzb24gIT09ICcnKSB7XG4gICAgICBjb25zdCBzYW5pdHlMb3NzRXZlbnRzID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0uc2FuaXR5TG9zc0V2ZW50cylcbiAgICAgIGNvbnN0IGluZGV4ID0gc2FuaXR5TG9zc0V2ZW50cy5maW5kSW5kZXgoXG4gICAgICAgIHIgPT4gci50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHNhblJlYXNvbi50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICApXG4gICAgICBpZiAoc2FuTG9zcyA+IDApIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHNhbml0eUxvc3NFdmVudHMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBzYW5SZWFzb24sXG4gICAgICAgICAgICB0b3RhbExvc3M6IHNhbkxvc3MsXG4gICAgICAgICAgICBpbW11bml0eTogZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNhbml0eUxvc3NFdmVudHNbaW5kZXhdLnRvdGFsTG9zcyArPSBzYW5Mb3NzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBzYW5pdHlMb3NzRXZlbnRzLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgc2FuaXR5TG9zc0V2ZW50cy5zb3J0KGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgICAgICAgIHJldHVybiBsZWZ0LnR5cGUubG9jYWxlQ29tcGFyZShyaWdodC50eXBlKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5zYW5pdHlMb3NzRXZlbnRzJzogc2FuaXR5TG9zc0V2ZW50c1xuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBtYXhMb3NzVG9TYW5SZWFzb24gKHNhblJlYXNvbiwgc2FuTWF4Rm9ybXVsYSkge1xuICAgIGNvbnN0IHNhbk1heCA9IG5ldyBSb2xsKHNhbk1heEZvcm11bGEudG9TdHJpbmcoKSkuZXZhbHVhdGUoe1xuICAgICAgbWF4aW1pemU6IHRydWVcbiAgICB9KS50b3RhbFxuICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudCA9IHRoaXMuZ2V0UmVhc29uU2FuTG9zcyhzYW5SZWFzb24pXG4gICAgaWYgKHNhbml0eUxvc3NFdmVudC5pbW11bml0eSkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIHNhbk1heCAtIHNhbml0eUxvc3NFdmVudC50b3RhbExvc3MpXG4gIH1cblxuICBhc3luYyBsb29zZVNhbiAoc2FuUmVhc29uLCBzYW5Mb3NzKSB7XG4gICAgY29uc3Qgc2FuaXR5TG9zc0V2ZW50ID0gdGhpcy5nZXRSZWFzb25TYW5Mb3NzKHNhblJlYXNvbilcbiAgICBpZiAoIXNhbml0eUxvc3NFdmVudC5pbW11bml0eSkge1xuICAgICAgYXdhaXQgdGhpcy5zZXRTYW4odGhpcy5zYW4gLSBzYW5Mb3NzKVxuICAgICAgdGhpcy5zZXRSZWFzb25TYW5Mb3NzKHNhblJlYXNvbiwgc2FuTG9zcylcbiAgICAgIHJldHVybiBzYW5Mb3NzXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cblxuICBzYW5Mb3NzIChjaGVja1Bhc3NlZCkge1xuICAgIGlmIChjaGVja1Bhc3NlZCkgcmV0dXJuIHRoaXMuc2FuTG9zc0NoZWNrUGFzc2VkXG4gICAgcmV0dXJuIHRoaXMuc2FuTG9zc0NoZWNrRmFpbGxlZFxuICB9XG5cbiAgZ2V0IHNhbkxvc3NDaGVja1Bhc3NlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLnNwZWNpYWw/LnNhbkxvc3M/LmNoZWNrUGFzc2VkXG4gIH1cblxuICBnZXQgc2FuTG9zc0NoZWNrRmFpbGxlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLnNwZWNpYWw/LnNhbkxvc3M/LmNoZWNrRmFpbGxlZFxuICB9XG5cbiAgZ2V0IHNhbkxvc3NNYXggKCkge1xuICAgIGlmICh0aGlzLnNhbkxvc3NDaGVja0ZhaWxsZWQpIHtcbiAgICAgIGlmICghaXNOYU4oTnVtYmVyKHRoaXMuc2FuTG9zc0NoZWNrRmFpbGxlZCkpKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIodGhpcy5zYW5Mb3NzQ2hlY2tGYWlsbGVkKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBSb2xsKHRoaXMuc2FuTG9zc0NoZWNrRmFpbGxlZCkuZXZhbHVhdGUoe1xuICAgICAgICBtYXhpbWl6ZTogdHJ1ZVxuICAgICAgfSkudG90YWxcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIGdldCBzYW5Mb3NzTWluICgpIHtcbiAgICBpZiAodGhpcy5zYW5Mb3NzQ2hlY2tQYXNzZWQpIHtcbiAgICAgIGlmICghaXNOYU4oTnVtYmVyKHRoaXMuc2FuTG9zc0NoZWNrUGFzc2VkKSkpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnNhbkxvc3NDaGVja1Bhc3NlZClcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUm9sbCh0aGlzLnNhbkxvc3NDaGVja1Bhc3NlZCkuZXZhbHVhdGUoe1xuICAgICAgICBtYXhpbWl6ZTogdHJ1ZVxuICAgICAgfSkudG90YWxcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIGdldCBkYWlseVNhbkxvc3MgKCkge1xuICAgIHJldHVybiB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbj8uZGFpbHlMb3NzIHx8IDBcbiAgfVxuXG4gIGdldCBkYWlseVNhbkxpbWl0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4/LmRhaWx5TGltaXQgfHwgMFxuICB9XG5cbiAgZ2V0IHJhd1Nhbk1heCAoKSB7XG4gICAgaWYgKCF0aGlzLnN5c3RlbS5hdHRyaWJzKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnM/LnNhbj8uYXV0bykge1xuICAgICAgaWYgKHRoaXMuY3RodWxodU15dGhvcykgcmV0dXJuIE1hdGgubWF4KDk5IC0gdGhpcy5jdGh1bGh1TXl0aG9zLCAwKVxuICAgICAgcmV0dXJuIDk5XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5tYXgpXG4gIH1cblxuICBnZXQgc2FuTWF4ICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4ubWF4KVxuICB9XG5cbiAgZ2V0IG1wICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSlcbiAgfVxuXG4gIGdldCBtcE1heCAoKSB7XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMubXAuYXV0bykge1xuICAgICAgLy8gVE9ETyBpZiBhbnkgaXMgbnVsbCBzZXQgbWF4IGJhY2sgdG8gbnVsbC5cbiAgICAgIGlmICh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MucG93LnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvdy52YWx1ZSAvIDUpXG4gICAgICB9XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5tcC5tYXgpXG4gIH1cblxuICBhc3luYyBzZXRNcCAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDBcbiAgICBpZiAodmFsdWUgPiBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLm1wLm1heCkpIHsgdmFsdWUgPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLm1wLm1heCkgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSc6IHZhbHVlIH0pXG4gIH1cblxuICBnZXQgc2FuICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUpXG4gIH1cblxuICBnZXQgaW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYygnaW50JylcbiAgfVxuXG4gIGdldCBvY2N1cGF0aW9uUG9pbnRzU3BlbnQgKCkge1xuICAgIGxldCBvY2N1cGF0aW9uUG9pbnRzID0gMFxuICAgIGZvciAoY29uc3Qgc2tpbGwgb2YgdGhpcy5za2lsbHMpIHtcbiAgICAgIGlmIChza2lsbC5zeXN0ZW0uYWRqdXN0bWVudHM/Lm9jY3VwYXRpb24pIHtcbiAgICAgICAgb2NjdXBhdGlvblBvaW50cyArPSBza2lsbC5zeXN0ZW0uYWRqdXN0bWVudHMub2NjdXBhdGlvblxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2NjdXBhdGlvblBvaW50c1xuICB9XG5cbiAgZ2V0IG9jY3VwYXRpb25Qb2ludHMgKCkge1xuICAgIGlmICghdGhpcy5vY2N1cGF0aW9uKSByZXR1cm4gMFxuICAgIGxldCBwb2ludHMgPSAwXG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgIHRoaXMub2NjdXBhdGlvbi5zeXN0ZW0ub2NjdXBhdGlvblNraWxsUG9pbnRzXG4gICAgKSkge1xuICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gZW50cnlcbiAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKGtleSlcbiAgICAgIGlmICh2YWx1ZS5zZWxlY3RlZCkge1xuICAgICAgICBwb2ludHMgKz0gY2hhci52YWx1ZSAqIE51bWJlcih2YWx1ZS5tdWx0aXBsaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzXG4gIH1cblxuICBhc3luYyByZXNldE9jY3VwYXRpb25Qb2ludHMgKCkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICdzeXN0ZW0uZGV2ZWxvcG1lbnQub2NjdXBhdGlvbic6IHRoaXMub2NjdXBhdGlvblBvaW50c1xuICAgIH0pXG4gIH1cblxuICBhc3luYyByZXNldEFyY2hldHlwZVBvaW50cyAoKSB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgJ3N5c3RlbS5kZXZlbG9wbWVudC5hcmNoZXR5cGUnOiB0aGlzLm9jY3VwYXRpb25Qb2ludHNcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgcmVzZXRQZXJzb25hbFBvaW50cyAoKSB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgJ3N5c3RlbS5kZXZlbG9wbWVudC5wZXJzb25hbCc6IHRoaXMucGVyc29uYWxQb2ludHNcbiAgICB9KVxuICB9XG5cbiAgZ2V0IGFyY2hldHlwZVBvaW50c1NwZW50ICgpIHtcbiAgICBsZXQgYXJjaGV0eXBlUG9pbnRzID0gMFxuICAgIGZvciAoY29uc3Qgc2tpbGwgb2YgdGhpcy5za2lsbHMpIHtcbiAgICAgIGlmIChza2lsbC5zeXN0ZW0uYWRqdXN0bWVudHM/LmFyY2hldHlwZSkge1xuICAgICAgICBhcmNoZXR5cGVQb2ludHMgKz0gc2tpbGwuc3lzdGVtLmFkanVzdG1lbnRzLmFyY2hldHlwZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJjaGV0eXBlUG9pbnRzXG4gIH1cblxuICBnZXQgYXJjaGV0eXBlUG9pbnRzICgpIHtcbiAgICBpZiAoIXRoaXMuYXJjaGV0eXBlKSByZXR1cm4gMFxuICAgIHJldHVybiB0aGlzLmFyY2hldHlwZS5zeXN0ZW0uYm9udXNQb2ludHNcbiAgfVxuXG4gIGdldCBleHBlcmllbmNlUG9pbnRzICgpIHtcbiAgICBsZXQgZXhwZXJpZW5jZVBvaW50cyA9IDBcbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHRoaXMuc2tpbGxzKSB7XG4gICAgICBpZiAoc2tpbGwuc3lzdGVtLmFkanVzdG1lbnRzPy5leHBlcmllbmNlKSB7XG4gICAgICAgIGV4cGVyaWVuY2VQb2ludHMgKz0gc2tpbGwuc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4cGVyaWVuY2VQb2ludHNcbiAgfVxuXG4gIGdldCBwZXJzb25hbFBvaW50c1NwZW50ICgpIHtcbiAgICBsZXQgcGVyc29uYWxQb2ludHMgPSAwXG4gICAgZm9yIChjb25zdCBza2lsbCBvZiB0aGlzLnNraWxscykge1xuICAgICAgaWYgKHNraWxsLnN5c3RlbS5hZGp1c3RtZW50cz8ucGVyc29uYWwpIHtcbiAgICAgICAgcGVyc29uYWxQb2ludHMgKz0gc2tpbGwuc3lzdGVtLmFkanVzdG1lbnRzLnBlcnNvbmFsXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwZXJzb25hbFBvaW50c1xuICB9XG5cbiAgZ2V0IHBlcnNvbmFsUG9pbnRzICgpIHtcbiAgICByZXR1cm4gMiAqIE51bWJlcih0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuaW50LnZhbHVlKVxuICB9XG5cbiAgZ2V0IGhhc0RldmVsb3BtZW50UGhhc2UgKCkge1xuICAgIGZvciAoY29uc3Qgc2tpbGwgb2YgdGhpcy5za2lsbHMpIHtcbiAgICAgIGlmIChza2lsbC5zeXN0ZW0uZmxhZ3M/LmRldmVsb3BlbWVudCkgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMub25seVJ1bk9uY2VQZXJTZXNzaW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgZm9yIChjb25zdCBzYW5pdHlMb3NzRXZlbnQgb2YgdGhpcy5zeXN0ZW0uc2FuaXR5TG9zc0V2ZW50cykge1xuICAgICAgaWYgKCFzYW5pdHlMb3NzRXZlbnQuaW1tdW5pdHkpIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgYXN5bmMgc2V0U2FuICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMFxuICAgIGlmICh2YWx1ZSA+IHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLm1heCkgeyB2YWx1ZSA9IHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLm1heCB9XG4gICAgY29uc3QgbG9zcyA9IHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlKSAtIHZhbHVlXG5cbiAgICBpZiAobG9zcyA+IDApIHtcbiAgICAgIGxldCB0b3RhbExvc3MgPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxvc3MpXG4gICAgICAgID8gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMb3NzKVxuICAgICAgICA6IDBcbiAgICAgIHRvdGFsTG9zcyA9IHRvdGFsTG9zcyArIGxvc3NcbiAgICAgIGlmIChsb3NzID49IDUpIGF3YWl0IHRoaXMuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLnRlbXBvSW5zYW5lKVxuICAgICAgaWYgKHRvdGFsTG9zcyA+PSB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxpbWl0KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmluZGVmSW5zYW5lKVxuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlJzogdmFsdWUsXG4gICAgICAgICdzeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMb3NzJzogdG90YWxMb3NzXG4gICAgICB9KVxuICAgIH0gZWxzZSBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUnOiB2YWx1ZSB9KVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgYXN5bmMgc2V0QXR0cmliQXV0byAodmFsdWUsIGF0dHJpYikge1xuICAgIGNvbnN0IHVwZGF0ZWRLZXkgPSBgc3lzdGVtLmF0dHJpYnMuJHthdHRyaWJ9LmF1dG9gXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHsgW3VwZGF0ZWRLZXldOiB2YWx1ZSB9KVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlQXR0cmliQXV0byAoYXR0cmliKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJBdXRvKCF0aGlzLnN5c3RlbS5hdHRyaWJzW2F0dHJpYl0uYXV0bywgYXR0cmliKVxuICB9XG5cbiAgc3RhdGljIGRiRnJvbUNoYXJhY3RlcmlzdGljcyAoY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgY29uc3Qgc3VtID0gKGNoYXJhY3RlcmlzdGljcy5zdHIudmFsdWUgPz8gMCkgKyAoY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZSA/PyAwKVxuICAgIGlmIChzdW0gPCA2NSkgcmV0dXJuIC0yXG4gICAgaWYgKHN1bSA8IDg1KSByZXR1cm4gLTFcbiAgICBpZiAoc3VtIDwgMTI1KSByZXR1cm4gMFxuICAgIGlmIChzdW0gPCAxNjUpIHJldHVybiAnMUQ0J1xuICAgIHJldHVybiBgJHtNYXRoLmZsb29yKChzdW0gLSA0NSkgLyA4MCl9RDZgXG4gIH1cblxuICBzdGF0aWMgYnVpbGRGcm9tQ2hhcmFjdGVyaXN0aWNzIChjaGFyYWN0ZXJpc3RpY3MpIHtcbiAgICBjb25zdCBzdW0gPSAoY2hhcmFjdGVyaXN0aWNzLnN0ci52YWx1ZSA/PyAwKSArIChjaGFyYWN0ZXJpc3RpY3Muc2l6LnZhbHVlID8/IDApXG4gICAgaWYgKHN1bSA8IDY1KSByZXR1cm4gLTJcbiAgICBpZiAoc3VtIDwgODUpIHJldHVybiAtMVxuICAgIGlmIChzdW0gPCAxMjUpIHJldHVybiAwXG4gICAgaWYgKHN1bSA8IDE2NSkgcmV0dXJuIDFcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoc3VtIC0gNDUpIC8gODApICsgMVxuICB9XG5cbiAgc3RhdGljIGhwRnJvbUNoYXJhY3RlcmlzdGljcyAoY2hhcmFjdGVyaXN0aWNzLCB0eXBlKSB7XG4gICAgY29uc3Qgc3VtID0gcGFyc2VJbnQoY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZSA/PyAwLCAxMCkgKyBwYXJzZUludChjaGFyYWN0ZXJpc3RpY3MuY29uLnZhbHVlID8/IDAsIDEwKVxuICAgIGNvbnN0IGRpdmlzb3IgPSAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVEb3VibGVNYXhIZWFsdGgnKSAmJiB0eXBlID09PSAnY2hhcmFjdGVyJyA/IDUgOiAxMClcbiAgICByZXR1cm4gTWF0aC5mbG9vcihzdW0gLyBkaXZpc29yKVxuICB9XG5cbiAgc3RhdGljIG1wRnJvbUNoYXJhY3RlcmlzdGljcyAoY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoY2hhcmFjdGVyaXN0aWNzLnBvdy52YWx1ZSAvIDUpXG4gIH1cblxuICBzdGF0aWMgbW92RnJvbUNoYXJhY3RlcmlzdGljcyAoY2hhcmFjdGVyaXN0aWNzLCB0eXBlLCBhZ2UpIHtcbiAgICBsZXQgTU9WXG4gICAgaWYgKGNoYXJhY3RlcmlzdGljcy5kZXgudmFsdWUgPiBjaGFyYWN0ZXJpc3RpY3Muc2l6LnZhbHVlICYmIGNoYXJhY3RlcmlzdGljcy5zdHIudmFsdWUgPiBjaGFyYWN0ZXJpc3RpY3Muc2l6LnZhbHVlKSB7XG4gICAgICBNT1YgPSA5IC8vIEJ1ZyBjb3JyZWN0aW9uIGJ5IEFkbWlyYWxOeWFyLlxuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyaXN0aWNzLmRleC52YWx1ZSA+PSBjaGFyYWN0ZXJpc3RpY3Muc2l6LnZhbHVlIHx8IGNoYXJhY3RlcmlzdGljcy5zdHIudmFsdWUgPj0gY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZSkge1xuICAgICAgTU9WID0gOFxuICAgIH0gZWxzZSB7XG4gICAgICBNT1YgPSA3XG4gICAgfVxuICAgIGlmICh0eXBlICE9PSAnY3JlYXR1cmUnICYmICFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUlnbm9yZUFnZVBlbmFsdGllcycpKSB7XG4gICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KGFnZSkpKSB7XG4gICAgICAgIE1PViA9IHBhcnNlSW50KGFnZSkgPj0gNDAgPyBNT1YgLSBNYXRoLmZsb29yKHBhcnNlSW50KGFnZSkgLyAxMCkgKyAzIDogTU9WXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1heCgwLCBNT1YpXG4gIH1cblxuICBnZXQgcmF3QnVpbGQgKCkge1xuICAgIGlmICghdGhpcy5zeXN0ZW0uYXR0cmlicykgcmV0dXJuIG51bGxcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQpIHJldHVybiBudWxsXG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQudmFsdWUgPT09ICdhdXRvJykge1xuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC5hdXRvID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC5hdXRvKSB7XG4gICAgICByZXR1cm4gQ29DQWN0b3IuYnVpbGRGcm9tQ2hhcmFjdGVyaXN0aWNzKHRoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcylcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZVxuICB9XG5cbiAgZ2V0IGJ1aWxkICgpIHtcbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZVxuICB9XG5cbiAgZ2V0IHJhd0RiICgpIHtcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmF0dHJpYnMpIHJldHVybiBudWxsXG4gICAgaWYgKCF0aGlzLnN5c3RlbS5hdHRyaWJzLmRiKSByZXR1cm4gbnVsbFxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlID09PSAnYXV0bycpIHtcbiAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuZGIuYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMuZGIuYXV0bykge1xuICAgICAgcmV0dXJuIENvQ0FjdG9yLmRiRnJvbUNoYXJhY3RlcmlzdGljcyh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlXG4gIH1cblxuICBnZXQgZGIgKCkge1xuICAgIHJldHVybiB0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlXG4gIH1cblxuICBnZXQgcmF3TW92ICgpIHtcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmF0dHJpYnMpIHJldHVybiBudWxsXG4gICAgaWYgKCF0aGlzLnN5c3RlbS5hdHRyaWJzLm1vdikgcmV0dXJuIG51bGxcbiAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5tb3YudmFsdWUgPT09ICdhdXRvJykge1xuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5tb3YuYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMubW92LmF1dG8pIHtcbiAgICAgIGNvbnN0IE1PViA9IENvQ0FjdG9yLm1vdkZyb21DaGFyYWN0ZXJpc3RpY3ModGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLCB0aGlzLnN5c3RlbS50eXBlLCB0aGlzLnN5c3RlbS5pbmZvcy5hZ2UpXG4gICAgICBpZiAoTU9WID4gMCkgcmV0dXJuIE1PVlxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXR0cmlicy5tb3YudmFsdWVcbiAgfVxuXG4gIGdldCBtb3YgKCkge1xuICAgIHJldHVybiB0aGlzLnN5c3RlbS5hdHRyaWJzLm1vdi52YWx1ZVxuICB9XG5cbiAgZ2V0IHRva2VuSWQgKCkge1xuICAgIC8vIFRPRE8gY2xhcmlmaWVyIGNhIGV0IHRva2Vua2V5XG4gICAgcmV0dXJuIHRoaXMudG9rZW4gPyBgJHt0aGlzLnRva2VuLnNjZW5lLl9pZH0uJHt0aGlzLnRva2VuLmlkfWAgOiBudWxsIC8vIFJFRkFDVE9SSU5HICgyKVxuICB9XG5cbiAgZ2V0IGxvY2tlZCAoKSB7XG4gICAgaWYgKCF0aGlzLnN5c3RlbS5mbGFncykge1xuICAgICAgdGhpcy5zeXN0ZW0uZmxhZ3MgPSB7fVxuICAgICAgdGhpcy5zeXN0ZW0uZmxhZ3MubG9ja2VkID0gdHJ1ZSAvLyBMb2NrZWQgYnkgZGVmYXVsdFxuICAgICAgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmZsYWdzJzoge30gfSlcbiAgICAgIHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5mbGFncy5sb2NrZWQnOiBmYWxzZSB9KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN5c3RlbS5mbGFncy5sb2NrZWRcbiAgfVxuXG4gIGdldEl0ZW1zRnJvbU5hbWUgKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoaSA9PiBpLm5hbWUgPT09IG5hbWUpXG4gIH1cblxuICBzZXQgbG9ja2VkICh2YWx1ZSkge1xuICAgIHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5mbGFncy5sb2NrZWQnOiB2YWx1ZSB9KVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlQWN0b3JGbGFnIChmbGFnTmFtZSkge1xuICAgIGNvbnN0IGZsYWdWYWx1ZSA9ICF0aGlzLnN5c3RlbS5mbGFnc1tmbGFnTmFtZV1cbiAgICBjb25zdCBuYW1lID0gYHN5c3RlbS5mbGFncy4ke2ZsYWdOYW1lfWBcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7IFtuYW1lXTogZmxhZ1ZhbHVlIH0pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBhdHRyaWJ1dGVOYW1lIGtleSBvZiBhdHRyaWJ1dGUgdG8gY2hlY2sgaW4gWydsY2snXVxuICAgKiBAcGFyYW0geyp9IGZhc3RGb3J3YXJkXG4gICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBkaWZmaWN1bHR5IGluIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwsIG1vZGlmaWVyICgtMiArMiksIG5hbWVcbiAgICovXG4gIGFzeW5jIGF0dHJpYnV0ZUNoZWNrIChhdHRyaWJ1dGVOYW1lLCBmYXN0Rm9yd2FyZCA9IGZhbHNlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBhdHRyaWIgPSB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgaWYgKCFhdHRyaWIpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JOb3RGb3VuZCcsIHtcbiAgICAgICAgICBtaXNzaW5nOiBhdHRyaWJ1dGVOYW1lXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG5cbiAgICBpZiAob3B0aW9ucy5tb2RpZmllcikgY2hlY2suZGljZU1vZGlmaWVyID0gTnVtYmVyKG9wdGlvbnMubW9kaWZpZXIpXG4gICAgaWYgKG9wdGlvbnMuZGlmZmljdWx0eSkge1xuICAgICAgY2hlY2suZGlmZmljdWx0eSA9IENvQzdVdGlsaXRpZXMuY29udmVydERpZmZpY3VsdHkob3B0aW9ucy5kaWZmaWN1bHR5KVxuICAgIH1cblxuICAgIGlmICghZmFzdEZvcndhcmQpIHtcbiAgICAgIGlmICh1bmRlZmluZWQgPT09IG9wdGlvbnMuZGlmZmljdWx0eSB8fCB1bmRlZmluZWQgPT09IG9wdGlvbnMubW9kaWZpZXIpIHtcbiAgICAgICAgY29uc3QgdXNhZ2UgPSBhd2FpdCBSb2xsRGlhbG9nLmNyZWF0ZShvcHRpb25zKVxuICAgICAgICBpZiAodXNhZ2UpIHtcbiAgICAgICAgICBjaGVjay5kaWNlTW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdib251c0RpY2UnKSlcbiAgICAgICAgICBjaGVjay5kaWZmaWN1bHR5ID0gTnVtYmVyKHVzYWdlLmdldCgnZGlmZmljdWx0eScpKVxuICAgICAgICAgIGNoZWNrLmZsYXREaWNlTW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdmbGF0RGljZU1vZGlmaWVyJykpXG4gICAgICAgICAgY2hlY2suZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gTnVtYmVyKFxuICAgICAgICAgICAgdXNhZ2UuZ2V0KCdmbGF0VGhyZXNob2xkTW9kaWZpZXInKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrLmFjdG9yID0gdGhpcy50b2tlbktleVxuICAgIGlmIChvcHRpb25zLmJsaW5kID09PSAnZmFsc2UnKSBjaGVjay5pc0JsaW5kID0gZmFsc2VcbiAgICBlbHNlIGNoZWNrLmlzQmxpbmQgPSAhIW9wdGlvbnMuYmxpbmRcbiAgICBhd2FpdCBjaGVjay5yb2xsQXR0cmlidXRlKGF0dHJpYi5rZXkpXG4gICAgY2hlY2sudG9NZXNzYWdlKClcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGNoYXJhY3RlcmlzdGljTmFtZSBrZXkgb2YgY2hhcmFjdGVyaXN0aWMgdG8gY2hlY2sgaW4gWydzdHInLCdjb24nLCdzaXonLCdkZXgnLCdhcHAnLCdpbnQnLCdwb3cnLCdlZHUnXVxuICAgKiBAcGFyYW0geyp9IGZhc3RGb3J3YXJkXG4gICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBkaWZmaWN1bHR5IGluIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwsIG1vZGlmaWVyICgtMiArMiksIG5hbWVcbiAgICovXG4gIGFzeW5jIGNoYXJhY3RlcmlzdGljQ2hlY2sgKFxuICAgIGNoYXJhY3RlcmlzdGljTmFtZSxcbiAgICBmYXN0Rm9yd2FyZCA9IGZhbHNlLFxuICAgIG9wdGlvbnMgPSB7fVxuICApIHtcbiAgICBjb25zdCBjaGFyID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYyhjaGFyYWN0ZXJpc3RpY05hbWUpXG5cbiAgICBpZiAoIWNoYXIpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JOb3RGb3VuZEZvckFjdG9yJywge1xuICAgICAgICAgIG1pc3Npbmc6IGNoYXJhY3RlcmlzdGljTmFtZSxcbiAgICAgICAgICBhY3RvcjogdGhpcy5uYW1lXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuXG4gICAgaWYgKG9wdGlvbnMubW9kaWZpZXIpIGNoZWNrLmRpY2VNb2RpZmllciA9IE51bWJlcihvcHRpb25zLm1vZGlmaWVyKVxuICAgIGlmIChvcHRpb25zLmRpZmZpY3VsdHkpIHtcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3VXRpbGl0aWVzLmNvbnZlcnREaWZmaWN1bHR5KG9wdGlvbnMuZGlmZmljdWx0eSlcbiAgICB9XG5cbiAgICBpZiAoIWZhc3RGb3J3YXJkKSB7XG4gICAgICBpZiAodW5kZWZpbmVkID09PSBvcHRpb25zLmRpZmZpY3VsdHkgfHwgdW5kZWZpbmVkID09PSBvcHRpb25zLm1vZGlmaWVyKSB7XG4gICAgICAgIG9wdGlvbnMuZGlzcGxheU5hbWUgPSBjaGFyLmxhYmVsXG4gICAgICAgIGNvbnN0IHVzYWdlID0gYXdhaXQgUm9sbERpYWxvZy5jcmVhdGUob3B0aW9ucylcbiAgICAgICAgaWYgKHVzYWdlKSB7XG4gICAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnYm9udXNEaWNlJykpXG4gICAgICAgICAgY2hlY2suZGlmZmljdWx0eSA9IE51bWJlcih1c2FnZS5nZXQoJ2RpZmZpY3VsdHknKSlcbiAgICAgICAgICBjaGVjay5mbGF0RGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnZmxhdERpY2VNb2RpZmllcicpKVxuICAgICAgICAgIGNoZWNrLmZsYXRUaHJlc2hvbGRNb2RpZmllciA9IE51bWJlcihcbiAgICAgICAgICAgIHVzYWdlLmdldCgnZmxhdFRocmVzaG9sZE1vZGlmaWVyJylcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVjay5hY3RvciA9IHRoaXMudG9rZW5LZXlcbiAgICBpZiAob3B0aW9ucy5ibGluZCA9PT0gJ2ZhbHNlJykgY2hlY2suaXNCbGluZCA9IGZhbHNlXG4gICAgZWxzZSBjaGVjay5pc0JsaW5kID0gISFvcHRpb25zLmJsaW5kXG4gICAgYXdhaXQgY2hlY2sucm9sbENoYXJhY3RlcmlzdGljKGNoYXIua2V5KVxuICAgIGNoZWNrLnRvTWVzc2FnZSgpXG4gIH1cblxuICBhc3luYyBza2lsbENoZWNrIChza2lsbERhdGEsIGZhc3RGb3J3YXJkLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBza2lsbElkZW50aWZpZXIgPSBza2lsbERhdGEubmFtZSA/IHNraWxsRGF0YS5uYW1lIDogc2tpbGxEYXRhXG4gICAgY29uc3QgaXNDb0NJRCA9ICEhc2tpbGxJZGVudGlmaWVyLm1hdGNoKC9eaVxcLnNraWxsXFwuLylcbiAgICBsZXQgc2tpbGwgPSBbXVxuICAgIGlmIChpc0NvQ0lEKSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIGxvYWQgZnJvbSBhY3RvciBmcm9tIENvQyBJRFxuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0Rmlyc3RTa2lsbEJ5Q29DSUQoc2tpbGxJZGVudGlmaWVyKVxuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgc2tpbGwucHVzaChpdGVtKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXNraWxsLmxlbmd0aCkge1xuICAgICAgLy8gQXR0ZW1wdCB0byBsb2FkIGZvciBhY3RvciBieSBuYW1lXG4gICAgICBza2lsbCA9IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKHNraWxsSWRlbnRpZmllcilcbiAgICB9XG4gICAgaWYgKCFza2lsbC5sZW5ndGgpIHtcbiAgICAgIGxldCBpdGVtID0gbnVsbFxuICAgICAgaWYgKHNraWxsRGF0YS5wYWNrKSB7XG4gICAgICAgIGNvbnN0IHBhY2sgPSBnYW1lLnBhY2tzLmdldChza2lsbERhdGEucGFjaylcbiAgICAgICAgaWYgKHBhY2subWV0YWRhdGEuZW50aXR5ICE9PSAnSXRlbScpIHJldHVyblxuICAgICAgICBpdGVtID0gYXdhaXQgcGFjay5nZXREb2N1bWVudChza2lsbERhdGEuaWQpXG4gICAgICB9IGVsc2UgaWYgKHNraWxsRGF0YS5pZCkge1xuICAgICAgICBpdGVtID0gZ2FtZS5pdGVtcy5nZXQoc2tpbGxEYXRhLmlkKVxuICAgICAgfVxuXG4gICAgICAvLyBObyBza2lsbCBmb3VuZCwgdHJ5IHRvIGdldCBnZXQgaXQgZnJvbSBjb21wZW5kaXVtICFcbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgcmV0cmlldmFsIG9mIHNraWxsIGZyb20gY29tcGVuZGl1bSAhIVxuICAgICAgICAvLyBnYW1lLnNldHRpbmdzLmdldCggJ0NvQzcnLCAnRGVmYXVsdENvbXBlbmRpdW0nKTtcbiAgICAgICAgY29uc29sZS5sb2coc2tpbGxJZGVudGlmaWVyKVxuICAgICAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgICBjaGVjay5fcmF3VmFsdWUgPSAnPydcbiAgICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICAgIGNoZWNrLnRvTWVzc2FnZSgpXG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk5vU2tpbGwnKSArICcgJyArXG4gICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yTm90Rm91bmRGb3JBY3RvcicsIHtcbiAgICAgICAgICAgICAgbWlzc2luZzogc2tpbGxEYXRhLm5hbWUgPyBza2lsbERhdGEubmFtZSA6IHNraWxsRGF0YSxcbiAgICAgICAgICAgICAgYWN0b3I6IHRoaXMubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBsZXQgY3JlYXRlID0gZmFsc2VcbiAgICAgIGF3YWl0IERpYWxvZy5jb25maXJtKHtcbiAgICAgICAgdGl0bGU6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BZGRXZWFwb24nKX1gLFxuICAgICAgICBjb250ZW50OiBgPHA+JHtnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkFkZFdlYXBvbnRIaW50Jywge1xuICAgICAgICAgIHdlYXBvbjogc2tpbGxEYXRhLm5hbWUsXG4gICAgICAgICAgYWN0b3I6IHRoaXMubmFtZVxuICAgICAgICB9KX08L3A+YCxcbiAgICAgICAgeWVzOiAoKSA9PiB7XG4gICAgICAgICAgY3JlYXRlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBpZiAoY3JlYXRlID09PSB0cnVlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZm91bmRyeS51dGlscy5kdXBsaWNhdGUoaXRlbSldKVxuICAgICAgfSBlbHNlIHJldHVyblxuXG4gICAgICBza2lsbCA9IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKGl0ZW0ubmFtZSlcblxuICAgICAgaWYgKCFza2lsbC5sZW5ndGgpIHJldHVyblxuXG4gICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgY29uc3Qgc2tpbGxWYWx1ZSA9IGF3YWl0IFNraWxsVmFsdWVEaWFsb2cuY3JlYXRlKFxuICAgICAgICAgIHNraWxsWzBdLm5hbWUsXG4gICAgICAgICAgc2tpbGxbMF0uYmFzZVxuICAgICAgICApXG4gICAgICAgIGNvbnN0IHZhbHVlID0gTnVtYmVyKHNraWxsVmFsdWUuZ2V0KCdiYXNlLXZhbHVlJykpXG4gICAgICAgIGF3YWl0IHNraWxsWzBdLnVwZGF0ZVZhbHVlKHZhbHVlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG5cbiAgICBpZiAodW5kZWZpbmVkICE9PSBvcHRpb25zLm1vZGlmaWVyKSB7XG4gICAgICBjaGVjay5kaWNlTW9kaWZpZXIgPSBOdW1iZXIob3B0aW9ucy5tb2RpZmllcilcbiAgICB9XG4gICAgaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5kaWZmaWN1bHR5KSB7XG4gICAgICBjaGVjay5kaWZmaWN1bHR5ID0gQ29DN1V0aWxpdGllcy5jb252ZXJ0RGlmZmljdWx0eShvcHRpb25zLmRpZmZpY3VsdHkpXG4gICAgfVxuXG4gICAgaWYgKCFmYXN0Rm9yd2FyZCkge1xuICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gb3B0aW9ucy5kaWZmaWN1bHR5IHx8IHVuZGVmaW5lZCA9PT0gb3B0aW9ucy5tb2RpZmllcikge1xuICAgICAgICBjb25zdCB1c2FnZSA9IGF3YWl0IFJvbGxEaWFsb2cuY3JlYXRlKG9wdGlvbnMpXG4gICAgICAgIGlmICh1c2FnZSkge1xuICAgICAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2JvbnVzRGljZScpKVxuICAgICAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBOdW1iZXIodXNhZ2UuZ2V0KCdkaWZmaWN1bHR5JykpXG4gICAgICAgICAgY2hlY2suZmxhdERpY2VNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2ZsYXREaWNlTW9kaWZpZXInKSlcbiAgICAgICAgICBjaGVjay5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBOdW1iZXIoXG4gICAgICAgICAgICB1c2FnZS5nZXQoJ2ZsYXRUaHJlc2hvbGRNb2RpZmllcicpXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2suYWN0b3IgPSB0aGlzLnRva2VuS2V5XG4gICAgY2hlY2suc2tpbGwgPSBza2lsbFswXS5pZFxuICAgIGlmIChvcHRpb25zLmJsaW5kID09PSAnZmFsc2UnKSBjaGVjay5pc0JsaW5kID0gZmFsc2VcbiAgICBlbHNlIGNoZWNrLmlzQmxpbmQgPSAhIW9wdGlvbnMuYmxpbmRcbiAgICBhd2FpdCBjaGVjay5yb2xsKClcbiAgICBjaGVjay50b01lc3NhZ2UoKVxuICB9XG5cbiAgYXN5bmMgd2VhcG9uQ2hlY2sgKHdlYXBvbkRhdGEsIGZhc3RGb3J3YXJkID0gZmFsc2UpIHtcbiAgICBsZXQgd2VhcG9uXG4gICAgaWYgKHR5cGVvZiB3ZWFwb25EYXRhLnV1aWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3ZWFwb24gPSBhd2FpdCBmcm9tVXVpZCh3ZWFwb25EYXRhLnV1aWQpXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2VhcG9uRGF0YS5pZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHdlYXBvbiA9IHRoaXMuaXRlbXMuZ2V0KHdlYXBvbkRhdGEuaWQpXG4gICAgfVxuICAgIGlmICghd2VhcG9uKSB7XG4gICAgICBsZXQgd2VhcG9ucyA9IHRoaXMuZ2V0SXRlbXNGcm9tTmFtZSh3ZWFwb25EYXRhLm5hbWUpXG4gICAgICBpZiAod2VhcG9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgICAgICAgbGV0IGl0ZW0gPSBudWxsXG4gICAgICAgICAgY29uc3QgcGFjayA9IHdlYXBvbkRhdGEucGFjayA/IGdhbWUucGFja3MuZ2V0KHdlYXBvbkRhdGEucGFjaykgOiBudWxsXG4gICAgICAgICAgaWYgKHBhY2spIHtcbiAgICAgICAgICAgIGlmIChwYWNrLm1ldGFkYXRhLmVudGl0eSAhPT0gJ0l0ZW0nKSByZXR1cm5cbiAgICAgICAgICAgIGl0ZW0gPSBhd2FpdCBwYWNrLmdldERvY3VtZW50KHdlYXBvbkRhdGEuaWQpXG4gICAgICAgICAgfSBlbHNlIGlmICh3ZWFwb25EYXRhLmlkKSB7XG4gICAgICAgICAgICBpdGVtID0gZ2FtZS5pdGVtcy5nZXQod2VhcG9uRGF0YS5pZClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XYXJuTWFjcm9Ob0l0ZW1Gb3VuZCcpXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGV0IGNyZWF0ZSA9IGZhbHNlXG4gICAgICAgICAgYXdhaXQgRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgICAgICAgdGl0bGU6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BZGRXZWFwb24nKX1gLFxuICAgICAgICAgICAgY29udGVudDogYDxwPiR7Z2FtZS5pMThuLmZvcm1hdCgnQ29DNy5BZGRXZWFwb250SGludCcsIHtcbiAgICAgICAgICAgICAgd2VhcG9uOiB3ZWFwb25EYXRhLm5hbWUsXG4gICAgICAgICAgICAgIGFjdG9yOiB0aGlzLm5hbWVcbiAgICAgICAgICAgIH0pfTwvcD5gLFxuICAgICAgICAgICAgeWVzOiAoKSA9PiB7XG4gICAgICAgICAgICAgIGNyZWF0ZSA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIGNvbnN0IGFjdG9yID1cbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLnBhcmVudD8uYWN0b3IgIT09ICd1bmRlZmluZWQnID8gdGhpcy5wYXJlbnQuYWN0b3IgOiB0aGlzXG5cbiAgICAgICAgICBpZiAoY3JlYXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBhd2FpdCBhY3Rvci5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtpdGVtLnRvSlNPTigpXSlcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuXG4gICAgICAgICAgd2VhcG9ucyA9IGFjdG9yLmdldEl0ZW1zRnJvbU5hbWUoaXRlbS5uYW1lKVxuICAgICAgICAgIGlmICghd2VhcG9ucy5sZW5ndGgpIHJldHVyblxuICAgICAgICAgIGF3YWl0IHdlYXBvbnNbMF0ucmVsb2FkKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yQWN0b3JIYXNOb1dlYXBvbk5hbWVkJywge1xuICAgICAgICAgICAgICBhY3Rvck5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgd2VhcG9uTmFtZTogd2VhcG9uRGF0YS5uYW1lXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh3ZWFwb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JBY3Rvckhhc1Rvb01hbnlXZWFwb25zTmFtZWQnLCB7XG4gICAgICAgICAgICBhY3Rvck5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIHdlYXBvbk5hbWU6IHdlYXBvbkRhdGEubmFtZVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHdlYXBvbiA9IHdlYXBvbnNbMF1cbiAgICB9XG5cbiAgICBpZiAoIXdlYXBvbi5zeXN0ZW0ucHJvcGVydGllcy5ybmdkKSB7XG4gICAgICBpZiAoZ2FtZS51c2VyLnRhcmdldHMuc2l6ZSA+IDEpIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XYXJuVG9vTWFueVRhcmdldCcpKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjYXJkID0gbmV3IENvQzdNZWxlZUluaXRpYXRvcih0aGlzLnRva2VuS2V5LCAod2VhcG9uRGF0YS51dWlkIHx8IHdlYXBvbi5pZCksIGZhc3RGb3J3YXJkKVxuICAgICAgY2FyZC5jcmVhdGVDaGF0Q2FyZCgpXG4gICAgfVxuICAgIGlmICh3ZWFwb24uc3lzdGVtLnByb3BlcnRpZXMucm5nZCkge1xuICAgICAgY29uc3QgY2FyZCA9IG5ldyBDb0M3UmFuZ2VJbml0aWF0b3IodGhpcy50b2tlbktleSwgKHdlYXBvbkRhdGEudXVpZCB8fCB3ZWFwb24uaWQpLCBmYXN0Rm9yd2FyZClcbiAgICAgIGNhcmQuY3JlYXRlQ2hhdENhcmQoKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJvbGxJbml0aWF0aXZlIChoYXNHdW4gPSBmYWxzZSkge1xuICAgIHN3aXRjaCAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnaW5pdGlhdGl2ZVJ1bGUnKSkge1xuICAgICAgY2FzZSAnb3B0aW9uYWwnOiB7XG4gICAgICAgIGNvbnN0IHJvbGwgPSBuZXcgQ29DN0NoZWNrKHRoaXMuYWN0b3JLZXkpXG4gICAgICAgIHJvbGwuZGVueVB1c2ggPSB0cnVlXG4gICAgICAgIHJvbGwuZGVueUx1Y2sgPSB0cnVlXG4gICAgICAgIHJvbGwuZGVueUJsaW5kVGFtcGVyaW5nID0gdHJ1ZVxuICAgICAgICByb2xsLmhpZGVEaWNlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGlzcGxheUluaXREaWNlcycpID09PSBmYWxzZVxuICAgICAgICByb2xsLmZsYXZvciA9ICdJbml0aWF0aXZlIHJvbGwnXG4gICAgICAgIGF3YWl0IHJvbGwucm9sbENoYXJhY3RlcmlzdGljKCdkZXgnLCBoYXNHdW4gPyAxIDogMClcbiAgICAgICAgcm9sbC50b01lc3NhZ2UoKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHJvbGwuc3VjY2Vzc0xldmVsICsgdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmRleC52YWx1ZSAvIDEwMFxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBoYXNHdW5cbiAgICAgICAgICA/IHRoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5kZXgudmFsdWUgKyA1MFxuICAgICAgICAgIDogdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmRleC52YWx1ZVxuICAgIH1cbiAgfVxuXG4gIGdldEFjdG9yRmxhZyAoZmxhZ05hbWUpIHtcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmZsYWdzKSB7XG4gICAgICB0aGlzLnN5c3RlbS5mbGFncyA9IHt9XG4gICAgICB0aGlzLnN5c3RlbS5mbGFncy5sb2NrZWQgPSB0cnVlXG4gICAgICB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MnOiB7fSB9KVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN5c3RlbS5mbGFnc1tmbGFnTmFtZV0pIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0aGlzLnN5c3RlbS5mbGFnc1tmbGFnTmFtZV1cbiAgfVxuXG4gIGFzeW5jIHNldEFjdG9yRmxhZyAoZmxhZ05hbWUpIHtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7IFtgc3lzdGVtLmZsYWdzLiR7ZmxhZ05hbWV9YF06IHRydWUgfSlcbiAgfVxuXG4gIGFzeW5jIHVuc2V0QWN0b3JGbGFnIChmbGFnTmFtZSkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgW2BzeXN0ZW0uZmxhZ3MuJHtmbGFnTmFtZX1gXTogZmFsc2UgfSlcbiAgfVxuXG4gIGdldFdlYXBvblNraWxscyAoaXRlbUlkKSB7XG4gICAgbGV0IHdlYXBvbiA9IGZyb21VdWlkU3luYyhpdGVtSWQpXG4gICAgaWYgKCF3ZWFwb24pIHtcbiAgICAgIHdlYXBvbiA9IHRoaXMuaXRlbXMuZ2V0KGl0ZW1JZClcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3ZWFwb24uc3lzdGVtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgd2VhcG9uID0gZ2FtZS5wYWNrcy5nZXQod2VhcG9uLnBhY2spLmdldCh3ZWFwb24uX2lkKVxuICAgIH1cbiAgICBpZiAod2VhcG9uLnR5cGUgIT09ICd3ZWFwb24nKSByZXR1cm4gbnVsbFxuICAgIGNvbnN0IHNraWxscyA9IFtdXG4gICAgaWYgKHdlYXBvbi5zeXN0ZW0uc2tpbGwubWFpbi5pZCkge1xuICAgICAgc2tpbGxzLnB1c2godGhpcy5pdGVtcy5nZXQod2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLmlkKSlcbiAgICB9XG5cbiAgICBpZiAod2VhcG9uLnVzZXNBbHRlcm5hdGl2ZVNraWxsICYmIHdlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZCkge1xuICAgICAgc2tpbGxzLnB1c2godGhpcy5pdGVtcy5nZXQod2VhcG9uLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkKSlcbiAgICB9XG4gICAgcmV0dXJuIHNraWxsc1xuICB9XG5cbiAgLyoqIFRyeSB0byBmaW5kIGEgY2hhcmFjdGVyaXN0aWMsIGF0dHJpYnV0ZSBvciBza2lsbCB0aGF0IG1hdGNoZXMgdGhlIG5hbWUgKi9cbiAgZmluZCAobmFtZSkge1xuICAgIGlmICghbmFtZSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIC8vIFRyeSBJRFxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zLmdldChuYW1lKVxuICAgIGlmIChpdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnaXRlbScsXG4gICAgICAgIHZhbHVlOiBpdGVtXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVnRXhwID0gL1xcKChbXildKylcXCkvXG4gICAgY29uc3QgbWF0Y2hlcyA9IHJlZ0V4cC5leGVjKG5hbWUpXG4gICAgbGV0IHNob3J0TmFtZSA9IG51bGxcbiAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCkgc2hvcnROYW1lID0gbWF0Y2hlc1sxXVxuICAgIC8vIFRyeSB0byBmaW5kIGEgc2tpbGwgd2l0aCBleGFjdCBuYW1lLlxuICAgIGNvbnN0IHNraWxsID0gdGhpcy5za2lsbHMuZmlsdGVyKHMgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgISFzLm5hbWUgJiZcbiAgICAgICAgKHMubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJykgPT09XG4gICAgICAgICAgbmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJykgfHxcbiAgICAgICAgICBzLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpID09PVxuICAgICAgICAgICAgbmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJykgfHxcbiAgICAgICAgICBzLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpID09PVxuICAgICAgICAgICAgc2hvcnROYW1lPy50b0xvY2FsZUxvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJykpXG4gICAgICApXG4gICAgfSlcbiAgICBpZiAoc2tpbGwubGVuZ3RoKSByZXR1cm4geyB0eXBlOiAnaXRlbScsIHZhbHVlOiBza2lsbFswXSB9XG5cbiAgICAvLyBUcnkgdG8gZmluZCBhIGNoYXJhY3RlcmlzdGljLlxuICAgIGNvbnN0IGNoYXJLZXkgPSBbJ3N0cicsICdjb24nLCAnc2l6JywgJ2RleCcsICdhcHAnLCAnaW50JywgJ3BvdycsICdlZHUnXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcktleS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2hhciA9IHRoaXMuZ2V0Q2hhcmFjdGVyaXN0aWMoY2hhcktleVtpXSlcbiAgICAgIGlmIChjaGFyKSB7XG4gICAgICAgIGNoYXIubmFtZSA9IGNoYXIubGFiZWxcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNoYXIua2V5Py50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICBjaGFyLmtleT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gc2hvcnROYW1lPy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdjaGFyYWN0ZXJpc3RpYycsIHZhbHVlOiBjaGFyIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY2hhci5zaG9ydE5hbWU/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGNoYXIuc2hvcnROYW1lPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBzaG9ydE5hbWU/LnRvTG93ZXJDYXNlKClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2NoYXJhY3RlcmlzdGljJywgdmFsdWU6IGNoYXIgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaGFyLmxhYmVsPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICBjaGFyLmxhYmVsPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBzaG9ydE5hbWU/LnRvTG93ZXJDYXNlKClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2NoYXJhY3RlcmlzdGljJywgdmFsdWU6IGNoYXIgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIGZpbmQgYSBhdHRyaWJ1dGUuXG4gICAgY29uc3QgYXR0cmliS2V5ID0gWydsY2snLCAnc2FuJ11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJpYktleS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYktleVtpXSlcbiAgICAgIGlmIChhdHRyKSB7XG4gICAgICAgIGF0dHIubmFtZSA9IGF0dHIubGFiZWxcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGF0dHIua2V5Py50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICBhdHRyLmtleT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gc2hvcnROYW1lPy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdhdHRyaWJ1dGUnLCB2YWx1ZTogYXR0ciB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGF0dHIuc2hvcnROYW1lPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICBhdHRyLnNob3J0TmFtZT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gc2hvcnROYW1lPy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdhdHRyaWJ1dGUnLCB2YWx1ZTogYXR0ciB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGF0dHIubGFiZWw/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGF0dHIubGFiZWw/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHNob3J0TmFtZT8udG9Mb3dlckNhc2UoKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4geyB0eXBlOiAnYXR0cmlidXRlJywgdmFsdWU6IGF0dHIgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHJ5IHdpdGggcGFydGlhbCA/P1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBwaWxvdFNraWxscyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2tpbGxzLmZpbHRlcihzID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHMuc3lzdGVtLnByb3BlcnRpZXM/LnNwZWNpYWwgJiZcbiAgICAgICAgcy5zeXN0ZW0uc3BlY2lhbGl6YXRpb24/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09XG4gICAgICAgICAgZ2FtZS5pMThuXG4gICAgICAgICAgICAubG9jYWxpemUoJ0NvQzcuUGlsb3RTcGVjaWFsaXphdGlvbk5hbWUnKVxuICAgICAgICAgICAgPy50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICApXG4gICAgfSlcbiAgfVxuXG4gIGdldCBkcml2ZVNraWxscyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2tpbGxzLmZpbHRlcihzID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHMuc3lzdGVtLnByb3BlcnRpZXM/LnNwZWNpYWwgJiZcbiAgICAgICAgcy5zeXN0ZW0uc3BlY2lhbGl6YXRpb24/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09XG4gICAgICAgICAgZ2FtZS5pMThuXG4gICAgICAgICAgICAubG9jYWxpemUoJ0NvQzcuRHJpdmVTcGVjaWFsaXphdGlvbk5hbWUnKVxuICAgICAgICAgICAgPy50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICApXG4gICAgfSlcbiAgfVxuXG4gIGdldCB0b2tlblV1aWQgKCkge1xuICAgIGlmICh0aGlzLnNoZWV0LnRva2VuKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaGVldC50b2tlbi51dWlkXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgdG9rZW5LZXkgKCkge1xuICAgIC8vIENsYXJpZmllciBjYSBldCB0b2tlbmlkXG4gICAgLyoqICogTU9ESUYgMC44LnggKi9cbiAgICAvLyBpZiB0aGlzLnNoZWV0LnRva2VuID0+IHdhcyBvcGVuZWQgZnJvbSB0b2tlblxuICAgIC8vIGlmIHRoaXMudG9rZW4gPT4gc3ludGhldGljIGFjdG9yID09IHRoaXMuaXNUb2tlblxuICAgIGlmICh0aGlzLnNoZWV0LnRva2VuKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5zaGVldC50b2tlbi5wYXJlbnQuaWR9LiR7dGhpcy5zaGVldC50b2tlbi5pZH1gXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMuaWRcbiAgICB9XG4gICAgLyoqKioqKioqKioqKioqKioqL1xuICAgIC8vIC8vQ2FzZSAxOiB0aGUgYWN0b3IgaXMgYSBzeW50aGV0aWMgYWN0b3IgYW5kIGhhcyBhIHRva2VuLCByZXR1cm4gdG9rZW4ga2V5LlxuICAgIC8vIGlmKCB0aGlzLmlzVG9rZW4pIHJldHVybiBgJHt0aGlzLnRva2VuLnNjZW5lPy5faWQ/dGhpcy50b2tlbi5zY2VuZS5faWQ6J1RPS0VOJ30uJHt0aGlzLnRva2VuLmlkfWA7ICAvL1JFRkFDVE9SSU5HICgyKVxuXG4gICAgLy8gLy9DYXNlIDI6IHRoZSBhY3RvciBpcyBub3QgYSB0b2tlbiAobGlua2VkIGFjdG9yKS4gSWYgdGhlIHNoZWV0IGhhdmUgYW4gYXNzb2NpYXRlZCB0b2tlbiByZXR1cm4gdGhlIHRva2VuIGtleS5cbiAgICAvLyBpZiggdGhpcy5zaGVldC50b2tlbikgcmV0dXJuIGAke3RoaXMuc2hlZXQudG9rZW4uc2NlbmU/LmlkP3RoaXMuc2hlZXQudG9rZW4uc2NlbmUuaWQ6J1RPS0VOJ30uJHt0aGlzLnNoZWV0LnRva2VuLmlkfWA7XG5cbiAgICAvLyAvL0Nhc2UgMzogQWN0b3IgaGFzIG5vIHRva2VuIHJldHVybiBoaXMgSUQ7XG4gICAgLy8gcmV0dXJuIHRoaXMuaWQ7XG4gIH1cblxuICBnZXQgYWN0b3JLZXkgKCkge1xuICAgIGlmICh0aGlzLnByb3RvdHlwZVRva2VuLmFjdG9yTGluaykgcmV0dXJuIHRoaXMuaWQgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgcmV0dXJuIHRoaXMudG9rZW5LZXlcbiAgfVxuXG4gIHN0YXRpYyBnZXRBY3RvckZyb21LZXkgKGtleSkge1xuICAgIC8vIENhc2UgMSAtIGEgc3ludGhldGljIGFjdG9yIGZyb20gYSBUb2tlblxuICAgIGlmIChrZXkuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICBjb25zdCBbc2NlbmVJZCwgdG9rZW5JZF0gPSBrZXkuc3BsaXQoJy4nKVxuICAgICAgaWYgKHNjZW5lSWQgPT09ICdUT0tFTicpIHtcbiAgICAgICAgcmV0dXJuIGdhbWUuYWN0b3JzLnRva2Vuc1t0b2tlbklkXSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHNjZW5lSWQpXG4gICAgICAgIGlmICghc2NlbmUpIHJldHVybiBudWxsXG4gICAgICAgIGNvbnN0IHRva2VuRGF0YSA9IHNjZW5lLmdldEVtYmVkZGVkRG9jdW1lbnQoJ1Rva2VuJywgdG9rZW5JZClcbiAgICAgICAgaWYgKCF0b2tlbkRhdGEpIHJldHVybiBudWxsXG4gICAgICAgIGNvbnN0IHRva2VuID0gbmV3IFRva2VuKHRva2VuRGF0YSlcbiAgICAgICAgcmV0dXJuIHRva2VuLmFjdG9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FzZSAyIC0gdXNlIEFjdG9yIElEIGRpcmVjdG9yeVxuICAgIHJldHVybiBnYW1lLmFjdG9ycy5nZXQoa2V5KSB8fCBudWxsXG4gIH1cblxuICBnZXQgaGFzUm9sbGFibGVDaGFyYWN0ZXJpc3RpY3MgKCkge1xuICAgIGZvciAoY29uc3QgWywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcykpIHtcbiAgICAgIGlmIChpc05hTihOdW1iZXIodmFsdWUuZm9ybXVsYSkpKSByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCBob3NSb2xsYWJsZVNraWxscyAoKSB7XG4gICAgZm9yIChjb25zdCBza2lsbCBvZiB0aGlzLnNraWxscykge1xuICAgICAgaWYgKGlzTmFOKHNraWxsLnN5c3RlbT8udmFsdWUpKSByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdGhlIGZvcm11bGEgaWYgYXZhaWxhYmxlIHRvIHJvbGwgc29tZSBjaGFyYWN0ZXJpdGljcy5cbiAgICovXG4gIGFzeW5jIHJvbGxDaGFyYWN0ZXJpc3RpY3NWYWx1ZSAoKSB7XG4gICAgY29uc3QgY2hhcmFjdGVyaXN0aWNzID0ge31cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MpKSB7XG4gICAgICBpZiAodmFsdWUuZm9ybXVsYSAmJiAhdmFsdWUuZm9ybXVsYS5zdGFydHNXaXRoKCdAJykpIHtcbiAgICAgICAgY29uc3QgciA9IG5ldyBSb2xsKHZhbHVlLmZvcm11bGEpXG4gICAgICAgIGF3YWl0IHIucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICAgIGlmIChyLnRvdGFsKSB7XG4gICAgICAgICAgY2hhcmFjdGVyaXN0aWNzW2BzeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLiR7a2V5fS52YWx1ZWBdID0gTWF0aC5mbG9vcihcbiAgICAgICAgICAgIHIudG90YWxcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShjaGFyYWN0ZXJpc3RpY3MpXG4gICAgYXdhaXQgdGhpcy5yZXBvcnRDaGFyYWN0ZWRyaXRpY3NWYWx1ZSgpXG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlcmUgaXMgYSBmb3JtdWxhLCB3aWxsIHNldCB0aGUgY2hhcmFjdGVyaXN0aWMgdG8gdGhlIGF2ZXJhZ2UgdmFsdWUgLGlmIGRpdmlzaWJsZSBieSA1LCBvciB0aGUgY2xvc2VzdCAxMC5cbiAgICovXG4gIGFzeW5jIGF2ZXJhZ2VDaGFyYWN0ZXJpc3RpY3NWYWx1ZSAoKSB7XG4gICAgY29uc3QgY2hhcmFjdGVyaXN0aWNzID0ge31cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MpKSB7XG4gICAgICBpZiAodmFsdWUuZm9ybXVsYSAmJiAhdmFsdWUuZm9ybXVsYS5zdGFydHNXaXRoKCdAJykpIHtcbiAgICAgICAgY29uc3QgYXZlcmFnZSA9IG5ldyBBdmVyYWdlUm9sbCgnKCcgKyB2YWx1ZS5mb3JtdWxhICsgJyknKS5ldmFsdWF0ZSh7IG1pbmltaXplOiB0cnVlLCBtYXhpbWl6ZTogdHJ1ZSB9KS50b3RhbFxuICAgICAgICBjaGFyYWN0ZXJpc3RpY3NbYHN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuJHtrZXl9LnZhbHVlYF0gPSBhdmVyYWdlXG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoY2hhcmFjdGVyaXN0aWNzKVxuICAgIGF3YWl0IHRoaXMucmVwb3J0Q2hhcmFjdGVkcml0aWNzVmFsdWUoKVxuICB9XG5cbiAgLyoqXG4gICAqIFRlc3QgaWYgYSBjaGFyYWN0ZXJpc2l0YyBmb3JtdWxhIGlzIGEgcmVmZXJlbmNlIHRvIGFuIG90aGVyIGNoYXJhY3RlcmlzdGljIGFuZCBzZXQgaXQgYWNjb3JkaW5nbHkuXG4gICAqL1xuICBhc3luYyByZXBvcnRDaGFyYWN0ZWRyaXRpY3NWYWx1ZSAoKSB7XG4gICAgY29uc3QgY2hhcmFjdGVyaXN0aWNzID0ge31cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MpKSB7XG4gICAgICBpZiAodmFsdWUuZm9ybXVsYSAmJiB2YWx1ZS5mb3JtdWxhLnN0YXJ0c1dpdGgoJ0AnKSkge1xuICAgICAgICBsZXQgY2hhclZhbHVlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2hhclZhbHVlID0gbmV3IFJvbGwoXG4gICAgICAgICAgICB2YWx1ZS5mb3JtdWxhLFxuICAgICAgICAgICAgdGhpcy5wYXJzZUNoYXJhY3RlcmlzdGljcygpXG4gICAgICAgICAgKS5ldmFsdWF0ZSh7IG1heGltaXplOiB0cnVlIH0pLnRvdGFsXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNoYXJWYWx1ZSA9IG51bGxcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhclZhbHVlKSB7XG4gICAgICAgICAgY2hhcmFjdGVyaXN0aWNzW2BzeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLiR7a2V5fS52YWx1ZWBdID0gY2hhclZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShjaGFyYWN0ZXJpc3RpY3MpXG4gIH1cblxuICBhc3luYyBzZXRDaGFyYWN0ZXJpc3RpYyAobmFtZSwgdmFsdWUpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJpc3RpYyA9IHt9XG4gICAgY29uc3QgY2hhclZhbHVlID0gaXNOYU4ocGFyc2VJbnQodmFsdWUpKSA/IG51bGwgOiBwYXJzZUludCh2YWx1ZSlcbiAgICBjaGFyYWN0ZXJpc3RpY1tuYW1lXSA9IGNoYXJWYWx1ZVxuICAgIGlmICghY2hhclZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aCgnQCcpKSB7XG4gICAgICAgIGNvbnN0IGZvcm11bGEgPSBuYW1lLnJlcGxhY2UoJy52YWx1ZScsICcuZm9ybXVsYScpXG4gICAgICAgIGNoYXJhY3RlcmlzdGljW2Zvcm11bGFdID0gdmFsdWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShjaGFyYWN0ZXJpc3RpYylcbiAgICBhd2FpdCB0aGlzLnJlcG9ydENoYXJhY3RlZHJpdGljc1ZhbHVlKClcbiAgfVxuXG4gIGFzeW5jIGRldmVsb3BlbWVudFBoYXNlIChmYXN0Rm9yd2FyZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgZmFpbHVyZSA9IFtdXG4gICAgY29uc3Qgc3VjY2VzcyA9IFtdXG4gICAgY29uc3Qgc2tpbGxNYXN0ZXJpbmdUaHJlc2hvbGQgPSA5MFxuICAgIGNvbnN0IGFsd2F5c1N1Y2Nlc3NUaHJlc2hvbGQgPSA5NVxuXG4gICAgY29uc3QgdGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUm9sbEFsbDREZXYnKVxuICAgIGxldCBza2lsbHNSb2xsZWQgPSAwXG4gICAgbGV0IG1lc3NhZ2UgPSAnPHAgY2xhc3M9XCJjaGF0LWNhcmRcIj4nXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgaWYgKGl0ZW0uZGV2ZWxvcGVtZW50RmxhZykge1xuICAgICAgICAgIHNraWxsc1JvbGxlZCsrXG4gICAgICAgICAgY29uc3QgZGllID0gYXdhaXQgbmV3IERpZSh7IGZhY2VzOiAxMDAgfSkuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgIGNvbnN0IHNraWxsVmFsdWUgPSBpdGVtLnZhbHVlXG4gICAgICAgICAgbGV0IGF1Z21lbnQgPSBudWxsXG4gICAgICAgICAgbGV0IHNraWxsTWFzdGVyaW5nTWVzc2FnZSA9IG51bGxcbiAgICAgICAgICBpZiAoZGllLnRvdGFsID4gc2tpbGxWYWx1ZSB8fCBkaWUudG90YWwgPj0gYWx3YXlzU3VjY2Vzc1RocmVzaG9sZCkge1xuICAgICAgICAgICAgY29uc3QgYXVnbWVudERpZSA9IGF3YWl0IG5ldyBEaWUoeyBmYWNlczogMTAgfSkuZXZhbHVhdGUoe1xuICAgICAgICAgICAgICBhc3luYzogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHN1Y2Nlc3MucHVzaChpdGVtLmlkKVxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIFNBTiBhdWdtZW50IHdoZW4gdGhlIHNraWxsIGdvZXMgYmV5b25kIHRoZSBza2lsbCBtYXN0ZXJpbmcgdGhyZXNob2xkLlxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBza2lsbFZhbHVlIDwgc2tpbGxNYXN0ZXJpbmdUaHJlc2hvbGQgJiZcbiAgICAgICAgICAgICAgc2tpbGxWYWx1ZSArIGF1Z21lbnREaWUudG90YWwgPj0gc2tpbGxNYXN0ZXJpbmdUaHJlc2hvbGRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb25zdCBhdWdtZW50U0FORGllID0gYXdhaXQgbmV3IERpZSh7XG4gICAgICAgICAgICAgICAgZmFjZXM6IDYsXG4gICAgICAgICAgICAgICAgbnVtYmVyOiAyXG4gICAgICAgICAgICAgIH0pLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICAgICAgY29uc3Qgc2FuR2FpbmVkID0gYXVnbWVudFNBTkRpZS50b3RhbFxuICAgICAgICAgICAgICBjb25zdCBzYW5HYWluZWRNZXNzYWdlID0gYEdhaW5lZCAyZDYgKCR7YXVnbWVudFNBTkRpZS52YWx1ZXNbMF19ICsgJHthdWdtZW50U0FORGllLnZhbHVlc1sxXX0gPSAke3NhbkdhaW5lZH0pIFNBTmBcbiAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhzYW5HYWluZWRNZXNzYWdlKVxuICAgICAgICAgICAgICBza2lsbE1hc3RlcmluZ01lc3NhZ2UgPSBgPHNwYW4gY2xhc3M9XCJ1cGdyYWRlLXN1Y2Nlc3NcIj4ke2dhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgICAgJ0NvQzcuU2FuR2FpbmVkJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzOiBgJHthdWdtZW50U0FORGllLnZhbHVlc1swXX0gKyAke2F1Z21lbnRTQU5EaWUudmFsdWVzWzFdfWAsXG4gICAgICAgICAgICAgICAgICBzYW5HYWluZWQsXG4gICAgICAgICAgICAgICAgICBza2lsbDogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgc2tpbGxWYWx1ZTogc2tpbGxWYWx1ZSArIGF1Z21lbnREaWUudG90YWxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICl9PC9zcGFuPjxicj5gXG4gICAgICAgICAgICAgIC8vIFNldCBzYW4gY29udHJvbHMgdGhhdCBpdCBkb2Vzbid0IGF1Z21lbnQgYmV5b25kIHNhbk1heFxuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFNhbih0aGlzLnNhbiArIHNhbkdhaW5lZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF1Z21lbnQgKz0gYXVnbWVudERpZS50b3RhbFxuICAgICAgICAgICAgbWVzc2FnZSArPSBgPHNwYW4gY2xhc3M9XCJ1cGdyYWRlLXN1Y2Nlc3NcIj4ke2dhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgICdDb0M3LkRldlN1Y2Nlc3MnLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgIGRpZTogZGllLnRvdGFsLFxuICAgICAgICAgICAgICAgIHNjb3JlOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgICAgIGF1Z21lbnQ6IGF1Z21lbnREaWUudG90YWxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKX08L3NwYW4+PGJyPmBcbiAgICAgICAgICAgIGlmIChza2lsbE1hc3RlcmluZ01lc3NhZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZSArPSBza2lsbE1hc3RlcmluZ01lc3NhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGl0ZW0uaW5jcmVhc2VFeHBlcmllbmNlKGF1Z21lbnQpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYDxzcGFuIGNsYXNzPVwidXBncmFkZS1mYWlsZWRcIj4ke2dhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgICdDb0M3LkRldkZhaWx1cmUnLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgIGRpZTogZGllLnRvdGFsLFxuICAgICAgICAgICAgICAgIHNjb3JlOiBpdGVtLnZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICl9PC9zcGFuPjxicj5gXG4gICAgICAgICAgICBmYWlsdXJlLnB1c2goaXRlbS5pZClcbiAgICAgICAgICB9XG4gICAgICAgICAgYXdhaXQgaXRlbS51bmZsYWdGb3JEZXZlbG9wZW1lbnQoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudHMgPSBbXVxuICAgIGxldCBjaGFuZ2VkID0gZmFsc2VcbiAgICBmb3IgKGNvbnN0IHNhbml0eUxvc3NFdmVudCBvZiB0aGlzLnN5c3RlbS5zYW5pdHlMb3NzRXZlbnRzKSB7XG4gICAgICBpZiAoc2FuaXR5TG9zc0V2ZW50LmltbXVuaXR5KSB7XG4gICAgICAgIHNhbml0eUxvc3NFdmVudHMucHVzaChzYW5pdHlMb3NzRXZlbnQpXG4gICAgICB9IGVsc2UgaWYgKHNhbml0eUxvc3NFdmVudC50b3RhbExvc3MgPiAxKSB7XG4gICAgICAgIHNhbml0eUxvc3NFdmVudC50b3RhbExvc3MtLVxuICAgICAgICBzYW5pdHlMb3NzRXZlbnRzLnB1c2goc2FuaXR5TG9zc0V2ZW50KVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIGlmIChza2lsbHNSb2xsZWQpIHtcbiAgICAgICAgbWVzc2FnZSArPSAnPGJyPidcbiAgICAgIH1cbiAgICAgIG1lc3NhZ2UgKz0gYDxzcGFuPiR7Z2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZWR1Y2VTYW5pdHlMaW1pdHMnKX08L3NwYW4+YFxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLnNhbml0eUxvc3NFdmVudHMnOiBzYW5pdHlMb3NzRXZlbnRzXG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAoIWZhc3RGb3J3YXJkKSB7XG4gICAgICBtZXNzYWdlICs9ICc8L3A+J1xuICAgICAgY29uc3Qgc3BlYWtlciA9IHsgYWN0b3I6IHRoaXMgfVxuICAgICAgYXdhaXQgY2hhdEhlbHBlci5jcmVhdGVNZXNzYWdlKHNraWxsc1JvbGxlZCA/IHRpdGxlIDogJycsIG1lc3NhZ2UsIHtcbiAgICAgICAgc3BlYWtlclxuICAgICAgfSlcbiAgICAgIHRoaXMub25seVJ1bk9uY2VQZXJTZXNzaW9uID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4geyBmYWlsdXJlLCBzdWNjZXNzIH1cbiAgfVxuXG4gIGFzeW5jIGRldmVsb3BMdWNrIChmYXN0Rm9yd2FyZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgY3VycmVudEx1Y2sgPSB0aGlzLnN5c3RlbS5hdHRyaWJzLmxjay52YWx1ZVxuICAgIGlmICghY3VycmVudEx1Y2spIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5hdHRyaWJzLmxjay52YWx1ZSc6IDAgfSlcbiAgICBjb25zdCBwdWxwUnVsZURldmVsb3BtZW50Um9sbEx1Y2sgPSBnYW1lLnNldHRpbmdzLmdldChcbiAgICAgICdDb0M3JyxcbiAgICAgICdwdWxwUnVsZURldmVsb3BtZW50Um9sbEx1Y2snXG4gICAgKVxuICAgIGNvbnN0IHVwZ3JhZGVSb2xsID0gKGF3YWl0IG5ldyBSb2xsKCcxRDEwMCcpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KSkudG90YWxcbiAgICBjb25zdCBoaWdoZXJUaGFuQ3VycmVudEx1Y2sgPSB1cGdyYWRlUm9sbCA+IGN1cnJlbnRMdWNrXG4gICAgbGV0IGF1Z21lbnRSb2xsXG4gICAgaWYgKHB1bHBSdWxlRGV2ZWxvcG1lbnRSb2xsTHVjaykge1xuICAgICAgaGlnaGVyVGhhbkN1cnJlbnRMdWNrXG4gICAgICAgID8gKGF1Z21lbnRSb2xsID0gJzJEMTArMTAnKVxuICAgICAgICA6IChhdWdtZW50Um9sbCA9ICcxRDEwKzUnKVxuICAgIH0gZWxzZSBpZiAoaGlnaGVyVGhhbkN1cnJlbnRMdWNrKSB7XG4gICAgICBhdWdtZW50Um9sbCA9ICcxRDEwJ1xuICAgIH1cbiAgICBjb25zdCB0aXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Sb2xsTHVjazREZXYnKVxuICAgIGxldCBtZXNzYWdlID0gJzxwIGNsYXNzPVwiY2hhdC1jYXJkXCI+J1xuICAgIGlmIChwdWxwUnVsZURldmVsb3BtZW50Um9sbEx1Y2sgfHwgaGlnaGVyVGhhbkN1cnJlbnRMdWNrKSB7XG4gICAgICBjb25zdCBhdWdtZW50VmFsdWUgPSAoYXdhaXQgbmV3IFJvbGwoYXVnbWVudFJvbGwpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KSlcbiAgICAgICAgLnRvdGFsXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICdzeXN0ZW0uYXR0cmlicy5sY2sudmFsdWUnOlxuICAgICAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMubGNrLnZhbHVlICsgYXVnbWVudFZhbHVlXG4gICAgICB9KVxuICAgICAgbWVzc2FnZSArPSBgPHNwYW4gY2xhc3M9XCJ1cGdyYWRlLXN1Y2Nlc3NcIj4ke2dhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICdDb0M3Lkx1Y2tJbmNyZWFzZWQnLFxuICAgICAgICB7XG4gICAgICAgICAgZGllOiB1cGdyYWRlUm9sbCxcbiAgICAgICAgICBzY29yZTogY3VycmVudEx1Y2ssXG4gICAgICAgICAgYXVnbWVudDogYXVnbWVudFZhbHVlXG4gICAgICAgIH1cbiAgICAgICl9PC9zcGFuPmBcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZSArPSBgPHNwYW4gY2xhc3M9XCJ1cGdyYWRlLWZhaWxlZFwiPiR7Z2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgJ0NvQzcuTHVja05vdEluY3JlYXNlZCcsXG4gICAgICAgIHsgZGllOiB1cGdyYWRlUm9sbCwgc2NvcmU6IGN1cnJlbnRMdWNrIH1cbiAgICAgICl9PC9zcGFuPmBcbiAgICB9XG4gICAgaWYgKCFmYXN0Rm9yd2FyZCkge1xuICAgICAgbWVzc2FnZSArPSAnPC9wPidcbiAgICAgIGNvbnN0IHNwZWFrZXIgPSB7IGFjdG9yOiB0aGlzIH1cbiAgICAgIGF3YWl0IGNoYXRIZWxwZXIuY3JlYXRlTWVzc2FnZSh0aXRsZSwgbWVzc2FnZSwgeyBzcGVha2VyIH0pXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGV2ZWxvcFNraWxsIChza2lsbElkLCBmYXN0Rm9yd2FyZCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc2tpbGwgPSB0aGlzLml0ZW1zLmdldChza2lsbElkKVxuICAgIGlmICghc2tpbGwpIHJldHVyblxuICAgIGxldCB0aXRsZSA9ICcnXG4gICAgbGV0IG1lc3NhZ2UgPSAnJ1xuICAgIGNvbnN0IHVwZ3JhZGVSb2xsID0gbmV3IFJvbGwoJzFEMTAwJylcbiAgICBhd2FpdCB1cGdyYWRlUm9sbC5yb2xsKHsgYXN5bmM6IHRydWUgfSlcbiAgICBpZiAoIWZhc3RGb3J3YXJkKSBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZCh1cGdyYWRlUm9sbClcbiAgICBpZiAodXBncmFkZVJvbGwudG90YWwgPiBza2lsbC52YWx1ZSB8fCB1cGdyYWRlUm9sbC50b3RhbCA+PSA5NSkge1xuICAgICAgY29uc3QgYXVnbWVudFJvbGwgPSBuZXcgUm9sbCgnMUQxMCcpXG4gICAgICBhd2FpdCBhdWdtZW50Um9sbC5yb2xsKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgIGlmICghZmFzdEZvcndhcmQpIGF3YWl0IENvQzdEaWNlLnNob3dSb2xsRGljZTNkKGF1Z21lbnRSb2xsKVxuICAgICAgbWVzc2FnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRGV2U3VjY2Vzc0RldGFpbHMnLCB7XG4gICAgICAgIGl0ZW06IHNraWxsLm5hbWUsXG4gICAgICAgIGF1Z21lbnQ6IGF1Z21lbnRSb2xsLnRvdGFsXG4gICAgICB9KVxuICAgICAgdGl0bGUgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRldlJvbGxUaXRsZScsIHtcbiAgICAgICAgaXRlbTogc2tpbGwubmFtZSxcbiAgICAgICAgZGllOiB1cGdyYWRlUm9sbC50b3RhbCxcbiAgICAgICAgc2NvcmU6IHNraWxsLnZhbHVlXG4gICAgICB9KVxuICAgICAgYXdhaXQgc2tpbGwuaW5jcmVhc2VFeHBlcmllbmNlKGF1Z21lbnRSb2xsLnRvdGFsKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRGV2Um9sbFRpdGxlJywge1xuICAgICAgICBpdGVtOiBza2lsbC5uYW1lLFxuICAgICAgICBkaWU6IHVwZ3JhZGVSb2xsLnRvdGFsLFxuICAgICAgICBzY29yZTogc2tpbGwudmFsdWVcbiAgICAgIH0pXG4gICAgICBtZXNzYWdlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5EZXZGYWlsdXJlRGV0YWlscycsIHtcbiAgICAgICAgaXRlbTogc2tpbGwubmFtZVxuICAgICAgfSlcbiAgICB9XG4gICAgY29uc3Qgc3BlYWtlciA9IHsgYWN0b3I6IHRoaXMuX2lkIH1cbiAgICBhd2FpdCBjaGF0SGVscGVyLmNyZWF0ZU1lc3NhZ2UodGl0bGUsIG1lc3NhZ2UsIHsgc3BlYWtlciB9KVxuICAgIGF3YWl0IHNraWxsLnVuZmxhZ0ZvckRldmVsb3BlbWVudCgpXG4gIH1cblxuICBoYXNDb25kaXRpb25TdGF0dXMgKGNvbmRpdGlvbk5hbWUpIHtcbiAgICBjb25zdCBjb25kaXRpb25WYWx1ZSA9IHRoaXMuc3lzdGVtLmNvbmRpdGlvbnM/Lltjb25kaXRpb25OYW1lXT8udmFsdWVcbiAgICBpZiAodHlwZW9mIGNvbmRpdGlvblZhbHVlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiBmYWxzZSAvLyBOZWNlc3NhcnksIGluY29ycmVjdCB0ZW1wbGF0ZSBpbml0aWFsaXphdGlvblxuICAgIH1cbiAgICByZXR1cm4gY29uZGl0aW9uVmFsdWVcbiAgfVxuXG4gIGhhc0NvbmRpdGlvblZhbHVlIChjb25kaXRpb25OYW1lLCBmaWVsZCkge1xuICAgIGlmICghdGhpcy5oYXNDb25kaXRpb25TdGF0dXMoY29uZGl0aW9uTmFtZSkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgaWYgKGNvbmRpdGlvbk5hbWUgPT09IENPQzcuc3RhdHVzLnRlbXBvSW5zYW5lICYmIGZpZWxkID09PSAnZHVyYXRpb25UZXh0Jykge1xuICAgICAgY29uc3QgcmVhbFRpbWUgPSB0aGlzLmhhc0NvbmRpdGlvblZhbHVlKGNvbmRpdGlvbk5hbWUsICdyZWFsVGltZScpXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuaGFzQ29uZGl0aW9uVmFsdWUoY29uZGl0aW9uTmFtZSwgJ2R1cmF0aW9uJylcbiAgICAgIGlmICh0eXBlb2YgZHVyYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChyZWFsVGltZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBkdXJhdGlvbiArICcgJyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5yb3VuZHMnKVxuICAgICAgICB9IGVsc2UgaWYgKHJlYWxUaW1lID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBkdXJhdGlvbiArICcgJyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5ob3VycycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJ1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uY29uZGl0aW9ucz8uW2NvbmRpdGlvbk5hbWVdPy5bZmllbGRdXG4gIH1cblxuICBhc3luYyB0b2dnbGVDb25kaXRpb24gKGNvbmRpdGlvbk5hbWUpIHtcbiAgICBjb25zdCBjb25kaXRpb25WYWx1ZSA9IHRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKGNvbmRpdGlvbk5hbWUpXG4gICAgaWYgKCFjb25kaXRpb25WYWx1ZSkge1xuICAgICAgYXdhaXQgdGhpcy5zZXRDb25kaXRpb24oY29uZGl0aW9uTmFtZSlcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdGhpcy51bnNldENvbmRpdGlvbihjb25kaXRpb25OYW1lKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNldENvbmRpdGlvbiAoXG4gICAgY29uZGl0aW9uTmFtZSxcbiAgICB7XG4gICAgICBmb3JjZVZhbHVlID0gZmFsc2UsXG4gICAgICBqdXN0VGhpcyA9IGZhbHNlLFxuICAgICAgcmVhbFRpbWUgPSBudWxsLFxuICAgICAgZHVyYXRpb24gPSBudWxsXG4gICAgfSA9IHt9XG4gICkge1xuICAgIGlmICghZm9yY2VWYWx1ZSAmJiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdlbmFibGVTdGF0dXNJY29ucycpKSB7XG4gICAgICBjb25zdCBlZmZlY3RzID0gdGhpcy5lZmZlY3RzXG4gICAgICAgIC5maWx0ZXIoZWZmZWN0ID0+IENvQzdBY3RpdmVFZmZlY3QuZmlsdGVyQWN0aXZlRWZmZWN0cyhlZmZlY3QsIGNvbmRpdGlvbk5hbWUpKVxuICAgICAgICAubWFwKGVmZmVjdCA9PiBlZmZlY3QuaWQpXG4gICAgICBjb25zdCBjdXN0b20gPSB7fVxuICAgICAgc3dpdGNoIChjb25kaXRpb25OYW1lKSB7XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuZGVhZDpcbiAgICAgICAgICBjdXN0b20uZmxhZ3MgPSB7XG4gICAgICAgICAgICBjb3JlOiB7XG4gICAgICAgICAgICAgIG92ZXJsYXk6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy50ZW1wb0luc2FuZTpcbiAgICAgICAgICBjdXN0b20uZmxhZ3MgPSB7XG4gICAgICAgICAgICBDb0M3OiB7XG4gICAgICAgICAgICAgIHJlYWxUaW1lOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY3VzdG9tLmR1cmF0aW9uID0ge1xuICAgICAgICAgICAgcm91bmRzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzZWNvbmRzOiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlYWxUaW1lID09PSB0cnVlIHx8IHJlYWxUaW1lID09PSBmYWxzZSkge1xuICAgICAgICAgICAgY3VzdG9tLmZsYWdzLkNvQzcucmVhbFRpbWUgPSByZWFsVGltZVxuICAgICAgICAgICAgY3VzdG9tLmZsYWdzID0ge1xuICAgICAgICAgICAgICBDb0M3OiB7XG4gICAgICAgICAgICAgICAgcmVhbFRpbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSBudWxsICYmIHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgaWYgKHJlYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tLmR1cmF0aW9uLnJvdW5kcyA9IGR1cmF0aW9uXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tLmR1cmF0aW9uLnNlY29uZHMgPSBkdXJhdGlvbiAqIDM2MDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKGVmZmVjdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IENPTkZJRy5zdGF0dXNFZmZlY3RzLmZpbHRlcihcbiAgICAgICAgICBlZmZlY3QgPT4gZWZmZWN0LmlkID09PSBjb25kaXRpb25OYW1lXG4gICAgICAgIClcbiAgICAgICAgaWYgKGVmZmVjdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBjb25zdCBzb3VyY2UgPSB7XG4gICAgICAgICAgICBpY29uOiBlZmZlY3RbMF0uaWNvbixcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWZvdW5kcnkudXRpbHMuaXNOZXdlclZlcnNpb24oZ2FtZS52ZXJzaW9uLCAnMTEnKSkge1xuICAgICAgICAgICAgLy8gRm91bmRyeVZUVCB2MTBcbiAgICAgICAgICAgIHNvdXJjZS5sYWJlbCA9IGdhbWUuaTE4bi5sb2NhbGl6ZShlZmZlY3RbMF0ubGFiZWwpXG4gICAgICAgICAgICBzb3VyY2UuZmxhZ3MgPSB7XG4gICAgICAgICAgICAgIGNvcmU6IHtcbiAgICAgICAgICAgICAgICBzdGF0dXNJZDogZWZmZWN0WzBdLmlkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc291cmNlLm5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoZWZmZWN0WzBdLm5hbWUpXG4gICAgICAgICAgICBzb3VyY2Uuc3RhdHVzZXMgPSBbZWZmZWN0WzBdLmlkXVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBlZmZlY3REYXRhID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzb3VyY2UsIGN1c3RvbSlcbiAgICAgICAgICBhd2FpdCBzdXBlci5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnQWN0aXZlRWZmZWN0JywgW2VmZmVjdERhdGFdKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoaXMgZG9lc24ndCBleGlzdCBpbiBGb3VuZHJ5VlRUIEFjdGl2ZUVmZmVjdHM/XG4gICAgICAgICAgZm9yY2VWYWx1ZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VzdG9tLl9pZCA9IGVmZmVjdHNbMF1cbiAgICAgICAgYXdhaXQgc3VwZXIudXBkYXRlRW1iZWRkZWREb2N1bWVudHMoJ0FjdGl2ZUVmZmVjdCcsIFtjdXN0b21dKVxuICAgICAgICBmb3JjZVZhbHVlID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZm9yY2VWYWx1ZSB8fCAhZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZW5hYmxlU3RhdHVzSWNvbnMnKSkge1xuICAgICAgc3dpdGNoIChjb25kaXRpb25OYW1lKSB7XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuaW5kZWZJbnNhbmU6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMudW5jb25zY2lvdXM6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuY3JpdGljYWxXb3VuZHM6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuZHlpbmc6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMucHJvbmU6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuZGVhZDpcbiAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgICBbYHN5c3RlbS5jb25kaXRpb25zLiR7Y29uZGl0aW9uTmFtZX0udmFsdWVgXTogdHJ1ZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy50ZW1wb0luc2FuZTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHMgPSB7fVxuICAgICAgICAgICAgZmllbGRzW2BzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbk5hbWV9LnZhbHVlYF0gPSB0cnVlXG4gICAgICAgICAgICBpZiAocmVhbFRpbWUgPT09IHRydWUgfHwgcmVhbFRpbWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGZpZWxkc1tgc3lzdGVtLmNvbmRpdGlvbnMuJHtjb25kaXRpb25OYW1lfS5yZWFsVGltZWBdID0gcmVhbFRpbWVcbiAgICAgICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSBudWxsICYmIHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBmaWVsZHNbYHN5c3RlbS5jb25kaXRpb25zLiR7Y29uZGl0aW9uTmFtZX0uZHVyYXRpb25gXSA9IGR1cmF0aW9uXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiAgICAgICAgICAgICAgICBmaWVsZHMsXG4gICAgICAgICAgICAgICAgYHN5c3RlbS5jb25kaXRpb25zLiR7Y29uZGl0aW9uTmFtZX0ucmVhbFRpbWVgXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBmaWVsZHNbYHN5c3RlbS5jb25kaXRpb25zLiR7Y29uZGl0aW9uTmFtZX0uLT1yZWFsVGltZWBdID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuICAgICAgICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICAgICAgICBgc3lzdGVtLmNvbmRpdGlvbnMuJHtjb25kaXRpb25OYW1lfS5kdXJhdGlvbmBcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGZpZWxkc1tgc3lzdGVtLmNvbmRpdGlvbnMuJHtjb25kaXRpb25OYW1lfS4tPWR1cmF0aW9uYF0gPSBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZShmaWVsZHMpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAoIWp1c3RUaGlzKSB7XG4gICAgICAgIC8vIERvZXMgc2V0dGluZyB0aGUgY29uZGl0aW9uIGFsc28gdHJpZ2dlciBvdGhlciBhY3Rpb25zP1xuICAgICAgICAvLyAtIElmIEFjdGl2ZUVmZmVjdHMgYXJlIGFkZGVkIGhhc0NvbmRpdGlvblN0YXR1cyBmb3IgcmVjZW50bHkgYWRkZWQgY29uZGl0aW9ucyBtYXkgcmV0dXJuIGluY29ycmVjdGx5XG4gICAgICAgIHN3aXRjaCAoY29uZGl0aW9uTmFtZSkge1xuICAgICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuY3JpdGljYWxXb3VuZHM6XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5wcm9uZSlcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIXRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLnVuY29uc2Npb3VzKSAmJlxuICAgICAgICAgICAgICAhdGhpcy5oYXNDb25kaXRpb25TdGF0dXMoQ09DNy5zdGF0dXMuZGVhZClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb25zdCBjb25DaGVjayA9IG5ldyBDb0M3Q29uQ2hlY2soXG4gICAgICAgICAgICAgICAgdGhpcy5pc1Rva2VuID8gdGhpcy50b2tlbktleSA6IHRoaXMuaWRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBjb25DaGVjay50b01lc3NhZ2UoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmRlYWQ6XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy51bnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5keWluZylcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudW5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudW5jb25zY2lvdXMpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdW5zZXRDb25kaXRpb24gKGNvbmRpdGlvbk5hbWUsIHsgZm9yY2VWYWx1ZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGlmICghZm9yY2VWYWx1ZSAmJiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdlbmFibGVTdGF0dXNJY29ucycpKSB7XG4gICAgICBjb25zdCBlZmZlY3RzID0gdGhpcy5lZmZlY3RzXG4gICAgICAgIC5maWx0ZXIoZWZmZWN0ID0+IENvQzdBY3RpdmVFZmZlY3QuZmlsdGVyQWN0aXZlRWZmZWN0cyhlZmZlY3QsIGNvbmRpdGlvbk5hbWUpKVxuICAgICAgICAubWFwKGVmZmVjdCA9PiBlZmZlY3QuaWQpXG4gICAgICBpZiAoZWZmZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmRlbGV0ZUVtYmVkZGVkRG9jdW1lbnRzKCdBY3RpdmVFZmZlY3QnLCBlZmZlY3RzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yY2VWYWx1ZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvcmNlVmFsdWUgfHwgIWdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2VuYWJsZVN0YXR1c0ljb25zJykpIHtcbiAgICAgIHN3aXRjaCAoY29uZGl0aW9uTmFtZSkge1xuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLnRlbXBvSW5zYW5lOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmluZGVmSW5zYW5lOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLnVuY29uc2Npb3VzOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmR5aW5nOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLnByb25lOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmRlYWQ6XG4gICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAgICAgW2BzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbk5hbWV9Li09dmFsdWVgXTogbnVsbFxuICAgICAgICAgIH0pXG4gICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAgICAgW2BzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbk5hbWV9LnZhbHVlYF06IGZhbHNlXG4gICAgICAgICAgfSlcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE8gOiBjaGVjayBpZiBldmVyIHVzZWRcbiAgYXN5bmMgcmVzZXRDb3VudGVyIChjb3VudGVyKSB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoeyBbY291bnRlcl06IDAgfSlcbiAgfVxuXG4gIGFzeW5jIHJlc2V0RGFpbHlTYW5pdHkgKCkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICdzeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMaW1pdCc6IE1hdGguZmxvb3IoXG4gICAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlIC8gNVxuICAgICAgKSxcbiAgICAgICdzeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMb3NzJzogMFxuICAgIH0pXG4gIH1cblxuICBnZXQgZmlnaHRpbmdTa2lsbHMgKCkge1xuICAgIGNvbnN0IHNraWxsTGlzdCA9IFtdXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ3NraWxsJyAmJiB2YWx1ZS5zeXN0ZW0ucHJvcGVydGllcy5maWdodGluZykge1xuICAgICAgICBza2lsbExpc3QucHVzaCh2YWx1ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBza2lsbExpc3Quc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICByZXR1cm4gc2tpbGxMaXN0XG4gIH1cblxuICBnZXQgY2xvc2VDb21iYXRXZWFwb25zICgpIHtcbiAgICBjb25zdCB3ZWFwb25MaXN0ID0gW11cbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGlmICh2YWx1ZS50eXBlID09PSAnd2VhcG9uJyAmJiAhdmFsdWUuc3lzdGVtLnByb3BlcnRpZXMucm5nZCkge1xuICAgICAgICBjb25zdCBza2lsbCA9IHRoaXMuaXRlbXMuZ2V0KHZhbHVlLnN5c3RlbS5za2lsbC5tYWluLmlkKVxuICAgICAgICB2YWx1ZS5zeXN0ZW0uc2tpbGwubWFpbi52YWx1ZSA9IHNraWxsID8gc2tpbGwudmFsdWUgOiAwXG4gICAgICAgIHdlYXBvbkxpc3QucHVzaCh2YWx1ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3ZWFwb25MaXN0LnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgcmV0dXJuIHdlYXBvbkxpc3RcbiAgfVxuXG4gIGdldCBmaXJlYXJtU2tpbGxzICgpIHtcbiAgICBjb25zdCBza2lsbExpc3QgPSBbXVxuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy5pdGVtcykge1xuICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdza2lsbCcgJiYgdmFsdWUuc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSkge1xuICAgICAgICBza2lsbExpc3QucHVzaCh2YWx1ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBza2lsbExpc3Quc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICByZXR1cm4gc2tpbGxMaXN0XG4gIH1cblxuICBnZXQgdXNlciAoKSB7XG4gICAgLy8gaXMgdGhhdCBhY3RvciBpbXBlcnNvbmFudGVkIGJ5IGEgdXNlciA/XG4gICAgcmV0dXJuIGdhbWUudXNlcnMuZmluZCh1c2VyID0+IHtcbiAgICAgIGlmICh1c2VyLmNoYXJhY3Rlcikge1xuICAgICAgICBpZiAodXNlci5jaGFyYWN0ZXIuaWQgPT09IHRoaXMuaWQpIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuICB9XG5cbiAgZ2V0IGRvZGdlU2tpbGwgKCkge1xuICAgIGNvbnN0IHNraWxsID0gdGhpcy5nZXRGaXJzdFNraWxsQnlDb0NJRCgnaS5za2lsbC5kb2RnZScpXG4gICAgaWYgKHNraWxsKSB7XG4gICAgICByZXR1cm4gc2tpbGxcbiAgICB9XG4gICAgY29uc3Qgc2tpbGxMaXN0ID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUoXG4gICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29DSURGbGFnLmtleXMuaS5za2lsbC5kb2RnZScpXG4gICAgKVxuICAgIGlmIChza2lsbExpc3QubGVuZ3RoICE9PSAwKSByZXR1cm4gc2tpbGxMaXN0WzBdXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBjcmVkaXRSYXRpbmdTa2lsbCAoKSB7XG4gICAgY29uc3Qgc2tpbGwgPSB0aGlzLmdldEZpcnN0U2tpbGxCeUNvQ0lEKCdpLnNraWxsLmNyZWRpdC1yYXRpbmcnKVxuICAgIGlmIChza2lsbCkge1xuICAgICAgcmV0dXJuIHNraWxsXG4gICAgfVxuICAgIGNvbnN0IHNraWxsTGlzdCA9IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKFxuICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvQ0lERmxhZy5rZXlzLmkuc2tpbGwuY3JlZGl0LXJhdGluZycpXG4gICAgKVxuICAgIGlmIChza2lsbExpc3QubGVuZ3RoICE9PSAwKSByZXR1cm4gc2tpbGxMaXN0WzBdXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBjdGh1bGh1TXl0aG9zU2tpbGwgKCkge1xuICAgIGNvbnN0IHNraWxsID0gdGhpcy5nZXRGaXJzdFNraWxsQnlDb0NJRCgnaS5za2lsbC5jdGh1bGh1LW15dGhvcycpXG4gICAgaWYgKHNraWxsKSB7XG4gICAgICByZXR1cm4gc2tpbGxcbiAgICB9XG4gICAgY29uc3Qgc2tpbGxMaXN0ID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUoXG4gICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29DSURGbGFnLmtleXMuaS5za2lsbC5jdGh1bGh1LW15dGhvcycpXG4gICAgKVxuICAgIGlmIChza2lsbExpc3QubGVuZ3RoICE9PSAwKSByZXR1cm4gc2tpbGxMaXN0WzBdXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBjdGh1bGh1TXl0aG9zICgpIHtcbiAgICBjb25zdCBDTSA9IHRoaXMuY3RodWxodU15dGhvc1NraWxsXG4gICAgaWYgKENNKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IENNLnZhbHVlXG4gICAgICBpZiAodmFsdWUpIHJldHVybiB2YWx1ZVxuICAgICAgcmV0dXJuIHBhcnNlSW50KENNLnN5c3RlbS52YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIGdldCBteXRob3NIYXJkZW5lZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RmxhZygnQ29DNycsICdteXRob3NIYXJkZW5lZCcpIHx8IGZhbHNlXG4gIH1cblxuICBhc3luYyBzZXRNeXRob3NIYXJkZW5lZCAoKSB7XG4gICAgYXdhaXQgdGhpcy5zZXRGbGFnKCdDb0M3JywgJ215dGhvc0hhcmRlbmVkJywgdHJ1ZSlcbiAgfVxuXG4gIGdldCBteXRob3NJbnNhbml0eUV4cGVyaWVuY2VkICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRGbGFnKCdDb0M3JywgJ215dGhvc0luc2FuaXR5RXhwZXJpZW5jZWQnKSB8fCBmYWxzZVxuICB9XG5cbiAgYXN5bmMgZXhwZXJpZW5jZUZpcnN0TXl0aG9zSW5zYW5pdHkgKCkge1xuICAgIGF3YWl0IHRoaXMuc2V0RmxhZygnQ29DNycsICdteXRob3NJbnNhbml0eUV4cGVyaWVuY2VkJywgdHJ1ZSlcbiAgfVxuXG4gIGdldCBjcmVkaXRSYXRpbmcgKCkge1xuICAgIGNvbnN0IENSID0gdGhpcy5jcmVkaXRSYXRpbmdTa2lsbFxuICAgIGlmIChDUikge1xuICAgICAgY29uc3QgdmFsdWUgPSBDUi52YWx1ZVxuICAgICAgaWYgKHZhbHVlKSByZXR1cm4gdmFsdWVcbiAgICAgIHJldHVybiBwYXJzZUludChDUi5zeXN0ZW0udmFsdWUpXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cblxuICBzdGF0aWMgbW9uZXRhcnlGb3JtYXQgKGZvcm1hdCwgc3ltYm9sLCB2YWx1ZSkge1xuICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICBjYXNlIENPQzcubW9uZXRhcnlGb3JtYXRLZXlzLmxzZDpcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodmFsdWUgLyAyNDApICsgJy8nICsgKE1hdGguZmxvb3IodmFsdWUgLyAxMikgJSAyMCkgKyAnLycgKyAodmFsdWUgJSAxMilcbiAgICAgIGNhc2UgQ09DNy5tb25ldGFyeUZvcm1hdEtleXMucm9tYW46XG4gICAgICAgIHJldHVybiAoTWF0aC5mbG9vcih2YWx1ZSAvIDQwMCkpICsgJy8nICsgKE1hdGguZmxvb3IodmFsdWUgLyAxNikgJSAyNSkgKyAnLycgKyAoTWF0aC5mbG9vcih2YWx1ZSAvIDgpICUgMikgKyAnLycgKyAoTWF0aC5mbG9vcih2YWx1ZSAvIDQpICUgMikgKyAnLycgKyAodmFsdWUgJSA0KVxuICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5Rm9ybWF0S2V5cy5kZWNpbWFsTGVmdDpcbiAgICAgICAgcmV0dXJuIHN5bWJvbCArIE51bWJlcih2YWx1ZSkudG9Mb2NhbGVTdHJpbmcodW5kZWZpbmVkLCB7IG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMiB9KS5yZXBsYWNlKC9cXC4wMCQvLCAnJylcbiAgICAgIGNhc2UgQ09DNy5tb25ldGFyeUZvcm1hdEtleXMuZGVjaW1hbFJpZ2h0OlxuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKS50b0xvY2FsZVN0cmluZyh1bmRlZmluZWQsIHsgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyIH0pLnJlcGxhY2UoL1xcLjAwJC8sICcnKSArICcgJyArIHN5bWJvbFxuICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5Rm9ybWF0S2V5cy5pbnRlZ2VyTGVmdDpcbiAgICAgICAgcmV0dXJuIHN5bWJvbCArIE51bWJlcih2YWx1ZSkudG9Mb2NhbGVTdHJpbmcoKVxuICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5Rm9ybWF0S2V5cy5pbnRlZ2VyUmlnaHQ6XG4gICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpLnRvTG9jYWxlU3RyaW5nKCkgKyAnICcgKyBzeW1ib2xcbiAgICB9XG4gICAgcmV0dXJuICcwJ1xuICB9XG5cbiAgc3RhdGljIG1vbmV0YXJ5VmFsdWUgKGZvcm1hdCwgdmFsdWVzLCBDUiwgdHlwZSwgdmFsdWUpIHtcbiAgICBDUiA9IENSIHx8IDBcbiAgICBjb25zdCByb3cgPSB2YWx1ZXMuZmluZChyID0+ICh0eXBlb2Ygci5taW4gPT09ICdvYmplY3QnIHx8IHIubWluIDw9IENSKSAmJiAodHlwZW9mIHIubWF4ID09PSAnb2JqZWN0JyB8fCByLm1heCA+PSBDUikpXG4gICAgaWYgKHR5cGVvZiByb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiByb3dbdHlwZV0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiByb3dbdmFsdWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5Rm9ybWF0S2V5cy5sc2Q6XG4gICAgICAgICAgc3dpdGNoIChyb3dbdHlwZV0pIHtcbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLm11bHRpcGxpZXI6XG4gICAgICAgICAgICAgIHJldHVybiAyNDAgKiBDUiAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLnZhbHVlOlxuICAgICAgICAgICAgICByZXR1cm4gMjQwICogcm93W3ZhbHVlXVxuICAgICAgICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5VHlwZUtleXMuczpcbiAgICAgICAgICAgICAgcmV0dXJuIDEyICogcm93W3ZhbHVlXVxuICAgICAgICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5VHlwZUtleXMuZDpcbiAgICAgICAgICAgICAgcmV0dXJuIDEgKiByb3dbdmFsdWVdXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeUZvcm1hdEtleXMucm9tYW46XG4gICAgICAgICAgc3dpdGNoIChyb3dbdHlwZV0pIHtcbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLm11bHRpcGxpZXI6XG4gICAgICAgICAgICAgIHJldHVybiA0MDAgKiBDUiAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLnZhbHVlOlxuICAgICAgICAgICAgICByZXR1cm4gNDAwICogcm93W3ZhbHVlXVxuICAgICAgICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5VHlwZUtleXMuZGVuYXJpaTpcbiAgICAgICAgICAgICAgcmV0dXJuIDE2ICogcm93W3ZhbHVlXVxuICAgICAgICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5VHlwZUtleXMucXVpbmFyaWk6XG4gICAgICAgICAgICAgIHJldHVybiA4ICogcm93W3ZhbHVlXVxuICAgICAgICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5VHlwZUtleXMuc2VzdGVydGlpOlxuICAgICAgICAgICAgICByZXR1cm4gNCAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLmFzc2VzOlxuICAgICAgICAgICAgICByZXR1cm4gMSAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzd2l0Y2ggKHJvd1t0eXBlXSkge1xuICAgICAgICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5VHlwZUtleXMubXVsdGlwbGllcjpcbiAgICAgICAgICAgICAgcmV0dXJuIENSICogcm93W3ZhbHVlXVxuICAgICAgICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5VHlwZUtleXMudmFsdWU6XG4gICAgICAgICAgICAgIHJldHVybiAxICogcm93W3ZhbHVlXVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMFxuICB9XG5cbiAgZ2V0IHNwZW5kaW5nTGV2ZWwgKCkge1xuICAgIHJldHVybiBDb0NBY3Rvci5tb25ldGFyeVZhbHVlKHRoaXMuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdCwgdGhpcy5zeXN0ZW0ubW9uZXRhcnkudmFsdWVzLCB0aGlzLmNyZWRpdFJhdGluZywgJ3NwZW5kaW5nVHlwZScsICdzcGVuZGluZ1ZhbHVlJylcbiAgfVxuXG4gIGdldCBjYXNoICgpIHtcbiAgICByZXR1cm4gQ29DQWN0b3IubW9uZXRhcnlWYWx1ZSh0aGlzLnN5c3RlbS5tb25ldGFyeS5mb3JtYXQsIHRoaXMuc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcywgdGhpcy5jcmVkaXRSYXRpbmcsICdjYXNoVHlwZScsICdjYXNoVmFsdWUnKVxuICB9XG5cbiAgZ2V0IGFzc2V0cyAoKSB7XG4gICAgcmV0dXJuIENvQ0FjdG9yLm1vbmV0YXJ5VmFsdWUodGhpcy5zeXN0ZW0ubW9uZXRhcnkuZm9ybWF0LCB0aGlzLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMsIHRoaXMuY3JlZGl0UmF0aW5nLCAnYXNzZXRzVHlwZScsICdhc3NldHNWYWx1ZScpXG4gIH1cblxuICBnZXQgc2tpbGxzICgpIHtcbiAgICBjb25zdCBza2lsbExpc3QgPSBbXVxuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy5pdGVtcykge1xuICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdza2lsbCcpIHNraWxsTGlzdC5wdXNoKHZhbHVlKVxuICAgIH1cblxuICAgIHNraWxsTGlzdC5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcblxuICAgIHJldHVybiBza2lsbExpc3RcbiAgfVxuXG4gIGdldCBvd25lcnMgKCkge1xuICAgIHJldHVybiBnYW1lLnVzZXJzLmZpbHRlcihcbiAgICAgIHUgPT4gdGhpcy50ZXN0VXNlclBlcm1pc3Npb24odSwgJ09XTkVSJykgJiYgIXUuaXNHTVxuICAgIClcbiAgfVxuXG4gIGdldCBwbGF5ZXIgKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVycy5maWx0ZXIodSA9PiB1LmNoYXJhY3Rlcj8uaWQgPT09IHRoaXMuaWQpXG4gIH1cblxuICBnZXQgY2hhcmFjdGVyVXNlciAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGdhbWUudXNlcnMuY29udGVudHMuZmlsdGVyKHUgPT4gdS5jaGFyYWN0ZXI/LmlkID09PSB0aGlzLmlkKVswXSB8fCBudWxsXG4gICAgKVxuICB9XG5cbiAgYXN5bmMgc2V0SHAgKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwXG4gICAgaWYgKHZhbHVlID4gdGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXgpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXhcbiAgICB9XG4gICAgY29uc3QgaGVhbHRoQmVmb3JlID0gdGhpcy5ocFxuICAgIGxldCBkYW1hZ2VUYWtlblxuICAgIC8vIGlzIGhlYWxpbmdcbiAgICBpZiAoaXNOYU4oaGVhbHRoQmVmb3JlKSB8fCB2YWx1ZSA+PSBoZWFsdGhCZWZvcmUpIHtcbiAgICAgIGF3YWl0IHRoaXMuX3NldEhwKHZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBkYW1hZ2VUYWtlbiA9IGhlYWx0aEJlZm9yZSAtIHZhbHVlXG4gICAgICBhd2FpdCB0aGlzLmRlYWxEYW1hZ2UoZGFtYWdlVGFrZW4sIHsgaWdub3JlQXJtb3I6IHRydWUgfSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICBhc3luYyBkZWFsRGFtYWdlIChhbW91bnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIC8vIFRPRE86IENoYW5nZSBvcHRpb25zIHRvIGxpc3Qgb2YgdmFsdWVzXG4gICAgY29uc3QgYXJtb3JEYXRhID0gb3B0aW9ucy5hcm1vclxuICAgICAgPyBvcHRpb25zLmFybW9yXG4gICAgICA6IHRoaXMuc3lzdGVtLmF0dHJpYnMuYXJtb3IgLy8gaWYgdGhlcmUgYXJtb3IgdmFsdWUgcGFzc2VkIHdlIHVzZSBpdFxuICAgIGNvbnN0IGdyb3NzRGFtYWdlID0gcGFyc2VJbnQoYW1vdW50KVxuICAgIGxldCBhcm1vclZhbHVlID0gMFxuICAgIGlmICghb3B0aW9ucy5pZ25vcmVBcm1vcikge1xuICAgICAgaWYgKGFybW9yRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBub3BcbiAgICAgIH0gZWxzZSBpZiAoQ29DN1V0aWxpdGllcy5pc0Zvcm11bGEoYXJtb3JEYXRhKSkge1xuICAgICAgICBhcm1vclZhbHVlID0gKGF3YWl0IG5ldyBSb2xsKGFybW9yRGF0YSkucm9sbCh7IGFzeW5jOiB0cnVlIH0pKS50b3RhbFxuICAgICAgfSBlbHNlIGlmICghaXNOYU4oTnVtYmVyKGFybW9yRGF0YSkpKSB7XG4gICAgICAgIGFybW9yVmFsdWUgPSBOdW1iZXIoYXJtb3JEYXRhKVxuICAgICAgfSBlbHNlIGlmICghaXNOYU4oTnVtYmVyKGFybW9yRGF0YT8udmFsdWUpKSkge1xuICAgICAgICBhcm1vclZhbHVlID0gTnVtYmVyKGFybW9yRGF0YS52YWx1ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yVW5hYmxlVG9QYXJzZUFybW9yRm9ybXVsYScsIHtcbiAgICAgICAgICAgIHZhbHVlOiBhcm1vckRhdGFcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5ldERhbWFnZSA9IGdyb3NzRGFtYWdlIC0gYXJtb3JWYWx1ZVxuICAgIGlmIChuZXREYW1hZ2UgPD0gMCkgcmV0dXJuIDBcbiAgICBhd2FpdCB0aGlzLl9zZXRIcCh0aGlzLmhwIC0gbmV0RGFtYWdlKVxuICAgIGlmIChuZXREYW1hZ2UgPj0gdGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXgpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmRlYWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUlnbm9yZU1ham9yV291bmRzJykpIHtcbiAgICAgICAgaWYgKHRoaXMuaHAgPT09IDApIHtcbiAgICAgICAgICBpZiAobmV0RGFtYWdlID49IE1hdGguY2VpbCh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heCAvIDIpKSB7XG4gICAgICAgICAgICB0aGlzLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5keWluZylcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudW5jb25zY2lvdXMpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ldERhbWFnZSA+PSBNYXRoLmNlaWwodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXggLyAyKSkge1xuICAgICAgICAgIGNvbnN0IGNvbkNoZWNrID0gbmV3IENvQzdDb25DaGVjayhcbiAgICAgICAgICAgIHRoaXMuaXNUb2tlbiA/IHRoaXMudG9rZW5LZXkgOiB0aGlzLmlkXG4gICAgICAgICAgKVxuICAgICAgICAgIGNvbkNoZWNrLnRvTWVzc2FnZSgpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBoYXNNYWpvcldvdW5kID0gZmFsc2VcbiAgICAgICAgaWYgKG5ldERhbWFnZSA+PSBNYXRoLmNlaWwodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXggLyAyKSkge1xuICAgICAgICAgIGF3YWl0IHRoaXMuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzKVxuICAgICAgICAgIGhhc01ham9yV291bmQgPSB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFzTWFqb3JXb3VuZCA9IHRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhwID09PSAwKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudW5jb25zY2lvdXMpXG4gICAgICAgICAgaWYgKGhhc01ham9yV291bmQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmR5aW5nKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV0RGFtYWdlXG4gIH1cblxuICBnZXQgbWFqb3JXb3VuZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzKVxuICB9XG5cbiAgZ2V0IGR5aW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDb25kaXRpb25TdGF0dXMoQ09DNy5zdGF0dXMuZHlpbmcpXG4gIH1cblxuICBnZXQgdW5jb25zY2lvdXMgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0NvbmRpdGlvblN0YXR1cyhDT0M3LnN0YXR1cy51bmNvbnNjaW91cylcbiAgfVxuXG4gIGdldCBkZWFkICgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDb25kaXRpb25TdGF0dXMoQ09DNy5zdGF0dXMuZGVhZClcbiAgfVxuXG4gIGdldCBwcm9uZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLnByb25lKVxuICB9XG5cbiAgLy8gc3RhdGljIHVwZGF0ZUFjdG9yKCBhY3RvciwgZGF0YVVwZGF0ZSl7XG4gIC8vICAgaWYoIGdhbWUudXNlci5pc0dNKXtcbiAgLy8gICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggYHVwZGF0aW5nIGFjdG9yICR7YWN0b3IubmFtZX1gKTtcbiAgLy8gICAgIGNvbnN0IHByb25lID0gZGF0YVVwZGF0ZT8uZmxhZ3M/LkNvQzdbQ09DNy5zdGF0dXMucHJvbmVdO1xuICAvLyAgICAgY29uc3QgdW5jb25zY2lvdXMgPSBkYXRhVXBkYXRlPy5mbGFncz8uQ29DN1tDT0M3LnN0YXR1cy51bmNvbnNjaW91c107XG4gIC8vICAgICBjb25zdCBjcml0aWNhbFdvdW5kcyA9IGRhdGFVcGRhdGU/LmZsYWdzPy5Db0M3W0NPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzXTtcbiAgLy8gICAgIGNvbnN0IGR5aW5nID0gZGF0YVVwZGF0ZT8uZmxhZ3M/LkNvQzdbQ09DNy5zdGF0dXMuZHlpbmddO1xuICAvLyAgICAgaWYoIHByb25lKSB1aS5ub3RpZmljYXRpb25zLmluZm8oIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5mb0FjdG9yUHJvbmUnLCB7YWN0b3I6IGFjdG9yLm5hbWV9KSk7XG4gIC8vICAgICBpZiggdW5jb25zY2lvdXMpIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5JbmZvQWN0b3JVbmNvbnNjaW91cycsIHthY3RvcjogYWN0b3IubmFtZX0pKTtcbiAgLy8gICAgIGlmKCBjcml0aWNhbFdvdW5kcykgdWkubm90aWZpY2F0aW9ucy5pbmZvKCBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkluZm9BY3Rvck1ham9yV291bmQnLCB7YWN0b3I6IGFjdG9yLm5hbWV9KSk7XG4gIC8vICAgICBpZiggZHlpbmcpIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5JbmZvQWN0b3JEeWluZycsIHthY3RvcjogYWN0b3IubmFtZX0pKTtcbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuO1xuICAvLyB9XG5cbiAgLy8gXCJDb0M3LkluZm9BY3RvclByb25lXCI6IFwie2FjdG9yfSBmYWxsIHByb25lXCIsXG4gIC8vIFwiQ29DNy5JbmZvQWN0b3JVbmNvbnNjaW91c1wiOiBcInthY3Rvcn0gZmFsbCB1bmNvbnNjaW91c1wiLFxuICAvLyBcIkNvQzcuSW5mb0FjdG9yTWFqb3JXb3VuZFwiOiBcInthY3Rvcn0gZ2V0IGEgbWFqb3Igd291bmRcIixcbiAgLy8gXCJDb0M3LkluZm9BY3RvckR5aW5nXCI6IFwie2Fjb3J9IGlzIGR5aW5nXCIsXG4gIC8vIFwiQ29DNy5JbmZvQWN0b3JJbmp1cmllZFwiOiBcInthY3Rvcn0gaXMgaW5qdXJpZWRcIixcblxuICAvLyBzdGF0aWMgdXBkYXRlVG9rZW4oIHNjZW5lLCB0b2tlbiwgZGF0YVVwZGF0ZSl7XG4gIC8vICAgY29uc3QgaW5qdXJpZWQgPSBkYXRhVXBkYXRlPy5hY3RvckRhdGE/LmZsYWdzPy5Db0M3Py5pbmp1cmllZDtcbiAgLy8gICBpZiggaW5qdXJpZWQpIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5JbmZvQWN0b3JJbmp1cmllZCcsIHthY3RvcjogdG9rZW4ubmFtZX0pKTtcbiAgLy8gICByZXR1cm47XG4gIC8vIH1cblxuICAvLyBhc3luYyB1cGRhdGUgKGRhdGEgPSB7fSwgY29udGV4dCA9IHt9KSB7XG4gIC8vICAgY29uc29sZS5sb2coJz4+Pj4nLCBkYXRhLCBjb250ZXh0KVxuICAvLyAgIHN1cGVyLnVwZGF0ZShkYXRhLCBjb250ZXh0KVxuICAvLyB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQWN0b3IsIEF1ZGlvSGVscGVyLCBDaGF0TWVzc2FnZSwgQ09ORklHLCBDT05TVCwgZm91bmRyeSwgZnJvbVV1aWQsIGdhbWUsIGdldENvbXB1dGVkU3R5bGUsIEl0ZW0sIHJlbmRlclRlbXBsYXRlLCBUb2tlbiwgdWkgKi9cbmltcG9ydCB7IENvQzdEaWNlIH0gZnJvbSAnLi9kaWNlLmpzJ1xuaW1wb3J0IHsgQ29DN0l0ZW0gfSBmcm9tICcuL2l0ZW1zL2l0ZW0uanMnXG5pbXBvcnQgeyBjaGF0SGVscGVyLCBDb0M3Um9sbCB9IGZyb20gJy4vY2hhdC9oZWxwZXIuanMnXG5pbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4vYWN0b3JzL2FjdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4vdXRpbGl0aWVzLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN0NoZWNrIHtcbiAgY29uc3RydWN0b3IgKFxuICAgIGFjdG9yID0gbnVsbCxcbiAgICBza2lsbCA9IG51bGwsXG4gICAgaXRlbSA9IG51bGwsXG4gICAgZGljZU1vZCA9IDAsXG4gICAgZGlmZmljdWx0eSA9IG51bGwsXG4gICAgZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gMCxcbiAgICBmbGF0RGljZU1vZGlmaWVyID0gMFxuICApIHtcbiAgICB0aGlzLmFjdG9yID0gYWN0b3JcbiAgICB0aGlzLnNraWxsID0gc2tpbGxcbiAgICB0aGlzLml0ZW0gPSBpdGVtXG4gICAgdGhpcy5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eVxuICAgIHRoaXMuZGljZU1vZGlmaWVyID0gZGljZU1vZFxuICAgIHRoaXMucmF3VmFsdWUgPSAwIC8vIHZhbHVlIG5lZWRlZCBiZWZvcmUgZGlmZmljdWx0eVxuICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gbnVsbFxuICAgIHRoaXMucmVmZXJlbmNlTWVzc2FnZUlkID0gbnVsbFxuICAgIHRoaXMucHVzaGluZyA9IGZhbHNlXG4gICAgdGhpcy5mbGF0RGljZU1vZGlmaWVyID0gZmxhdERpY2VNb2RpZmllclxuICAgIHRoaXMuZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gZmxhdFRocmVzaG9sZE1vZGlmaWVyXG5cbiAgICBpZiAoZGlmZmljdWx0eSA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgaXNVbmtub3duID1cbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGVmYXVsdENoZWNrRGlmZmljdWx0eScpID09PSAndW5rbm93bidcbiAgICAgIHRoaXMuZGlmZmljdWx0eSA9IGlzVW5rbm93blxuICAgICAgICA/IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwudW5rbm93blxuICAgICAgICA6IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXQgY2FyZFR5cGUgKCkge1xuICAgIHJldHVybiAncm9sbENhcmQnXG4gIH1cblxuICBzdGF0aWMgZ2V0IGRpZmZpY3VsdHlMZXZlbCAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVua25vd246IC0xLFxuICAgICAgcmVndWxhcjogMSxcbiAgICAgIGhhcmQ6IDIsXG4gICAgICBleHRyZW1lOiAzLFxuICAgICAgY3JpdGljYWw6IDQsXG4gICAgICBpbXBvc3NpYmxlOiA5XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldCBzdWNjZXNzTGV2ZWwgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmdW1ibGU6IC05OSxcbiAgICAgIGZhaWx1cmU6IDAsXG4gICAgICByZWd1bGFyOiAxLFxuICAgICAgaGFyZDogMixcbiAgICAgIGV4dHJlbWU6IDMsXG4gICAgICBjcml0aWNhbDogNFxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoYXJhY3RlcmlzdGljOiAnY2hhcmFjdGVyaXN0aWMnLFxuICAgICAgYXR0cmlidXRlOiAnYXR0cmlidXRlJyxcbiAgICAgIHNraWxsOiAnaXRlbScsXG4gICAgICBpdGVtOiAnaXRlbScsXG4gICAgICB2YWx1ZTogJ3ZhbHVlJ1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBkaWZmaWN1bHR5U3RyaW5nIChkaWZmaWN1bHR5TGV2ZWwpIHtcbiAgICBzd2l0Y2ggKFxuICAgICAgIWlzTmFOKE51bWJlcihkaWZmaWN1bHR5TGV2ZWwpKVxuICAgICAgICA/IE51bWJlcihkaWZmaWN1bHR5TGV2ZWwpXG4gICAgICAgIDogZGlmZmljdWx0eUxldmVsXG4gICAgKSB7XG4gICAgICBjYXNlICc/JzpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Vbmtub3duRGlmZmljdWx0eScpXG4gICAgICBjYXNlICcrJzpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXJkRGlmZmljdWx0eScpXG4gICAgICBjYXNlICcrKyc6XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXh0cmVtZURpZmZpY3VsdHknKVxuICAgICAgY2FzZSAnKysrJzpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Dcml0aWNhbERpZmZpY3VsdHknKVxuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlZ3VsYXJEaWZmaWN1bHR5JylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC51bmtub3duOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlVua25vd25EaWZmaWN1bHR5JylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlZ3VsYXJEaWZmaWN1bHR5JylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5oYXJkOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhcmREaWZmaWN1bHR5JylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5JylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5jcml0aWNhbDpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Dcml0aWNhbERpZmZpY3VsdHknKVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBnZXQgcmF3VmFsdWUgKCkge1xuICAgIC8vIGlmICghdGhpcy5hY3RvciB8fCAhdGhpcy5hY3Rvci5pZCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICghdGhpcy5fcmF3VmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmNoYXJhY3RlcmlzdGljKSB7XG4gICAgICAgIHRoaXMucmF3VmFsdWUgPVxuICAgICAgICAgIHRoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljc1t0aGlzLmNoYXJhY3RlcmlzdGljXS52YWx1ZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2tpbGwpIHRoaXMucmF3VmFsdWUgPSB0aGlzLnNraWxsLnZhbHVlXG4gICAgICBpZiAodGhpcy5hdHRyaWJ1dGUpIHtcbiAgICAgICAgdGhpcy5yYXdWYWx1ZSA9IHRoaXMuYWN0b3Iuc3lzdGVtLmF0dHJpYnNbdGhpcy5hdHRyaWJ1dGVdLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLl9yYXdWYWx1ZSkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmZsYXRUaHJlc2hvbGRNb2RpZmllciAmJlxuICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhbGxvd0ZsYXRUaHJlc2hvbGRNb2RpZmllcicpXG4gICAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuX3Jhd1ZhbHVlICsgdGhpcy5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPCAxKSByZXR1cm4gMVxuICAgICAgICByZXR1cm4gdGhpcy5fcmF3VmFsdWUgKyB0aGlzLmZsYXRUaHJlc2hvbGRNb2RpZmllclxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3Jhd1ZhbHVlXG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHNldCByYXdWYWx1ZSAoeCkge1xuICAgIHRoaXMuX3Jhd1ZhbHVlID0geFxuICB9XG5cbiAgc2V0IHV1aWQgKHgpIHtcbiAgICB0aGlzLl91dWlkID0geFxuICB9XG5cbiAgZ2V0IHV1aWQgKCkge1xuICAgIGlmICghdGhpcy5fdXVpZCkgdGhpcy5fdXVpZCA9IGZvdW5kcnkudXRpbHMucmFuZG9tSUQoMTYpXG4gICAgcmV0dXJuIHRoaXMuX3V1aWRcbiAgfVxuXG4gIGdldCBoYXNDYXJkICgpIHtcbiAgICBjb25zdCBjaGF0Q2FyZCA9IHVpLmNoYXQuY29sbGVjdGlvbi5maWx0ZXIobWVzc2FnZSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnV1aWQgPT09IG1lc3NhZ2UuZ2V0RmxhZygnQ29DNycsICd1dWlkJykgJiZcbiAgICAgICAgQ29DN0NoZWNrLmNhcmRUeXBlID09PSBtZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAndHlwZScpXG4gICAgICApXG4gICAgfSlcbiAgICBpZiAoY2hhdENhcmQubGVuZ3RoID4gMCkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCByYXdWYWx1ZVN0cmluZyAoKSB7XG4gICAgaWYgKHRoaXMuX3Jhd1ZhbHVlID09PSAwKSB7XG4gICAgICByZXR1cm4gJzAnXG4gICAgfVxuICAgIGlmICghdGhpcy5fcmF3VmFsdWUpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoXG4gICAgICB0aGlzLmZsYXRUaHJlc2hvbGRNb2RpZmllciAmJlxuICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYWxsb3dGbGF0VGhyZXNob2xkTW9kaWZpZXInKVxuICAgICkge1xuICAgICAgaWYgKHRoaXMuZmxhdFRocmVzaG9sZE1vZGlmaWVyIDwgMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3VmFsdWUudG9TdHJpbmcoKSArIHRoaXMuZmxhdFRocmVzaG9sZE1vZGlmaWVyLnRvU3RyaW5nKClcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuX3Jhd1ZhbHVlLnRvU3RyaW5nKCkgKyAnKycgKyB0aGlzLmZsYXRUaHJlc2hvbGRNb2RpZmllci50b1N0cmluZygpXG4gICAgICApXG4gICAgfSBlbHNlIHJldHVybiB0aGlzLl9yYXdWYWx1ZS50b1N0cmluZygpXG4gIH1cblxuICBnZXQgY3JpdGljYWxUaHJlc2hvbGQgKCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBnZXQgcmVndWxhclRocmVzaG9sZCAoKSB7XG4gICAgaWYgKHRoaXMucmF3VmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLnJhd1ZhbHVlID49IDEwMCkgcmV0dXJuIDk5XG4gICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5yYXdWYWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBoYXJkVGhyZXNob2xkICgpIHtcbiAgICBpZiAodGhpcy5yYXdWYWx1ZSkgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5yYXdWYWx1ZSAvIDIpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBleHRyZW1lVGhyZXNob2xkICgpIHtcbiAgICBpZiAodGhpcy5yYXdWYWx1ZSkgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5yYXdWYWx1ZSAvIDUpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBmdW1ibGVUaHJlc2hvbGQgKCkge1xuICAgIGlmICh0aGlzLnJhd1ZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5kaWZmaWN1bHR5KSB7XG4gICAgICAgIGlmICh0aGlzLmRpZmZpY3VsdHkgPj0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmVtZVRocmVzaG9sZCA8IDUwID8gOTYgOiAxMDBcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRpZmZpY3VsdHkgPj0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5oYXJkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaGFyZFRocmVzaG9sZCA8IDUwID8gOTYgOiAxMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmF3VmFsdWUgPCA1MCA/IDk2IDogMTAwXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgc3VjY2VzVGhyZXNob2xkICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZGlmZmljdWx0eSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5kaWZmaWN1bHR5KSB7XG4gICAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lOlxuICAgICAgICAgIHJldHVybiB0aGlzLmV4dHJlbWVUaHJlc2hvbGRcbiAgICAgICAgY2FzZSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmhhcmQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaGFyZFRocmVzaG9sZFxuICAgICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhcjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWd1bGFyVGhyZXNob2xkXG4gICAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5jcml0aWNhbDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5jcml0aWNhbFRocmVzaG9sZFxuICAgICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwudW5rbm93bjpcbiAgICAgICAgICByZXR1cm4gLTFcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yYXdWYWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IGRpZmZpY3VsdHlTdHJpbmcgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5kaWZmaWN1bHR5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc3dpdGNoICh0aGlzLmRpZmZpY3VsdHkpIHtcbiAgICAgICAgY2FzZSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmV4dHJlbWU6XG4gICAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXh0cmVtZURpZmZpY3VsdHknKVxuICAgICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZDpcbiAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5IYXJkRGlmZmljdWx0eScpXG4gICAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyOlxuICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlJlZ3VsYXJEaWZmaWN1bHR5JylcbiAgICAgICAgY2FzZSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmNyaXRpY2FsOlxuICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNyaXRpY2FsRGlmZmljdWx0eScpXG4gICAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC51bmtub3duOlxuICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlVua25vd25EaWZmaWN1bHR5JylcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gJydcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBnZXQgbW9kaWZpZWRSZXN1bHQgKCkge1xuICAgIGlmICh0aGlzLnN0YW5kYnkpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAodHlwZW9mIHRoaXMuX21vZGlmaWVkUmVzdWx0ICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIHRoaXMuX21vZGlmaWVkUmVzdWx0XG4gICAgaWYgKHRoaXMuZmxhdERpY2VNb2RpZmllcikge1xuICAgICAgY29uc3QgbW9kaWZpZWQgPSB0aGlzLmRpY2VzLnRvdGFsICsgdGhpcy5mbGF0RGljZU1vZGlmaWVyXG4gICAgICBpZiAobW9kaWZpZWQgPCAxKSByZXR1cm4gMVxuICAgICAgaWYgKG1vZGlmaWVkID4gMTAwKSByZXR1cm4gMTAwXG4gICAgICByZXR1cm4gbW9kaWZpZWRcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGljZXMudG90YWxcbiAgfVxuXG4gIHNldCBtb2RpZmllZFJlc3VsdCAoeCkge1xuICAgIHRoaXMuX21vZGlmaWVkUmVzdWx0ID0geFxuICB9XG5cbiAgZ2V0IGZsYXREaWNlTW9kaWZpZXJTdHJpbmcgKCkge1xuICAgIGlmICghdGhpcy5mbGF0RGljZU1vZGlmaWVyKSByZXR1cm4gbnVsbFxuICAgIGlmICh0aGlzLmZsYXREaWNlTW9kaWZpZXIgPiAwKSByZXR1cm4gYCske3RoaXMuZmxhdERpY2VNb2RpZmllcn1gXG4gICAgcmV0dXJuIHRoaXMuZmxhdERpY2VNb2RpZmllci50b1N0cmluZygpXG4gIH1cblxuICBnZXQgaXNGdW1ibGUgKCkge1xuICAgIGlmICh0aGlzLnN0YW5kYnkpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAodGhpcy5pc1NpbXBsZVJvbGwpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5tb2RpZmllZFJlc3VsdCA+PSB0aGlzLmZ1bWJsZVRocmVzaG9sZFxuICB9XG5cbiAgZ2V0IGlzQ3JpdGljYWwgKCkge1xuICAgIGlmICh0aGlzLnN0YW5kYnkpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5tb2RpZmllZFJlc3VsdCA9PT0gMVxuICB9XG5cbiAgZ2V0IGlzRXh0cmVtZVN1Y2Nlc3MgKCkge1xuICAgIGlmICh0aGlzLnN0YW5kYnkpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5zdWNjZXNzTGV2ZWwgPj0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lXG4gIH1cblxuICBnZXQgcGFzc2VkICgpIHtcbiAgICBpZiAodGhpcy5zdGFuZGJ5KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHRoaXMuaXNTaW1wbGVSb2xsKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHRoaXMubHVja1NwZW50KSByZXR1cm4gdGhpcy5kaWZmaWN1bHR5IDw9IHRoaXMuc3VjY2Vzc0xldmVsXG4gICAgcmV0dXJuIHRoaXMuc3VjY2VzVGhyZXNob2xkID49IHRoaXMubW9kaWZpZWRSZXN1bHQgfHwgdGhpcy5pc0NyaXRpY2FsXG4gIH1cblxuICBnZXQgZmFpbGVkICgpIHtcbiAgICBpZiAodGhpcy5zdGFuZGJ5KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHRoaXMuaXNTaW1wbGVSb2xsKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuICF0aGlzLnBhc3NlZFxuICB9XG5cbiAgZ2V0IGlzU2ltcGxlUm9sbCAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnJhd1ZhbHVlID09PSAndW5kZWZpbmVkJ1xuICB9XG5cbiAgZ2V0IGhhc0JvbnVzICgpIHtcbiAgICBpZiAodGhpcy5kaWNlTW9kaWZpZXIgJiYgdGhpcy5kaWNlTW9kaWZpZXIgPiAwKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IGhhc1BlbmFsdHkgKCkge1xuICAgIGlmICh0aGlzLmRpY2VNb2RpZmllciAmJiB0aGlzLmRpY2VNb2RpZmllciA8IDApIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgaGFzTW9kaWZpZXIgKCkge1xuICAgIGlmICh0aGlzLmRpY2VNb2RpZmllciAmJiB0aGlzLmRpY2VNb2RpZmllciAhPT0gMCkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCBkaWNlTW9kaWZpZXIgKCkge1xuICAgIGlmICh0aGlzLl9kaWNlTW9kaWZpZXIpIHJldHVybiB0aGlzLl9kaWNlTW9kaWZpZXJcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgc2V0IGRpY2VNb2RpZmllciAoeCkge1xuICAgIHRoaXMuX2RpY2VNb2RpZmllciA9IHBhcnNlSW50KHgpXG4gIH1cblxuICBnZXQgbmFtZSAoKSB7XG4gICAgaWYgKHRoaXMuYWN0b3IpIHtcbiAgICAgIGlmICh0aGlzLnNraWxsKSByZXR1cm4gdGhpcy5za2lsbC5zaG9ydE5hbWVcbiAgICAgIGlmICh0aGlzLml0ZW0pIHJldHVybiB0aGlzLml0ZW0ubmFtZVxuICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgICAgcmV0dXJuIENvQzdVdGlsaXRpZXMuZ2V0Q2hhcmFjdGVyaXN0aWNOYW1lcyh0aGlzLmNoYXJhY3RlcmlzdGljKT8ubGFiZWxcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZSkge1xuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGUgPT09ICdsY2snKSByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkx1Y2snKVxuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGUgPT09ICdzYW4nKSByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNhbml0eScpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgc2hvcnROYW1lICgpIHtcbiAgICBpZiAodGhpcy5hY3Rvcikge1xuICAgICAgaWYgKHRoaXMuc2tpbGwpIHJldHVybiB0aGlzLnNraWxsLnNob3J0TmFtZVxuICAgICAgaWYgKHRoaXMuaXRlbSkgcmV0dXJuIHRoaXMuaXRlbS5uYW1lXG4gICAgICBpZiAodGhpcy5jaGFyYWN0ZXJpc3RpYykge1xuICAgICAgICByZXR1cm4gQ29DN1V0aWxpdGllcy5nZXRDaGFyYWN0ZXJpc3RpY05hbWVzKHRoaXMuY2hhcmFjdGVyaXN0aWMpPy5zaG9ydFxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlKSB7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZSA9PT0gJ2xjaycpIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTHVjaycpXG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZSA9PT0gJ3NhbicpIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU0FOJylcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBmdWxsTmFtZSAoKSB7XG4gICAgY29uc3QgZGlmZmljdWx0eSA9XG4gICAgICB0aGlzLl9kaWZmaWN1bHR5ID09PSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgICAgPyBmYWxzZVxuICAgICAgICA6IENvQzdDaGVjay5kaWZmaWN1bHR5U3RyaW5nKHRoaXMuX2RpZmZpY3VsdHkpXG4gICAgY29uc3QgbW9kaWZpZXIgPVxuICAgICAgdGhpcy5fZGljZU1vZGlmaWVyID4gMFxuICAgICAgICA/IGArJHt0aGlzLl9kaWNlTW9kaWZpZXJ9YFxuICAgICAgICA6IHRoaXMuX2RpY2VNb2RpZmllci50b1N0cmluZygpXG4gICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICBgQ29DNy5MaW5rQ2hlY2skeyFkaWZmaWN1bHR5ID8gJycgOiAnRGlmZid9JHtcbiAgICAgICAgIXRoaXMuX2RpY2VNb2RpZmllciA/ICcnIDogJ01vZGlmJ1xuICAgICAgfWAsXG4gICAgICB7IGRpZmZpY3VsdHksIG1vZGlmaWVyLCBuYW1lOiB0aGlzLm5hbWUgfVxuICAgIClcbiAgfVxuXG4gIGdldCByb2xsZWQgKCkge1xuICAgIGlmICh0aGlzLmRpY2UpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgY2hlY2sgZnJvbSBhbiBIVE1MRWxlbWVudCBvciBhIGNoYXQgY2FyZC5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2FyZCAgVGhlIEhUTUxFbGVtZW50IHRoYXQgaXMgYSByb2xsLXJlc3VsdCBvciBhIGNoYXQgY2FyZCBjb250YWluaW5nIGEgc2luZ2xlIHJvbGwtcmVzdWx0LlxuICAgKiBAcmV0dXJuIHtDb0M3Q2hlY2t9ICAgICAgQSBDb0M3Q2hlY2suXG4gICAqL1xuICBzdGF0aWMgZ2V0RnJvbUNhcmQgKGNhcmQpIHtcbiAgICBjb25zdCByb2xsUmVzdWx0ID0gY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ3JvbGwtcmVzdWx0JylcbiAgICAgID8gY2FyZFxuICAgICAgOiBjYXJkLnF1ZXJ5U2VsZWN0b3IoJy5yb2xsLXJlc3VsdCcpXG4gICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICBDb0M3Um9sbC5nZXRGcm9tRWxlbWVudChyb2xsUmVzdWx0LCBjaGVjaylcbiAgICBjb25zdCBtZXNzYWdlID0gY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpXG4gICAgY2hlY2subWVzc2FnZUlkID0gbWVzc2FnZSA/IG1lc3NhZ2UuZGF0YXNldC5tZXNzYWdlSWQgOiBudWxsXG4gICAgcmV0dXJuIGNoZWNrXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcHVzaCAoY2FyZCwgcHVibGlzaCA9IHRydWUpIHtcbiAgICBjb25zdCBvbGRDaGVjayA9IENvQzdDaGVjay5nZXRGcm9tQ2FyZChjYXJkKSAvLyBUT0RPOiBSZWZhY3RvcmluZ1xuICAgIGNvbnN0IGFjdG9ySWQgPSBjYXJkLmRhdGFzZXQudG9rZW5JZFxuICAgICAgPyBjYXJkLmRhdGFzZXQudG9rZW5JZFxuICAgICAgOiBjYXJkLmRhdGFzZXQuYWN0b3JJZFxuICAgIGNvbnN0IHNraWxsSWQgPSBjYXJkLmRhdGFzZXQuc2tpbGxJZFxuICAgIGNvbnN0IGNoYXJhYyA9IGNhcmQuZGF0YXNldC5jaGFyYWN0ZXJpc3RpY1xuICAgIGNvbnN0IGl0ZW1JZCA9IGNhcmQuZGF0YXNldC5pdGVtSWRcbiAgICBjb25zdCBkaWNlTW9kID0gY2FyZC5kYXRhc2V0LmRpY2VNb2RcbiAgICBjb25zdCBkaWZmaWN1bHR5ID0gY2FyZC5kYXRhc2V0LmRpZmZpY3VsdHlcblxuICAgIGxldCBwdXNoZWRSb2xsXG4gICAgaWYgKHNraWxsSWQpIHtcbiAgICAgIHB1c2hlZFJvbGwgPSBuZXcgQ29DN0NoZWNrKGFjdG9ySWQsIHNraWxsSWQsIGl0ZW1JZCwgZGljZU1vZCwgZGlmZmljdWx0eSlcbiAgICB9IGVsc2UgaWYgKGNoYXJhYykge1xuICAgICAgcHVzaGVkUm9sbCA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgcHVzaGVkUm9sbC5kaWNlTW9kaWZpZXIgPSBkaWNlTW9kXG4gICAgICBwdXNoZWRSb2xsLmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5XG4gICAgICBwdXNoZWRSb2xsLmFjdG9yID0gYWN0b3JJZFxuICAgICAgcHVzaGVkUm9sbC5jaGFyYWN0ZXJpc3RpYyA9IGNoYXJhY1xuICAgIH0gZWxzZSByZXR1cm5cbiAgICBpZiAob2xkQ2hlY2sudXVpZCkge1xuICAgICAgcHVzaGVkUm9sbC5jb250ZXh0ID0gb2xkQ2hlY2suY29udGV4dFxuICAgICAgcHVzaGVkUm9sbC51dWlkID0gb2xkQ2hlY2sudXVpZFxuICAgIH1cbiAgICBpZiAob2xkQ2hlY2sucGFyZW50KSBwdXNoZWRSb2xsLnBhcmVudCA9IG9sZENoZWNrLnBhcmVudFxuICAgIHB1c2hlZFJvbGwucHVzaGluZyA9IHRydWVcbiAgICBhd2FpdCBwdXNoZWRSb2xsLnJvbGwoKVxuICAgIGlmIChwdWJsaXNoKSBwdXNoZWRSb2xsLnRvTWVzc2FnZSh0cnVlLCBjYXJkKVxuICB9XG5cbiAgZ2V0IHRva2VuICgpIHtcbiAgICBpZiAoIXRoaXMuYWN0b3IpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHRoaXMuYWN0b3JLZXkpXG4gIH1cblxuICBzZXQgYWN0b3IgKHgpIHtcbiAgICB0aGlzLmFjdG9yS2V5ID0geFxuICAgIGlmICh4ID09IG51bGwpIHtcbiAgICAgIHRoaXMuX2FjdG9yID0geFxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHggaW5zdGFuY2VvZiBBY3Rvcikge1xuICAgICAgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICB0aGlzLl9hY3RvciA9IHhcbiAgICAgIHRoaXMuX2FjdG9yLmFsaWFzID0gdGhpcy5hY3Rvci5uYW1lXG4gICAgICBpZiAoeC50b2tlbiAmJiB4LnRva2VuLnNjZW5lICYmIHgudG9rZW4uc2NlbmUuaWQpIHtcbiAgICAgICAgdGhpcy5hY3RvcktleSA9IGAke3gudG9rZW4uc2NlbmUuaWR9LiR7eC50b2tlbi5pZH1gXG4gICAgICB9IGVsc2UgdGhpcy5hY3RvcktleSA9IHguaWQgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoeC5pbmNsdWRlcygnLicpKSB7XG4gICAgICBjb25zdCBbc2NlbmVJZCwgdG9rZW5JZF0gPSB4LnNwbGl0KCcuJykgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICBpZiAoc2NlbmVJZCA9PT0gJ1RPS0VOJykge1xuICAgICAgICB0aGlzLl9hY3RvciA9IGdhbWUuYWN0b3JzLnRva2Vuc1t0b2tlbklkXSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgICAgdGhpcy5fYWN0b3IuYWxpYXMgPSB0aGlzLl9hY3Rvci5uYW1lIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBnYW1lLnNjZW5lcy5nZXQoc2NlbmVJZClcbiAgICAgICAgaWYgKCFzY2VuZSkgcmV0dXJuXG4gICAgICAgIGNvbnN0IHRva2VuRGF0YSA9IHNjZW5lLmdldEVtYmVkZGVkRG9jdW1lbnQoJ1Rva2VuJywgdG9rZW5JZClcbiAgICAgICAgaWYgKCF0b2tlbkRhdGEpIHJldHVyblxuICAgICAgICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlbih0b2tlbkRhdGEpXG4gICAgICAgIHRoaXMuX2FjdG9yID0gdG9rZW4uYWN0b3JcbiAgICAgICAgdGhpcy5fYWN0b3IuYWxpYXMgPSB0b2tlbi5uYW1lXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9hY3RvciA9IGdhbWUuYWN0b3JzLmdldCh4KVxuICAgIHRoaXMuYWN0b3IuYWxpYXMgPSB0aGlzLmFjdG9yLm5hbWVcbiAgfVxuXG4gIGdldCBzdWNjZXNzTGV2ZWxJY29ucyAoKSB7XG4gICAgaWYgKHRoaXMudW5rbm93bkRpZmZpY3VsdHkpIHJldHVybiBudWxsXG4gICAgaWYgKHRoaXMuaXNTaW1wbGVSb2xsICYmIHRoaXMuX3Jhd1ZhbHVlICE9PSAwKSByZXR1cm4gbnVsbFxuICAgIGlmICh0aGlzLnN1Y2Nlc3NMZXZlbCA+PSB0aGlzLmRpZmZpY3VsdHkpIHtcbiAgICAgIGNvbnN0IGljb25zID0gW11cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGluZGV4IDwgdGhpcy5zdWNjZXNzTGV2ZWwgLSB0aGlzLmRpZmZpY3VsdHkgKyAxO1xuICAgICAgICBpbmRleCsrXG4gICAgICApIHtcbiAgICAgICAgaWNvbnMucHVzaCh0aGlzLmlzQ3JpdGljYWwgPyAnbWVkYWwnIDogJ3N0YXInKVxuICAgICAgfVxuICAgICAgY29uc3Qgc3VjY2Vzc0hpbnQgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlN1Y2Nlc0xldmVsSGludCcsIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuc3VjY2Vzc0xldmVsIC0gdGhpcy5kaWZmaWN1bHR5ICsgMVxuICAgICAgfSlcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGNzc0NsYXNzOiB0aGlzLmlzQ3JpdGljYWwgPyAnY3JpdGljYWwnIDogJ3N1Y2Nlc3MnLFxuICAgICAgICBoaW50OiBzdWNjZXNzSGludCxcbiAgICAgICAgaWNvbnNcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaWNvbnMgPSBbXVxuICAgICAgY29uc3Qgc3VjY2Vzc0xldmVsID0gdGhpcy5pc0Z1bWJsZSA/IC0xIDogdGhpcy5zdWNjZXNzTGV2ZWxcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmRpZmZpY3VsdHkgLSBzdWNjZXNzTGV2ZWw7IGluZGV4KyspIHtcbiAgICAgICAgaWNvbnMucHVzaCh0aGlzLmlzRnVtYmxlID8gJ3NrdWxsJyA6ICdzcGlkZXInKVxuICAgICAgfVxuICAgICAgY29uc3QgZmFpbHVyZUhpbnQgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkZhaWx1cmVMZXZlbEhpbnQnLCB7XG4gICAgICAgIHZhbHVlOiB0aGlzLmRpZmZpY3VsdHkgLSBzdWNjZXNzTGV2ZWxcbiAgICAgIH0pXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgY3NzQ2xhc3M6IHRoaXMuaXNGdW1ibGUgPyAnZnVtYmxlJyA6ICdmYWlsdXJlJyxcbiAgICAgICAgaGludDogZmFpbHVyZUhpbnQsXG4gICAgICAgIGljb25zXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlzQmxpbmQgKCkge1xuICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuX2lzQmxpbmQpIHtcbiAgICAgIHRoaXMuX2lzQmxpbmQgPSB0aGlzLnJvbGxNb2RlID09PSAnYmxpbmRyb2xsJ1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faXNCbGluZFxuICB9XG5cbiAgc2V0IGlzQmxpbmQgKHgpIHtcbiAgICB0aGlzLl9pc0JsaW5kID0geFxuICB9XG5cbiAgZ2V0IHVua25vd25EaWZmaWN1bHR5ICgpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmdtRGlmZmljdWx0eUNyaXRpY2FsIHx8XG4gICAgICB0aGlzLmdtRGlmZmljdWx0eUV4dHJlbWUgfHxcbiAgICAgIHRoaXMuZ21EaWZmaWN1bHR5SGFyZCB8fFxuICAgICAgdGhpcy5nbURpZmZpY3VsdHlSZWd1bGFyXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwudW5rbm93biA9PT0gdGhpcy5kaWZmaWN1bHR5XG4gIH1cblxuICBnZXQgcm9sbE1vZGUgKCkge1xuICAgIGlmICghdGhpcy5fcm9sbE1vZGUpIHRoaXMuX3JvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIHJldHVybiB0aGlzLl9yb2xsTW9kZVxuICB9XG5cbiAgc2V0IHJvbGxNb2RlICh4KSB7XG4gICAgaWYgKHggPT09IGZhbHNlKSB0aGlzLl9yb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICB0aGlzLl9yb2xsTW9kZSA9IHhcbiAgfVxuXG4gIHNldCBza2lsbCAoeCkge1xuICAgIHRoaXMuX3NraWxsID0gdGhpcy5fZ2V0SXRlbUZyb21JZCh4KVxuICAgIHRoaXMuc2tpbGxJZCA9IHhcbiAgfVxuXG4gIHNldCBpdGVtICh4KSB7XG4gICAgdGhpcy5faXRlbSA9IHRoaXMuX2dldEl0ZW1Gcm9tSWQoeClcbiAgICBpZiAodGhpcy5faXRlbT8udHlwZSA9PT0gJ3dlYXBvbicpIHtcbiAgICAgIHRoaXMuaXRlbUlkID0geFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9pdGVtID0gdW5kZWZpbmVkXG4gICAgICB0aGlzLml0ZW1JZCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIF9nZXRJdGVtRnJvbUlkICh4KSB7XG4gICAgaWYgKHggPT0gbnVsbCkgcmV0dXJuIG51bGxcbiAgICBpZiAoeCBpbnN0YW5jZW9mIEl0ZW0pIHJldHVybiB4XG4gICAgaWYgKHRoaXMuX2FjdG9yKSByZXR1cm4gdGhpcy5fYWN0b3IuaXRlbXMuZ2V0KHgpXG4gICAgcmV0dXJuIGdhbWUuaXRlbXMuZ2V0KHgpXG4gIH1cblxuICBnZXQgYWN0b3IgKCkge1xuICAgIGlmICghdGhpcy5fYWN0b3IgfHwgIXRoaXMuX2FjdG9yPy5pZCkge1xuICAgICAgaWYgKHRoaXMuYWN0b3JLZXkpIHRoaXMuX2FjdG9yID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5hY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICBpZiAodGhpcy5hY3RvcklkKSB0aGlzLl9hY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuYWN0b3JJZCkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICBpZiAoIXRoaXMuX2FjdG9yKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNEdW1teTogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiB0aGlzLmFjdG9yTmFtZSA/IHRoaXMuYWN0b3JOYW1lIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGlkOiB1bmRlZmluZWQsXG4gICAgICAgICAgaW1nOiAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9xdWVzdGlvbi1jaXJjbGUtcmVndWxhci5zdmcnLFxuICAgICAgICAgIHBvcnRyYWl0OiAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9xdWVzdGlvbi1jaXJjbGUtcmVndWxhci5zdmcnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX2FjdG9yLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdPYmplY3QnKSB7XG4gICAgICBjb25zdCBhY3RvciA9IG5ldyBDb0NBY3Rvcih0aGlzLl9hY3RvcilcbiAgICAgIHRoaXMuX2FjdG9yID0gYWN0b3JcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FjdG9yXG4gIH1cblxuICBnZXQgc2tpbGwgKCkge1xuICAgIGlmICghdGhpcy5fc2tpbGwgJiYgdGhpcy5za2lsbElkKSB7XG4gICAgICB0aGlzLl9za2lsbCA9IHRoaXMuYWN0b3I/Lml0ZW1zLmdldCh0aGlzLnNraWxsSWQpXG4gICAgfVxuICAgIGlmICghdGhpcy5fc2tpbGwgJiYgdGhpcy5pdGVtKSB7XG4gICAgICBpZiAodGhpcy5pdGVtLnN5c3RlbS5za2lsbCkge1xuICAgICAgICBpZiAodGhpcy5pdGVtLnN5c3RlbS5za2lsbC5tYWluLmlkICYmICF0aGlzLndlYXBvbkFsdFNraWxsKSB7XG4gICAgICAgICAgdGhpcy5fc2tpbGwgPSB0aGlzLl9hY3Rvci5pdGVtcy5nZXQodGhpcy5pdGVtLnN5c3RlbS5za2lsbC5tYWluLmlkKVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHRoaXMuaXRlbS5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZCAmJlxuICAgICAgICAgIHRoaXMud2VhcG9uQWx0U2tpbGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5fc2tpbGwgPSB0aGlzLl9hY3Rvci5pdGVtcy5nZXQoXG4gICAgICAgICAgICB0aGlzLml0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWRcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NraWxsXG4gIH1cblxuICBnZXQgaXRlbSAoKSB7XG4gICAgaWYgKCF0aGlzLl9pdGVtICYmIHRoaXMuaXRlbUlkICYmIHRoaXMuYWN0b3IpIHtcbiAgICAgIHRoaXMuX2l0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldCh0aGlzLml0ZW1JZClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW1cbiAgfVxuXG4gIGdldCBkaXNwbGF5UmVzdWx0VHlwZSAoKSB7XG4gICAgcmV0dXJuIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rpc3BsYXlSZXN1bHRUeXBlJylcbiAgfVxuXG4gIGdldCBkaXNwbGF5Q2hlY2tTdWNjZXNzTGV2ZWwgKCkge1xuICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNwbGF5Q2hlY2tTdWNjZXNzTGV2ZWwnKVxuICB9XG5cbiAgZ2V0IGRpc3BsYXlCb3RoU3VjY2Vzc0xldmVsICgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwbGF5UmVzdWx0VHlwZSAmJiB0aGlzLmRpc3BsYXlDaGVja1N1Y2Nlc3NMZXZlbFxuICB9XG5cbiAgZ2V0IGRvbnREaXNwbGF5U3VjY2Vzc0xldmVsICgpIHtcbiAgICByZXR1cm4gIXRoaXMuZGlzcGxheVJlc3VsdFR5cGUgJiYgIXRoaXMuZGlzcGxheUNoZWNrU3VjY2Vzc0xldmVsXG4gIH1cblxuICBnZXQgaW1hZ2UgKCkge1xuICAgIGlmICh0aGlzLnNraWxsKSByZXR1cm4gdGhpcy5za2lsbC5pbWdcbiAgICBpZiAodGhpcy5pdGVtKSByZXR1cm4gdGhpcy5pdGVtLmltZ1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBsaW5rICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRMaW5rRWxlbWVudCgpLm91dGVySFRNTFxuICB9XG5cbiAgZ2V0IGRpc3BsYXlBY3Rvck9uQ2FyZCAoKSB7XG4gICAgcmV0dXJuIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rpc3BsYXlBY3Rvck9uQ2FyZCcpXG4gIH1cblxuICBnZXRMaW5rRWxlbWVudCAoY2xhc3NlcyA9IG51bGwpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgY2xzOiBbJ2NvYzctbGluaycsICdjb2M3LXJvbGwnXS5jb25jYXQoY2xhc3NlcyksXG4gICAgICBkYXRhc2V0OiB7IGNoZWNrOiAnY2hlY2snIH0sXG4gICAgICBpY29uOiB0aGlzLmltYWdlXG4gICAgICAgID8gYDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHt0aGlzLmltYWdlfSlcIj48L2Rpdj5gXG4gICAgICAgIDogJzxpIGNsYXNzPVwiZmFzIGZhLWRpY2VcIj48L2k+JyxcbiAgICAgIGJsaW5kOiB0aGlzLmlzQmxpbmRcbiAgICB9XG5cbiAgICBjb25zdCBkaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlTdHJpbmcodGhpcy5fZGlmZmljdWx0eSlcbiAgICBjb25zdCB0aXRsZSA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICBgQ29DNy5MaW5rQ2hlY2skeyF0aGlzLl9kaWZmaWN1bHR5ID8gJycgOiAnRGlmZid9JHtcbiAgICAgICAgIXRoaXMuX2RpY2VNb2RpZmllciA/ICcnIDogJ01vZGlmJ1xuICAgICAgfWAsXG4gICAgICB7XG4gICAgICAgIGRpZmZpY3VsdHksXG4gICAgICAgIG1vZGlmaWVyOiB0aGlzLl9kaWNlTW9kaWZpZXIsXG4gICAgICAgIG5hbWU6IHRoaXMubmFtZVxuICAgICAgfVxuICAgIClcblxuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgICBhLnRpdGxlID0gdGl0bGVcbiAgICBhLmNsYXNzTGlzdC5hZGQoLi4uZGF0YS5jbHMpXG4gICAgYS5pbm5lckhUTUwgPSBgJHtkYXRhLmJsaW5kID8gJzxpIGNsYXNzPVwiZmFzIGZhLWV5ZS1zbGFzaFwiPjwvaT4nIDogJyd9JHtcbiAgICAgIGRhdGEuaWNvblxuICAgIH0ke3RoaXMubmFtZX1gXG5cbiAgICByZXR1cm4gYVxuICB9XG5cbiAgYXN5bmMgcm9sbCAoZGljZU1vZCA9IG51bGwsIGRpZmZpY3VsdHkgPSBudWxsLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoZGljZU1vZCkgdGhpcy5kaWNlTW9kaWZpZXIgPSBkaWNlTW9kXG4gICAgaWYgKGRpZmZpY3VsdHkpIHRoaXMuZGlmZmljdWx0eSA9IGRpZmZpY3VsdHlcbiAgICBpZiAoIXRoaXMuc3RhbmRieSkgYXdhaXQgdGhpcy5fcGVyZm9ybShvcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoZWNrIHdpdGggdGhlIHByb3ZpZGVkIGRhdGFcbiAgICogUHJvY2VzcyByb2xsIGRhdGEgdG8gYSBmb3JtYXQgdGhhdCBjYW4gYmUgZmVkIHRvIGNyZWF0ZSgpXG4gICAqIEBwYXJhbSB7Kn0gcm9sbERhdGEgQSByb2xsIGRhdGEgc3RydWN0dXJlIGFzIHJldHVybmVkIGJ5IGFjdG9yLmZpbmRcbiAgICogQHJldHVybnMgQSBjaGVjayB3aXRoIHRoZSByb2xsIGRhdGEgcHJvdmlkZWRcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tQWN0b3JSb2xsRGF0YSAocm9sbERhdGEpIHtcbiAgICBjb25zdCByb2xsID0ge31cbiAgICAvLyBjaGVjayBNb2RpZmllclxuICAgIGlmIChyb2xsRGF0YS5kaWZmaWN1bHR5KSByb2xsLmRpZmZpY3VsdHkgPSByb2xsRGF0YS5kaWZmaWN1bHR5XG4gICAgaWYgKHJvbGxEYXRhLmRpY2VNb2RpZmllcikgcm9sbC5kaWNlTW9kaWZpZXIgPSByb2xsRGF0YS5kaWNlTW9kaWZpZXJcbiAgICBpZiAocm9sbERhdGEuZGVueVB1c2ggPT09IHRydWUpIHJvbGwuZGVueVB1c2ggPSB0cnVlXG4gICAgaWYgKHJvbGxEYXRhLmZsYXREaWNlTW9kaWZpZXIpIHtcbiAgICAgIHJvbGwuZmxhdERpY2VNb2RpZmllciA9IHJvbGxEYXRhLmZsYXREaWNlTW9kaWZpZXJcbiAgICB9XG4gICAgaWYgKHJvbGxEYXRhLmZsYXRUaHJlc2hvbGRNb2RpZmllcikge1xuICAgICAgcm9sbC5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSByb2xsRGF0YS5mbGF0VGhyZXNob2xkTW9kaWZpZXJcbiAgICB9XG4gICAgLy8gQWN0b3JcbiAgICBpZiAocm9sbERhdGEuYWN0b3I/LmFjdG9yS2V5KSByb2xsLmFjdG9yS2V5ID0gcm9sbERhdGEuYWN0b3IuYWN0b3JLZXlcbiAgICBlbHNlIGlmIChyb2xsRGF0YS5hY3Rvcj8ubmFtZSkgcm9sbC5hY3Rvck5hbWUgPSByb2xsRGF0YS5hY3Rvci5uYW1lXG4gICAgLy8gQ2hlY2sgdHlwZVxuICAgIHN3aXRjaCAocm9sbERhdGEudHlwZSkge1xuICAgICAgY2FzZSBDb0M3Q2hlY2sudHlwZS5jaGFyYWN0ZXJpc3RpYzpcbiAgICAgICAgcm9sbC5jaGFyYWN0ZXJpc3RpYyA9IHJvbGxEYXRhLnZhbHVlPy5rZXlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnR5cGUuYXR0cmlidXRlOlxuICAgICAgICByb2xsLmF0dHJpYnV0ZSA9IHJvbGxEYXRhLnZhbHVlPy5rZXlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnR5cGUuaXRlbTpcbiAgICAgICAgcm9sbC5hY3RvcktleSA9IHJvbGxEYXRhLnZhbHVlLmFjdG9yLmFjdG9yS2V5XG4gICAgICAgIGlmIChyb2xsRGF0YS52YWx1ZT8udHlwZSA9PT0gJ3NraWxsJykgcm9sbC5za2lsbCA9IHJvbGxEYXRhLnZhbHVlLmlkXG4gICAgICAgIGVsc2Ugcm9sbC5pdGVtID0gcm9sbERhdGEudmFsdWUuaWRcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnR5cGUuc2tpbGw6XG4gICAgICAgIHJvbGwuYWN0b3JLZXkgPSByb2xsRGF0YS52YWx1ZS5hY3Rvci5hY3RvcktleVxuICAgICAgICByb2xsLnNraWxsID0gcm9sbERhdGEudmFsdWUuaWRcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnR5cGUudmFsdWU6XG4gICAgICAgIHJvbGwuZGlzcGxheU5hbWUgPSByb2xsRGF0YS52YWx1ZS5uYW1lXG4gICAgICAgIHJvbGwucmF3VmFsdWUgPSByb2xsRGF0YS52YWx1ZS50aHJlc2hvbGRcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHJldHVybiBDb0M3Q2hlY2suY3JlYXRlKHJvbGwpXG4gIH1cblxuICBzdGF0aWMgY3JlYXRlICh7XG4gICAgZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhcixcbiAgICBkaWNlTW9kaWZpZXIgPSBudWxsLFxuICAgIGFjdG9yS2V5ID0gbnVsbCxcbiAgICBjaGFyYWN0ZXJpc3RpYyA9IG51bGwsXG4gICAgYXR0cmlidXRlID0gbnVsbCxcbiAgICByYXdWYWx1ZSA9IDAsXG4gICAgaXRlbSA9IG51bGwsXG4gICAgc2tpbGwgPSBudWxsLFxuICAgIGZsYXREaWNlTW9kaWZpZXIgPSAwLFxuICAgIGZsYXRUaHJlc2hvbGRNb2RpZmllciA9IDAsXG4gICAgZGlzcGxheU5hbWUgPSBudWxsLFxuICAgIGFjdG9yTmFtZSA9IG51bGwsXG4gICAgZGVueVB1c2ggPSB1bmRlZmluZWRcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICBjaGVjay5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eVxuICAgIGlmIChkZW55UHVzaCA9PT0gdHJ1ZSkgY2hlY2suZGVueVB1c2ggPSB0cnVlXG4gICAgaWYgKGRpY2VNb2RpZmllcikgY2hlY2suZGljZU1vZGlmaWVyID0gZGljZU1vZGlmaWVyXG4gICAgaWYgKGZsYXREaWNlTW9kaWZpZXIpIGNoZWNrLmZsYXREaWNlTW9kaWZpZXIgPSBmbGF0RGljZU1vZGlmaWVyXG4gICAgaWYgKGZsYXRUaHJlc2hvbGRNb2RpZmllcikge1xuICAgICAgY2hlY2suZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gZmxhdFRocmVzaG9sZE1vZGlmaWVyXG4gICAgfVxuICAgIGlmIChkaXNwbGF5TmFtZSkgY2hlY2suZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZVxuICAgIGlmIChhY3RvcktleSkgY2hlY2suYWN0b3IgPSBhY3RvcktleVxuICAgIGlmIChhY3Rvck5hbWUpIGNoZWNrLmFjdG9yTmFtZSA9IGFjdG9yTmFtZVxuICAgIGlmICghaXNOYU4oTnVtYmVyKHJhd1ZhbHVlKSkpIGNoZWNrLnJhd1ZhbHVlID0gTnVtYmVyKHJhd1ZhbHVlKVxuICAgIGlmIChjaGVjay5hY3RvciAmJiAhY2hlY2suYWN0b3IuaXNEdW1teSkge1xuICAgICAgLy8gVE9ETyA6IEFkZCBjaGVjayBmb3IgdmFsaWRpdHkgb2YgY2hhcmFjdGVyaXN0aWMsIGF0dHJpYnV0ZSwgc2tpbGxJZFxuICAgICAgaWYgKHNraWxsKSBjaGVjay5za2lsbCA9IHNraWxsXG4gICAgICAvLyBUT0RPIDogdHJ5IHJldHJpZXZlIHNraWxsIGJ5IG5hbWVcbiAgICAgIGVsc2UgaWYgKGNoYXJhY3RlcmlzdGljKSBjaGVjay5jaGFyYWN0ZXJpc3RpYyA9IGNoYXJhY3RlcmlzdGljXG4gICAgICBlbHNlIGlmIChhdHRyaWJ1dGUpIGNoZWNrLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZVxuICAgICAgZWxzZSBpZiAoaXRlbSkgY2hlY2suaXRlbSA9IGl0ZW1cbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrXG4gIH1cblxuICBhc3luYyByb2xsQ2hhcmFjdGVyaXN0aWMgKGNoYXIsIGRpY2VNb2QgPSBudWxsLCBkaWZmaWN1bHR5ID0gbnVsbCkge1xuICAgIGlmIChkaWNlTW9kKSB0aGlzLmRpY2VNb2RpZmllciA9IGRpY2VNb2RcbiAgICBpZiAoZGlmZmljdWx0eSkgdGhpcy5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eVxuICAgIHRoaXMuY2hhcmFjdGVyaXN0aWMgPSBjaGFyXG4gICAgaWYgKCF0aGlzLnN0YW5kYnkpIGF3YWl0IHRoaXMuX3BlcmZvcm0oKVxuICB9XG5cbiAgYXN5bmMgcm9sbEF0dHJpYnV0ZSAoYXR0cmliLCBkaWNlTW9kID0gbnVsbCwgZGlmZmljdWx0eSA9IG51bGwpIHtcbiAgICBpZiAoZGljZU1vZCkgdGhpcy5kaWNlTW9kaWZpZXIgPSBkaWNlTW9kXG4gICAgaWYgKGRpZmZpY3VsdHkpIHRoaXMuZGlmZmljdWx0eSA9IGRpZmZpY3VsdHlcbiAgICB0aGlzLmF0dHJpYnV0ZSA9IGF0dHJpYlxuICAgIGlmICghdGhpcy5zdGFuZGJ5KSBhd2FpdCB0aGlzLl9wZXJmb3JtKClcbiAgfVxuXG4gIGFzeW5jIHJvbGxWYWx1ZSAodmFsLCBkaWNlTW9kID0gbnVsbCwgZGlmZmljdWx0eSA9IG51bGwpIHtcbiAgICBpZiAoZGljZU1vZCkgdGhpcy5kaWNlTW9kaWZpZXIgPSBkaWNlTW9kXG4gICAgaWYgKGRpZmZpY3VsdHkpIHRoaXMuZGlmZmljdWx0eSA9IGRpZmZpY3VsdHlcbiAgICB0aGlzLnJhd1ZhbHVlID0gdmFsXG4gICAgaWYgKCF0aGlzLnN0YW5kYnkpIGF3YWl0IHRoaXMuX3BlcmZvcm0oKVxuICB9XG5cbiAgZ2V0IHJvbGxlZFN1Y2Nlc3NMZXZlbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VjY2Vzc0xldmVsXG4gIH1cblxuICBhc3luYyBfcGVyZm9ybSAob3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5kaWNlID1cbiAgICAgIG9wdGlvbnMucm9sbCB8fFxuICAgICAgKGF3YWl0IENvQzdEaWNlLnJvbGwodGhpcy5kaWNlTW9kaWZpZXIsIHRoaXMucm9sbE1vZGUsIHRoaXMuaXNCbGluZCkpXG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCAmJiAhZ2FtZS5tb2R1bGVzLmdldCgnZGljZS1zby1uaWNlJyk/LmFjdGl2ZSkge1xuICAgICAgQXVkaW9IZWxwZXIucGxheSh7IHNyYzogQ09ORklHLnNvdW5kcy5kaWNlIH0sIHRydWUpXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZm9yY2VEU04pIHtcbiAgICAgIGF3YWl0IENvQzdEaWNlLnNob3dSb2xsRGljZTNkKHRoaXMuZGljZS5yb2xsKVxuICAgIH1cblxuICAgIHRoaXMuZGljZXMgPSB7XG4gICAgICB0ZW5zOiBbXSxcbiAgICAgIHVuaXQ6IHtcbiAgICAgICAgdmFsdWU6IHRoaXMuZGljZS51bml0LnRvdGFsXG4gICAgICB9LFxuICAgICAgdG90YWw6IHRoaXMuZGljZS50b3RhbCxcbiAgICAgIHRlblJlc3VsdDogdGhpcy5kaWNlLnRvdGFsIC0gdGhpcy5kaWNlLnVuaXQudG90YWwsXG4gICAgICBoYXNCb251czogISF0aGlzLmRpY2VNb2RpZmllcixcbiAgICAgIGJvbnVzOiBNYXRoLmFicyh0aGlzLmRpY2VNb2RpZmllciksXG4gICAgICBib251c1R5cGU6XG4gICAgICAgIHRoaXMuZGljZU1vZGlmaWVyIDwgMFxuICAgICAgICAgID8gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5EaWNlTW9kaWZpZXJQZW5hbHR5JylcbiAgICAgICAgICA6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRGljZU1vZGlmaWVyQm9udXMnKSxcbiAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVxuICAgIH1cblxuICAgIGNvbnN0IG1heCA9IHRoaXMuZGljZS51bml0LnRvdGFsID09PSAwID8gMTAwIDogOTBcbiAgICBjb25zdCBtaW4gPSB0aGlzLmRpY2UudW5pdC50b3RhbCA9PT0gMCA/IDEwIDogMFxuICAgIGxldCBzZWxlY3RlZCA9IHRoaXMuZGljZS50b3RhbCAtIHRoaXMuZGljZS51bml0LnRvdGFsXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGljZS50ZW5zLnJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGRpZSA9IHt9XG4gICAgICBkaWUudmFsdWUgPSB0aGlzLmRpY2UudGVucy5yZXN1bHRzW2ldXG4gICAgICBpZiAoZGllLnZhbHVlID09PSBzZWxlY3RlZCkge1xuICAgICAgICBzZWxlY3RlZCA9IDEwMVxuICAgICAgICBkaWUuc2VsZWN0ZWQgPSB0cnVlXG4gICAgICAgIGlmICh0aGlzLmRpY2VzLmhhc0JvbnVzKSB7XG4gICAgICAgICAgZGllLmlzTWF4ID0gdHJ1ZVxuICAgICAgICAgIGRpZS5pc01pbiA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGllLmlzTWluID0gdHJ1ZVxuICAgICAgICAgIGRpZS5pc01heCA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkaWUudmFsdWUgPT09IG1heCkgZGllLmlzTWF4ID0gdHJ1ZVxuICAgICAgICBlbHNlIGRpZS5pc01heCA9IGZhbHNlXG4gICAgICAgIGlmIChkaWUudmFsdWUgPT09IG1pbikgZGllLmlzTWluID0gdHJ1ZVxuICAgICAgICBlbHNlIGRpZS5pc01pbiA9IGZhbHNlXG4gICAgICB9XG4gICAgICAvLyBpZiggZGllLnZhbHVlID09IDEwMCkgZGllLnZhbHVlID0gXCIwMFwiO1xuICAgICAgdGhpcy5kaWNlcy50ZW5zLnB1c2goZGllKVxuICAgIH1cbiAgICB0aGlzLmNvbXB1dGVDaGVjaygpXG4gIH1cblxuICBhc3luYyBjb21wdXRlQ2hlY2sgKCkge1xuICAgIHRoaXMuaXNVbmtub3duID0gdGhpcy51bmtub3duRGlmZmljdWx0eVxuXG4gICAgaWYgKHRoaXMuZ21EaWZmaWN1bHR5UmVndWxhcikge1xuICAgICAgdGhpcy5kaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgfVxuICAgIGlmICh0aGlzLmdtRGlmZmljdWx0eUhhcmQpIHRoaXMuZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZFxuICAgIGlmICh0aGlzLmdtRGlmZmljdWx0eUV4dHJlbWUpIHtcbiAgICAgIHRoaXMuZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZVxuICAgIH1cbiAgICBpZiAodGhpcy5nbURpZmZpY3VsdHlDcml0aWNhbCkge1xuICAgICAgdGhpcy5kaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5jcml0aWNhbFxuICAgIH1cblxuICAgIHRoaXMudGVuT25seU9uZURpZSA9IHRoaXMuZGljZXMudGVucy5sZW5ndGggPT09IDFcblxuICAgIHRoaXMuaXNWYWx1ZSA9IGZhbHNlXG4gICAgdGhpcy5pc0NoYXJhY3RpcmlzdGljID0gZmFsc2VcbiAgICB0aGlzLmlzU2tpbGwgPSBmYWxzZVxuICAgIHRoaXMuaXNJdGVtID0gZmFsc2VcbiAgICB0aGlzLmlzQXR0cmlidXRlID0gZmFsc2VcbiAgICBpZiAodGhpcy5pc1NpbXBsZVJvbGwpIHtcbiAgICAgIHRoaXMuZGVueVB1c2ggPSB0cnVlXG4gICAgICB0aGlzLmRlbnlMdWNrID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5hY3RvciA9PSBudWxsKSB7XG4gICAgICB0aGlzLmlzVmFsdWUgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmNoYXJhY3RlcmlzdGljKSB7XG4gICAgICAgIHRoaXMuaXNDaGFyYWN0aXJpc3RpYyA9IHRydWVcbiAgICAgICAgdGhpcy5yYXdWYWx1ZSA9XG4gICAgICAgICAgdGhpcy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzW3RoaXMuY2hhcmFjdGVyaXN0aWNdLnZhbHVlXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNraWxsKSB7XG4gICAgICAgIHRoaXMuaXNTa2lsbCA9IHRydWVcbiAgICAgICAgdGhpcy5yYXdWYWx1ZSA9IHRoaXMuc2tpbGwudmFsdWVcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlKSB7XG4gICAgICAgIHRoaXMuaXNBdHRyaWJ1dGUgPSB0cnVlXG4gICAgICAgIHRoaXMucmF3VmFsdWUgPSB0aGlzLmFjdG9yLnN5c3RlbS5hdHRyaWJzW3RoaXMuYXR0cmlidXRlXS52YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5sdWNrU3BlbnQgJiYgIXRoaXMuaXNTaW1wbGVSb2xsKSB7XG4gICAgICBpZiAodGhpcy5tb2RpZmllZFJlc3VsdCA8PSB0aGlzLnJhd1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tb2RpZmllZFJlc3VsdCA8PSB0aGlzLmhhcmRUaHJlc2hvbGQpIHtcbiAgICAgICAgdGhpcy5zdWNjZXNzTGV2ZWwgPSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmRcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1vZGlmaWVkUmVzdWx0IDw9IHRoaXMuZXh0cmVtZVRocmVzaG9sZCkge1xuICAgICAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMubW9kaWZpZWRSZXN1bHQgPiB0aGlzLnJhd1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mYWlsdXJlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tb2RpZmllZFJlc3VsdCA9PT0gMSkge1xuICAgICAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuY3JpdGljYWxcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmZ1bWJsZVRocmVzaG9sZCA8PSB0aGlzLm1vZGlmaWVkUmVzdWx0KSB7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mdW1ibGVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwucmVndWxhcjpcbiAgICAgICAgdGhpcy5yZXN1bHRUeXBlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZWd1bGFyU3VjY2VzcycpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZDpcbiAgICAgICAgdGhpcy5yZXN1bHRUeXBlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5IYXJkU3VjY2VzcycpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZTpcbiAgICAgICAgdGhpcy5yZXN1bHRUeXBlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FeHRyZW1lU3VjY2VzcycpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuY3JpdGljYWw6XG4gICAgICAgIHRoaXMucmVzdWx0VHlwZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ3JpdGljYWxTdWNjZXNzJylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mdW1ibGU6XG4gICAgICAgIHRoaXMucmVzdWx0VHlwZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRnVtYmxlJylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mYWlsdXJlOlxuICAgICAgICB0aGlzLnJlc3VsdFR5cGUgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkZhaWx1cmUnKVxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIGlmICh0aGlzLnVua25vd25EaWZmaWN1bHR5KSB7XG4gICAgICB0aGlzLnN1Y2Nlc3NSZXF1aXJlZCA9ICcnXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1NpbXBsZVJvbGwpIHtcbiAgICAgIHRoaXMuc3VjY2Vzc1JlcXVpcmVkID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5TdWNjZXNzUmVxdWlyZWQnLCB7XG4gICAgICAgIHN1Y2Nlc3NSZXF1aXJlZDogdGhpcy5kaWZmaWN1bHR5U3RyaW5nXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICh0aGlzLm1vZGlmaWVkUmVzdWx0ID09PSAxKSB7XG4gICAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuY3JpdGljYWxcbiAgICB9XG4gICAgaWYgKCF0aGlzLmx1Y2tTcGVudCAmJiAhdGhpcy5pc1Vua25vd24gJiYgIXRoaXMuaXNTaW1wbGVSb2xsKSB7XG4gICAgICB0aGlzLmlzRmFpbHVyZSA9IHRoaXMuZmFpbGVkXG4gICAgICB0aGlzLmlzU3VjY2VzcyA9IHRoaXMucGFzc2VkXG4gICAgfVxuXG4gICAgdGhpcy5oYXNNYWxmdW5jdGlvbiA9IGZhbHNlXG4gICAgaWYgKHRoaXMuaXNGdW1ibGUpIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mdW1ibGVcblxuICAgIGlmICh0aGlzLml0ZW0pIHtcbiAgICAgIHRoaXMuaXNJdGVtID0gdHJ1ZVxuICAgICAgaWYgKHRoaXMuaXRlbS5zeXN0ZW0ubWFsZnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIE51bWJlcih0aGlzLm1vZGlmaWVkUmVzdWx0KSA+PSBOdW1iZXIodGhpcy5pdGVtLnN5c3RlbS5tYWxmdW5jdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5oYXNNYWxmdW5jdGlvbiA9IHRydWVcbiAgICAgICAgICB0aGlzLm1hbGZ1bmN0aW9uVHh0ID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NYWxmdW5jdGlvbicsIHtcbiAgICAgICAgICAgIGl0ZW1OYW1lOiB0aGlzLml0ZW0ubmFtZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgYXdhaXQgdGhpcy5pdGVtLnRvZ2dsZUl0ZW1GbGFnKENvQzdJdGVtLmZsYWdzLm1hbGZ1bmN0aW9uKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmNhbkJlUHVzaGVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5jYW5CZVB1c2hlZCA9IHRoaXMuc2tpbGwgPyB0aGlzLnNraWxsLmNhbkJlUHVzaGVkKCkgOiBmYWxzZVxuICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyaXN0aWMgIT0gbnVsbCkgdGhpcy5jYW5CZVB1c2hlZCA9IHRydWVcbiAgICAgIGlmICh0aGlzLmlzRnVtYmxlKSB0aGlzLmNhbkJlUHVzaGVkID0gZmFsc2VcbiAgICAgIGlmICh0aGlzLmRlbnlQdXNoKSB0aGlzLmNhbkJlUHVzaGVkID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZGVueUx1Y2sgJiYgdGhpcy5hY3Rvcikge1xuICAgICAgaWYgKFxuICAgICAgICAhdGhpcy5sdWNrU3BlbnQgJiZcbiAgICAgICAgIXRoaXMucGFzc2VkICYmXG4gICAgICAgICF0aGlzLmlzRnVtYmxlICYmXG4gICAgICAgIHRoaXMuZGlmZmljdWx0eSAhPT0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5jcml0aWNhbCAmJlxuICAgICAgICAhdGhpcy51bmtub3duRGlmZmljdWx0eVxuICAgICAgKSB7XG4gICAgICAgIGlmICh0aGlzLnNraWxsIHx8IHRoaXMuY2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgICAgICBjb25zdCBsdWNrTmVlZGVkID0gdGhpcy5tb2RpZmllZFJlc3VsdCAtIHRoaXMuc3VjY2VzVGhyZXNob2xkXG4gICAgICAgICAgaWYgKHRoaXMuYWN0b3IubHVjayA+IGx1Y2tOZWVkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzRW5vdWdoTHVjayA9IHRydWVcbiAgICAgICAgICAgIHRoaXMubHVja05lZWRlZCA9IGx1Y2tOZWVkZWRcbiAgICAgICAgICAgIHRoaXMubHVja05lZWRlZFR4dCA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU3BlbmRMdWNrJywge1xuICAgICAgICAgICAgICBsdWNrTmVlZGVkVmFsdWU6IGx1Y2tOZWVkZWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5sdWNrU3BlbnQpIHtcbiAgICAgICAgdGhpcy5pbmNyZWFzZVN1Y2Nlc3MgPSBbXVxuXG4gICAgICAgIC8vIENhbid0IHNwZW5kIGx1Y2sgb24gcHVzaGVkIHJvbGxzLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgIXRoaXMucHVzaGluZyAmJlxuICAgICAgICAgIHRoaXMuYXR0cmlidXRlICE9PSAnbGNrJyAmJlxuICAgICAgICAgIHRoaXMuYXR0cmlidXRlICE9PSAnc2FuJ1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnVua25vd25EaWZmaWN1bHR5ICYmXG4gICAgICAgICAgICB0aGlzLm1vZGlmaWVkUmVzdWx0ID4gdGhpcy5yZWd1bGFyVGhyZXNob2xkXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0TGV2ZWwgPSB7fVxuICAgICAgICAgICAgbmV4dExldmVsLmRpZmZpY3VsdHlOYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICAnQ29DNy5SZWd1bGFyRGlmZmljdWx0eSdcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIG5leHRMZXZlbC5kaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyIC8vIFJFRkFDVE9SSU5HICgxKVxuICAgICAgICAgICAgbmV4dExldmVsLmx1Y2tUb1NwZW5kID0gdGhpcy5tb2RpZmllZFJlc3VsdCAtIHRoaXMucmVndWxhclRocmVzaG9sZCAvLyBSRUZBQ1RPUklORyAoMSlcbiAgICAgICAgICAgIG5leHRMZXZlbC5oYXNFbm91Z2hMdWNrID0gbmV4dExldmVsLmx1Y2tUb1NwZW5kIDw9IHRoaXMuYWN0b3IubHVja1xuICAgICAgICAgICAgaWYgKG5leHRMZXZlbC5sdWNrVG9TcGVuZCA8PSB0aGlzLmFjdG9yLmx1Y2spIHtcbiAgICAgICAgICAgICAgdGhpcy5pbmNyZWFzZVN1Y2Nlc3MucHVzaChuZXh0TGV2ZWwpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5kaWZmaWN1bHR5IDw9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhciAmJlxuICAgICAgICAgICAgdGhpcy5tb2RpZmllZFJlc3VsdCA+IHRoaXMuaGFyZFRocmVzaG9sZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgbmV4dExldmVsID0ge31cbiAgICAgICAgICAgIG5leHRMZXZlbC5kaWZmaWN1bHR5TmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXJkRGlmZmljdWx0eScpXG4gICAgICAgICAgICBuZXh0TGV2ZWwuZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZCAvLyBSRUZBQ1RPUklORyAoMSlcbiAgICAgICAgICAgIG5leHRMZXZlbC5sdWNrVG9TcGVuZCA9IHRoaXMubW9kaWZpZWRSZXN1bHQgLSB0aGlzLmhhcmRUaHJlc2hvbGQgLy8gUkVGQUNUT1JJTkcgKDEpXG4gICAgICAgICAgICBuZXh0TGV2ZWwuaGFzRW5vdWdoTHVjayA9IG5leHRMZXZlbC5sdWNrVG9TcGVuZCA8PSB0aGlzLmFjdG9yLmx1Y2tcbiAgICAgICAgICAgIGlmIChuZXh0TGV2ZWwubHVja1RvU3BlbmQgPD0gdGhpcy5hY3Rvci5sdWNrKSB7XG4gICAgICAgICAgICAgIHRoaXMuaW5jcmVhc2VTdWNjZXNzLnB1c2gobmV4dExldmVsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuZGlmZmljdWx0eSA8PSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmhhcmQgJiZcbiAgICAgICAgICAgIHRoaXMubW9kaWZpZWRSZXN1bHQgPiB0aGlzLmV4dHJlbWVUaHJlc2hvbGRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRMZXZlbCA9IHt9XG4gICAgICAgICAgICBuZXh0TGV2ZWwuZGlmZmljdWx0eU5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5J1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgbmV4dExldmVsLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmV4dHJlbWVcbiAgICAgICAgICAgIG5leHRMZXZlbC5sdWNrVG9TcGVuZCA9IHRoaXMubW9kaWZpZWRSZXN1bHQgLSB0aGlzLmV4dHJlbWVUaHJlc2hvbGQgLy8gUkVGQUNUT1JJTkcgKDEpXG4gICAgICAgICAgICBuZXh0TGV2ZWwuaGFzRW5vdWdoTHVjayA9IG5leHRMZXZlbC5sdWNrVG9TcGVuZCA8PSB0aGlzLmFjdG9yLmx1Y2sgLy8gUkVGQUNUT1JJTkcgKDEpXG4gICAgICAgICAgICBpZiAobmV4dExldmVsLmx1Y2tUb1NwZW5kIDw9IHRoaXMuYWN0b3IubHVjaykge1xuICAgICAgICAgICAgICB0aGlzLmluY3JlYXNlU3VjY2Vzcy5wdXNoKG5leHRMZXZlbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5jYW5JbmNyZWFzZVN1Y2Nlc3MgPSB0aGlzLmluY3JlYXNlU3VjY2Vzcy5sZW5ndGggPiAwXG4gICAgICBpZiAodGhpcy5pc0Z1bWJsZSkgdGhpcy5jYW5JbmNyZWFzZVN1Y2Nlc3MgPSBmYWxzZVxuICAgIH1cblxuICAgIHRoaXMuY2FuQXdhcmRFeHBlcmllbmNlID1cbiAgICAgIHRoaXMuc2tpbGwgJiYgIXRoaXMuc2tpbGwuc3lzdGVtLnByb3BlcnRpZXMubm94cGdhaW5cblxuICAgIGlmIChcbiAgICAgIHRoaXMucGFzc2VkICYmXG4gICAgICB0aGlzLmRpY2VNb2RpZmllciA8PSAwICYmXG4gICAgICB0aGlzLnNraWxsICYmXG4gICAgICAhdGhpcy5za2lsbC5zeXN0ZW0ucHJvcGVydGllcy5ub3hwZ2FpbiAmJlxuICAgICAgIXRoaXMubHVja1NwZW50ICYmXG4gICAgICAhdGhpcy5mb3JjZWQgJiZcbiAgICAgICF0aGlzLmlzQmxpbmQgJiZcbiAgICAgICF0aGlzLmlzVW5rbm93blxuICAgICkge1xuICAgICAgdGhpcy5mbGFnRm9yRGV2ZWxvcGVtZW50KClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IGF3YWl0IGZyb21VdWlkKHRoaXMucGFyZW50KVxuICAgICAgaWYgKHBhcmVudCAmJiAndXBkYXRlUm9sbCcgaW4gcGFyZW50KSB7XG4gICAgICAgIGF3YWl0IHBhcmVudC51cGRhdGVSb2xsKHRoaXMuSlNPTlJvbGxTdHJpbmcpXG4gICAgICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggYFJvbGwgJHt0aGlzLnV1aWR9IGRlcGVuZHMgb2YgJHt0aGlzLnBhcmVudH1gKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNob3dEaWNlUm9sbCAoKSB7XG4gICAgaWYgKGdhbWUubW9kdWxlcy5nZXQoJ2RpY2Utc28tbmljZScpPy5hY3RpdmUpIHtcbiAgICAgIGNvbnN0IGRpY2VSZXN1bHRzID0gW11cbiAgICAgIGZvciAoY29uc3QgZGllUmVzdWx0IG9mIHRoaXMuZGljZXMudGVucykge1xuICAgICAgICBkaWNlUmVzdWx0cy5wdXNoKGRpZVJlc3VsdC52YWx1ZSA9PT0gMTAwID8gMCA6IGRpZVJlc3VsdC52YWx1ZSAvIDEwKVxuICAgICAgfVxuICAgICAgZGljZVJlc3VsdHMucHVzaCh0aGlzLmRpY2VzLnVuaXQudmFsdWUpXG5cbiAgICAgIGNvbnN0IGRpY2VEYXRhID0ge1xuICAgICAgICBmb3JtdWxhOiBgJHt0aGlzLmRpY2VzLnRlbnMubGVuZ3RofWQxMDArMWQxMGAsXG4gICAgICAgIHJlc3VsdHM6IGRpY2VSZXN1bHRzLFxuICAgICAgICB3aGlzcGVyOiBudWxsLFxuICAgICAgICBibGluZDogZmFsc2VcbiAgICAgIH1cbiAgICAgIGdhbWUuZGljZTNkLnNob3coZGljZURhdGEpXG4gICAgfVxuICB9XG5cbiAgZ2V0IGNzc0NsYXNzICgpIHtcbiAgICBsZXQgY3NzQ2xhc3MgPSAnJ1xuICAgIGlmICh0aGlzLmlzU3VjY2VzcykgY3NzQ2xhc3MgPSAnc3VjY2VzcydcbiAgICBpZiAodGhpcy5pc0ZhaWx1cmUpIGNzc0NsYXNzID0gJ2ZhaWx1cmUnXG4gICAgaWYgKHRoaXMuaXNDcml0aWNhbCAmJiAhdGhpcy5pc0ZhaWx1cmUpIGNzc0NsYXNzID0gJ3N1Y2Nlc3MgY3JpdGljYWwnXG4gICAgaWYgKHRoaXMuaXNGdW1ibGUgJiYgIXRoaXMuaXNTdWNjZXNzKSBjc3NDbGFzcyA9ICdmYWlsdXJlIGZ1bWJsZSdcbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgY3NzQ2xhc3MgKz0gJyByZWd1bGFyLXN1Y2Nlc3MnXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBjc3NDbGFzcyArPSAnIGhhcmQtc3VjY2VzcydcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGNzc0NsYXNzICs9ICcgZXh0cmVtZS1zdWNjZXNzJ1xuICAgIH1cblxuICAgIHJldHVybiBjc3NDbGFzc1xuICB9XG5cbiAgZ2V0IGNzc0NsYXNzTGlzdCAoKSB7XG4gICAgY29uc3QgY3NzQ2xhc3MgPSBbXVxuICAgIGlmICh0aGlzLmlzU3VjY2VzcykgY3NzQ2xhc3MucHVzaCgnc3VjY2VzcycpXG4gICAgaWYgKHRoaXMuaXNGYWlsdXJlKSBjc3NDbGFzcy5wdXNoKCdmYWlsdXJlJylcbiAgICBpZiAodGhpcy5pc0NyaXRpY2FsICYmICF0aGlzLmlzRmFpbHVyZSkgY3NzQ2xhc3MucHVzaCgnc3VjY2VzcycsICdjcml0aWNhbCcpXG4gICAgaWYgKHRoaXMuaXNGdW1ibGUgJiYgIXRoaXMuaXNTdWNjZXNzKSBjc3NDbGFzcy5wdXNoKCdmYWlsdXJlJywgJ2Z1bWJsZScpXG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwucmVndWxhciA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGNzc0NsYXNzLnB1c2goJ3JlZ3VsYXItc3VjY2VzcycpXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBjc3NDbGFzcy5wdXNoKCdoYXJkLXN1Y2Nlc3MnKVxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgY3NzQ2xhc3MucHVzaCgnZXh0cmVtZS1zdWNjZXNzJylcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzQ2xhc3NcbiAgfVxuXG4gIGdldCBwbGF5ZXJDc3NDbGFzcyAoKSB7XG4gICAgaWYgKHRoaXMuaXNTdWNjZXNzIHx8IHRoaXMuZm9yY2VkU3VjY2VzcykgcmV0dXJuICdzdWNjZXNzJ1xuICAgIGlmICh0aGlzLmlzRmFpbHVyZSB8fCB0aGlzLmZvcmNlZEZhaWx1cmUpIHJldHVybiAnZmFpbHVyZSdcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgYXN5bmMgdXBncmFkZUNoZWNrICh1cGdyYWRlaW5kZXgsIHVwZGF0ZSA9IHRydWUpIHtcbiAgICBjb25zdCBpbmNyZWFzZWRTdWNjZXNzID0gdGhpcy5pbmNyZWFzZVN1Y2Nlc3NbdXBncmFkZWluZGV4XVxuICAgIGNvbnN0IGx1Y2tBbW91bnQgPVxuICAgICAgcGFyc2VJbnQoaW5jcmVhc2VkU3VjY2Vzcy5sdWNrQW1vdW50KSB8fFxuICAgICAgcGFyc2VJbnQoaW5jcmVhc2VkU3VjY2Vzcy5sdWNrVG9TcGVuZCkgLy8gUkVGQUNUT1JJTkcgKDEpXG4gICAgaWYgKCF0aGlzLmFjdG9yLnNwZW5kTHVjayhsdWNrQW1vdW50KSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvck5vdEVub3VnaEx1Y2snLCB7XG4gICAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3IubmFtZVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMudG90YWxMdWNrU3BlbnQgPSAhcGFyc2VJbnQodGhpcy50b3RhbEx1Y2tTcGVudClcbiAgICAgID8gMFxuICAgICAgOiBwYXJzZUludCh0aGlzLnRvdGFsTHVja1NwZW50KVxuICAgIHRoaXMudG90YWxMdWNrU3BlbnQgKz0gcGFyc2VJbnQobHVja0Ftb3VudClcbiAgICBjb25zdCBuZXdTdWNjZXNzTGV2ZWwgPVxuICAgICAgcGFyc2VJbnQoaW5jcmVhc2VkU3VjY2Vzcy5uZXdTdWNjZXNzTGV2ZWwpIHx8XG4gICAgICBwYXJzZUludChpbmNyZWFzZWRTdWNjZXNzLmRpZmZpY3VsdHkpIC8vIFJFRkFDVE9SSU5HICgxKVxuICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gbmV3U3VjY2Vzc0xldmVsXG4gICAgaWYgKHRoaXMuZGlmZmljdWx0eSA8PSBuZXdTdWNjZXNzTGV2ZWwpIHtcbiAgICAgIHRoaXMuaXNTdWNjZXNzID0gdHJ1ZVxuICAgICAgdGhpcy5pc0ZhaWx1cmUgPSBmYWxzZVxuICAgIH1cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdXBncmFkZWluZGV4ICsgMTsgaW5kZXgrKykge1xuICAgICAgdGhpcy5pbmNyZWFzZVN1Y2Nlc3Muc2hpZnQoKVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5pbmNyZWFzZVN1Y2Nlc3MpIHtcbiAgICAgIHMubHVja1RvU3BlbmQgPSBzLmx1Y2tUb1NwZW5kIC0gbHVja0Ftb3VudFxuICAgIH1cbiAgICB0aGlzLmx1Y2tTcGVudCA9IHRydWVcbiAgICB0aGlzLmNvbXB1dGVDaGVjaygpXG4gICAgaWYgKHVwZGF0ZSkgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgcmVtb3ZlVXBncmFkZXMgKCkge1xuICAgIHRoaXMuY2FuSW5jcmVhc2VTdWNjZXNzID0gZmFsc2VcbiAgICB0aGlzLmluY3JlYXNlU3VjY2VzcyA9IFtdXG4gICAgdGhpcy5sdWNrTmVlZGVkID0gMFxuICAgIHRoaXMubHVja05lZWRlZFR4dCA9IG51bGxcbiAgICB0aGlzLmNhbkJlUHVzaGVkID0gZmFsc2VcbiAgfVxuXG4gIGZvcmNlUGFzcyAobHVja0Ftb3VudCA9IG51bGwsIHVwZGF0ZSA9IHRydWUpIHtcbiAgICBpZiAobHVja0Ftb3VudCkge1xuICAgICAgdGhpcy5hY3Rvci5zcGVuZEx1Y2sobHVja0Ftb3VudClcbiAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gdGhpcy5kaWZmaWN1bHR5XG4gICAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5pbmNyZWFzZVN1Y2Nlc3MpIHtcbiAgICAgICAgcy5sdWNrVG9TcGVuZCA9IHMubHVja1RvU3BlbmQgLSBsdWNrQW1vdW50XG4gICAgICB9XG4gICAgICB0aGlzLmx1Y2tTcGVudCA9IHRydWVcbiAgICAgIHRoaXMuaXNTdWNjZXNzID0gdHJ1ZVxuICAgICAgdGhpcy5pc0ZhaWx1cmUgPSBmYWxzZVxuICAgICAgdGhpcy50b3RhbEx1Y2tTcGVudCA9ICFwYXJzZUludCh0aGlzLnRvdGFsTHVja1NwZW50KVxuICAgICAgICA/IDBcbiAgICAgICAgOiBwYXJzZUludCh0aGlzLnRvdGFsTHVja1NwZW50KVxuICAgICAgdGhpcy50b3RhbEx1Y2tTcGVudCArPSBwYXJzZUludChsdWNrQW1vdW50KVxuICAgICAgdGhpcy5jb21wdXRlQ2hlY2soKVxuICAgICAgaWYgKHVwZGF0ZSkgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9yY2VkID0gdHJ1ZVxuICAgICAgdGhpcy5mb3JjZWRTdWNjZXNzID0gdHJ1ZVxuICAgICAgaWYgKHRoaXMuaXNVbmtub3duKSB7XG4gICAgICAgIHRoaXMuZm9yY2VTdWNjZXNzTGV2ZWwoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyLCB1cGRhdGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZvcmNlU3VjY2Vzc0xldmVsKHRoaXMuZGlmZmljdWx0eSwgdXBkYXRlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvcmNlRmFpbCAodXBkYXRlID0gdHJ1ZSkge1xuICAgIHRoaXMuZm9yY2VkID0gdHJ1ZVxuICAgIHRoaXMuZm9yY2VkRmFpbHVyZSA9IHRydWVcbiAgICBpZiAodGhpcy5pc1Vua25vd24pIHtcbiAgICAgIHRoaXMuZm9yY2VTdWNjZXNzTGV2ZWwoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mYWlsdXJlLCB1cGRhdGUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9yY2VTdWNjZXNzTGV2ZWwodGhpcy5kaWZmaWN1bHR5IC0gMSwgdXBkYXRlKVxuICAgIH1cbiAgfVxuXG4gIF9mb3JjZUNoZWNrIChoaWdoLCBsb3csIHVwZGF0ZSA9IHRydWUpIHtcbiAgICBsZXQgdG90YWwgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaGlnaCAtIGxvdykpICsgbG93ICsgMVxuICAgIGNvbnN0IHVuaXRUb3RhbCA9IHRvdGFsICUgMTBcbiAgICBsZXQgdGVuVG90YWwgPSBNYXRoLmZsb29yKHRvdGFsIC8gMTApXG4gICAgY29uc3QgdGVucyA9IFtdXG5cbiAgICBsZXQgaGFzRW5vdWdoID0gTWF0aC5hYnModGhpcy5kaWNlTW9kaWZpZXIpID09PSB0ZW5zLmxlbmd0aFxuICAgIHdoaWxlICghaGFzRW5vdWdoKSB7XG4gICAgICBsZXQgdGVuID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICBsZXQgcm9sbCA9IHRlbiAqIDEwICsgdW5pdFRvdGFsXG4gICAgICBpZiAocm9sbCA9PT0gMCkge1xuICAgICAgICByb2xsID0gMTAwXG4gICAgICAgIHRlbiA9IDEwMFxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaGFzUGVuYWx0eSAmJiByb2xsIDw9IGhpZ2gpIHtcbiAgICAgICAgdGVucy5wdXNoKHRlbilcbiAgICAgICAgaWYgKHJvbGwgPiB0b3RhbCkgdG90YWwgPSByb2xsXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5oYXNCb251cyAmJiByb2xsID4gbG93KSB7XG4gICAgICAgIHRlbnMucHVzaCh0ZW4pXG4gICAgICAgIGlmIChyb2xsIDwgdG90YWwpIHRvdGFsID0gcm9sbFxuICAgICAgfVxuICAgICAgaGFzRW5vdWdoID0gdGVucy5sZW5ndGggPT09IE1hdGguYWJzKHRoaXMuZGljZU1vZGlmaWVyKVxuICAgIH1cblxuICAgIC8vIEluc2VydCByZXN1bHQgYXQgcmFuZG9tIHBvc2l0aW9uLlxuICAgIGlmICh0ZW5Ub3RhbCA9PT0gMTAgJiYgdW5pdFRvdGFsID09PSAwKSB7XG4gICAgICB0ZW5Ub3RhbCA9IDEwMFxuICAgIH1cbiAgICB0ZW5zLnNwbGljZShcbiAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRlbnMubGVuZ3RoICsgMSksXG4gICAgICAwLFxuICAgICAgdGVuVG90YWwgPT09IDEwID8gMCA6IHRlblRvdGFsXG4gICAgKVxuXG4gICAgdGhpcy5kaWNlcy50ZW5zID0gW11cbiAgICB0aGlzLmRpY2VzLnVuaXQudmFsdWUgPSB1bml0VG90YWxcbiAgICB0aGlzLm1vZGlmaWVkUmVzdWx0ID0gdG90YWxcbiAgICB0aGlzLmRpY2VzLnRvdGFsID0gdG90YWxcbiAgICB0aGlzLmRpY2VzLnRlblJlc3VsdCA9IHRvdGFsIC0gdW5pdFRvdGFsXG5cbiAgICBjb25zdCBtYXggPSB1bml0VG90YWwgPT09IDAgPyAxMDAgOiA5MFxuICAgIGNvbnN0IG1pbiA9IHVuaXRUb3RhbCA9PT0gMCA/IDEwIDogMFxuICAgIGxldCBzZWxlY3RlZCA9IHRvdGFsIC0gdW5pdFRvdGFsXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGRpZSA9IHt9XG4gICAgICBkaWUudmFsdWUgPSB0ZW5zW2ldXG4gICAgICBpZiAoZGllLnZhbHVlID09PSBzZWxlY3RlZCkge1xuICAgICAgICBzZWxlY3RlZCA9IDEwMVxuICAgICAgICBkaWUuc2VsZWN0ZWQgPSB0cnVlXG4gICAgICAgIGlmICh0aGlzLmhhc0JvbnVzKSB7XG4gICAgICAgICAgZGllLmlzTWF4ID0gdHJ1ZVxuICAgICAgICAgIGRpZS5pc01pbiA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGllLmlzTWluID0gdHJ1ZVxuICAgICAgICAgIGRpZS5pc01heCA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkaWUudmFsdWUgPT09IG1heCkgZGllLmlzTWF4ID0gdHJ1ZVxuICAgICAgICBlbHNlIGRpZS5pc01heCA9IGZhbHNlXG4gICAgICAgIGlmIChkaWUudmFsdWUgPT09IG1pbikgZGllLmlzTWluID0gdHJ1ZVxuICAgICAgICBlbHNlIGRpZS5pc01pbiA9IGZhbHNlXG4gICAgICB9XG4gICAgICAvLyBpZiggZGllLnZhbHVlID09IDEwMCkgZGllLnZhbHVlID0gXCIwMFwiO1xuICAgICAgdGhpcy5kaWNlcy50ZW5zLnB1c2goZGllKVxuICAgIH1cblxuICAgIHRoaXMuY29tcHV0ZUNoZWNrKClcbiAgICBpZiAodXBkYXRlKSB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIGZvcmNlU3VjY2Vzc0xldmVsIChzdWNjZXNzTGV2ZWwsIHVwZGF0ZSA9IHRydWUpIHtcbiAgICBsZXQgaGlnaCwgbG93XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZnVtYmxlID09PSBzdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSAxMDBcbiAgICAgIGxvdyA9IHRoaXMuZnVtYmxlVGhyZXNob2xkIC0gMVxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mYWlsdXJlID09PSBzdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGlmICh0aGlzLnJlZ3VsYXJUaHJlc2hvbGQgPT09IHRoaXMuZnVtYmxlVGhyZXNob2xkIC0gMSkge1xuICAgICAgICBoaWdoID0gMTAwXG4gICAgICB9IGVsc2UgaGlnaCA9IHRoaXMuZnVtYmxlVGhyZXNob2xkIC0gMVxuICAgICAgbG93ID0gdGhpcy5yZWd1bGFyVGhyZXNob2xkXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXIgPT09IHN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMucmVndWxhclRocmVzaG9sZFxuICAgICAgbG93ID0gdGhpcy5oYXJkVGhyZXNob2xkXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQgPT09IHN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMuaGFyZFRocmVzaG9sZFxuICAgICAgbG93ID0gdGhpcy5leHRyZW1lVGhyZXNob2xkXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWUgPT09IHN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMuZXh0cmVtZVRocmVzaG9sZFxuICAgICAgbG93ID0gMVxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5jcml0aWNhbCA9PT0gc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gMVxuICAgICAgbG93ID0gMFxuICAgIH1cbiAgICBpZiAoaGlnaCA9PT0gbG93KSBsb3ctLVxuICAgIGlmIChoaWdoID09PSAwKSBoaWdoID0gdGhpcy5mdW1ibGVUaHJlc2hvbGQgLSAxXG4gICAgdGhpcy5fZm9yY2VDaGVjayhoaWdoLCBsb3csIHVwZGF0ZSlcbiAgfVxuXG4gIGluY3JlYXNlU3VjY2Vzc0xldmVsICh1cGRhdGUgPSB0cnVlKSB7XG4gICAgbGV0IGhpZ2gsIGxvd1xuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZ1bWJsZSA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSB0aGlzLmZ1bWJsZVRocmVzaG9sZCAtIDFcbiAgICAgIGlmICh0aGlzLnJlZ3VsYXJUaHJlc2hvbGQgPT09IHRoaXMuZnVtYmxlVGhyZXNob2xkIC0gMSkge1xuICAgICAgICBsb3cgPSB0aGlzLmhhcmRUaHJlc2hvbGRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvdyA9IHRoaXMucmVndWxhclRocmVzaG9sZFxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mYWlsdXJlID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMucmVndWxhclRocmVzaG9sZFxuICAgICAgbG93ID0gdGhpcy5oYXJkVGhyZXNob2xkXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXIgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gdGhpcy5oYXJkVGhyZXNob2xkXG4gICAgICBsb3cgPSB0aGlzLmV4dHJlbWVUaHJlc2hvbGRcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZCA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSB0aGlzLmV4dHJlbWVUaHJlc2hvbGRcbiAgICAgIGxvdyA9IHRoaXMuY3JpdGljYWxUaHJlc2hvbGRcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSB0aGlzLmNyaXRpY2FsVGhyZXNob2xkXG4gICAgICBsb3cgPSAwXG4gICAgfVxuICAgIGlmIChoaWdoID09PSBsb3cpIGxvdy0tXG4gICAgdGhpcy5fZm9yY2VDaGVjayhoaWdoLCBsb3csIHVwZGF0ZSlcbiAgfVxuXG4gIGRlY3JlYXNlU3VjY2Vzc0xldmVsICh1cGRhdGUgPSB0cnVlKSB7XG4gICAgbGV0IGhpZ2gsIGxvd1xuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZhaWx1cmUgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gMTAwXG4gICAgICBsb3cgPSB0aGlzLmZ1bWJsZVRocmVzaG9sZCAtIDFcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwucmVndWxhciA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSB0aGlzLmZ1bWJsZVRocmVzaG9sZCAtIDFcbiAgICAgIGxvdyA9IHRoaXMucmVndWxhclRocmVzaG9sZFxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMucmVndWxhclRocmVzaG9sZFxuICAgICAgbG93ID0gdGhpcy5oYXJkVGhyZXNob2xkXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWUgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gdGhpcy5oYXJkVGhyZXNob2xkXG4gICAgICBsb3cgPSB0aGlzLmV4dHJlbWVUaHJlc2hvbGRcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuY3JpdGljYWwgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gdGhpcy5leHRyZW1lVGhyZXNob2xkXG4gICAgICBsb3cgPSAxXG4gICAgfVxuICAgIGlmIChoaWdoID09PSAwKSBoaWdoID0gdGhpcy5mdW1ibGVUaHJlc2hvbGQgLSAxXG4gICAgdGhpcy5fZm9yY2VDaGVjayhoaWdoLCBsb3csIHVwZGF0ZSlcbiAgfVxuXG4gIGFzeW5jIGZsYWdGb3JEZXZlbG9wZW1lbnQgKCkge1xuICAgIHRoaXMuZmxhZ2dlZEZvckRldmVsb3BtZW50ID0gdHJ1ZVxuICAgIGlmICh0aGlzLnNraWxsKSBhd2FpdCB0aGlzLnNraWxsLmZsYWdGb3JEZXZlbG9wZW1lbnQoKVxuICB9XG5cbiAgc2V0IGRpZmZpY3VsdHkgKHgpIHtcbiAgICB0aGlzLl9kaWZmaWN1bHR5ID0gcGFyc2VJbnQoeClcbiAgfVxuXG4gIGdldCBkaWZmaWN1bHR5ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlmZmljdWx0eVxuICB9XG5cbiAgc2V0IGZsYXZvciAoeCkge1xuICAgIHRoaXMuX2ZsYXZvciA9IHhcbiAgfVxuXG4gIHNldCBjb250ZXh0ICh4KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IHhcbiAgfVxuXG4gIGdldCBjb250ZXh0ICgpIHtcbiAgICBpZiAoIXRoaXMuX2NvbnRleHQpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dFxuICB9XG5cbiAgc2V0IHBhcmVudCAoeCkge1xuICAgIGlmICghdGhpcy51dWlkKSB0aGlzLnV1aWQgPSBmb3VuZHJ5LnV0aWxzLnJhbmRvbUlEKDE2KVxuICAgIHRoaXMucGFyZW50VXVpZCA9IHhcbiAgfVxuXG4gIGdldCBwYXJlbnQgKCkge1xuICAgIGlmICghdGhpcy5wYXJlbnRVdWlkKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMucGFyZW50VXVpZFxuICB9XG5cbiAgZ2V0IGZsYXZvciAoKSB7XG4gICAgaWYgKHRoaXMuX2ZsYXZvcikgcmV0dXJuIHRoaXMuX2ZsYXZvclxuICAgIGxldCBmbGF2b3IgPSAnJ1xuICAgIGlmICh0aGlzLmFjdG9yPy5zeXN0ZW0pIHtcbiAgICAgIGlmICh0aGlzLnNraWxsKSB7XG4gICAgICAgIGZsYXZvciA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ2hlY2tSZXN1bHQnLCB7XG4gICAgICAgICAgbmFtZTogdGhpcy5za2lsbC5uYW1lLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnJhd1ZhbHVlU3RyaW5nLFxuICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZ1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmICh0aGlzLml0ZW0pIHtcbiAgICAgICAgZmxhdm9yID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5JdGVtQ2hlY2tSZXN1bHQnLCB7XG4gICAgICAgICAgaXRlbTogdGhpcy5pdGVtLm5hbWUsXG4gICAgICAgICAgc2tpbGw6IHRoaXMuc2tpbGwubmFtZSxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5yYXdWYWx1ZVN0cmluZyxcbiAgICAgICAgICBkaWZmaWN1bHR5OiB0aGlzLmRpZmZpY3VsdHlTdHJpbmdcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jaGFyYWN0ZXJpc3RpYykge1xuICAgICAgICBmbGF2b3IgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNoZWNrUmVzdWx0Jywge1xuICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICB0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3NbdGhpcy5jaGFyYWN0ZXJpc3RpY10ubGFiZWxcbiAgICAgICAgICApLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnJhd1ZhbHVlU3RyaW5nLFxuICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZ1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmF0dHJpYnV0ZSkge1xuICAgICAgICBmbGF2b3IgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNoZWNrUmVzdWx0Jywge1xuICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICBgQ29DNy4ke3RoaXMuYWN0b3Iuc3lzdGVtLmF0dHJpYnNbdGhpcy5hdHRyaWJ1dGVdLmxhYmVsfWBcbiAgICAgICAgICApLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnJhd1ZhbHVlU3RyaW5nLFxuICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZ1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgIGZsYXZvciA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ2hlY2tSZXN1bHQnLCB7XG4gICAgICAgICAgbmFtZTogdGhpcy5kaXNwbGF5TmFtZSxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5yYXdWYWx1ZVN0cmluZyxcbiAgICAgICAgICBkaWZmaWN1bHR5OiB0aGlzLmRpZmZpY3VsdHlTdHJpbmdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWZsYXZvcikge1xuICAgICAgaWYgKHRoaXMucmF3VmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICBmbGF2b3IgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNoZWNrUmVzdWx0Jywge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnJhd1ZhbHVlU3RyaW5nLFxuICAgICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5U3RyaW5nXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbGF2b3IgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNoZWNrUmF3VmFsdWUnLCB7XG4gICAgICAgICAgICByYXd2YWx1ZTogdGhpcy5yYXdWYWx1ZSxcbiAgICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wdXNoaW5nKSB7XG4gICAgICBmbGF2b3IgPSBgJHtnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlB1c2hpbmcnKX0gJHtmbGF2b3J9YFxuICAgIH1cblxuICAgIHJldHVybiBmbGF2b3JcbiAgfVxuXG4gIGdldCB0b29sdGlwSGVhZGVyICgpIHtcbiAgICBpZiAodGhpcy5hdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgYENvQzcuTGlua0NoZWNrJHtcbiAgICAgICAgICAgIHRoaXMuZGlmZmljdWx0eSA9PT0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyID8gJycgOiAnRGlmZidcbiAgICAgICAgICB9JHshdGhpcy5kaWNlTW9kaWZpZXIgPyAnJyA6ICdNb2RpZid9YCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkaWZmaWN1bHR5OiB0aGlzLmRpZmZpY3VsdHlTdHJpbmcsXG4gICAgICAgICAgICBtb2RpZmllcjogdGhpcy5kaWNlTW9kaWZpZXIsXG4gICAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICBgQ29DNy4ke3RoaXMuYWN0b3Iuc3lzdGVtLmF0dHJpYnNbdGhpcy5hdHRyaWJ1dGVdLmxhYmVsfWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgICkgKyBgICgke3RoaXMuYWN0b3Iuc3lzdGVtLmF0dHJpYnNbdGhpcy5hdHRyaWJ1dGVdLnZhbHVlfSUpYFxuICAgICAgKVxuICAgIH1cbiAgICBpZiAodGhpcy5jaGFyYWN0ZXJpc3RpYykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICBgQ29DNy5MaW5rQ2hlY2ske1xuICAgICAgICAgICAgdGhpcy5kaWZmaWN1bHR5ID09PSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIgPyAnJyA6ICdEaWZmJ1xuICAgICAgICAgIH0keyF0aGlzLmRpY2VNb2RpZmllciA/ICcnIDogJ01vZGlmJ31gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZyxcbiAgICAgICAgICAgIG1vZGlmaWVyOiB0aGlzLmRpY2VNb2RpZmllcixcbiAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgdGhpcy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzW3RoaXMuY2hhcmFjdGVyaXN0aWNdLmxhYmVsXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICApICtcbiAgICAgICAgYCAoJHt0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3NbdGhpcy5jaGFyYWN0ZXJpc3RpY10udmFsdWV9JSlgXG4gICAgICApXG4gICAgfVxuICAgIGlmICh0aGlzLnNraWxsKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgIGBDb0M3LkxpbmtDaGVjayR7XG4gICAgICAgICAgICB0aGlzLmRpZmZpY3VsdHkgPT09IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhciA/ICcnIDogJ0RpZmYnXG4gICAgICAgICAgfSR7IXRoaXMuZGljZU1vZGlmaWVyID8gJycgOiAnTW9kaWYnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5U3RyaW5nLFxuICAgICAgICAgICAgbW9kaWZpZXI6IHRoaXMuZGljZU1vZGlmaWVyLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5za2lsbC5uYW1lXG4gICAgICAgICAgfVxuICAgICAgICApICsgYCAoJHt0aGlzLnNraWxsLnZhbHVlfSUpYFxuICAgICAgKVxuICAgIH1cbiAgICBpZiAodGhpcy5kaXNwbGF5TmFtZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICBgQ29DNy5MaW5rQ2hlY2ske1xuICAgICAgICAgICAgdGhpcy5kaWZmaWN1bHR5ID09PSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIgPyAnJyA6ICdEaWZmJ1xuICAgICAgICAgIH0keyF0aGlzLmRpY2VNb2RpZmllciA/ICcnIDogJ01vZGlmJ31gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZyxcbiAgICAgICAgICAgIG1vZGlmaWVyOiB0aGlzLmRpY2VNb2RpZmllcixcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZGlzcGxheU5hbWVcbiAgICAgICAgICB9XG4gICAgICAgICkgKyBgICgke3RoaXMucmF3VmFsdWVTdHJpbmd9JSlgXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBhc3luYyBnZXRIdG1sUm9sbEVsZW1lbnQgKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9yb2xscy9pbi1jYXJkLXJvbGwuaHRtbCdcbiAgICBpZiAodGhpcy5vcHRpb25zKSB0aGlzLm9wdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHRoaXMub3B0aW9ucywgb3B0aW9ucylcbiAgICBlbHNlIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHRoaXMpXG4gICAgaWYgKGh0bWwpIHJldHVybiAkLnBhcnNlSFRNTChodG1sKVswXVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBhc3luYyBnZXRIdG1sUm9sbCAob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L3JvbGxzL2luLWNhcmQtcm9sbC5odG1sJ1xuICAgIGlmICh0aGlzLm9wdGlvbnMpIHRoaXMub3B0aW9ucyA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QodGhpcy5vcHRpb25zLCBvcHRpb25zKVxuICAgIGVsc2UgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGhpcylcbiAgICByZXR1cm4gaHRtbCB8fCB1bmRlZmluZWRcbiAgfVxuXG4gIGFzeW5jIHRvTWVzc2FnZSAocHVzaGluZyA9IGZhbHNlKSB7XG4gICAgLy8gSWYgY2FyZCBpcyBwcm92aWRlZCBhdHR0YWNoZWQgdGhlIHJvbGwgdG8gdGhlIGNhcmQuIElmIFVSSUQgcHJvdmlkZWQgYXR0YWNoIGF0IHRoaXMgcG9zaXRpb24uP1xuICAgIHRoaXMucHVzaGluZyA9IHB1c2hpbmdcbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvcm9sbC1yZXN1bHQuaHRtbCdcblxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGhpcylcblxuICAgIGNvbnN0IHNwZWFrZXJEYXRhID0ge31cbiAgICBsZXQgc3BlYWtlclxuICAgIGlmICh0aGlzLmFjdG9yKSB7XG4gICAgICBpZiAodGhpcy5hY3Rvci5pc1Rva2VuKSB7XG4gICAgICAgIHNwZWFrZXJEYXRhLnRva2VuID0gdGhpcy50b2tlbi5kb2N1bWVudFxuICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdG9yLmlzRHVtbXkpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0b3IubmFtZSkgc3BlYWtlciA9IHsgYWxpYXM6IHRoaXMuYWN0b3IubmFtZSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGVha2VyRGF0YS5hY3RvciA9IHRoaXMuYWN0b3JcbiAgICAgIH1cbiAgICAgIHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHNwZWFrZXJEYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpXG4gICAgfVxuXG4gICAgY29uc3QgdXNlciA9IHRoaXMuYWN0b3I/LnVzZXIgPyB0aGlzLmFjdG9yLnVzZXIgOiBnYW1lLnVzZXJcblxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgdXNlcjogdXNlci5pZCxcbiAgICAgIHNwZWFrZXIsXG4gICAgICBmbGF2b3I6IHRoaXMuZmxhdm9yLFxuICAgICAgY29udGVudDogaHRtbCxcbiAgICAgIGZsYWdzOiB7XG4gICAgICAgIENvQzc6IHtcbiAgICAgICAgICB0eXBlOiBDb0M3Q2hlY2suY2FyZFR5cGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnV1aWQpIGNoYXREYXRhLmZsYWdzLkNvQzcudXVpZCA9IHRoaXMudXVpZFxuICAgIGlmICh0aGlzLmNvbnRleHQpIGNoYXREYXRhLmZsYWdzLkNvQzcuY29udGV4dCA9IHRoaXMuY29udGV4dFxuXG4gICAgaWYgKHRoaXMucm9sbE1vZGUgPT09ICdzZWxmcm9sbCcpIHtcbiAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBjaGF0RGF0YS51c2VyID0gZ2FtZS51c2VyLmlkXG4gICAgICAgIGNoYXREYXRhLmZsYXZvciA9IGBbJHt0aGlzLmFjdG9yLm5hbWV9XSAke2NoYXREYXRhLmZsYXZvcn1gXG4gICAgICAgIGNoYXREYXRhLmZsYWdzID0ge1xuICAgICAgICAgIENvQzc6IHtcbiAgICAgICAgICAgIEdNU2VsZlJvbGw6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjaGF0RGF0YS5zcGVha2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNoYXREYXRhLmZsYWdzLkNvQzcub3JpZ2luYWxTcGVha2VyID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoY2hhdERhdGEuc3BlYWtlcilcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgICBzd2l0Y2ggKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3NlbGZSb2xsV2hpc3BlclRhcmdldCcpKSB7XG4gICAgICAgICAgICBjYXNlICdvd25lcnMnOlxuICAgICAgICAgICAgICBkZWxldGUgY2hhdERhdGEuc3BlYWtlclxuICAgICAgICAgICAgICBjaGF0RGF0YS53aGlzcGVyID0gdGhpcy5hY3Rvci5vd25lcnNcbiAgICAgICAgICAgICAgY2hhdERhdGEudHlwZSA9IENPTlNULkNIQVRfTUVTU0FHRV9UWVBFUy5XSElTUEVSXG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgJ2V2ZXJ5b25lJzpcbiAgICAgICAgICAgICAgZGVsZXRlIGNoYXREYXRhLnNwZWFrZXJcbiAgICAgICAgICAgICAgY2hhdERhdGEud2hpc3BlciA9IGdhbWUudXNlcnMucGxheWVyc1xuICAgICAgICAgICAgICBjaGF0RGF0YS50eXBlID0gQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLldISVNQRVJcbiAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgQ2hhdE1lc3NhZ2UuYXBwbHlSb2xsTW9kZShjaGF0RGF0YSwgdGhpcy5yb2xsTW9kZSlcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBDaGF0TWVzc2FnZS5hcHBseVJvbGxNb2RlKGNoYXREYXRhLCB0aGlzLnJvbGxNb2RlKVxuICAgIH1cblxuICAgIGlmIChbJ2dtcm9sbCcsICdibGluZHJvbGwnXS5pbmNsdWRlcyh0aGlzLnJvbGxNb2RlKSkge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgfVxuICAgIGlmICh0aGlzLnJvbGxNb2RlID09PSAnYmxpbmRyb2xsJykgY2hhdERhdGEuYmxpbmQgPSB0cnVlXG5cbiAgICAvLyBDaGF0TWVzc2FnZS5hcHBseVJvbGxNb2RlKCBjaGF0RGF0YSwgdGhpcy5yb2xsTW9kZSk7XG4gICAgaWYgKHRoaXMuZGljZT8ucm9sbCAmJiAhdGhpcy5kaWNlPy5oaWRlRGljZSkge1xuICAgICAgY2hhdERhdGEucm9sbCA9IHRoaXMuZGljZS5yb2xsXG4gICAgICBjaGF0RGF0YS50eXBlID0gQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLlJPTExcbiAgICAgIGNoYXREYXRhLnJvbGxNb2RlID0gdGhpcy5pc0JsaW5kID8gJ2JsaW5kcm9sbCcgOiB0aGlzLnJvbGxNb2RlXG4gICAgfVxuXG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKS50aGVuKG1zZyA9PiB7XG4gICAgICByZXR1cm4gbXNnXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG1ha2VQdWJsaWMgIFdpbGwgY2hhbmdlIHRoZSByb2xsIG1vZGUgdG8gcHVibGljXG4gICAqL1xuICBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoeyBtYWtlUHVibGljID0gZmFsc2UsIGZvcmNlUm9sbCA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGlmIChtYWtlUHVibGljKSB0aGlzLnJvbGxNb2RlID0gZmFsc2UgLy8gcmVzZXQgcm9sbCBtb2RlXG5cbiAgICBjb25zdCBjaGF0RGF0YSA9IHsgZmxhdm9yOiB0aGlzLmZsYXZvciB9XG5cbiAgICBpZiAobWFrZVB1YmxpYykge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IFtdXG4gICAgICBjaGF0RGF0YS5ibGluZCA9IGZhbHNlXG4gICAgICBDaGF0TWVzc2FnZS5hcHBseVJvbGxNb2RlKGNoYXREYXRhKVxuICAgIH0gLy8gZWxzZSB7XG4gICAgLy8gY2hhdERhdGEud2hpc3BlciA9IFtdXG4gICAgLy8gY2hhdERhdGEuYmxpbmQgPSBmYWxzZVxuICAgIC8vIENoYXRNZXNzYWdlLmFwcGx5Um9sbE1vZGUoY2hhdERhdGEsIGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJykpXG4gICAgLy8gfVxuXG4gICAgaWYgKGNoYXREYXRhLmJsaW5kKSB7XG4gICAgICB0aGlzLmlzQmxpbmQgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgdGVtcGxhdGUgPSAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L3JvbGwtcmVzdWx0Lmh0bWwnXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB0aGlzKVxuICAgIGxldCBuZXdDb250ZW50ID0gaHRtbFxuXG4gICAgaWYgKCF0aGlzLm1lc3NhZ2VJZCkgcmV0dXJuICQucGFyc2VIVE1MKGh0bWwpWzBdIC8vIElmIG5vIG1lc3NhZ2VJZCByZXR1cm4gdGhlIEhUTUxFbGVtZW50IGNvbnRhaW5pbmcgdGhlIHJvbGwuXG4gICAgLy8gSWYgbm8gbWVzc2FnZUlkXG5cbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG4gICAgY29uc3QgaHRtbE1lc3NhZ2UgPSAkLnBhcnNlSFRNTChtZXNzYWdlLmNvbnRlbnQpWzBdXG4gICAgaWYgKCFodG1sTWVzc2FnZS5jbGFzc0xpc3QuY29udGFpbnMoJ3JvbGwtcmVzdWx0JykpIHtcbiAgICAgIGNvbnN0IGh0bWxDaGVjayA9ICQucGFyc2VIVE1MKGh0bWwpWzBdXG4gICAgICBjb25zdCByb2xsUmVzdWx0RWxlbWVudCA9IGh0bWxNZXNzYWdlLnF1ZXJ5U2VsZWN0b3IoJy5yb2xsLXJlc3VsdCcpXG4gICAgICBpZiAocm9sbFJlc3VsdEVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgcm9sbFJlc3VsdEVsZW1lbnQucmVwbGFjZVdpdGgoaHRtbENoZWNrKVxuICAgICAgfVxuICAgICAgbmV3Q29udGVudCA9IGh0bWxNZXNzYWdlLm91dGVySFRNTFxuICAgIH1cblxuICAgIGNoYXREYXRhLmNvbnRlbnQgPSBuZXdDb250ZW50XG5cbiAgICBpZiAoQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLlJPTEwgPT09IG1lc3NhZ2UudHlwZSkge1xuICAgICAgaWYgKG1lc3NhZ2Uud2hpc3Blcj8ubGVuZ3RoKSB7XG4gICAgICAgIGNoYXREYXRhLnR5cGUgPSBDT05TVC5DSEFUX01FU1NBR0VfVFlQRVMuV0hJU1BFUlxuICAgICAgfSBlbHNlIGNoYXREYXRhLnR5cGUgPSBDT05TVC5DSEFUX01FU1NBR0VfVFlQRVMuT1RIRVJcbiAgICB9XG5cbiAgICBpZiAoZm9yY2VSb2xsICYmIHRoaXMuZGljZT8ucm9sbCAmJiAoZ2FtZS51c2VyLmlzR00gfHwgIXRoaXMuaXNCbGluZCkpIHtcbiAgICAgIGF3YWl0IENvQzdEaWNlLnNob3dSb2xsRGljZTNkKHRoaXMuZGljZS5yb2xsKVxuICAgIH1cblxuICAgIGNvbnN0IG1zZyA9IGF3YWl0IG1lc3NhZ2UudXBkYXRlKGNoYXREYXRhKVxuICAgIGF3YWl0IHVpLmNoYXQudXBkYXRlTWVzc2FnZShtc2csIGZhbHNlKVxuICAgIHJldHVybiBtc2dcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB1cGRhdGVDYXJkU3dpdGNoIChldmVudCkge1xuICAgIGNvbnN0IGNhcmQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5jaGF0LWNhcmQnKVxuICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgY2hlY2suZ21EaWZmaWN1bHR5UmVndWxhciA9IGZhbHNlXG4gICAgY2hlY2suZ21EaWZmaWN1bHR5SGFyZCA9IGZhbHNlXG4gICAgY2hlY2suZ21EaWZmaWN1bHR5RXh0cmVtZSA9IGZhbHNlXG4gICAgY2hlY2suZ21EaWZmaWN1bHR5Q3JpdGljYWwgPSBmYWxzZVxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZyA9PT0gJ2dtRGlmZmljdWx0eVJlZ3VsYXInKSB7XG4gICAgICBjaGVjay5nbURpZmZpY3VsdHlSZWd1bGFyID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmZsYWcgPT09ICdnbURpZmZpY3VsdHlIYXJkJykge1xuICAgICAgY2hlY2suZ21EaWZmaWN1bHR5SGFyZCA9IHRydWVcbiAgICB9XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5mbGFnID09PSAnZ21EaWZmaWN1bHR5RXh0cmVtZScpIHtcbiAgICAgIGNoZWNrLmdtRGlmZmljdWx0eUV4dHJlbWUgPSB0cnVlXG4gICAgfVxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZyA9PT0gJ2dtRGlmZmljdWx0eUNyaXRpY2FsJykge1xuICAgICAgY2hlY2suZ21EaWZmaWN1bHR5Q3JpdGljYWwgPSB0cnVlXG4gICAgfVxuICAgIGNoZWNrLmNvbXB1dGVDaGVjaygpXG4gICAgY2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgZ2V0IHRvb2x0aXAgKCkge1xuICAgIHJldHVybiByZW5kZXJUZW1wbGF0ZShcbiAgICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvcm9sbHMvcm9sbC10b29sdGlwLmh0bWwnLFxuICAgICAgdGhpc1xuICAgIClcbiAgfVxuXG4gIGdldCBpbmxpbmVDaGVjayAoKSB7XG4gICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuICAgIGEuY2xhc3NMaXN0LmFkZCgnY29jNy1pbmxpbmUtY2hlY2snKVxuICAgIGEuY2xhc3NMaXN0LmFkZCgnY29jNy1jaGVjay1yZXN1bHQnKVxuICAgIGEuY2xhc3NMaXN0LmFkZCgnY29jNy1pbmxpbmUnKVxuICAgIGEuY2xhc3NMaXN0LmFkZCguLi50aGlzLmNzc0NsYXNzTGlzdClcbiAgICBhLnRpdGxlID0gdGhpcy50b29sdGlwSGVhZGVyXG4gICAgYS5kYXRhc2V0LnJvbGwgPSBlc2NhcGUodGhpcy5KU09OUm9sbFN0cmluZykgLy8gVE9ETyFJTVBPUlRBTlQhISFcbiAgICBhLmlubmVySFRNTCA9IGA8aSBjbGFzcz1cImdhbWUtaWNvbiBnYW1lLWljb24tZDEwXCI+PC9pPiAke1xuICAgICAgdGhpcy5tb2RpZmllZFJlc3VsdCB8fCAnPz8nXG4gICAgfWBcbiAgICByZXR1cm4gYVxuICB9XG5cbiAgZ2V0IHJvbGxUb29sVGlwICgpIHtcbiAgICBpZiAodGhpcy5zdGFuZGJ5KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgcGFydHMgPSBbXVxuICAgIGNvbnN0IHRlbnMgPSB0aGlzLmRpY2VzLnRlbnMubWFwKHIgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiByLnZhbHVlLFxuICAgICAgICBzZWxlY3RlZDogci5zZWxlY3RlZCxcbiAgICAgICAgY2xhc3NlczogW1xuICAgICAgICAgICdkaWUnLFxuICAgICAgICAgICdkMTAnLFxuICAgICAgICAgICFyLnNlbGVjdGVkID8gJ2Rpc2NhcmRlZCcgOiBudWxsLFxuICAgICAgICAgIHIuaXNNaW4gPyAnbWluJyA6IG51bGwsXG4gICAgICAgICAgci5pc01heCA/ICdtYXgnIDogbnVsbFxuICAgICAgICBdXG4gICAgICAgICAgLmZpbHRlcihjID0+IGMpXG4gICAgICAgICAgLmpvaW4oJyAnKVxuICAgICAgfVxuICAgIH0pXG4gICAgY29uc3QgdW5pdCA9IFtcbiAgICAgIHtcbiAgICAgICAgcmVzdWx0OiB0aGlzLmRpY2VzLnVuaXQudmFsdWUsXG4gICAgICAgIHNlbGVjdGVkOiB0cnVlLFxuICAgICAgICBjbGFzc2VzOiAnZGllIGQxMCdcbiAgICAgIH1cbiAgICBdXG5cbiAgICBwYXJ0cy5wdXNoKHtcbiAgICAgIGZvcm11bGE6IHRoaXMudG9vbHRpcEhlYWRlcixcbiAgICAgIHRvdGFsOiB0aGlzLm1vZGlmaWVkUmVzdWx0LFxuICAgICAgaWNvbnM6IHRoaXMuc3VjY2Vzc0xldmVsSWNvbnMsXG4gICAgICBjbGFzczogdGhpcy5jc3NDbGFzcyxcbiAgICAgIHN1Y2Nlc3NSZXF1aXJlZDogdGhpcy5zdWNjZXNzUmVxdWlyZWQsXG4gICAgICByZXN1bHRUeXBlOiB0aGlzLnJlc3VsdFR5cGUsXG4gICAgICBmYWNlOiAxMCxcbiAgICAgIHJvbGxzOiBbLi4udGVucywgLi4udW5pdF1cbiAgICB9KVxuICAgIHJldHVybiByZW5kZXJUZW1wbGF0ZShcbiAgICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvcm9sbHMvcm9sbC10b29sdGlwLmh0bWwnLFxuICAgICAgeyBwYXJ0cyB9XG4gICAgKVxuICB9XG5cbiAgZ2V0IEpTT05Sb2xsRGF0YSAoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5KU09OUm9sbFN0cmluZylcbiAgfVxuXG4gIGdldCBKU09OUm9sbFN0cmluZyAoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGNvbnN0IGV4Y2x1ZGUgPSBbJ19hY3RvcicsICdfc2tpbGwnLCAnX2l0ZW0nXVxuICAgICAgaWYgKGV4Y2x1ZGUuaW5jbHVkZXMoa2V5KSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBmcm9tRGF0YSAoZGF0YSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDb0M3Q2hlY2soKSwgZGF0YSlcbiAgfVxuXG4gIHN0YXRpYyBmcm9tUm9sbFN0cmluZyAoZGF0YVN0cmluZykge1xuICAgIGxldCBkYXRhXG4gICAgdHJ5IHtcbiAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHVuZXNjYXBlKGRhdGFTdHJpbmcpKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlcnIubWVzc2FnZSlcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIHJldHVybiBDb0M3Q2hlY2suZnJvbURhdGEoZGF0YSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBhbHRlciAoY2hlY2ssIGNvbW1hbmQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN3aXRjaCAoY29tbWFuZCkge1xuICAgICAgY2FzZSAndXNlTHVjayc6IHtcbiAgICAgICAgaWYgKG9wdGlvbnMudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncGFzcy1jaGVjaycpKSB7XG4gICAgICAgICAgY29uc3QgbHVja0Ftb3VudCA9IHBhcnNlSW50KG9wdGlvbnMudGFyZ2V0LmRhdGFzZXQubHVja0Ftb3VudClcbiAgICAgICAgICBjaGVjay5mb3JjZVBhc3MobHVja0Ftb3VudCwgb3B0aW9ucy51cGRhdGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdXBncmFkZUluZGV4ID0gcGFyc2VJbnQob3B0aW9ucy50YXJnZXQuZGF0YXNldC5pbmRleClcbiAgICAgICAgICBhd2FpdCBjaGVjay51cGdyYWRlQ2hlY2sodXBncmFkZUluZGV4LCBvcHRpb25zLnVwZGF0ZSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdmb3JjZS1wYXNzJzoge1xuICAgICAgICBjaGVjay5mb3JjZVBhc3MobnVsbCwgb3B0aW9ucy51cGRhdGUpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2ZvcmNlLWZhaWwnOiB7XG4gICAgICAgIGNoZWNrLmZvcmNlRmFpbChvcHRpb25zLnVwZGF0ZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnaW5jcmVhc2Utc3VjY2Vzcy1sZXZlbCc6IHtcbiAgICAgICAgY2hlY2suaW5jcmVhc2VTdWNjZXNzTGV2ZWwob3B0aW9ucy51cGRhdGUpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2RlY3JlYXNlLXN1Y2Nlc3MtbGV2ZWwnOiB7XG4gICAgICAgIGNoZWNrLmRlY3JlYXNlU3VjY2Vzc0xldmVsKG9wdGlvbnMudXBkYXRlKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyZXZlYWwtY2hlY2snOiB7XG4gICAgICAgIGNoZWNrLmlzQmxpbmQgPSBmYWxzZVxuICAgICAgICBjaGVjay5yb2xsTW9kZSA9IGZhbHNlXG4gICAgICAgIGNoZWNrLmNvbXB1dGVDaGVjaygpXG4gICAgICAgIGlmIChvcHRpb25zLnVwZGF0ZSkgY2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdmbGFnLWZvci1kZXZlbG9wbWVudCc6IHtcbiAgICAgICAgYXdhaXQgY2hlY2suZmxhZ0ZvckRldmVsb3BlbWVudCgpXG4gICAgICAgIGNoZWNrLmNvbXB1dGVDaGVjaygpXG4gICAgICAgIGlmIChvcHRpb25zLnVwZGF0ZSkgY2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdwdXNoJzoge1xuICAgICAgICBhd2FpdCBjaGVjay5fcGVyZm9ybSgpXG4gICAgICAgIGNoZWNrLnB1c2hpbmcgPSB0cnVlXG4gICAgICAgIGlmIChvcHRpb25zLnVwZGF0ZSkgY2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfb25DbGlja0lubGluZVJvbGwgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGEgPSBldmVudC5jdXJyZW50VGFyZ2V0XG5cbiAgICBpZiAoYS5jbGFzc0xpc3QuY29udGFpbnMoJ2NvYzctY2hlY2stcmVzdWx0JykpIHtcbiAgICAgIGlmIChhLmNsYXNzTGlzdC5jb250YWlucygnZXhwYW5kZWQnKSkge1xuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLl9jb2xsYXBzZUlubGluZVJlc3VsdChhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5fZXhwYW5kSW5saW5lUmVzdWx0KGEpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9jb2xsYXBzZUlubGluZVJlc3VsdCAoYSkge1xuICAgIGlmICghYS5jbGFzc0xpc3QuY29udGFpbnMoJ2NvYzctaW5saW5lLWNoZWNrJykpIHJldHVyblxuICAgIGlmICghYS5jbGFzc0xpc3QuY29udGFpbnMoJ2V4cGFuZGVkJykpIHJldHVyblxuICAgIGNvbnN0IHRvb2x0aXAgPSBhLnF1ZXJ5U2VsZWN0b3IoJy5jb2M3LWNoZWNrLXRvb2x0aXAnKVxuICAgIGlmICh0b29sdGlwKSB0b29sdGlwLnJlbW92ZSgpXG4gICAgcmV0dXJuIGEuY2xhc3NMaXN0LnJlbW92ZSgnZXhwYW5kZWQnKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9leHBhbmRJbmxpbmVSZXN1bHQgKGEpIHtcbiAgICBpZiAoIWEuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb2M3LWlubGluZS1jaGVjaycpKSByZXR1cm5cbiAgICBpZiAoYS5jbGFzc0xpc3QuY29udGFpbnMoJ2V4cGFuZGVkJykpIHJldHVyblxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IHRvb2x0aXBcbiAgICBjb25zdCBjaGVjayA9IE9iamVjdC5hc3NpZ24oXG4gICAgICBuZXcgQ29DN0NoZWNrKCksXG4gICAgICBKU09OLnBhcnNlKHVuZXNjYXBlKGEuZGF0YXNldC5yb2xsKSlcbiAgICApIC8vIFRPRE8gOiBmaW5kIHN0cmluZ2lmeSB1bmVzY2FwZSAhISAyMDIxMDIwNVxuICAgIGlmIChjaGVjay5zdGFuZGJ5KSByZXR1cm5cblxuICAgIGNvbnN0IHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGlwLmlubmVySFRNTCA9IGF3YWl0IGNoZWNrLnJvbGxUb29sVGlwXG5cbiAgICAvLyBBZGQgdGhlIHRvb2x0aXBcbiAgICBjb25zdCB0b29sdGlwID0gdGlwLmNoaWxkcmVuWzBdXG4gICAgYS5hcHBlbmRDaGlsZCh0b29sdGlwKVxuICAgIGEuY2xhc3NMaXN0LmFkZCgnZXhwYW5kZWQnKVxuXG4gICAgLy8gU2V0IHRoZSBwb3NpdGlvblxuICAgIGNvbnN0IHBhID0gYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IHB0ID0gdG9vbHRpcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIHRvb2x0aXAuc3R5bGUubGVmdCA9IGAke01hdGgubWluKFxuICAgICAgcGEueCxcbiAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC0gKHB0LndpZHRoICsgMylcbiAgICApfXB4YFxuICAgIHRvb2x0aXAuc3R5bGUudG9wID0gYCR7TWF0aC5taW4oXG4gICAgICBwYS55ICsgcGEuaGVpZ2h0ICsgMyxcbiAgICAgIHdpbmRvdy5pbm5lckhlaWdodCAtIChwdC5oZWlnaHQgKyAzKVxuICAgICl9cHhgXG4gICAgY29uc3QgemkgPSBnZXRDb21wdXRlZFN0eWxlKGEpLnpJbmRleFxuICAgIHRvb2x0aXAuc3R5bGUuekluZGV4ID0gTnVtYmVyLmlzTnVtZXJpYyh6aSkgPyB6aSArIDEgOiAxMDBcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGNhbnZhcywgQ2hhdE1lc3NhZ2UsIENPTkZJRywgQ09OU1QsIERpYWxvZywgRm9sZGVyLCBmb3VuZHJ5LCBmcm9tVXVpZCwgZnJvbVV1aWRTeW5jLCBnYW1lLCBnZXREb2N1bWVudENsYXNzLCBIb29rcywgTWFjcm8sIFJvbGwsIFRva2VuLCB1aSAqL1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi9jaGVjay5qcydcbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi9pdGVtcy9pdGVtLmpzJ1xuaW1wb3J0IHsgUm9sbERpYWxvZyB9IGZyb20gJy4vYXBwcy9yb2xsLWRpYWxvZy5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIgfSBmcm9tICcuL2NoYXQvaGVscGVyLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN1V0aWxpdGllcyB7XG4gIC8vIHN0YXRpYyB0ZXN0KGV2ZW50KXtcbiAgLy8gICBpZiggZXZlbnQuc2hpZnRLZXkpIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygnSGVsbG8gZnJvbSBTSElGVCB1dGlsaXRpZXMnKTtcbiAgLy8gICBlbHNlIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygnSGVsbG8gZnJvbSB1dGlsaXRpZXMnKTtcbiAgLy8gICBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpO1xuICAvLyAgIGxldCBhY3RvcjtcbiAgLy8gICBpZiAoc3BlYWtlci50b2tlbikgYWN0b3IgPSBnYW1lLmFjdG9ycy50b2tlbnNbc3BlYWtlci50b2tlbl07XG4gIC8vICAgaWYgKCFhY3RvcikgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoc3BlYWtlci5hY3Rvcik7XG5cbiAgLy8gIGFjdG9yLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kcyk7XG4gIC8vIH1cblxuICBzdGF0aWMgaXNGb3JtdWxhICh4KSB7XG4gICAgaWYgKHR5cGVvZiB4ICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlXG4gICAgaWYgKCFpc05hTihOdW1iZXIoeCkpKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gUm9sbC52YWxpZGF0ZSh4KVxuICB9XG5cbiAgc3RhdGljIFBhcnNlQ2hhdEVudHJ5IChodG1sLCBjb250ZW50KSB7XG4gICAgY29uc3QgcmVnWCA9IC8oXFxTKykvZ1xuICAgIGNvbnN0IHRlcm1zID0gY29udGVudC5tYXRjaChyZWdYKVxuICAgIGlmIChcbiAgICAgIHRlcm1zWzBdPy50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eXFwvcihvbGwpPyQvKSAmJlxuICAgICAgdGVybXNbMV0/LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnMWQlJylcbiAgICApIHtcbiAgICAgIC8vIERlbGF5IGNhbGxpbmcgZnVuY3Rpb24gdG8gcHJldmVudCBjaGF0bWVzc2FnZSBrZXkgZG93biB0cmlnZ2VyaW5nIGRlZmF1bHRcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBDb0M3VXRpbGl0aWVzLl9FeGVjQ29tbWFuZChjb250ZW50KVxuICAgICAgfSwgMjAwKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9FeGVjQ29tbWFuZCAoY29udGVudCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb250ZW50XG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnNwbGl0KCcgJylcbiAgICAgID8uam9pbignJylcbiAgICAgID8ucmVwbGFjZSgvXFwvcihvbGwpPzFkJS8sICcnKVxuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgaWYgKG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICBsZXQgZXNjYXBlZCA9IG9wdGlvbnNcbiAgICAgIGxldCB0aHJlc2hvbGRcbiAgICAgIGxldCBkaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgICBsZXQgZGljZU1vZGlmaWVyID0gMFxuICAgICAgbGV0IGFzayA9IGZhbHNlXG4gICAgICBsZXQgZmxhdERpY2VNb2RpZmllclxuICAgICAgbGV0IGZsYXRUaHJlc2hvbGRNb2RpZmllclxuICAgICAgY29uc3QgdGhyZXNob2xkU3RyID0gZXNjYXBlZC5tYXRjaCgvW14oXSsoPz1cXCkpLylcbiAgICAgIGlmICh0aHJlc2hvbGRTdHIgJiYgdGhyZXNob2xkU3RyLmxlbmd0aCkge1xuICAgICAgICB0aHJlc2hvbGQgPSBOdW1iZXIodGhyZXNob2xkU3RyWzBdKVxuICAgICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIHRocmVzaG9sZFN0cikge1xuICAgICAgICAgIGVzY2FwZWQgPSBlc2NhcGVkLnJlcGxhY2UoYCgke21hdGNofSlgLCAnJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZGlmZmljdWx0eVN0ciA9IGVzY2FwZWQubWF0Y2goL1teW10rKD89XFxdKS8pXG4gICAgICBpZiAoZGlmZmljdWx0eVN0ciAmJiBkaWZmaWN1bHR5U3RyLmxlbmd0aCkge1xuICAgICAgICBkaWZmaWN1bHR5ID0gQ29DN1V0aWxpdGllcy5jb252ZXJ0RGlmZmljdWx0eShkaWZmaWN1bHR5U3RyWzBdKVxuICAgICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIGRpZmZpY3VsdHlTdHIpIHtcbiAgICAgICAgICBlc2NhcGVkID0gZXNjYXBlZC5yZXBsYWNlKGBbJHttYXRjaH1dYCwgJycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlc2NhcGVkLmluY2x1ZGVzKCc/JykpIHtcbiAgICAgICAgYXNrID0gdHJ1ZVxuICAgICAgICBlc2NhcGVkID0gZXNjYXBlZC5yZXBsYWNlKCc/JywgJycpXG4gICAgICB9XG4gICAgICBpZiAoIWlzTmFOKE51bWJlcihlc2NhcGVkKSkpIGRpY2VNb2RpZmllciA9IE51bWJlcihlc2NhcGVkKVxuXG4gICAgICBpZiAoYXNrKSB7XG4gICAgICAgIGNvbnN0IGRpYWxvZ09wdGlvbnMgPSB7XG4gICAgICAgICAgdGhyZXNob2xkLFxuICAgICAgICAgIG1vZGlmaWVyOiBkaWNlTW9kaWZpZXIsXG4gICAgICAgICAgZGlmZmljdWx0eSxcbiAgICAgICAgICBhc2tWYWx1ZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzYWdlID0gYXdhaXQgUm9sbERpYWxvZy5jcmVhdGUoZGlhbG9nT3B0aW9ucylcbiAgICAgICAgaWYgKHVzYWdlKSB7XG4gICAgICAgICAgZGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnYm9udXNEaWNlJykpXG4gICAgICAgICAgZGlmZmljdWx0eSA9IE51bWJlcih1c2FnZS5nZXQoJ2RpZmZpY3VsdHknKSlcbiAgICAgICAgICB0aHJlc2hvbGQgPSBOdW1iZXIodXNhZ2UuZ2V0KCd0aHJlc2hvbGQnKSkgfHwgdGhyZXNob2xkXG4gICAgICAgICAgZmxhdERpY2VNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2ZsYXREaWNlTW9kaWZpZXInKSlcbiAgICAgICAgICBmbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdmbGF0VGhyZXNob2xkTW9kaWZpZXInKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGVjay5kaWNlTW9kaWZpZXIgPSBkaWNlTW9kaWZpZXIgfHwgMFxuICAgICAgY2hlY2suZGlmZmljdWx0eSA9IGRpZmZpY3VsdHkgfHwgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgICBjaGVjay5yYXdWYWx1ZSA9IHRocmVzaG9sZFxuICAgICAgY2hlY2suZmxhdERpY2VNb2RpZmllciA9IGZsYXREaWNlTW9kaWZpZXJcbiAgICAgIGNoZWNrLmZsYXRUaHJlc2hvbGRNb2RpZmllciA9IGZsYXRUaHJlc2hvbGRNb2RpZmllclxuICAgICAgaWYgKHRocmVzaG9sZCkgY2hlY2sucmF3VmFsdWUgPSAhaXNOYU4odGhyZXNob2xkKSA/IHRocmVzaG9sZCA6IHVuZGVmaW5lZFxuICAgIH1cbiAgICBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpXG4gICAgaWYgKHNwZWFrZXIudG9rZW4gJiYgc3BlYWtlci5zY2VuZSkge1xuICAgICAgY29uc3QgYWN0b3IgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleShcbiAgICAgICAgYCR7c3BlYWtlci5zY2VuZX0uJHtzcGVha2VyLnRva2VufWBcbiAgICAgICkgLy8gUkVGQUNUT1JJTkcgKDIpICsrKyB3aHkgc3BlYWtlci5zY2VuZS5cbiAgICAgIGlmIChhY3RvcikgY2hlY2suYWN0b3IgPSBhY3RvclxuICAgIH0gZWxzZSBpZiAoc3BlYWtlci5hY3Rvcikge1xuICAgICAgY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoc3BlYWtlci5hY3RvcilcbiAgICAgIGlmIChhY3RvcikgY2hlY2suYWN0b3IgPSBhY3RvclxuICAgIH1cbiAgICBhd2FpdCBjaGVjay5yb2xsKClcbiAgICBjaGVjay50b01lc3NhZ2UoKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHRlc3QgKCkge1xuICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mb3MoJ0RvIHNvbWUgc3R1ZmYnKVxuICB9XG5cbiAgc3RhdGljIGdldEFjdG9yRnJvbVN0cmluZyAoYWN0b3JTdHJpbmcpIHtcbiAgICBsZXQgYWN0b3JcblxuICAgIC8vIFRva2VuIGlzIGJldHRlciB0aGFuIGFjdG9yLlxuICAgIC8vIENhc2UgMSA6IHRyeWluZyB3aXRoIElELlxuICAgIC8vIENhc2UgMS4xIDogdG9rZW4gZm91bmQuXG4gICAgaWYgKGdhbWUuYWN0b3JzLnRva2Vuc1thY3RvclN0cmluZ10pIHJldHVybiBnYW1lLmFjdG9ycy50b2tlbnNbYWN0b3JTdHJpbmddXG4gICAgLy8gQ2FzZSAxLjIgOiBhY3RvciBmb3VuZC5cbiAgICBhY3RvciA9IGdhbWUuYWN0b3JzLmdldChhY3RvclN0cmluZylcbiAgICBpZiAoYWN0b3IpIHJldHVybiBhY3RvclxuXG4gICAgLy8gQ2FzZSAyIDogdHJ5aW5nIHdpdGggbmFtZVxuICAgIC8vIENhc2UgMi4xIDogdG9rZW4gZm91bmQuXG4gICAgYWN0b3IgPSBPYmplY3QudmFsdWVzKGdhbWUuYWN0b3JzLnRva2VucykuZmluZCh0ID0+IHtcbiAgICAgIGlmICh0Lm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gYWN0b3JTdHJpbmcudG9Mb3dlckNhc2UoKSkgcmV0dXJuIHRydWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0pXG4gICAgaWYgKCFhY3Rvcikge1xuICAgICAgLy8gQ2FzZSAyLjIgOiBhY3RvciBmb3VuZC5cbiAgICAgIGFjdG9yID0gZ2FtZS5hY3RvcnMuZmluZChhID0+IHtcbiAgICAgICAgaWYgKGEubmFtZS50b0xvd2VyQ2FzZSgpID09PSBhY3RvclN0cmluZy50b0xvd2VyQ2FzZSgpKSByZXR1cm4gdHJ1ZVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChhY3RvcikgcmV0dXJuIGFjdG9yXG5cbiAgICAvLyAvLyBDYXNlIDMgc3RyaW5nIG1heWJlIGFuIGFjdG9yS2V5XG4gICAgLy8gaWYgKGNyZWF0dXJlLmluY2x1ZGVzKCcuJykpIHtcbiAgICAvLyAgIGNvbnN0IFssIGFjdG9ySWRdID0ga2V5LnNwbGl0KCcuJylcbiAgICAvLyAgIHJldHVybiBDb0M3VXRpbGl0aWVzLmdldEFjdG9yRnJvbVN0cmluZyhhY3RvcklkKVxuICAgIC8vIH1cblxuICAgIC8vIE5vIGpveVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBzdGF0aWMgZ2V0Q2hhcmFjdGVyaXN0aWNOYW1lcyAoY2hhcikge1xuICAgIGNvbnN0IGNoYXJLZXkgPSBjaGFyLnRvTG93ZXJDYXNlKClcblxuICAgIHN3aXRjaCAoY2hhcktleSkge1xuICAgICAgY2FzZSAnc3RyJzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydDogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuU1RSJyksXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLlN0cmVuZ3RoJylcbiAgICAgICAgfVxuICAgICAgY2FzZSAnY29uJzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydDogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuQ09OJyksXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkNvbnN0aXR1dGlvbicpXG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ3Npeic6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLlNJWicpLFxuICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5TaXplJylcbiAgICAgICAgfVxuICAgICAgY2FzZSAnZGV4JzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydDogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuREVYJyksXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkRleHRlcml0eScpXG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2FwcCc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkFQUCcpLFxuICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5BcHBlYXJhbmNlJylcbiAgICAgICAgfVxuICAgICAgY2FzZSAnaW50JzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydDogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuSU5UJyksXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkludGVsbGlnZW5jZScpXG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ3Bvdyc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLlBPVycpLFxuICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5Qb3dlcicpXG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2VkdSc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkVEVScpLFxuICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5FZHVjYXRpb24nKVxuICAgICAgICB9XG4gICAgICBjYXNlICdsdWNrJzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkx1Y2snKSxcbiAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkx1Y2snKVxuICAgICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGZvciAoY29uc3QgWywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKFxuICAgICAgICAgIGdhbWUuc3lzdGVtLnRlbXBsYXRlLkFjdG9yLnRlbXBsYXRlcy5jaGFyYWN0ZXJpc3RpY3MuY2hhcmFjdGVyaXN0aWNzXG4gICAgICAgICkpIHtcbiAgICAgICAgICBpZiAoY2hhcktleSA9PT0gZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlLnNob3J0KS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBzaG9ydDogZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlLnNob3J0KSxcbiAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5sYWJlbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgY29udmVydERpZmZpY3VsdHkgKGRpZmZpY3VsdHkpIHtcbiAgICBpZiAoU3RyaW5nKGRpZmZpY3VsdHkpID09PSAnMCcpIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICBpZiAodHlwZW9mIGRpZmZpY3VsdHkgIT09ICdzdHJpbmcnKSByZXR1cm4gZGlmZmljdWx0eVxuICAgIGlmICghaXNOYU4oTnVtYmVyKGRpZmZpY3VsdHkpKSkgcmV0dXJuIE51bWJlcihkaWZmaWN1bHR5KVxuXG4gICAgc3dpdGNoIChkaWZmaWN1bHR5KSB7XG4gICAgICBjYXNlICc/JzpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwudW5rbm93blxuICAgICAgY2FzZSAnKyc6XG4gICAgICAgIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmhhcmRcbiAgICAgIGNhc2UgJysrJzpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZVxuICAgICAgY2FzZSAnKysrJzpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuY3JpdGljYWxcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc2tpbGxDaGVja01hY3JvIChza2lsbCwgZXZlbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpXG4gICAgbGV0IGFjdG9yXG4gICAgaWYgKHNwZWFrZXIudG9rZW4pIGFjdG9yID0gZ2FtZS5hY3RvcnMudG9rZW5zW3NwZWFrZXIudG9rZW5dXG4gICAgaWYgKCFhY3RvcikgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoc3BlYWtlci5hY3RvcikgLy8gTm8gbmVlZCB0byBmaWxsIGFjdG9yIHRva2VuXG5cbiAgICBpZiAoIWFjdG9yKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lldhcm5Ob0FjdG9yQXZhaWxhYmxlJykpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBhY3Rvci5za2lsbENoZWNrKHNraWxsLCBldmVudC5zaGlmdEtleSwgb3B0aW9ucylcbiAgfVxuXG4gIHN0YXRpYyB3ZWFwb25DaGVja01hY3JvICh3ZWFwb24sIGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKClcbiAgICBsZXQgYWN0b3JcbiAgICBpZiAoc3BlYWtlci50b2tlbikgYWN0b3IgPSBnYW1lLmFjdG9ycy50b2tlbnNbc3BlYWtlci50b2tlbl1cbiAgICBpZiAoIWFjdG9yKSB7XG4gICAgICBpZiAoc3BlYWtlci5zY2VuZSAmJiBzcGVha2VyLnRva2VuKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIHN5bnRoZXRpYyBhY3RvciBsaW5rZWQgd2l0aCB0aGUgYWN0aXZlIHRva2VuLlxuICAgICAgICBjb25zdCBiYXNlQWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoc3BlYWtlci5hY3RvcilcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBnYW1lLnNjZW5lcy5nZXQoc3BlYWtlci5zY2VuZSlcbiAgICAgICAgY29uc3QgdG9rZW4gPSBzY2VuZS50b2tlbnMuZ2V0KHNwZWFrZXIudG9rZW4pXG5cbiAgICAgICAgY29uc3QgQWN0b3JDbGFzcyA9IGdldERvY3VtZW50Q2xhc3MoJ0FjdG9yJylcbiAgICAgICAgY29uc3QgdG9rZW5BY3RvciA9IG5ldyBBY3RvckNsYXNzKGJhc2VBY3Rvci50b0pTT04oKSwge1xuICAgICAgICAgIHBhcmVudDogdG9rZW5cbiAgICAgICAgfSlcbiAgICAgICAgYWN0b3IgPSB0b2tlbkFjdG9yXG4gICAgICB9IGVsc2UgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoc3BlYWtlci5hY3RvcilcbiAgICB9XG5cbiAgICBpZiAoIWFjdG9yKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lldhcm5Ob0FjdG9yQXZhaWxhYmxlJykpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBhY3Rvci53ZWFwb25DaGVjayh3ZWFwb24sIGV2ZW50LnNoaWZ0S2V5KVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNoZWNrTWFjcm8gKHRocmVzaG9sZCA9IHVuZGVmaW5lZCwgZXZlbnQgPSBudWxsKSB7XG4gICAgYXdhaXQgQ29DN1V0aWxpdGllcy5yb2xsRGljZShldmVudCwgeyB0aHJlc2hvbGQgfSlcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVNYWNybyAoYmFyLCBkYXRhLCBzbG90KSB7XG4gICAgaWYgKGRhdGEudHlwZSAhPT0gJ0l0ZW0nKSByZXR1cm5cblxuICAgIGNvbnN0IGl0ZW0gPSBmcm9tVXVpZFN5bmMoZGF0YS51dWlkLCBiYXIpXG5cbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XYXJuTWFjcm9Ob0l0ZW1Gb3VuZCcpXG4gICAgICApXG4gICAgfVxuICAgIGlmICghKGl0ZW0udHlwZSA9PT0gJ3dlYXBvbicpICYmICEoaXRlbS50eXBlID09PSAnc2tpbGwnKSkge1xuICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lldhcm5NYWNyb0luY29ycmVjdFR5cGUnKVxuICAgICAgKVxuICAgIH1cblxuICAgIGxldCBjb21tYW5kID0gJydcblxuICAgIGlmIChpdGVtLnR5cGUgPT09ICd3ZWFwb24nKSB7XG4gICAgICBjb21tYW5kID0gYGdhbWUuQ29DNy5tYWNyb3Mud2VhcG9uQ2hlY2soe25hbWU6JyR7aXRlbS5uYW1lfScsIHV1aWQ6JyR7ZGF0YS51dWlkfSd9LCBldmVudCk7YFxuICAgIH1cblxuICAgIGlmIChpdGVtLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgIGlmIChDb0M3SXRlbS5pc0FueVNwZWMoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2Fybk5vR2xvYmFsU3BlYycpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGNvbW1hbmQgPSBgZ2FtZS5Db0M3Lm1hY3Jvcy5za2lsbENoZWNrKHtuYW1lOicke2l0ZW0ubmFtZX0nLCB1dWlkOicke2RhdGEudXVpZH0nfSwgZXZlbnQpO2BcbiAgICB9XG5cbiAgICBpZiAoY29tbWFuZCAhPT0gJycpIHtcbiAgICAgIC8vIENyZWF0ZSB0aGUgbWFjcm8gY29tbWFuZFxuICAgICAgY29uc3QgbWFjcm8gPSBnYW1lLm1hY3Jvcy5jb250ZW50cy5maW5kKFxuICAgICAgICBtID0+IG0ubmFtZSA9PT0gaXRlbS5uYW1lICYmIG0uY29tbWFuZCA9PT0gY29tbWFuZFxuICAgICAgKVxuICAgICAgaWYgKCFtYWNybykge1xuICAgICAgICBNYWNyby5jcmVhdGUoZm91bmRyeS51dGlscy5kdXBsaWNhdGUoe1xuICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgICB0eXBlOiAnc2NyaXB0JyxcbiAgICAgICAgICBpbWc6IGl0ZW0uaW1nLFxuICAgICAgICAgIGNvbW1hbmRcbiAgICAgICAgfSkpLnRoZW4obWFjcm8gPT4ge1xuICAgICAgICAgIGdhbWUudXNlci5hc3NpZ25Ib3RiYXJNYWNybyhtYWNybywgc2xvdClcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBnYW1lLnVzZXIuYXNzaWduSG90YmFyTWFjcm8obWFjcm8sIHNsb3QpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB0b2dnbGVEZXZQaGFzZSAodG9nZ2xlKSB7XG4gICAgYXdhaXQgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnZGV2ZWxvcG1lbnRFbmFibGVkJywgdG9nZ2xlKVxuICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhcbiAgICAgIHRvZ2dsZVxuICAgICAgICA/IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5EZXZQaGFzZUVuYWJsZWQnKVxuICAgICAgICA6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5EZXZQaGFzZURpc2FibGVkJylcbiAgICApXG4gICAgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCB7XG4gICAgICB0eXBlOiAndXBkYXRlQ2hhcidcbiAgICB9KVxuICAgIENvQzdVdGlsaXRpZXMudXBkYXRlQ2hhclNoZWV0cygpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgdG9nZ2xlQ2hhckNyZWF0aW9uICh0b2dnbGUpIHtcbiAgICBhd2FpdCBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdjaGFyQ3JlYXRpb25FbmFibGVkJywgdG9nZ2xlKVxuICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhcbiAgICAgIHRvZ2dsZVxuICAgICAgICA/IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGFyQ3JlYXRpb25FbmFibGVkJylcbiAgICAgICAgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ2hhckNyZWF0aW9uRGlzYWJsZWQnKVxuICAgIClcbiAgICBnYW1lLnNvY2tldC5lbWl0KCdzeXN0ZW0uQ29DNycsIHtcbiAgICAgIHR5cGU6ICd1cGRhdGVDaGFyJ1xuICAgIH0pXG4gICAgQ29DN1V0aWxpdGllcy51cGRhdGVDaGFyU2hlZXRzKClcbiAgICBIb29rcy5jYWxsKCd0b2dnbGVDaGFyQ3JlYXRpb24nLCB0b2dnbGUpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZ2V0VGFyZ2V0ICgpIHtcbiAgICBjb25zdCB1c2VycyA9IGdhbWUudXNlcnMuZmlsdGVyKHVzZXIgPT4gdXNlci5hY3RpdmUpXG4gICAgY29uc3QgYWN0b3JzID0gZ2FtZS5hY3RvcnNcbiAgICBsZXQgY2hlY2tPcHRpb25zID0gYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiQ09DQ2hlY2tBbGxQQ1wiIGlkPVwiQ09DQ2hlY2tBbGxQQ1wiPlxcblxuICAgIDxsYWJlbCBmb3I9XCJDT0NDaGVja0FsbFBDXCI+JHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuYWxsQWN0b3JzJyl9PC9sYWJlbD5gXG4gICAgY29uc3QgcGxheWVyVG9rZW5JZHMgPSB1c2Vyc1xuICAgICAgLm1hcCh1ID0+IHUuY2hhcmFjdGVyPy5pZClcbiAgICAgIC5maWx0ZXIoaWQgPT4gaWQgIT09IHVuZGVmaW5lZClcbiAgICBjb25zdCBzZWxlY3RlZFBsYXllcklkcyA9IGNhbnZhcy50b2tlbnMuY29udHJvbGxlZC5tYXAodG9rZW4gPT4ge1xuICAgICAgcmV0dXJuIHRva2VuLmFjdG9yLmlkXG4gICAgfSlcblxuICAgIC8vIEJ1aWxkIGNoZWNrYm94IGxpc3QgZm9yIGFsbCBhY3RpdmUgcGxheWVyc1xuICAgIGFjdG9ycy5mb3JFYWNoKGFjdG9yID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrZWQgPVxuICAgICAgICAoc2VsZWN0ZWRQbGF5ZXJJZHMuaW5jbHVkZXMoYWN0b3IuaWQpIHx8XG4gICAgICAgICAgcGxheWVyVG9rZW5JZHMuaW5jbHVkZXMoYWN0b3IuaWQpKSAmJlxuICAgICAgICAnY2hlY2tlZCdcbiAgICAgIGNoZWNrT3B0aW9ucyArPSBgXG4gICAgIDxicj5cbiAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCIke2FjdG9yLmlkfVwiIGlkPVwiJHthY3Rvci5pZH1cIiB2YWx1ZT1cIiR7YWN0b3IubmFtZX1cIiAke2NoZWNrZWR9PlxcblxuICAgICA8bGFiZWwgZm9yPVwiJHthY3Rvci5pZH1cIj4ke2FjdG9yLm5hbWV9PC9sYWJlbD5cbiAgICAgICBgXG4gICAgfSlcblxuICAgIG5ldyBEaWFsb2coe1xuICAgICAgdGl0bGU6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5kcmVhbWluZycpfWAsXG4gICAgICBjb250ZW50OiBgJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICdDb0M3LnJlc3RUYXJnZXRzJ1xuICAgICAgKX06ICR7Y2hlY2tPcHRpb25zfSA8YnI+YCxcbiAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgd2hpc3Blcjoge1xuICAgICAgICAgIGxhYmVsOiBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuc3RhcnRSZXN0Jyl9YCxcbiAgICAgICAgICBjYWxsYmFjazogYXN5bmMgaHRtbCA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRzID0gW11cbiAgICAgICAgICAgIGxldCBhbGwgPSBmYWxzZVxuICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBodG1sLmZpbmQoJ1t0eXBlPVwiY2hlY2tib3hcIl0nKVxuICAgICAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIHVzZXJzKSB7XG4gICAgICAgICAgICAgIGlmICh1c2VyLm5hbWUgPT09ICdDT0NDaGVja0FsbFBDJyAmJiB1c2VyLmNoZWNrZWQpIGFsbCA9IHRydWVcbiAgICAgICAgICAgICAgaWYgKHVzZXIuY2hlY2tlZCB8fCBhbGwpIHRhcmdldHMucHVzaCh1c2VyLmlkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgQ29DN1V0aWxpdGllcy5zdGFydFJlc3QodGFyZ2V0cylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBzdGFydFJlc3QgKHRhcmdldHMpIHtcbiAgICBpZiAoIXRhcmdldHMubGVuZ3RoKSByZXR1cm5cbiAgICBjb25zdCBhY3RvcnMgPSBnYW1lLmFjdG9ycy5maWx0ZXIoYWN0b3IgPT4gdGFyZ2V0cy5pbmNsdWRlcyhhY3Rvci5pZCkpXG4gICAgbGV0IGNoYXRDb250ZW50ID0gYDxpPiR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LmRyZWFtaW5nJyl9Li4uPC9pPjxicj5gXG4gICAgZm9yIChjb25zdCBhY3RvciBvZiBhY3RvcnMpIHtcbiAgICAgIGlmIChbJ2NoYXJhY3RlcicsICducGMnLCAnY3JlYXR1cmUnXS5pbmNsdWRlcyhhY3Rvci50eXBlKSkge1xuICAgICAgICBsZXQgcXVpY2tIZWFsZXIgPSBmYWxzZVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYWN0b3IuaXRlbXMpIHtcbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAndGFsZW50Jykge1xuICAgICAgICAgICAgaWYgKGl0ZW0ubmFtZSA9PT0gYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LnF1aWNrSGVhbGVyJyl9YCkge1xuICAgICAgICAgICAgICBxdWlja0hlYWxlciA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNDcml0aWNhbFdvdW5kcyA9XG4gICAgICAgICAgIWdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlSWdub3JlTWFqb3JXb3VuZHMnKSAmJlxuICAgICAgICAgIGFjdG9yLmhhc0NvbmRpdGlvblN0YXR1cyhDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kcylcbiAgICAgICAgY29uc3QgZGFpbHlTYW5pdHlMb3NzID0gYWN0b3Iuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TG9zc1xuICAgICAgICBjb25zdCBocFZhbHVlID0gYWN0b3Iuc3lzdGVtLmF0dHJpYnMuaHAudmFsdWVcbiAgICAgICAgY29uc3QgaHBNYXggPSBhY3Rvci5zeXN0ZW0uYXR0cmlicy5ocC5tYXhcbiAgICAgICAgY29uc3QgbXBWYWx1ZSA9IGFjdG9yLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlXG4gICAgICAgIGNvbnN0IG1wTWF4ID0gYWN0b3Iuc3lzdGVtLmF0dHJpYnMubXAubWF4XG4gICAgICAgIGNvbnN0IHBvdyA9IGFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MucG93LnZhbHVlXG4gICAgICAgIGNoYXRDb250ZW50ID0gY2hhdENvbnRlbnQgKyBgPGJyPjxiPiR7YWN0b3IubmFtZX0uIDwvYj5gXG4gICAgICAgIGlmIChocFZhbHVlIDwgaHBNYXgpIHtcbiAgICAgICAgICBpZiAoaXNDcml0aWNhbFdvdW5kcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2hhdENvbnRlbnQgPVxuICAgICAgICAgICAgICBjaGF0Q29udGVudCArXG4gICAgICAgICAgICAgIGA8YiBzdHlsZT1cImNvbG9yOmRhcmtyZWRcIj4ke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgICAnQ29DNy5oYXNDcml0aWNhbFdvdW5kcydcbiAgICAgICAgICAgICAgKX0uIDwvYj5gXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBoZWFsQW1vdW50ID0gMVxuICAgICAgICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlRmFzdGVyUmVjb3ZlcnknKSkge1xuICAgICAgICAgICAgICBoZWFsQW1vdW50ID0gMlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHF1aWNrSGVhbGVyID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGhlYWxBbW91bnQrK1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVhbEFtb3VudCA9IE1hdGgubWluKGhlYWxBbW91bnQsIGhwTWF4IC0gaHBWYWx1ZSlcbiAgICAgICAgICAgIGlmIChoZWFsQW1vdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgIGNoYXRDb250ZW50ID1cbiAgICAgICAgICAgICAgICBjaGF0Q29udGVudCArXG4gICAgICAgICAgICAgICAgYDxiIHN0eWxlPVwiY29sb3I6ZGFya29saXZlZ3JlZW5cIj4ke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgICAgICdDb0M3LmhlYWx0aFJlY292ZXJlZCdcbiAgICAgICAgICAgICAgICApfS4gPC9iPmBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoYXRDb250ZW50ID1cbiAgICAgICAgICAgICAgICBjaGF0Q29udGVudCArXG4gICAgICAgICAgICAgICAgYDxiIHN0eWxlPVwiY29sb3I6ZGFya29saXZlZ3JlZW5cIj4ke2dhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgICAgICAnQ29DNy5wdWxwSGVhbHRoUmVjb3ZlcmVkJyxcbiAgICAgICAgICAgICAgICAgIHsgbnVtYmVyOiBoZWFsQW1vdW50IH1cbiAgICAgICAgICAgICAgICApfS4gPC9iPmBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdG9yLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICdzeXN0ZW0uYXR0cmlicy5ocC52YWx1ZSc6XG4gICAgICAgICAgICAgICAgYWN0b3Iuc3lzdGVtLmF0dHJpYnMuaHAudmFsdWUgKyBoZWFsQW1vdW50XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGFpbHlTYW5pdHlMb3NzID4gMCkge1xuICAgICAgICAgIGNoYXRDb250ZW50ID1cbiAgICAgICAgICAgIGNoYXRDb250ZW50ICtcbiAgICAgICAgICAgIGA8YiBzdHlsZT1cImNvbG9yOmRhcmtvbGl2ZWdyZWVuXCI+JHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICdDb0M3LmRhaWx5U2FuTG9zc1Jlc3RhcnRlZCdcbiAgICAgICAgICAgICl9LjwvYj5gXG4gICAgICAgICAgYWN0b3IudXBkYXRlKHtcbiAgICAgICAgICAgICdzeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMb3NzJzogMCxcbiAgICAgICAgICAgICdzeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMaW1pdCc6IE1hdGguZmxvb3IoYWN0b3Iuc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlIC8gNSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdXJzID0gN1xuICAgICAgICBpZiAoaG91cnMgPiAwICYmIG1wVmFsdWUgPCBtcE1heCkge1xuICAgICAgICAgIGxldCBtYWdpY0Ftb3VudCA9IGhvdXJzICogTWF0aC5jZWlsKHBvdyAvIDEwMClcbiAgICAgICAgICBtYWdpY0Ftb3VudCA9IE1hdGgubWluKG1hZ2ljQW1vdW50LCBtcE1heCAtIG1wVmFsdWUpXG4gICAgICAgICAgY2hhdENvbnRlbnQgPVxuICAgICAgICAgICAgY2hhdENvbnRlbnQgK1xuICAgICAgICAgICAgYDxiIHN0eWxlPVwiY29sb3I6ZGFya29saXZlZ3JlZW5cIj4ke2dhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgICdDb0M3Lm1hZ2ljUG9pbnRzUmVjb3ZlcmVkJ1xuICAgICAgICAgICAgKX06ICR7bWFnaWNBbW91bnR9LjwvYj5gXG4gICAgICAgICAgYWN0b3IudXBkYXRlKHtcbiAgICAgICAgICAgICdzeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSc6XG4gICAgICAgICAgICAgIGFjdG9yLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlICsgbWFnaWNBbW91bnRcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgc3BlYWtlcjogQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpLFxuICAgICAgY29udGVudDogY2hhdENvbnRlbnQsXG4gICAgICB0eXBlOiBDT05TVC5DSEFUX01FU1NBR0VfVFlQRVMuT1RIRVJcbiAgICB9XG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHRvZ2dsZVhQR2FpbiAodG9nZ2xlKSB7XG4gICAgYXdhaXQgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAneHBFbmFibGVkJywgdG9nZ2xlKVxuICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhcbiAgICAgIHRvZ2dsZVxuICAgICAgICA/IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5YUEdhaW5FbmFibGVkJylcbiAgICAgICAgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuWFBHYWluRGlzYWJsZWQnKVxuICAgIClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyByb2xsRGljZSAoZXZlbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMuYXNrVmFsdWUgPSAhb3B0aW9ucy50aHJlc2hvbGRcbiAgICBsZXQgZGljZU1vZGlmaWVyLCBkaWZmaWN1bHR5LCBmbGF0RGljZU1vZGlmaWVyLCBmbGF0VGhyZXNob2xkTW9kaWZpZXJcbiAgICBsZXQgdGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGRcblxuICAgIGlmICh1bmRlZmluZWQgIT09IG9wdGlvbnMubW9kaWZpZXIpIGRpY2VNb2RpZmllciA9IE51bWJlcihvcHRpb25zLm1vZGlmaWVyKVxuICAgIGlmICh1bmRlZmluZWQgIT09IG9wdGlvbnMuZGlmZmljdWx0eSkge1xuICAgICAgZGlmZmljdWx0eSA9IENvQzdVdGlsaXRpZXMuY29udmVydERpZmZpY3VsdHkob3B0aW9ucy5kaWZmaWN1bHR5KVxuICAgIH1cblxuICAgIGlmICghZXZlbnQ/LnNoaWZ0S2V5ICYmICFvcHRpb25zLmZhc3RGb3J3YXJkKSB7XG4gICAgICBjb25zdCB1c2FnZSA9IGF3YWl0IFJvbGxEaWFsb2cuY3JlYXRlKG9wdGlvbnMpXG4gICAgICBpZiAodXNhZ2UpIHtcbiAgICAgICAgZGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnYm9udXNEaWNlJykpXG4gICAgICAgIGRpZmZpY3VsdHkgPSBOdW1iZXIodXNhZ2UuZ2V0KCdkaWZmaWN1bHR5JykpXG4gICAgICAgIHRocmVzaG9sZCA9IE51bWJlcih1c2FnZS5nZXQoJ3RocmVzaG9sZCcpKVxuICAgICAgICBmbGF0RGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnZmxhdERpY2VNb2RpZmllcicpKVxuICAgICAgICBmbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdmbGF0VGhyZXNob2xkTW9kaWZpZXInKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhY3RvcnMgPSBbXVxuXG4gICAgaWYgKGdhbWUudXNlci5pc0dNICYmIGNhbnZhcy50b2tlbnMuY29udHJvbGxlZC5sZW5ndGgpIHtcbiAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgY2FudmFzLnRva2Vucy5jb250cm9sbGVkKSB7XG4gICAgICAgIGFjdG9ycy5wdXNoKHRva2VuLmFjdG9yLnRva2VuS2V5KVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ2FtZS51c2VyLmNoYXJhY3Rlcikge1xuICAgICAgYWN0b3JzLnB1c2goZ2FtZS51c2VyLmNoYXJhY3Rlci50b2tlbktleSlcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHRrIG9mIGFjdG9ycykge1xuICAgICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9IGRpY2VNb2RpZmllciB8fCAwXG4gICAgICBjaGVjay5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eSB8fCBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgIGNoZWNrLnJhd1ZhbHVlID0gdGhyZXNob2xkXG4gICAgICBjaGVjay5mbGF0RGljZU1vZGlmaWVyID0gZmxhdERpY2VNb2RpZmllclxuICAgICAgY2hlY2suZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gZmxhdFRocmVzaG9sZE1vZGlmaWVyXG4gICAgICBjaGVjay5hY3RvciA9IHRrXG4gICAgICBhd2FpdCBjaGVjay5yb2xsKClcbiAgICAgIGNoZWNrLnRvTWVzc2FnZSgpXG4gICAgfVxuXG4gICAgaWYgKCFhY3RvcnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gZGljZU1vZGlmaWVyIHx8IDBcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5IHx8IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgICAgY2hlY2sucmF3VmFsdWUgPSB0aHJlc2hvbGRcbiAgICAgIGNoZWNrLmZsYXREaWNlTW9kaWZpZXIgPSBmbGF0RGljZU1vZGlmaWVyXG4gICAgICBjaGVjay5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBmbGF0VGhyZXNob2xkTW9kaWZpZXJcbiAgICAgIGF3YWl0IGNoZWNrLnJvbGwoKVxuICAgICAgY2hlY2sudG9NZXNzYWdlKClcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlQ2hhclNoZWV0cyAoKSB7XG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBmb3IgKGNvbnN0IGEgb2YgZ2FtZS5hY3RvcnMuY29udGVudHMpIHtcbiAgICAgICAgaWYgKGE/LnR5cGUgPT09ICdjaGFyYWN0ZXInICYmIGE/LnNoZWV0ICYmIGE/LnNoZWV0Py5yZW5kZXJlZCkge1xuICAgICAgICAgIGEudXBkYXRlKHsgJ3N5c3RlbS5mbGFncy5sb2NrZWQnOiB0cnVlIH0pXG4gICAgICAgICAgYS5yZW5kZXIoZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCBhIG9mIGdhbWUuYWN0b3JzLmNvbnRlbnRzKSB7XG4gICAgICAgIGlmIChhLmlzT3duZXIpIHtcbiAgICAgICAgICBhLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MubG9ja2VkJzogdHJ1ZSB9KVxuICAgICAgICAgIGEucmVuZGVyKGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBmcm9tIF9vbkRyb3AgdG8gZ2V0IHRoZSBkcm9wcGVkIGVudGl0eVR5cGUgb3IgZW50aXR5VHlwZSBmcm9tIGEgZm9sZGVyXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBldmVudCBAc2VlIGFjdGl2YXRlTGlzdGVuZXJzXG4gICAqIEByZXR1cm5zIFtpdGVtc10gYXJyYXkgb2YgaXRlbXNcbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZXREYXRhRnJvbURyb3BFdmVudCAoZXZlbnQsIGVudGl0eVR5cGUgPSAnSXRlbScpIHtcbiAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCkgcmV0dXJuIFtdXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGFMaXN0ID0gSlNPTi5wYXJzZShldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpKVxuICAgICAgaWYgKGRhdGFMaXN0LnR5cGUgPT09ICdGb2xkZXInICYmIGRhdGFMaXN0LmRvY3VtZW50TmFtZSA9PT0gZW50aXR5VHlwZSkge1xuICAgICAgICBjb25zdCBmb2xkZXIgPSBhd2FpdCBmcm9tVXVpZChkYXRhTGlzdC51dWlkKVxuICAgICAgICBpZiAoIWZvbGRlcikgcmV0dXJuIFtdXG4gICAgICAgIHJldHVybiBmb2xkZXIuY29udGVudHNcbiAgICAgIH0gZWxzZSBpZiAoZGF0YUxpc3QudHlwZSA9PT0gZW50aXR5VHlwZSkge1xuICAgICAgICBjb25zdCBpdGVtID0gYXdhaXQgZnJvbVV1aWQoZGF0YUxpc3QudXVpZClcbiAgICAgICAgaWYgKCFpdGVtKSByZXR1cm4gW11cbiAgICAgICAgcmV0dXJuIFtpdGVtXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY29weVRvQ2xpcGJvYXJkICh0ZXh0KSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChuYXZpZ2F0b3IuY2xpcGJvYXJkICYmIHdpbmRvdy5pc1NlY3VyZUNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRleHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0ZXh0QXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJylcbiAgICAgICAgdGV4dEFyZWEudmFsdWUgPSB0ZXh0XG4gICAgICAgIHRleHRBcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJ1xuICAgICAgICB0ZXh0QXJlYS5zdHlsZS5sZWZ0ID0gJy05OTlweCdcbiAgICAgICAgdGV4dEFyZWEuc3R5bGUudG9wID0gJy05OTlweCdcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZXh0QXJlYSlcbiAgICAgICAgdGV4dEFyZWEuZm9jdXMoKVxuICAgICAgICB0ZXh0QXJlYS5zZWxlY3QoKVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5JylcbiAgICAgICAgICAgID8gcmVzb2x2ZSgpXG4gICAgICAgICAgICA6IHJlamVjdChcbiAgICAgICAgICAgICAgbmV3IEVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5VbmFibGVUb0NvcHlUb0NsaXBib2FyZCcpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIHRleHRBcmVhLnJlbW92ZSgpXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB1aS5ub3RpZmljYXRpb25zLmVycm9yKGVycikpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5VbmFibGVUb0NvcHlUb0NsaXBib2FyZCcpKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBxdW90ZVJlZ0V4cCAoc3RyaW5nKSB7XG4gICAgLy8gaHR0cHM6Ly9iaXRidWNrZXQub3JnL2NnZ2FlcnRuZXIvanMtaGFja3MvcmF3L21hc3Rlci9xdW90ZS5qc1xuICAgIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgICBsZXQgcVN0cmluZyA9ICcnXG5cbiAgICBmb3IgKGxldCBjdXJyZW50LCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjdXJyZW50ID0gc3RyaW5nLmNoYXJBdChpKVxuXG4gICAgICBpZiAoY3VycmVudCA+PSAnICcgJiYgY3VycmVudCA8PSAnficpIHtcbiAgICAgICAgaWYgKGN1cnJlbnQgPT09ICdcXFxcJyB8fCBjdXJyZW50ID09PSBcIidcIikge1xuICAgICAgICAgIHFTdHJpbmcgKz0gJ1xcXFwnXG4gICAgICAgIH1cblxuICAgICAgICBxU3RyaW5nICs9IGN1cnJlbnQucmVwbGFjZSgvWy1bXFxdL3t9KCkqKz8uXFxcXF4kfF0vZywgJ1xcXFwkJicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKGN1cnJlbnQpIHtcbiAgICAgICAgICBjYXNlICdcXGInOlxuICAgICAgICAgICAgcVN0cmluZyArPSAnXFxcXGInXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnXFxmJzpcbiAgICAgICAgICAgIHFTdHJpbmcgKz0gJ1xcXFxmJ1xuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICBxU3RyaW5nICs9ICdcXFxcbidcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdcXHInOlxuICAgICAgICAgICAgcVN0cmluZyArPSAnXFxcXHInXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgIHFTdHJpbmcgKz0gJ1xcXFx0J1xuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ1xcdic6XG4gICAgICAgICAgICBxU3RyaW5nICs9ICdcXFxcdidcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcVN0cmluZyArPSAnXFxcXHUnXG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDQ7IC0taiA+PSBjdXJyZW50Lmxlbmd0aDsgcVN0cmluZyArPSAnMCcpO1xuICAgICAgICAgICAgcVN0cmluZyArPSBjdXJyZW50XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcVN0cmluZ1xuICB9XG5cbiAgc3RhdGljIHNldEJ5UGF0aCAob2JqLCBwYXRoLCB2YWx1ZSkge1xuICAgIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLicpXG4gICAgbGV0IG8gPSBvYmpcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgaWYgKCFvW3BhcnRzW2ldXSkgb1twYXJ0c1tpXV0gPSB7fVxuICAgICAgICBvID0gb1twYXJ0c1tpXV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBvW3BhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXSA9IHZhbHVlXG4gIH1cblxuICBzdGF0aWMgZ2V0QnlQYXRoIChvYmosIHBhdGgpIHtcbiAgICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy4nKVxuICAgIGxldCBvID0gb2JqXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmICghb1twYXJ0c1tpXV0pIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgbyA9IG9bcGFydHNbaV1dXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9bcGFydHNbcGFydHMubGVuZ3RoIC0gMV1dXG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgYSBEb2N1bWVudCBieSBpdHMgVW5pdmVyc2FsbHkgVW5pcXVlIElkZW50aWZpZXIgKHV1aWQpLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXVpZCAgIFRoZSB1dWlkIG9mIHRoZSBEb2N1bWVudCB0byByZXRyaWV2ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPERvY3VtZW50fG51bGw+fVxuICAgKi9cbiAgc3RhdGljIFNmcm9tVXVpZCAodXVpZCkge1xuICAgIGxldCBwYXJ0cyA9IHV1aWQuc3BsaXQoJy4nKVxuICAgIGxldCBkb2NcblxuICAgIC8vIENvbXBlbmRpdW0gRG9jdW1lbnRzXG4gICAgaWYgKHBhcnRzWzBdID09PSAnQ29tcGVuZGl1bScpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgICAvLyByZXR1cm4gZnJvbVV1aWQodXVpZCkgLy8gUmV0dXJuIFByb21pc2VcbiAgICAgIC8vIHBhcnRzLnNoaWZ0KCk7XG4gICAgICAvLyBjb25zdCBbc2NvcGUsIHBhY2tOYW1lLCBpZF0gPSBwYXJ0cy5zbGljZSgwLCAzKTtcbiAgICAgIC8vIHBhcnRzID0gcGFydHMuc2xpY2UoMyk7XG4gICAgICAvLyBjb25zdCBwYWNrID0gZ2FtZS5wYWNrcy5nZXQoYCR7c2NvcGV9LiR7cGFja05hbWV9YCk7XG4gICAgICAvLyByZXR1cm4gYXdhaXQgcGFjaz8uZ2V0RG9jdW1lbnQoaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXb3JsZCBEb2N1bWVudHNcbiAgICAgIGNvbnN0IFtkb2NOYW1lLCBkb2NJZF0gPSBwYXJ0cy5zbGljZSgwLCAyKVxuICAgICAgcGFydHMgPSBwYXJ0cy5zbGljZSgyKVxuICAgICAgY29uc3QgY29sbGVjdGlvbiA9IENPTkZJR1tkb2NOYW1lXS5jb2xsZWN0aW9uLmluc3RhbmNlXG4gICAgICBkb2MgPSBjb2xsZWN0aW9uLmdldChkb2NJZClcbiAgICB9XG5cbiAgICAvLyBFbWJlZGRlZCBEb2N1bWVudHNcbiAgICB3aGlsZSAoZG9jICYmIHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IFtlbWJlZGRlZE5hbWUsIGVtYmVkZGVkSWRdID0gcGFydHMuc2xpY2UoMCwgMilcbiAgICAgIGRvYyA9IGRvYy5nZXRFbWJlZGRlZERvY3VtZW50KGVtYmVkZGVkTmFtZSwgZW1iZWRkZWRJZClcbiAgICAgIHBhcnRzID0gcGFydHMuc2xpY2UoMilcbiAgICB9XG4gICAgcmV0dXJuIGRvYyB8fCBudWxsXG4gIH1cblxuICBzdGF0aWMgaXNEb2N1bWVudFV1aWRQYWNrICh1dWlkKSB7XG4gICAgaWYgKHV1aWQuaW5jbHVkZXMoJ0NvbXBlbmRpdW0nKSkgcmV0dXJuIHRydWVcbiAgICBlbHNlIHJldHVybiBmYWxzZVxuICB9XG5cbiAgc3RhdGljIGlzRG9jdW1lbnRVdWlkICh1dWlkKSB7XG4gICAgY29uc3QgaWRlbnRpZmllcnMgPSBbJ0FjdG9yJywgJ1NjZW5lJywgJ1Rva2VuJywgJ0l0ZW0nLCAnQ29tcGVuZGl1bSddXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHV1aWQuaW5jbHVkZXMoaWRlbnRpZmllcnNbaV0pKSByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHN0YXRpYyBnZXRBY3RvckRvY3VtZW50RnJvbURyb3BEYXRhIChkcm9wRGF0YSkge1xuICAgIGxldCBkb2NVdWlkLCBhY3RvclxuICAgIGlmIChkcm9wRGF0YS50b2tlblV1aWQpIHtcbiAgICAgIGRvY1V1aWQgPSBkcm9wRGF0YS50b2tlblV1aWRcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkcm9wRGF0YS51dWlkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZG9jVXVpZCA9IGRyb3BEYXRhLnV1aWRcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jVXVpZCA9XG4gICAgICAgIGRyb3BEYXRhLnNjZW5lSWQgJiYgZHJvcERhdGEudG9rZW5JZFxuICAgICAgICAgID8gYFNjZW5lLiR7ZHJvcERhdGEuc2NlbmVJZH0uVG9rZW4uJHtkcm9wRGF0YS50b2tlbklkfWBcbiAgICAgICAgICA6IGRyb3BEYXRhLmFjdG9ySWQgfHwgZHJvcERhdGEuYWN0b3JLZXkgfHwgZHJvcERhdGEuaWRcbiAgICB9XG4gICAgaWYgKGRyb3BEYXRhLnR5cGUgPT09ICdUb2tlbicpIHtcbiAgICAgIGRvY1V1aWQgPSBkcm9wRGF0YS51dWlkXG4gICAgfSBlbHNlIGlmIChkb2NVdWlkKSB7XG4gICAgICBhY3RvciA9IENvQzdVdGlsaXRpZXMuZ2V0QWN0b3JGcm9tS2V5KGRvY1V1aWQpXG4gICAgICBpZiAoIWFjdG9yICYmIGRyb3BEYXRhLnR5cGUgPT09ICdJdGVtJykgZG9jVXVpZCA9IG51bGxcbiAgICB9XG5cbiAgICBpZiAoYWN0b3IgJiYgZG9jVXVpZCAhPT0gYWN0b3IudXVpZCkge1xuICAgICAgZG9jVXVpZCA9IGFjdG9yLnV1aWRcbiAgICB9XG4gICAgcmV0dXJuIGRvY1V1aWRcbiAgfVxuXG4gIHN0YXRpYyBnZXREb2N1bWVudEZyb21LZXkgKGtleSkge1xuICAgIGlmICgha2V5KSByZXR1cm4gbnVsbFxuICAgIC8vIENhc2UgMCAtIGEgZG9jdW1lbnQgVXVpZFxuICAgIGlmIChDb0M3VXRpbGl0aWVzLmlzRG9jdW1lbnRVdWlkKGtleSkpIHtcbiAgICAgIGlmIChDb0M3VXRpbGl0aWVzLmlzRG9jdW1lbnRVdWlkUGFjayhrZXkpKSByZXR1cm4gZnJvbVV1aWQoa2V5KSAvLyBUT0RPIENoZWNrIHdlIGNhbiBkbyB0aGF0XG4gICAgICByZXR1cm4gQ29DN1V0aWxpdGllcy5TZnJvbVV1aWQoa2V5KVxuICAgIH1cblxuICAgIC8vIENhc2UgMSAtIGEgc3ludGhldGljIGFjdG9yIGZyb20gYSBUb2tlblxuICAgIGlmIChrZXkuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICBjb25zdCBbc2NlbmVJZCwgdG9rZW5JZF0gPSBrZXkuc3BsaXQoJy4nKVxuICAgICAgaWYgKHNjZW5lSWQgPT09ICdUT0tFTicpIHtcbiAgICAgICAgcmV0dXJuIGdhbWUuYWN0b3JzLnRva2Vuc1t0b2tlbklkXSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHNjZW5lSWQpXG4gICAgICBpZiAoIXNjZW5lKSByZXR1cm4gbnVsbFxuICAgICAgY29uc3QgdG9rZW5EYXRhID0gc2NlbmUuZ2V0RW1iZWRkZWREb2N1bWVudCgnVG9rZW4nLCB0b2tlbklkKVxuICAgICAgaWYgKCF0b2tlbkRhdGEpIHJldHVybiBudWxsXG4gICAgICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlbih0b2tlbkRhdGEpXG4gICAgICBpZiAoIXRva2VuLnNjZW5lKSB0b2tlbi5zY2VuZSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHNjZW5lKVxuICAgICAgcmV0dXJuIHRva2VuXG4gICAgfVxuICAgIC8vIENhc2UgMiAtIHVzZSBBY3RvciBJRCBkaXJlY3RvcnlcbiAgICByZXR1cm4gZ2FtZS5hY3RvcnMuZ2V0KGtleSkgfHwgbnVsbFxuICB9XG5cbiAgc3RhdGljIGdldEFjdG9yRnJvbUtleSAoa2V5KSB7XG4gICAgY29uc3QgZG9jID0gQ29DN1V0aWxpdGllcy5nZXREb2N1bWVudEZyb21LZXkoa2V5KVxuICAgIGlmICghZG9jKSByZXR1cm4gbnVsbFxuICAgIGlmIChkb2MuYWN0b3IpIHJldHVybiBkb2MuYWN0b3JcbiAgICBpZiAoZG9jLmNvbnN0cnVjdG9yPy5uYW1lID09PSAnQ29DQWN0b3InKSByZXR1cm4gZG9jXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZm9sZGVyIG9uIHRoZSBhY3RvcnMgdGFiIGNhbGxlZCBcIkltcG9ydGVkIENoYXJhY3RlcnNcIiBpZiB0aGUgZm9sZGVyIGRvZXNuJ3QgZXhpc3QuXG4gICAqIEByZXR1cm5zIHtGb2xkZXJ9IHRoZSBpbXBvcnRlZENoYXJhY3RlcnNGb2xkZXJcbiAgICovXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVJbXBvcnRDaGFyYWN0ZXJzRm9sZGVySWZOb3RFeGlzdHMgKCkge1xuICAgIGxldCBmb2xkZXJOYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlcicpXG4gICAgaWYgKGZvbGRlck5hbWUgPT09ICdDb0M3LkltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlcicpIHtcbiAgICAgIGZvbGRlck5hbWUgPSAnSW1wb3J0ZWQgY2hhcmFjdGVycydcbiAgICB9XG4gICAgbGV0IGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlciA9IGdhbWUuZm9sZGVycy5maW5kKFxuICAgICAgZW50cnkgPT4gZW50cnkubmFtZSA9PT0gZm9sZGVyTmFtZSAmJiBlbnRyeS50eXBlID09PSAnQWN0b3InXG4gICAgKVxuICAgIGlmIChcbiAgICAgIGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlciA9PT0gbnVsbCB8fFxuICAgICAgdHlwZW9mIGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlciA9PT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIC8vIENyZWF0ZSB0aGUgZm9sZGVyXG4gICAgICBpbXBvcnRlZENoYXJhY3RlcnNGb2xkZXIgPSBhd2FpdCBGb2xkZXIuY3JlYXRlKHtcbiAgICAgICAgbmFtZTogZm9sZGVyTmFtZSxcbiAgICAgICAgdHlwZTogJ0FjdG9yJyxcbiAgICAgICAgcGFyZW50OiBudWxsXG4gICAgICB9KVxuICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ3JlYXRlZEltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlcicpXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBpbXBvcnRlZENoYXJhY3RlcnNGb2xkZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBndWVzc0l0ZW0sIHRyeSBhbmQgZmluZCB0aGUgaXRlbSBpbiB0aGUgbG9jYXRpb25zIGRlZmluZWQgaW4gJHtzb3VyY2V9IGkgPSBJdGVtIERpcmVjdG9yeSwgdyA9IFdvcmxkIENvbXBlbmRpdW1zLCBtID0gTW9kdWxlIENvbXBlbmRpdW1zLCBzID0gU3lzdGVtIENvbXBlbmRpdW1zXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIEl0ZW0gdHlwZSB0byBmaW5kXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgaXRlbSB0byBmaW5kXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb21iYXQgbnVsbCAoZGVmYXVsdCkuIElmIGJvb2xlYW4gY29tYmF0IHByb3BlcnR5IG9mIHNraWxsIG11c3QgbWF0Y2hcbiAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSAnJyAoZGVmYXVsdCkuIENoZWNrIG9yZGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmYWxsYmFja0FueSBmYWxzZSAoZGVmYXVsdCkuIFNob3VsZCBhbnkgc3BlY2lhbGl6YXRpb24gdGhhdCBpc24ndCBmb3VuZCB0cnkgdXNpbmcgKEFueSkgaXRlbXNcbiAgICogQHJldHVybnMge09iamVjdH0gZm9ybWF0dGVkIEFjdG9yIGRhdGEgSXRlbSBvciBudWxsXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZ3Vlc3NJdGVtIChcbiAgICB0eXBlLFxuICAgIG5hbWUsXG4gICAgeyBjb21iYXQgPSBudWxsLCBzb3VyY2UgPSAnJywgZmFsbGJhY2tBbnkgPSBmYWxzZSB9ID0ge31cbiAgKSB7XG4gICAgbGV0IGV4aXN0aW5nID0gbnVsbFxuICAgIG5hbWUgPSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICBmb3IgKGxldCBvID0gMCwgb00gPSBzb3VyY2UubGVuZ3RoOyBvIDwgb007IG8rKykge1xuICAgICAgc3dpdGNoIChzb3VyY2Uuc3Vic3RyaW5nKG8sIG8gKyAxKSkge1xuICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICBleGlzdGluZyA9IGdhbWUuaXRlbXMuZmluZChcbiAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS50eXBlID09PSB0eXBlICYmXG4gICAgICAgICAgICAgIGl0ZW0ubmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lICYmXG4gICAgICAgICAgICAgIChjb21iYXQgPT09IG51bGwgfHwgaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQgPT09IGNvbWJhdClcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAndyc6XG4gICAgICAgIGNhc2UgJ20nOlxuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICBmb3IgKGNvbnN0IHBhY2sgb2YgZ2FtZS5wYWNrcykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBwYWNrLm1ldGFkYXRhLnR5cGUgPT09ICdJdGVtJyAmJlxuICAgICAgICAgICAgICAoKHNvdXJjZVtvXSA9PT0gJ3cnICYmIHBhY2subWV0YWRhdGEucGFja2FnZSA9PT0gJ3dvcmxkJykgfHxcbiAgICAgICAgICAgICAgICAoc291cmNlW29dID09PSAnUycgJiYgcGFjay5tZXRhZGF0YS5wYWNrYWdlID09PSAnQ29DNycpIHx8XG4gICAgICAgICAgICAgICAgKHNvdXJjZVtvXSA9PT0gJ3MnICYmXG4gICAgICAgICAgICAgICAgICAhWyd3b3JsZCcsICdDb0M3J10uaW5jbHVkZXMocGFjay5tZXRhZGF0YS5wYWNrYWdlKSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRzID0gYXdhaXQgcGFjay5nZXREb2N1bWVudHMoKVxuICAgICAgICAgICAgICBleGlzdGluZyA9IGRvY3VtZW50cy5maW5kKFxuICAgICAgICAgICAgICAgIGl0ZW0gPT5cbiAgICAgICAgICAgICAgICAgIGl0ZW0udHlwZSA9PT0gdHlwZSAmJlxuICAgICAgICAgICAgICAgICAgaXRlbS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgJiZcbiAgICAgICAgICAgICAgICAgIChjb21iYXQgPT09IG51bGwgfHwgaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQgPT09IGNvbWJhdClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmFsbGJhY2tBbnkgJiYgdHlwZSA9PT0gJ3NraWxsJykge1xuICAgICAgY29uc3QgbWF0Y2ggPSBuYW1lLm1hdGNoKC9eKC4rIFxcKCkoPyFhbnkpLisoXFwpKSQvKVxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbShcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIG1hdGNoWzFdICsgJ2FueScgKyBtYXRjaFsyXSxcbiAgICAgICAgICB7IGNvbWJhdCwgc291cmNlIH1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB0b0tlYmFiQ2FzZSAocykge1xuICAgIGlmICghcykge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuICAgIGNvbnN0IG1hdGNoID0gcy5tYXRjaCgvW0EtWl17Mix9KD89W0EtWl1bYS16XStbMC05XSp8XFxiKXxbQS1aXT9bYS16XStbMC05XSp8W0EtWl18WzAtOV0rL2cpXG5cbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2guam9pbignLScpLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIHN0YXRpYyBzb3J0QnlOYW1lS2V5IChhLCBiKSB7XG4gICAgcmV0dXJuIGEubmFtZVxuICAgICAgLm5vcm1hbGl6ZSgnTkZEJylcbiAgICAgIC5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCAnJylcbiAgICAgIC50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAubG9jYWxlQ29tcGFyZShcbiAgICAgICAgYi5uYW1lXG4gICAgICAgICAgLm5vcm1hbGl6ZSgnTkZEJylcbiAgICAgICAgICAucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgJycpXG4gICAgICAgICAgLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgIClcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENPTkZJRywgRm9ybUFwcGxpY2F0aW9uLCBmb3VuZHJ5LCBnYW1lLCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuZXhwb3J0IGNsYXNzIENvQ0lERWRpdG9yIGV4dGVuZHMgRm9ybUFwcGxpY2F0aW9uIHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnLCAnY29jLWlkLWVkaXRvciddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvY29jLWlkLWVkaXRvci5oYnMnLFxuICAgICAgd2lkdGg6IDkwMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgdGl0bGU6ICdDb0M3LkNvQ0lERmxhZy50aXRsZScsXG4gICAgICBjbG9zZU9uU3VibWl0OiBmYWxzZSxcbiAgICAgIHN1Ym1pdE9uQ2xvc2U6IHRydWUsXG4gICAgICBzdWJtaXRPbkNoYW5nZTogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKClcblxuICAgIHNoZWV0RGF0YS5zdXBwb3J0ZWRMYW5ndWFnZXMgPSBDT05GSUcuc3VwcG9ydGVkTGFuZ3VhZ2VzXG5cbiAgICB0aGlzLm9wdGlvbnMuZWRpdGFibGUgPSB0aGlzLm9iamVjdC5zaGVldC5pc0VkaXRhYmxlXG5cbiAgICBzaGVldERhdGEuZ3Vlc3NDb2RlID0gZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmd1ZXNzSWQodGhpcy5vYmplY3QpXG4gICAgc2hlZXREYXRhLmlkUHJlZml4ID0gZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmdldFByZWZpeCh0aGlzLm9iamVjdClcblxuICAgIHNoZWV0RGF0YS5jb2NpZEZsYWcgPSB0aGlzLm9iamVjdC5mbGFncz8uQ29DNz8uY29jaWRGbGFnXG5cbiAgICBzaGVldERhdGEuaWQgPSBzaGVldERhdGEuY29jaWRGbGFnPy5pZCB8fCAnJ1xuICAgIHNoZWV0RGF0YS5sYW5nID0gc2hlZXREYXRhLmNvY2lkRmxhZz8ubGFuZyB8fCBnYW1lLmkxOG4ubGFuZ1xuICAgIHNoZWV0RGF0YS5wcmlvcml0eSA9IHNoZWV0RGF0YS5jb2NpZEZsYWc/LnByaW9yaXR5IHx8IDBcblxuICAgIHNoZWV0RGF0YS5lcmFzID0gW11cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LmVyYXMpKSB7XG4gICAgICBzaGVldERhdGEuZXJhcy5wdXNoKHtcbiAgICAgICAgaWQ6IGtleSxcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlKSxcbiAgICAgICAgaXNFbmFibGVkOiAoc2hlZXREYXRhLmNvY2lkRmxhZz8uZXJhcyA/PyB7fSlba2V5XSA9PT0gdHJ1ZVxuICAgICAgfSlcbiAgICB9XG4gICAgc2hlZXREYXRhLmVyYXMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICBjb25zdCBDb0NJREtleXMgPSBmb3VuZHJ5LnV0aWxzLmZsYXR0ZW5PYmplY3QoZ2FtZS5pMThuLnRyYW5zbGF0aW9ucy5Db0M3LkNvQ0lERmxhZy5rZXlzID8/IHt9KVxuICAgIGNvbnN0IHByZWZpeCA9IG5ldyBSZWdFeHAoJ14nICsgQ29DN1V0aWxpdGllcy5xdW90ZVJlZ0V4cChzaGVldERhdGEuaWRQcmVmaXgpKVxuICAgIHNoZWV0RGF0YS5leGlzdGluZ0tleXMgPSBPYmplY3Qua2V5cyhDb0NJREtleXMpLnJlZHVjZSgob2JqLCBrKSA9PiB7XG4gICAgICBpZiAoay5tYXRjaChwcmVmaXgpKSB7XG4gICAgICAgIG9iai5wdXNoKHsgaywgbmFtZTogQ29DSURLZXlzW2tdIH0pXG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqXG4gICAgfSwgW10pLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgc2hlZXREYXRhLmlzU3lzdGVtSUQgPSAodHlwZW9mIENvQ0lES2V5c1tzaGVldERhdGEuaWRdICE9PSAndW5kZWZpbmVkJylcbiAgICBjb25zdCBtYXRjaCA9IHNoZWV0RGF0YS5pZC5tYXRjaCgvXihbXlxcXFwuXSspXFwuKFteXFxcXC5dKilcXC4oLispLylcbiAgICBzaGVldERhdGEuX2V4aXN0aW5nID0gKG1hdGNoICYmIHR5cGVvZiBtYXRjaFszXSAhPT0gJ3VuZGVmaW5lZCcgPyBtYXRjaFszXSA6ICcnKVxuXG4gICAgaWYgKHNoZWV0RGF0YS5pZCAmJiBzaGVldERhdGEubGFuZykge1xuICAgICAgLy8gRmluZCBvdXQgaWYgdGhlcmUgZXhpc3RzIGEgZHVwbGljYXRlIENvQ0lEXG4gICAgICBjb25zdCB3b3JsZERvY3VtZW50cyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSURBbGwoe1xuICAgICAgICBjb2NpZDogc2hlZXREYXRhLmlkLFxuICAgICAgICBsYW5nOiBzaGVldERhdGEubGFuZyxcbiAgICAgICAgc2NvcGU6ICd3b3JsZCdcbiAgICAgIH0pXG4gICAgICBjb25zdCB1c2VkRXJhcyA9IHt9XG4gICAgICBjb25zdCB1bmlxdWVXb3JsZFByaW9yaXR5ID0ge31cbiAgICAgIHNoZWV0RGF0YS53b3JsZERvY3VtZW50SW5mbyA9IGF3YWl0IFByb21pc2UuYWxsKHdvcmxkRG9jdW1lbnRzLm1hcChhc3luYyAoZCkgPT4ge1xuICAgICAgICBpZiAoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKSB7XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1bmlxdWVXb3JsZFByaW9yaXR5LCBkLmZsYWdzLkNvQzcuY29jaWRGbGFnLnByaW9yaXR5ICsgJy8nICsgZVswXSkpIHtcbiAgICAgICAgICAgICAgdW5pcXVlV29ybGRQcmlvcml0eVtkLmZsYWdzLkNvQzcuY29jaWRGbGFnLnByaW9yaXR5ICsgJy8nICsgZVswXV0gPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1bmlxdWVXb3JsZFByaW9yaXR5W2QuZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHkgKyAnLycgKyBlWzBdXSsrXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuaXF1ZVdvcmxkUHJpb3JpdHlbZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5wcmlvcml0eSArICcvKiddID0gMVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVyYXMgPSAoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzID8gT2JqZWN0LmVudHJpZXMoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiBlWzBdKS5zb3J0KCkgOiBbXSlcbiAgICAgICAgZm9yIChjb25zdCBlcmEgb2YgZXJhcykge1xuICAgICAgICAgIHVzZWRFcmFzW2VyYV0gPSBDT0M3LmVyYXNbZXJhXSA/PyAnPydcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVyYXM6IGVyYXMucmVkdWNlKGZ1bmN0aW9uIChhbGwsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGFsbFtjdXJyZW50XSA9IHRydWVcbiAgICAgICAgICAgIHJldHVybiBhbGxcbiAgICAgICAgICB9LCB7fSksXG4gICAgICAgICAgcHJpb3JpdHk6IGQuZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHksXG4gICAgICAgICAgbGFuZzogZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5sYW5nID8/ICdlbicsXG4gICAgICAgICAgbGluazogYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKGQubGluaywgeyBhc3luYzogdHJ1ZSB9KSxcbiAgICAgICAgICBmb2xkZXI6IGQ/LmZvbGRlcj8ubmFtZVxuICAgICAgICB9XG4gICAgICB9KSlcbiAgICAgIGlmIChPYmplY3QuZW50cmllcyh1bmlxdWVXb3JsZFByaW9yaXR5KS5maWx0ZXIoYyA9PiBjWzFdID4gMSkubGVuZ3RoID4gMCkge1xuICAgICAgICBzaGVldERhdGEud2FybkR1cGxpY2F0ZVdvcmxkUHJpb3JpdHkgPSB0cnVlXG4gICAgICB9XG4gICAgICBzaGVldERhdGEud29ybGREdXBsaWNhdGVzID0gd29ybGREb2N1bWVudHMubGVuZ3RoID8/IDBcblxuICAgICAgY29uc3QgY29tcGVuZGl1bURvY3VtZW50cyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSURBbGwoe1xuICAgICAgICBjb2NpZDogc2hlZXREYXRhLmlkLFxuICAgICAgICBsYW5nOiBzaGVldERhdGEubGFuZyxcbiAgICAgICAgc2NvcGU6ICdjb21wZW5kaXVtcydcbiAgICAgIH0pXG4gICAgICBjb25zdCB1bmlxdWVDb21wZW5kaXVtUHJpb3JpdHkgPSB7fVxuICAgICAgc2hlZXREYXRhLmNvbXBlbmRpdW1Eb2N1bWVudEluZm8gPSBhd2FpdCBQcm9taXNlLmFsbChjb21wZW5kaXVtRG9jdW1lbnRzLm1hcChhc3luYyAoZCkgPT4ge1xuICAgICAgICBpZiAoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKSB7XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1bmlxdWVDb21wZW5kaXVtUHJpb3JpdHksIGQuZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHkgKyAnLycgKyBlWzBdKSkge1xuICAgICAgICAgICAgICB1bmlxdWVDb21wZW5kaXVtUHJpb3JpdHlbZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5wcmlvcml0eSArICcvJyArIGVbMF1dID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdW5pcXVlQ29tcGVuZGl1bVByaW9yaXR5W2QuZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHkgKyAnLycgKyBlWzBdXSsrXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuaXF1ZUNvbXBlbmRpdW1Qcmlvcml0eVtkLmZsYWdzLkNvQzcuY29jaWRGbGFnLnByaW9yaXR5ICsgJy8qJ10gPSAxXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXJhcyA9IChkLmZsYWdzLkNvQzcuY29jaWRGbGFnLmVyYXMgPyBPYmplY3QuZW50cmllcyhkLmZsYWdzLkNvQzcuY29jaWRGbGFnLmVyYXMpLmZpbHRlcihlID0+IGVbMV0pLm1hcChlID0+IGVbMF0pLnNvcnQoKSA6IFtdKVxuICAgICAgICBmb3IgKGNvbnN0IGVyYSBvZiBlcmFzKSB7XG4gICAgICAgICAgdXNlZEVyYXNbZXJhXSA9IENPQzcuZXJhc1tlcmFdID8/ICc/J1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJhczogZXJhcy5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgY3VycmVudCkge1xuICAgICAgICAgICAgYWxsW2N1cnJlbnRdID0gdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIGFsbFxuICAgICAgICAgIH0sIHt9KSxcbiAgICAgICAgICBwcmlvcml0eTogZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5wcmlvcml0eSxcbiAgICAgICAgICBsYW5nOiBkLmZsYWdzLkNvQzcuY29jaWRGbGFnLmxhbmcgPz8gJ2VuJyxcbiAgICAgICAgICBsaW5rOiBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoZC5saW5rLCB7IGFzeW5jOiB0cnVlIH0pLFxuICAgICAgICAgIGZvbGRlcjogZD8uZm9sZGVyPy5uYW1lID8/ICcnXG4gICAgICAgIH1cbiAgICAgIH0pKVxuICAgICAgaWYgKE9iamVjdC5lbnRyaWVzKHVuaXF1ZUNvbXBlbmRpdW1Qcmlvcml0eSkuZmlsdGVyKGMgPT4gY1sxXSA+IDEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2hlZXREYXRhLndhcm5EdXBsaWNhdGVDb21wZW5kaXVtUHJpb3JpdHkgPSB0cnVlXG4gICAgICB9XG4gICAgICBzaGVldERhdGEuY29tcGVuZGl1bUR1cGxpY2F0ZXMgPSBjb21wZW5kaXVtRG9jdW1lbnRzLmxlbmd0aCA/PyAwXG4gICAgICBzaGVldERhdGEudXNlZEVyYXMgPSBbXVxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModXNlZEVyYXMpKSB7XG4gICAgICAgIHNoZWV0RGF0YS51c2VkRXJhcy5wdXNoKHtcbiAgICAgICAgICBpZDoga2V5LFxuICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHNoZWV0RGF0YS51c2VkRXJhcy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICB9IGVsc2Uge1xuICAgICAgc2hlZXREYXRhLmNvbXBlbmRpdW1Eb2N1bWVudEluZm8gPSBbXVxuICAgICAgc2hlZXREYXRhLndvcmxkRG9jdW1lbnRJbmZvID0gW11cbiAgICAgIHNoZWV0RGF0YS53b3JsZER1cGxpY2F0ZXMgPSAwXG4gICAgICBzaGVldERhdGEuY29tcGVuZGl1bUR1cGxpY2F0ZXMgPSAwXG4gICAgICBzaGVldERhdGEud2FybkR1cGxpY2F0ZVdvcmxkUHJpb3JpdHkgPSBmYWxzZVxuICAgICAgc2hlZXREYXRhLndhcm5EdXBsaWNhdGVDb21wZW5kaXVtUHJpb3JpdHkgPSBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gc2hlZXREYXRhXG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG5cbiAgICBodG1sLmZpbmQoJ2EuY29weS10by1jbGlwYm9hcmQnKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgQ29DN1V0aWxpdGllcy5jb3B5VG9DbGlwYm9hcmQoJCh0aGlzKS5zaWJsaW5ncygnaW5wdXQnKS52YWwoKSlcbiAgICB9KVxuXG4gICAgaWYgKCF0aGlzLm9iamVjdC5zaGVldC5pc0VkaXRhYmxlKSByZXR1cm5cblxuICAgIGh0bWwuZmluZCgnLnRvZ2dsZS1zd2l0Y2gnKS5jbGljayh0aGlzLl9vbkNsaWNrVG9nZ2xlLmJpbmQodGhpcykpXG5cbiAgICBodG1sLmZpbmQoJ2lucHV0W25hbWU9X2V4aXN0aW5nJykuY2hhbmdlKGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCBvYmogPSAkKHRoaXMpXG4gICAgICBjb25zdCBwcmVmaXggPSBvYmouZGF0YSgncHJlZml4JylcbiAgICAgIGxldCB2YWx1ZSA9IG9iai52YWwoKVxuICAgICAgaWYgKHZhbHVlICE9PSAnJykge1xuICAgICAgICB2YWx1ZSA9IHByZWZpeCArIENvQzdVdGlsaXRpZXMudG9LZWJhYkNhc2UodmFsdWUpXG4gICAgICB9XG4gICAgICBodG1sLmZpbmQoJ2lucHV0W25hbWU9aWRdJykudmFsKHZhbHVlKS50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgIH0pXG5cbiAgICBodG1sLmZpbmQoJ3NlbGVjdFtuYW1lPWtub3duXScpLmNoYW5nZShmdW5jdGlvbiAoZSkge1xuICAgICAgY29uc3Qgb2JqID0gJCh0aGlzKVxuICAgICAgaHRtbC5maW5kKCdpbnB1dFtuYW1lPWlkXScpLnZhbChvYmoudmFsKCkpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnYVtkYXRhLWd1ZXNzXScpLmNsaWNrKGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGNvbnN0IG9iaiA9ICQodGhpcylcbiAgICAgIGNvbnN0IGd1ZXNzID0gb2JqLmRhdGEoJ2d1ZXNzJylcbiAgICAgIGh0bWwuZmluZCgnaW5wdXRbbmFtZT1pZF0nKS52YWwoZ3Vlc3MpLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBlcmFUb2dnbGUgKGRvY3VtZW50LCBwcm9wZXJ0eUlkKSB7XG4gICAgaWYgKGRvY3VtZW50LnR5cGUgPT09ICdzZXR1cCcpIHtcbiAgICAgIC8vIFNldHVwcyBjYW4gb25seSBoYXZlIG9uZSBlcmEgdG8gbWFrZSBzdXJlIHRoZSBjb3JyZWN0IHNraWxscyBhcmUgcG9wdWxhdGVkIHZpYSBDb0MgSURcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IHtcbiAgICAgICAgW3Byb3BlcnR5SWRdOiB0cnVlXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleV0gb2YgT2JqZWN0LmVudHJpZXMoZG9jdW1lbnQuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuZXJhcykpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSBwcm9wZXJ0eUlkKSB7XG4gICAgICAgICAgICB1cGRhdGVbJy09JyArIGtleV0gPSBudWxsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhd2FpdCBkb2N1bWVudC51cGRhdGUoe1xuICAgICAgICAnZmxhZ3MuQ29DNy5jb2NpZEZsYWcuZXJhcyc6IHVwZGF0ZVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5mbGFncz8uQ29DNz8uY29jaWRGbGFnPy5lcmFzPy5bcHJvcGVydHlJZF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGF3YWl0IGRvY3VtZW50LnVwZGF0ZSh7XG4gICAgICAgICAgJ2ZsYWdzLkNvQzcuY29jaWRGbGFnLmVyYXMnOiB7XG4gICAgICAgICAgICBbcHJvcGVydHlJZF06IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBkb2N1bWVudC51cGRhdGUoe1xuICAgICAgICAgIFtgZmxhZ3MuQ29DNy5jb2NpZEZsYWcuZXJhcy4ke3Byb3BlcnR5SWR9YF06IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgZG9jdW1lbnQudXBkYXRlKHtcbiAgICAgICAgW2BmbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzLi09JHtwcm9wZXJ0eUlkfWBdOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vbkNsaWNrVG9nZ2xlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBwcm9wZXJ0eUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnByb3BlcnR5XG4gICAgYXdhaXQgQ29DSURFZGl0b3IuZXJhVG9nZ2xlKHRoaXMub2JqZWN0LCBwcm9wZXJ0eUlkKVxuICAgIHRoaXMucmVuZGVyKClcbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IGlkID0gZm9ybURhdGEuaWQgfHwgJydcbiAgICBhd2FpdCB0aGlzLm9iamVjdC51cGRhdGUoe1xuICAgICAgJ2ZsYWdzLkNvQzcuY29jaWRGbGFnLmlkJzogaWQsXG4gICAgICAnZmxhZ3MuQ29DNy5jb2NpZEZsYWcubGFuZyc6IGZvcm1EYXRhLmxhbmcgfHwgZ2FtZS5pMThuLmxhbmcsXG4gICAgICAnZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHknOiBmb3JtRGF0YS5wcmlvcml0eSB8fCAwLFxuICAgICAgJ2ZsYWdzLkNvQzcuY29jaWRGbGFnLmVyYXMnOiAodGhpcy5vYmplY3QuZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uZXJhcyA/PyB7fSlcbiAgICB9KVxuICAgIGNvbnN0IGh0bWwgPSAkKHRoaXMub2JqZWN0LnNoZWV0LmVsZW1lbnQpLmZpbmQoJ2hlYWRlci53aW5kb3ctaGVhZGVyIGEuaGVhZGVyLWJ1dHRvbi5lZGl0LWNvYy1pZC13YXJuaW5nLGhlYWRlci53aW5kb3ctaGVhZGVyIGEuaGVhZGVyLWJ1dHRvbi5lZGl0LWNvYy1pZC1leGlzaXRpbmcnKVxuICAgIGlmIChodG1sLmxlbmd0aCkge1xuICAgICAgaHRtbC5jc3Moe1xuICAgICAgICBjb2xvcjogKGlkID8gJ3ZhcigtLWNvbG9yLXRleHQtbGlnaHQtaGlnaGxpZ2h0KScgOiAncmVkJylcbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMucmVuZGVyKClcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGdhbWUgKi9cbmltcG9ydCB7IENvQ0lERWRpdG9yIH0gZnJvbSAnLi4vYXBwcy9jb2MtaWQtZWRpdG9yLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiAoaGVhZGVyQnV0dG9ucywgc2hlZXQpIHtcbiAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgY29uc3Qgc2hlZXRDb0NJRCA9IHNoZWV0Lm9iamVjdC5mbGFncz8uQ29DNz8uY29jaWRGbGFnXG4gICAgY29uc3Qgbm9JZCA9ICh0eXBlb2Ygc2hlZXRDb0NJRCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHNoZWV0Q29DSUQuaWQgPT09ICd1bmRlZmluZWQnIHx8IHNoZWV0Q29DSUQuaWQgPT09ICcnKVxuICAgIGNvbnN0IENvQ0lERWRpdG9yQnV0dG9uID0ge1xuICAgICAgY2xhc3M6IChub0lkID8gJ2VkaXQtY29jLWlkLXdhcm5pbmcnIDogJ2VkaXQtY29jLWlkLWV4aXNpdGluZycpLFxuICAgICAgbGFiZWw6ICdDb0M3LkNvQ0lERmxhZy5pZCcsXG4gICAgICBpY29uOiAnZmFzIGZhLWZpbmdlcnByaW50JyxcbiAgICAgIG9uY2xpY2s6ICgpID0+IHtcbiAgICAgICAgbmV3IENvQ0lERWRpdG9yKHNoZWV0Lm9iamVjdCwge30pLnJlbmRlcih0cnVlLCB7IGZvY3VzOiB0cnVlIH0pXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG51bWJlck9mQnV0dG9ucyA9IGhlYWRlckJ1dHRvbnMubGVuZ3RoXG4gICAgaGVhZGVyQnV0dG9ucy5zcGxpY2UobnVtYmVyT2ZCdXR0b25zIC0gMSwgMCwgQ29DSURFZGl0b3JCdXR0b24pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLGdhbWUgKi9cbmV4cG9ydCBjbGFzcyBDb0M3Q29udGV4dE1lbnUge1xuICBiaW5kIChtZW51LCBodG1sLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLl9odG1sID0gaHRtbFxuICAgIHRoaXMuX21lbnUgPSBtZW51XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1lbnVUcmlnZ2VyID0gaHRtbC5maW5kKGBbZGF0YS1jb250ZXh0LW1lbnU9JHttZW51LmlkfV1gKSAvLyBGaW5kIGFsbCBtZW51IHRyaWdnZXJzLlxuICAgICAgaWYgKG1lbnVUcmlnZ2VyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC8vIElmIHRoZXJlIGlzIG5vIHRyaWdnZXIsIGRvIG5vdCBjb250aW51ZS5cbiAgICAgIG1lbnVUcmlnZ2VyLmNvbnRleHRtZW51KHRoaXMuX29uQ29udGV4dE1lbnUuYmluZCh0aGlzKSkgLy8gQXR0YWNoIHRoZSBoYW5kbGVyLlxuICAgICAgY29uc3QgbWVudUVsZW1lbnQgPSBDb0M3Q29udGV4dE1lbnUuQ3JlYXRlTWVudShtZW51KSAvLyBCdWlsZCB0aGUgbWVudVxuICAgICAgbWVudUVsZW1lbnQub24oJ2NsaWNrJyxcbiAgICAgICAgJy5tZW51LWFjdGlvbicsXG4gICAgICAgIHRoaXMuX29uTWVudUFjdGlvbi5iaW5kKHRoaXMpKVxuICAgICAgLy8gY29uc3QgZG9jdW1lbnRNZW51ID0gdGhpcy5tZW51Q29udGFpbmVyLmZpbmQoYC5jb250ZXh0LW1lbnUtd3JhcHBlci4ke21lbnUuaWR9YClcbiAgICAgIGlmICh0aGlzLm1lbnUubGVuZ3RoICE9PSAwKSB0aGlzLm1lbnUucmVwbGFjZVdpdGgobWVudUVsZW1lbnQpXG4gICAgICBlbHNlIHRoaXMubWVudUNvbnRhaW5lci5hcHBlbmQobWVudUVsZW1lbnQpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgZ2V0IG1lbnVDb250YWluZXIgKCkge1xuICAgIGxldCBtZW51Q29udGFpbmVyID0gdGhpcy5faHRtbC5maW5kKCcubWVudS1jb250YWluZXInKVxuICAgIGlmIChtZW51Q29udGFpbmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5faHRtbC5hcHBlbmQoJzxkaXYgY2xhc3M9XCJtZW51LWNvbnRhaW5lclwiPjwvZGl2PicpXG4gICAgICBtZW51Q29udGFpbmVyID0gdGhpcy5faHRtbC5maW5kKCcubWVudS1jb250YWluZXInKVxuICAgIH1cbiAgICByZXR1cm4gbWVudUNvbnRhaW5lclxuICB9XG5cbiAgZ2V0IG1lbnUgKCkge1xuICAgIC8vIGNvbnN0IG1lbnVDb250YWluZXIgPSB0aGlzLm1lbnVDb250YWluZXJcbiAgICAvLyBpZiAoIW1lbnVDb250YWluZXIgfHwgbWVudUNvbnRhaW5lci5sZW5ndGggPT09IDApIHJldHVybiBudWxsXG4gICAgcmV0dXJuIHRoaXMubWVudUNvbnRhaW5lci5maW5kKGAuY29udGV4dC1tZW51LXdyYXBwZXIuJHt0aGlzLl9tZW51LmlkfWApXG4gIH1cblxuICBfb25NZW51QWN0aW9uIChldmVudCkge1xuICAgIC8vIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAvLyBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYnJhbmNoJykpIHJldHVyblxuICAgIHJldHVybiB0aGlzLl9jYWxsYmFjayhldmVudCwgdGhpcy50YXJnZXQpXG4gIH1cblxuICBzdGF0aWMgY2xvc2VBbGwgKCkge1xuICAgIGNvbnN0IG1lbnVDb250YWluZXJzID0gJCgnYm9keScpLmZpbmQoJy5tZW51LWNvbnRhaW5lcicpXG4gICAgY29uc3QgbWVudXMgPSBtZW51Q29udGFpbmVycy5maW5kKCcuY29udGV4dC1tZW51LXdyYXBwZXInKVxuICAgIG1lbnVzLmVhY2goZnVuY3Rpb24gKGksIG0pIHsgbS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbicgfSlcbiAgICAvLyBib2R5LmZpbmQoJy5tZW51LXdyYXBwZXInKS5oaWRlKClcbiAgfVxuXG4gIF9vbkNvbnRleHRNZW51IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KHRydWUpXG4gICAgQ29DN0NvbnRleHRNZW51LmNsb3NlQWxsKCkgLy8gT25seSAxIG1lbnUgY2FuIGJlIG9wZW4uXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQ/LmN1cnJlbnRUYXJnZXRcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldFxuICAgIGlmICghdGFyZ2V0KSByZXR1cm5cbiAgICBjb25zdCBtZW51TmFtZSA9IHRhcmdldC5kYXRhc2V0Py5jb250ZXh0TWVudVxuICAgIGlmIChtZW51TmFtZSA9PT0gdGhpcy5fbWVudS5pZCkge1xuICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMubWVudVxuICAgICAgaWYgKHdyYXBwZXIubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzdWJNZW51ID0gd3JhcHBlci5maW5kKCcuc3ViLW1lbnUnKVxuICAgICAgICBsZXQgbGVmdCA9IGV2ZW50LmNsaWVudFhcbiAgICAgICAgbGV0IHRvcCA9IGV2ZW50LmNsaWVudFlcbiAgICAgICAgY29uc3QgbWVudUhlaWdodCA9IHdyYXBwZXIub3V0ZXJIZWlnaHQoKVxuICAgICAgICBjb25zdCBtZW51V2lkdGggPSB3cmFwcGVyLm91dGVyV2lkdGgoKVxuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgbWVudUhlaWdodCArIHRvcCkge1xuICAgICAgICAgIHRvcCA9IHRvcCAtIG1lbnVIZWlnaHRcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCBtZW51V2lkdGggKyBsZWZ0KSB7XG4gICAgICAgICAgbGVmdCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gbWVudVdpZHRoXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Yk1lbnUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IG1lbnVXaWR0aCArIGxlZnQgKyBzdWJNZW51Lm91dGVyV2lkdGgoKSkge1xuICAgICAgICAgICAgc3ViTWVudS5jc3Moe1xuICAgICAgICAgICAgICByaWdodDogYCR7bWVudVdpZHRoIC0gNX1weGAsXG4gICAgICAgICAgICAgIGxlZnQ6ICcnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWJNZW51LmNzcyh7XG4gICAgICAgICAgICAgIGxlZnQ6IGAke21lbnVXaWR0aCAtIDV9cHhgLFxuICAgICAgICAgICAgICByaWdodDogJydcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdyYXBwZXIuY3NzKHtcbiAgICAgICAgICBsZWZ0OiBgJHtsZWZ0fXB4YCxcbiAgICAgICAgICB0b3A6IGAke3RvcH1weGAsXG4gICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGNhblNlZSAodmlzaWJpbGl0eSkge1xuICAgIHN3aXRjaCAodmlzaWJpbGl0eS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdnbSc6XG4gICAgICAgIHJldHVybiBnYW1lLnVzZXIuaXNHTVxuICAgICAgY2FzZSAndHJ1c3RlZCc6XG4gICAgICAgIHJldHVybiBnYW1lLnVzZXIuaXNUcnVzdGVkXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBDcmVhdGVNZW51IChtZW51KSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IHR5cGVvZiBtZW51LmNsYXNzZXMgPT09ICdzdHJpbmcnID8gW21lbnUuY2xhc3Nlc10gOiBtZW51LmNsYXNzZXNcbiAgICBjbGFzc2VzLnB1c2goJ2NvbnRleHQtbWVudS13cmFwcGVyJylcbiAgICBjb25zdCB3cmFwcGVyID0gJCgnPGRpdj48L2Rpdj4nKVxuICAgIHdyYXBwZXIuYWRkQ2xhc3MobWVudS5pZClcbiAgICBjbGFzc2VzLmZvckVhY2goYyA9PiB3cmFwcGVyLmFkZENsYXNzKGMpKVxuICAgIGlmIChtZW51LnNlY3Rpb24pIHtcbiAgICAgIG1lbnUuc2VjdGlvbi5mb3JFYWNoKHMgPT4ge1xuICAgICAgICBjb25zdCBzZWN0aW9uID0gQ29DN0NvbnRleHRNZW51LkNyZWF0ZVNlY3Rpb24ocywgeyBtdWx0aTogdHJ1ZSB9KVxuICAgICAgICBpZiAoc2VjdGlvbikgd3JhcHBlci5hcHBlbmQoc2VjdGlvbilcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNlY3Rpb24gPSBDb0M3Q29udGV4dE1lbnUuQ3JlYXRlU2VjdGlvbihtZW51KVxuICAgICAgaWYgKHNlY3Rpb24pIHdyYXBwZXIuYXBwZW5kKHNlY3Rpb24pXG4gICAgfVxuICAgIHJldHVybiB3cmFwcGVyXG4gIH1cblxuICBzdGF0aWMgQ3JlYXRlU2VjdGlvbiAocywgeyBtdWx0aSA9IGZhbHNlLCBzdWJNZW51ID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgaWYgKCFzLml0ZW1zKSByZXR1cm4gbnVsbFxuICAgIGlmIChzLnZpc2liaWxpdHkgJiYgIUNvQzdDb250ZXh0TWVudS5jYW5TZWUocy52aXNpYmlsaXR5KSkgcmV0dXJuIG51bGxcbiAgICBjb25zdCBjbGFzc2VzID0gcy5jbGFzc2VzID8gdHlwZW9mIHMuY2xhc3NlcyA9PT0gJ3N0cmluZycgPyBbcy5jbGFzc2VzXSA6IHMuY2xhc3NlcyA6IFtdXG4gICAgaWYgKG11bHRpKSBjbGFzc2VzLnB1c2goJ21lbnUtc2VjdGlvbicpXG4gICAgaWYgKHN1Yk1lbnUpIGNsYXNzZXMucHVzaCgnc3ViLW1lbnUnKVxuICAgIGNvbnN0IHNlY3Rpb24gPSAkKCc8dWw+PC91bD4nKVxuICAgIGNsYXNzZXMuZm9yRWFjaChjID0+IHNlY3Rpb24uYWRkQ2xhc3MoYykpXG4gICAgcy5pdGVtcy5mb3JFYWNoKGkgPT4ge1xuICAgICAgY29uc3QgbGkgPSAkKCc8bGk+PC9saT4nKVxuICAgICAgbGkuYWRkQ2xhc3MoJ21lbnUtaXRlbScpXG4gICAgICBpZiAoaS5hY3Rpb24pIHtcbiAgICAgICAgbGkuYWRkQ2xhc3MoJ21lbnUtYWN0aW9uJylcbiAgICAgICAgbGkuYXR0cignZGF0YS1hY3Rpb24nLCBpLmFjdGlvbilcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaS5sYWJlbCA9PT0gJ3N0cmluZycpIGxpLmFwcGVuZChgPHNwYW4+JHtpLmxhYmVsfTwvc3Bhbj5gKVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChpLmxhYmVsLmljb24pIGxpLmFwcGVuZChgPGkgY2xhc3M9XCIke2kubGFiZWwuaWNvbn1cIj48L2k+YClcbiAgICAgICAgaWYgKGkubGFiZWwudGV4dCkgbGkuYXBwZW5kKGA8c3Bhbj4ke2kubGFiZWwudGV4dH08L3NwYW4+YClcbiAgICAgIH1cbiAgICAgIGlmIChpLnN1Yk1lbnUpIHtcbiAgICAgICAgbGkuYWRkQ2xhc3MoJ3N1Yi1tZW51LWJ1dHRvbicpXG4gICAgICAgIGxpLmFwcGVuZCgnPGkgY2xhc3M9XCJmYXMgZmEtY2FyZXQtcmlnaHRcIj48L2k+JylcbiAgICAgICAgY29uc3Qgc3ViID0gQ29DN0NvbnRleHRNZW51LkNyZWF0ZVNlY3Rpb24oaS5zdWJNZW51LCB7IHN1Yk1lbnU6IHRydWUgfSlcbiAgICAgICAgaWYgKHN1YikgbGkuYXBwZW5kKHN1YilcbiAgICAgIH1cbiAgICAgIHNlY3Rpb24uYXBwZW5kKGxpKVxuICAgIH0pXG4gICAgcmV0dXJuIHNlY3Rpb25cbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIEFjdG9yU2hlZXQsIENoYXRNZXNzYWdlLCBDT05TVCwgRGlhbG9nLCBGb3JtRGF0YSwgZm91bmRyeSwgZ2FtZSwgSG9va3MsIFJvbGwsIFRleHRFZGl0b3IsIHVpICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuaW1wb3J0IHsgUm9sbERpYWxvZyB9IGZyb20gJy4uLy4uL2FwcHMvcm9sbC1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctY2hhdC1tZXNzYWdlLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29udGVudExpbmtEaWFsb2cgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctY29udGVudC1saW5rLWRpYWxvZy5qcydcbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi8uLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uLy4uL2l0ZW1zL2l0ZW0uanMnXG5pbXBvcnQgeyBDb0M3TWVsZWVJbml0aWF0b3IgfSBmcm9tICcuLi8uLi9jaGF0L2NvbWJhdC9tZWxlZS1pbml0aWF0b3IuanMnXG5pbXBvcnQgeyBDb0M3UmFuZ2VJbml0aWF0b3IgfSBmcm9tICcuLi8uLi9jaGF0L3JhbmdlY29tYmF0LmpzJ1xuaW1wb3J0IHsgQ29DN0NvbkNoZWNrIH0gZnJvbSAnLi4vLi4vY2hhdC9jb25jaGVjay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIsIGlzQ3RybEtleSB9IGZyb20gJy4uLy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgQ29DN0xpbmsgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctbGluay5qcydcbmltcG9ydCB7IERhbWFnZUNhcmQgfSBmcm9tICcuLi8uLi9jaGF0L2NhcmRzL2RhbWFnZS5qcydcbmltcG9ydCBDb0M3QWN0aXZlRWZmZWN0IGZyb20gJy4uLy4uL2FjdGl2ZS1lZmZlY3QuanMnXG5pbXBvcnQgeyBDb0M3Q29udGV4dE1lbnUgfSBmcm9tICcuLi8uLi9jb250ZXh0LW1lbnUuanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgQWN0b3JTaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN0FjdG9yU2hlZXQgZXh0ZW5kcyBBY3RvclNoZWV0IHtcbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIHNoZWV0RGF0YS5zaG93SGlkZGVuRGV2TWVudSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2hpZGRlbmRldm1lbnUnKVxuXG4gICAgc2hlZXREYXRhLmNhbkRyYWdUb2tlbiA9ICEhdGhpcy50b2tlbiAmJiBnYW1lLnVzZXIuaXNHTVxuICAgIHNoZWV0RGF0YS5saW5rZWRBY3RvciA9IHRoaXMuYWN0b3IucHJvdG90eXBlVG9rZW4/LmFjdG9yTGluayA9PT0gdHJ1ZVxuICAgIHNoZWV0RGF0YS5pc1Rva2VuID0gdGhpcy5hY3Rvci5pc1Rva2VuXG4gICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlID0ge31cbiAgICBzaGVldERhdGEuc2tpbGxzID0ge31cbiAgICBzaGVldERhdGEuY29tYmF0U2tpbGxzID0ge31cbiAgICBzaGVldERhdGEud2VhcG9ucyA9IHt9XG4gICAgc2hlZXREYXRhLnJhbmdlV3BuID0gW11cbiAgICBzaGVldERhdGEubWVsZWVXcG4gPSBbXVxuICAgIHNoZWV0RGF0YS5hY3RvckZsYWdzID0ge31cblxuICAgIHNoZWV0RGF0YS5lZmZlY3RzID1cbiAgICAgIHRoaXMuYWN0b3IudHlwZSA9PT0gJ2NoYXJhY3RlcidcbiAgICAgICAgPyBDb0M3QWN0aXZlRWZmZWN0LnByZXBhcmVBY3RpdmVFZmZlY3RDYXRlZ29yaWVzKHRoaXMuYWN0b3IuZWZmZWN0cylcbiAgICAgICAgOiBDb0M3QWN0aXZlRWZmZWN0LnByZXBhcmVOUENBY3RpdmVFZmZlY3RDYXRlZ29yaWVzKHRoaXMuYWN0b3IuZWZmZWN0cylcblxuICAgIHNoZWV0RGF0YS5wZXJtaXNzaW9uTGltaXRlZCA9ICFnYW1lLnVzZXIuaXNHTSAmJiAodGhpcy5hY3Rvci5vd25lcnNoaXBbZ2FtZS51c2VyLmlkXSA/PyB0aGlzLmFjdG9yLm93bmVyc2hpcC5kZWZhdWx0KSA9PT0gQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5MSU1JVEVEXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHNoZWV0RGF0YS5hbGxvd1VubG9jayA9XG4gICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwbGF5ZXJVbmxvY2tTaGVldE1vZGUnKSA9PT0gJ2Fsd2F5cycgfHxcbiAgICAgIGdhbWUudXNlci5pc0dNIHx8XG4gICAgICAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncGxheWVyVW5sb2NrU2hlZXRNb2RlJykgPT09ICdjcmVhdGlvbicgJiZcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnY2hhckNyZWF0aW9uRW5hYmxlZCcpKVxuICAgIGlmIChcbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3BsYXllclVubG9ja1NoZWV0TW9kZScpID09PSAnY3JlYXRpb24nICYmXG4gICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdjaGFyQ3JlYXRpb25FbmFibGVkJylcbiAgICApIHtcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWQgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0aGlzLmFjdG9yLnR5cGUgIT09ICd2ZWhpY2xlJykge1xuICAgICAgaWYgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MgPSB7XG4gICAgICAgICAgc3RyOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnQ0hBUkFDLlNUUicsXG4gICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5TdHJlbmd0aCcsXG4gICAgICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb246IHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgc2hvcnQ6ICdDSEFSQUMuQ09OJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLkNvbnN0aXR1dGlvbicsXG4gICAgICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzaXo6IHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgc2hvcnQ6ICdDSEFSQUMuU0laJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLlNpemUnLFxuICAgICAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGV4OiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnQ0hBUkFDLkRFWCcsXG4gICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5EZXh0ZXJpdHknLFxuICAgICAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXBwOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnQ0hBUkFDLkFQUCcsXG4gICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5BcHBlYXJhbmNlJyxcbiAgICAgICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludDoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBzaG9ydDogJ0NIQVJBQy5JTlQnLFxuICAgICAgICAgICAgbGFiZWw6ICdDSEFSQUMuSW50ZWxsaWdlbmNlJyxcbiAgICAgICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvdzoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBzaG9ydDogJ0NIQVJBQy5QT1cnLFxuICAgICAgICAgICAgbGFiZWw6ICdDSEFSQUMuUG93ZXInLFxuICAgICAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWR1OiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnQ0hBUkFDLkVEVScsXG4gICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5FZHVjYXRpb24nLFxuICAgICAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzKSB7XG4gICAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzID0ge1xuICAgICAgICAgIGhwOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnSFAnLFxuICAgICAgICAgICAgbGFiZWw6ICdIaXQgcG9pbnRzJyxcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1wOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnSFAnLFxuICAgICAgICAgICAgbGFiZWw6ICdNYWdpYyBwb2ludHMnLFxuICAgICAgICAgICAgYXV0bzogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGNrOiB7IHZhbHVlOiBudWxsLCBzaG9ydDogJ0xDSycsIGxhYmVsOiAnTHVjaycgfSxcbiAgICAgICAgICBzYW46IHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgbWF4OiA5OSxcbiAgICAgICAgICAgIHNob3J0OiAnU0FOJyxcbiAgICAgICAgICAgIGxhYmVsOiAnU2FuaXR5JyxcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1vdjoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBzaG9ydDogJ01PVicsXG4gICAgICAgICAgICBsYWJlbDogJ01vdmVtZW50IHJhdGUnLFxuICAgICAgICAgICAgYXV0bzogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGI6IHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgc2hvcnQ6ICdEQicsXG4gICAgICAgICAgICBsYWJlbDogJ0RhbWFnZSBib251cycsXG4gICAgICAgICAgICBhdXRvOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBidWlsZDoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBzaG9ydDogJ0JMRCcsXG4gICAgICAgICAgICBsYWJlbDogJ0J1aWxkJyxcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFybW9yOiB7IHZhbHVlOiBudWxsLCBhdXRvOiBmYWxzZSB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmlvZ3JhcGh5KSB7XG4gICAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5iaW9ncmFwaHkgPSB7XG4gICAgICAgICAgcGVyc29uYWxEZXNjcmlwdGlvbjogeyB0eXBlOiAnc3RyaW5nJywgdmFsdWU6ICcnIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5pbmZvcykge1xuICAgICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uaW5mb3MgPSB7XG4gICAgICAgICAgb2NjdXBhdGlvbjogJycsXG4gICAgICAgICAgYWdlOiAnJyxcbiAgICAgICAgICBzZXg6ICcnLFxuICAgICAgICAgIHJlc2lkZW5jZTogJycsXG4gICAgICAgICAgYmlydGhwbGFjZTogJycsXG4gICAgICAgICAgYXJjaGV0eXBlOiAnJyxcbiAgICAgICAgICBvcmdhbml6YXRpb246ICcnLFxuICAgICAgICAgIHBsYXllcm5hbWU6ICcnXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MpIHtcbiAgICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmZsYWdzID0geyBsb2NrZWQ6IHRydWUsIG1hbnVhbENyZWRpdDogZmFsc2UgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5jcmVkaXQpIHtcbiAgICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmNyZWRpdCA9IHtcbiAgICAgICAgICBtb25ldGFyeVN5bWJvbDogbnVsbCxcbiAgICAgICAgICBtdWx0aXBsaWVyOiBudWxsLFxuICAgICAgICAgIHNwZW50OiBudWxsLFxuICAgICAgICAgIGFzc2V0c0RldGFpbHM6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXZlbG9wbWVudCkge1xuICAgICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGV2ZWxvcG1lbnQgPSB7XG4gICAgICAgICAgcGVyc29uYWw6IG51bGwsXG4gICAgICAgICAgb2NjdXBhdGlvbjogbnVsbCxcbiAgICAgICAgICBhcmNoZXR5cGU6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5iaW9ncmFwaHkpIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5iaW9ncmFwaHkgPSBbXVxuXG4gICAgICBzaGVldERhdGEucHVscFJ1bGVBcmNoZXR5cGUgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUFyY2hldHlwZScpXG4gICAgICBzaGVldERhdGEucHVscFJ1bGVPcmdhbml6YXRpb24gPSBnYW1lLnNldHRpbmdzLmdldChcbiAgICAgICAgJ0NvQzcnLFxuICAgICAgICAncHVscFJ1bGVPcmdhbml6YXRpb24nXG4gICAgICApXG4gICAgfVxuXG4gICAgc2hlZXREYXRhLmlzRGVhZCA9IHRoaXMuYWN0b3IuZGVhZFxuICAgIHNoZWV0RGF0YS5pc0R5aW5nID0gdGhpcy5hY3Rvci5keWluZ1xuXG4gICAgaWYgKHNoZWV0RGF0YS5pdGVtcykge1xuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHNoZWV0RGF0YS5pdGVtcykge1xuICAgICAgICAvLyBzaSBjJ2VzdCB1bmUgZm9ybXVsZSBldCBxdSdvbiBwZXV0IGwnZXZhbHVlclxuICAgICAgICAvLyBjZSBibG9jIGRldnJhaXQgZXRyZSBkw6lwbGFjw6kgZGFucyBsZSBibG9jIF91cGRhdGVGb3JtRGF0YVxuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcpIHtcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuRmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0pIHtcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuRmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmFjdG9yLnR5cGUgIT09ICdjaGFyYWN0ZXInKSB7XG4gICAgICAgICAgICBpZiAoaXNOYU4oTnVtYmVyKGl0ZW0uc3lzdGVtLnZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgbGV0IHZhbHVlID0gbnVsbFxuICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB7fVxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgICAgICAgICAgICBDT0M3LmZvcm11bGEuYWN0b3JzaGVldFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdAJykgJiYgdmFsdWUuc3RhcnRzV2l0aCgndGhpcy4nKSkge1xuICAgICAgICAgICAgICAgICAgcGFyc2VkW2tleS5zdWJzdHJpbmcoMSldID0gZm91bmRyeS51dGlscy5nZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuc3Vic3RyaW5nKDUpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAoXG4gICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUm9sbChpdGVtLnN5c3RlbS52YWx1ZSwgcGFyc2VkKS5ldmFsdWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICkudG90YWxcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvclVuYWJsZVRvUGFyc2VTa2lsbEZvcm11bGEnLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnN5c3RlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGxcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtVG9VcGRhdGUgPSB0aGlzLmFjdG9yLml0ZW1zLmdldChpdGVtLl9pZClcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXG4gICAgICAgICAgICAgICAgICBgW0NPQzddIChBY3Rvcjoke3RoaXMubmFtZX0pIEV2YWx1YXRpbmcgc2tpbGwgJHtpdGVtLm5hbWV9OiR7aXRlbS5zeXN0ZW0udmFsdWV9IHRvICR7dmFsdWV9YFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBhd2FpdCBpdGVtVG9VcGRhdGUudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICdzeXN0ZW0udmFsdWUnOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLmFjdG9yLml0ZW1zLmdldChpdGVtLl9pZClcbiAgICAgICAgICAgIGNvbnN0IHsgYmFzZSwgcmF3VmFsdWUsIHZhbHVlIH0gPSBza2lsbC5zeXN0ZW1cblxuICAgICAgICAgICAgLy8gQXNzdW1lIGZhbGxiYWNrIHZhbHVlcywgdXNlZnVsIGZvciBpbml0aWFsIHNldHVwIG9mIHNraWxsc1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0ucmF3VmFsdWUgPSByYXdWYWx1ZSB8fCB2YWx1ZSB8fCBiYXNlXG4gICAgICAgICAgICBpdGVtLnN5c3RlbS52YWx1ZSA9IHZhbHVlIHx8IGJhc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLmFjdG9yLml0ZW1zLmdldChpdGVtLl9pZClcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLmJhc2UgPSBhd2FpdCBza2lsbC5hc3luY0Jhc2UoKVxuXG4gICAgICAgICAgICBpZiAoaXRlbS5zeXN0ZW0udmFsdWUpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgcGFydCBvZiBtaWdyYXRpb24gb3IgZG9uZSBhdCBpbml0ICFcbiAgICAgICAgICAgICAgLy8gV2FzIGRvbmUgd2hlbiBza2lsbCB2YWx1ZSB3YXMgY2hhbmdlZCB0byBiYXNlICsgYWRqdXN0ZW1lbnRcbiAgICAgICAgICAgICAgY29uc3QgZXhwID0gaXRlbS5zeXN0ZW0uYWRqdXN0bWVudHM/LmV4cGVyaWVuY2VcbiAgICAgICAgICAgICAgICA/IHBhcnNlSW50KGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UpXG4gICAgICAgICAgICAgICAgOiAwXG4gICAgICAgICAgICAgIGxldCB1cGRhdGVkRXhwID0gZXhwICsgcGFyc2VJbnQoaXRlbS5zeXN0ZW0udmFsdWUpIC0gc2tpbGwudmFsdWVcbiAgICAgICAgICAgICAgaWYgKHVwZGF0ZWRFeHAgPD0gMCkgdXBkYXRlZEV4cCA9IG51bGxcbiAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFxuICAgICAgICAgICAgICAgIGBbQ09DN10gVXBkYXRpbmcgc2tpbGwgJHtza2lsbC5uYW1lfSBleHBlcmllbmNlLiBFeHBlcmllbmNlIG1pc3Npbmc6ICR7dXBkYXRlZEV4cH1gXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci51cGRhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBfaWQ6IGl0ZW0uX2lkLFxuICAgICAgICAgICAgICAgICAgJ3N5c3RlbS5hZGp1c3RtZW50cy5leHBlcmllbmNlJzogdXBkYXRlZEV4cCxcbiAgICAgICAgICAgICAgICAgICdzeXN0ZW0udmFsdWUnOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBpZiAoIWl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzKSBpdGVtLnN5c3RlbS5hZGp1c3RtZW50cyA9IHt9XG4gICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UgPSB1cGRhdGVkRXhwXG4gICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnJhd1ZhbHVlID0gc2tpbGwucmF3VmFsdWVcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0udmFsdWUgPSBza2lsbC52YWx1ZSAvLyBBQ1RJVkVfRUZGRUNUIG5lY2Vzc2FyeSB0byBhcHBseSBlZmZlY3RzXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpdGVtLnN5c3RlbS52YWx1ZSA9IHNraWxsLnZhbHVlIC8vIEFDVElWRV9FRkZFQ1QgbmVjZXNzYXJ5IHRvIGFwcGx5IGVmZmVjdHNcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0ucmF3VmFsdWUgPSBza2lsbC5yYXdWYWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsaXN0ID0gc2hlZXREYXRhLml0ZW1zQnlUeXBlW2l0ZW0udHlwZV1cbiAgICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgICAgbGlzdCA9IFtdXG4gICAgICAgICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlW2l0ZW0udHlwZV0gPSBsaXN0XG4gICAgICAgIH1cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pXG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgaXRlbVR5cGUgaW4gc2hlZXREYXRhLml0ZW1zQnlUeXBlKSB7XG4gICAgICAgIHNoZWV0RGF0YS5pdGVtc0J5VHlwZVtpdGVtVHlwZV0uc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICB9XG5cbiAgICAgIC8vIHJlZG9uZGFudCBhdmVjIG1hdHJpY2UgaXRlbWJ5dHlwZVxuICAgICAgc2hlZXREYXRhLnNraWxscyA9IHNoZWV0RGF0YS5pdGVtc1xuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbS50eXBlID09PSAnc2tpbGwnKVxuICAgICAgICAuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICAgIHNoZWV0RGF0YS5tZWxlZVNraWxscyA9IHNoZWV0RGF0YS5za2lsbHMuZmlsdGVyKFxuICAgICAgICBza2lsbCA9PlxuICAgICAgICAgIHNraWxsLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCA9PT0gdHJ1ZSAmJlxuICAgICAgICAgIHNraWxsLnN5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nID09PSB0cnVlXG4gICAgICApXG4gICAgICBzaGVldERhdGEucmFuZ2VTa2lsbHMgPSBzaGVldERhdGEuc2tpbGxzLmZpbHRlcihcbiAgICAgICAgc2tpbGwgPT5cbiAgICAgICAgICBza2lsbC5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQgPT09IHRydWUgJiZcbiAgICAgICAgICBza2lsbC5zeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtID09PSB0cnVlXG4gICAgICApXG5cbiAgICAgIGNvbnN0IGNidFNraWxscyA9IHNoZWV0RGF0YS5za2lsbHMuZmlsdGVyKFxuICAgICAgICBza2lsbCA9PiBza2lsbC5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQgPT09IHRydWVcbiAgICAgIClcbiAgICAgIGlmIChjYnRTa2lsbHMpIHtcbiAgICAgICAgZm9yIChjb25zdCBza2lsbCBvZiBjYnRTa2lsbHMpIHtcbiAgICAgICAgICBzaGVldERhdGEuY29tYmF0U2tpbGxzW3NraWxsLl9pZF0gPSBza2lsbFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHdlYXBvbnMgPSBzaGVldERhdGEuaXRlbXNCeVR5cGUud2VhcG9uXG5cbiAgICAgIGlmICh3ZWFwb25zKSB7XG4gICAgICAgIGZvciAoY29uc3Qgd2VhcG9uIG9mIHdlYXBvbnMpIHtcbiAgICAgICAgICB3ZWFwb24udXNlc0FsdGVybmF0ZVNraWxsID1cbiAgICAgICAgICAgIHdlYXBvbi5zeXN0ZW0ucHJvcGVydGllcy5hdXRvID09PSB0cnVlIHx8XG4gICAgICAgICAgICB3ZWFwb24uc3lzdGVtLnByb3BlcnRpZXMuYnJzdCA9PT0gdHJ1ZVxuICAgICAgICAgIGlmICghd2VhcG9uLnN5c3RlbS5hbW1vKSB3ZWFwb24uc3lzdGVtLmFtbW8gPSAwXG5cbiAgICAgICAgICB3ZWFwb24uc2tpbGxTZXQgPSB0cnVlXG4gICAgICAgICAgLy8gd2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLm5hbWUgPSAnJztcbiAgICAgICAgICAvLyB3ZWFwb24uc3lzdGVtLnNraWxsLm1haW4udmFsdWUgPSAwO1xuICAgICAgICAgIC8vIHdlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lID0gJyc7XG4gICAgICAgICAgLy8gd2VhcG9uLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LnZhbHVlID0gMDtcbiAgICAgICAgICBpZiAod2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLmlkID09PSAnJykge1xuICAgICAgICAgICAgLy8gVE9ETyA6IHNpIGwnSUQgbidlc3RzIHBhcyBkw6lmaW5pZSBtYWlzIHF1J3VuIG5vbSBhIMOpdMOpIGRvbm7DqSwgdXRpbGlzZXIgY2Ugbm9tIGV0IHRhbnRlciBkZSByZXRyb3V2ZXIgbGUgc2tpbGxcbiAgICAgICAgICAgIHdlYXBvbi5za2lsbFNldCA9IGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE8gOiBhdmFudCBkJ2Fzc2lnZXIgbGUgc2tpbGwgdsOpcmlmaWVyIHF1J2lsIGV4aXN0ZSB0b3Vqb3Vycy5cbiAgICAgICAgICAgIC8vIHNpIGlsIG4nZXhpc3RlIHBsdXMgaWwgZmF1dCBsZSByZXRyb3V2ZXIgb3UgcGFzc2VyIHNraWxsc2V0IGEgZmFsc2UuXG4gICAgICAgICAgICBpZiAoc2hlZXREYXRhLmNvbWJhdFNraWxsc1t3ZWFwb24uc3lzdGVtLnNraWxsLm1haW4uaWRdKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNraWxsID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQod2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLmlkKVxuICAgICAgICAgICAgICB3ZWFwb24uc3lzdGVtLnNraWxsLm1haW4ubmFtZSA9IHNraWxsLnN5c3RlbS5za2lsbE5hbWVcbiAgICAgICAgICAgICAgd2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLnZhbHVlID0gc2tpbGwudmFsdWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdlYXBvbi5za2lsbFNldCA9IGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3ZWFwb24uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQgIT09ICcnKSB7XG4gICAgICAgICAgICAgIGlmIChzaGVldERhdGEuY29tYmF0U2tpbGxzW3dlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZF0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lsbCA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgICAgICAgd2VhcG9uLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHdlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lID0gc2tpbGwuc3lzdGVtLnNraWxsTmFtZVxuICAgICAgICAgICAgICAgIHdlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi52YWx1ZSA9IHNraWxsLnZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3ZWFwb24uc3lzdGVtLl9wcm9wZXJ0aWVzID0gW11cbiAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LndlYXBvblByb3BlcnRpZXMpKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHt9XG4gICAgICAgICAgICBwcm9wZXJ0eS5pZCA9IGtleVxuICAgICAgICAgICAgcHJvcGVydHkubmFtZSA9IHZhbHVlXG4gICAgICAgICAgICBwcm9wZXJ0eS52YWx1ZSA9IHdlYXBvbi5zeXN0ZW0ucHJvcGVydGllc1trZXldID09PSB0cnVlXG4gICAgICAgICAgICB3ZWFwb24uc3lzdGVtLl9wcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2hlZXREYXRhLndlYXBvbnNbd2VhcG9uLl9pZF0gPSB3ZWFwb25cbiAgICAgICAgICBpZiAod2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHNoZWV0RGF0YS5yYW5nZVdwbi5wdXNoKHdlYXBvbilcbiAgICAgICAgICBlbHNlIHNoZWV0RGF0YS5tZWxlZVdwbi5wdXNoKHdlYXBvbilcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB0b2tlbiA9IHRoaXMudG9rZW5cbiAgICAgIHNoZWV0RGF0YS50b2tlbklkID0gdG9rZW5cbiAgICAgICAgPyBgJHt0b2tlbi5wYXJlbnQ/LmlkID8gdG9rZW4ucGFyZW50LmlkIDogJ1RPS0VOJ30uJHt0b2tlbi5pZH1gXG4gICAgICAgIDogbnVsbCAvLyBSRUZBQ1RPUklORyAoMilcblxuICAgICAgc2hlZXREYXRhLmhhc0VtcHR5VmFsdWVXaXRoRm9ybXVsYSA9IGZhbHNlXG4gICAgICBpZiAoc2hlZXREYXRhLmRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcykge1xuICAgICAgICBmb3IgKGNvbnN0IGNoYXJhY3RlcmlzdGljIG9mIE9iamVjdC52YWx1ZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcykpIHtcbiAgICAgICAgICBpZiAoIWNoYXJhY3RlcmlzdGljLnZhbHVlKSBjaGFyYWN0ZXJpc3RpYy5lZGl0YWJsZSA9IHRydWVcbiAgICAgICAgICBjaGFyYWN0ZXJpc3RpYy5oYXJkID0gTWF0aC5mbG9vcihjaGFyYWN0ZXJpc3RpYy52YWx1ZSAvIDIpXG4gICAgICAgICAgY2hhcmFjdGVyaXN0aWMuZXh0cmVtZSA9IE1hdGguZmxvb3IoY2hhcmFjdGVyaXN0aWMudmFsdWUgLyA1KVxuXG4gICAgICAgICAgLy8gSWYgbm8gdmFsdWUgJiYgbm8gZm9ybXVsYSBkb24ndCBkaXNwbGF5IGNoYXJhYy5cbiAgICAgICAgICBpZiAoIWNoYXJhY3RlcmlzdGljLnZhbHVlICYmICFjaGFyYWN0ZXJpc3RpYy5mb3JtdWxhKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXJpc3RpYy5kaXNwbGF5ID0gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMuZGlzcGxheSA9IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpZiBhbnkgY2hhcmFjdGVyaXN0aWMgaGFzIG5vIHZhbHVlIGJ1dCBoYXMgYSBmb3JtdWxhLlxuICAgICAgICAgIGlmICghY2hhcmFjdGVyaXN0aWMudmFsdWUgJiYgY2hhcmFjdGVyaXN0aWMuZm9ybXVsYSkge1xuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMuaGFzRW1wdHlWYWx1ZVdpdGhGb3JtdWxhID0gdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNoZWV0RGF0YS5oYXNFbXB0eVZhbHVlV2l0aEZvcm11bGEgPVxuICAgICAgICAgICAgc2hlZXREYXRhLmhhc0VtcHR5VmFsdWVXaXRoRm9ybXVsYSB8fFxuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMuaGFzRW1wdHlWYWx1ZVdpdGhGb3JtdWxhXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3IgY29tcGF0IHdpdGggcHJldmlvdXMgY2hhcmFjdGVycyB0ZXN0IGlmIGF1dG8gaXMgZGVmaW5pZWQsIGlmIG5vdCB3ZSBkZWZpbmUgaXRcbiAgICBpZiAoIVsndmVoaWNsZScsICdjb250YWluZXInXS5pbmNsdWRlcyh0aGlzLmFjdG9yLnR5cGUpKSB7XG4gICAgICBjb25zdCBhdXRvID0gdGhpcy5hY3Rvci5jaGVja1VuZGVmaW5lZEF1dG8oKVxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzaGVldERhdGEuZGF0YS5zeXN0ZW0sIGF1dG8pXG4gICAgfSBlbHNlIHtcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLmhwLmF1dG8gPSBmYWxzZVxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmF0dHJpYnMubXAuYXV0byA9IGZhbHNlXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5zYW4uYXV0byA9IGZhbHNlXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5tb3YuYXV0byA9IGZhbHNlXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5kYi5hdXRvID0gZmFsc2VcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLmF1dG8gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSA8IDApIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlID0gbnVsbFxuICAgIGlmIChzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUgPCAwKSBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUgPSBudWxsXG5cbiAgICBpZiAoIVsndmVoaWNsZSddLmluY2x1ZGVzKHRoaXMuYWN0b3IudHlwZSkpIHtcbiAgICAgIGlmIChzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmlvZ3JhcGh5IGluc3RhbmNlb2YgQXJyYXkgJiYgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmJpb2dyYXBoeS5sZW5ndGgpIHtcbiAgICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmJpb2dyYXBoeVswXS5pc0ZpcnN0ID0gdHJ1ZVxuICAgICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmlvZ3JhcGh5W3NoZWV0RGF0YS5kYXRhLnN5c3RlbS5iaW9ncmFwaHkubGVuZ3RoIC0gMV0uaXNMYXN0ID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUl0ZW1zID0gZmFsc2VcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzID0gZmFsc2VcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVNwZWxscyA9IGZhbHNlXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzID0gZmFsc2VcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVN0YXR1c2VzID0gZmFsc2VcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVdlYXBvbnMgPSBmYWxzZVxuXG4gICAgc2hlZXREYXRhLmhhc0NvbmRpdGlvbnMgPVxuICAgICAgdGhpcy5hY3Rvci5lZmZlY3RzLnNpemUgPiAwIHx8XG4gICAgICAodHlwZW9mIHRoaXMuYWN0b3Iuc3lzdGVtLmNvbmRpdGlvbnMgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuYWN0b3Iuc3lzdGVtLmNvbmRpdGlvbnMpLmZpbHRlcihcbiAgICAgICAgICBjb25kaXRpb24gPT4gdGhpcy5hY3Rvci5zeXN0ZW0uY29uZGl0aW9uc1tjb25kaXRpb25dLnZhbHVlXG4gICAgICAgICkubGVuZ3RoID4gMClcblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gIC8vIHN0YXRpYyBwYXJzZUZvcm11bGEgKGZvcm11bGEpIHtcbiAgLy8gICBsZXQgcGFyc2VkRm9ybXVsYSA9IGZvcm11bGFcbiAgLy8gICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LmZvcm11bGEuYWN0b3JzaGVldCkpIHtcbiAgLy8gICAgIHBhcnNlZEZvcm11bGEgPSBwYXJzZWRGb3JtdWxhLnJlcGxhY2Uoa2V5LCB2YWx1ZSlcbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHBhcnNlZEZvcm11bGFcbiAgLy8gfVxuXG4gIGdldCB0b2tlbktleSAoKSB7XG4gICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignREVQUkVDQVRFRCBTSE9VTEQgTk9UIEhBUFBFTiEnKVxuICAgIHRocm93IG5ldyBFcnJvcignYmFzZS5qcyBnZXQgdG9rZW5LZXkoKTogREVQUkVDQVRFRCBTSE9VTEQgTk9UIEhBUFBFTiEnKVxuICAgIC8vIGlmKCB0aGlzLnRva2VuKSByZXR1cm4gYCR7dGhpcy50b2tlbi5zY2VuZT8uX2lkP3RoaXMudG9rZW4uc2NlbmUuX2lkOidUT0tFTid9LiR7dGhpcy50b2tlbi5kYXRhLl9pZH1gOyAgLy9SRUZBQ1RPUklORyAoMilcbiAgICAvLyByZXR1cm4gdGhpcy5hY3Rvci5pZDtcbiAgfVxuXG4gIG9uQ2xvc2VTaGVldCAoKSB7XG4gICAgLy8gdGhpcy5hY3Rvci5sb2NrZWQgPSB0cnVlO1xuICB9XG5cbiAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvKipcbiAgICogQWN0aXZhdGUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBwcmVwYXJlZCBzaGVldCBIVE1MXG4gICAqIEBwYXJhbSBodG1sIHtIVE1MfSAgIFRoZSBwcmVwYXJlZCBIVE1MIG9iamVjdCByZWFkeSB0byBiZSByZW5kZXJlZCBpbnRvIHRoZSBET01cbiAgICovXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWwuZmluZCgnLnNlY3Rpb24taGVhZGVyJykuY2xpY2sodGhpcy5fb25TZWN0aW9uSGVhZGVyLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaXRlbXMtaGVhZGVyJykuY2xpY2sodGhpcy5fb25JdGVtSGVhZGVyLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaW52ZW50b3J5LWhlYWRlcicpLmNsaWNrKHRoaXMuX29uSW52ZW50b3J5SGVhZGVyLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcucmVhZC1vbmx5JykuZGJsY2xpY2sodGhpcy5fdG9nZ2xlUmVhZE9ubHkuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5hZGQtYW1tbycpLmNsaWNrKHRoaXMuX29uQWRkQW1vLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcucmVsb2FkLXdlYXBvbicpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uUmVsb2FkV2VhcG9uKGV2ZW50KSlcbiAgICBodG1sLmZpbmQoJy5yZWxvYWQtd2VhcG9uJykub24oJ2NvbnRleHRtZW51JywgZXZlbnQgPT4gdGhpcy5fb25SZWxvYWRXZWFwb24oZXZlbnQpKVxuXG4gICAgLy8gT3duZXIgT25seSBMaXN0ZW5lcnNcbiAgICBpZiAodGhpcy5hY3Rvci5pc093bmVyICYmICEodGhpcy5hY3Rvci5jb21wZW5kaXVtPy5sb2NrZWQgPz8gZmFsc2UpKSB7XG4gICAgICBodG1sLmZpbmQoJy5sb2NrJykuY2xpY2sodGhpcy5fb25Mb2NrQ2xpY2tlZC5iaW5kKHRoaXMpKVxuICAgICAgaHRtbC5maW5kKCcuZmxhZycpLmNsaWNrKHRoaXMuX29uRmxhZ0NsaWNrZWQuYmluZCh0aGlzKSlcbiAgICAgIGh0bWwuZmluZCgnLmZvcm11bGEnKS5jbGljayh0aGlzLl9vbkZvcm11bGFDbGlja2VkLmJpbmQodGhpcykpXG4gICAgICBodG1sLmZpbmQoJy5hdXRvLXRvZ2dsZScpLmNsaWNrKHRoaXMuX29uQXV0b1RvZ2dsZS5iaW5kKHRoaXMpKVxuICAgIH1cblxuICAgIC8vIE93bmVyIE9ubHksIG5vdCBhdmFpbGFibGUgZnJvbSBjb21wZW5kaXVtXG4gICAgaWYgKHRoaXMuYWN0b3IuaXNPd25lciAmJiB0eXBlb2YgdGhpcy5hY3Rvci5jb21wZW5kaXVtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZUNvbnRleHRNZW51cycpKSB7XG4gICAgICAgIGlmICghdGhpcy5tZW51cykgdGhpcy5tZW51cyA9IFtdXG5cbiAgICAgICAgY29uc3Qgcm9sbE1lbnUgPSB7XG4gICAgICAgICAgaWQ6ICdza2lsbC1yb2xsJyxcbiAgICAgICAgICBjbGFzc2VzOiAncm9sbC1tZW51JyxcbiAgICAgICAgICBzZWN0aW9uOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzZXM6ICdtYWluJyxcbiAgICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3JvbGwnLCBsYWJlbDogJ1JvbGwnIH0sXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdvcHBvc2VkLXJvbGwnLCBsYWJlbDogJ09wcG9zZWQgcm9sbCcgfSxcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ2NvbWJpbmVkLXJvbGwnLCBsYWJlbDogJ0NvbWJpbmVkIHJvbGwnIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2xhc3NlczogJ2tlZXBlcicsXG4gICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdnbScsXG4gICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbGFiZWw6IHsgaWNvbjogJ2ZhcyBmYS1saW5rJywgdGV4dDogJ0xpbmsnIH0sXG4gICAgICAgICAgICAgICAgICBzdWJNZW51OiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgeyBhY3Rpb246ICdsaW5rLXRvb2wnLCBsYWJlbDogJ09wZW4gaW4gbGluayB0b29sJyB9LFxuICAgICAgICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnc2VuZC1jaGF0JywgbGFiZWw6ICdTZW5kIHRvIGNoYXQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgeyBhY3Rpb246ICdjb3B5LXRvLWNsaXBib2FyZCcsIGxhYmVsOiAnQ29weSB0byBjbGlwLWJvYXJkJyB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAncmVxdWVzdC1yb2xsJywgbGFiZWw6ICdSZXF1ZXN0IHJvbGwnIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNhbk1lbnUgPSB7XG4gICAgICAgICAgaWQ6ICdzYW4tcm9sbCcsXG4gICAgICAgICAgY2xhc3NlczogJ3JvbGwtbWVudScsXG4gICAgICAgICAgc2VjdGlvbjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjbGFzc2VzOiAnbWFpbicsXG4gICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdlbmNvdW50ZXInLCBsYWJlbDogJ0VuY291bnRlcicgfSxcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3JvbGwnLCBsYWJlbDogJ1JvbGwnIH0sXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdvcHBvc2VkLXJvbGwnLCBsYWJlbDogJ09wcG9zZWQgcm9sbCcgfSxcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ2NvbWJpbmVkLXJvbGwnLCBsYWJlbDogJ0NvbWJpbmVkIHJvbGwnIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2xhc3NlczogJ2tlZXBlcicsXG4gICAgICAgICAgICAgIHZpc2liaWxpdHk6ICd0cnVzdGVkJyxcbiAgICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3JlcXVlc3Qtcm9sbCcsIGxhYmVsOiAnUmVxdWVzdCByb2xsJyB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiB7IGljb246ICdmYXMgZmEtbGluaycsIHRleHQ6ICdMaW5rJyB9LFxuICAgICAgICAgICAgICAgICAgc3ViTWVudToge1xuICAgICAgICAgICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnbGluay10b29sJywgbGFiZWw6ICdPcGVuIGluIGxpbmsgdG9vbCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3NlbmQtY2hhdCcsIGxhYmVsOiAnU2VuZCB0byBjaGF0JyB9LFxuICAgICAgICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnY29weS10by1jbGlwYm9hcmQnLCBsYWJlbDogJ0NvcHkgdG8gY2xpcC1ib2FyZCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ2xpbmstZW5jb3VudGVyJywgbGFiZWw6ICdFbmNvdW50ZXInIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJvbGxDb250ZXh0TWVudSA9IG5ldyBDb0M3Q29udGV4dE1lbnUoKVxuICAgICAgICByb2xsQ29udGV4dE1lbnUuYmluZChyb2xsTWVudSwgaHRtbCwgdGhpcy5fb25Db250ZXh0TWVudUNsaWNrLmJpbmQodGhpcykpXG4gICAgICAgIHRoaXMubWVudXMucHVzaChyb2xsQ29udGV4dE1lbnUpXG5cbiAgICAgICAgY29uc3Qgc2FuQ29udGV4dE1lbnUgPSBuZXcgQ29DN0NvbnRleHRNZW51KClcbiAgICAgICAgc2FuQ29udGV4dE1lbnUuYmluZChzYW5NZW51LCBodG1sLCB0aGlzLl9vbkNvbnRleHRNZW51Q2xpY2suYmluZCh0aGlzKSlcbiAgICAgICAgdGhpcy5tZW51cy5wdXNoKHNhbkNvbnRleHRNZW51KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHRtbFxuICAgICAgICAgIC5maW5kKCcuY2hhcmFjdGVyaXN0aWMtbGFiZWwnKVxuICAgICAgICAgIC5jb250ZXh0bWVudSh0aGlzLl9vbk9wcG9zZWRSb2xsLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWxcbiAgICAgICAgICAuZmluZCgnLnNraWxsLW5hbWUucm9sbGFibGUnKVxuICAgICAgICAgIC5jb250ZXh0bWVudSh0aGlzLl9vbk9wcG9zZWRSb2xsLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWxcbiAgICAgICAgICAuZmluZCgnLmF0dHJpYnV0ZS1sYWJlbC5yb2xsYWJsZScpXG4gICAgICAgICAgLmNvbnRleHRtZW51KHRoaXMuX29uT3Bwb3NlZFJvbGwuYmluZCh0aGlzKSlcbiAgICAgIH1cblxuICAgICAgLy8gY29udGV4dCBtZW51IGJpbmRcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5jaGFyYWN0ZXJpc3RpYy1sYWJlbCcpXG4gICAgICAgIC5jbGljayh0aGlzLl9vblJvbGxDaGFyYWN0ZXJpdGljVGVzdC5iaW5kKHRoaXMpKVxuICAgICAgaHRtbC5maW5kKCcuc2tpbGwtbmFtZS5yb2xsYWJsZScpLmNsaWNrKHRoaXMuX29uUm9sbFNraWxsVGVzdC5iaW5kKHRoaXMpKVxuICAgICAgaHRtbC5maW5kKCcuc2tpbGwtaW1hZ2UnKS5jbGljayh0aGlzLl9vblJvbGxTa2lsbFRlc3QuYmluZCh0aGlzKSlcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5hdHRyaWJ1dGUtbGFiZWwucm9sbGFibGUnKVxuICAgICAgICAuY2xpY2sodGhpcy5fb25Sb2xsQXR0cmliVGVzdC5iaW5kKHRoaXMpKVxuXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcudG9rZW4tZHJhZy1oYW5kbGUnKVxuICAgICAgICAub24oJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1Rva2VuU3RhcnQuYmluZCh0aGlzKSlcblxuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnLmNoYXJhY3RlcmlzdGljLWxhYmVsJylcbiAgICAgICAgLm9uKCdkcmFnc3RhcnQnLCBldmVudCA9PiB0aGlzLl9vbkRyYWdDaGFyYWN0ZXJpc3RpYyhldmVudCkpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuYXR0cmlidXRlLWxhYmVsJylcbiAgICAgICAgLm9uKCdkcmFnc3RhcnQnLCBldmVudCA9PiB0aGlzLl9vbkRyYWdBdHRyaWJ1dGUoZXZlbnQpKVxuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnLnNhbi1jaGVjaycpXG4gICAgICAgIC5vbignZHJhZ3N0YXJ0JywgZXZlbnQgPT4gdGhpcy5fb25EcmFnU2FuQ2hlY2soZXZlbnQpKVxuXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcud2VhcG9uLW5hbWUucm9sbGFibGUnKVxuICAgICAgICAuY29udGV4dG1lbnUodGhpcy5fb25PcHBvc2VkUm9sbC5iaW5kKHRoaXMpKVxuXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcucm9sbC1jaGFyYWN0ZXJpdGljcycpXG4gICAgICAgIC5jbGljayh0aGlzLl9vblJvbGxDaGFyYWN0ZXJpdGljc1ZhbHVlLmJpbmQodGhpcykpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuYXZlcmFnZS1jaGFyYWN0ZXJpdGljcycpXG4gICAgICAgIC5jbGljayh0aGlzLl9vbkF2ZXJhZ2VDaGFyYWN0ZXJpdGljc1ZhbHVlLmJpbmQodGhpcykpXG4gICAgICBodG1sLmZpbmQoJy50b2dnbGUtc3dpdGNoJykuY2xpY2sodGhpcy5fb25Ub2dnbGUuYmluZCh0aGlzKSlcblxuICAgICAgLy8gU3RhdHVzIG1vbml0b3JcbiAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSB8fCBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzdGF0dXNQbGF5ZXJFZGl0YWJsZScpKSB7XG4gICAgICAgIGh0bWwuZmluZCgnLnJlc2V0LWNvdW50ZXInKS5jbGljayh0aGlzLl9vblJlc2V0Q291bnRlci5iaW5kKHRoaXMpKVxuICAgICAgICBodG1sXG4gICAgICAgICAgLmZpbmQoJy5jb25kaXRpb24tbW9uaXRvcicpXG4gICAgICAgICAgLmNsaWNrKHRoaXMuX29uQ29uZGl0aW9uVG9nZ2xlLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWwuZmluZCgnLmlzLWR5aW5nJykuY2xpY2sodGhpcy5oZWFsLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWwuZmluZCgnLmlzLWRlYWQnKS5jbGljayh0aGlzLnJldml2ZS5iaW5kKHRoaXMpKVxuICAgICAgfVxuXG4gICAgICBodG1sLmZpbmQoJy5keWluZy1jaGVjaycpLmNsaWNrKHRoaXMuY2hlY2tGb3JEZWF0aC5iaW5kKHRoaXMpKVxuXG4gICAgICBodG1sLmZpbmQoJy5pdGVtIC5pdGVtLWltYWdlJykuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25JdGVtUm9sbChldmVudCkpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcud2VhcG9uLW5hbWUucm9sbGFibGUnKVxuICAgICAgICAuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25XZWFwb25Sb2xsKGV2ZW50KSlcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5pdGVtLW5hbWUuZWZmZWN0LW5hbWUnKVxuICAgICAgICAuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25FZmZlY3QoZXZlbnQpKVxuICAgICAgLy8gaHRtbFxuICAgICAgLy8gICAuZmluZCgnLml0ZW0tbmFtZS5lZmZlY3QtbmFtZScpXG4gICAgICAvLyAgIC5rZXlkb3duKChldmVudCkgPT4ge1xuICAgICAgLy8gICAgIGlmIChpc0N0cmxLZXkoZXZlbnQpKSB7XG4gICAgICAvLyAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3BvaW50ZXInKVxuICAgICAgLy8gICAgIH1cbiAgICAgIC8vICAgfSlcbiAgICAgIC8vIGh0bWxcbiAgICAgIC8vICAgLmZpbmQoJy5pdGVtLW5hbWUuZWZmZWN0LW5hbWUnKVxuICAgICAgLy8gICAua2V5ZG93bigoZXZlbnQpID0+IHtcbiAgICAgIC8vICAgICBpZiAoaXNDdHJsS2V5KGV2ZW50KSkge1xuICAgICAgLy8gICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdwb2ludGVyJylcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyAgIH0pXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcud2VhcG9uLXNraWxsLnJvbGxhYmxlJylcbiAgICAgICAgLmNsaWNrKGFzeW5jIGV2ZW50ID0+IHRoaXMuX29uV2VhcG9uU2tpbGxSb2xsKGV2ZW50KSlcbiAgICAgIGh0bWwub24oJ2NsaWNrJywgJy53ZWFwb24tZGFtYWdlJywgdGhpcy5fb25XZWFwb25EYW1hZ2UuYmluZCh0aGlzKSlcblxuICAgICAgY29uc3Qgd2hlZWxJbnB1dHMgPSBodG1sLmZpbmQoJy5hdHRyaWJ1dGUtdmFsdWUnKVxuICAgICAgZm9yIChjb25zdCB3aGVlbElucHV0IG9mIHdoZWVsSW5wdXRzKSB7XG4gICAgICAgIHdoZWVsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBldmVudCA9PiB0aGlzLl9vbldoZWVsKGV2ZW50KSwge1xuICAgICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFdmVyeXRoaW5nIGJlbG93IGhlcmUgaXMgb25seSBuZWVkZWQgaWYgdGhlIHNoZWV0IGlzIGVkaXRhYmxlXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZWRpdGFibGUpIHJldHVyblxuXG4gICAgaHRtbC5maW5kKCcuc2hvdy1kZXRhaWwnKS5jbGljayhldmVudCA9PiB0aGlzLl9vbkl0ZW1TdW1tYXJ5KGV2ZW50KSlcbiAgICBodG1sLmZpbmQoJy5pdGVtLXBvcHVwJykuY2xpY2sodGhpcy5fb25JdGVtUG9wdXAuYmluZCh0aGlzKSlcblxuICAgIC8vIFVwZGF0ZSBJbnZlbnRvcnkgSXRlbVxuICAgIGh0bWwuZmluZCgnLnNob3ctZGV0YWlsJykuZGJsY2xpY2soZXZlbnQgPT4gdGhpcy5fb25SZW5kZXJJdGVtU2hlZXQoZXZlbnQpKVxuICAgIGh0bWwuZmluZCgnLml0ZW0tZWRpdCcpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uUmVuZGVySXRlbVNoZWV0KGV2ZW50KSlcblxuICAgIC8vIERlbGV0ZSBJbnZlbnRvcnkgSXRlbVxuICAgIGh0bWwuZmluZCgnLml0ZW0tZGVsZXRlJykuY2xpY2soYXN5bmMgZXYgPT4ge1xuICAgICAgY29uc3QgbGkgPSAkKGV2LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5pdGVtJylcbiAgICAgIGNvbnN0IGl0ZW1Ub0RlbGV0ZSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGxpLmRhdGEoJ2l0ZW1JZCcpLCB7XG4gICAgICAgIHN0cmljdDogdHJ1ZVxuICAgICAgfSlcbiAgICAgIGF3YWl0IGl0ZW1Ub0RlbGV0ZS5kZWxldGUoKVxuICAgICAgbGkuc2xpZGVVcCgyMDAsICgpID0+IHRoaXMucmVuZGVyKGZhbHNlKSlcbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcuYWRkLWl0ZW0nKS5jbGljayhldiA9PiB7XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgc3dpdGNoIChldi5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudHlwZSkge1xuICAgICAgICBjYXNlICdib29rJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5Qm9vayhldilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdpdGVtJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5SXRlbShldilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdza2lsbCc6XG4gICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eVNraWxsKGV2KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3NwZWxsJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5U3BlbGwoZXYpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnd2VhcG9uJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgICAgICAgICAgIGlmIChldi5jdXJyZW50VGFyZ2V0LmRhdGFzZXQubWVsZWUpIHtcbiAgICAgICAgICAgICAgcHJvcGVydGllcy5tZWxlZSA9IHRydWVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYuY3VycmVudFRhcmdldC5kYXRhc2V0LnJuZ2QpIHtcbiAgICAgICAgICAgICAgcHJvcGVydGllcy5ybmdkID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eVdlYXBvbihldiwgcHJvcGVydGllcylcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gaHRtbC5maW5kKCcuY2xlYW4tc2tpbGwtbGlzdCcpLmNsaWNrKCgpID0+IHtcbiAgICAvLyAgIHRoaXMuYWN0b3IuY2xlYW5Ta2lsbHMoKVxuICAgIC8vIH0pXG5cbiAgICBodG1sLmZpbmQoJy5pdGVtLXRyYWRlJykuY2xpY2sodGhpcy5fb25UcmFkZUl0ZW0uYmluZCh0aGlzKSlcblxuICAgIGh0bWwuZmluZCgnLmFkZC1uZXctc2VjdGlvbicpLmNsaWNrKCgpID0+IHtcbiAgICAgIHRoaXMuYWN0b3IuY3JlYXRlQmlvU2VjdGlvbigpXG4gICAgICB0aGlzLnJlbmRlcigpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmRlbGV0ZS1zZWN0aW9uJykuY2xpY2soZXYgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChcbiAgICAgICAgZXYuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuYmlvLXNlY3Rpb24nKS5kYXRhc2V0LmluZGV4XG4gICAgICApXG4gICAgICB0aGlzLmFjdG9yLmRlbGV0ZUJpb1NlY3Rpb24oaW5kZXgpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLm1vdmUtc2VjdGlvbi11cCcpLmNsaWNrKGV2ID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoXG4gICAgICAgIGV2LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmJpby1zZWN0aW9uJykuZGF0YXNldC5pbmRleFxuICAgICAgKVxuICAgICAgdGhpcy5hY3Rvci5tb3ZlQmlvU2VjdGlvblVwKGluZGV4KVxuICAgIH0pXG5cbiAgICBodG1sLmZpbmQoJy5tb3ZlLXNlY3Rpb24tZG93bicpLmNsaWNrKGV2ID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoXG4gICAgICAgIGV2LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmJpby1zZWN0aW9uJykuZGF0YXNldC5pbmRleFxuICAgICAgKVxuICAgICAgdGhpcy5hY3Rvci5tb3ZlQmlvU2VjdGlvbkRvd24oaW5kZXgpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmRldmVsb3BtZW50LWZsYWcnKS5kYmxjbGljayhldiA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQoXG4gICAgICAgIGV2LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgKVxuICAgICAgaXRlbS50b2dnbGVJdGVtRmxhZygnZGV2ZWxvcGVtZW50JylcbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcub2NjdXBhdGlvbi1za2lsbC1mbGFnLmNsaWNrYWJsZScpLmNsaWNrKGV2ID0+IHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgZXYuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuaXRlbUlkXG4gICAgICApXG4gICAgICBpdGVtLnRvZ2dsZUl0ZW1GbGFnKCdvY2N1cGF0aW9uJylcbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcuYXJjaGV0eXBlLXNraWxsLWZsYWcuY2xpY2thYmxlJykuY2xpY2soZXYgPT4ge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICBldi5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJykuZGF0YXNldC5pdGVtSWRcbiAgICAgIClcbiAgICAgIGl0ZW0udG9nZ2xlSXRlbUZsYWcoJ2FyY2hldHlwZScpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLnNraWxsLWRldmVsb3BlbWVudCcpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuYWN0b3IuZGV2ZWxvcGVtZW50UGhhc2UoZXZlbnQuc2hpZnRLZXkpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmx1Y2stZGV2ZWxvcG1lbnQnKS5jbGljayhldmVudCA9PiB7XG4gICAgICBpZiAoIWV2ZW50LmRldGFpbCB8fCBldmVudC5kZXRhaWwgPT09IDEpIHtcbiAgICAgICAgdGhpcy5hY3Rvci5kZXZlbG9wTHVjayhldmVudC5zaGlmdEtleSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcuY2xlYXJfY29uZGl0aW9ucycpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5hY3Rvci5zeXN0ZW0uY29uZGl0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgZGlzYWJsZSA9IHt9XG4gICAgICAgIGZvciAoY29uc3QgY29uZGl0aW9uIGluIHRoaXMuYWN0b3Iuc3lzdGVtLmNvbmRpdGlvbnMpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5hY3Rvci5zeXN0ZW0uY29uZGl0aW9uc1tjb25kaXRpb25dLnZhbHVlICE9PVxuICAgICAgICAgICAgICAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgdGhpcy5hY3Rvci5zeXN0ZW0uY29uZGl0aW9uc1tjb25kaXRpb25dLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBkaXNhYmxlW2BzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbn0udmFsdWVgXSA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhkaXNhYmxlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5hY3Rvci51cGRhdGUoZGlzYWJsZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZWZmZWN0cyA9IHRoaXMuYWN0b3IuZWZmZWN0cy5tYXAoZWZmZWN0ID0+IGVmZmVjdC5pZClcbiAgICAgIGlmIChlZmZlY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5hY3Rvci5kZWxldGVFbWJlZGRlZERvY3VtZW50cygnQWN0aXZlRWZmZWN0JywgZWZmZWN0cylcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB1c2VkIGZvciBkZXYgcHVycG9zZXMgb25seSAhXG4gICAgICovXG4gICAgaHRtbC5maW5kKCcudGVzdC10cmlnZ2VyJykuY2xpY2soYXN5bmMgZXZlbnQgPT4ge1xuICAgICAgaWYgKCFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdoaWRkZW5kZXZtZW51JykpIHJldHVybiBudWxsXG4gICAgICAvLyBhd2FpdCBJdGVtLmNyZWF0ZSh7XG4gICAgICAvLyAgIG5hbWU6ICdfX0NvQzdJbnRlcm5hbEl0ZW1fXycsXG4gICAgICAvLyAgIHR5cGU6ICdpdGVtJ1xuICAgICAgLy8gfSlcbiAgICAgIC8vIGNvbnN0IGVmZmVjdHMgPSBhd2FpdCBpdGVtLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdBY3RpdmVFZmZlY3QnLCBbXG4gICAgICAvLyAgIHtcbiAgICAgIC8vICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVmZmVjdE5ldycpLFxuICAgICAgLy8gICAgIGljb246ICdpY29ucy9zdmcvYXVyYS5zdmcnLFxuICAgICAgLy8gICAgIG9yaWdpbjogbnVsbCxcbiAgICAgIC8vICAgICAnZHVyYXRpb24ucm91bmRzJzogdW5kZWZpbmVkLFxuICAgICAgLy8gICAgIGRpc2FibGVkOiB0cnVlXG4gICAgICAvLyAgIH1cbiAgICAgIC8vIF0pXG4gICAgICAvLyBjb25zdCBlZmZlY3QgPSBlZmZlY3RzWzBdXG4gICAgICAvLyBhd2FpdCBlZmZlY3Quc2hlZXQucmVuZGVyKHRydWUpXG4gICAgICAvLyB1aS5ub3RpZmljYXRpb25zLmluZm8oICdlZmZlY3QgY3JlYXRlZCAhJylcbiAgICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygnZWZmZWN0IGNyZWF0ZWQgIScpXG4gICAgfSlcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuc2tpbGwtbmFtZS5yb2xsYWJsZScpXG4gICAgICAubW91c2VlbnRlcih0aGlzLnRvb2xUaXBTa2lsbEVudGVyLmJpbmQodGhpcykpXG4gICAgICAubW91c2VsZWF2ZShnYW1lLkNvQzdUb29sdGlwcy50b29sVGlwTGVhdmUuYmluZCh0aGlzKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmNoYXJhY3RlcmlzdGljLWxhYmVsJylcbiAgICAgIC5tb3VzZWVudGVyKHRoaXMudG9vbFRpcENoYXJhY3RlcmlzdGljRW50ZXIuYmluZCh0aGlzKSlcbiAgICAgIC5tb3VzZWxlYXZlKGdhbWUuQ29DN1Rvb2x0aXBzLnRvb2xUaXBMZWF2ZS5iaW5kKHRoaXMpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuYXR0cmlidXRlLWxhYmVsLnJvbGxhYmxlJylcbiAgICAgIC5tb3VzZWVudGVyKHRoaXMudG9vbFRpcEF0dHJpYnV0ZUVudGVyLmJpbmQodGhpcykpXG4gICAgICAubW91c2VsZWF2ZShnYW1lLkNvQzdUb29sdGlwcy50b29sVGlwTGVhdmUuYmluZCh0aGlzKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmF1dG8tdG9nZ2xlJylcbiAgICAgIC5tb3VzZWVudGVyKHRoaXMudG9vbFRpcEF1dG9FbnRlci5iaW5kKHRoaXMpKVxuICAgICAgLm1vdXNlbGVhdmUoZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcExlYXZlLmJpbmQodGhpcykpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5pdGVtLWNvbnRyb2wuZGV2ZWxvcG1lbnQtZmxhZycpXG4gICAgICAubW91c2VlbnRlcih0aGlzLnRvb2xUaXBGbGFnRm9yRGV2ZWxvcG1lbnQuYmluZCh0aGlzKSlcbiAgICAgIC5tb3VzZWxlYXZlKGdhbWUuQ29DN1Rvb2x0aXBzLnRvb2xUaXBMZWF2ZS5iaW5kKHRoaXMpKVxuXG4gICAgLy8gQWN0aXZlIEVmZmVjdHNcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmVmZmVjdC1jb250cm9sJylcbiAgICAgIC5jbGljayhldiA9PiBDb0M3QWN0aXZlRWZmZWN0Lm9uTWFuYWdlQWN0aXZlRWZmZWN0KGV2LCB0aGlzLmFjdG9yKSlcbiAgfVxuXG4gIHRvb2xUaXBTa2lsbEVudGVyIChldmVudCkge1xuICAgIGNvbnN0IGRlbGF5ID0gcGFyc2VJbnQoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndG9vbFRpcERlbGF5JykpXG4gICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzXG4gICAgICBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICBnYW1lLkNvQzdUb29sdGlwcy50b29sVGlwVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGlzQ29tYmF0ID0gZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyLmNsYXNzTGlzdD8uY29udGFpbnMoXG4gICAgICAgICAgICAnY29tYmF0J1xuICAgICAgICAgIClcbiAgICAgICAgICBjb25zdCBpdGVtID0gZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyLmNsb3Nlc3QoJy5pdGVtJylcbiAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zdCBza2lsbElkID0gaXRlbS5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgICAgIGNvbnN0IHNraWxsID0gc2hlZXQuYWN0b3IuaXRlbXMuZ2V0KHNraWxsSWQpXG4gICAgICAgICAgICBsZXQgdG9vbFRpcCA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgIGlzQ29tYmF0ID8gJ0NvQzcuVG9vbFRpcENvbWJhdCcgOiAnQ29DNy5Ub29sVGlwU2tpbGwnLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2tpbGw6IHNraWxsLm5hbWUsXG4gICAgICAgICAgICAgICAgcmVndWxhcjogc2tpbGwudmFsdWUsXG4gICAgICAgICAgICAgICAgaGFyZDogTWF0aC5mbG9vcihza2lsbC52YWx1ZSAvIDIpLFxuICAgICAgICAgICAgICAgIGV4dHJlbWU6IE1hdGguZmxvb3Ioc2tpbGwudmFsdWUgLyA1KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgICAgICAgdG9vbFRpcCA9XG4gICAgICAgICAgICAgICAgdG9vbFRpcCArXG4gICAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ub29sVGlwS2VlcGVyU2tpbGwnLCB7XG4gICAgICAgICAgICAgICAgICBvdGhlcjpcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc3RhbmJ5R01Sb2xscycpICYmXG4gICAgICAgICAgICAgICAgICAgIHNoZWV0LmFjdG9yLmhhc1BsYXllck93bmVyXG4gICAgICAgICAgICAgICAgICAgICAgPyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBLZWVwZXJTdGFuZGJ5U2tpbGwnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzaGVldC5hY3Rvci5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdhbWUuQ29DN1Rvb2x0aXBzLmRpc3BsYXlUb29sVGlwKHRvb2xUaXApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBkZWxheSlcbiAgICB9XG4gIH1cblxuICB0b29sVGlwQ2hhcmFjdGVyaXN0aWNFbnRlciAoZXZlbnQpIHtcbiAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3Rvb2xUaXBEZWxheScpKVxuICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgIGNvbnN0IHNoZWV0ID0gdGhpc1xuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3ZlciAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBjaGFyID0gZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyLmNsb3Nlc3QoJy5jaGFyLWJveCcpXG4gICAgICAgICAgaWYgKHR5cGVvZiBjaGFyICE9PSAndW5kZWZpbmVkJyAmJiAhIWNoYXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXJJZCA9IGNoYXIuZGF0YXNldC5jaGFyYWN0ZXJpc3RpY1xuICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyaXN0aWMgPSBzaGVldC5hY3Rvci5jaGFyYWN0ZXJpc3RpY3NbY2hhcklkXVxuICAgICAgICAgICAgbGV0IHRvb2xUaXAgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBTa2lsbCcsIHtcbiAgICAgICAgICAgICAgc2tpbGw6IGNoYXJhY3RlcmlzdGljLmxhYmVsLFxuICAgICAgICAgICAgICByZWd1bGFyOiBjaGFyYWN0ZXJpc3RpYy52YWx1ZSA/PyAwLFxuICAgICAgICAgICAgICBoYXJkOiBjaGFyYWN0ZXJpc3RpYy5oYXJkID8/IDAsXG4gICAgICAgICAgICAgIGV4dHJlbWU6IGNoYXJhY3RlcmlzdGljLmV4dHJlbWUgPz8gMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICAgICAgICB0b29sVGlwID1cbiAgICAgICAgICAgICAgICB0b29sVGlwICtcbiAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBLZWVwZXJTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgIG90aGVyOlxuICAgICAgICAgICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzdGFuYnlHTVJvbGxzJykgJiZcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQuYWN0b3IuaGFzUGxheWVyT3duZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuVG9vbFRpcEtlZXBlclN0YW5kYnlTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNoZWV0LmFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogJydcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuZGlzcGxheVRvb2xUaXAodG9vbFRpcClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGRlbGF5KVxuICAgIH1cbiAgfVxuXG4gIHRvb2xUaXBBdHRyaWJ1dGVFbnRlciAoZXZlbnQpIHtcbiAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3Rvb2xUaXBEZWxheScpKVxuICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgIGNvbnN0IHNoZWV0ID0gdGhpc1xuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3ZlciAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBhdHRyaWIgPSBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIuY2xvc2VzdCgnLmF0dHJpYnV0ZScpXG4gICAgICAgICAgaWYgKHR5cGVvZiBhdHRyaWIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVJZCA9IGF0dHJpYi5kYXRhc2V0LmF0dHJpYlxuICAgICAgICAgICAgbGV0IHRvb2xUaXAgPSAnJ1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHNoZWV0LmFjdG9yLnN5c3RlbS5hdHRyaWJzW2F0dHJpYnV0ZUlkXVxuICAgICAgICAgICAgc3dpdGNoIChhdHRyaWJ1dGVJZCkge1xuICAgICAgICAgICAgICBjYXNlICdsY2snOlxuICAgICAgICAgICAgICAgIHRvb2xUaXAgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgIHNraWxsOiBhdHRyaWJ1dGVzLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgcmVndWxhcjogYXR0cmlidXRlcy52YWx1ZSA/PyAwLFxuICAgICAgICAgICAgICAgICAgaGFyZDogTWF0aC5mbG9vcigoYXR0cmlidXRlcy52YWx1ZSA/PyAwKSAvIDIpLFxuICAgICAgICAgICAgICAgICAgZXh0cmVtZTogTWF0aC5mbG9vcigoYXR0cmlidXRlcy52YWx1ZSA/PyAwKSAvIDUpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgICAgICAgICAgIHRvb2xUaXAgPVxuICAgICAgICAgICAgICAgICAgICB0b29sVGlwICtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ub29sVGlwS2VlcGVyU2tpbGwnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgb3RoZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzdGFuYnlHTVJvbGxzJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoZWV0LmFjdG9yLmhhc1BsYXllck93bmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ub29sVGlwS2VlcGVyU3RhbmRieVNraWxsJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNoZWV0LmFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnYW1lLkNvQzdUb29sdGlwcy5kaXNwbGF5VG9vbFRpcCh0b29sVGlwKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGNhc2UgJ2RiJzpcbiAgICAgICAgICAgICAgICB0b29sVGlwID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRvb2xUaXBEQicpXG4gICAgICAgICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuZGlzcGxheVRvb2xUaXAodG9vbFRpcClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlICdzYW4nOlxuICAgICAgICAgICAgICAgIHRvb2xUaXAgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBTYW5pdHknLCB7XG4gICAgICAgICAgICAgICAgICBza2lsbDogJ1Nhbml0eScsXG4gICAgICAgICAgICAgICAgICByZWd1bGFyOiBhdHRyaWJ1dGVzLnZhbHVlID8/IDAsXG4gICAgICAgICAgICAgICAgICBoYXJkOiBNYXRoLmZsb29yKChhdHRyaWJ1dGVzLnZhbHVlID8/IDApIC8gMiksXG4gICAgICAgICAgICAgICAgICBleHRyZW1lOiBNYXRoLmZsb29yKChhdHRyaWJ1dGVzLnZhbHVlID8/IDApIC8gNSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICAgICAgICAgICAgdG9vbFRpcCA9XG4gICAgICAgICAgICAgICAgICAgIHRvb2xUaXAgK1xuICAgICAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBLZWVwZXJTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdGhlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ub29sVGlwS2VlcGVyU2FuaXR5JykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3N0YW5ieUdNUm9sbHMnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2hlZXQuYWN0b3IuaGFzUGxheWVyT3duZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBLZWVwZXJTdGFuZGJ5U2tpbGwnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc2hlZXQuYWN0b3IubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnYW1lLkNvQzdUb29sdGlwcy5kaXNwbGF5VG9vbFRpcCh0b29sVGlwKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBkZWxheSlcbiAgICB9XG4gIH1cblxuICB0b29sVGlwQXV0b0VudGVyIChldmVudCkge1xuICAgIGNvbnN0IGRlbGF5ID0gcGFyc2VJbnQoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndG9vbFRpcERlbGF5JykpXG4gICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3ZlciAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCB0b29sVGlwID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRvb2xUaXBBdXRvVG9nZ2xlJylcbiAgICAgICAgICBnYW1lLkNvQzdUb29sdGlwcy5kaXNwbGF5VG9vbFRpcCh0b29sVGlwKVxuICAgICAgICB9XG4gICAgICB9LCBkZWxheSlcbiAgICB9XG4gIH1cblxuICB0b29sVGlwRmxhZ0ZvckRldmVsb3BtZW50IChldmVudCkge1xuICAgIGNvbnN0IGRlbGF5ID0gcGFyc2VJbnQoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndG9vbFRpcERlbGF5JykpXG4gICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzXG4gICAgICBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICBnYW1lLkNvQzdUb29sdGlwcy50b29sVGlwVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIuY2xvc2VzdCgnLml0ZW0nKVxuICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHNraWxsSWQgPSBpdGVtLmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSBzaGVldC5hY3Rvci5pdGVtcy5nZXQoc2tpbGxJZClcbiAgICAgICAgICAgIGNvbnN0IHRvb2xUaXAgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBTa2lsbEZsYWdUb2dnbGUnLCB7XG4gICAgICAgICAgICAgIHN0YXR1czogZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICAgIHNraWxsLnN5c3RlbS5mbGFncy5kZXZlbG9wZW1lbnRcbiAgICAgICAgICAgICAgICAgID8gJ0NvQzcuVG9vbFRpcFNraWxsRmxhZ2dlZCdcbiAgICAgICAgICAgICAgICAgIDogJ0NvQzcuVG9vbFRpcFNraWxsVW5mbGFnZ2VkJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuZGlzcGxheVRvb2xUaXAodG9vbFRpcClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGRlbGF5KVxuICAgIH1cbiAgfVxuXG4gIF9vbkNvbnRleHRNZW51Q2xpY2sgKGV2ZW50LCB0YXJnZXQpIHtcbiAgICBjb25zdCB0YXJnZXRUeXBlID0gdGFyZ2V0LmRhdGFzZXQ/LnRhcmdldFR5cGVcbiAgICBjb25zdCByb2xsT3B0aW9ucyA9IHtcbiAgICAgIHByZXZlbnRTdGFuZGJ5OiB0cnVlLFxuICAgICAgZmFzdEZvcndhcmQ6IGZhbHNlLFxuICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICB9XG4gICAgc3dpdGNoICh0YXJnZXRUeXBlKSB7XG4gICAgICBjYXNlICgnc2tpbGwnKTpcbiAgICAgICAgcm9sbE9wdGlvbnMucm9sbFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMXG4gICAgICAgIHJvbGxPcHRpb25zLnNraWxsSWQgPSB0YXJnZXQuY2xvc2VzdCgnLml0ZW0nKT8uZGF0YXNldC5za2lsbElkXG5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdjaGFyYWN0ZXJpc3RpYycpOlxuICAgICAgICByb2xsT3B0aW9ucy5yb2xsVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUNcbiAgICAgICAgcm9sbE9wdGlvbnMuY2hhcmFjdGVyaXN0aWMgPSB0YXJnZXQuY2xvc2VzdCgnLmNoYXItYm94JykuZGF0YXNldC5jaGFyYWN0ZXJpc3RpY1xuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICgnYXR0cmlidXRlJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEVcbiAgICAgICAgcm9sbE9wdGlvbnMuYXR0cmlidXRlID0gdGFyZ2V0LmNsb3Nlc3QoJy5hdHRyaWJ1dGUnKS5kYXRhc2V0LmF0dHJpYlxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBzd2l0Y2ggKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3Rpb24pIHtcbiAgICAgIGNhc2UgKCdyb2xsJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUxcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdvcHBvc2VkLXJvbGwnKTpcbiAgICAgICAgcm9sbE9wdGlvbnMuY2FyZFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX09QUE9TRURcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdjb21iaW5lZC1yb2xsJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9DT01CSU5FRFxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAoJ3JlcXVlc3Qtcm9sbCcpOlxuICAgICAgICByb2xsT3B0aW9ucy5jYXJkVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9STUFMXG4gICAgICAgIHJvbGxPcHRpb25zLnByZXZlbnRTdGFuZGJ5ID0gZmFsc2VcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdsaW5rLXRvb2wnKTpcbiAgICAgICAgcm9sbE9wdGlvbnMuY2FyZFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PTkVcbiAgICAgICAgcm9sbE9wdGlvbnMub3BlbkxpbmtUb29sID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAoJ3NlbmQtY2hhdCcpOlxuICAgICAgICByb2xsT3B0aW9ucy5jYXJkVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9ORVxuICAgICAgICByb2xsT3B0aW9ucy5zZW5kVG9DaGF0ID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAoJ2NvcHktdG8tY2xpcGJvYXJkJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT05FXG4gICAgICAgIHJvbGxPcHRpb25zLnNlbmRUb0NsaXBib2FyZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdsaW5rLWVuY291bnRlcicpOlxuICAgICAgICByb2xsT3B0aW9ucy5jYXJkVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9ORVxuICAgICAgICByb2xsT3B0aW9ucy5jcmVhdGVFbmNvdW50ZXIgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICgnZW5jb3VudGVyJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9TQU5fQ0hFQ0tcbiAgICAgICAgcm9sbE9wdGlvbnMucm9sbFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0FUVFJJQlVURVxuICAgICAgICByb2xsT3B0aW9ucy5mYXN0Rm9yd2FyZCA9IHRydWVcbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBDb0M3Q2hhdE1lc3NhZ2UudHJpZ2dlcihyb2xsT3B0aW9ucylcbiAgfVxuXG4gIF9vblJlbmRlckl0ZW1TaGVldCAoZXZlbnQpIHtcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtSWQnKSlcbiAgICBpdGVtLnNoZWV0LnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uVHJhZGVJdGVtIChldmVudCkge1xuICAgIGNvbnN0IGxpID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuaXRlbScpXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGxpLmRhdGEoJ2l0ZW1JZCcpKVxuICAgIGxldCBjb250ZW50ID0gJzxwPicgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWVzc2FnZVNlbGVjdFVzZXJUb0dpdmVUbycpXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIGFjdG9yRnJvbTogdGhpcy5hY3Rvci5pZCxcbiAgICAgIHNjZW5lOiBudWxsLFxuICAgICAgYWN0b3JUbzogdGhpcy5hY3Rvci5pZCxcbiAgICAgIGl0ZW06IGl0ZW0uaWRcbiAgICB9XG4gICAgaWYgKHRoaXMudG9rZW4/LmFjdG9yKSB7XG4gICAgICBtZXNzYWdlLmFjdG9yRnJvbSA9IHRoaXMudG9rZW4uaWRcbiAgICAgIG1lc3NhZ2Uuc2NlbmUgPSB0aGlzLnRva2VuLnBhcmVudC5pZFxuICAgIH1cbiAgICBjb25zdCBhY3RvcnMgPSBnYW1lLmFjdG9ycy5maWx0ZXIoZSA9PiB7XG4gICAgICBpZiAoIVsnY2hhcmFjdGVyJywgJ25wYycsICdjcmVhdHVyZScsICdjb250YWluZXInXS5pbmNsdWRlcyhlLnR5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWN0b3IuaWQgPT09IGUuaWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBsZXQgdmlzaWJsZSA9IGZhbHNlXG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhlLm93bmVyc2hpcCkpIHtcbiAgICAgICAgaWYgKGsgPT09ICdkZWZhdWx0JyB8fCBrID09PSBnYW1lLnVzZXIuaWQpIHtcbiAgICAgICAgICB2aXNpYmxlID0gdmlzaWJsZSB8fCB2ICE9PSBDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk5PTkVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZpc2libGVcbiAgICB9KVxuICAgIGNvbnRlbnQgPSBjb250ZW50ICsgJzxmb3JtIGlkPVwic2VsZWN0Zm9ybVwiPjxzZWxlY3QgbmFtZT1cInVzZXJcIj4nXG4gICAgZm9yIChjb25zdCBhY3RvciBvZiBhY3RvcnMpIHtcbiAgICAgIGNvbnRlbnQgPVxuICAgICAgICBjb250ZW50ICsgJzxvcHRpb24gdmFsdWU9XCInICsgYWN0b3IuaWQgKyAnXCI+JyArIGFjdG9yLm5hbWUgKyAnPC9vcHRpb24+J1xuICAgIH1cbiAgICBjb250ZW50ID0gY29udGVudCArICc8L3NlbGVjdD48L2Zvcm0+PC9wPidcbiAgICBtZXNzYWdlLmFjdG9yVG8gPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBEaWFsb2coe1xuICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1lc3NhZ2VUaXRsZVNlbGVjdFVzZXJUb0dpdmVUbycpLFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgY29uZmlybToge1xuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5WYWxpZGF0ZScpLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGh0bWwgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShcbiAgICAgICAgICAgICAgICBodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJyNzZWxlY3Rmb3JtJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgZm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICdjb25maXJtJyxcbiAgICAgICAgY2xvc2U6ICgpID0+IHt9XG4gICAgICB9KVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gICAgYXdhaXQgZ2FtZS5Db0M3c29ja2V0LmV4ZWN1dGVBc0dNKCdnbXRyYWRlaXRlbXRvJywgbWVzc2FnZSlcbiAgfVxuXG4gIF9vbkRyYWdTdGFydCAoZXZlbnQpIHtcbiAgICBzdXBlci5fb25EcmFnU3RhcnQoZXZlbnQpXG4gICAgaWYgKHRoaXMudG9rZW4pIHtcbiAgICAgIGNvbnN0IGRyYWdEYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpKVxuICAgICAgZHJhZ0RhdGEudG9rZW5VdWlkID0gdGhpcy50b2tlbi51dWlkXG4gICAgICBkcmFnRGF0YS50b2tlbklkID0gdGhpcy50b2tlbi5pZFxuICAgICAgZHJhZ0RhdGEuc2NlbmVJZCA9IHRoaXMudG9rZW4ucGFyZW50LmlkXG4gICAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRyYWdEYXRhKSlcbiAgICB9XG4gIH1cblxuICBfb25EcmFnQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgY29uc3QgYm94ID0gZXZlbnQuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIENvQzdUeXBlOiAnbGluaycsXG4gICAgICBsaW5rVHlwZTogJ2NoYXJhY3RlcmlzdGljJyxcbiAgICAgIGNoZWNrOiAnY2hlY2snLFxuICAgICAgdHlwZTogJ0NvQzdMaW5rJyxcbiAgICAgIGhhc1BsYXllck93bmVyOiB0aGlzLmFjdG9yLmhhc1BsYXllck93bmVyLFxuICAgICAgYWN0b3JLZXk6IHRoaXMuYWN0b3IuYWN0b3JLZXksXG4gICAgICBuYW1lOiBib3guZGF0YXNldC5jaGFyYWN0ZXJpc3RpYyxcbiAgICAgIGljb246IG51bGwsXG4gICAgICBkb2N1bWVudDoge1xuICAgICAgICB0eXBlOiB0aGlzLmRvY3VtZW50LnR5cGUsXG4gICAgICAgIHV1aWQ6IHRoaXMuZG9jdW1lbnQudXVpZFxuICAgICAgfVxuICAgIH1cblxuICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvcGxhaW4nLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgfVxuXG4gIF9vbkRyYWdBdHRyaWJ1dGUgKGV2ZW50KSB7XG4gICAgY29uc3QgYm94ID0gZXZlbnQuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIENvQzdUeXBlOiAnbGluaycsXG4gICAgICBsaW5rVHlwZTogJ2F0dHJpYnV0ZScsXG4gICAgICBjaGVjazogJ2NoZWNrJyxcbiAgICAgIHR5cGU6ICdDb0M3TGluaycsXG4gICAgICBoYXNQbGF5ZXJPd25lcjogdGhpcy5hY3Rvci5oYXNQbGF5ZXJPd25lcixcbiAgICAgIGFjdG9yS2V5OiB0aGlzLmFjdG9yLmFjdG9yS2V5LFxuICAgICAgbmFtZTogYm94LmRhdGFzZXQuYXR0cmliLFxuICAgICAgaWNvbjogbnVsbCxcbiAgICAgIGRvY3VtZW50OiB7XG4gICAgICAgIHR5cGU6IHRoaXMuZG9jdW1lbnQudHlwZSxcbiAgICAgICAgdXVpZDogdGhpcy5kb2N1bWVudC51dWlkXG4gICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICB9XG5cbiAgX29uRHJhZ1NhbkNoZWNrIChldmVudCkge1xuICAgIGNvbnN0IHNhbk1pbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXQucXVlcnlTZWxlY3RvcignLnNhbi12YWx1ZS5wYXNzJylcbiAgICBjb25zdCBzYW5NYXggPSBldmVudC5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5zYW4tdmFsdWUuZmFpbGVkJylcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgQ29DN1R5cGU6ICdsaW5rJyxcbiAgICAgIGxpbmtUeXBlOiAnY29jNy1saW5rJyxcbiAgICAgIGNoZWNrOiAnc2FubG9zcycsXG4gICAgICBoYXNQbGF5ZXJPd25lcjogdGhpcy5hY3Rvci5oYXNQbGF5ZXJPd25lcixcbiAgICAgIGFjdG9yS2V5OiB0aGlzLmFjdG9yLmFjdG9yS2V5LFxuICAgICAgc2FuTWluOiBzYW5NaW4uaW5uZXJUZXh0LFxuICAgICAgc2FuTWF4OiBzYW5NYXguaW5uZXJUZXh0LFxuICAgICAgaWNvbjogbnVsbCxcbiAgICAgIGRvY3VtZW50OiB7XG4gICAgICAgIHR5cGU6IHRoaXMuZG9jdW1lbnQudHlwZSxcbiAgICAgICAgdXVpZDogdGhpcy5kb2N1bWVudC51dWlkXG4gICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQpIHtcbiAgICBjb25zdCBkYXRhU3RyaW5nID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvcGxhaW4nKVxuICAgIGlmIChkYXRhU3RyaW5nID09PSAnJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpXG4gICAgaWYgKGRhdGEudHlwZSA9PT0gJ0NvQzdMaW5rJykge1xuICAgICAgaWYgKGRhdGEuY2hlY2sgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuRUZGRUNUKSB7XG4gICAgICAgIENvQzdMaW5rLl9vbkxpbmtBY3RvckNsaWNrKHRoaXMuYWN0b3IsIGRhdGEpXG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IHN1cGVyLl9vbkRyb3AoZXZlbnQpXG4gIH1cblxuICBhc3luYyBfb25Db25kaXRpb25Ub2dnbGUgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY29uZGl0aW9uKSB7XG4gICAgICBhd2FpdCB0aGlzLmFjdG9yLnRvZ2dsZUNvbmRpdGlvbihldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY29uZGl0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJldml2ZSAoKSB7XG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSB0aGlzLmFjdG9yLnVuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmRlYWQpXG4gIH1cblxuICBhc3luYyBoZWFsICgpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHRoaXMuYWN0b3IudW5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMuZHlpbmcpXG4gIH1cblxuICBhc3luYyBjaGVja0ZvckRlYXRoIChldmVudCkge1xuICAgIGNvbnN0IGNvbkNoZWNrID0gbmV3IENvQzdDb25DaGVjayhcbiAgICAgIHRoaXMuYWN0b3IuaXNUb2tlbiA/IHRoaXMuYWN0b3IudG9rZW5LZXkgOiB0aGlzLmFjdG9yLmlkXG4gICAgKVxuICAgIGNvbkNoZWNrLnN0YXlBbGl2ZSA9IHRydWVcbiAgICBjb25DaGVjay50b01lc3NhZ2UoZXZlbnQuc2hpZnRLZXkpXG4gIH1cblxuICBhc3luYyBfb25EcmFnVG9rZW5TdGFydCAoZXZlbnQpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgdHlwZTogJ1Rva2VuJyxcbiAgICAgIHV1aWQ6IHRoaXMudG9rZW4udXVpZFxuICAgIH1cbiAgICBldmVudC5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gIH1cblxuICBhc3luYyBfb25SZXNldENvdW50ZXIgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGF3YWl0IHRoaXMuYWN0b3IucmVzZXREYWlseVNhbml0eSgpXG4gIH1cblxuICBhc3luYyBfb25BdXRvVG9nZ2xlIChldmVudCkge1xuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5hdHRyaWJ1dGUnKSkge1xuICAgICAgY29uc3QgYXR0cmliID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuYXR0cmlidXRlJykuZGF0YXNldC5hdHRyaWJcbiAgICAgIHRoaXMuYWN0b3IudG9nZ2xlQXR0cmliQXV0byhhdHRyaWIpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uVG9nZ2xlIChldmVudCkge1xuICAgIGNvbnN0IHdlYXBvbiA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuaXRlbUlkXG4gICAgKVxuICAgIGlmICh3ZWFwb24pIHtcbiAgICAgIHdlYXBvbi50b2dnbGVQcm9wZXJ0eShcbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnByb3BlcnR5LFxuICAgICAgICBpc0N0cmxLZXkoZXZlbnQpXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgLy8gcm9sbCB0aGUgYWN0b3IgY2hhcmFjdGVyaXN0aWMgZnJvbSBmb3JtdWxhIHdoZW4gcG9zc2libGUuXG4gIGFzeW5jIF9vblJvbGxDaGFyYWN0ZXJpdGljc1ZhbHVlICgpIHtcbiAgICBhd2FpdCB0aGlzLmFjdG9yLnJvbGxDaGFyYWN0ZXJpc3RpY3NWYWx1ZSgpXG4gIH1cblxuICBhc3luYyBfb25BdmVyYWdlQ2hhcmFjdGVyaXRpY3NWYWx1ZSAoKSB7XG4gICAgdGhpcy5hY3Rvci5hdmVyYWdlQ2hhcmFjdGVyaXN0aWNzVmFsdWUoKVxuICB9XG5cbiAgYXN5bmMgX29uTG9ja0NsaWNrZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGlzTG9ja2VkID0gdGhpcy5hY3Rvci5sb2NrZWRcbiAgICB0aGlzLmFjdG9yLmxvY2tlZCA9ICFpc0xvY2tlZFxuICAgIEhvb2tzLmNhbGwoJ2FjdG9yTG9ja0NsaWNrZWRDb0M3JywgWyFpc0xvY2tlZF0pXG4gIH1cblxuICBhc3luYyBfb25GbGFnQ2xpY2tlZCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgZmxhZ05hbWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZ1xuICAgIHRoaXMuYWN0b3IudG9nZ2xlQWN0b3JGbGFnKGZsYWdOYW1lKVxuICB9XG5cbiAgYXN5bmMgX29uRm9ybXVsYUNsaWNrZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuYWN0b3IudG9nZ2xlQWN0b3JGbGFnKCdkaXNwbGF5Rm9ybXVsYScpXG4gIH1cblxuICBhc3luYyBfb25XaGVlbCAoZXZlbnQpIHtcbiAgICBsZXQgdmFsdWUgPSBwYXJzZUludChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlKSB8fCBudWxsXG4gICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUgLSAxXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmRlbHRhWSA8IDApIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKyAxXG4gICAgfVxuXG4gICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUpIHtcbiAgICAgIGNhc2UgJ3N5c3RlbS5hdHRyaWJzLmhwLnZhbHVlJzpcbiAgICAgICAgdGhpcy5hY3Rvci5zZXRIcCh2YWx1ZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3N5c3RlbS5hdHRyaWJzLm1wLnZhbHVlJzpcbiAgICAgICAgdGhpcy5hY3Rvci5zZXRNcCh2YWx1ZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3N5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSc6XG4gICAgICAgIHRoaXMuYWN0b3Iuc2V0U2FuKHZhbHVlKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3lzdGVtLmF0dHJpYnMubGNrLnZhbHVlJzpcbiAgICAgICAgdGhpcy5hY3Rvci5zZXRMdWNrKHZhbHVlKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3lzdGVtLmF0dHJpYnMuYnVpbGQuY3VycmVudCc6XG4gICAgICAgIHRoaXMuYWN0b3Iuc2V0SHAodmFsdWUpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgX3RvZ2dsZVJlYWRPbmx5IChldmVudCkge1xuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQucmVhZE9ubHkgPSAhZXZlbnQuY3VycmVudFRhcmdldC5yZWFkT25seVxuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgncmVhZC1vbmx5JylcbiAgfVxuXG4gIGFzeW5jIF9vbkl0ZW1TdW1tYXJ5IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtLWlkJykpXG4gICAgY29uc3QgY2hhdERhdGEgPSBhd2FpdCBpdGVtLmdldENoYXREYXRhKHsgc2VjcmV0czogdGhpcy5hY3Rvci5pc093bmVyIH0pXG5cbiAgICAvLyBUb2dnbGUgc3VtbWFyeVxuICAgIGlmIChsaS5oYXNDbGFzcygnZXhwYW5kZWQnKSkge1xuICAgICAgY29uc3Qgc3VtbWFyeSA9IGxpLmNoaWxkcmVuKCcuaXRlbS1zdW1tYXJ5JylcbiAgICAgIHN1bW1hcnkuc2xpZGVVcCgyMDAsICgpID0+IHtcbiAgICAgICAgc3VtbWFyeS5yZW1vdmUoKVxuICAgICAgICBsaS50b2dnbGVDbGFzcygnZXhwYW5kZWQnKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGl2ID0gJCgnPGRpdiBjbGFzcz1cIml0ZW0tc3VtbWFyeVwiPjwvZGl2PicpXG5cbiAgICAgIGNvbnN0IGxhYmVscyA9ICQoJzxkaXYgY2xhc3M9XCJpdGVtLWxhYmVsc1wiPjwvZGl2PicpXG4gICAgICBmb3IgKGNvbnN0IHAgb2YgY2hhdERhdGEubGFiZWxzKSB7XG4gICAgICAgIGxhYmVscy5hcHBlbmQoXG4gICAgICAgICAgYDxkaXYgY2xhc3M9XCJpdGVtLWxhYmVsXCI+PHNwYW4gY2xhc3M9XCJsYWJlbC1uYW1lXCI+JHtwLm5hbWV9IDo8L3NwYW4+PHNwYW4gY2xhc3M9XCJsYWJlbC12YWx1ZVwiPiR7cC52YWx1ZX08L3NwYW4+PC9kaXY+YFxuICAgICAgICApXG4gICAgICB9XG4gICAgICBkaXYuYXBwZW5kKGxhYmVscylcblxuICAgICAgZGl2LmFwcGVuZChcbiAgICAgICAgJChgPGRpdiBjbGFzcz1cIml0ZW0tZGVzY3JpcHRpb25cIj4ke2NoYXREYXRhLmRlc2NyaXB0aW9uLnZhbHVlfTwvZGl2PmApXG4gICAgICApXG5cbiAgICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5zcGNsKSB7XG4gICAgICAgIGNvbnN0IHNwZWNpYWxEaXYgPSAkKFxuICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaXRlbS1zcGVjaWFsXCI+JHtjaGF0RGF0YS5kZXNjcmlwdGlvbi5zcGVjaWFsfTwvZGl2PmBcbiAgICAgICAgKVxuICAgICAgICBkaXYuYXBwZW5kKHNwZWNpYWxEaXYpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BzID0gJCgnPGRpdiBjbGFzcz1cIml0ZW0tcHJvcGVydGllc1wiPjwvZGl2PicpXG4gICAgICBmb3IgKGNvbnN0IHAgb2YgY2hhdERhdGEucHJvcGVydGllcykge1xuICAgICAgICBwcm9wcy5hcHBlbmQoXG4gICAgICAgICAgYDxkaXYgY2xhc3M9XCJ0YWcgaXRlbS1wcm9wZXJ0eVwiPiR7Z2FtZS5pMThuLmxvY2FsaXplKHApfTwvZGl2PmBcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgZGl2LmFwcGVuZChwcm9wcylcblxuICAgICAgbGkuYXBwZW5kKGRpdi5oaWRlKCkpXG4gICAgICBkaXYuc2xpZGVEb3duKDIwMCwgKCkgPT4gbGkudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJykpXG4gICAgfVxuICAgIC8vICQoZXZlbnQuY3VycmVudFRhcmdldCkudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJyk7XG4gIH1cblxuICBhc3luYyBfb25TZWN0aW9uSGVhZGVyIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAvLyBsZXQgc2VjdGlvbiA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnc2VjdGlvbicpLFxuICAgIC8vICBwYW5uZWxDbGFzcyA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YSgncGFubmVsJyksXG4gICAgLy8gIHBhbm5lbCA9IHNlY3Rpb24uZmluZCggYC4ke3Bhbm5lbENsYXNzfWApO1xuICAgIC8vIHBhbm5lbC50b2dnbGUoKTtcbiAgICBjb25zdCBzZWN0aW9uID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdzZWN0aW9uJylcbiAgICBjb25zdCBwYW5uZWxDbGFzcyA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5wYW5uZWxcbiAgICBpZiAodHlwZW9mIHBhbm5lbENsYXNzID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG4gICAgY29uc3QgcGFubmVsID0gJChzZWN0aW9uKS5maW5kKGAucGFubmVsLiR7cGFubmVsQ2xhc3N9YClcblxuICAgIC8vIHBhbm5lbC50b2dnbGUoKTtcbiAgICBpZiAocGFubmVsLmhhc0NsYXNzKCdleHBhbmRlZCcpKSB7XG4gICAgICAvLyBDb3VsZCByZW1vdmUgZXhwYW5kZWQgY2xhc3MgYW5kIHVzZSAocGFubmVsLmlzKCc6dmlzaWJsZScpKVxuICAgICAgcGFubmVsLnNsaWRlVXAoMjAwLCAoKSA9PiBwYW5uZWwudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJykpXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhbm5lbC5zbGlkZURvd24oMjAwLCAoKSA9PiBwYW5uZWwudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJykpXG4gICAgfVxuXG4gICAgY29uc3QgY2FtZWxGbGFnID0gY2hhdEhlbHBlci5oeXBoZW5Ub0NhbWVsQ2FzZShgZGF0YS5wYW5uZWwuJHtwYW5uZWxDbGFzc30uZXhwYW5kZWRgKVxuXG4gICAgdGhpcy5hY3Rvci51cGRhdGUoXG4gICAgICB7IFtjYW1lbEZsYWddOiAhcGFubmVsLmhhc0NsYXNzKCdleHBhbmRlZCcpIH0sXG4gICAgICB7IHJlbmRlcjogZmFsc2UgfSlcbiAgfVxuXG4gIF9vbkludmVudG9yeUhlYWRlciAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnNpYmxpbmdzKCdsaScpXG4gICAgaWYgKGxpLmlzKCc6dmlzaWJsZScpKSBsaS5zbGlkZVVwKDIwMClcbiAgICBlbHNlIGxpLnNsaWRlRG93bigyMDApXG4gIH1cblxuICBfb25JdGVtSGVhZGVyIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBvbCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkubmV4dCgnb2wnKVxuICAgIGlmIChvbC5pcygnOnZpc2libGUnKSkgb2wuc2xpZGVVcCgyMDApXG4gICAgZWxzZSBvbC5zbGlkZURvd24oMjAwKVxuICB9XG5cbiAgYXN5bmMgX29uSXRlbVBvcHVwIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtLWlkJykpXG5cbiAgICBDb0M3QWN0b3JTaGVldC5wb3B1cFNraWxsKGl0ZW0pXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcG9wdXBTa2lsbCAoc2tpbGwpIHtcbiAgICBza2lsbC5zeXN0ZW0uZGVzY3JpcHRpb24uZW5yaWNoZWRWYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNraWxsLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHsgYXN5bmM6IHRydWUgfVxuICAgIClcbiAgICBjb25zdCBkbGcgPSBuZXcgRGlhbG9nKFxuICAgICAge1xuICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsRGV0YWlsc1dpbmRvdycpLFxuICAgICAgICBjb250ZW50OiBza2lsbCxcbiAgICAgICAgYnV0dG9uczoge30sXG4gICAgICAgIGNsb3NlOiAoKSA9PiB7fVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ3NraWxsJ10sXG4gICAgICAgIHdpZHRoOiA1MjAsXG4gICAgICAgIGhlaWdodDogNDgwLFxuICAgICAgICBzY3JvbGxZOiBbJy5pdGVtLWRlc2NyaXB0aW9uJ10sXG4gICAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL3NraWxsLWRldGFpbHMuaHRtbCdcbiAgICAgIH1cbiAgICApXG4gICAgZGxnLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSByb2xsaW5nIG9mIGFuIGl0ZW0gZnJvbSB0aGUgQWN0b3Igc2hlZXQsIG9idGFpbmluZyB0aGUgSXRlbSBpbnN0YW5jZSBhbmQgZGlzcGF0Y2hpbmcgdG8gaXQncyByb2xsIG1ldGhvZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXN5bmMgX29uSXRlbVJvbGwgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIC8vIGNvbnN0IGl0ZW1JZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZDtcbiAgICAvLyBjb25zdCBhY3RvcklkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC5hY3RvcklkO1xuICAgIC8vIGNvbnN0IHRva2VuS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC50b2tlbklkO1xuICAgIC8vIGxldCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKTtcblxuICAgIC8vIGNoZWNrLmFjdG9yID0gIXRva2VuS2V5ID8gYWN0b3JJZCA6IHRva2VuS2V5O1xuICAgIC8vIGNoZWNrLml0ZW0gPSBpdGVtSWQ7XG4gICAgLy8gY2hlY2sucm9sbCgpO1xuICAgIC8vIGNoZWNrLnRvTWVzc2FnZSgpO1xuICB9XG5cbiAgYXN5bmMgX29uRWZmZWN0IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBlZmZlY3RJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnbGknKS5kYXRhc2V0LmVmZmVjdElkXG4gICAgY29uc3QgZWZmZWN0ID0gdGhpcy5hY3Rvci5lZmZlY3RzLmdldChlZmZlY3RJZClcbiAgICBpZiAoaXNDdHJsS2V5KGV2ZW50KSAmJiBnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgQ29DN0NvbnRlbnRMaW5rRGlhbG9nLmNyZWF0ZSh7IHR5cGU6ICdDb0M3TGluaycsIGNoZWNrOiBDb0M3TGluay5DSEVDS19UWVBFLkVGRkVDVCwgb2JqZWN0OiBlZmZlY3QgfSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25XZWFwb25Sb2xsIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBpdGVtSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJ2xpJykuZGF0YXNldC5pdGVtSWRcbiAgICBjb25zdCBmYXN0Rm9yd2FyZCA9IGV2ZW50LnNoaWZ0S2V5XG4gICAgY29uc3Qgd2VhcG9uID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQoaXRlbUlkKVxuICAgIC8vIGNvbnN0IGFjdG9yS2V5ID0gIXRoaXMudG9rZW4/IHRoaXMuYWN0b3IuYWN0b3JLZXkgOiBgJHt0aGlzLnRva2VuLnNjZW5lPy5faWQ/dGhpcy50b2tlbi5zY2VuZS5faWQ6J1RPS0VOJ30uJHt0aGlzLnRva2VuLmRhdGEuX2lkfWA7IC8vUkVGQUNUT1JJTkcgKDIpXG4gICAgLyoqICogTU9ESUYgMC44LnggKioqL1xuICAgIGxldCBhY3RvcktleVxuICAgIGlmICghdGhpcy50b2tlbikgYWN0b3JLZXkgPSB0aGlzLmFjdG9yLmlkXG4gICAgLy8gU2hlZXQgd2FzIG9wZW5lZCBmcm9tIGFjdG9yIGRpcmVjdG9yeVxuICAgIGVsc2Uge1xuICAgICAgLy8gT3BlbmVkIGZyb20gdG9rZW5cbiAgICAgIGlmICh0aGlzLmFjdG9yLmlzVG9rZW4gJiYgZ2FtZS5hY3RvcnMudG9rZW5zW3RoaXMudG9rZW4uaWRdKSB7XG4gICAgICAgIGFjdG9yS2V5ID0gYFRPS0VOLiR7dGhpcy50b2tlbi5pZH1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RvcktleSA9IGAke3RoaXMudG9rZW4ucGFyZW50LmlkfS4ke3RoaXMudG9rZW4uaWR9YFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0N0cmxLZXkoZXZlbnQpICYmIGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBjb25zdCBsaW5rRGF0YSA9IHtcbiAgICAgICAgY2hlY2s6IENvQzdMaW5rLkNIRUNLX1RZUEUuSVRFTSxcbiAgICAgICAgbmFtZTogd2VhcG9uLm5hbWVcbiAgICAgIH1cbiAgICAgIENvQzdDb250ZW50TGlua0RpYWxvZy5jcmVhdGUobGlua0RhdGEsIHsgYWN0b3JzOiBbdGhpcy5hY3Rvcl0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHByb2NlZWRXaXRob3V0VGFyZ2V0XG4gICAgICBpZiAoZ2FtZS51c2VyLnRhcmdldHMuc2l6ZSA8PSAwKSB7XG4gICAgICAgIHByb2NlZWRXaXRob3V0VGFyZ2V0ID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnICcsXG4gICAgICAgICAgICBjb250ZW50OiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk5vVGFyZ2V0U2VsZWN0ZWQnLCB7XG4gICAgICAgICAgICAgIHdlYXBvbjogd2VhcG9uLm5hbWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICBjYW5jZWw6IHtcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+JyxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNhbmNlbCcpLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByb2NlZWQ6IHtcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtY2hlY2tcIj48L2k+JyxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlByb2NlZWQnKSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0OiAnY2FuY2VsJyxcbiAgICAgICAgICAgIGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnXVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXcgRGlhbG9nKGRhdGEpLnJlbmRlcih0cnVlKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgaWYgKGdhbWUudXNlci50YXJnZXRzLnNpemUgPiAwIHx8IHByb2NlZWRXaXRob3V0VGFyZ2V0KSB7XG4gICAgICAgIGlmICghd2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgICAgICBpZiAoZ2FtZS51c2VyLnRhcmdldHMuc2l6ZSA+IDEpIHtcbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2FyblRvb01hbnlUYXJnZXQnKSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjYXJkID0gbmV3IENvQzdNZWxlZUluaXRpYXRvcihhY3RvcktleSwgaXRlbUlkLCBmYXN0Rm9yd2FyZClcbiAgICAgICAgICBjYXJkLmNyZWF0ZUNoYXRDYXJkKClcbiAgICAgICAgfVxuICAgICAgICBpZiAod2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgICAgICBjb25zdCBjYXJkID0gbmV3IENvQzdSYW5nZUluaXRpYXRvcihhY3RvcktleSwgaXRlbUlkLCBmYXN0Rm9yd2FyZClcbiAgICAgICAgICBjYXJkLmNyZWF0ZUNoYXRDYXJkKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblJlbG9hZFdlYXBvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBpdGVtSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICAgID8gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuaXRlbUlkXG4gICAgICA6IG51bGxcbiAgICBpZiAoIWl0ZW1JZCkgcmV0dXJuXG4gICAgY29uc3Qgd2VhcG9uID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQoaXRlbUlkKVxuICAgIGlmIChldmVudC5idXR0b24gPT09IDApIHtcbiAgICAgIGlmIChldmVudC5zaGlmdEtleSkgYXdhaXQgd2VhcG9uLnJlbG9hZCgpXG4gICAgICBlbHNlIGF3YWl0IHdlYXBvbi5hZGRCdWxsZXQoKVxuICAgIH0gZWxzZSBpZiAoZXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIGF3YWl0IHdlYXBvbi5zZXRCdWxsZXRzKDApXG4gICAgICBlbHNlIGF3YWl0IHdlYXBvbi5zaG9vdEJ1bGxldHMoMSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25BZGRBbW8gKGV2ZW50KSB7XG4gICAgY29uc3QgaXRlbUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgICA/IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgOiBudWxsXG4gICAgaWYgKCFpdGVtSWQpIHJldHVyblxuICAgIGNvbnN0IHdlYXBvbiA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGl0ZW1JZClcbiAgICBhd2FpdCB3ZWFwb24uYWRkQnVsbGV0KClcbiAgfVxuXG4gIGFzeW5jIF9vbldlYXBvblNraWxsUm9sbCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3Qgc2tpbGxJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbElkXG4gICAgY29uc3QgYWN0b3JJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnZm9ybScpLmRhdGFzZXQuYWN0b3JJZFxuICAgIGNvbnN0IHRva2VuS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC50b2tlbklkXG4gICAgY29uc3QgaXRlbUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdsaScpXG4gICAgICA/IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnbGknKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgOiBudWxsXG5cbiAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuXG4gICAgaWYgKCFldmVudC5zaGlmdEtleSkge1xuICAgICAgY29uc3QgdXNhZ2UgPSBhd2FpdCBSb2xsRGlhbG9nLmNyZWF0ZSgpXG4gICAgICBpZiAodXNhZ2UpIHtcbiAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gdXNhZ2UuZ2V0KCdib251c0RpY2UnKVxuICAgICAgICBjaGVjay5kaWZmaWN1bHR5ID0gdXNhZ2UuZ2V0KCdkaWZmaWN1bHR5JylcbiAgICAgICAgY2hlY2suZmxhdERpY2VNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2ZsYXREaWNlTW9kaWZpZXInKSlcbiAgICAgICAgY2hlY2suZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnZmxhdFRocmVzaG9sZE1vZGlmaWVyJykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2suYWN0b3IgPSAhdG9rZW5LZXkgPyBhY3RvcklkIDogdG9rZW5LZXlcbiAgICBjaGVjay5za2lsbCA9IHNraWxsSWRcbiAgICBjaGVjay5pdGVtID0gaXRlbUlkXG4gICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgY2hlY2sudG9NZXNzYWdlKClcblxuICAgIC8vIEhBQ0s6IGp1c3QgdG8gcG9wIHRoZSBhZHZhbmNlZCByb2xsIHdpbmRvd1xuICAgIC8vIGNoZWNrLml0ZW0ucm9sbCgpO1xuICB9XG5cbiAgYXN5bmMgX29uV2VhcG9uRGFtYWdlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBpdGVtSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy53ZWFwb24nKS5kYXRhc2V0Lml0ZW1JZFxuICAgIGNvbnN0IHJhbmdlID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcud2VhcG9uLWRhbWFnZScpLmRhdGFzZXQucmFuZ2VcbiAgICBjb25zdCBkYW1hZ2VDaGF0Q2FyZCA9IG5ldyBEYW1hZ2VDYXJkKHtcbiAgICAgIGZhc3RGb3J3YXJkOiBldmVudC5zaGlmdEtleSxcbiAgICAgIHJhbmdlXG4gICAgfSlcbiAgICBkYW1hZ2VDaGF0Q2FyZC5hY3RvcktleSA9IHRoaXMuYWN0b3IudG9rZW5LZXlcbiAgICBkYW1hZ2VDaGF0Q2FyZC5pdGVtSWQgPSBpdGVtSWRcbiAgICBkYW1hZ2VDaGF0Q2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgLy8gY29uc29sZS5sb2coICdXZWFwb24gZGFtYWdlIENsaWNrZWQnKTtcbiAgfVxuXG4gIGFzeW5jIF9vbk9wcG9zZWRSb2xsIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC5hdHRyaWIgPT09ICdkYicpIHJldHVyblxuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHJvbGxUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMLFxuICAgICAgY2FyZFR5cGU6IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfT1BQT1NFRCxcbiAgICAgIGV2ZW50LFxuICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICB9XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGFyYWN0ZXJpc3RpYy1sYWJlbCcpKSB7XG4gICAgICBkYXRhLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DSEFSQUNURVJJU1RJQ1xuICAgIH0gZWxzZSBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2F0dHJpYnV0ZS1sYWJlbCcpKSB7XG4gICAgICBkYXRhLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEVcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICBkYXRhLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9DT01CSU5FRFxuICAgIH1cblxuICAgIENvQzdDaGF0TWVzc2FnZS50cmlnZ2VyKGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHJvbGxpbmcgYSBTa2lsbCBjaGVja1xuICAgKiBAICBwYXJhbSB7RXZlbnR9IGV2ZW50ICAgVGhlIG9yaWdpbmF0aW5nIGNsaWNrIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhc3luYyBfb25Sb2xsQ2hhcmFjdGVyaXRpY1Rlc3QgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZmxhZ2dlZDRkZXYnKSkgcmV0dXJuXG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZUNvbnRleHRNZW51cycpKSB7XG4gICAgICBDb0M3Q2hhdE1lc3NhZ2UudHJpZ2dlcih7XG4gICAgICAgIHJvbGxUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0NIQVJBQ1RFUklTVElDLFxuICAgICAgICBjYXJkVHlwZTogQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUwsXG4gICAgICAgIHByZXZlbnRTdGFuZGJ5OiB0cnVlLFxuICAgICAgICBmYXN0Rm9yd2FyZDogdHJ1ZSxcbiAgICAgICAgY2hhcmFjdGVyaXN0aWM6IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmNoYXItYm94JykuZGF0YXNldC5jaGFyYWN0ZXJpc3RpYyxcbiAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIENvQzdDaGF0TWVzc2FnZS50cmlnZ2VyKHtcbiAgICAgICAgcm9sbFR5cGU6IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUMsXG4gICAgICAgIGNhcmRUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PUk1BTCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGFjdG9yOiB0aGlzLmFjdG9yXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblJvbGxBdHRyaWJUZXN0IChldmVudCkge1xuICAgIC8vIEZMQVRNT0RJRklFUlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhdHRyaWIgPSBldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC5hdHRyaWJcbiAgICBpZiAoYXR0cmliID09PSAnZGInKSB7XG4gICAgICBpZiAoXG4gICAgICAgICEvXi17MCwxfVxcZCskLy50ZXN0KFxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0LnJvbGxGb3JtdWxhXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBjb25zdCByID0gbmV3IFJvbGwoXG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQucm9sbEZvcm11bGFcbiAgICAgICAgKVxuICAgICAgICBhd2FpdCByLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICBpZiAoIWlzTmFOKHIudG90YWwpICYmICEoci50b3RhbCA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIHIudG9NZXNzYWdlKHtcbiAgICAgICAgICAgIHNwZWFrZXI6IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoKSxcbiAgICAgICAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkJvbnVzRGFtYWdlUm9sbCcpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZUNvbnRleHRNZW51cycpKSB7XG4gICAgICBDb0M3Q2hhdE1lc3NhZ2UudHJpZ2dlcih7XG4gICAgICAgIHJvbGxUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0NIQVJBQ1RFUklTVElDLFxuICAgICAgICBjYXJkVHlwZTogQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUwsXG4gICAgICAgIHByZXZlbnRTdGFuZGJ5OiB0cnVlLFxuICAgICAgICBmYXN0Rm9yd2FyZDogdHJ1ZSxcbiAgICAgICAgYXR0cmlidXRlOiBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5hdHRyaWJ1dGUnKS5kYXRhc2V0LmF0dHJpYixcbiAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIENvQzdDaGF0TWVzc2FnZS50cmlnZ2VyKHtcbiAgICAgICAgcm9sbFR5cGU6IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQVRUUklCVVRFLFxuICAgICAgICBjYXJkVHlwZTpcbiAgICAgICAgZXZlbnQuYWx0S2V5ICYmIGF0dHJpYiA9PT0gJ3NhbidcbiAgICAgICAgICA/IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfU0FOX0NIRUNLXG4gICAgICAgICAgOiBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PUk1BTCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGFjdG9yOiB0aGlzLmFjdG9yXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgcm9sbGluZyBhIFNraWxsIGNoZWNrXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50ICAgVGhlIG9yaWdpbmF0aW5nIGNsaWNrIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Sb2xsU2tpbGxUZXN0IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZsYWdnZWQ0ZGV2JykpIHJldHVyblxuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd1c2VDb250ZXh0TWVudXMnKSkge1xuICAgICAgQ29DN0NoYXRNZXNzYWdlLnRyaWdnZXIoe1xuICAgICAgICByb2xsVHlwZTogQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9TS0lMTCxcbiAgICAgICAgY2FyZFR5cGU6IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9STUFMLFxuICAgICAgICBwcmV2ZW50U3RhbmRieTogdHJ1ZSxcbiAgICAgICAgZmFzdEZvcndhcmQ6IHRydWUsXG4gICAgICAgIHNraWxsSWQ6IGV2ZW50Py5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJyk/LmRhdGFzZXQuc2tpbGxJZCxcbiAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIENvQzdDaGF0TWVzc2FnZS50cmlnZ2VyKHtcbiAgICAgICAgcm9sbFR5cGU6IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTEwsXG4gICAgICAgIGNhcmRUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PUk1BTCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGFjdG9yOiB0aGlzLmFjdG9yXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgLy8gX2dldFN1Ym1pdERhdGEodXBkYXRlRGF0YT17fSkge1xuXG4gIC8vICAvLyBDcmVhdGUgdGhlIGV4cGFuZGVkIHVwZGF0ZSBkYXRhIG9iamVjdFxuICAvLyAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGFFeHRlbmRlZCh0aGlzLmZvcm0sIHtlZGl0b3JzOiB0aGlzLmVkaXRvcnN9KTtcbiAgLy8gIGxldCBkYXRhID0gZmQudG9PYmplY3QoKTtcbiAgLy8gIGlmICggdXBkYXRlRGF0YSApIGRhdGEgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGRhdGEsIHVwZGF0ZURhdGEpO1xuICAvLyAgZWxzZSBkYXRhID0gZm91bmRyeS51dGlscy5leHBhbmRPYmplY3QoZGF0YSk7XG5cbiAgLy8gIC8vIEhhbmRsZSBEYW1hZ2UgYXJyYXlcbiAgLy8gIGNvbnN0IGRhbWFnZSA9IGRhdGEuZGF0YT8uZGFtYWdlO1xuICAvLyAgaWYgKCBkYW1hZ2UgKSBkYW1hZ2UucGFydHMgPSBPYmplY3QudmFsdWVzKGRhbWFnZT8ucGFydHMgfHwge30pLm1hcChkID0+IFtkWzBdIHx8ICcnLCBkWzFdIHx8ICcnXSk7XG5cbiAgLy8gIC8vIFJldHVybiB0aGUgZmxhdHRlbmVkIHN1Ym1pc3Npb24gZGF0YVxuICAvLyAgcmV0dXJuIGZvdW5kcnkudXRpbHMuZmxhdHRlbk9iamVjdChkYXRhKTtcbiAgLy8gfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLyoqXG4gICAqIEltcGxlbWVudCB0aGUgX3VwZGF0ZU9iamVjdCBtZXRob2QgYXMgcmVxdWlyZWQgYnkgdGhlIHBhcmVudCBjbGFzcyBzcGVjXG4gICAqIFRoaXMgZGVmaW5lcyBob3cgdG8gdXBkYXRlIHRoZSBzdWJqZWN0IG9mIHRoZSBmb3JtIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygnX3VwZGF0ZU9iamVjdCcpO1xuICAgIC8vIFRPRE86IFJlcGxhY2Ugd2l0aCAgIF9nZXRTdWJtaXREYXRhKHVwZGF0ZURhdGE9e30pIENmLiBzaGVldC5qcygyNDMpXG4gICAgY29uc3Qgb3ZlcnJpZGVzID0gZm91bmRyeS51dGlscy5mbGF0dGVuT2JqZWN0KHRoaXMuYWN0b3Iub3ZlcnJpZGVzKVxuICAgIGNvbnN0IG5hbWUgPSBldmVudD8uY3VycmVudFRhcmdldD8ubmFtZVxuICAgIGlmIChuYW1lICYmIG92ZXJyaWRlcyAmJiBvdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FZmZlY3RBcHBsaWVkQ2FudE92ZXJyaWRlJywgeyBuYW1lIH0pXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdCkge1xuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NraWxsLWFkanVzdG1lbnQnKSkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgID8gcGFyc2VJbnQoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmICghZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgICBhd2FpdCBpdGVtLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgW2V2ZW50LmN1cnJlbnRUYXJnZXQubmFtZV06IG51bGxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgaXRlbS51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgW2V2ZW50LmN1cnJlbnRUYXJnZXQubmFtZV06IHZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db0NJREZsYWcua2V5cy5pLnNraWxsLmNyZWRpdC1yYXRpbmcnKSA9PT0gaXRlbS5uYW1lICYmIHR5cGVvZiB0aGlzLmFjdG9yLm9jY3VwYXRpb24/LnN5c3RlbT8uY3JlZGl0UmF0aW5nPy5tYXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNyZWRpdFZhbHVlID1cbiAgICAgICAgICAgICAgICAoaXRlbS52YWx1ZSB8fCAwKSAtXG4gICAgICAgICAgICAgICAgKGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzPy5leHBlcmllbmNlIHx8IDApXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjcmVkaXRWYWx1ZSA+XG4gICAgICAgICAgICAgICAgICBOdW1iZXIodGhpcy5hY3Rvci5vY2N1cGF0aW9uLnN5c3RlbS5jcmVkaXRSYXRpbmcubWF4KSB8fFxuICAgICAgICAgICAgICAgIGNyZWRpdFZhbHVlIDxcbiAgICAgICAgICAgICAgICAgIE51bWJlcih0aGlzLmFjdG9yLm9jY3VwYXRpb24uc3lzdGVtLmNyZWRpdFJhdGluZy5taW4pXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ3JlZGl0T3V0T2ZSYW5nZScsIHtcbiAgICAgICAgICAgICAgICAgICAgbWluOiBOdW1iZXIoXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rvci5vY2N1cGF0aW9uLnN5c3RlbS5jcmVkaXRSYXRpbmcubWluXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG1heDogTnVtYmVyKFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0b3Iub2NjdXBhdGlvbi5zeXN0ZW0uY3JlZGl0UmF0aW5nLm1heFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXR0cmlidXRlLXZhbHVlJykpIHtcbiAgICAgICAgICAvLyBUT0RPIDogY2hlY2sgd2h5IFNBTiBvbmx5ID9cbiAgICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5uYW1lID09PSAnc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlJykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRTYW4oXG4gICAgICAgICAgICAgIHBhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUgPT09ICdzeXN0ZW0uYXR0cmlicy5ocC52YWx1ZScpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWN0b3Iuc2V0SHAoXG4gICAgICAgICAgICAgIHBhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXh0LWFyZWEnKSkge1xuICAgICAgICAgIHRoaXMuYWN0b3IudXBkYXRlVGV4dEFyZWEoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYmlvLXNlY3Rpb24tdmFsdWUnKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5iaW8tc2VjdGlvbicpLmRhdGFzZXQuaW5kZXhcbiAgICAgICAgICApXG4gICAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci51cGRhdGVCaW9WYWx1ZShpbmRleCwgZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYmlvLXNlY3Rpb24tdGl0bGUnKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5iaW8tc2VjdGlvbicpLmRhdGFzZXQuaW5kZXhcbiAgICAgICAgICApXG4gICAgICAgICAgdGhpcy5hY3Rvci51cGRhdGVCaW9UaXRsZShpbmRleCwgZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbnBjLXNraWxsLXNjb3JlJykpIHtcbiAgICAgICAgICBjb25zdCBza2lsbCA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoc2tpbGwpIHtcbiAgICAgICAgICAgIGF3YWl0IHNraWxsLnVwZGF0ZVZhbHVlKGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdza2lsbC1uYW1lJykgfHxcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaXRlbS1uYW1lJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHt9XG4gICAgICAgICAgICBpZiAoaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5zcGVjaWFsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gQ29DN0l0ZW0uZ2V0TmFtZVBhcnRzU3BlYyhcbiAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgZGF0YS5uYW1lID0gcGFydHMubmFtZVxuICAgICAgICAgICAgICBkYXRhWydzeXN0ZW0uc2tpbGxOYW1lJ10gPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgICAgICAgICAgZGF0YVsnc3lzdGVtLnNwZWNpYWxpemF0aW9uJ10gPSBwYXJ0cy5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGF0YVsnc3lzdGVtLnNraWxsTmFtZSddID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICBkYXRhLm5hbWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBpdGVtLnVwZGF0ZShkYXRhKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hhcmFjdGVyaXN0aWMtZm9ybXVsYScpKSB7XG4gICAgICAgICAgLy8gdGVzdGVyIHNpIGMnZXN0IHZpZGVcbiAgICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIC8vIE9uIHRlc3RlIHNpIGMnZXN0IHVuZSBmb3JtdWxlIHZhbGlkZSAhXG4gICAgICAgICAgICBjb25zdCByID0gbmV3IFJvbGwoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgIGF3YWl0IHIucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICAgICAgICBpZiAoaXNOYU4oci50b3RhbCkgfHwgdHlwZW9mIHIudG90YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGZvcm1EYXRhW2V2ZW50LmN1cnJlbnRUYXJnZXQubmFtZV0gPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICAgICdDb0M3LkVycm9ySW52YWxpZCdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXR0cmlidXRlLXZhbHVlJykpIHtcbiAgICAgICAgICAvLyB0ZXN0ZXIgc2kgbGUgZGIgcmV0b3VybsOpIGVzdCB2YWxpZGUuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZS5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmF0dHJpYnV0ZScpLmRhdGFzZXQuYXR0cmliID09PSAnZGInXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBPbiB0ZXN0ZSBzaSBjJ2VzdCB1bmUgZm9ybXVsZSB2YWxpZGUgIVxuICAgICAgICAgICAgY29uc3QgciA9IG5ldyBSb2xsKGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgICBhd2FpdCByLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgICAgaWYgKGlzTmFOKHIudG90YWwpIHx8IHIudG90YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JJbnZhbGlkRm9ybXVsYScsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBmb3JtRGF0YVtldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWVdID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAnQ29DNy5FcnJvckludmFsaWQnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZSBza2lsbCBhc3NvY2nDqSBhIGwnYXJtZSBhIGNoYW5nw6lcbiAgICAgICAgLy8gVE9ETyA6IEZhY3RvcmlzYXRpb24gZHUgc3dpdGNoXG4gICAgICAgIC8vIFRPRE8gOiByZW1wbGFjZXIgbGVzIHN0cmluZ3MgcGFyIGRlIGNvbnN0YW50ZXMgKGl0ZW0uc2tpbGwubWFpbiAuLi4pXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnd2VhcG9uLXNraWxsJykpIHtcbiAgICAgICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgICAgIClcbiAgICAgICAgICBjb25zdCBza2lsbCA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5vcHRpb25zW2V2ZW50LmN1cnJlbnRUYXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWVcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKHdlYXBvbiAmJiBza2lsbCkge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGwpIHtcbiAgICAgICAgICAgICAgY2FzZSAnbWFpbic6XG4gICAgICAgICAgICAgICAgYXdhaXQgd2VhcG9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAnc3lzdGVtLnNraWxsLm1haW4uaWQnOiBza2lsbC5pZCxcbiAgICAgICAgICAgICAgICAgICdzeXN0ZW0uc2tpbGwubWFpbi5uYW1lJzogc2tpbGwubmFtZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSAnYWx0ZXJuYXRpdic6XG4gICAgICAgICAgICAgICAgYXdhaXQgd2VhcG9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAnc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQnOiBza2lsbC5pZCxcbiAgICAgICAgICAgICAgICAgICdzeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lJzogc2tpbGwubmFtZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMZSBub20gZGUgbCdhcm1lIGEgY2hhbmfDqVxuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3dlYXBvbi1uYW1lJykpIHtcbiAgICAgICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAod2VhcG9uKSB7XG4gICAgICAgICAgICBhd2FpdCB3ZWFwb24udXBkYXRlKHsgbmFtZTogZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxlcyBkZWdhdHMgZGUgbCdhcm1lIG9uIGNoYW5nw6lzLlxuICAgICAgICAvLyBUT0RPIDogRmFjdG9yaXNhdGlvbiBkdSBzd2l0Y2hcbiAgICAgICAgLy8gVE9ETyA6IHJlbXBsYWNlciBsZXMgc3RyaW5ncyBwYXIgZGUgY29uc3RhbnRlcyAoaXRlbS5yYW5nZS5ub3JtYWwgLi4uKVxuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2RhbWFnZS1mb3JtdWxhJykpIHtcbiAgICAgICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAod2VhcG9uKSB7XG4gICAgICAgICAgICAvLyB0ZXN0ZSBsYSB2YWxpZGl0w6kgZGUgbGEgZm9ybXVsZS5cbiAgICAgICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBjb25zdCByID0gbmV3IFJvbGwoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgYXdhaXQgci5yb2xsKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICAgICAgaWYgKGlzTmFOKHIudG90YWwpIHx8IHR5cGVvZiByLnRvdGFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yVW5hYmxlVG9QYXJzZUZvcm11bGEnLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5yYW5nZSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAnbm9ybWFsJzpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd2VhcG9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgJ3N5c3RlbS5yYW5nZS5ub3JtYWwuZGFtYWdlJzogZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgY2FzZSAnbG9uZyc6XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHdlYXBvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICdzeXN0ZW0ucmFuZ2UubG9uZy5kYW1hZ2UnOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICBjYXNlICdleHRyZW1lJzpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd2VhcG9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgJ3N5c3RlbS5yYW5nZS5leHRyZW1lLmRhbWFnZSc6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbm9ybWFsJzpcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHdlYXBvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICAnc3lzdGVtLnJhbmdlLm5vcm1hbC5kYW1hZ2UnOiBudWxsXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdsb25nJzpcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHdlYXBvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICAnc3lzdGVtLnJhbmdlLmxvbmcuZGFtYWdlJzogbnVsbFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnZXh0cmVtZSc6XG4gICAgICAgICAgICAgICAgICBhd2FpdCB3ZWFwb24udXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgJ3N5c3RlbS5yYW5nZS5leHRyZW1lLmRhbWFnZSc6IG51bGxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9iamVjdC51cGRhdGUoZm9ybURhdGEpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lLCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBDb0M3QWN0b3JTaGVldCB9IGZyb20gJy4vYmFzZS5qcydcbmltcG9ydCB7IFJvbGxEaWFsb2cgfSBmcm9tICcuLi8uLi9hcHBzL3JvbGwtZGlhbG9nLmpzJ1xuaW1wb3J0IHsgQ29DN0xpbmsgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctbGluay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIsIGlzQ3RybEtleSB9IGZyb20gJy4uLy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgU2FuQ2hlY2tDYXJkIH0gZnJvbSAnLi4vLi4vY2hhdC9jYXJkcy9zYW4tY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29udGV4dE1lbnUgfSBmcm9tICcuLi8uLi9jb250ZXh0LW1lbnUuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctY2hhdC1tZXNzYWdlLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgQWN0b3JTaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN05QQ1NoZWV0IGV4dGVuZHMgQ29DN0FjdG9yU2hlZXQge1xuICAvKipcbiAgICogUHJlcGFyZSBkYXRhIGZvciByZW5kZXJpbmcgdGhlIEFjdG9yIHNoZWV0XG4gICAqIFRoZSBwcmVwYXJlZCBkYXRhIG9iamVjdCBjb250YWlucyBib3RoIHRoZSBhY3RvciBkYXRhIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBzaGVldCBvcHRpb25zXG4gICAqL1xuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIC8vIFRPRE8gOiBkbyB3ZSBuZWVkIHRoYXQgP1xuICAgIHNoZWV0RGF0YS5hbGxvd0Zvcm11bGEgPSB0cnVlXG4gICAgc2hlZXREYXRhLmRpc3BsYXlGb3JtdWxhID0gKHRoaXMuYWN0b3IuZ2V0QWN0b3JGbGFnKCdkaXNwbGF5Rm9ybXVsYScpIHx8IGZhbHNlKVxuXG4gICAgc2hlZXREYXRhLmhhc1NhbiA9IHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSAhPT0gbnVsbFxuICAgIHNoZWV0RGF0YS5oYXNNcCA9IHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlICE9PSBudWxsXG4gICAgc2hlZXREYXRhLmhhc0x1Y2sgPSBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5sY2sudmFsdWUgIT09IG51bGxcblxuICAgIHNoZWV0RGF0YS5pc0NyZWF0dXJlID0gZmFsc2VcblxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5SXRlbXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ2l0ZW0nKSB8fFxuICAgICAgIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWRcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICdib29rJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTcGVsbHMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3NwZWxsJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICd0YWxlbnQnKSB8fFxuICAgICAgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkICYmIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlVGFsZW50cycpKVxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5U3RhdHVzZXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3N0YXR1cycpIHx8XG4gICAgICAhc2hlZXREYXRhLmRhdGEuc3lzdGVtLmZsYWdzLmxvY2tlZFxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5V2VhcG9ucyA9IGZhbHNlXG4gICAgc2hlZXREYXRhLmhhc0ludmVudG9yeSA9XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUl0ZW1zIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVNwZWxscyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVN0YXR1c2VzIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVdlYXBvbnNcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZEJpb2dyYXBoeVBlcnNvbmFsRGVzY3JpcHRpb24gPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmlvZ3JhcGh5LnBlcnNvbmFsRGVzY3JpcHRpb24/LnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZUNvbnRleHRNZW51cycpKSB7XG4gICAgICBpZiAoIXRoaXMubWVudXMpIHRoaXMubWVudXMgPSBbXVxuXG4gICAgICBjb25zdCBzYW5sb3NzTWVudSA9IHtcbiAgICAgICAgaWQ6ICdzYW4tbG9zcy1yb2xsJyxcbiAgICAgICAgY2xhc3NlczogJ3JvbGwtbWVudScsXG4gICAgICAgIHNlY3Rpb246IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc2VzOiAnbWFpbicsXG4gICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICB7IGFjdGlvbjogJ2xpbmstdG9vbCcsIGxhYmVsOiAnT3BlbiBpbiBsaW5rIHRvb2wnIH0sXG4gICAgICAgICAgICAgIHsgYWN0aW9uOiAnc2VuZC1jaGF0JywgbGFiZWw6ICdTZW5kIHRvIGNoYXQnIH0sXG4gICAgICAgICAgICAgIHsgYWN0aW9uOiAnY29weS10by1jbGlwYm9hcmQnLCBsYWJlbDogJ0NvcHkgdG8gY2xpcC1ib2FyZCcgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cblxuICAgICAgICBdXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNhbmxvc3NDb250ZXh0TWVudSA9IG5ldyBDb0M3Q29udGV4dE1lbnUoKVxuICAgICAgc2FubG9zc0NvbnRleHRNZW51LmJpbmQoc2FubG9zc01lbnUsIGh0bWwsIHRoaXMuX29uU2FuTG9zc0NvbnRleHRNZW51Q2xpY2suYmluZCh0aGlzKSlcbiAgICAgIHRoaXMubWVudXMucHVzaChzYW5sb3NzQ29udGV4dE1lbnUpXG4gICAgfVxuXG4gICAgaHRtbC5maW5kKCcucm9sbC1zYW4nKS5jbGljayh0aGlzLl9vblNhbkNoZWNrLmJpbmQodGhpcykpXG4gICAgLy8gaWYgKHRoaXMuYWN0b3IuaXNPd25lcikge1xuICAgIC8vICAgaHRtbFxuICAgIC8vICAgICAuZmluZCgnW25hbWU9XCJkYXRhLmF0dHJpYnMuaHAudmFsdWVcIl0nKVxuICAgIC8vICAgICAuY2hhbmdlKGV2ZW50ID0+IHRoaXMuYWN0b3Iuc2V0SGVhbHRoU3RhdHVzTWFudWFsbHkoZXZlbnQpKVxuICAgIC8vIH1cbiAgfVxuXG4gIGFzeW5jIF9vblNhbkxvc3NDb250ZXh0TWVudUNsaWNrIChldmVudCkge1xuICAgIGNvbnN0IHJvbGxPcHRpb25zID0ge1xuICAgICAgcm9sbFR5cGU6IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfRU5DT1VOVEVSLFxuICAgICAgcHJldmVudFN0YW5kYnk6IHRydWUsXG4gICAgICBmYXN0Rm9yd2FyZDogZmFsc2UsXG4gICAgICBldmVudCxcbiAgICAgIGNhcmRUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX1NBTl9DSEVDSyxcbiAgICAgIGFjdG9yOiB0aGlzLmFjdG9yXG4gICAgfVxuXG4gICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uKSB7XG4gICAgICBjYXNlICgnbGluay10b29sJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT05FXG4gICAgICAgIHJvbGxPcHRpb25zLmNyZWF0ZUVuY291bnRlciA9IHRydWVcbiAgICAgICAgcm9sbE9wdGlvbnMub3BlbkxpbmtUb29sID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAoJ3NlbmQtY2hhdCcpOlxuICAgICAgICByb2xsT3B0aW9ucy5jYXJkVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9ORVxuICAgICAgICByb2xsT3B0aW9ucy5jcmVhdGVFbmNvdW50ZXIgPSB0cnVlXG4gICAgICAgIHJvbGxPcHRpb25zLnNlbmRUb0NoYXQgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICgnY29weS10by1jbGlwYm9hcmQnKTpcbiAgICAgICAgcm9sbE9wdGlvbnMuY2FyZFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PTkVcbiAgICAgICAgcm9sbE9wdGlvbnMuY3JlYXRlRW5jb3VudGVyID0gdHJ1ZVxuICAgICAgICByb2xsT3B0aW9ucy5zZW5kVG9DbGlwYm9hcmQgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBDb0M3Q2hhdE1lc3NhZ2UudHJpZ2dlcihyb2xsT3B0aW9ucylcbiAgfVxuXG4gIGFzeW5jIF9vblNhbkNoZWNrIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoXG4gICAgICAhdGhpcy5hY3Rvci5zeXN0ZW0uc3BlY2lhbC5zYW5Mb3NzLmNoZWNrUGFzc2VkICYmXG4gICAgICAhdGhpcy5hY3Rvci5zeXN0ZW0uc3BlY2lhbC5zYW5Mb3NzLmNoZWNrRmFpbGxlZFxuICAgICkge1xuICAgICAgLy8gdWkubm90aWZpY2F0aW9ucy5pbmZvKCdObyBzYW5pdHkgbG9zcyB2YWx1ZScpO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChcbiAgICAgIGlzQ3RybEtleShldmVudCkgJiZcbiAgICAgIGdhbWUudXNlci5pc0dNXG4gICAgKSB7XG4gICAgICBsZXQgZGlmZmljdWx0eSwgbW9kaWZpZXJcbiAgICAgIGlmICghZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgY29uc3QgdXNhZ2UgPSBhd2FpdCBSb2xsRGlhbG9nLmNyZWF0ZSh7XG4gICAgICAgICAgZGlzYWJsZUZsYXREaWNlTW9kaWZpZXI6IHRydWVcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKHVzYWdlKSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdib251c0RpY2UnKSlcbiAgICAgICAgICBkaWZmaWN1bHR5ID0gTnVtYmVyKHVzYWdlLmdldCgnZGlmZmljdWx0eScpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBsaW5rRGF0YSA9IHtcbiAgICAgICAgY2hlY2s6ICdzYW5sb3NzJyxcbiAgICAgICAgc2FuTWluOiB0aGlzLmFjdG9yLnN5c3RlbS5zcGVjaWFsLnNhbkxvc3MuY2hlY2tQYXNzZWQsXG4gICAgICAgIHNhbk1heDogdGhpcy5hY3Rvci5zeXN0ZW0uc3BlY2lhbC5zYW5Mb3NzLmNoZWNrRmFpbGxlZCxcbiAgICAgICAgc2FuUmVhc29uOiB0aGlzLmFjdG9yLnN5c3RlbS5pbmZvcy50eXBlPy5sZW5ndGhcbiAgICAgICAgICA/IHRoaXMuYWN0b3Iuc3lzdGVtLmluZm9zLnR5cGVcbiAgICAgICAgICA6IHRoaXMuYWN0b3IubmFtZSxcbiAgICAgICAgdG9rZW5LZXk6IHRoaXMuYWN0b3IuYWN0b3JLZXlcbiAgICAgIH1cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpID09PSAnYmxpbmRyb2xsJykge1xuICAgICAgICBsaW5rRGF0YS5ibGluZCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIgIT09ICd1bmRlZmluZWQnKSBsaW5rRGF0YS5tb2RpZmllciA9IG1vZGlmaWVyXG4gICAgICBpZiAodHlwZW9mIGRpZmZpY3VsdHkgIT09ICd1bmRlZmluZWQnKSBsaW5rRGF0YS5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eVxuICAgICAgY29uc3QgbGluayA9IChuZXcgQ29DN0xpbmsoKSkuX2NyZWF0ZURvY3VtZW50TGluayhsaW5rRGF0YSlcbiAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgIGNoYXRIZWxwZXIuY3JlYXRlTWVzc2FnZShcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWVzc2FnZUNoZWNrUmVxdWVzdGVkV2FpdCcsIHtcbiAgICAgICAgICAgIGNoZWNrOiBsaW5rXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzYW5EYXRhID0ge1xuICAgICAgICBzYW5NYXg6IHRoaXMuYWN0b3Iuc2FuTG9zc0NoZWNrRmFpbGxlZCxcbiAgICAgICAgc2FuTWluOiB0aGlzLmFjdG9yLnNhbkxvc3NDaGVja1Bhc3NlZCxcbiAgICAgICAgc2FuUmVhc29uOiB0aGlzLmFjdG9yLnN5c3RlbS5pbmZvcy50eXBlPy5sZW5ndGhcbiAgICAgICAgICA/IHRoaXMuYWN0b3Iuc3lzdGVtLmluZm9zLnR5cGVcbiAgICAgICAgICA6IHRoaXMuYWN0b3IubmFtZSxcbiAgICAgICAgdG9rZW5LZXk6IHRoaXMuYWN0b3IuYWN0b3JLZXlcbiAgICAgIH1cbiAgICAgIFNhbkNoZWNrQ2FyZC5jaGVja1RhcmdldHMoc2FuRGF0YSwgZXZlbnQuc2hpZnRLZXkpXG4gICAgfVxuICB9XG5cbiAgb25DbG9zZVNoZWV0ICgpIHtcbiAgICB0aGlzLmFjdG9yLnVuc2V0QWN0b3JGbGFnKCdkaXNwbGF5Rm9ybXVsYScpXG4gICAgc3VwZXIub25DbG9zZVNoZWV0KClcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSBBY3RvciBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ2FjdG9yJywgJ25wYyddLFxuICAgICAgZHJhZ0Ryb3A6IFt7IGRyYWdTZWxlY3RvcjogJy5pdGVtJywgZHJvcFNlbGVjdG9yOiBudWxsIH1dLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9ucGMtc2hlZXQuaHRtbCcsXG4gICAgICB3aWR0aDogNTgwLFxuICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgIG1pbmltaXphYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnQgdGhlIF91cGRhdGVPYmplY3QgbWV0aG9kIGFzIHJlcXVpcmVkIGJ5IHRoZSBwYXJlbnQgY2xhc3Mgc3BlY1xuICAgKiBUaGlzIGRlZmluZXMgaG93IHRvIHVwZGF0ZSB0aGUgc3ViamVjdCBvZiB0aGUgZm9ybSB3aGVuIHRoZSBmb3JtIGlzIHN1Ym1pdHRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBhc3luYyBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hhcmFjdGVyaXN0aWMtc2NvcmUnKSkge1xuICAgICAgICAgIHRoaXMuYWN0b3Iuc2V0Q2hhcmFjdGVyaXN0aWMoXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUsXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5fdXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSlcbiAgfVxuXG4gIHN0YXRpYyBmb3JjZUF1dG8gKGFwcCwgaHRtbCkge1xuICAgIGh0bWwuaGVpZ2h0KCdhdXRvJylcbiAgfVxuXG4gIHNldFBvc2l0aW9uIChhKSB7XG4gICAgc3VwZXIuc2V0UG9zaXRpb24oYSlcbiAgICBDb0M3TlBDU2hlZXQuZm9yY2VBdXRvKGEsIHRoaXMuX2VsZW1lbnQpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5ICovXG5pbXBvcnQgeyBDb0M3TlBDU2hlZXQgfSBmcm9tICcuL25wYy1zaGVldC5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEFjdG9yU2hlZXQgd2l0aCBzb21lIHZlcnkgc2ltcGxlIG1vZGlmaWNhdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdDcmVhdHVyZVNoZWV0IGV4dGVuZHMgQ29DN05QQ1NoZWV0IHtcbiAgLyoqXG4gICAqIFByZXBhcmUgZGF0YSBmb3IgcmVuZGVyaW5nIHRoZSBBY3RvciBzaGVldFxuICAgKiBUaGUgcHJlcGFyZWQgZGF0YSBvYmplY3QgY29udGFpbnMgYm90aCB0aGUgYWN0b3IgZGF0YSBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgc2hlZXQgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG4gICAgc2hlZXREYXRhLmlzQ3JlYXR1cmUgPSB0cnVlXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSBBY3RvciBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldCcsICdhY3RvcicsICducGMnLCAnY3JlYXR1cmUnXVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBGb3JtQXBwbGljYXRpb24sIGZvdW5kcnksIGdhbWUgKi9cbmV4cG9ydCBjbGFzcyBDb0M3Q3JlYXRlTXl0aG9zRW5jb3VudGVyIGV4dGVuZHMgRm9ybUFwcGxpY2F0aW9uIHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNyddLFxuICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHlMb3NzVHlwZURpYWxvZ1RpdGxlJyksXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9zYW5pdHktbG9zcy10eXBlLmhicycsXG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG4gICAgZGF0YS5pc0ltbXVuaXR5ID0gZGF0YS5vYmplY3QudHlwZSA9PT0gJ2ltbXVuaXR5J1xuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIGh0bWwuZmluZCgnLmZpZWxkX3R5cGUnKS5jaGFuZ2UodGhpcy5fb25TZWxlY3RDaGFuZ2UuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5kaWFsb2ctYnV0dG9uJykuY2xpY2sodGhpcy5fb25CdXR0b25DbGljay5iaW5kKHRoaXMpKVxuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gIH1cblxuICBfb25CdXR0b25DbGljayAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmJ1dHRvbiA9PT0gJ2FkZCcpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJy53aW5kb3ctY29udGVudCcpXG4gICAgICBjb25zdCB0eXBlID0gaHRtbC5maW5kKCcuZmllbGRfdHlwZScpLnZhbCgpXG4gICAgICBjb25zdCBuYW1lID0gaHRtbC5maW5kKCcuZmllbGRfbmFtZScpLnZhbCgpXG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGh0bWwuZmluZCgnLmZpZWxkX3ZhbHVlJykudmFsKCkpXG4gICAgICBjb25zdCBzYW5pdHlMb3NzRXZlbnRzID1cbiAgICAgICAgdGhpcy5vYmplY3QuYWN0b3Iuc3lzdGVtLnNhbml0eUxvc3NFdmVudHMgPz8gW11cbiAgICAgIHNhbml0eUxvc3NFdmVudHMucHVzaCh7XG4gICAgICAgIHR5cGU6IG5hbWUsXG4gICAgICAgIHRvdGFsTG9zczogdmFsdWUsXG4gICAgICAgIGltbXVuaXR5OiB0eXBlID09PSAnaW1tdW5pdHknXG4gICAgICB9KVxuICAgICAgc2FuaXR5TG9zc0V2ZW50cy5zb3J0KGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgICAgICByZXR1cm4gbGVmdC50eXBlLmxvY2FsZUNvbXBhcmUocmlnaHQudHlwZSlcbiAgICAgIH0pXG4gICAgICB0aGlzLm9iamVjdC5hY3Rvci51cGRhdGUoeyAnZGF0YS5zYW5pdHlMb3NzRXZlbnRzJzogc2FuaXR5TG9zc0V2ZW50cyB9KVxuICAgIH1cbiAgICB0aGlzLmNsb3NlKClcbiAgfVxuXG4gIF9vblNlbGVjdENoYW5nZSAoZXZlbnQpIHtcbiAgICBjb25zdCBodG1sID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCcud2luZG93LWNvbnRlbnQnKVxuICAgIHRoaXMub2JqZWN0Lm5hbWUgPSBodG1sLmZpbmQoJy5maWVsZF9uYW1lJykudmFsKClcbiAgICB0aGlzLm9iamVjdC50eXBlID0gaHRtbC5maW5kKCcuZmllbGRfdHlwZScpLnZhbCgpXG4gICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge31cbn1cbiIsIi8qIGdsb2JhbCAkLCBGb250RmFjZSwgZm91bmRyeSwgZ2FtZSwgVGV4dEVkaXRvciwgdWkgKi9cbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi8uLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4uL2FjdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN0FjdG9yU2hlZXQgfSBmcm9tICcuL2Jhc2UuanMnXG5pbXBvcnQgeyBDb0M3Q3JlYXRlTXl0aG9zRW5jb3VudGVyIH0gZnJvbSAnLi4vLi4vYXBwcy9jcmVhdGUtbXl0aG9zLWVuY291bnRlcnMuanMnXG5pbXBvcnQgeyBjaGF0SGVscGVyIH0gZnJvbSAnLi4vLi4vY2hhdC9oZWxwZXIuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q2hhcmFjdGVyU2hlZXQgZXh0ZW5kcyBDb0M3QWN0b3JTaGVldCB7XG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQ29DN0NoYXJhY3RlclNoZWV0Jykge1xuICAgICAgaWYgKCF0aGlzLnN1bW1hcml6ZWQpIHRoaXMuc3VtbWFyaXplZCA9IGZhbHNlXG4gICAgICBsZXQgYnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICAgIGJ1dHRvbnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogdGhpcy5zdW1tYXJpemVkXG4gICAgICAgICAgICA/IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NYXhpbWl6ZScpXG4gICAgICAgICAgICA6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TdW1tYXJpemUnKSxcbiAgICAgICAgICBjbGFzczogJ3Rlc3QtZXh0cmEtaWNvbicsXG4gICAgICAgICAgaWNvbjogdGhpcy5zdW1tYXJpemVkXG4gICAgICAgICAgICA/ICdmYXMgZmEtd2luZG93LW1heGltaXplJ1xuICAgICAgICAgICAgOiAnZmFzIGZhLXdpbmRvdy1taW5pbWl6ZScsXG4gICAgICAgICAgb25jbGljazogZXZlbnQgPT4gdGhpcy50b2dnbGVTaGVldE1vZGUoZXZlbnQpXG4gICAgICAgIH0vKiAsXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogJycsXG4gICAgICAgICAgY2xhc3M6ICdkcmFnLXRlc3QtdGhpbmd5JyxcbiAgICAgICAgICBpY29uOiAnZ2FtZS1pY29uIGdhbWUtaWNvbi1kMTAnLFxuICAgICAgICAgIG9uZHJhZ3N0YXJ0OiAoKSA9PiB1aS5ub3RpZmljYXRpb25zLmluZm8oJ2RyYWcgc3RhcnRlZCcpXG4gICAgICAgIH0gKi9cbiAgICAgIF0uY29uY2F0KGJ1dHRvbnMpXG4gICAgICByZXR1cm4gYnV0dG9uc1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlU2hlZXRNb2RlIChldmVudCkge1xuICAgIHRoaXMuc3VtbWFyaXplZCA9ICF0aGlzLnN1bW1hcml6ZWRcbiAgICBsZXQgb3B0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKENvQzdDaGFyYWN0ZXJTaGVldC5kZWZhdWx0T3B0aW9ucylcbiAgICBpZiAodGhpcy5zdW1tYXJpemVkKSB7XG4gICAgICBvcHRpb25zID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChvcHRpb25zLCB7XG4gICAgICAgIGNsYXNzZXM6IFsnY29jNycsICdhY3RvcicsICdjaGFyYWN0ZXInLCAnc3VtbWFyaXplZCddLFxuICAgICAgICBoZWlnaHQ6IDIwMCxcbiAgICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6IDcwMFxuICAgICAgfSlcbiAgICB9XG4gICAgb3B0aW9ucy50b2tlbiA9IHRoaXMub3B0aW9ucy50b2tlblxuICAgIGF3YWl0IHRoaXMuY2xvc2UoKVxuICAgIGF3YWl0IHRoaXMucmVuZGVyKHRydWUsIG9wdGlvbnMpXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcbiAgICBpZiAoXG4gICAgICB0aGlzLmlzRWRpdGFibGUgJiZcbiAgICAgIHR5cGVvZiB0aGlzLmFjdG9yLmdldEZsYWcoJ0NvQzcnLCAnc2tpbGxMaXN0TW9kZScpID09PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRGbGFnKCdDb0M3JywgJ3NraWxsTGlzdE1vZGUnLCBmYWxzZSlcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy5pc0VkaXRhYmxlICYmXG4gICAgICB0eXBlb2YgdGhpcy5hY3Rvci5nZXRGbGFnKCdDb0M3JywgJ3NraWxsU2hvd1VuY29tbW9uJykgPT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBhd2FpdCB0aGlzLmFjdG9yLnNldEZsYWcoJ0NvQzcnLCAnc2tpbGxTaG93VW5jb21tb24nLCB0cnVlKVxuICAgIH1cbiAgICBzaGVldERhdGEuc2tpbGxMaXN0TW9kZVZhbHVlID1cbiAgICAgIHRoaXMuYWN0b3IuZ2V0RmxhZygnQ29DNycsICdza2lsbExpc3RNb2RlJykgPz8gZmFsc2VcbiAgICBzaGVldERhdGEuc2tpbGxTaG93VW5jb21tb24gPVxuICAgICAgdGhpcy5hY3Rvci5nZXRGbGFnKCdDb0M3JywgJ3NraWxsU2hvd1VuY29tbW9uJykgPz8gdHJ1ZVxuICAgIHNoZWV0RGF0YS5zaG93SWNvbnNPbmx5ID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2hvd0ljb25zT25seScpXG5cbiAgICBpZiAodGhpcy5hY3Rvci5vY2N1cGF0aW9uKSB7XG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uaW5mb3Mub2NjdXBhdGlvbiA9IHRoaXMuYWN0b3Iub2NjdXBhdGlvbi5uYW1lXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uaW5mb3Mub2NjdXBhdGlvblNldCA9IHRydWVcbiAgICB9IGVsc2Ugc2hlZXREYXRhLmRhdGEuc3lzdGVtLmluZm9zLm9jY3VwYXRpb25TZXQgPSBmYWxzZVxuXG4gICAgaWYgKHRoaXMuYWN0b3IuYXJjaGV0eXBlKSB7XG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uaW5mb3MuYXJjaGV0eXBlID0gdGhpcy5hY3Rvci5hcmNoZXR5cGUubmFtZVxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmluZm9zLmFyY2hldHlwZVNldCA9IHRydWVcbiAgICB9IGVsc2Ugc2hlZXREYXRhLmRhdGEuc3lzdGVtLmluZm9zLmFyY2hldHlwZVNldCA9IGZhbHNlXG5cbiAgICBzaGVldERhdGEudG90YWxFeHBlcmllbmNlID0gdGhpcy5hY3Rvci5leHBlcmllbmNlUG9pbnRzXG4gICAgc2hlZXREYXRhLnRvdGFsT2NjdXBhdGlvbiA9IHRoaXMuYWN0b3Iub2NjdXBhdGlvblBvaW50c1NwZW50XG4gICAgc2hlZXREYXRhLmludmFsaWRPY2N1cGF0aW9uUG9pbnRzID1cbiAgICAgIE51bWJlcih0aGlzLmFjdG9yLm9jY3VwYXRpb25Qb2ludHNTcGVudCkgIT09XG4gICAgICBOdW1iZXIodGhpcy5hY3Rvci5zeXN0ZW0uZGV2ZWxvcG1lbnQ/Lm9jY3VwYXRpb24pXG4gICAgc2hlZXREYXRhLnRvdGFsQXJjaGV0eXBlID0gdGhpcy5hY3Rvci5hcmNoZXR5cGVQb2ludHNTcGVudFxuICAgIHNoZWV0RGF0YS5pbnZhbGlkQXJjaGV0eXBlUG9pbnRzID1cbiAgICAgIE51bWJlcih0aGlzLmFjdG9yLmFyY2hldHlwZVBvaW50c1NwZW50KSAhPT1cbiAgICAgIE51bWJlcih0aGlzLmFjdG9yLnN5c3RlbS5kZXZlbG9wbWVudD8uYXJjaGV0eXBlKVxuICAgIHNoZWV0RGF0YS50b3RhbFBlcnNvbmFsID0gdGhpcy5hY3Rvci5wZXJzb25hbFBvaW50c1NwZW50XG4gICAgc2hlZXREYXRhLmludmFsaWRQZXJzb25hbFBvaW50cyA9XG4gICAgICBOdW1iZXIodGhpcy5hY3Rvci5wZXJzb25hbFBvaW50c1NwZW50KSAhPT1cbiAgICAgIE51bWJlcih0aGlzLmFjdG9yLnN5c3RlbS5kZXZlbG9wbWVudD8ucGVyc29uYWwpXG4gICAgc2hlZXREYXRhLmNyZWRpdFJhdGluZ01heCA9IE51bWJlcihcbiAgICAgIHRoaXMuYWN0b3Iub2NjdXBhdGlvbj8uc3lzdGVtLmNyZWRpdFJhdGluZy5tYXhcbiAgICApXG4gICAgc2hlZXREYXRhLmNyZWRpdFJhdGluZ01pbiA9IE51bWJlcihcbiAgICAgIHRoaXMuYWN0b3Iub2NjdXBhdGlvbj8uc3lzdGVtLmNyZWRpdFJhdGluZy5taW5cbiAgICApXG4gICAgc2hlZXREYXRhLmludmFsaWRDcmVkaXRSYXRpbmcgPVxuICAgICAgdGhpcy5hY3Rvci5jcmVkaXRSYXRpbmdTa2lsbD8uc3lzdGVtLmFkanVzdG1lbnRzPy5vY2N1cGF0aW9uID5cbiAgICAgIHNoZWV0RGF0YS5jcmVkaXRSYXRpbmdNYXggfHxcbiAgICAgIHRoaXMuYWN0b3IuY3JlZGl0UmF0aW5nU2tpbGw/LnN5c3RlbS5hZGp1c3RtZW50cz8ub2NjdXBhdGlvbiA8XG4gICAgICBzaGVldERhdGEuY3JlZGl0UmF0aW5nTWluXG4gICAgc2hlZXREYXRhLnB1bHBUYWxlbnRDb3VudCA9IHNoZWV0RGF0YS5pdGVtc0J5VHlwZS50YWxlbnQ/Lmxlbmd0aFxuICAgICAgPyBzaGVldERhdGEuaXRlbXNCeVR5cGUudGFsZW50Py5sZW5ndGhcbiAgICAgIDogMFxuICAgIHNoZWV0RGF0YS5taW5QdWxwVGFsZW50cyA9IHRoaXMuYWN0b3IuYXJjaGV0eXBlPy5zeXN0ZW0udGFsZW50c1xuICAgICAgPyB0aGlzLmFjdG9yLmFyY2hldHlwZT8uc3lzdGVtLnRhbGVudHNcbiAgICAgIDogMFxuICAgIHNoZWV0RGF0YS5pbnZhbGlkUHVscFRhbGVudHMgPSBzaGVldERhdGEucHVscFRhbGVudENvdW50IDwgc2hlZXREYXRhLm1pblB1bHBUYWxlbnRzXG5cbiAgICBzaGVldERhdGEuaGFzRGV2ZWxvcG1lbnRQaGFzZSA9IHRoaXMuYWN0b3IuaGFzRGV2ZWxvcG1lbnRQaGFzZVxuXG4gICAgc2hlZXREYXRhLmFsbG93RGV2ZWxvcG1lbnQgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkZXZlbG9wbWVudEVuYWJsZWQnKVxuICAgIHNoZWV0RGF0YS5hbGxvd0NoYXJDcmVhdGlvbiA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2NoYXJDcmVhdGlvbkVuYWJsZWQnKVxuICAgIHNoZWV0RGF0YS5kZXZlbG9wbWVudFJvbGxGb3JMdWNrID0gZ2FtZS5zZXR0aW5ncy5nZXQoXG4gICAgICAnQ29DNycsXG4gICAgICAnZGV2ZWxvcG1lbnRSb2xsRm9yTHVjaydcbiAgICApXG4gICAgc2hlZXREYXRhLnNob3dEZXZQYW5uZWwgPSBzaGVldERhdGEuYWxsb3dEZXZlbG9wbWVudCB8fCBzaGVldERhdGEuYWxsb3dDaGFyQ3JlYXRpb25cblxuICAgIHNoZWV0RGF0YS5fbW9uZXRhcnlGb3JtYXRzID0gW11cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBDT0M3Lm1vbmV0YXJ5Rm9ybWF0cykge1xuICAgICAgc2hlZXREYXRhLl9tb25ldGFyeUZvcm1hdHMucHVzaCh7IGtleSwgdmFsOiBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5tb25ldGFyeUZvcm1hdHNba2V5XSkgfSlcbiAgICB9XG5cbiAgICBzaGVldERhdGEuc2hvd0N1cnJlbmN5U3ltYm9sID0gWydkZWNpbWFsTGVmdCcsICdkZWNpbWFsUmlnaHQnLCAnaW50ZWdlckxlZnQnLCAnaW50ZWdlclJpZ2h0J10uaW5jbHVkZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdClcblxuICAgIHNoZWV0RGF0YS5fbW9uZXRhcnlUeXBlcyA9IFtdXG4gICAgZm9yIChjb25zdCBrZXkgaW4gQ09DNy5tb25ldGFyeVR5cGVzKSB7XG4gICAgICBpZiAoQ09DNy5tb25ldGFyeVR5cGVzW2tleV0uZmlsdGVyLmxlbmd0aCA9PT0gMCB8fCBDT0M3Lm1vbmV0YXJ5VHlwZXNba2V5XS5maWx0ZXIuaW5jbHVkZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdCkpIHtcbiAgICAgICAgc2hlZXREYXRhLl9tb25ldGFyeVR5cGVzLnB1c2goeyBrZXksIHZhbDogZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubW9uZXRhcnlUeXBlc1trZXldLm5hbWUpIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hlZXREYXRhLm1hbnVhbENyZWRpdCA9IHRoaXMuYWN0b3IuZ2V0QWN0b3JGbGFnKCdtYW51YWxDcmVkaXQnKVxuICAgIGlmICghc2hlZXREYXRhLm1hbnVhbENyZWRpdCkge1xuICAgICAgc2hlZXREYXRhLm1vbmV0YXJ5ID0ge1xuICAgICAgICBzcGVuZGluZ0xldmVsOiBDb0NBY3Rvci5tb25ldGFyeUZvcm1hdChzaGVldERhdGEuZGF0YS5zeXN0ZW0ubW9uZXRhcnkuZm9ybWF0LCBzaGVldERhdGEuZGF0YS5zeXN0ZW0ubW9uZXRhcnkuc3ltYm9sLCB0aGlzLmFjdG9yLnNwZW5kaW5nTGV2ZWwpLFxuICAgICAgICBhc3NldHM6IENvQ0FjdG9yLm1vbmV0YXJ5Rm9ybWF0KHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5tb25ldGFyeS5mb3JtYXQsIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5tb25ldGFyeS5zeW1ib2wsIHRoaXMuYWN0b3IuYXNzZXRzKSxcbiAgICAgICAgY2FzaDogQ29DQWN0b3IubW9uZXRhcnlGb3JtYXQoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdCwgc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LnN5bWJvbCwgdGhpcy5hY3Rvci5jYXNoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5vbmVCbG9ja0JhY2tTdG9yeSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ29uZUJsb2NrQmFja3N0b3J5JylcblxuICAgIHNoZWV0RGF0YS5zdW1tYXJpemVkID0gdGhpcy5zdW1tYXJpemVkICYmICFzaGVldERhdGEucGVybWlzc2lvbkxpbWl0ZWRcbiAgICBzaGVldERhdGEuc2tpbGxMaXN0ID0gW11cbiAgICBsZXQgcHJldmlvdXNTcGVjID0gJydcbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHNoZWV0RGF0YS5za2lsbHMpIHtcbiAgICAgIGlmIChzaGVldERhdGEuc2tpbGxTaG93VW5jb21tb24gfHwgIXNraWxsLnN5c3RlbS5wcm9wZXJ0aWVzLnJhcml0eSkge1xuICAgICAgICBpZiAoc2tpbGwuc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCkge1xuICAgICAgICAgIGlmIChwcmV2aW91c1NwZWMgIT09IHNraWxsLnN5c3RlbS5zcGVjaWFsaXphdGlvbikge1xuICAgICAgICAgICAgcHJldmlvdXNTcGVjID0gc2tpbGwuc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICBzaGVldERhdGEuc2tpbGxMaXN0LnB1c2goe1xuICAgICAgICAgICAgICBpc1NwZWNpYWxpemF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICBuYW1lOiBza2lsbC5zeXN0ZW0uc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5za2lsbExpc3QucHVzaChza2lsbClcbiAgICAgIH1cbiAgICB9XG4gICAgc2hlZXREYXRhLnNraWxsc0J5VmFsdWUgPSBbLi4uc2hlZXREYXRhLnNraWxsc10uc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGIuc3lzdGVtLnZhbHVlIC0gYS5zeXN0ZW0udmFsdWVcbiAgICB9KVxuICAgIHNoZWV0RGF0YS50b3BTa2lsbHMgPSBbLi4uc2hlZXREYXRhLnNraWxsc0J5VmFsdWVdLnNsaWNlKDAsIDE0KVxuICAgIHNoZWV0RGF0YS5za2lsbHNCeVZhbHVlID0gc2hlZXREYXRhLnNraWxsc0J5VmFsdWUuZmlsdGVyKFxuICAgICAgc2tpbGwgPT4gc2hlZXREYXRhLnNraWxsU2hvd1VuY29tbW9uIHx8ICFza2lsbC5zeXN0ZW0ucHJvcGVydGllcy5yYXJpdHlcbiAgICApXG4gICAgc2hlZXREYXRhLnRvcFdlYXBvbnMgPSBbLi4uc2hlZXREYXRhLm1lbGVlV3BuLCAuLi5zaGVldERhdGEucmFuZ2VXcG5dXG4gICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICByZXR1cm4gYS5zeXN0ZW0uc2tpbGwubWFpbj8udmFsdWUgLSBiLnN5c3RlbS5za2lsbC5tYWluPy52YWx1ZVxuICAgICAgfSlcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5zbGljZSgwLCAzKVxuICAgIHNoZWV0RGF0YS5kaXNwbGF5UGxheWVyTmFtZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KFxuICAgICAgJ0NvQzcnLFxuICAgICAgJ2Rpc3BsYXlQbGF5ZXJOYW1lT25TaGVldCdcbiAgICApXG4gICAgaWYgKHNoZWV0RGF0YS5kaXNwbGF5UGxheWVyTmFtZSAmJiAhc2hlZXREYXRhLmRhdGEuc3lzdGVtLmluZm9zLnBsYXllcm5hbWUpIHtcbiAgICAgIGNvbnN0IHVzZXIgPSB0aGlzLmFjdG9yLmNoYXJhY3RlclVzZXJcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5pbmZvcy5wbGF5ZXJuYW1lID0gdXNlci5uYW1lXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hlZXREYXRhLnNraWxsTGlzdEVtcHR5ID0gc2hlZXREYXRhLnNraWxscy5sZW5ndGggPT09IDBcblxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5SXRlbXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ2l0ZW0nKSB8fFxuICAgICAgIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWRcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICdib29rJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTcGVsbHMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3NwZWxsJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICd0YWxlbnQnKSB8fFxuICAgICAgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkICYmIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlVGFsZW50cycpKVxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5U3RhdHVzZXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3N0YXR1cycpIHx8XG4gICAgICAhc2hlZXREYXRhLmRhdGEuc3lzdGVtLmZsYWdzLmxvY2tlZFxuXG4gICAgc2hlZXREYXRhLmhhc0ludmVudG9yeSA9XG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlJdGVtcyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlCb29rcyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTcGVsbHMgfHxcbiAgICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5VGFsZW50cyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTdGF0dXNlcyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlXZWFwb25zXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWRCYWNrc3RvcnkgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmFja3N0b3J5LFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgX3NhdmVTY3JvbGxQb3NpdGlvbnMgKGh0bWwpIHtcbiAgICBzdXBlci5fc2F2ZVNjcm9sbFBvc2l0aW9ucyhodG1sKVxuICAgIGNvbnN0IHNlbGVjdG9ycyA9IFsnLnJpZ2h0LXBhbmVsIC50YWIuZGV2ZWxvcG1lbnQgb2wnXVxuICAgIHRoaXMuX3Njcm9sbFBvc2l0aW9uc1ggPSBzZWxlY3RvcnMucmVkdWNlKChwb3MsIHNlbCkgPT4ge1xuICAgICAgY29uc3QgZWwgPSBodG1sLmZpbmQoc2VsKVxuICAgICAgcG9zW3NlbF0gPSBBcnJheS5mcm9tKGVsKS5tYXAoZWwgPT4gZWwuc2Nyb2xsTGVmdClcbiAgICAgIHJldHVybiBwb3NcbiAgICB9LCB7fSlcbiAgfVxuXG4gIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb25zIChodG1sKSB7XG4gICAgc3VwZXIuX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbnMoaHRtbClcbiAgICBjb25zdCBzZWxlY3RvcnMgPSBbJy5yaWdodC1wYW5lbCAudGFiLmRldmVsb3BtZW50IG9sJ11cbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLl9zY3JvbGxQb3NpdGlvbnNYIHx8IHt9XG4gICAgZm9yIChjb25zdCBzZWwgb2Ygc2VsZWN0b3JzKSB7XG4gICAgICBjb25zdCBlbCA9IGh0bWwuZmluZChzZWwpXG4gICAgICBlbC5lYWNoKChpLCBlbCkgPT4geyBlbC5zY3JvbGxMZWZ0ID0gcG9zaXRpb25zW3NlbF0/LltpXSB8fCAwIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSA1ZSBBY3RvciBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldFYyJywgJ2FjdG9yJywgJ2NoYXJhY3RlciddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9jaGFyYWN0ZXIvaW5kZXguaHRtbCcsXG4gICAgICB3aWR0aDogNjg3LFxuICAgICAgaGVpZ2h0OiA2MjMsXG4gICAgICByZXNpemFibGU6IHRydWUsXG4gICAgICBkcmFnRHJvcDogW3sgZHJhZ1NlbGVjdG9yOiAnLml0ZW0nLCBkcm9wU2VsZWN0b3I6IG51bGwgfV0sXG4gICAgICBzY3JvbGxZOiBbJy5yaWdodC1wYW5lbCAudGFiJ10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXYnLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnc2tpbGxzJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGlmICh0aGlzLmFjdG9yLmlzT3duZXIpIHtcbiAgICAgIC8vIE1PRElGOiAwLjgueCBvd25lciBkZXByZWNhdGVkICA9PiBpc093bmVyXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuc2tpbGwtbmFtZS5yb2xsYWJsZS5mbGFnZ2VkNGRldicpXG4gICAgICAgIC5jbGljayhhc3luYyBldmVudCA9PiB0aGlzLl9vblNraWxsRGV2KGV2ZW50KSlcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5yZXNldC1vY2N1cGF0aW9uJylcbiAgICAgICAgLmNsaWNrKGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWN0b3IucmVzZXRPY2N1cGF0aW9uKCkpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcucmVzZXQtYXJjaGV0eXBlJylcbiAgICAgICAgLmNsaWNrKGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWN0b3IucmVzZXRBcmNoZXR5cGUoKSlcbiAgICAgIGh0bWwuZmluZCgnLm9wZW4taXRlbScpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uSXRlbURldGFpbHMoZXZlbnQpKVxuICAgICAgLy8gaHRtbFxuICAgICAgLy8gICAuZmluZCgnW25hbWU9XCJkYXRhLmF0dHJpYnMuaHAudmFsdWVcIl0nKVxuICAgICAgLy8gICAuY2hhbmdlKGFzeW5jIGV2ZW50ID0+e1xuICAgICAgLy8gICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIC8vICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgLy8gICAgIGxldCB2YWx1ZSA9IE51bWJlciggZXZlbnQuY3VycmVudFRhcmdldD8udmFsdWUpXG4gICAgICAvLyAgICAgaWYoICFpc05hTih2YWx1ZSkpIGF3YWl0IHRoaXMuYWN0b3Iuc2V0SHAoZXZlbnQpXG4gICAgICAvLyAgICAgZWxzZSB1aS5ub3RpZmljYXRpb25zLndhcm4oJ0Vycm9yIHBhcnNpbmcgSFAgdmFsdWUnKVxuICAgICAgLy8gICB9KVxuICAgICAgaHRtbC5maW5kKCcudG9nZ2xlLWxpc3QtbW9kZScpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgICAgdGhpcy50b2dnbGVTa2lsbExpc3RNb2RlKGV2ZW50KVxuICAgICAgfSlcbiAgICAgIGh0bWwuZmluZCgnLnRvZ2dsZS11bmNvbW1vbi1tb2RlJykuY2xpY2soZXZlbnQgPT4ge1xuICAgICAgICB0aGlzLnRvZ2dsZVNraWxsVW5jb21tb25Nb2RlKGV2ZW50KVxuICAgICAgfSlcbiAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBodG1sXG4gICAgICAgICAgLmZpbmQoJy5zYW5pdHktbG9zcy10eXBlLWFkZCcpXG4gICAgICAgICAgLmNsaWNrKHRoaXMuX29uQWRkU2FuaXR5TG9zc1JlYXNvbi5iaW5kKHRoaXMpKVxuICAgICAgICBodG1sXG4gICAgICAgICAgLmZpbmQoJy5zYW5pdHktbG9zcy10eXBlLWRlbGV0ZScpXG4gICAgICAgICAgLmNsaWNrKHRoaXMuX29uRGVsZXRlU2FuaXR5TG9zc1JlYXNvbi5iaW5kKHRoaXMpKVxuICAgICAgICBodG1sXG4gICAgICAgICAgLmZpbmQoJy5teXRob3NFbmNvdW50ZXJzVG90YWxMb3NzJylcbiAgICAgICAgICAuYmx1cih0aGlzLl9vbkVkaXRTYW5pdHlMb3NzUmVhc29uLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWxcbiAgICAgICAgICAuZmluZCgnLnRvZ2dsZS1rZWVwZXItZmxhZ3MnKVxuICAgICAgICAgIC5jbGljayh0aGlzLl9vblRvZ2dsZUtlZXBlckZsYWdzLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWwuZmluZCgnLmFkZC1tb25ldGFyeScpLmNsaWNrKHRoaXMuX29uQWRkTW9uZXRhcnkuYmluZCh0aGlzKSlcbiAgICAgICAgaHRtbC5maW5kKCcucmVtb3ZlLW1vbmV0YXJ5JykuY2xpY2sodGhpcy5fb25SZW1vdmVNb25ldGFyeS5iaW5kKHRoaXMpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9vbkFkZE1vbmV0YXJ5ICgpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmFjdG9yLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLmFjdG9yLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMpIDogW11cbiAgICB2YWx1ZXMucHVzaCh7XG4gICAgICBuYW1lOiAnJyxcbiAgICAgIG1pbjogbnVsbCxcbiAgICAgIG1heDogbnVsbCxcbiAgICAgIGNhc2hUeXBlOiAwLFxuICAgICAgY2FzaFZhbHVlOiAnJyxcbiAgICAgIGFzc2V0c1R5cGU6IDAsXG4gICAgICBhc3NldHNWYWx1ZTogJycsXG4gICAgICBzcGVuZGluZ1R5cGU6IDAsXG4gICAgICBzcGVuZGluZ1ZhbHVlOiAnJ1xuICAgIH0pXG4gICAgdGhpcy5hY3Rvci51cGRhdGUoeyAnc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcyc6IHZhbHVlcyB9KVxuICB9XG5cbiAgX29uUmVtb3ZlTW9uZXRhcnkgKGV2ZW50KSB7XG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBkaXYgPSBhLmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCB2YWx1ZXMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLmFjdG9yLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMpXG4gICAgdmFsdWVzLnNwbGljZShOdW1iZXIoZGl2LmRhdGFzZXQuaW5kZXgpLCAxKVxuICAgIHRoaXMuYWN0b3IudXBkYXRlKHsgJ3N5c3RlbS5tb25ldGFyeS52YWx1ZXMnOiB2YWx1ZXMgfSlcbiAgfVxuXG4gIF9vblRvZ2dsZUtlZXBlckZsYWdzIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBzd2l0Y2ggKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5mbGFnKSB7XG4gICAgICBjYXNlICdteXRob3NJbnNhbml0eUV4cGVyaWVuY2VkJzpcbiAgICAgICAgdGhpcy5hY3Rvci5zZXRGbGFnKFxuICAgICAgICAgICdDb0M3JyxcbiAgICAgICAgICAnbXl0aG9zSW5zYW5pdHlFeHBlcmllbmNlZCcsXG4gICAgICAgICAgIXRoaXMuYWN0b3IubXl0aG9zSW5zYW5pdHlFeHBlcmllbmNlZFxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdteXRob3NIYXJkZW5lZCc6XG4gICAgICAgIHRoaXMuYWN0b3Iuc2V0RmxhZygnQ29DNycsICdteXRob3NIYXJkZW5lZCcsICF0aGlzLmFjdG9yLm15dGhvc0hhcmRlbmVkKVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vbkFkZFNhbml0eUxvc3NSZWFzb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIG5ldyBDb0M3Q3JlYXRlTXl0aG9zRW5jb3VudGVyKFxuICAgICAge1xuICAgICAgICBhY3RvcjogdGhpcy5hY3RvcixcbiAgICAgICAgdHlwZTogZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnR5cGVcbiAgICAgIH0sXG4gICAgICB7fVxuICAgICkucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyBfb25FZGl0U2FuaXR5TG9zc1JlYXNvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBpbnB1dCA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICBjb25zdCBvZmZzZXQgPSBpbnB1dC5jbG9zZXN0KCcuZmxleHJvdycpLmRhdGEoJ29mZnNldCcpXG4gICAgaWYgKHR5cGVvZiB0aGlzLmFjdG9yLnN5c3RlbS5zYW5pdHlMb3NzRXZlbnRzPy5bb2Zmc2V0XT8udG90YWxMb3NzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc2FuaXR5TG9zc0V2ZW50cyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuYWN0b3Iuc3lzdGVtLnNhbml0eUxvc3NFdmVudHMpXG4gICAgICBzYW5pdHlMb3NzRXZlbnRzW29mZnNldF0udG90YWxMb3NzID0gcGFyc2VJbnQoaW5wdXQudmFsKCksIDEwKVxuICAgICAgdGhpcy5hY3Rvci51cGRhdGUoeyAnc3lzdGVtLnNhbml0eUxvc3NFdmVudHMnOiBzYW5pdHlMb3NzRXZlbnRzIH0pXG4gICAgfVxuICB9XG5cbiAgX29uRGVsZXRlU2FuaXR5TG9zc1JlYXNvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3Qgb2Zmc2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgICAgLmNsb3Nlc3QoJy5mbGV4cm93JylcbiAgICAgIC5kYXRhKCdvZmZzZXQnKVxuICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudHMgPSB0aGlzLmFjdG9yLnN5c3RlbS5zYW5pdHlMb3NzRXZlbnRzID8/IFtdXG4gICAgc2FuaXR5TG9zc0V2ZW50cy5zcGxpY2Uob2Zmc2V0LCAxKVxuICAgIHNhbml0eUxvc3NFdmVudHMuc29ydChmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcbiAgICAgIHJldHVybiBsZWZ0LnR5cGUubG9jYWxlQ29tcGFyZShyaWdodC50eXBlKVxuICAgIH0pXG4gICAgdGhpcy5hY3Rvci51cGRhdGUoeyAnc3lzdGVtLnNhbml0eUxvc3NFdmVudHMnOiBzYW5pdHlMb3NzRXZlbnRzIH0pXG4gIH1cblxuICBhc3luYyB0b2dnbGVTa2lsbExpc3RNb2RlIChldmVudCkge1xuICAgIGF3YWl0IHRoaXMuYWN0b3Iuc2V0RmxhZyhcbiAgICAgICdDb0M3JyxcbiAgICAgICdza2lsbExpc3RNb2RlJyxcbiAgICAgICF0aGlzLmFjdG9yLmdldEZsYWcoJ0NvQzcnLCAnc2tpbGxMaXN0TW9kZScpXG4gICAgKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlU2tpbGxVbmNvbW1vbk1vZGUgKGV2ZW50KSB7XG4gICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRGbGFnKFxuICAgICAgJ0NvQzcnLFxuICAgICAgJ3NraWxsU2hvd1VuY29tbW9uJyxcbiAgICAgICF0aGlzLmFjdG9yLmdldEZsYWcoJ0NvQzcnLCAnc2tpbGxTaG93VW5jb21tb24nKVxuICAgIClcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF9vblNraWxsRGV2IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBza2lsbElkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuaXRlbUlkXG4gICAgYXdhaXQgdGhpcy5hY3Rvci5kZXZlbG9wU2tpbGwoc2tpbGxJZCwgZXZlbnQuc2hpZnRLZXkpXG4gIH1cblxuICBfb25JdGVtRGV0YWlscyAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgdHlwZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC50eXBlXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3JbdHlwZV1cbiAgICBpZiAoaXRlbSkgaXRlbS5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IHN5c3RlbSA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGZvcm1EYXRhKT8uc3lzdGVtXG4gICAgaWYgKHN5c3RlbS5tb25ldGFyeT8udmFsdWVzKSB7XG4gICAgICBmb3JtRGF0YVsnc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcyddID0gT2JqZWN0LnZhbHVlcyhzeXN0ZW0ubW9uZXRhcnkudmFsdWVzIHx8IFtdKVxuICAgIH1cbiAgICBzdXBlci5fdXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSlcbiAgfVxuXG4gIHN0YXRpYyByZW5kZXJTaGVldCAoc2hlZXQsIGh0bWwpIHtcbiAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb3ZlcnJpZGVTaGVldEFydHdvcmsnKSkge1xuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFdvcmtTaGVldEJhY2tncm91bmQnKSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0V29ya1NoZWV0QmFja2dyb3VuZCcpLnRvTG93ZXJDYXNlKCkgPT09XG4gICAgICAgICAgJ251bGwnXG4gICAgICAgICkge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tbWFpbi1zaGVldC1iZycsXG4gICAgICAgICAgICBcInVybCggJy4vYXNzZXRzL2ltYWdlcy92b2lkLndlYnAnKVwiXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tbWFpbi1zaGVldC1iZycsXG4gICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnRXb3JrU2hlZXRCYWNrZ3JvdW5kJylcbiAgICAgICAgICApXG4gICAgICAgICAgLy8gY29uc3QgYm9yZGVySW1hZ2UgPSBzaGVldC5lbGVtZW50LmZpbmQoJ2Zvcm0nKS5jc3MoJ2JvcmRlci1pbWFnZScpO1xuICAgICAgICAgIC8vIHNoZWV0LmVsZW1lbnQuZmluZCgnZm9ybScpLmNzcygnYm9yZGVyLWltYWdlJywgJycpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFdvcmtTaGVldEJhY2tncm91bmRUeXBlJykgIT09ICdzbGljZSdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGxldCBzdHlsZVNoZWV0LCBjc3NSdWxlSW5kZXhcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLmhyZWY/LmVuZHNXaXRoKCdjb2M3Zy5jc3MnKSkge1xuICAgICAgICAgICAgICAgIHN0eWxlU2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN0eWxlU2hlZXQpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZVNoZWV0LnJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldC5ydWxlc1tpXS5zZWxlY3RvclRleHQgPT09ICcuc2hlZXRWMi5jaGFyYWN0ZXIgZm9ybSdcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGNzc1J1bGVJbmRleCA9IGlcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3NzUnVsZUluZGV4KSB7XG4gICAgICAgICAgICAgIGNvbnN0IENTU1N0eWxlID0gc3R5bGVTaGVldC5ydWxlc1tjc3NSdWxlSW5kZXhdLnN0eWxlXG4gICAgICAgICAgICAgIENTU1N0eWxlLnJlbW92ZVByb3BlcnR5KCdib3JkZXItaW1hZ2UnKVxuICAgICAgICAgICAgICBDU1NTdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCcsXG4gICAgICAgICAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0V29ya1NoZWV0QmFja2dyb3VuZCcpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgc3dpdGNoIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnRXb3JrU2hlZXRCYWNrZ3JvdW5kVHlwZScpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgICAgICAgICAgICBDU1NTdHlsZS5zZXRQcm9wZXJ0eSgnYmFja2dyb3VuZC1zaXplJywgJ2F1dG8nKVxuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdjb250YWluJzpcbiAgICAgICAgICAgICAgICAgIENTU1N0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kLXNpemUnLCAnY29udGFpbicpXG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvdmVyJzpcbiAgICAgICAgICAgICAgICAgIENTU1N0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kLXNpemUnLCAnY292ZXInKVxuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgQ1NTU3R5bGUuc2V0UHJvcGVydHkoJ2JhY2tncm91bmQtc2l6ZScsICdhdXRvJylcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFdvcmtPdGhlclNoZWV0QmFja2dyb3VuZCcpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBnYW1lLnNldHRpbmdzXG4gICAgICAgICAgICAuZ2V0KCdDb0M3JywgJ2FydFdvcmtPdGhlclNoZWV0QmFja2dyb3VuZCcpXG4gICAgICAgICAgICAudG9Mb3dlckNhc2UoKSA9PT0gJ251bGwnXG4gICAgICAgICkge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tb3RoZXItc2hlZXQtYmcnLFxuICAgICAgICAgICAgXCJ1cmwoICcuL2Fzc2V0cy9pbWFnZXMvdm9pZC53ZWJwJylcIlxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGVldC5lbGVtZW50LmNzcyhcbiAgICAgICAgICAgICctLW90aGVyLXNoZWV0LWJnJyxcbiAgICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFdvcmtPdGhlclNoZWV0QmFja2dyb3VuZCcpXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrU2hlZXRJbWFnZScpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrU2hlZXRJbWFnZScpLnRvTG93ZXJDYXNlKCkgPT09XG4gICAgICAgICAgJ251bGwnXG4gICAgICAgICkge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tbWFpbi1zaGVldC1pbWFnZScsXG4gICAgICAgICAgICBcInVybCggJy4vYXNzZXRzL2ltYWdlcy92b2lkLndlYnAnKVwiXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tbWFpbi1zaGVldC1pbWFnZScsXG4gICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrU2hlZXRJbWFnZScpXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrRnJvbnRDb2xvcicpKSB7XG4gICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICctLW1haW4tc2hlZXQtZnJvbnQtY29sb3InLFxuICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtGcm9udENvbG9yJylcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtCYWNrZ3JvdW5kQ29sb3InKSkge1xuICAgICAgICBzaGVldC5lbGVtZW50LmNzcyhcbiAgICAgICAgICAnLS1tYWluLXNoZWV0LWJhY2stY29sb3InLFxuICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtCYWNrZ3JvdW5kQ29sb3InKVxuICAgICAgICApXG4gICAgICB9XG4gICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0d29ya0ludGVyYWN0aXZlQ29sb3InKSkge1xuICAgICAgICBzaGVldC5lbGVtZW50LmNzcyhcbiAgICAgICAgICAnLS1tYWluLXNoZWV0LWludGVyYWN0aXZlLWNvbG9yJyxcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrSW50ZXJhY3RpdmVDb2xvcicpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmICghZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0d29ya0ZpeGVkU2tpbGxMZW5ndGgnKSkge1xuICAgICAgICBzaGVldC5lbGVtZW50LmNzcygnLS1za2lsbC1sZW5ndGgnLCAnYXV0bycpXG4gICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKCctLXNraWxsLXNwZWNpYWxpemF0aW9uLWxlbmd0aCcsICdhdXRvJylcbiAgICAgIH1cblxuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtNYWluRm9udCcpKSB7XG4gICAgICAgIGNvbnN0IGN1c3RvbVNoZWV0Rm9udCA9IG5ldyBGb250RmFjZShcbiAgICAgICAgICAnY3VzdG9tU2hlZXRGb250JyxcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrTWFpbkZvbnQnKVxuICAgICAgICApXG4gICAgICAgIGN1c3RvbVNoZWV0Rm9udFxuICAgICAgICAgIC5sb2FkKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAobG9hZGVkRmFjZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZm9udHMuYWRkKGxvYWRlZEZhY2UpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGVycm9yKVxuICAgICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrTWFpbkZvbnRCb2xkJykpIHtcbiAgICAgICAgY29uc3QgY3VzdG9tU2hlZXRDdXJzaXZlRm9udCA9IG5ldyBGb250RmFjZShcbiAgICAgICAgICAnY3VzdG9tU2hlZXRGb250JyxcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrTWFpbkZvbnRCb2xkJyksXG4gICAgICAgICAgeyB3ZWlnaHQ6ICdib2xkJyB9XG4gICAgICAgIClcbiAgICAgICAgY3VzdG9tU2hlZXRDdXJzaXZlRm9udFxuICAgICAgICAgIC5sb2FkKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAobG9hZGVkRmFjZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZm9udHMuYWRkKGxvYWRlZEZhY2UpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGVycm9yKVxuICAgICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrTWFpbkZvbnRTaXplJykpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGAke2dhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtNYWluRm9udFNpemUnKX1weGBcbiAgICAgICAgaWYgKHNpemUgIT09ICQoJzpyb290JykuY3NzKCdmb250LXNpemUnKSkge1xuICAgICAgICAgICQoJzpyb290JykuY3NzKCdmb250LXNpemUnLCBzaXplKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzaGVldC5hY3Rvcj8uc3lzdGVtLnBhbm5lbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNoZWV0LmFjdG9yLnN5c3RlbS5wYW5uZWwpKSB7XG4gICAgICAgIGNvbnN0IHBhbm5lbENsYXNzID0gY2hhdEhlbHBlci5jYW1lbENhc2VUb0h5cGhlbihrZXkpXG4gICAgICAgIGNvbnN0IHBhbm5lbCA9IGh0bWwuZmluZChgLnBhbm5lbC4ke3Bhbm5lbENsYXNzfWApXG4gICAgICAgIGlmICh2YWx1ZS5leHBhbmRlZCkgcGFubmVsLmFkZENsYXNzKCdleHBhbmRlZCcpXG4gICAgICAgIGVsc2UgcGFubmVsLnJlbW92ZUNsYXNzKCdleHBhbmRlZCcpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgZ2FtZSAqL1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi9jaGVjay5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdDb21iYXQge1xuICBzdGF0aWMgcmVuZGVyQ29tYmF0VHJhY2tlciAoYXBwLCBodG1sLCBkYXRhKSB7XG4gICAgY29uc3QgY3VycmVudENvbWJhdCA9IGRhdGEuY29tYmF0c1tkYXRhLmN1cnJlbnRJbmRleCAtIDFdXG4gICAgaWYgKCFjdXJyZW50Q29tYmF0KSByZXR1cm5cblxuICAgIC8vIFRPRE8gOiBTaSBsZSBjb21iYXQgZXN0IGRlamEgZGVidXTDqSBhdmFudCBjaGFyZ2VtZW50IGxhIGZvbmN0aW9uIGQnaW5pdGlhdGl2ZSBwb2ludGUgdmVycyBsJ2FuY2llbm5lLlxuICAgIC8vIGxhIGZvbmN0aW9uIGF0dHJpYnXDqWUgZXN0IGRhdGEuY29tYmF0LnJvbGxJbml0aWF0aXZlXG4gICAgaHRtbC5maW5kKCcuY29tYmF0YW50JykuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgIC8vIGlmKCBnYW1lLmNvbWJhdC5zdGFydGVkKXtcblxuICAgICAgY29uc3QgY29tYklkID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbWJhdGFudC1pZCcpXG4gICAgICBjb25zdCBjb21iYXRhbnRDb250cm9sc0RpdiA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5jb21iYXRhbnQtY29udHJvbHMnKVxuICAgICAgLy8gY29uc3QgY29tYmF0YW50ID0gZ2FtZS5jb21iYXQuZ2V0Q29tYmF0YW50KGNvbWJJZCk7XG4gICAgICBjb25zdCBjb21iYXRhbnQgPSBjdXJyZW50Q29tYmF0LmNvbWJhdGFudHMuZ2V0KGNvbWJJZClcblxuICAgICAgaWYgKGNvbWJhdGFudC5nZXRGbGFnKCdDb0M3JywgJ2hhc0d1bicpKSB7XG4gICAgICAgICQoY29tYmF0YW50Q29udHJvbHNEaXYpLnByZXBlbmQoXG4gICAgICAgICAgYDxhIGNsYXNzPVwiY29tYmF0YW50LWNvbnRyb2wgYWN0aXZlIGFkZC1pbml0XCIgdGl0bGU9XCIke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICdDb0M3LlB1dEd1bkF3YXknXG4gICAgICAgICAgKX1cIiBkYXRhLWNvbnRyb2w9XCJkcmF3R3VuXCI+PGkgY2xhc3M9XCJnYW1lLWljb24gZ2FtZS1pY29uLXJldm9sdmVyXCI+PC9pPjwvYT5gXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoY29tYmF0YW50Q29udHJvbHNEaXYpLnByZXBlbmQoXG4gICAgICAgICAgYDxhIGNsYXNzPVwiY29tYmF0YW50LWNvbnRyb2wgYWRkLWluaXRcIiB0aXRsZT1cIiR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgJ0NvQzcuRHJhd0d1bidcbiAgICAgICAgICApfVwiIGRhdGEtY29udHJvbD1cImRyYXdHdW5cIj48aSBjbGFzcz1cImdhbWUtaWNvbiBnYW1lLWljb24tcmV2b2x2ZXJcIj48L2k+PC9hPmBcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdpbml0aWF0aXZlUnVsZScpID09PSAnb3B0aW9uYWwnICYmXG4gICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rpc3BsYXlJbml0QXNUZXh0JylcbiAgICAgICkge1xuICAgICAgICBpZiAoY29tYmF0YW50LmluaXRpYXRpdmUpIHtcbiAgICAgICAgICBjb25zdCB0b2tlbkluaXRpYXRpdmUgPSBlbC5xdWVyeVNlbGVjdG9yKCcudG9rZW4taW5pdGlhdGl2ZScpXG4gICAgICAgICAgY29uc3QgaW5pdGlhdGl2ZVRlc3QgPSB0b2tlbkluaXRpYXRpdmUucXVlcnlTZWxlY3RvcignLmluaXRpYXRpdmUnKVxuICAgICAgICAgIGNvbnN0IHJvbGwgPVxuICAgICAgICAgICAgMTAwICogY29tYmF0YW50LmluaXRpYXRpdmUgLSAxMDAgKiBNYXRoLmZsb29yKGNvbWJhdGFudC5pbml0aWF0aXZlKVxuICAgICAgICAgIHN3aXRjaCAoTWF0aC5mbG9vcihjb21iYXRhbnQuaW5pdGlhdGl2ZSkpIHtcbiAgICAgICAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mdW1ibGU6XG4gICAgICAgICAgICAgIHRva2VuSW5pdGlhdGl2ZS5jbGFzc0xpc3QuYWRkKCdmdW1ibGUnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRnVtYmxlJylcbiAgICAgICAgICAgICAgaW5pdGlhdGl2ZVRlc3QudGl0bGUgPSByb2xsXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZmFpbHVyZTpcbiAgICAgICAgICAgICAgdG9rZW5Jbml0aWF0aXZlLmNsYXNzTGlzdC5hZGQoJ2ZhaWx1cmUnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRmFpbHVyZScpXG4gICAgICAgICAgICAgIGluaXRpYXRpdmVUZXN0LnRpdGxlID0gcm9sbFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXI6XG4gICAgICAgICAgICAgIHRva2VuSW5pdGlhdGl2ZS5jbGFzc0xpc3QuYWRkKCdyZWd1bGFyLXN1Y2Nlc3MnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuUm9sbERpZmZpY3VsdHlSZWd1bGFyJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGluaXRpYXRpdmVUZXN0LnRpdGxlID0gcm9sbFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQ6XG4gICAgICAgICAgICAgIHRva2VuSW5pdGlhdGl2ZS5jbGFzc0xpc3QuYWRkKCdoYXJkLXN1Y2Nlc3MnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuUm9sbERpZmZpY3VsdHlIYXJkJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGluaXRpYXRpdmVUZXN0LnRpdGxlID0gcm9sbFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWU6XG4gICAgICAgICAgICAgIHRva2VuSW5pdGlhdGl2ZS5jbGFzc0xpc3QuYWRkKCdleHRyZW1lLXN1Y2Nlc3MnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuUm9sbERpZmZpY3VsdHlFeHRyZW1lJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGluaXRpYXRpdmVUZXN0LnRpdGxlID0gcm9sbFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmNyaXRpY2FsOlxuICAgICAgICAgICAgICB0b2tlbkluaXRpYXRpdmUuY2xhc3NMaXN0LmFkZCgnY3JpdGljYWwnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuUm9sbERpZmZpY3VsdHlDcml0aWNhbCdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC50aXRsZSA9IHJvbGxcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29tYmF0YW50LmluaXRpYXRpdmUgPCAwKSB7XG4gICAgICAgIGNvbnN0IGg0ID0gZWwucXVlcnlTZWxlY3RvcignLnRva2VuLW5hbWUnKS5xdWVyeVNlbGVjdG9yKCdoNCcpXG4gICAgICAgIGNvbnN0IHNwYW4gPSBlbC5xdWVyeVNlbGVjdG9yKCdzcGFuLmluaXRpYXRpdmUnKVxuICAgICAgICBoNC5zdHlsZS5mb250V2VpZ2h0ID0gJzkwMCdcbiAgICAgICAgaDQuc3R5bGUudGV4dFNoYWRvdyA9ICcxcHggMXB4IDRweCBkYXJrcmVkJ1xuICAgICAgICBzcGFuLnN0eWxlLmZvbnRXZWlnaHQgPSAnOTAwJ1xuICAgICAgICBzcGFuLnN0eWxlLnRleHRTaGFkb3cgPSAnMXB4IDFweCA0cHggZGFya3JlZCdcblxuICAgICAgICBlbC5zdHlsZS5jb2xvciA9ICdkYXJrcmVkJ1xuICAgICAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kID0gJ2JsYWNrJ1xuICAgICAgICBlbC5zdHlsZS5mb250V2VpZ2h0ID0gJzkwMCdcbiAgICAgIH1cbiAgICB9KVxuICAgIGh0bWwuZmluZCgnLmFkZC1pbml0JykuY2xpY2soZXZlbnQgPT4gQ29DN0NvbWJhdC5fb25Ub2dnbGVHdW4oZXZlbnQpKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9vblRvZ2dsZUd1biAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBjb25zdCBidG4gPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgbGkgPSBidG4uY2xvc2VzdCgnLmNvbWJhdGFudCcpXG4gICAgY29uc3QgYyA9IGF3YWl0IGdhbWUuY29tYmF0LmNvbWJhdGFudHMuZ2V0KGxpLmRhdGFzZXQuY29tYmF0YW50SWQpXG4gICAgaWYgKGMuYWN0b3IuaXNPd25lcikge1xuICAgICAgaWYgKGMuZ2V0RmxhZygnQ29DNycsICdoYXNHdW4nKSkge1xuICAgICAgICBhd2FpdCBjLnNldEZsYWcoJ0NvQzcnLCAnaGFzR3VuJywgZmFsc2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBjLnNldEZsYWcoJ0NvQzcnLCAnaGFzR3VuJywgdHJ1ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBuZXdJbml0ID0gYXdhaXQgYy5hY3Rvci5yb2xsSW5pdGlhdGl2ZSghIWMuZ2V0RmxhZygnQ29DNycsICdoYXNHdW4nKSlcbiAgICBpZiAoYy5nZXRGbGFnKCdDb0M3JywgJ2hhc0d1bicpKSB7XG4gICAgICBpZiAoYy5pbml0aWF0aXZlIDwgbmV3SW5pdCkgZ2FtZS5jb21iYXQuc2V0SW5pdGlhdGl2ZShjLmlkLCBuZXdJbml0KVxuICAgIH0gZWxzZSBnYW1lLmNvbWJhdC5zZXRJbml0aWF0aXZlKGMuaWQsIG5ld0luaXQpXG4gIH1cbn1cblxuLyoqXG4gKiBSb2xsIGluaXRpYXRpdmUgZm9yIG9uZSBvciBtdWx0aXBsZSBDb21iYXRhbnRzIHdpdGhpbiB0aGUgQ29tYmF0IGVudGl0eVxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGlkcyAgICAgQSBDb21iYXRhbnQgaWQgb3IgQXJyYXkgb2YgaWRzIGZvciB3aGljaCB0byByb2xsXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dICAgICBBZGRpdGlvbmFsIG9wdGlvbnMgd2hpY2ggbW9kaWZ5IGhvdyBpbml0aWF0aXZlIHJvbGxzIGFyZSBjcmVhdGVkIG9yIHByZXNlbnRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IFtvcHRpb25zLmZvcm11bGFdICAgICAgICAgQSBub24tZGVmYXVsdCBpbml0aWF0aXZlIGZvcm11bGEgdG8gcm9sbC4gT3RoZXJ3aXNlIHRoZSBzeXN0ZW0gZGVmYXVsdCBpcyB1c2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy51cGRhdGVUdXJuPXRydWVdICAgICBVcGRhdGUgdGhlIENvbWJhdCB0dXJuIGFmdGVyIGFkZGluZyBuZXcgaW5pdGlhdGl2ZSBzY29yZXMgdG8ga2VlcCB0aGUgdHVybiBvbiB0aGUgc2FtZSBDb21iYXRhbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMubWVzc2FnZU9wdGlvbnM9e31dICAgIEFkZGl0aW9uYWwgb3B0aW9ucyB3aXRoIHdoaWNoIHRvIGN1c3RvbWl6ZSBjcmVhdGVkIENoYXQgTWVzc2FnZXNcbiAqIEByZXR1cm4ge1Byb21pc2U8Q29tYmF0Pn0gICAgICAgIEEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byB0aGUgdXBkYXRlZCBDb21iYXQgZW50aXR5IG9uY2UgdXBkYXRlcyBhcmUgY29tcGxldGUuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByb2xsSW5pdGlhdGl2ZSAoXG4gIGlkcyxcbiAgeyBmb3JtdWxhID0gbnVsbCwgdXBkYXRlVHVybiA9IHRydWUsIG1lc3NhZ2VPcHRpb25zID0ge30gfSA9IHt9XG4pIHtcbiAgLy8gSXRlcmF0ZSBvdmVyIENvbWJhdGFudHMsIHBlcmZvcm1pbmcgYW4gaW5pdGlhdGl2ZSByb2xsIGZvciBlYWNoXG4gIGNvbnN0IHVwZGF0ZXMgPSBbXVxuICBmb3IgKGNvbnN0IFssIGlkXSBvZiBpZHMuZW50cmllcygpKSB7XG4gICAgLy8gR2V0IENvbWJhdGFudCBkYXRhIChub24tc3RyaWN0bHkpXG4gICAgY29uc3QgY29tYmF0YW50ID0gdGhpcy5jb21iYXRhbnRzLmdldChpZClcblxuICAgIC8vIFByb2R1Y2UgYW4gaW5pdGlhdGl2ZSByb2xsIGZvciB0aGUgQ29tYmF0YW50XG4gICAgY29uc3Qgcm9sbCA9IGF3YWl0IGNvbWJhdGFudC5hY3Rvci5yb2xsSW5pdGlhdGl2ZShcbiAgICAgICEhY29tYmF0YW50LmdldEZsYWcoJ0NvQzcnLCAnaGFzR3VuJylcbiAgICApXG4gICAgdXBkYXRlcy5wdXNoKHsgX2lkOiBpZCwgaW5pdGlhdGl2ZTogcm9sbCB9KVxuICB9XG4gIGlmICghdXBkYXRlcy5sZW5ndGgpIHJldHVybiB0aGlzXG5cbiAgLy8gVXBkYXRlIG11bHRpcGxlIGNvbWJhdGFudHNcbiAgYXdhaXQgdGhpcy51cGRhdGVFbWJlZGRlZERvY3VtZW50cygnQ29tYmF0YW50JywgdXBkYXRlcylcblxuICByZXR1cm4gdGhpc1xufVxuIiwiLyogZ2xvYmFsICQsIENPTkZJRywgRm9ybUFwcGxpY2F0aW9uLCBmb3VuZHJ5LCBnYW1lLCBJdGVtICovXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DSURCYXRjaCBleHRlbmRzIEZvcm1BcHBsaWNhdGlvbiB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnZGlhbG9nJywgJ2NvYy1pZC1lZGl0b3InXSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2NvYy1pZC1iYXRjaC5oYnMnLFxuICAgICAgd2lkdGg6IDcwMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgdGl0bGU6ICdDb0M3LkNvQ0lERmxhZy50aXRsZScsXG4gICAgICBjbG9zZU9uU3VibWl0OiBmYWxzZSxcbiAgICAgIHN1Ym1pdE9uQ2xvc2U6IGZhbHNlLFxuICAgICAgc3VibWl0T25DaGFuZ2U6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGNvbnN0IHNoZWV0RGF0YSA9IHN1cGVyLmdldERhdGEoKVxuICAgIHNoZWV0RGF0YS5mb3VuZEtleXMgPSBPYmplY3Qua2V5cyhzaGVldERhdGEub2JqZWN0LmZvdW5kS2V5cykucmVkdWNlKChvdXQsIGtleSkgPT4ge1xuICAgICAgb3V0LnB1c2goeyBuYW1lOiBrZXksIGtleTogc2hlZXREYXRhLm9iamVjdC5mb3VuZEtleXNba2V5XSB9KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH0sIFtdKS5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICBzaGVldERhdGEubWlzc2luZ05hbWVzID0gT2JqZWN0LmtleXMoc2hlZXREYXRhLm9iamVjdC5taXNzaW5nTmFtZXMpLnJlZHVjZSgob3V0LCBrZXkpID0+IHtcbiAgICAgIG91dC5wdXNoKHsga2V5OiBzaGVldERhdGEub2JqZWN0LmZvdW5kS2V5c1trZXldID8/ICcnLCBuYW1lOiBrZXksIGN1c3RvbTogc2hlZXREYXRhLm9iamVjdC5taXNzaW5nTmFtZXNba2V5XSwgc3VmZml4OiBzaGVldERhdGEub2JqZWN0Lm1pc3NpbmdOYW1lc1trZXldLnJlcGxhY2UodGhpcy5vYmplY3Quc3VmZml4UmVnRXhwLCAnJykgfSlcbiAgICAgIHJldHVybiBvdXRcbiAgICB9LCBbXSkuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGh0bWwuZmluZCgnLmV4aXN0aW5nJykuY2hhbmdlKHRoaXMub25TZXROYW1lLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuZmEtd2FuZC1tYWdpYycpLmNsaWNrKHRoaXMub25DbGlja0d1ZXNzLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCdpbnB1dCcpLmtleXVwKHRoaXMub25LZXl1cC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgb25TZXROYW1lIChldmVudCkge1xuICAgIGNvbnN0IG9iaiA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICB0aGlzLm9iamVjdC5taXNzaW5nTmFtZXNbb2JqLmNsb3Nlc3QoJ2xpJykuZGF0YSgnbmFtZScpXSA9IG9iai52YWwoKVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBvbkNsaWNrR3Vlc3MgKGV2ZW50KSB7XG4gICAgY29uc3Qgb2JqID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgIGNvbnN0IG5hbWUgPSBvYmouY2xvc2VzdCgnbGknKS5kYXRhKCduYW1lJylcbiAgICB0aGlzLm9iamVjdC5taXNzaW5nTmFtZXNbbmFtZV0gPSB0aGlzLm9iamVjdC5pZFByZWZpeCArIENvQzdVdGlsaXRpZXMudG9LZWJhYkNhc2UobmFtZSlcbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgb25LZXl1cCAoZXZlbnQpIHtcbiAgICBjb25zdCBvYmogPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgY29uc3QgbmFtZSA9IG9iai5jbG9zZXN0KCdsaScpLmRhdGEoJ25hbWUnKVxuICAgIHRoaXMub2JqZWN0Lm1pc3NpbmdOYW1lc1tuYW1lXSA9IHRoaXMub2JqZWN0LmlkUHJlZml4ICsgb2JqLnZhbCgpXG4gIH1cblxuICBhc3luYyBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICBpZiAoZXZlbnQuc3VibWl0dGVyKSB7XG4gICAgICBpZiAodGhpcy5vYmplY3QudHlwZU5hbWUgPT09IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FbnRpdGllcy5Ta2lsbCcpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICBhd2FpdCBDb0NJREJhdGNoLnByb2Nlc3NTa2lsbEtleXModGhpcy5vYmplY3QudXBkYXRlTGlzdCwgdGhpcy5vYmplY3QubWlzc2luZ05hbWVzKVxuICAgICAgfVxuICAgICAgdGhpcy5vYmplY3QucmVzb2x2ZSh0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBwcm9jZXNzU2tpbGxLZXlzICh1cGRhdGVMaXN0LCBtaXNzaW5nTmFtZXMpIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdXG4gICAgY29uc3QgYWN0b3JzID0ge31cbiAgICBjb25zdCBzY2VuZXMgPSB7fVxuICAgIGZvciAoY29uc3QgdXBkYXRlIG9mIHVwZGF0ZUxpc3QpIHtcbiAgICAgIHVwZGF0ZS5jb2NpZEZsYWcuaWQgPSBtaXNzaW5nTmFtZXNbdXBkYXRlLm5hbWVdXG4gICAgICBpZiAodHlwZW9mIHVwZGF0ZS5jb2NpZEZsYWcubGFuZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlLmNvY2lkRmxhZy5sYW5nID0gZ2FtZS5pMThuLmxhbmdcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdXBkYXRlLmNvY2lkRmxhZy5wcmlvcml0eSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlLmNvY2lkRmxhZy5wcmlvcml0eSA9IDBcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdXBkYXRlLmNvY2lkRmxhZy5lcmFzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB1cGRhdGUuY29jaWRGbGFnLmVyYXMgPSB7fVxuICAgICAgfVxuICAgICAgY29uc3QgZmxhZ3MgPSBmb3VuZHJ5LnV0aWxzLmZsYXR0ZW5PYmplY3QoeyBmbGFnczogeyBDb0M3OiB7IGNvY2lkRmxhZzogdXBkYXRlLmNvY2lkRmxhZyB9IH0gfSlcbiAgICAgIGlmICh0eXBlb2YgdXBkYXRlLnNjZW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHlwZW9mIHNjZW5lc1t1cGRhdGUuc2NlbmVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHVwZGF0ZS5zY2VuZSlcbiAgICAgICAgICBzY2VuZXNbdXBkYXRlLnNjZW5lXSA9IHNjZW5lLnRvT2JqZWN0KClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlbk9mZnNldCA9IHNjZW5lc1t1cGRhdGUuc2NlbmVdLnRva2Vucy5maW5kSW5kZXgodCA9PiB0Ll9pZCA9PT0gdXBkYXRlLnRva2VuKVxuICAgICAgICBpZiAodG9rZW5PZmZzZXQgPiAtMSkge1xuICAgICAgICAgIGNvbnN0IGl0ZW1PZmZzZXQgPSBzY2VuZXNbdXBkYXRlLnNjZW5lXS50b2tlbnNbdG9rZW5PZmZzZXRdLmFjdG9yRGF0YS5pdGVtcy5maW5kSW5kZXgoaSA9PiBpLl9pZCA9PT0gdXBkYXRlLml0ZW0pXG4gICAgICAgICAgaWYgKGl0ZW1PZmZzZXQgPiAtMSkge1xuICAgICAgICAgICAgY29uc3QgZXhwYW5kZWRGbGFncyA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KE9iamVjdC5lbnRyaWVzKGZsYWdzKS5yZWR1Y2UoKG91dCwgZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5WzBdLm1hdGNoKC9eZmxhZ3NcXC5Db0M3XFwuY29jaWRGbGFnLykpIHtcbiAgICAgICAgICAgICAgICBvdXRbZW50cnlbMF1dID0gZW50cnlbMV1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gb3V0XG4gICAgICAgICAgICB9LCB7fSkpXG4gICAgICAgICAgICBzY2VuZXNbdXBkYXRlLnNjZW5lXS50b2tlbnNbdG9rZW5PZmZzZXRdLmFjdG9yRGF0YS5pdGVtc1tpdGVtT2Zmc2V0XSA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc2NlbmVzW3VwZGF0ZS5zY2VuZV0udG9rZW5zW3Rva2VuT2Zmc2V0XS5hY3RvckRhdGEuaXRlbXNbaXRlbU9mZnNldF0sIGV4cGFuZGVkRmxhZ3MpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB1cGRhdGUuYWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0b3JzW3VwZGF0ZS5hY3Rvcl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgYWN0b3JzW3VwZGF0ZS5hY3Rvcl0gPSBbXVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB7XG4gICAgICAgICAgX2lkOiB1cGRhdGUuaXRlbVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGZsYWdzKSkge1xuICAgICAgICAgIGlmIChrZXkubWF0Y2goL15mbGFnc1xcLkNvQzdcXC5jb2NpZEZsYWcvKSkge1xuICAgICAgICAgICAgaXRlbVtrZXldID0gZmxhZ3Nba2V5XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhY3RvcnNbdXBkYXRlLmFjdG9yXS5wdXNoKGl0ZW0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgIF9pZDogdXBkYXRlLml0ZW1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhmbGFncykpIHtcbiAgICAgICAgICBpZiAoa2V5Lm1hdGNoKC9eZmxhZ3NcXC5Db0M3XFwuY29jaWRGbGFnLykpIHtcbiAgICAgICAgICAgIGl0ZW1ba2V5XSA9IGZsYWdzW2tleV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICBhd2FpdCBJdGVtLnVwZGF0ZURvY3VtZW50cyhpdGVtcylcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKGFjdG9ycykubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IGFjdG9ySWQgb2YgT2JqZWN0LmtleXMoYWN0b3JzKSkge1xuICAgICAgICBhd2FpdCBJdGVtLnVwZGF0ZURvY3VtZW50cyhhY3RvcnNbYWN0b3JJZF0sIHsgcGFyZW50OiBnYW1lLmFjdG9ycy5nZXQoYWN0b3JJZCkgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHNjZW5lcykubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IHNjZW5lSWQgb2YgT2JqZWN0LmtleXMoc2NlbmVzKSkge1xuICAgICAgICBjb25zdCBzY2VuZSA9IGdhbWUuc2NlbmVzLmdldChzY2VuZUlkKVxuICAgICAgICBzY2VuZS51cGRhdGUoc2NlbmVzW3NjZW5lSWRdKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHBvcHVsYXRlU2tpbGxLZXlzICh1cGRhdGVMaXN0LCBtaXNzaW5nTmFtZXMsIGZvdW5kS2V5cykge1xuICAgIGZvciAoY29uc3QgYWN0b3Igb2YgZ2FtZS5hY3RvcnMuY29udGVudHMpIHtcbiAgICAgIGNvbnN0IGFjdG9yRGF0YSA9IGFjdG9yLnRvT2JqZWN0KClcbiAgICAgIGlmIChhY3RvckRhdGEuaXRlbXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGFjdG9yRGF0YS5pdGVtcykge1xuICAgICAgICAgIGNvbnN0IGl0ZW1EYXRhID0gaXRlbSBpbnN0YW5jZW9mIENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3MgPyBpdGVtLnRvT2JqZWN0KCkgOiBpdGVtXG4gICAgICAgICAgaWYgKGl0ZW1EYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICAgIGlmICghaXRlbURhdGEuZmxhZ3MuQ29DNz8uY29jaWRGbGFnPy5pZD8ubWF0Y2goL15pLnNraWxsLykpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtaXNzaW5nTmFtZXNbaXRlbURhdGEubmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID0gJydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1cGRhdGVMaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgIGFjdG9yOiBhY3Rvci5faWQsXG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbURhdGEuX2lkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW1EYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgY29jaWRGbGFnOiBpdGVtRGF0YS5mbGFncy5Db0M3Py5jb2NpZEZsYWcgPz8ge31cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZvdW5kS2V5c1tpdGVtRGF0YS5uYW1lXSA9IGl0ZW1EYXRhLmZsYWdzLkNvQzcuY29jaWRGbGFnLmlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBnYW1lLml0ZW1zLmNvbnRlbnRzKSB7XG4gICAgICBjb25zdCBpdGVtRGF0YSA9IGl0ZW0gaW5zdGFuY2VvZiBDT05GSUcuSXRlbS5kb2N1bWVudENsYXNzID8gaXRlbS50b09iamVjdCgpIDogaXRlbVxuICAgICAgaWYgKGl0ZW1EYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgaWYgKCFpdGVtRGF0YS5mbGFncy5Db0M3Py5jb2NpZEZsYWc/LmlkPy5tYXRjaCgvXmkuc2tpbGwvKSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID0gJydcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlTGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGl0ZW06IGl0ZW1EYXRhLl9pZCxcbiAgICAgICAgICAgIG5hbWU6IGl0ZW1EYXRhLm5hbWUsXG4gICAgICAgICAgICBjb2NpZEZsYWc6IGl0ZW1EYXRhLmZsYWdzLkNvQzc/LmNvY2lkRmxhZyA/PyB7fVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm91bmRLZXlzW2l0ZW1EYXRhLm5hbWVdID0gaXRlbURhdGEuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNjZW5lIG9mIGdhbWUuc2NlbmVzKSB7XG4gICAgICBjb25zdCBzY2VuZURhdGEgPSBzY2VuZS50b09iamVjdCgpXG4gICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHNjZW5lRGF0YS50b2tlbnMgPz8gW10pIHtcbiAgICAgICAgaWYgKHRva2VuLmFjdG9ySWQgJiYgIXRva2VuLmFjdG9yTGluaykge1xuICAgICAgICAgIGNvbnN0IGFjdG9yRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRva2VuLmFjdG9yRGF0YSlcbiAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYWN0b3JEYXRhLml0ZW1zID8/IFtdKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtRGF0YSA9IGl0ZW0gaW5zdGFuY2VvZiBDT05GSUcuSXRlbS5kb2N1bWVudENsYXNzID8gaXRlbS50b09iamVjdCgpIDogaXRlbVxuICAgICAgICAgICAgaWYgKGl0ZW1EYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICAgICAgaWYgKCFpdGVtRGF0YS5mbGFncy5Db0M3Py5jb2NpZEZsYWc/LmlkPy5tYXRjaCgvXmkuc2tpbGwvKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID0gJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIHNjZW5lOiBzY2VuZURhdGEuX2lkLFxuICAgICAgICAgICAgICAgICAgdG9rZW46IHRva2VuLl9pZCxcbiAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1EYXRhLl9pZCxcbiAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW1EYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICBjb2NpZEZsYWc6IGl0ZW1EYXRhLmZsYWdzLkNvQzc/LmNvY2lkRmxhZyA/PyB7fVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm91bmRLZXlzW2l0ZW1EYXRhLm5hbWVdID0gaXRlbURhdGEuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMobWlzc2luZ05hbWVzKS5maWx0ZXIoa2V5ID0+IG1pc3NpbmdOYW1lc1trZXldID09PSAnJykubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgaXRlbXMgPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZnJvbUNvQ0lEUmVnZXhCZXN0KHsgY29jaWRSZWdFeHA6IC9eaVxcLnNraWxsXFwuLywgdHlwZTogJ2knLCBlcmE6IGZhbHNlIH0pXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgZm91bmRLZXlzW2l0ZW0ubmFtZV0gPSBpdGVtLmZsYWdzLkNvQzcuY29jaWRGbGFnLmlkXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBmb3VuZHJ5LnV0aWxzLmZsYXR0ZW5PYmplY3QoZ2FtZS5pMThuLnRyYW5zbGF0aW9ucy5Db0M3LkNvQ0lERmxhZy5rZXlzID8/IHt9KSkge1xuICAgICAgICBmb3VuZEtleXNbZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcua2V5cy4nICsga2V5KV0gPSBrZXlcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBtaXNzaW5nTmFtZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmb3VuZEtleXNbbmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbWlzc2luZ05hbWVzW25hbWVdID0gZm91bmRLZXlzW25hbWVdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlICh0eXBlKSB7XG4gICAgY29uc3QgdXBkYXRlTGlzdCA9IFtdXG4gICAgY29uc3QgbWlzc2luZ05hbWVzID0ge31cbiAgICBjb25zdCBmb3VuZEtleXMgPSB7fVxuICAgIGxldCB0eXBlTmFtZSA9ICcnXG4gICAgbGV0IGlkUHJlZml4ID0gJydcbiAgICBsZXQgc3VmZml4UmVnRXhwID0gbnVsbFxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnc2tpbGwnOlxuICAgICAgICB0eXBlTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FbnRpdGllcy5Ta2lsbCcpXG4gICAgICAgIGlkUHJlZml4ID0gJ2kuc2tpbGwuJ1xuICAgICAgICBzdWZmaXhSZWdFeHAgPSAvXmlcXC5za2lsbFxcLi9cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBhd2FpdCBDb0NJREJhdGNoLnBvcHVsYXRlU2tpbGxLZXlzKHVwZGF0ZUxpc3QsIG1pc3NpbmdOYW1lcywgZm91bmRLZXlzKVxuICAgIGlmIChPYmplY3Qua2V5cyhtaXNzaW5nTmFtZXMpLmZpbHRlcihrZXkgPT4gbWlzc2luZ05hbWVzW2tleV0gPT09ICcnKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGF3YWl0IENvQ0lEQmF0Y2gucHJvY2Vzc1NraWxsS2V5cyh1cGRhdGVMaXN0LCBtaXNzaW5nTmFtZXMpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBjb25zdCBkbGcgPSBuZXcgQ29DSURCYXRjaCh7IHR5cGVOYW1lLCBpZFByZWZpeCwgc3VmZml4UmVnRXhwLCB1cGRhdGVMaXN0LCBtaXNzaW5nTmFtZXMsIGZvdW5kS2V5cywgcmVzb2x2ZSB9KVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBDT05GSUcsIERpYWxvZywgZm91bmRyeSwgZ2FtZSwgdWkgKi9cbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi9pdGVtcy9pdGVtLmpzJ1xuaW1wb3J0IHsgQ29DSURCYXRjaCB9IGZyb20gJy4vYXBwcy9jb2MtaWQtYmF0Y2guanMnXG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVyIHtcbiAgc3RhdGljIGFzeW5jIGNoZWNrRm9yVXBkYXRlICgpIHtcbiAgICBsZXQgc3lzdGVtVXBkYXRlVmVyc2lvbiA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3N5c3RlbVVwZGF0ZVZlcnNpb24nKVxuICAgIGlmIChnYW1lLmFjdG9ycy5zaXplICsgZ2FtZS5zY2VuZXMuc2l6ZSArIGdhbWUuaXRlbXMuc2l6ZSArIGdhbWUuam91cm5hbC5zaXplICsgZ2FtZS50YWJsZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGFjdG9ycywgaXRlbXMsIGpvdXJuYWxzLCByb2xsIHRhYmxlcywgb3Igc2NlbmVzIHNraXAgd29ybGQgdXBkYXRlXG4gICAgICBzeXN0ZW1VcGRhdGVWZXJzaW9uID0gZ2FtZS5zeXN0ZW0udmVyc2lvblxuICAgICAgYXdhaXQgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnc3lzdGVtVXBkYXRlVmVyc2lvbicsIHN5c3RlbVVwZGF0ZVZlcnNpb24pXG4gICAgfVxuICAgIGNvbnN0IHJ1bk1pZ3JhdGUgPSBmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUuc3lzdGVtLnZlcnNpb24sIHN5c3RlbVVwZGF0ZVZlcnNpb24gPz8gJzAnKVxuICAgIHRoaXMudXBkYXRlZE1vZHVsZXMgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzeXN0ZW1VcGRhdGVkTW9kdWxlVmVyc2lvbicpIHx8IHt9XG4gICAgdGhpcy5jdXJyZW50TW9kdWxlcyA9IHt9XG4gICAgZm9yIChjb25zdCBwYWNrIG9mIGdhbWUucGFja3MpIHtcbiAgICAgIGlmICghWydDb0M3JywgJ3dvcmxkJ10uaW5jbHVkZXMocGFjay5tZXRhZGF0YS5wYWNrYWdlTmFtZSkgJiYgWydBY3RvcicsICdJdGVtJywgJ1NjZW5lJ10uaW5jbHVkZXMocGFjay5tZXRhZGF0YS50eXBlKSkge1xuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmN1cnJlbnRNb2R1bGVzLCBwYWNrLm1ldGFkYXRhLnBhY2thZ2VOYW1lKSkge1xuICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byBjaGVjayBlYWNoIG1vZHVsZSBvbmNlXG4gICAgICAgICAgY29uc3QgbW9kdWxlID0gZ2FtZS5tb2R1bGVzLmdldChwYWNrLm1ldGFkYXRhLnBhY2thZ2VOYW1lKVxuICAgICAgICAgIGlmIChtb2R1bGUpIHtcbiAgICAgICAgICAgIGlmIChydW5NaWdyYXRlIHx8ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy51cGRhdGVkTW9kdWxlcywgbW9kdWxlLmlkKSB8fCBTdHJpbmcodGhpcy51cGRhdGVkTW9kdWxlc1ttb2R1bGUuaWRdKSAhPT0gU3RyaW5nKG1vZHVsZS52ZXJzaW9uKSkge1xuICAgICAgICAgICAgICAvLyBBIG1pZ3JhdGlvbiBpcyByZXF1aXJlZCwgbW9kdWxlIGhhcyBub3QgYmVlbiB1cGRhdGVkIGJlZm9yZSwgb3IgdGhlIHZlcnNpb24gbnVtYmVyIGhhcyBjaGFuZ2VkXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZHVsZXNbbW9kdWxlLmlkXSA9IG1vZHVsZS52ZXJzaW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChydW5NaWdyYXRlIHx8IE9iamVjdC5rZXlzKHRoaXMuY3VycmVudE1vZHVsZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBuZXcgRGlhbG9nKHtcbiAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1pZ3JhdGUuVGl0bGUnKSxcbiAgICAgICAgICBjb250ZW50OiBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jdXJyZW50TW9kdWxlcykubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgID8gJ0NvQzcuTWlncmF0ZS5NZXNzYWdlJ1xuICAgICAgICAgICAgICA6ICdDb0M3Lk1pZ3JhdGUuV2l0aE1vZHVsZXNNZXNzYWdlJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmVyc2lvbjogZ2FtZS5zeXN0ZW0udmVyc2lvbixcbiAgICAgICAgICAgICAgbW9kdWxlczpcbiAgICAgICAgICAgICAgICAnPHVsPjxsaT4nICtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmN1cnJlbnRNb2R1bGVzKVxuICAgICAgICAgICAgICAgICAgLm1hcChtb2QgPT4gZ2FtZS5tb2R1bGVzLmdldChtb2QpLnRpdGxlKVxuICAgICAgICAgICAgICAgICAgLmpvaW4oJzwvbGk+PGxpPicpICtcbiAgICAgICAgICAgICAgICAnPC9saT48L3VsPidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApLFxuICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgIHVwZGF0ZToge1xuICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1pZ3JhdGUuQnV0dG9uVXBkYXRlJyksXG4gICAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiBVcGRhdGVyLnVwZGF0ZSgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2tpcDoge1xuICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1pZ3JhdGUuQnV0dG9uU2tpcCcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KS5yZW5kZXIodHJ1ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ldyBEaWFsb2coe1xuICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWlncmF0ZS5UaXRsZScpLFxuICAgICAgICAgIGNvbnRlbnQ6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5HTVJlcXVpcmVkJywge1xuICAgICAgICAgICAgdmVyc2lvbjogZ2FtZS5zeXN0ZW0udmVyc2lvblxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgIE9LOiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWlncmF0ZS5CdXR0b25Pa2F5JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLnJlbmRlcih0cnVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB1cGRhdGUgKCkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlRG9jdW1lbnRzKClcblxuICAgIC8vIC8vIElmIHdlIHB1dCB1cCBhIHRlbXBvcmFyeSBzY2VuZSByZXR1cm4gdGhlIHVzZXIgYW5kIHJlbW92ZSBpdFxuICAgIC8vIGlmIChcbiAgICAvLyAgIHR5cGVvZiB0aGlzLnRlbXBvcmFyeVNjZW5lICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vICAgdHlwZW9mIHRoaXMub3JpZ2luYWxTY2VuZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAvLyApIHtcbiAgICAvLyAgIGF3YWl0IHRoaXMub3JpZ2luYWxTY2VuZS52aWV3KClcbiAgICAvLyAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSlcbiAgICAvLyAgIGF3YWl0IHRoaXMudGVtcG9yYXJ5U2NlbmUuZGVsZXRlKClcbiAgICAvLyB9XG5cbiAgICAvLyBNaWdyYXRlIFNldHRpbmdzIGlmIFB1bHAgUnVsZXMgaXMgZW5hYmxlZCB0dXJuIG9uIGFsbCBydWxlc1xuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZXMnKSkge1xuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAncHVscFJ1bGVEb3VibGVNYXhIZWFsdGgnLCB0cnVlKVxuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAncHVscFJ1bGVEZXZlbG9wbWVudFJvbGxMdWNrJywgdHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3B1bHBSdWxlQXJjaGV0eXBlJywgdHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3B1bHBSdWxlT3JnYW5pemF0aW9uJywgdHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3B1bHBSdWxlVGFsZW50cycsIHRydWUpXG4gICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdwdWxwUnVsZUZhc3RlclJlY292ZXJ5JywgdHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3B1bHBSdWxlSWdub3JlTWFqb3JXb3VuZHMnLCB0cnVlKVxuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMnLCB0cnVlKVxuICAgIH1cblxuICAgIGF3YWl0IENvQ0lEQmF0Y2guY3JlYXRlKCdza2lsbCcpXG5cbiAgICBjb25zdCBzZXR0aW5ncyA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QodGhpcy51cGRhdGVkTW9kdWxlcyB8fCB7fSwgdGhpcy5jdXJyZW50TW9kdWxlcylcbiAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdzeXN0ZW1VcGRhdGVkTW9kdWxlVmVyc2lvbicsIHNldHRpbmdzKVxuICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3N5c3RlbVVwZGF0ZVZlcnNpb24nLCBnYW1lLnN5c3RlbS52ZXJzaW9uKVxuXG4gICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5Db21wbGV0ZScpLCB7XG4gICAgICBwZXJtYW5lbnQ6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHVwZGF0ZURvY3VtZW50cyAoKSB7XG4gICAgLy8gTWlncmF0ZSBXb3JsZCBBY3RvcnNcbiAgICBmb3IgKGNvbnN0IGFjdG9yIG9mIGdhbWUuYWN0b3JzLmNvbnRlbnRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0gdGhpcy5taWdyYXRlQWN0b3JEYXRhKGFjdG9yLnRvT2JqZWN0KCkpXG4gICAgICAgIGlmICghZm91bmRyeS51dGlscy5pc0VtcHR5KHVwZGF0ZURhdGEpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYE1pZ3JhdGluZyBBY3RvciBkb2N1bWVudCAke2FjdG9yLm5hbWV9YClcbiAgICAgICAgICBhd2FpdCBhY3Rvci51cGRhdGUodXBkYXRlRGF0YSwgeyBlbmZvcmNlVHlwZXM6IGZhbHNlIH0pXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZGV0YWlscycsIGVycilcbiAgICAgICAgZXJyLm1lc3NhZ2UgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1pZ3JhdGUuRXJyb3JBY3RvcicsIHtcbiAgICAgICAgICBuYW1lOiBhY3Rvci5uYW1lLFxuICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgICAgIH0pXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZXJyLm1lc3NhZ2UsIHsgcGVybWFuZW50OiB0cnVlIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWlncmF0ZSBXb3JsZCBJdGVtc1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBnYW1lLml0ZW1zLmNvbnRlbnRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0gVXBkYXRlci5taWdyYXRlSXRlbURhdGEoaXRlbS50b09iamVjdCgpKVxuICAgICAgICBpZiAoIWZvdW5kcnkudXRpbHMuaXNFbXB0eSh1cGRhdGVEYXRhKSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBNaWdyYXRpbmcgSXRlbSBkb2N1bWVudCAke2l0ZW0ubmFtZX1gKVxuICAgICAgICAgIGF3YWl0IGl0ZW0udXBkYXRlKHVwZGF0ZURhdGEsIHsgZW5mb3JjZVR5cGVzOiBmYWxzZSB9KVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGRldGFpbHMnLCBlcnIpXG4gICAgICAgIGVyci5tZXNzYWdlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NaWdyYXRlLkVycm9ySXRlbScsIHtcbiAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICAgICAgfSlcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlcnIubWVzc2FnZSwgeyBwZXJtYW5lbnQ6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNaWdyYXRlIFdvcmxkIFRhYmxlc1xuICAgIGZvciAoY29uc3QgdGFibGUgb2YgZ2FtZS50YWJsZXMuY29udGVudHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSBVcGRhdGVyLm1pZ3JhdGVUYWJsZURhdGEodGFibGUudG9PYmplY3QoKSlcbiAgICAgICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzRW1wdHkodXBkYXRlRGF0YSkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgTWlncmF0aW5nIFRhYmxlIGRvY3VtZW50ICR7dGFibGUubmFtZX1gKVxuICAgICAgICAgIGF3YWl0IHRhYmxlLnVwZGF0ZSh1cGRhdGVEYXRhLCB7IGVuZm9yY2VUeXBlczogZmFsc2UgfSlcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBkZXRhaWxzJywgZXJyKVxuICAgICAgICBlcnIubWVzc2FnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5FcnJvclRhYmxlJywge1xuICAgICAgICAgIG5hbWU6IHRhYmxlLm5hbWUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICAgICAgfSlcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlcnIubWVzc2FnZSwgeyBwZXJtYW5lbnQ6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNaWdyYXRlIE1hY3Jvc1xuICAgIGZvciAoY29uc3QgbWFjcm8gb2YgZ2FtZS5tYWNyb3MuY29udGVudHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSBVcGRhdGVyLm1pZ3JhdGVNYWNyb0RhdGEobWFjcm8udG9PYmplY3QoKSlcbiAgICAgICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzRW1wdHkodXBkYXRlRGF0YSkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgTWlncmF0aW5nIE1hY3JvIGRvY3VtZW50ICR7bWFjcm8ubmFtZX1gKVxuICAgICAgICAgIGF3YWl0IG1hY3JvLnVwZGF0ZSh1cGRhdGVEYXRhLCB7IGVuZm9yY2VUeXBlczogZmFsc2UgfSlcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBkZXRhaWxzJywgZXJyKVxuICAgICAgICBlcnIubWVzc2FnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5FcnJvck1hY3JvJywge1xuICAgICAgICAgIG5hbWU6IG1hY3JvLm5hbWUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICAgICAgfSlcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlcnIubWVzc2FnZSwgeyBwZXJtYW5lbnQ6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNaWdyYXRlIFNjZW5lcyBbVG9rZW5dIEFjdG9yc1xuICAgIGZvciAoY29uc3Qgc2NlbmUgb2YgZ2FtZS5zY2VuZXMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSBVcGRhdGVyLm1pZ3JhdGVTY2VuZURhdGEoc2NlbmUpXG4gICAgICAgIGlmICghZm91bmRyeS51dGlscy5pc0VtcHR5KHVwZGF0ZURhdGEpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYE1pZ3JhdGluZyBTY2VuZSBkb2N1bWVudCAke3NjZW5lLm5hbWV9YClcbiAgICAgICAgICAvLyBpZiAoXG4gICAgICAgICAgLy8gICBzY2VuZS5pZCA9PT0gZ2FtZS5zY2VuZXMuY3VycmVudC5pZCAmJlxuICAgICAgICAgIC8vICAgdHlwZW9mIHRoaXMudGVtcG9yYXJ5U2NlbmUgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgLy8gICB0eXBlb2YgdGhpcy5vcmlnaW5hbFNjZW5lID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgIC8vICkge1xuICAgICAgICAgIC8vICAgdGhpcy50ZW1wb3JhcnlTY2VuZSA9IGF3YWl0IFNjZW5lLmNyZWF0ZSh7XG4gICAgICAgICAgLy8gICAgIG5hbWU6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5VcGRhdGVDdXJyZW50U2NlbmUnKSxcbiAgICAgICAgICAvLyAgICAgYmFja2dyb3VuZENvbG9yOiAnIzAwMDAwMCdcbiAgICAgICAgICAvLyAgIH0pXG4gICAgICAgICAgLy8gICB0aGlzLm9yaWdpbmFsU2NlbmUgPSBzY2VuZVxuICAgICAgICAgIC8vICAgYXdhaXQgRHJhd2luZ0RvY3VtZW50LmNyZWF0ZShcbiAgICAgICAgICAvLyAgICAge1xuICAgICAgICAgIC8vICAgICAgIGF1dGhvcjogZ2FtZS51c2VyLmlkLFxuICAgICAgICAgIC8vICAgICAgIHNoYXBlOiB7XG4gICAgICAgICAgLy8gICAgICAgICB0eXBlOiAncicsXG4gICAgICAgICAgLy8gICAgICAgICB3aWR0aDogMTYwMCxcbiAgICAgICAgICAvLyAgICAgICAgIGhlaWdodDogMjAwXG4gICAgICAgICAgLy8gICAgICAgfSxcbiAgICAgICAgICAvLyAgICAgICB4OiAyMjAwLFxuICAgICAgICAgIC8vICAgICAgIHk6IDIyMDAsXG4gICAgICAgICAgLy8gICAgICAgejogMCxcbiAgICAgICAgICAvLyAgICAgICBzdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAvLyAgICAgICB0ZXh0OiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1pZ3JhdGUuVXBkYXRlQ3VycmVudFNjZW5lJyksXG4gICAgICAgICAgLy8gICAgICAgZm9udEZhbWlseTogJ1NpZ25pa2EnLFxuICAgICAgICAgIC8vICAgICAgIGZvbnRTaXplOiAxMjgsXG4gICAgICAgICAgLy8gICAgICAgdGV4dENvbG9yOiAnI0ZGRkZGRicsXG4gICAgICAgICAgLy8gICAgICAgdGV4dEFscGhhOiAxLFxuICAgICAgICAgIC8vICAgICAgIGhpZGRlbjogZmFsc2UsXG4gICAgICAgICAgLy8gICAgICAgbG9ja2VkOiB0cnVlXG4gICAgICAgICAgLy8gICAgIH0sXG4gICAgICAgICAgLy8gICAgIHtcbiAgICAgICAgICAvLyAgICAgICBwYXJlbnQ6IHRoaXMudGVtcG9yYXJ5U2NlbmVcbiAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgIC8vICAgKVxuICAgICAgICAgIC8vICAgYXdhaXQgdGhpcy50ZW1wb3JhcnlTY2VuZS52aWV3KClcbiAgICAgICAgICAvLyAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSlcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgYXdhaXQgc2NlbmUudXBkYXRlKHVwZGF0ZURhdGEsIHsgZW5mb3JjZVR5cGVzOiBmYWxzZSB9KVxuICAgICAgICB9XG4gICAgICAgIHNjZW5lLnRva2Vucy5mb3JFYWNoKHQgPT4gKHQuX2FjdG9yID0gbnVsbCkpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGRldGFpbHMnLCBlcnIpXG4gICAgICAgIGVyci5tZXNzYWdlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NaWdyYXRlLkVycm9yU2NlbmUnLCB7XG4gICAgICAgICAgbmFtZTogc2NlbmUubmFtZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZVxuICAgICAgICB9KVxuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGVyci5tZXNzYWdlLCB7IHBlcm1hbmVudDogdHJ1ZSB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1pZ3JhdGUgV29ybGQgQ29tcGVuZGl1bSBQYWNrc1xuICAgIGZvciAoY29uc3QgcGFjayBvZiBnYW1lLnBhY2tzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHBhY2subWV0YWRhdGEucGFja2FnZU5hbWUgIT09ICdDb0M3JyAmJlxuICAgICAgICBbJ0FjdG9yJywgJ0l0ZW0nLCAnTWFjcm8nLCAnUm9sbFRhYmxlJywgJ1NjZW5lJ10uaW5jbHVkZXMoXG4gICAgICAgICAgcGFjay5tZXRhZGF0YS50eXBlXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBhd2FpdCBVcGRhdGVyLm1pZ3JhdGVDb21wZW5kaXVtRGF0YShwYWNrKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBtaWdyYXRlQWN0b3JEYXRhIChhY3Rvcikge1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuXG4gICAgLy8gVXBkYXRlIFdvcmxkIEFjdG9yXG4gICAgVXBkYXRlci5fbWlncmF0ZUFjdG9yQ2hhcmFjdGVyU2FuaXR5KGFjdG9yLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVBY3RvckFydHdvcmsoYWN0b3IsIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUFjdG9yS2VlcGVyTm90ZXMoYWN0b3IsIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUFjdG9yTnBjQ3JlYXR1cmUoYWN0b3IsIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUFjdG9yU3RhdHVzRWZmZWN0QWN0aXZlKGFjdG9yLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVBY3RvclNhbkxvc3NSZWFzb25zKGFjdG9yLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVBY3Rvck1vbmV0YXJ5KGFjdG9yLCB1cGRhdGVEYXRhKVxuXG4gICAgLy8gTWlncmF0ZSBXb3JsZCBBY3RvciBJdGVtc1xuICAgIGlmIChhY3Rvci5pdGVtcykge1xuICAgICAgY29uc3QgaXRlbXMgPSBhY3Rvci5pdGVtcy5yZWR1Y2UoKGFyciwgaSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtRGF0YSA9XG4gICAgICAgICAgaSBpbnN0YW5jZW9mIENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3MgPyBpLnRvT2JqZWN0KCkgOiBpXG4gICAgICAgIGNvbnN0IGl0ZW1VcGRhdGUgPSBVcGRhdGVyLm1pZ3JhdGVJdGVtRGF0YShpdGVtRGF0YSlcbiAgICAgICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzRW1wdHkoaXRlbVVwZGF0ZSkpIHtcbiAgICAgICAgICBpdGVtVXBkYXRlLl9pZCA9IGl0ZW1EYXRhLl9pZFxuICAgICAgICAgIGFyci5wdXNoKGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGl0ZW1VcGRhdGUpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJcbiAgICAgIH0sIFtdKVxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXBkYXRlRGF0YS5pdGVtcyA9IGl0ZW1zXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBtaWdyYXRlQ29tcGVuZGl1bURhdGEgKHBhY2spIHtcbiAgICBjb25zdCBkb2N1bWVudFR5cGUgPSBwYWNrLm1ldGFkYXRhLnR5cGVcbiAgICBpZiAoXG4gICAgICAhWydBY3RvcicsICdJdGVtJywgJ01hY3JvJywgJ1JvbGxUYWJsZScsICdTY2VuZSddLmluY2x1ZGVzKGRvY3VtZW50VHlwZSlcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFVubG9jayB0aGUgcGFjayBmb3IgZWRpdGluZ1xuICAgIGNvbnN0IHdhc0xvY2tlZCA9IHBhY2subG9ja2VkXG4gICAgYXdhaXQgcGFjay5jb25maWd1cmUoeyBsb2NrZWQ6IGZhbHNlIH0pXG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgcGFjay5taWdyYXRlKClcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdwYWNrIG1pZ3JhdGUgZmFpbGVkJywgcGFjaywgZXJyKVxuICAgIH1cbiAgICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCBwYWNrLmdldERvY3VtZW50cygpXG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgY29tcGVuZGl1bSBlbnRyaWVzIC0gYXBwbHlpbmcgZmluZS10dW5lZCBtaWdyYXRpb24gZnVuY3Rpb25zXG4gICAgZm9yIChjb25zdCBkb2Mgb2YgZG9jdW1lbnRzKSB7XG4gICAgICBsZXQgdXBkYXRlRGF0YSA9IHt9XG4gICAgICB0cnkge1xuICAgICAgICBzd2l0Y2ggKGRvY3VtZW50VHlwZSkge1xuICAgICAgICAgIGNhc2UgJ0FjdG9yJzpcbiAgICAgICAgICAgIHVwZGF0ZURhdGEgPSBVcGRhdGVyLm1pZ3JhdGVBY3RvckRhdGEoZG9jLnRvT2JqZWN0KCkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ0l0ZW0nOlxuICAgICAgICAgICAgdXBkYXRlRGF0YSA9IFVwZGF0ZXIubWlncmF0ZUl0ZW1EYXRhKGRvYy50b09iamVjdCgpKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdNYWNybyc6XG4gICAgICAgICAgICB1cGRhdGVEYXRhID0gVXBkYXRlci5taWdyYXRlTWFjcm9EYXRhKGRvYy50b09iamVjdCgpKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdSb2xsVGFibGUnOlxuICAgICAgICAgICAgdXBkYXRlRGF0YSA9IFVwZGF0ZXIubWlncmF0ZVRhYmxlRGF0YShkb2MudG9PYmplY3QoKSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAnU2NlbmUnOlxuICAgICAgICAgICAgdXBkYXRlRGF0YSA9IFVwZGF0ZXIubWlncmF0ZVNjZW5lRGF0YShkb2MpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIC8vIFNhdmUgdGhlIGVudHJ5LCBpZiBkYXRhIHdhcyBjaGFuZ2VkXG4gICAgICAgIGlmICghZm91bmRyeS51dGlscy5pc0VtcHR5KHVwZGF0ZURhdGEpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBgTWlncmF0ZWQgJHtkb2N1bWVudFR5cGV9IGRvY3VtZW50ICR7ZG9jLm5hbWV9IGluIENvbXBlbmRpdW0gJHtwYWNrLmNvbGxlY3Rpb259YFxuICAgICAgICAgIClcbiAgICAgICAgICBhd2FpdCBkb2MudXBkYXRlKHVwZGF0ZURhdGEpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZGV0YWlscycsIGVycilcbiAgICAgICAgZXJyLm1lc3NhZ2UgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1pZ3JhdGUuRXJyb3JEb2N1bWVudFBhY2snLCB7XG4gICAgICAgICAgbmFtZTogZG9jLm5hbWUsXG4gICAgICAgICAgY29sbGVjdGlvbjogcGFjay5jb2xsZWN0aW9uLFxuICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgICAgIH0pXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZXJyLm1lc3NhZ2UsIHsgcGVybWFuZW50OiB0cnVlIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgdGhlIG9yaWdpbmFsIGxvY2tlZCBzdGF0dXMgZm9yIHRoZSBwYWNrXG4gICAgYXdhaXQgcGFjay5jb25maWd1cmUoeyBsb2NrZWQ6IHdhc0xvY2tlZCB9KVxuICB9XG5cbiAgc3RhdGljIG1pZ3JhdGVJdGVtRGF0YSAoaXRlbSkge1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuXG4gICAgLy8gVXBkYXRlIFdvcmxkIEl0ZW1cbiAgICBVcGRhdGVyLl9taWdyYXRlSXRlbUVtYmVkZGVkdjEwKGl0ZW0sIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUl0ZW1FeHBlcmllbmNlKGl0ZW0sIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUl0ZW1BcnR3b3JrKGl0ZW0sIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUl0ZW1Cb29rQXV0b21hdGVkKGl0ZW0sIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUl0ZW1LZWVwZXJOb3RlcyhpdGVtLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVJdGVtU3BlbGxBdXRvbWF0ZWQoaXRlbSwgdXBkYXRlRGF0YSlcbiAgICBVcGRhdGVyLl9taWdyYXRlSXRlbUtlZXBlck5vdGVzTWVyZ2UoaXRlbSwgdXBkYXRlRGF0YSlcbiAgICBVcGRhdGVyLl9taWdyYXRlSXRlbUVyYXMoaXRlbSwgdXBkYXRlRGF0YSlcbiAgICBVcGRhdGVyLl9taWdyYXRlSXRlbXYxMChpdGVtLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVJdGVtQm9va1VuaXRzKGl0ZW0sIHVwZGF0ZURhdGEpXG5cbiAgICByZXR1cm4gdXBkYXRlRGF0YVxuICB9XG5cbiAgc3RhdGljIG1pZ3JhdGVNYWNyb0RhdGEgKHRhYmxlKSB7XG4gICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9XG5cbiAgICAvLyBVcGRhdGUgV29ybGQgQWN0b3JcbiAgICBVcGRhdGVyLl9taWdyYXRlTWFjcm9BcnR3b3JrKHRhYmxlLCB1cGRhdGVEYXRhKVxuXG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBtaWdyYXRlVGFibGVEYXRhICh0YWJsZSkge1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuXG4gICAgLy8gVXBkYXRlIFdvcmxkIEFjdG9yXG4gICAgVXBkYXRlci5fbWlncmF0ZVRhYmxlQXJ0d29yayh0YWJsZSwgdXBkYXRlRGF0YSlcblxuICAgIHJldHVybiB1cGRhdGVEYXRhXG4gIH1cblxuICBzdGF0aWMgbWlncmF0ZVNjZW5lRGF0YSAoc2NlbmUpIHtcbiAgICBjb25zdCByZXR1cm5zID0ge1xuICAgICAgdG9rZW5zOiBbXVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNjZW5lLnRva2VucyAhPT0gJ3VuZGVmaW5lZCcgJiYgc2NlbmUudG9rZW5zLmxlbmd0aCkge1xuICAgICAgcmV0dXJucy50b2tlbnMgPSBzY2VuZS50b2tlbnMubWFwKHRva2VuID0+IHtcbiAgICAgICAgY29uc3QgdCA9IHRva2VuLnRvT2JqZWN0KClcbiAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9XG4gICAgICAgIFVwZGF0ZXIuX21pZ3JhdGVUb2tlbkFydHdvcmsodCwgdXBkYXRlRGF0YSlcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZURhdGEpLmxlbmd0aCkge1xuICAgICAgICAgIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QodCwgdXBkYXRlRGF0YSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXQuYWN0b3JJZCB8fCB0LmFjdG9yTGluaykge1xuICAgICAgICAgIHQuYWN0b3JEYXRhID0ge31cbiAgICAgICAgfSBlbHNlIGlmICghZ2FtZS5hY3RvcnMuaGFzKHQuYWN0b3JJZCkpIHtcbiAgICAgICAgICB0LmFjdG9ySWQgPSBudWxsXG4gICAgICAgICAgdC5hY3RvckRhdGEgPSB7fVxuICAgICAgICB9IGVsc2UgaWYgKCF0LmFjdG9yTGluaykge1xuICAgICAgICAgIGNvbnN0IGFjdG9yRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHQuYWN0b3JEYXRhKVxuICAgICAgICAgIGFjdG9yRGF0YS50eXBlID0gdG9rZW4uYWN0b3I/LnR5cGVcbiAgICAgICAgICBjb25zdCB1cGRhdGUgPSBVcGRhdGVyLm1pZ3JhdGVBY3RvckRhdGEoYWN0b3JEYXRhKVxuICAgICAgICAgIDtbJ2l0ZW1zJywgJ2VmZmVjdHMnXS5mb3JFYWNoKGVtYmVkZGVkTmFtZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXVwZGF0ZVtlbWJlZGRlZE5hbWVdPy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVzID0gbmV3IE1hcCh1cGRhdGVbZW1iZWRkZWROYW1lXS5tYXAodSA9PiBbdS5faWQsIHVdKSlcbiAgICAgICAgICAgIHQuYWN0b3JEYXRhW2VtYmVkZGVkTmFtZV0uZm9yRWFjaChvcmlnaW5hbCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZSA9IHVwZGF0ZXMuZ2V0KG9yaWdpbmFsLl9pZClcbiAgICAgICAgICAgICAgaWYgKHVwZGF0ZSkgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChvcmlnaW5hbCwgdXBkYXRlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGRlbGV0ZSB1cGRhdGVbZW1iZWRkZWROYW1lXVxuICAgICAgICAgIH0pXG4gICAgICAgICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdCh0LmFjdG9yRGF0YSwgdXBkYXRlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0XG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuc1xuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlSXRlbUtlZXBlck5vdGVzIChpdGVtLCB1cGRhdGVEYXRhKSB7XG4gICAgaWYgKFxuICAgICAgW1xuICAgICAgICAnYXJjaGV0eXBlJyxcbiAgICAgICAgJ2NoYXNlJyxcbiAgICAgICAgJ2l0ZW0nLFxuICAgICAgICAnb2NjdXBhdGlvbicsXG4gICAgICAgICdzZXR1cCcsXG4gICAgICAgICdza2lsbCcsXG4gICAgICAgICdzcGVsbCcsXG4gICAgICAgICdzdGF0dXMnLFxuICAgICAgICAndGFsZW50JyxcbiAgICAgICAgJ3dlYXBvbidcbiAgICAgIF0uaW5jbHVkZXMoaXRlbS50eXBlKVxuICAgICkge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uJ10gPSB7XG4gICAgICAgICAgdmFsdWU6IGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGtlZXBlcjogJydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbiA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbiddID0ge1xuICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICBrZWVwZXI6ICcnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlciddID0gJydcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZUl0ZW1FeHBlcmllbmNlIChpdGVtLCB1cGRhdGVEYXRhKSB7XG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3NraWxsJykge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtLnN5c3RlbS5hZGp1c3RtZW50cz8uZXhwZXJpZW5jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UnXSA9IDBcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZUl0ZW1BcnR3b3JrIChpdGVtLCB1cGRhdGVEYXRhKSB7XG4gICAgbGV0IGltYWdlID0gU3RyaW5nKGl0ZW0uaW1nKS5tYXRjaCgvc3lzdGVtc1xcL0NvQzdcXC9hcnR3b3JrXFwvaWNvbnNcXC8oLispLylcbiAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgIHVwZGF0ZURhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvJyArIGltYWdlWzFdXG4gICAgfVxuICAgIGlmIChpdGVtLnR5cGUgPT09ICdzZXR1cCcpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLml0ZW1zKSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaW1hZ2UgPSBTdHJpbmcodi5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgICAgICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uaXRlbXMnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ10gPSBpdGVtLnN5c3RlbS5pdGVtc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10uaW1nID1cbiAgICAgICAgICAgICAgJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvJyArIGltYWdlWzFdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdvY2N1cGF0aW9uJykge1xuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbS5zeXN0ZW0uc2tpbGxzKSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaW1hZ2UgPSBTdHJpbmcodi5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgICAgICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXSA9IGl0ZW0uc3lzdGVtLnNraWxsc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLmltZyA9XG4gICAgICAgICAgICAgICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zLycgKyBpbWFnZVsxXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBbbywgZ10gb2YgT2JqZWN0LmVudHJpZXMoaXRlbS5zeXN0ZW0uZ3JvdXBzKSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhnLnNraWxscykpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpbWFnZSA9IFN0cmluZyh2LmltZykubWF0Y2goL3N5c3RlbXNcXC9Db0M3XFwvYXJ0d29ya1xcL2ljb25zXFwvKC4rKS8pXG4gICAgICAgICAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uZ3JvdXBzJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddID0gaXRlbS5zeXN0ZW0uZ3JvdXBzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5pbWcgPVxuICAgICAgICAgICAgICAgICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zLycgKyBpbWFnZVsxXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnYm9vaycpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLnNwZWxscykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGltYWdlID0gU3RyaW5nKHYuaW1nKS5tYXRjaCgvc3lzdGVtc1xcL0NvQzdcXC9hcnR3b3JrXFwvaWNvbnNcXC8oLispLylcbiAgICAgICAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YVsnc3lzdGVtLnNwZWxscyddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc3BlbGxzJ10gPSBpdGVtLnN5c3RlbS5zcGVsbHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zcGVsbHMnXVtrXS5pbWcgPVxuICAgICAgICAgICAgICAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2FyY2hldHlwZScpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLnNraWxscykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGltYWdlID0gU3RyaW5nKHYuaW1nKS5tYXRjaCgvc3lzdGVtc1xcL0NvQzdcXC9hcnR3b3JrXFwvaWNvbnNcXC8oLispLylcbiAgICAgICAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ10gPSBpdGVtLnN5c3RlbS5za2lsbHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXVtrXS5pbWcgPVxuICAgICAgICAgICAgICAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZUl0ZW1TcGVsbEF1dG9tYXRlZCAoaXRlbSwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChpdGVtLnR5cGUgPT09ICdzcGVsbCcgJiYgdHlwZW9mIGl0ZW0uc3lzdGVtLmNvc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY2FzdGluZ1RpbWUnXSA9IGl0ZW0uc3lzdGVtLmNhc3RpbmdUaW1lIHx8ICcnXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29zdHMuaGl0UG9pbnRzJ10gPSBpdGVtLnN5c3RlbS5jb3N0LmhwIHx8IDBcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb3N0cy5tYWdpY1BvaW50cyddID0gaXRlbS5zeXN0ZW0uY29zdC5tcCB8fCAwXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29zdHMuc2FuaXR5J10gPSBpdGVtLnN5c3RlbS5jb3N0LnNhbiB8fCAwXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29zdHMucG93ZXInXSA9IGl0ZW0uc3lzdGVtLmNvc3QucG93IHx8IDBcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb3N0cy5vdGhlcnMnXSA9ICcnXG5cbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS4tPWNvc3QnXSA9IG51bGxcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi4tPXVuaWRlbnRpZmllZCddID0gbnVsbFxuICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uLi09bm90ZXMnXSA9IG51bGxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQm9vayBhdXRvbWF0aW9uIHdhcyBpbmNyZWFzZWQgaW4gMC42LjVcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gRG9jdW1lbnQgZGF0YSBleHByZXNzZWQgYXMgYSBwbGFpbiBvYmplY3RcbiAgICogQHBhcmFtIHtqc29ufSB1cGRhdGVEYXRhIERpZmZlcmVudGlhbCB1cGRhdGUgZGF0YSB3aGljaCBtb2RpZmllcyB0aGUgZXhpc3RpbmcgdmFsdWVzIG9mIHRoaXMgZG9jdW1lbnQgZGF0YVxuICAgKiBAcmV0dXJucyB7anNvbn0gRGlmZmVyZW50aWFsIHVwZGF0ZSBkYXRhIHdoaWNoIG1vZGlmaWVzIHRoZSBleGlzdGluZyB2YWx1ZXMgb2YgdGhpcyBkb2N1bWVudCBkYXRhXG4gICAqL1xuICBzdGF0aWMgX21pZ3JhdGVJdGVtQm9va0F1dG9tYXRlZCAoaXRlbSwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChpdGVtLnR5cGUgPT09ICdib29rJykge1xuICAgICAgLyoqIElmIGJvb2sgc3RpbGwgaGFzIHRoZSBzeXN0ZW0uZGVzY3JpcHRpb24udW5pZGVudGlmaWVkIGtleSB0aGVuIHJ1biBtaWdyYXRlIG9uIGl0ICovXG4gICAgICBpZiAodHlwZW9mIGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLnVuaWRlbnRpZmllZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLyoqIEZpZWxkcyBjaGFuZ2VkIGZyb20gbnVsbCBkZWZhdWx0IHRvIGVtcHR5IHN0cmluZyAqL1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXV0aG9yJ10gPSBpdGVtLnN5c3RlbS5hdXRob3IgfHwgJydcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRhdGUnXSA9IGl0ZW0uc3lzdGVtLmRhdGUgfHwgJydcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmxhbmd1YWdlJ10gPSBpdGVtLnN5c3RlbS5sYW5ndWFnZSB8fCAnJ1xuICAgICAgICAvKiogRmllbGRzIGNoYW5nZWQgZnJvbSBudWxsL3N0cmluZyBkZWZhdWx0cyB0byBpbnRlZ2VyIHRvIDAgKi9cbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNhbml0eUxvc3MnXSA9IGl0ZW0uc3lzdGVtLnNhbkxvc3MgfHwgMFxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0ubXl0aG9zUmF0aW5nJ10gPSBOdW1iZXIoaXRlbS5zeXN0ZW0ubXl0aG9zUmF0aW5nKSB8fCAwXG4gICAgICAgIC8qKiBSZW5hbWVkL21vdmVkIGZpZWxkcyAqL1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29udGVudCddID0gaXRlbS5zeXN0ZW0uZGVzY3JpcHRpb24udW5pZGVudGlmaWVkXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9IGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLm5vdGVzXG4gICAgICAgIC8qKiBOZXcgZmllbGRzIHNldCBkZWZhdWx0IHZhbHVlcyAqL1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZGlmZmljdWx0eUxldmVsJ10gPSAncmVndWxhcidcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmZ1bGxTdHVkaWVzJ10gPSAwXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5pbml0aWFsUmVhZGluZyddID0gZmFsc2VcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmtlZXBlck5vdGVzJ10gPSAnJ1xuICAgICAgICAvKiogTW92ZSBhbmQgcmVuYW1lIGdhaW4gZmllbGRzIHRvIGdhaW5zLCBkZWZhdWx0IE5hTiB2YWx1ZXMgdG8gMCAqL1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZ2FpbnMuY3RodWxodU15dGhvcy5pbml0aWFsJ10gPVxuICAgICAgICAgIE51bWJlcihpdGVtLnN5c3RlbS5nYWluLmN0aHVsaHVNeXRob3MuQ01JKSB8fCAwXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5nYWlucy5jdGh1bGh1TXl0aG9zLmZpbmFsJ10gPVxuICAgICAgICAgIE51bWJlcihpdGVtLnN5c3RlbS5nYWluLmN0aHVsaHVNeXRob3MuQ01GKSB8fCAwXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5nYWlucy5vY2N1bHQnXSA9IE51bWJlcihpdGVtLnN5c3RlbS5nYWluLm9jY3VsdCkgfHwgMFxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZ2FpbnMub3RoZXJzJ10gPSBbXVxuICAgICAgICAvKiogTmV3IHN0dWR5IGZpZWxkIGRlZmF1bHQgbmVjZXNzYXJ5IHRvIGludGVnZXIgb2Ygd2Vla3NTdHVkeVRpbWUgb3IgMCBpZiBub3Qgc2V0ICovXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zdHVkeSddID0ge1xuICAgICAgICAgIG5lY2Vzc2FyeTogTnVtYmVyKGl0ZW0uc3lzdGVtLndlZWtzU3R1ZHlUaW1lKSB8fCAwLFxuICAgICAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgICAgIHVuaXRzOiAnQ29DNy53ZWVrcydcbiAgICAgICAgfVxuICAgICAgICAvKiogUmVtb3ZlIG9sZCBrZXlzICovXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS4tPXNhbkxvc3MnXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09d2Vla3NTdHVkeVRpbWUnXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09Z2FpbiddID0gbnVsbFxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZGVzY3JpcHRpb24uLT11bmlkZW50aWZpZWQnXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uLi09bm90ZXMnXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdhaW5zLi09b3RoZXInXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09cHJvcGVydGllcyddID0gbnVsbFxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uLT1mbGFncyddID0gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlRGF0YVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlSXRlbUJvb2tVbml0cyAoaXRlbSwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChpdGVtLnR5cGUgPT09ICdib29rJykge1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgaXRlbS5zeXN0ZW0uc3R1ZHkubmVjZXNzYXJ5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2YgaXRlbS5zeXN0ZW0uc3R1ZHkudW5pdHMgPT09ICd1bmRlZmluZWQnXG4gICAgICApIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnN0dWR5LnVuaXRzJ10gPSAnQ29DNy53ZWVrcydcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVJdGVtS2VlcGVyTm90ZXNNZXJnZSAoaXRlbSwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChpdGVtLnR5cGUgPT09ICdzcGVsbCcgfHwgaXRlbS50eXBlID09PSAnYm9vaycpIHtcbiAgICAgIGlmICh0eXBlb2YgaXRlbS5zeXN0ZW0ubm90ZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIgKyBpdGVtLnN5c3RlbS5ub3Rlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9IGl0ZW0uc3lzdGVtLm5vdGVzXG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09bm90ZXMnXSA9IG51bGxcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaXRlbS5zeXN0ZW0ua2VlcGVyTm90ZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlciddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5rZWVwZXJOb3RlcyArIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9IGl0ZW0uc3lzdGVtLmtlZXBlck5vdGVzXG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09a2VlcGVyTm90ZXMnXSA9IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVJdGVtRW1iZWRkZWR2MTAgKGl0ZW0sIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoaXRlbS50eXBlID09PSAnb2NjdXBhdGlvbicpIHtcbiAgICAgIGxldCBjaGFuZ2VkID0gZmFsc2VcbiAgICAgIGZvciAoY29uc3QgW28sIGddIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLmdyb3VwcykpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoZy5za2lsbHMpKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2LnN5c3RlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0uZ3JvdXBzW29dLnNraWxsc1trXS5zeXN0ZW0gPSB2LmRhdGFcbiAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXSA9IGl0ZW0uc3lzdGVtLmdyb3Vwc1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoWydzZXR1cCddLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcbiAgICAgIGxldCBjaGFuZ2VkID0gZmFsc2VcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLml0ZW1zKSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2LnN5c3RlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLml0ZW1zW2tdLnN5c3RlbSA9IHYuZGF0YVxuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5pdGVtcyddID0gaXRlbS5zeXN0ZW0uaXRlbXNcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKFsnYXJjaGV0eXBlJywgJ29jY3VwYXRpb24nXS5pbmNsdWRlcyhpdGVtLnR5cGUpKSB7XG4gICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlXG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhpdGVtLnN5c3RlbS5za2lsbHMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYuc3lzdGVtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0uc2tpbGxzW2tdLnN5c3RlbSA9IHYuZGF0YVxuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXSA9IGl0ZW0uc3lzdGVtLnNraWxsc1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoWydib29rJ10uaW5jbHVkZXMoaXRlbS50eXBlKSkge1xuICAgICAgbGV0IGNoYW5nZWQgPSBmYWxzZVxuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbS5zeXN0ZW0uc3BlbGxzKSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2LnN5c3RlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnNwZWxsc1trXS5zeXN0ZW0gPSB2LmRhdGFcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc3BlbGxzJ10gPSBpdGVtLnN5c3RlbS5zcGVsbHNcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVJdGVtdjEwIChpdGVtLCB1cGRhdGVEYXRhKSB7XG4gICAgaWYgKFxuICAgICAgaXRlbS50eXBlID09PSAnc2tpbGwnICYmXG4gICAgICAodHlwZW9mIGl0ZW0uc3lzdGVtLnNraWxsTmFtZSA9PT0gJ3VuZGVmaW5lZCcgfHwgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lID09PSAnJylcbiAgICApIHtcbiAgICAgIHVwZGF0ZURhdGEubmFtZSA9IGl0ZW0ubmFtZVxuICAgICAgLy8gVXBkYXRlIFBvbGlzaCBkb2RnZSB0cmFuc2xhdGlvbiBmcm9tIFVuaWtpIHRvIFVuaWsgdG8gbWF0Y2ggdXBkYXRlIHRvIGxhbmcvcGwuanNvblxuICAgICAgaWYgKHVwZGF0ZURhdGEubmFtZSA9PT0gJ1VuaWtpJykge1xuICAgICAgICB1cGRhdGVEYXRhLm5hbWUgPSAnVW5paydcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhcnRzID0gQ29DN0l0ZW0uZ2V0TmFtZVBhcnRzU3BlYyhcbiAgICAgICAgdXBkYXRlRGF0YS5uYW1lLFxuICAgICAgICB0eXBlb2YgaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24/Lmdyb3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24uZ3JvdXBcbiAgICAgICAgICA6IGl0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICApXG4gICAgICB1cGRhdGVEYXRhLm5hbWUgPSBwYXJ0cy5uYW1lXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxOYW1lJ10gPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zcGVjaWFsaXphdGlvbiddID0gcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ3NldHVwJykge1xuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbS5zeXN0ZW0uaXRlbXMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB2LnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICh0eXBlb2Ygdi5zeXN0ZW0uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJyB8fCB2LnN5c3RlbS5za2lsbE5hbWUgPT09ICcnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uaXRlbXMnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ10gPSBpdGVtLnN5c3RlbS5pdGVtc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10ubmFtZSA9IHYubmFtZVxuICAgICAgICAgICAgaWYgKHVwZGF0ZURhdGFbJ3N5c3RlbS5pdGVtcyddW2tdLm5hbWUgPT09ICdVbmlraScpIHtcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10ubmFtZSA9ICdVbmlrJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uaXRlbXMnXVtrXS5uYW1lLFxuICAgICAgICAgICAgICB0eXBlb2Ygdi5zeXN0ZW0uc3BlY2lhbGl6YXRpb24/Lmdyb3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gdi5zeXN0ZW0uc3BlY2lhbGl6YXRpb24uZ3JvdXBcbiAgICAgICAgICAgICAgICA6IHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uaXRlbXMnXVtrXS5uYW1lID0gcGFydHMubmFtZVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10uc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10uc3lzdGVtLnNwZWNpYWxpemF0aW9uID0gcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ29jY3VwYXRpb24nKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhpdGVtLnN5c3RlbS5za2lsbHMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB2LnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICh0eXBlb2Ygdi5zeXN0ZW0uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJyB8fCB2LnN5c3RlbS5za2lsbE5hbWUgPT09ICcnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXSA9IGl0ZW0uc3lzdGVtLnNraWxsc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLm5hbWUgPSB2Lm5hbWVcbiAgICAgICAgICAgIGlmICh1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSA9PT0gJ1VuaWtpJykge1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSA9ICdVbmlrJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSxcbiAgICAgICAgICAgICAgdHlwZW9mIHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uPy5ncm91cCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uLmdyb3VwXG4gICAgICAgICAgICAgICAgOiB2LnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLm5hbWUgPSBwYXJ0cy5uYW1lXG4gICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10uc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9XG4gICAgICAgICAgICAgIHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IFtvLCBnXSBvZiBPYmplY3QuZW50cmllcyhpdGVtLnN5c3RlbS5ncm91cHMpKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGcuc2tpbGxzKSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdi50eXBlID09PSAnc2tpbGwnICYmXG4gICAgICAgICAgICAgICh0eXBlb2Ygdi5zeXN0ZW0uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJyB8fCB2LnN5c3RlbS5za2lsbE5hbWUgPT09ICcnKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXSA9IGl0ZW0uc3lzdGVtLmdyb3Vwc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXVtvXS5za2lsbHNba10ubmFtZSA9IHYubmFtZVxuICAgICAgICAgICAgICBpZiAodXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5uYW1lID09PSAnVW5pa2knKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5uYW1lID0gJ1VuaWsnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXVtvXS5za2lsbHNba10ubmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlb2Ygdi5zeXN0ZW0uc3BlY2lhbGl6YXRpb24/Lmdyb3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgPyB2LnN5c3RlbS5zcGVjaWFsaXphdGlvbi5ncm91cFxuICAgICAgICAgICAgICAgICAgOiB2LnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXVtvXS5za2lsbHNba10ubmFtZSA9IHBhcnRzLm5hbWVcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5zeXN0ZW0uc2tpbGxOYW1lID1cbiAgICAgICAgICAgICAgICBwYXJ0cy5za2lsbE5hbWVcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPVxuICAgICAgICAgICAgICAgIHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdhcmNoZXR5cGUnKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhpdGVtLnN5c3RlbS5za2lsbHMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB2LnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICh0eXBlb2Ygdi5zeXN0ZW0uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJyB8fCB2LnN5c3RlbS5za2lsbE5hbWUgPT09ICcnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXSA9IGl0ZW0uc3lzdGVtLnNraWxsc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLm5hbWUgPSB2Lm5hbWVcbiAgICAgICAgICAgIGlmICh1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSA9PT0gJ1VuaWtpJykge1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSA9ICdVbmlrJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSxcbiAgICAgICAgICAgICAgdHlwZW9mIHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uPy5ncm91cCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uLmdyb3VwXG4gICAgICAgICAgICAgICAgOiB2LnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLm5hbWUgPSBwYXJ0cy5uYW1lXG4gICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10uc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9XG4gICAgICAgICAgICAgIHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlSXRlbUVyYXMgKGl0ZW0sIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAodHlwZW9mIGl0ZW0uc3lzdGVtLmVyYXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyAxOTIwID0+IHN0YW5kYXJkXG4gICAgICAvLyBtZHJuID0+IG1vZGVybiAvIG1vZGVyblB1bHBcbiAgICAgIC8vIHB1bHAgPT4gcHVscFxuICAgICAgLy8gZGR0cyA9PiBkb3duRGFya2VyVHJhaWxzIC8gZG93bkRhcmtlclRyYWlsc1B1bHBcbiAgICAgIC8vIGRya2EgPT4gZGFya0FnZXMgLyBkYXJrQWdlc1B1bHBcbiAgICAgIC8vIGdsaXQgPT4gZ2FzTGlnaHRcbiAgICAgIC8vIG52Y3QgPT4gaW52aWN0dXNcbiAgICAgIGxldCBlcmFzID0ge31cbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLmVyYXMpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUuc2VsZWN0ZWQgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICcxOTIwJzpcbiAgICAgICAgICAgICAgZXJhcy5zdGFuZGFyZCA9IHRydWVcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ21kcm4nOlxuICAgICAgICAgICAgICBlcmFzLm1vZGVybiA9IHRydWVcbiAgICAgICAgICAgICAgZXJhcy5tb2Rlcm5QdWxwID0gdHJ1ZVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAncHVscCc6XG4gICAgICAgICAgICAgIGVyYXMucHVscCA9IHRydWVcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ2RkdHMnOlxuICAgICAgICAgICAgICBlcmFzLmRvd25EYXJrZXJUcmFpbHMgPSB0cnVlXG4gICAgICAgICAgICAgIGVyYXMuZG93bkRhcmtlclRyYWlsc1B1bHAgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdkcmthJzpcbiAgICAgICAgICAgICAgZXJhcy5kYXJrQWdlcyA9IHRydWVcbiAgICAgICAgICAgICAgZXJhcy5kYXJrQWdlc1B1bHAgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdnbGl0JzpcbiAgICAgICAgICAgICAgZXJhcy5nYXNMaWdodCA9IHRydWVcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ252Y3QnOlxuICAgICAgICAgICAgICBlcmFzLmludmljdHVzID0gdHJ1ZVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3NldHVwJykge1xuICAgICAgICAvLyBJZiBtb3JlIHRoYW4gb25lIGVyYSB0YWtlIHRoZSBmaXJzdCBvbmUgb25seVxuICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhlcmFzKVswXVxuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgZXJhcyA9IHsgW2tleV06IHRydWUgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIG5vIGVyYXMgZGVmYXVsdCB0byBzdGFuZGFyZFxuICAgICAgICAgIGVyYXMgPSB7IHN0YW5kYXJkOiB0cnVlIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgQ29DNyA9IHtcbiAgICAgICAgY29jaWRGbGFnOiB7XG4gICAgICAgICAgaWQ6ICcnLFxuICAgICAgICAgIGxhbmc6IGdhbWUuaTE4bi5sYW5nLFxuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGVyYXNcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpdGVtLmZsYWdzPy5Db0M3ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpdGVtLmZsYWdzLkNvQzcgPSBDb0M3XG4gICAgICAgIHVwZGF0ZURhdGFbJ2ZsYWdzLkNvQzcnXSA9IENvQzdcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaXRlbS5mbGFncy5Db0M3LmNvY2lkRmxhZyA9IENvQzcuY29jaWRGbGFnXG4gICAgICAgIHVwZGF0ZURhdGFbJ2ZsYWdzLkNvQzcuY29jaWRGbGFnJ10gPSBDb0M3LmNvY2lkRmxhZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzID0gQ29DNy5jb2NpZEZsYWcuZXJhc1xuICAgICAgICB1cGRhdGVEYXRhWydmbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzJ10gPSBDb0M3LmNvY2lkRmxhZy5lcmFzXG4gICAgICB9XG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uLT1lcmFzJ10gPSBudWxsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlQWN0b3JBcnR3b3JrIChhY3RvciwgdXBkYXRlRGF0YSkge1xuICAgIGxldCBpbWFnZSA9IFN0cmluZyhhY3Rvci5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgdXBkYXRlRGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICB9XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGFjdG9yLnByb3RvdHlwZVRva2VuICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIGFjdG9yLnByb3RvdHlwZVRva2VuLnRleHR1cmU/LnNyYyAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGltYWdlID0gU3RyaW5nKGFjdG9yLnByb3RvdHlwZVRva2VuLnRleHR1cmUuc3JjKS5tYXRjaChcbiAgICAgICAgL3N5c3RlbXNcXC9Db0M3XFwvYXJ0d29ya1xcL2ljb25zXFwvKC4rKS9cbiAgICAgIClcbiAgICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVEYXRhWydwcm90b3R5cGVUb2tlbi50ZXh0dXJlLnNyYyddID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvJyArIGltYWdlWzFdXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYWN0b3IuZWZmZWN0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGFjdG9yLmVmZmVjdHMpKSB7XG4gICAgICAgIGltYWdlID0gU3RyaW5nKHYuaWNvbikubWF0Y2goL3N5c3RlbXNcXC9Db0M3XFwvYXJ0d29ya1xcL2ljb25zXFwvKC4rKS8pXG4gICAgICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YS5lZmZlY3RzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdXBkYXRlRGF0YS5lZmZlY3RzID0gYWN0b3IuZWZmZWN0c1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVEYXRhLmVmZmVjdHNba10uaWNvbiA9ICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zLycgKyBpbWFnZVsxXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlQWN0b3JLZWVwZXJOb3RlcyAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoWydjaGFyYWN0ZXInLCAnbnBjJywgJ2NyZWF0dXJlJ10uaW5jbHVkZXMoYWN0b3IudHlwZSkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5kZXNjcmlwdGlvbiA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZGVzY3JpcHRpb24nXSA9IHtcbiAgICAgICAgICBrZWVwZXI6ICcnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVBY3Rvck1vbmV0YXJ5IChhY3RvciwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChhY3Rvci50eXBlID09PSAnY2hhcmFjdGVyJyAmJiB0eXBlb2YgYWN0b3Iuc3lzdGVtLmNyZWRpdD8ubXVsdGlwbGllciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5zeW1ib2wnXSA9IGFjdG9yLnN5c3RlbS5jcmVkaXQ/Lm1vbmV0YXJ5U3ltYm9sID8gYWN0b3Iuc3lzdGVtLmNyZWRpdC5tb25ldGFyeVN5bWJvbCA6ICckJ1xuICAgICAgaWYgKHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5zeW1ib2wnXS50b1N0cmluZygpLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLm1vbmV0YXJ5LnN5bWJvbCddID0gJyQnXG4gICAgICB9XG4gICAgICBjb25zdCBtdWx0aXBsaWVyID0gcGFyc2VJbnQoYWN0b3Iuc3lzdGVtLmNyZWRpdC5tdWx0aXBsaWVyKSA/IHBhcnNlSW50KGFjdG9yLnN5c3RlbS5jcmVkaXQubXVsdGlwbGllcikgOiAxXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0ubW9uZXRhcnkuc3BlbnQnXSA9IGFjdG9yLnN5c3RlbS5jcmVkaXQuc3BlbnRcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5hc3NldHNEZXRhaWxzJ10gPSBhY3Rvci5zeXN0ZW0uY3JlZGl0LmFzc2V0c0RldGFpbHNcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5zcGVuZGluZ0xldmVsJ10gPSBhY3Rvci5zeXN0ZW0uY3JlZGl0LnNwZW5kaW5nTGV2ZWxcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5jYXNoJ10gPSBhY3Rvci5zeXN0ZW0uY3JlZGl0LmNhc2hcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5hc3NldHMnXSA9IGFjdG9yLnN5c3RlbS5jcmVkaXQuYXNzZXRzXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0ubW9uZXRhcnkudmFsdWVzJ10gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShhY3Rvci5zeXN0ZW0ubW9uZXRhcnkudmFsdWVzKVxuICAgICAgaWYgKG11bHRpcGxpZXIgIT09IDEpIHtcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB1cGRhdGVEYXRhWydzeXN0ZW0ubW9uZXRhcnkudmFsdWVzJ10pIHtcbiAgICAgICAgICB2YWx1ZS5jYXNoVmFsdWUgPSBtdWx0aXBsaWVyICogdmFsdWUuY2FzaFZhbHVlXG4gICAgICAgICAgdmFsdWUuYXNzZXRzVmFsdWUgPSBtdWx0aXBsaWVyICogdmFsdWUuYXNzZXRzVmFsdWVcbiAgICAgICAgICB2YWx1ZS5zcGVuZGluZ1ZhbHVlID0gbXVsdGlwbGllciAqIHZhbHVlLnNwZW5kaW5nVmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09Y3JlZGl0J10gPSBudWxsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlQWN0b3JTYW5Mb3NzUmVhc29ucyAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoXG4gICAgICBhY3Rvci50eXBlID09PSAnY2hhcmFjdGVyJyAmJlxuICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbT8uZW5jb3VudGVyZWRDcmVhdHVyZXMgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zdCBncm91cHMgPSB7fVxuICAgICAgZm9yIChjb25zdCBzYW5pdHlMb3NzRXZlbnQgb2YgYWN0b3Iuc3lzdGVtLmVuY291bnRlcmVkQ3JlYXR1cmVzKSB7XG4gICAgICAgIGlmIChzYW5pdHlMb3NzRXZlbnQudG90YWxMb3NzID4gMCkge1xuICAgICAgICAgIGdyb3Vwc1tzYW5pdHlMb3NzRXZlbnQubmFtZV0gPSBNYXRoLm1heChcbiAgICAgICAgICAgIGdyb3Vwc1tzYW5pdHlMb3NzRXZlbnQubmFtZV0gPz8gMCxcbiAgICAgICAgICAgIHNhbml0eUxvc3NFdmVudC50b3RhbExvc3NcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudHMgPSBbXVxuICAgICAgZm9yIChjb25zdCBuYW1lIGluIGdyb3Vwcykge1xuICAgICAgICBzYW5pdHlMb3NzRXZlbnRzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IG5hbWUsXG4gICAgICAgICAgdG90YWxMb3NzOiBncm91cHNbbmFtZV0sXG4gICAgICAgICAgaW1tdW5pdHk6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2FuaXR5TG9zc0V2ZW50cyddID0gc2FuaXR5TG9zc0V2ZW50c1xuICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09ZW5jb3VudGVyZWRDcmVhdHVyZXMnXSA9IG51bGxcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVBY3RvclN0YXR1c0VmZmVjdEFjdGl2ZSAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoWydjaGFyYWN0ZXInLCAnbnBjJywgJ2NyZWF0dXJlJ10uaW5jbHVkZXMoYWN0b3IudHlwZSkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgKHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3RhdHVzICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uY29uZGl0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICApIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMuY3JpdGljYWxXb3VuZHMudmFsdWUnXSA9IGZhbHNlXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLnVuY29uc2Npb3VzLnZhbHVlJ10gPSBmYWxzZVxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29uZGl0aW9ucy5keWluZy52YWx1ZSddID0gZmFsc2VcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMuZGVhZC52YWx1ZSddID0gZmFsc2VcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMucHJvbmUudmFsdWUnXSA9IGZhbHNlXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLnRlbXBvSW5zYW5lLnZhbHVlJ10gPSBmYWxzZVxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29uZGl0aW9ucy5pbmRlZkluc2FuZS52YWx1ZSddID0gZmFsc2VcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5jcml0aWNhbFdvdW5kcz8udmFsdWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgYWN0b3Iuc3lzdGVtLnN0YXR1cz8uY3JpdGljYWxXb3VuZHMudmFsdWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMuY3JpdGljYWxXb3VuZHMudmFsdWUnXSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5zdGF0dXM/LnVuY29uc2Npb3VzPy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uc3RhdHVzPy51bmNvbnNjaW91cy52YWx1ZVxuICAgICAgICApIHtcbiAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29uZGl0aW9ucy51bmNvbnNjaW91cy52YWx1ZSddID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgYWN0b3Iuc3lzdGVtLnN0YXR1cz8uZHlpbmc/LnZhbHVlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGFjdG9yLnN5c3RlbS5zdGF0dXM/LmR5aW5nLnZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLmR5aW5nLnZhbHVlJ10gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5kZWFkPy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5kZWFkLnZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLmRlYWQudmFsdWUnXSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5zdGF0dXM/LnByb25lPy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5wcm9uZS52YWx1ZVxuICAgICAgICApIHtcbiAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29uZGl0aW9ucy5wcm9uZS52YWx1ZSddID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgYWN0b3Iuc3lzdGVtLnN0YXR1cz8udGVtcG9JbnNhbmU/LnZhbHVlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGFjdG9yLnN5c3RlbS5zdGF0dXM/LnRlbXBvSW5zYW5lLnZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLnRlbXBvSW5zYW5lLnZhbHVlJ10gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5pbmRlZkluc2FuZT8udmFsdWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgYWN0b3Iuc3lzdGVtLnN0YXR1cz8uaW5kZWZJbnNhbmUudmFsdWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMuaW5kZWZJbnNhbmUudmFsdWUnXSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFjdG9yLmVmZmVjdHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgZWZmZWN0cyA9IGFjdG9yLmVmZmVjdHNcbiAgICAgICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGltID0gZWZmZWN0cy5sZW5ndGg7IGkgPCBpbTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlZmZlY3QgPSBlZmZlY3RzW2ldXG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IGVmZmVjdC5pY29uLm1hdGNoKFxuICAgICAgICAgICAgICAvXFwvKGhhbmdpbmctc3BpZGVyfHRlbnRhY2xlcy1za3VsbHxhcm0tc2xpbmd8aGVhcnQtYmVhdHN8dG9tYnN0b25lfGtub2NrZWQtb3V0LXN0YXJzfGZhbGxpbmd8c2t1bGx8dW5jb25zY2lvdXMpXFwuL1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGxldCBzdGF0dXNJZCA9ICcnXG4gICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdoYW5naW5nLXNwaWRlcic6XG4gICAgICAgICAgICAgICAgICBzdGF0dXNJZCA9ICd0ZW1wb0luc2FuZSdcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAndGVudGFjbGVzLXNrdWxsJzpcbiAgICAgICAgICAgICAgICAgIHN0YXR1c0lkID0gJ2luZGVmSW5zYW5lJ1xuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdhcm0tc2xpbmcnOlxuICAgICAgICAgICAgICAgICAgc3RhdHVzSWQgPSAnY3JpdGljYWxXb3VuZHMnXG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hlYXJ0LWJlYXRzJzpcbiAgICAgICAgICAgICAgICAgIHN0YXR1c0lkID0gJ2R5aW5nJ1xuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICd0b21ic3RvbmUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NrdWxsJzpcbiAgICAgICAgICAgICAgICAgIHN0YXR1c0lkID0gJ2RlYWQnXG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2tub2NrZWQtb3V0LXN0YXJzJzpcbiAgICAgICAgICAgICAgICBjYXNlICd1bmNvbnNjaW91cyc6XG4gICAgICAgICAgICAgICAgICBzdGF0dXNJZCA9ICd1bmNvbnNjaW91cydcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnZmFsbGluZyc6XG4gICAgICAgICAgICAgICAgICBzdGF0dXNJZCA9ICdwcm9uZSdcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHN0YXR1c0lkICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGlmICghdXBkYXRlRGF0YVtgc3lzdGVtLmNvbmRpdGlvbnMuJHtzdGF0dXNJZH0udmFsdWVgXSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YVtgc3lzdGVtLmNvbmRpdGlvbnMuJHtzdGF0dXNJZH0udmFsdWVgXSA9IHRydWVcbiAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QuZmxhZ3MuY29yZT8uc3RhdHVzSWQgIT09IHN0YXR1c0lkKSB7XG4gICAgICAgICAgICAgICAgICBlZmZlY3RzW2ldID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChlZmZlY3QsIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb3JlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNJZFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVEYXRhLmVmZmVjdHMgPSBlZmZlY3RzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS4tPXN0YXR1cyddID0gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlRGF0YVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlQWN0b3JOcGNDcmVhdHVyZSAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoWyducGMnXS5pbmNsdWRlcyhhY3Rvci50eXBlKSAmJiB0eXBlb2YgYWN0b3Iuc3lzdGVtICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3BlY2lhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNwZWNpYWwnXSA9IHtcbiAgICAgICAgICBjaGVja1Bhc3NlZDogbnVsbCxcbiAgICAgICAgICBjaGVja0ZhaWxsZWQ6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBhY3Rvci5zeXN0ZW0uYXR0YWNrc1BlclJvdW5kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0YWNrc1BlclJvdW5kJ10gPSAxXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVEYXRhXG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVBY3RvckNoYXJhY3RlclNhbml0eSAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoXG4gICAgICBhY3Rvci50eXBlID09PSAnY2hhcmFjdGVyJyAmJlxuICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbT8uYXR0cmlicz8uc2FuICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc3Qgb25lRmlmdGhTYW5pdHkgPSBNYXRoLmNlaWwoYWN0b3Iuc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlIC8gNSlcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxvc3MgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxvc3MgPT09IG51bGxcbiAgICAgICkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMb3NzJ10gPSAwXG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uYXR0cmlicy5zYW4ub25lRmlmdGhTYW5pdHkgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5hdHRyaWJzLnNhbi5vbmVGaWZ0aFNhbml0eSA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5hdHRyaWJzLnNhbi5vbmVGaWZ0aFNhbml0eSddID0gJyAvICcgKyBvbmVGaWZ0aFNhbml0eVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgYWN0b3Iuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TG9zcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgYWN0b3Iuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TG9zcyA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxvc3MnXSA9IDBcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgYWN0b3Iuc3lzdGVtLmluZGVmaW5pdGVJbnNhbml0eUxldmVsID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uaW5kZWZpbml0ZUluc2FuaXR5TGV2ZWwudmFsdWUgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbC52YWx1ZSA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbC52YWx1ZSddID0gMFxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgYWN0b3Iuc3lzdGVtLmluZGVmaW5pdGVJbnNhbml0eUxldmVsID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBhY3Rvci5zeXN0ZW0uaW5kZWZpbml0ZUluc2FuaXR5TGV2ZWwgPT09IG51bGwgfHxcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbC5tYXggPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbC5tYXggPT09IG51bGxcbiAgICAgICkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uaW5kZWZpbml0ZUluc2FuaXR5TGV2ZWwubWF4J10gPSBvbmVGaWZ0aFNhbml0eVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSA9PT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSddID0gb25lRmlmdGhTYW5pdHlcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5hdHRyaWJzLm1wLm1heCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcC5tYXggPT09IG51bGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmF0dHJpYnMubXAubWF4J10gPSBvbmVGaWZ0aFNhbml0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0ubm90ZXMgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5ub3RlcyA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ub3RlcyddID0gJydcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZU1hY3JvQXJ0d29yayAodGFibGUsIHVwZGF0ZURhdGEpIHtcbiAgICBjb25zdCBpbWFnZSA9IFN0cmluZyh0YWJsZS5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgdXBkYXRlRGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZVRhYmxlQXJ0d29yayAodGFibGUsIHVwZGF0ZURhdGEpIHtcbiAgICBsZXQgaW1hZ2UgPSBTdHJpbmcodGFibGUuaW1nKS5tYXRjaCgvc3lzdGVtc1xcL0NvQzdcXC9hcnR3b3JrXFwvaWNvbnNcXC8oLispLylcbiAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgIHVwZGF0ZURhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvJyArIGltYWdlWzFdXG4gICAgfVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHRhYmxlLnJlc3VsdHMpKSB7XG4gICAgICBpbWFnZSA9IFN0cmluZyh2LmltZykubWF0Y2goL3N5c3RlbXNcXC9Db0M3XFwvYXJ0d29ya1xcL2ljb25zXFwvKC4rKS8pXG4gICAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhLnJlc3VsdHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YS5yZXN1bHRzID0gdGFibGUucmVzdWx0c1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZURhdGEucmVzdWx0c1trXS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZVRva2VuQXJ0d29yayAodG9rZW4sIHVwZGF0ZURhdGEpIHtcbiAgICBjb25zdCBpbWFnZSA9IFN0cmluZyh0b2tlbi5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgdXBkYXRlRGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGdhbWUgKi9cbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG4vKipcbiAqIG5hbWVDaGFyYWN0ZXJzIGxpc3Qgb2YgY2hhcmFjdGVycyB0aGF0IGNhbiBiZSBwYXJ0IG9mIGEgW10gZm9yIGNoYXJhY3Rlciwgc2tpbGwsIG9yIHdlYXBvbiBuYW1lcyB1c2VkIGluIGJyYWNrZXQgZXhwcmVzc2lvbi5cbiAqXG4gKiBcImtleXMuPGxhbmd1YWdlPi5kZXNjcmlwdGlvblwiIGxhbmcga2V5IHRvIHNob3cgaW4gdGhlIGxhbmd1YWdlIHNlbGVjdGlvbiBkaWFsb2cgYm94LlxuICogXCJrZXlzLjxsYW5ndWFnZT4uZGJOb25lXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIG5vIERhbWFnZSBCb251cyBlLmcuIERCOiBcImRiTm9uZVwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uYXJtb3JOb25lXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIG5vIEFybW91ciBCb251cyBlLmcuIEFybW9yOiBcImFybW9yTm9uZVwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uYXR0YWNrc1BlclJvdW5kTm9uZVwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBpbmRpY2F0ZSBubyBhdHRhY2tzIGUuZy4gQXR0YWNrcyBQZXIgUm91bmQ6IFwiYXR0YWNrc1BlclJvdW5kTm9uZVwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uc2FuTG9zc05vbmVcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgbm8gc2FuaXR5IGxvc3MgZS5nLiBTQU4gbG9zczogXCJzYW5Mb3NzTm9uZVwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uZnVsbGRiXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIGRhbWFnZSBib251cyBpbiBhdHRyaWJ1dGVzIGFuZCB3ZWFwb24gZGFtYWdlIGUuZy4gREI6IFwiZnVsbGRiXCIgLyBXZWFwb24gNTAlICgyNS8xMCksIGRhbWFnZSAxRDYgKyBcImZ1bGxkYlwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uaGFsZmRiXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIGhhbGYgZGFtYWdlIGJvbnVzIGluIHdlYXBvbiBkYW1hZ2UgZS5nLiBXZWFwb24gNTAlICgyNS8xMCksIGRhbWFnZSAxRDYgKyBcImhhbGZkYlwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uc2VjdGlvbkNvbWJhdHNcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgdGhlIHN0YXJ0IG9mIHRoZSBjb21iYXQgLyB3ZWFwb24gc2VjdGlvbiBvZiB0ZXh0LlxuICogXCJrZXlzLjxsYW5ndWFnZT4ubmV3Q29tYmF0SGVhZGVyXCIgSWYgdGhlcmUgaXMgbm8gY29tYmF0IC8gd2VhcG9uIHNlY3Rpb24sIGFkZCB0aGlzIHNlY3Rpb24gd2VyZSBpdCBwcm9iYWJseSBpcywgdGhpcyBuZWVkcyB0byBtYXRjaGVkIGJ5IFwia2V5cy48bGFuZ3VhZ2U+LnNlY3Rpb25Db21iYXRzXCIuXG4gKiBcImtleXMuPGxhbmd1YWdlPi5zZWN0aW9uU2tpbGxzXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIHRoZSBzdGFydCBvZiB0aGUgc2tpbGxzIHNlY3Rpb24gb2YgdGV4dC5cbiAqIFwia2V5cy48bGFuZ3VhZ2U+LnNlY3Rpb25MYW5nYXVnZXNcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgdGhlIHN0YXJ0IG9mIHRoZSBsYW5ndWFnZXMgc2VjdGlvbiBvZiB0ZXh0LlxuICogXCJrZXlzLjxsYW5ndWFnZT4uc2VjdGlvblNwZWxsc1wiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBpbmRpY2F0ZSB0aGUgc3RhcnQgb2YgdGhlIHNwZWxscyBzZWN0aW9uIG9mIHRleHQuXG4gKiBcImtleXMuPGxhbmd1YWdlPi5oYW5kZ3VuXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBjb21iYXQgc2VjdGlvbiB3ZWFwb24gbmFtZSBpcyBhIGhhbmRndW4gdHlwZS5cbiAqIFwia2V5cy48bGFuZ3VhZ2U+LnJpZmxlXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBjb21iYXQgc2VjdGlvbiB3ZWFwb24gbmFtZSBpcyBhIHJpZmxlIHR5cGUuXG4gKiBcImtleXMuPGxhbmd1YWdlPi5zbWJcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGNvbWJhdCBzZWN0aW9uIHdlYXBvbiBuYW1lIGlzIGEgc3VibWFjaGluZSBndW4gdHlwZS5cbiAqIFwia2V5cy48bGFuZ3VhZ2U+Lm1hY2hpbmVHdW5cIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGNvbWJhdCBzZWN0aW9uIHdlYXBvbiBuYW1lIGlzIGEgbWFjaGluZSBndW4gdHlwZS5cbiAqIFwia2V5cy48bGFuZ3VhZ2U+LmxhdW5jaGVkXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBjb21iYXQgc2VjdGlvbiB3ZWFwb24gbmFtZSBpcyBhIGxhdW5jaGVkIHR5cGUuXG4gKiBcImtleXMuPGxhbmd1YWdlPi5leGFtcGxlXCIgU3RyaW5nIHRoYXQgc2hvdWxkIHNob3cgYXMgYSBwbGFjZWhvbGRlciBleGFtcGxlLlxuICpcbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uYWdlXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBhZ2UsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8YWdlPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4ub2NjdXBhdGlvblwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgb2NjdXBhdGlvbiwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxvY2N1cGF0aW9uPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uc3RyXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBzdHJlbmd0aCBjaGFyYWN0ZXJpc3RpYywgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxzdHI+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5jb25cIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGNvbnN0aXR1dGlvbiBjaGFyYWN0ZXJpc3RpYywgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxjb24+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5zaXpcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIHNpemUgY2hhcmFjdGVyaXN0aWMsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8c2l6Pi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uaW50XCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBpbnRlbGxpZ2VuY2UgY2hhcmFjdGVyaXN0aWMsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8aW50Pi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4ucG93XCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBwb3dlciBjaGFyYWN0ZXJpc3RpYywgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxwb3c+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5kZXhcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGRleHRlcml0eSBjaGFyYWN0ZXJpc3RpYywgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxkZXg+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5hcHBcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGFwcGVhcmFuY2UgY2hhcmFjdGVyaXN0aWMsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8YXBwPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uZWR1XCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBlZHVjYXRpb24gY2hhcmFjdGVyaXN0aWMsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8ZWR1Pi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uc2FuXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBzYW5pdHkgcG9pbnRzIGF0dHJpYnV0ZSwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxzYW4+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5ocFwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgaGl0IHBvaW50cyBhdHRyaWJ1dGUsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8aHA+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5tcFwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgbWFnaWMgcG9pbnRzIGF0dHJpYnV0ZSwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxtcD4uXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LmRiXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBkYW1hZ2UgYm9udXMgYXR0cmlidXRlLCBuYW1lZCBjYXB0dXJpbmcgZ3JvdXAgPGRiPiBpZiBtYXRjaGluZyBcImtleXMuPGxhbmd1YWdlPi5kYk5vbmVcIiB0aGVuIDAuXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LmJ1aWxkXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBidWlsZCBhdHRyaWJ1dGUsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8YnVpbGQ+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5hcm1vclwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgZGFtYWdlIGJvbnVzIGF0dHJpYnV0ZSwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxkYj4gaWYgbWF0Y2hpbmcgXCJrZXlzLjxsYW5ndWFnZT4uYXJtb3JOb25lXCIgdGhlbiAwLlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5tb3ZcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIG1vdmVtZW50IHJhdGUgYXR0cmlidXRlLCBuYW1lZCBjYXB0dXJpbmcgZ3JvdXAgPG1vdj4uXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+Lmxja1wiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgbHVjayBhdHRyaWJ1dGUsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8bGNrPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uYXR0YWNrc1BlclJvdW5kXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBhdHRhY2tzIHBlciByb3VuZCwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxhdHRhY2tzUGVyUm91bmQ+IGlmIG1hdGNoaW5nIFwia2V5cy48bGFuZ3VhZ2U+LmF0dGFja3NQZXJSb3VuZE5vbmVcIiB0aGVuIDAuXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LnNhbkxvc3NcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIHNhbiBsb3NzIG1pbi9tYXgsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8c2FuTG9zcz4gaWYgbWF0Y2hpbmcgXCJrZXlzLjxsYW5ndWFnZT4uc2FuTG9zc05vbmVcIiB0aGVuIG5vbmUuXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LndlYXBvblwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgY29tYmF0IHNlY3Rpb24sIG5hbWVkIGNhcHR1cmluZyBncm91cCB3ZWFwb24gPG5hbWU+LCBvcHRpb25hbCA8cGVyY2VudGFnZT4sIGFuZCA8ZGFtYWdlPi4gRGFtYWdlIGNhbiBjb250YWluIFwia2V5cy48bGFuZ3VhZ2U+LmZ1bGxkYlwiIGFuZCBcImtleXMuPGxhbmd1YWdlPi5oYWxmZGJcIi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4ud2VhcG9uRG9kZ2VcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGNvbWJhdCBzZWN0aW9uIGRvZGdlIHNraWxsLCBuYW1lZCBjYXB0dXJpbmcgZ3JvdXAgPG5hbWU+IGFuZCA8cGVyY2VudGFnZT4uXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LnNraWxsXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBza2lsbCBzZWN0aW9uIHNraWxsIG5hbWUsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8bmFtZT4gYW5kIDxwZXJjZW50YWdlPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uZ3Vlc3NTdGFydENvbWJhdFwiIFJlZ3VsYXIgZXhwcmVzc2lvbiBpZiB0aGVyZSBpcyBubyBjb21iYXQgc2VjdGlvbiBmaW5kIHRoZXNlIGFyZSBsaWtlbHkgdG8gYmUgdGhlIGZpcnN0IHdlYXBvbiBuYW1lLCBcImtleXMuPGxhbmd1YWdlPi5uZXdDb21iYXRIZWFkZXJcIiBpcyB0aGVuIGFkZGVkIGJlZm9yZSBpdCB0byBnZXQgdGhlIGdyb3Vwc1xuICpcbiAqIFRoZXNlIHNob3VsZCBub3QgYmUgZWRpdGVkIGFzIHRoZXkgc2hvdWxkIHdvcmsgYXMgaXNcbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4ubmFtZVwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgbmFtZSwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxuYW1lPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uc2VjdGlvbnNcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gc3BsaXQgdGV4dCBpbnRvIGNvbWJhdCwgc2tpbGwsIGxhbmd1YWdlLCBhbmQgc3BlbGxzIHNlY3Rpb25cbiAqXG4gKiBJZiB0aGVyZSBpcyBuZXcgZnVuY3Rpb25hbGl0eSBjaGVjayBmb3IgdGhpcyBzdHJpbmcgaW4gdGhlIHRyYW5zbGF0aW9ucyAvIGtleXMgZm9yIHlvdXIgbGFuZ3VhZ2UgXCJORVcgS0VZIEJFTE9XIC0gVFJBTlNMQVRJT04gUkVRVUlSRURcIlxuICovXG5jb25zdCBuYW1lQ2hhcmFjdGVycyA9XG4gICdcXFxcdTMwMDBcXFxcdTM0MDAtXFxcXHU0REJGXFxcXHU0RTAwLVxcXFx1OUZGRlxcXFx3XFxcXChcXFxcKVxcXFwtXFxcXC8mXCJcXCcnICtcbiAgQ29DN1V0aWxpdGllcy5xdW90ZVJlZ0V4cChcbiAgICAnYcyBZcyBacyBb8yBw6DDqMOsw7LDucOAw4jDjMOSw5nDocOpw63Ds8O6w73DgcOJw43Dk8Oaw53DosOqw67DtMO7w4LDisOOw5TDm8Ojw7HDtcODxIDDkcOVw6TDq8Ovw7bDvMO/w4TDi8OPw5bDnMW4w6DDqMOnw4fDn8OYw7jDhcOlw4bDpsWT4oCc4oCdwqvCu8SFxIfEmcWCxYTDs8WbxbrFvMSExIbEmMWBxYPDk8WaxbnFuydcbiAgKVxuXG5jb25zdCBrZXlzID0ge1xuICBlbjoge1xuICAgIGRlc2NyaXB0aW9uOiAnQ29DNy5FbmdsaXNoJyxcbiAgICBkYk5vbmU6ICdub25lJyxcbiAgICBhcm1vck5vbmU6ICdub25lJyxcbiAgICBhdHRhY2tzUGVyUm91bmROb25lOiAnbm9uZScsXG4gICAgc2FuTG9zc05vbmU6ICdub25lJyxcbiAgICBmdWxsZGI6ICcoJyArICdEYW1hZ2UgQm9udXN8REInICsgJyknLFxuICAgIGhhbGZkYjogJygnICsgJ8K9fGhhbGYnICsgJyknLFxuICAgIHNlY3Rpb25Db21iYXRzOiAnXFxuKD86JyArICdjb21iYXR8ZmlnaHRpbmcgYXR0YWNrcycgKyAnKVs6XFxuXScsXG4gICAgbmV3Q29tYmF0SGVhZGVyOiAnXFxuJyArICdDb21iYXQnICsgJ1xcbicsXG4gICAgc2VjdGlvblNraWxsczogJ1xcbig/OicgKyAnc2tpbGxzJyArICcoPzpcXFxccypcXFxcKFteXFxcXCldK1xcXFwpKT8pWzpcXG5dJyxcbiAgICBzZWN0aW9uTGFuZ2F1Z2VzOiAnXFxuKD86JyArICdsYW5ndWFnZXMnICsgJylbOlxcbl0nLFxuICAgIHNlY3Rpb25TcGVsbHM6ICdcXG4oPzonICsgJ3NwZWxscycgKyAnKVs6XFxuXScsXG4gICAgaGFuZGd1bjpcbiAgICAgICcoPzx0eXBlPicgK1xuICAgICAgJyBHdW58UmV2b2x2ZXJ8UGlzdG9sfEhhbmRndW58RGVycmluZ2VyfEJlcmV0dGF8THVnZXJ8RGVzZXJ0IEVhZ2xlfCBcXFxcLjM4JyArXG4gICAgICAnKScsXG4gICAgcmlmbGU6XG4gICAgICAnKD88dHlwZT4nICsgJ1JpZmxlfFNob3RndW58Q2FyYmluZXxHYXVnZSB8TGVlLUVuZmllbGR8RWxlcGhhbnQnICsgJyknLFxuICAgIHNtYjogJyg/PHR5cGU+JyArICdTdWJtYWNoaW5lIEd1bnxUaG9tcHNvbicgKyAnKScsXG4gICAgbWFjaGluZUd1bjogJyg/PHR5cGU+JyArICdCcm93bmluZ3xWaWNrZXJzJyArICcpJyxcbiAgICBsYXVuY2hlZDogJyg/PHR5cGU+JyArICdNb2xvdG92fEdyZW5hZGV8RHluYW1pdGUnICsgJyknLFxuICAgIGV4YW1wbGU6XG4gICAgICAnRXhhbXBsZSBDaGFyYWN0ZXIsIGFnZSAyN1xcblNUUiA3NSBDT04gNjAgU0laIDgwIERFWCA3MCBBUFAgNjAgSU5UIDgwXFxuUE9XIDUwIEVEVSA4NSBTQU4gNTUgSFAgMTQgREI6IDFENFxcbkJ1aWxkOiAxIE1vdmU6IDcgTVA6IDEwIEx1Y2s6IDQwIEFybW9yOiAxXFxuQXR0YWNrcyBwZXIgcm91bmQ6IDMgU0FOIGxvc3M6IDFkNC8xZDhcXG5Db21iYXRcXG5CaXRlIDUwJSAoMjUvMTApLCBkYW1hZ2UgMUQ2XFxuQnJhd2wgMzAlICgxNS82KSwgZGFtYWdlIDFEM1xcbkRlcnJpbmdlciA0MCUgKDIwLzgpLCBkYW1hZ2UgMUQ4KzFcXG5Eb2RnZSA1MCUgKDI1LzEwKVxcblNraWxsc1xcbkFuaW1hbCBIYW5kbGluZyA1NSUsIENoYXJtIDMwJSwgRmlyc3QgQWlkIDI1JSwgRGlzZ3Vpc2UgMjAlLFxcbkxpc3RlbiA1MCUsIE1lZGljaW5lIDQ1JSwgUGVyc3VhZGUgMjUlLCBQc3ljaG9sb2d5IDc1JSxcXG5TY2llbmNlIChBc3Ryb25vbXkpIDkwJSwgU2NpZW5jZSAoQm90YW55KSAzNSUsIFNjaWVuY2UgKFpvb2xvZ3kpIDEwJSxcXG5TcG90IEhpZGRlbiAzNSUsIFN0ZWFsdGggMTAlXFxuTGFuZ3VhZ2VzOiBFbmdsaXNoIDgwJSwgRWtsbyA1JS5cXG5TcGVsbHM6IFN1bW1vbiBOUEMsIERpc3BlbCBOUEMuJ1xuICB9LFxuICBkZToge1xuICAgIGRlc2NyaXB0aW9uOiAnQ29DNy5HZXJtYW4nLFxuICAgIGRiTm9uZTogJ25vbmUnLFxuICAgIGFybW9yTm9uZTogJ25vbmUnLFxuICAgIGF0dGFja3NQZXJSb3VuZE5vbmU6ICdub25lJyxcbiAgICBzYW5Mb3NzTm9uZTogJ25vbmUnLFxuICAgIGRpY2VTaG9ydDogJ3d8ZCcsXG4gICAgZnVsbGRiOiAnKCcgKyAnU2NoYWRlbnNib251c3xTYicgKyAnKScsXG4gICAgaGFsZmRiOiAnKCcgKyAnwr18MS8yIFNjaGFkZW5zYm9udXN8U2IvMicgKyAnKScsXG4gICAgc2VjdGlvbkNvbWJhdHM6ICdcXG4oPzonICsgJ0thbXBmfEFuZ3JpZmY6fEFOR1JJRkZFJyArICcpWzpcXG5dJyxcbiAgICBuZXdDb21iYXRIZWFkZXI6ICdcXG4nICsgJ0thbXBmJyArICdcXG4nLFxuICAgIHNlY3Rpb25Ta2lsbHM6ICdcXG4oPzonICsgJ0ZlcnRpZ2tlaXRlbicgKyAnKD86XFxcXHMqXFxcXChbXlxcXFwpXStcXFxcKSk/KVs6XFxuXScsXG4gICAgc2VjdGlvbkxhbmdhdWdlczogJ1xcbig/OicgKyAnU3ByYWNoZW4nICsgJylbOlxcbl0nLFxuICAgIHNlY3Rpb25TcGVsbHM6ICdcXG4oPzonICsgJ1phdWJlcicgKyAnKVs6XFxuXScsXG4gICAgaGFuZGd1bjpcbiAgICAgICcoPzx0eXBlPicgK1xuICAgICAgJyBHdW58UmV2b2x2ZXJ8UGlzdG9sZXxIYW5kZ3VufERlcnJpbmdlcnxCZXJldHRhfEx1Z2VyfERlc2VydCBFYWdsZXwgXFxcXC4zOCcgK1xuICAgICAgJyknLFxuICAgIHJpZmxlOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAnR2V3ZWhyfFNjaHJvdGZsaW50ZXxDYXJhYmluZXJ8S2FyYWJpbmVyfEdhdWdlIHxMZWUtRW5maWVsZHxFbGVmYW50ZW4nICtcbiAgICAgICcpJyxcbiAgICBzbWI6ICcoPzx0eXBlPicgKyAnU3VibWFjaGluZSBHdW58VGhvbXBzb24nICsgJyknLFxuICAgIG1hY2hpbmVHdW46ICcoPzx0eXBlPicgKyAnQnJvd25pbmd8Vmlja2VycycgKyAnKScsXG4gICAgbGF1bmNoZWQ6ICcoPzx0eXBlPicgKyAnTW9sb3RvdnxHcmFuYXRlfER5bmFtaXQnICsgJyknLFxuICAgIGV4YW1wbGU6XG4gICAgICAnVm9ybmFtZSBOYWNobmFtZVxcbkFsdGVyOiAyOVxcbkJlcnVmOiBFaW4gQmVydWZcXG5TVCA1MFxcbk1BIDYwXFxuS08gNjBcXG5HRSA2MFxcbkdSIDU1XFxuRVIgNjVcXG5JTiA4MFxcbkJJIDg1XFxuVHJlZmZlcnB1bmt0ZTogMTFcXG5HZWlzdGlnZSBTdGFiaWxpdMOkdDogNjBcXG5TY2hhZGVuc2JvbnVzOiAwXFxuU3RhdHVyOiAwXFxuTWFnaWVwdW5rdGU6IDEyXFxuQmV3ZWd1bmdzd2VpdGU6IDhcXG5cXG5LYW1wZlxcbkFuZ3JpZmZlOiAxXFxuSGFuZGdlbWVuZ2UgMzAlICgxNS82KSwgU2NoYWRlbiAxRDNcXG5NZXNzZXIgMzAlICgxNS82KSwgU2NoYWRlbiAxRDRcXG5BdXN3ZWljaGVuIDMwJSAoMTUvNilcXG5cXG5GZXJ0aWdrZWl0ZW46IEFudGhyb3BvbG9naWUgNzAlICgzNS8xNCksIEFyY2jDpG9sb2dpZSAzMCUgKDE1LzYpLCBCaWJsaW90aGVrc251dHp1bmcgNTAlICgyNS8xMCksIEVyc3RlIEhpbGZlIDUwJSAoMjUvMTApLCBGaW5hbnprcmFmdCA0MCUgKDIwLzgpLCBHZXNjaGljaHRlIDYwJSAoMzAvMTIpLCBLbGV0dGVybiA1MCUgKDI1LzEwKVxcblxcblNwcmFjaGVuOiBFbmdsaXNjaCA4NSUgKDQyLzE3KTsgRGV1dHNjaCA0NSUgKDIyLzkpLCBMYXRlaW4gNDUlICgyMi85KSdcbiAgfSxcbiAgcGw6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NvQzcuUG9saXNoJyxcbiAgICBkYk5vbmU6ICdicmFrJyxcbiAgICBhcm1vck5vbmU6ICdicmFrJyxcbiAgICBhdHRhY2tzUGVyUm91bmROb25lOiAnYnJhaycsXG4gICAgc2FuTG9zc05vbmU6ICdicmFrJyxcbiAgICBkaWNlU2hvcnQ6ICdrfGQnLFxuICAgIGZ1bGxkYjogJygnICsgJ01vZHlmaWthdG9yIE9icmHFvGXFhHxNTycgKyAnKScsXG4gICAgaGFsZmRiOiAnKCcgKyAnwr18MS8yIE1PfE1PLzInICsgJyknLFxuICAgIHNlY3Rpb25Db21iYXRzOiAnXFxuKD86JyArICdXYWxrYXxBdGFraScgKyAnKVs6XFxuXScsXG4gICAgbmV3Q29tYmF0SGVhZGVyOiAnXFxuJyArICdXYWxrYScgKyAnXFxuJyxcbiAgICBzZWN0aW9uU2tpbGxzOiAnXFxuKD86JyArICdVbWllasSZdG5vxZtjaScgKyAnKD86XFxcXHMqXFxcXChbXlxcXFwpXStcXFxcKSk/KVs6XFxuXScsXG4gICAgc2VjdGlvbkxhbmdhdWdlczogJ1xcbig/OicgKyAnSsSZenlraScgKyAnKVs6XFxuXScsXG4gICAgc2VjdGlvblNwZWxsczogJ1xcbig/OicgKyAnWmFrbMSZY2lhJyArICcpWzpcXG5dJyxcbiAgICBoYW5kZ3VuOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAnIFBpc3RvbGV0fFJld29sd2VyfERlcnJpbmdlcnxCZXJldHRhfEx1Z2VyfERlc2VydCBFYWdsZXwgXFxcXC4zOCcgK1xuICAgICAgJyknLFxuICAgIHJpZmxlOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAnS2FyYWJpbnxTdHJ6ZWxiYXxXaWF0csOzd2thfEdhcmFuZHxHYXVnZSB8TGVlLUVuZmllbGR8U3RyemVsYmEgbmEgc8WCb25pZScgK1xuICAgICAgJyknLFxuICAgIHNtYjogJyg/PHR5cGU+JyArICdQaXN0b2xldCBtYXN6eW5vd3l8VGhvbXBzb24nICsgJyknLFxuICAgIG1hY2hpbmVHdW46ICcoPzx0eXBlPicgKyAnQnJvd25pbmd8Vmlja2VycycgKyAnKScsXG4gICAgbGF1bmNoZWQ6ICcoPzx0eXBlPicgKyAnTW/Fgm90b3dhfEdyYW5hdHxMYXNrYSBkeW5hbWl0dXxEeW5hbWl0JyArICcpJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ1ByenlrxYJhZG93YSBwb3N0YcSHLCAyNyBsYXRcXG5CaWJsaW90ZWthcnpcXG5TIDc1IEtPTiA2MCBCQyA4MCBaUiA3MCBXWUcgNjAgSU5UIDgwXFxuTU9DIDUwIFdZSyA4NSBQIDU1IFBXIDE0IE1POiAxRDRcXG5LcnplcGE6IDEgUnVjaDogNyBQTTogMTAgU3pjesSZxZtjaWU6IDQwIFBhbmNlcno6IDFcXG5BdGFraSB3IHJ1bmR6aWU6IDMgVXRyYXRhIFBvY3p5dGFsbm/Fm2NpOiAxSzQvMUs4XFxuV2Fsa2FcXG5VZ3J5emllbmllIDUwJSAoMjUvMTApLCBvYnJhxbxlbmlhIDFLNlxcbldhbGthIDMwJSAoMTUvNiksIG9icmHFvGVuaWEgMUszXFxuRGVycmluZ2VyIDQwJSAoMjAvOCksIG9icmHFvGVuaWEgMUs4KzFcXG5VbmlrIDUwJSAoMjUvMTApXFxuVW1pZWrEmXRub8WbY2lcXG5UcmVzdXJhIFp3aWVyesSFdCA1NSUsIFVyb2sgT3NvYmlzdHkgMzAlLCBQaWVyd3N6YSBQb21vYyAyNSUsIFVrcnl3YW5pZSAyMCUsXFxuTmFzxYJ1Y2hpd2FuaWUgNTAlLCBNZWR5Y3luYSA0NSUsIFByemVrb255d2FuaWUgMjUlLCBQc3ljaG9sb2dpYSA3NSUsXFxuTmF1a2EgKEFzdHJvbm9taWEpIDkwJSwgTmF1a2EgKEJvdGFuaWthKSAzNSUsIE5hdWthIChab29sb2dpYSkgMTAlLFxcblNwb3N0cnplZ2F3Y3pvxZvEhyAzNSUsIFVrcnl3YW5pZSAxMCVcXG5KxJl6eWtpOiBBbmdpZWxza2kgODAlLCBFa2xvIDUlLlxcblpha2zEmWNpYTogUHJ6eXp3YW5pZSBOUEMsIE9kZXPFgmFuaWUgTlBDLidcbiAgfSxcbiAgZnI6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NvQzcuRnJlbmNoJyxcbiAgICBkYk5vbmU6ICdBY3VuZScsXG4gICAgYXJtb3JOb25lOiAnKD86QWN1bmV8YXVjdW5lKScsXG4gICAgYXR0YWNrc1BlclJvdW5kTm9uZTogJ0FjdW5lJyxcbiAgICBzYW5Mb3NzTm9uZTogJ0FjdW5lJyxcbiAgICBmdWxsZGI6ICcoJyArICdCRHxCb251cyBhdXggZG9tbWFnZXN8SW1wYWN0fEltcCcgKyAnKScsXG4gICAgaGFsZmRiOiAnKCcgKyAnwr18MS8yIEltcHxJbXAvMicgKyAnKScsXG4gICAgc2VjdGlvbkNvbWJhdHM6ICdcXG4oPzonICsgJ0NvbWJhdHxBcm1lc3xBdHRhcXVlcycgKyAnKVs6XFxuXScsXG4gICAgbmV3Q29tYmF0SGVhZGVyOiAnXFxuJyArICdDb21iYXQnICsgJ1xcbicsXG4gICAgc2VjdGlvblNraWxsczogJ1xcbig/OicgKyAnQ29tcMOpdGVuY2VzJyArICcoPzpcXFxccypcXFxcKFteXFxcXCldK1xcXFwpKT8pWzpcXG5dJyxcbiAgICBzZWN0aW9uTGFuZ2F1Z2VzOiAnXFxuKD86JyArICdMYW5ndWVzPycgKyAnKVxcXFxzKls6XFxuXScsXG4gICAgc2VjdGlvblNwZWxsczogJ1xcbig/OicgKyAnU29ydGlsw6hnZXNcXFxccyp8U29ydHMnICsgJylbOlxcbl0nLFxuICAgIGhhbmRndW46XG4gICAgICAnKD88dHlwZT4nICtcbiAgICAgICdSZXZvbHZlcnxQaXN0b2xldHxEZXJyaW5nZXJ8QmVyZXR0YXxMdWdlcnxEZXNlcnQgRWFnbGV8IFxcXFwuMzgnICtcbiAgICAgICcpJyxcbiAgICByaWZsZTogJyg/PHR5cGU+JyArICdDYXJhYmluZXxMZWUtRW5maWVsZHxGdXNpbCcgKyAnKScsXG4gICAgc21iOiAnKD88dHlwZT4nICsgJ1NNR3xUaG9tcHNvbicgKyAnKScsXG4gICAgbWFjaGluZUd1bjogJyg/PHR5cGU+JyArICdCcm93bmluZ3xWaWNrZXJzfE1pdHJhaWxsZXVzZScgKyAnKScsXG4gICAgbGF1bmNoZWQ6XG4gICAgICAnKD88dHlwZT4nICtcbiAgICAgICdCb29tZXJhbmcgZGUgZ3VlcnJlfEphdmVsaW5lfFBpZXJyZXxTaHVyaWtlbnxCw6J0b24gZGUgZHluYW1pdGV8Q29ja3RhaWwgTW9sb3RvdnxHcmVuYWRlIMOgIG1haW58TW9sb3RvdnxHcmVuYWRlfER5bmFtaXRlJyArXG4gICAgICAnKScsXG4gICAgZXhhbXBsZTpcbiAgICAgICdFeGFtcGxlIENoYXJhY3RlciwgMjcgYW5zXFxuRk9SIDc1IENPTiA2MCBUQUkgODAgREVYIDcwIEFQUCA2MCBJTlQgODBcXG5QT1UgNTAgw4lEVSA4NSBTQU4gNTUgUFYgMTQgQkQ6IDFENFxcbkNhcnJ1cmU6IDEgTXZ0OiA3IFBNOiAxMCBDaGFuY2U6IDQwIEFybXVyZTogMVxcbkF0dGFxdWVzIHBhciByb3VuZCAzIFBlcnRlIGRlIFNBTjogMWQ0LzFkOFxcbkF0dGFxdWVzXFxuQml0ZSA1MCUgKDI1LzEwKSwgZG9tbWFnZSAxRDZcXG5CcmF3bCAzMCUgKDE1LzYpLCBkb21tYWdlIDFEM1xcbkRlcnJpbmdlciA0MCUgKDIwLzgpLCBkb21tYWdlIDFEOCsxXFxuRXNxdWl2ZXIgNTAlICgyNS8xMClcXG5Db21ww6l0ZW5jZXNcXG5BbmltYWwgSGFuZGxpbmcgNTUlLCBDaGFybSAzMCUsIEZpcnN0IEFpZCAyNSUsIERpc2d1aXNlIDIwJSxcXG5MaXN0ZW4gNTAlLCBNZWRpY2luZSA0NSUsIFBlcnN1YWRlIDI1JSwgUHN5Y2hvbG9neSA3NSUsXFxuU2NpZW5jZSAoQXN0cm9ub215KSA5MCUsIFNjaWVuY2UgKEJvdGFueSkgMzUlLCBTY2llbmNlIChab29sb2d5KSAxMCUsXFxuU3BvdCBIaWRkZW4gMzUlLCBTdGVhbHRoIDEwJVxcbkxhbmd1ZTogRW5nbGlzaCA4MCUsIEVrbG8gNSUuXFxuU29ydGlsw6hnZXM6IFN1bW1vbiBOUEMsIERpc3BlbCBOUEMuJ1xuICB9LFxuICBlczoge1xuICAgIGRlc2NyaXB0aW9uOiAnQ29DNy5TcGFuaXNoJyxcbiAgICBkYk5vbmU6ICduaW5ndW5hJyxcbiAgICBhcm1vck5vbmU6ICduaW5ndW5hJyxcbiAgICBhdHRhY2tzUGVyUm91bmROb25lOiAnbmluZ3VubycsXG4gICAgc2FuTG9zc05vbmU6ICdubycsXG4gICAgZnVsbGRiOiAnKCcgKyAnQkR8YmR8Ym9uaWZpY2FjacOzbiBkZSBkYcOxbycgKyAnKScsXG4gICAgaGFsZmRiOiAnKCcgKyAnwr18bWVkaW8gZGHDsW98bWl0YWR8ZGHDsW8gYSBsYSBtaXRhZCcgKyAnKScsXG4gICAgc2VjdGlvbkNvbWJhdHM6ICdcXG4oPzonICsgJ0NvbWJhdGV8QXJtYXMnICsgJylbOlxcbl0nLFxuICAgIG5ld0NvbWJhdEhlYWRlcjogJ1xcbicgKyAnQ29tYmF0ZScgKyAnXFxuJyxcbiAgICBzZWN0aW9uU2tpbGxzOiAnXFxuKD86JyArICdIYWJpbGlkYWRlcycgKyAnKD86XFxcXHMqXFxcXChbXlxcXFwpXStcXFxcKSk/KVs6XFxuXScsXG4gICAgc2VjdGlvbkxhbmdhdWdlczogJ1xcbig/OicgKyAnSWRpb21hc3xMZW5ndWFqZXN8TGVuZ3VhcycgKyAnKVs6XFxuXScsXG4gICAgc2VjdGlvblNwZWxsczogJ1xcbig/OicgKyAnQ29uanVyb3N8SGVjaGl6b3MnICsgJylbOlxcbl0nLFxuICAgIGhhbmRndW46XG4gICAgICAnKD88dHlwZT4nICtcbiAgICAgICdSZXZvbHZlcnxQaXN0b2xhfERlcnJpbmdlcnxCZXJldHRhfEx1Z2VyfERlc2VydCBFYWdsZXwgXFxcXC4zOCcgK1xuICAgICAgJyknLFxuICAgIHJpZmxlOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAnUmlmbGV8Q2FyYWJpbmF8TGVlLUVuZmllbGR8Q2F6YSBFbGVmYW50ZXN8RnVzaWx8RXNjb3BldGF8R2FsZ2F8UmVjb3J0YWRhJyArXG4gICAgICAnKScsXG4gICAgc21iOiAnKD88dHlwZT4nICsgJ1N1YmZ1c2lsfFRob21wc29uJyArICcpJyxcbiAgICBtYWNoaW5lR3VuOiAnKD88dHlwZT4nICsgJ0Jyb3duaW5nfFZpY2tlcnN8QW1ldHJhbGxhZG9yYScgKyAnKScsXG4gICAgbGF1bmNoZWQ6ICcoPzx0eXBlPicgKyAnTW9sb3RvdnxHcmFuYWRhfERpbmFtaXRhJyArICcpJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ0V4YW1wbGUgQ2hhcmFjdGVyLCAyNyBhw7Fvc1xcbkZVRSA3NSBDT04gNjAgVEFNIDgwIERFUyA3MCBBUEEgNjAgSU5UIDgwXFxuUE9EIDUwIEVEVSA4NSBDT1IgNTUgUFYgMTQgQkQ6IDFENFxcbkNvcnB1bGVuY2lhOiAxIE1vdmltaWVudG86IDcgUE06IDEwIFN1ZXJ0ZTogNDAgQXJtYWR1cmE6IDFcXG5Ow7ptZXJvIGRlIEF0YXF1ZXMgMyBQw6lyZGlkYSBkZSBjb3JkdXJhOiAxZDQvMWQ4XFxuQ29tYmF0ZVxcbkJpdGUgNTAlICgyNS8xMCksIGRhw7FvIDFENlxcbkJyYXdsIDMwJSAoMTUvNiksIGRhw7FvIDFEM1xcbkRlcnJpbmdlciA0MCUgKDIwLzgpLCBkYcOxbyAxRDgrMVxcbkVzcXVpdmFyIDUwJSAoMjUvMTApXFxuSGFiaWxpZGFkZXNcXG5BbmltYWwgSGFuZGxpbmcgNTUlLCBDaGFybSAzMCUsIEZpcnN0IEFpZCAyNSUsIERpc2d1aXNlIDIwJSxcXG5MaXN0ZW4gNTAlLCBNZWRpY2luZSA0NSUsIFBlcnN1YWRlIDI1JSwgUHN5Y2hvbG9neSA3NSUsXFxuU2NpZW5jZSAoQXN0cm9ub215KSA5MCUsIFNjaWVuY2UgKEJvdGFueSkgMzUlLCBTY2llbmNlIChab29sb2d5KSAxMCUsXFxuU3BvdCBIaWRkZW4gMzUlLCBTdGVhbHRoIDEwJVxcbklkaW9tYXM6IEVuZ2xpc2ggODAlLCBFa2xvIDUlLlxcbkNvbmp1cm9zOiBTdW1tb24gTlBDLCBEaXNwZWwgTlBDLidcbiAgfSxcbiAgJ3poLVRXJzoge1xuICAgIGRlc2NyaXB0aW9uOiAnQ29DNy5UcmFkaXRpb25hbENoaW5lc2UnLFxuICAgIGRiTm9uZTogJ25vbmUnLFxuICAgIGFybW9yTm9uZTogJ25vbmUnLFxuICAgIGF0dGFja3NQZXJSb3VuZE5vbmU6ICdub25lJyxcbiAgICBzYW5Mb3NzTm9uZTogJ25vbmUnLFxuICAgIGZ1bGxkYjogJygnICsgJ0RhbWFnZSBCb251c3xEQnzlgrflrrPliqDlgLwnICsgJyknLFxuICAgIC8qIE5FVyBLRVkgQkVMT1cgLSBUUkFOU0xBVElPTiBSRVFVSVJFRCAqL1xuICAgIGhhbGZkYjogJygnICsgJ8K9fGhhbGYnICsgJyknLFxuICAgIHNlY3Rpb25Db21iYXRzOlxuICAgICAgJ1xcbig/OicgKyAnY29tYmF0fGZpZ2h0aW5nIGF0dGFja3N85oiw6ayl5oqA6IO9fOaIsOmspeWIl+ihqHzmrablmagnICsgJylbOlxcbl0nLFxuICAgIG5ld0NvbWJhdEhlYWRlcjogJ1xcbicgKyAnQ29tYmF0JyArICdcXG4nLFxuICAgIHNlY3Rpb25Ta2lsbHM6XG4gICAgICAnXFxuKD86JyArICcoPzpTa2lsbHN85oqA6IO95YiX6KGoKScgKyAnKD86XFxcXHMqXFxcXChbXlxcXFwpXStcXFxcKSk/KVs6XFxuXScsXG4gICAgc2VjdGlvbkxhbmdhdWdlczogJ1xcbig/OicgKyAnTGFuZ3VhZ2VzfOiqnuiogCcgKyAnKVs6XFxuXScsXG4gICAgc2VjdGlvblNwZWxsczogJ1xcbig/OicgKyAnc3BlbGxzfOWSkuaWh+WIl+ihqHzlkpLmlocnICsgJylbOlxcbl0nLFxuICAgIGhhbmRndW46XG4gICAgICAnKD88dHlwZT4nICtcbiAgICAgICcg6YGC55m85qeNfFxcXFwuMjLnn63lj6Poh6rli5XmiYvmp418XFxcXC4yNeefreWPo+aJi+anjSjllq7nrqEpfFxcXFwuMzLmiJY3XFxcXC42NW1t5bem6Lyq5omL5qeNfFxcXFwuMzLmiJY3XFxcXC42NW1t6Ieq5YuV5omL5qeNfFxcXFwuMzU3IE1hZ251beW3pui8quaJi+anjXxcXFxcLjM45oiWOW1t5bem6Lyq5omL5qeNfFxcXFwuMzjoh6rli5XmiYvmp4186LKd6Zu35aGUTTl85qC85rSb5YWLMTd8OW1t6Ieq5YuV5omL5qeNfOmtr+agvFAwOHxcXFxcLjQx5bem6Lyq5omL5qeNfFxcXFwuNDTppqzmoLzljZflt6bovKrmiYvmp418XFxcXC40NeW3pui8quaJi+anjXxcXFxcLjQ16Ieq5YuV5omL5qeNfOaymea8oOS5i+m3uXxHdW58UmV2b2x2ZXJ8UGlzdG9sfEhhbmRndW58RGVycmluZ2VyfEJlcmV0dGF8THVnZXJ8RGVzZXJ0IEVhZ2xlfCBcXFxcLjM4JyArXG4gICAgICAnKScsXG4gICAgcmlmbGU6XG4gICAgICAnKD88dHlwZT4nICtcbiAgICAgICfmraXmp4185Y2h6LOT5qeNfOWNiuiHquWLleatpeanjXznjbXosaHmp418UmlmbGV8U2hvdGd1bnxDYXJiaW5lfEdhdWdlIHxMZWUtRW5maWVsZHxFbGVwaGFudCcgK1xuICAgICAgJyknLFxuICAgIHNtYjogJyg/PHR5cGU+JyArICdTdWJtYWNoaW5lIEd1bnxUaG9tcHNvbnzooZ3pi5Lmp40nICsgJyknLFxuICAgIG1hY2hpbmVHdW46ICcoPzx0eXBlPicgKyAnQnJvd25pbmd8Vmlja2Vyc3zmqZ/mp40nICsgJyknLFxuICAgIGxhdW5jaGVkOiAnKD88dHlwZT4nICsgJ01vbG90b3Z8R3JlbmFkZXxEeW5hbWl0ZeeIhueCuOeJqXzmiYvmprTlvYh86YeN5q2m5ZmoJyArICcpJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ+ekuuevhOinkuiJsiwg5bm06b2hIDI3XFxu5Yqb6YePIDc1IOmrlOizqiA2MCDpq5TlnosgODAg5pWP5o23IDcwIOWkluiyjiA2MCDmmbrlipsgODBcXG7mhI/lv5cgNTAg5pWZ6IKyIDg1IFNBTiA1NSBIUCAxNCBEQjogMUQ0XFxu6auU5qC8OiAxIE1vdmU6IDcgTVA6IDEwIOW5uOmBizogNDAg6K2355SyOiAxXFxu5pS75pOK5qyh5pW4OiAzIOeQhuaZuuWWquWksTogMWQ0LzFkOFxcbuaIsOmspeWIl+ihqFxcbuWSrCA1MCUgKDI1LzEwKSwg5YK35a6zIDFENlxcbuepuuaJiyAzMCUgKDE1LzYpLCDlgrflrrMgMUQzXFxu5omL5qeNIDQwJSAoMjAvOCksIOWCt+WusyAxRDgrMVxcbumWg+mBvyA1MCUgKDI1LzEwKVxcbuaKgOiDveWIl+ihqFxcbuWLleeJqemmtOmkiiA1NSUsIOWPluaChSAzMCUsIOaApeaVkSAyNSUsIOa9m+ihjCAyMCUsXFxu6IGG6IG9IDUwJSwg6Jel5a24IDQ1JSwg57K+56We5YiG5p6QIDI1JSwg5b+D55CG5a24IDc1JSxcXG7np5HlrbggKOWPuOazleenkeWtuCkgOTAlLCDnp5HlrbggKOWvhueivOWtuCkgMzUlLCBcXG7lgbXmn6UgMzUlLCDllqzoo50gMTAlXFxu6Kqe6KiAOiDnsrXoqp4gODAlLCDoroDllIcgNSUuXFxu5ZKS5paHOiDlj6zllpogTlBDLCDmjIfmj64gTlBDLidcbiAgfVxufVxuXG5jb25zdCB0cmFuc2xhdGlvbnMgPSB7XG4gIGVuOiB7XG4gICAgYWdlOiAnKD88IVthLXpdKScgKyAnYWdlJyArICcoXFxcXHMqOik/XFxcXHMrKD88YWdlPlxcXFxkKylbLFxcXFxzXSonLFxuICAgIG9jY3VwYXRpb246XG4gICAgICAnWyxcXFxcc10qJyArICdPY2N1cGF0aW9uJyArICcoXFxcXHMqOik/XFxcXHMrKD88b2NjdXBhdGlvbj4uKylbLFxcXFxzXFxuXSonLFxuICAgIHN0cjogJyg/PCFbYS16XSknICsgJ1NUUicgKyAnKFxcXFxzKjopP1xcXFxzKig/PHN0cj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGNvbjogJyg/PCFbYS16XSknICsgJ0NPTicgKyAnKFxcXFxzKjopP1xcXFxzKig/PGNvbj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHNpejogJyg/PCFbYS16XSknICsgJ1NJWicgKyAnKFxcXFxzKjopP1xcXFxzKig/PHNpej5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGludDogJyg/PCFbYS16XSknICsgJ0lOVCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGludD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHBvdzogJyg/PCFbYS16XSknICsgJ1BPVycgKyAnKFxcXFxzKjopP1xcXFxzKig/PHBvdz5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGRleDogJyg/PCFbYS16XSknICsgJ0RFWCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGRleD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGFwcDogJyg/PCFbYS16XSknICsgJ0FQUCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGFwcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGVkdTogJyg/PCFbYS16XSknICsgJ0VEVScgKyAnKFxcXFxzKjopP1xcXFxzKig/PGVkdT5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHNhbjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArICdTQU58U2FuaXR5JyArICcpKFxcXFxzKjopP1xcXFxzKig/PHNhbj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGhwOlxuICAgICAgJyg/PCFbYS16XSkoPzonICsgJ0hQfEhpdCBwb2ludHMnICsgJykoXFxcXHMqOik/XFxcXHMqKD88aHA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBtcDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnTVB8TWFnaWMgcG9pbnRzJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxtcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGRiOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgIGtleXMuZW4uZnVsbGRiICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGRiPlsrLV0/XFxcXGQrKD86ZFxcXFxkK3xEXFxcXGQrKT98JyArXG4gICAgICBrZXlzLmVuLmRiTm9uZSArXG4gICAgICAnKVssXFxcXHNcXG5dKicsXG4gICAgYnVpbGQ6ICcoPzwhW2Etel0pJyArICdCdWlsZCcgKyAnKFxcXFxzKjopP1xcXFxzKyg/PGJ1aWxkPlsrLV0/XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgYXJtb3I6XG4gICAgICAnKD88IVthLXpdKScgK1xuICAgICAgJ0FybW9yJyArXG4gICAgICAnKFxcXFxzKjopP1xcXFxzKyg/PGFybW9yPicgK1xuICAgICAga2V5cy5lbi5hcm1vck5vbmUgK1xuICAgICAgJ3xcXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBtb3Y6ICcoPzwhW2Etel0pJyArICdNb3ZlJyArICcoXFxcXHMqOik/XFxcXHMqKD88bW92PlxcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIGxjazogJyg/PCFbYS16XSknICsgJ0x1Y2snICsgJyhcXFxccyo6KT9cXFxccysoPzxsY2s+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBhdHRhY2tzUGVyUm91bmQ6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ0F0dGFja3MgcGVyIHJvdW5kfCMgQXR0YWNrcycgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88YXR0YWNrc1BlclJvdW5kPicgK1xuICAgICAga2V5cy5lbi5hdHRhY2tzUGVyUm91bmROb25lICtcbiAgICAgICd8XFxcXGQrKD8hZCkpWyxcXFxcc1xcbl0qJyxcbiAgICBzYW5Mb3NzOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdTYW5pdHkgbG9zc3xTQU4gbG9zcycgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88c2FuTG9zcz4nICtcbiAgICAgIGtleXMuZW4uc2FuTG9zc05vbmUgK1xuICAgICAgJ3xcXFxcZEQ/WytcXFxcZF0qXFxcXC9cXFxcZEQ/WytcXFxcZF0qKVssXFxcXHNcXG5dKicsXG4gICAgd2VhcG9uOlxuICAgICAgJyhefFxcXFxuKSg/PG5hbWU+Wy5cXFxcdCAnICtcbiAgICAgIG5hbWVDaGFyYWN0ZXJzICtcbiAgICAgICddKykoXFxcXCoqLD9cXFxccyt8XFxcXCopKD86XFxcXCh8KD88cGVyY2VudGFnZT5cXFxcZCspJSw/KD86XFxcXHMqXFxcXChcXFxcZCtcXFxcL1xcXFxkK1xcXFwpXFxcXHMqLD8pPyk/KFxcXFxzKicgK1xuICAgICAgJ2RhbWFnZScgK1xuICAgICAgJyk/XFxcXHMrKD88ZGFtYWdlPig6Pyg6P1xcXFxkK2QpP1xcXFxkKyhcXFxccyovXFxcXHMqfFxcXFxzKlsrLV1cXFxccyooPzonICtcbiAgICAgIGtleXMuZW4uZnVsbGRiICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmVuLmhhbGZkYiArXG4gICAgICAnKVxcXFxzKnxcXFxccypbKy1dXFxcXHMqKDo/XFxcXGQrZCk/XFxcXGQrKSopKylcXFxcKT8nLFxuICAgIHdlYXBvbkRvZGdlOlxuICAgICAgJyg/PG5hbWU+JyArXG4gICAgICAnRG9kZ2UnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzK1xcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVxcXFwpP1xcXFxzKiUoPzpcXFxccypcXFxcKFxcXFxkK1xcXFwvXFxcXGQrXFxcXCkpPycsXG4gICAgLy8gU2tpbGwgc2hvdWxkIG5vdCBiZSBuYW1lZCBcIlRoZSBwbGF5ZXIgaGFzXCIgLyBcImJ1dCB0aGV5IHJlZ2VuZXJhdGVcIiByZXF1aXJlZCBmb3IgXCJBIENvbGQgRmlyZSBXaXRoaW5cIlxuICAgIHNraWxsOlxuICAgICAgJ14oPzxuYW1lPls6XFxcXCouXFxcXHMnICtcbiAgICAgIG5hbWVDaGFyYWN0ZXJzICtcbiAgICAgICddKyg/PCEnICtcbiAgICAgICdUaGUgcGxheWVyIGhhc3xidXQgdGhleSByZWdlbmVyYXRlJyArXG4gICAgICAnKSlcXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylbXmRdJT9cXFxcKT8oXFxcXHMqXFxcXChcXFxcZCsvXFxcXGQrXFxcXCkpP1tcXFxcLixdP1xcXFxzKicsXG4gICAgZ3Vlc3NTdGFydENvbWJhdDogJyhefCg/PCEsKVxcbikoJyArICdGaWdodGluZ3xGaXJlYXJtc3xCcmF3bHxCaXRlJyArICcpJyxcbiAgICBuYW1lOiAnXig/PG5hbWU+W1xcXFwuXFxcXHMnICsgbmFtZUNoYXJhY3RlcnMgKyAnXSspWyxcXFxcc1xcbl0rJyxcbiAgICBzZWN0aW9uczpcbiAgICAgICcoJyArXG4gICAgICBrZXlzLmVuLnNlY3Rpb25Db21iYXRzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmVuLnNlY3Rpb25Ta2lsbHMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuZW4uc2VjdGlvbkxhbmdhdWdlcyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5lbi5zZWN0aW9uU3BlbGxzICtcbiAgICAgICcpJ1xuICB9LFxuICBkZToge1xuICAgIGFnZTogJyg/PCFbYS16XSknICsgJ0FsdGVyJyArICcoXFxcXHMqOik/XFxcXHMrKD88YWdlPlxcXFxkKylbLFxcXFxzXSonLFxuICAgIG9jY3VwYXRpb246ICdbLFxcXFxzXSonICsgJ0JlcnVmJyArICcoXFxcXHMqOik/XFxcXHMrKD88b2NjdXBhdGlvbj4uKylbLFxcXFxzXFxuXSonLFxuICAgIHN0cjogJyg/PCFbYS16XSknICsgJ1NUJyArICcoXFxcXHMqOik/XFxcXHMqKD88c3RyPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgY29uOiAnKD88IVthLXpdKScgKyAnS08nICsgJyhcXFxccyo6KT9cXFxccyooPzxjb24+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBzaXo6ICcoPzwhW2Etel0pJyArICdHUicgKyAnKFxcXFxzKjopP1xcXFxzKig/PHNpej5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGludDogJyg/PCFbYS16XSknICsgJ0lOJyArICcoXFxcXHMqOik/XFxcXHMqKD88aW50PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgcG93OiAnKD88IVthLXpdKScgKyAnTUEnICsgJyhcXFxccyo6KT9cXFxccyooPzxwb3c+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkZXg6ICcoPzwhW2Etel0pJyArICdHRScgKyAnKFxcXFxzKjopP1xcXFxzKig/PGRleD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGFwcDogJyg/PCFbYS16XSknICsgJ0VSJyArICcoXFxcXHMqOik/XFxcXHMqKD88YXBwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZWR1OiAnKD88IVthLXpdKScgKyAnQkknICsgJyhcXFxccyo6KT9cXFxccyooPzxlZHU+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBzYW46XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ2dTfFNUQXxHZWlzdGlnZSBTdGFiaWxpdMOkdCcgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88c2FuPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgaHA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1RQfFRyZWZmZXJwdW5rdGUnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PGhwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgbXA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ01QfE1hZ2llcHVua3RlJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxtcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGRiOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgIGtleXMuZGUuZnVsbGRiICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGRiPlsrLV0/XFxcXGQrKD86ZFxcXFxkK3xEfFdcXFxcZCspP3wnICtcbiAgICAgIGtleXMuZGUuZGJOb25lICtcbiAgICAgICcpWyxcXFxcc1xcbl0qJyxcbiAgICBidWlsZDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnU3RhdHVyfFN0YXQuJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxidWlsZD5bKy1dP1xcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIGFybW9yOlxuICAgICAgJyg/PCFbYS16XSknICtcbiAgICAgICdQYW56ZXJ1bmcnICtcbiAgICAgICcoXFxcXHMqOik/XFxcXHMrKD88YXJtb3I+JyArXG4gICAgICBrZXlzLmRlLmFybW9yTm9uZSArXG4gICAgICAnfFxcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIG1vdjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnQld8QmV3ZWd1bmdzd2VpdGUnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PG1vdj5cXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBsY2s6ICcoPzwhW2Etel0pJyArICdHbMO8Y2snICsgJyhcXFxccyo6KT9cXFxccysoPzxsY2s+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBhdHRhY2tzUGVyUm91bmQ6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ0FuZ3JpZmZlIHBybyBSdW5kZXxBbmdyaWZmZXxQcm8gUnVuZGUnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGF0dGFja3NQZXJSb3VuZD4nICtcbiAgICAgIGtleXMuZGUuYXR0YWNrc1BlclJvdW5kTm9uZSArXG4gICAgICAnfFxcXFxkKyg/IWQpKVssXFxcXHNcXG5dKicsXG4gICAgc2FuTG9zczpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnU3RhYmlsaXTDpHRzdmVybHVzdCcgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88c2FuTG9zcz4nICtcbiAgICAgIGtleXMuZGUuc2FuTG9zc05vbmUgK1xuICAgICAgJ3xcXFxcZFtEV10/WytcXFxcZF0qXFxcXC9cXFxcZFtEV10/WytcXFxcZF0qKVssXFxcXHNcXG5dKicsXG4gICAgd2VhcG9uOlxuICAgICAgJyhefFxcXFxuKSg/PG5hbWU+Wy5cXFxcdCAnICtcbiAgICAgIG5hbWVDaGFyYWN0ZXJzICtcbiAgICAgICddKykoXFxcXCoqLD9cXFxccyt8XFxcXCopKD86XFxcXCh8KD88cGVyY2VudGFnZT5cXFxcZCspJSw/KD86XFxcXHMqXFxcXChcXFxcZCtcXFxcL1xcXFxkK1xcXFwpXFxcXHMqLD8pPyk/KFxcXFxzKicgK1xuICAgICAgJ1NjaGFkZW4nICtcbiAgICAgICcpP1xcXFxzKyg/PGRhbWFnZT4oOj8oOj9cXFxcZCt3fGQpP1xcXFxkKyhcXFxccyovXFxcXHMqfFxcXFxzKlsrLV1cXFxccyooPzonICtcbiAgICAgIGtleXMuZGUuZnVsbGRiICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmRlLmhhbGZkYiArXG4gICAgICAnKVxcXFxzKnxcXFxccypbKy1dXFxcXHMqKDo/XFxcXGQrZHx3KT9cXFxcZCspKikrKVxcXFwpPycsXG4gICAgd2VhcG9uRG9kZ2U6XG4gICAgICAnKD88bmFtZT4nICtcbiAgICAgICdBdXN3ZWljaGVuJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylcXFxcKT9cXFxccyolKD86XFxcXHMqXFxcXChcXFxcZCtcXFxcL1xcXFxkK1xcXFwpKT8nLFxuICAgIC8vIFNraWxsIHNob3VsZCBub3QgYmUgbmFtZWQgXCJUaGUgcGxheWVyIGhhc1wiIC8gXCJidXQgdGhleSByZWdlbmVyYXRlXCIgcmVxdWlyZWQgZm9yIFwiQSBDb2xkIEZpcmUgV2l0aGluXCJcbiAgICBza2lsbDpcbiAgICAgICdeKD88bmFtZT5bOlxcXFwqLlxcXFxzJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSsoPzwhJyArXG4gICAgICAnVGhlIHBsYXllciBoYXN8YnV0IHRoZXkgcmVnZW5lcmF0ZScgK1xuICAgICAgJykpXFxcXHMrXFxcXCg/KD88cGVyY2VudGFnZT5cXFxcZCspW15kXSU/XFxcXCk/KFxcXFxzKlxcXFwoXFxcXGQrL1xcXFxkK1xcXFwpKT9bXFxcXC4sO10/XFxcXHMqJyxcbiAgICBndWVzc1N0YXJ0Q29tYmF0OlxuICAgICAgJyhefCg/PCEsKVxcbikoJyArXG4gICAgICAnQW5ncmlmZmV8SGFuZGdlbWVuZ2V8TmFoa2FtcGZ8RmF1c3RmZXVlcndhZmZlfEJlacOfZW4nICtcbiAgICAgICcpJyxcbiAgICBuYW1lOiAnXig/PG5hbWU+W1xcXFwuXFxcXHMnICsgbmFtZUNoYXJhY3RlcnMgKyAnXSspWyxcXFxcc1xcbl0rJyxcbiAgICBzZWN0aW9uczpcbiAgICAgICcoJyArXG4gICAgICBrZXlzLmRlLnNlY3Rpb25Db21iYXRzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmRlLnNlY3Rpb25Ta2lsbHMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuZGUuc2VjdGlvbkxhbmdhdWdlcyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5kZS5zZWN0aW9uU3BlbGxzICtcbiAgICAgICcpJ1xuICB9LFxuICBwbDoge1xuICAgIGFnZTogJyg/PGFnZT5cXFxcZCspJyArICdcXFxccysoPzonICsgJ2xhdGF8bGF0fHJvaycgKyAnKVssXFxcXHNdKicsXG4gICAgb2NjdXBhdGlvbjogJ1ssXFxcXHNdKicgKyAnWmF3w7NkJyArICcoXFxcXHMqOik/XFxcXHMrKD88b2NjdXBhdGlvbj4uKylbLFxcXFxzXFxuXSonLFxuICAgIHN0cjogJyg/PCFbYS16XSknICsgJ1MnICsgJyhcXFxccyo6KT9cXFxccyooPzxzdHI+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBjb246ICcoPzwhW2Etel0pJyArICdLT04nICsgJyhcXFxccyo6KT9cXFxccyooPzxjb24+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBzaXo6ICcoPzwhW2Etel0pJyArICdCQycgKyAnKFxcXFxzKjopP1xcXFxzKig/PHNpej5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGludDogJyg/PCFbYS16XSknICsgJ0lOVCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGludD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHBvdzogJyg/PCFbYS16XSknICsgJ01PQycgKyAnKFxcXFxzKjopP1xcXFxzKig/PHBvdz5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGRleDogJyg/PCFbYS16XSknICsgJ1pSJyArICcoXFxcXHMqOik/XFxcXHMqKD88ZGV4PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXBwOiAnKD88IVthLXpdKScgKyAnV1lHJyArICcoXFxcXHMqOik/XFxcXHMqKD88YXBwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZWR1OiAnKD88IVthLXpdKScgKyAnV1lLJyArICcoXFxcXHMqOik/XFxcXHMqKD88ZWR1PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2FuOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdQfFBvY3p5dGFsbm/Fm8SHJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxzYW4+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBocDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnUFd8UHVua3R5IFd5dHJ6eW1hxYJvxZtjaScgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88aHA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBtcDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnUE18UHVua3R5IE1hZ2lpJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxtcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGRiOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgIGtleXMucGwuZnVsbGRiICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGRiPlsrLV0/XFxcXGQrKD86ZFxcXFxkK3xEfEtcXFxcZCspP3wnICtcbiAgICAgIGtleXMucGwuZGJOb25lICtcbiAgICAgICcpWyxcXFxcc1xcbl0qJyxcbiAgICBidWlsZDogJyg/PCFbYS16XSknICsgJ0tyemVwYScgKyAnKFxcXFxzKjopP1xcXFxzKyg/PGJ1aWxkPlsrLV0/XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgYXJtb3I6XG4gICAgICAnKD88IVthLXpdKScgK1xuICAgICAgJ1BhbmNlcnonICtcbiAgICAgICcoXFxcXHMqOik/XFxcXHMrKD88YXJtb3I+JyArXG4gICAgICBrZXlzLnBsLmFybW9yTm9uZSArXG4gICAgICAnfFxcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIG1vdjogJyg/PCFbYS16XSknICsgJ1J1Y2gnICsgJyhcXFxccyo6KT9cXFxccyooPzxtb3Y+XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgbGNrOiAnKD88IVthLXpdKScgKyAnU3pjesSZxZtjaWUnICsgJyhcXFxccyo6KT9cXFxccysoPzxsY2s+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBhdHRhY2tzUGVyUm91bmQ6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ0F0YWtpIHcgcnVuZHppZXwjIEF0YWtpJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxhdHRhY2tzUGVyUm91bmQ+JyArXG4gICAgICBrZXlzLnBsLmF0dGFja3NQZXJSb3VuZE5vbmUgK1xuICAgICAgJ3xcXFxcZCsoPyFkKSlbLFxcXFxzXFxuXSonLFxuICAgIHNhbkxvc3M6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1V0cmF0YSBQb2N6eXRhbG5vxZtjaXx1dHJhdGEgUCcgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88c2FuTG9zcz4nICtcbiAgICAgIGtleXMucGwuc2FuTG9zc05vbmUgK1xuICAgICAgJ3xcXFxcZFtES10/WytcXFxcZF0qXFxcXC9cXFxcZFtES10/WytcXFxcZF0qKVssXFxcXHNcXG5dKicsXG4gICAgd2VhcG9uOlxuICAgICAgJyhefFxcXFxuKSg/PG5hbWU+Wy5cXFxcdCAnICtcbiAgICAgIG5hbWVDaGFyYWN0ZXJzICtcbiAgICAgICddKykoXFxcXCoqLD9cXFxccyt8XFxcXCopKD86XFxcXCh8KD88cGVyY2VudGFnZT5cXFxcZCspJSw/KD86XFxcXHMqXFxcXChcXFxcZCtcXFxcL1xcXFxkK1xcXFwpXFxcXHMqLD8pPyk/KFxcXFxzKicgK1xuICAgICAgJ29icmHFvGVuaWEnICtcbiAgICAgICcpP1xcXFxzKyg/PGRhbWFnZT4oOj8oOj9cXFxcZCtrfGQpP1xcXFxkKyhcXFxccyovXFxcXHMqfFxcXFxzKlsrLV1cXFxccyooPzonICtcbiAgICAgIGtleXMucGwuZnVsbGRiICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLnBsLmhhbGZkYiArXG4gICAgICAnKVxcXFxzKnxcXFxccypbKy1dXFxcXHMqKDo/XFxcXGQrZCk/XFxcXGQrKSopKylcXFxcKT8nLFxuICAgIHdlYXBvbkRvZGdlOlxuICAgICAgJyg/PG5hbWU+JyArXG4gICAgICAnVW5paycgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrXFxcXCg/KD88cGVyY2VudGFnZT5cXFxcZCspXFxcXCk/XFxcXHMqJSg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKSk/JyxcbiAgICAvLyBTa2lsbCBzaG91bGQgbm90IGJlIG5hbWVkIFwiVGhlIHBsYXllciBoYXNcIiAvIFwiYnV0IHRoZXkgcmVnZW5lcmF0ZVwiIHJlcXVpcmVkIGZvciBcIkEgQ29sZCBGaXJlIFdpdGhpblwiXG4gICAgc2tpbGw6XG4gICAgICAnXig/PG5hbWU+WzpcXFxcKi5cXFxccycgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKD88IScgK1xuICAgICAgJ1RoZSBwbGF5ZXIgaGFzfGJ1dCB0aGV5IHJlZ2VuZXJhdGUnICtcbiAgICAgICcpKVxcXFxzK1xcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVteZF0lP1xcXFwpPyhcXFxccypcXFxcKFxcXFxkKy9cXFxcZCtcXFxcKSk/W1xcXFwuLF0/XFxcXHMqJyxcbiAgICBndWVzc1N0YXJ0Q29tYmF0OlxuICAgICAgJyhefCg/PCEsKVxcbikoJyArICdXYWxrYXxCcm/FhCBQYWxuYXxCaWphdHlrYXxVZ3J5emllbmllJyArICcpJyxcbiAgICBuYW1lOiAnXig/PG5hbWU+W1xcXFwuXFxcXHMnICsgbmFtZUNoYXJhY3RlcnMgKyAnXSspWyxcXFxcc1xcbl0rJyxcbiAgICBzZWN0aW9uczpcbiAgICAgICcoJyArXG4gICAgICBrZXlzLnBsLnNlY3Rpb25Db21iYXRzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLnBsLnNlY3Rpb25Ta2lsbHMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMucGwuc2VjdGlvbkxhbmdhdWdlcyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5wbC5zZWN0aW9uU3BlbGxzICtcbiAgICAgICcpJ1xuICB9LFxuICBmcjoge1xuICAgIGFnZTogJyg/PGFnZT5cXFxcZCspXFxcXHMqJyArICdhbnMnICsgJyg/IVthLXpdKVssXFxcXHNdKicsXG4gICAgb2NjdXBhdGlvbjpcbiAgICAgICdbLFxcXFxzXSonICsgJ09jY3VwYXRpb24nICsgJyhcXFxccyo6KT9cXFxccysoPzxvY2N1cGF0aW9uPi4rKVssXFxcXHNcXG5dKicsXG4gICAgc3RyOiAnKD88IVthLXpdKScgKyAnRk9SJyArICcoXFxcXHMqOik/XFxcXHMqKD88c3RyPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgY29uOiAnKD88IVthLXpdKScgKyAnQ09OJyArICcoXFxcXHMqOik/XFxcXHMqKD88Y29uPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2l6OiAnKD88IVthLXpdKScgKyAnVEFJJyArICcoXFxcXHMqOik/XFxcXHMqKD88c2l6PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgaW50OiAnKD88IVthLXpdKScgKyAnSU5UJyArICcoXFxcXHMqOik/XFxcXHMqKD88aW50PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgcG93OiAnKD88IVthLXpdKScgKyAnUE9VJyArICcoXFxcXHMqOik/XFxcXHMqKD88cG93PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZGV4OiAnKD88IVthLXpdKScgKyAnREVYJyArICcoXFxcXHMqOik/XFxcXHMqKD88ZGV4PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXBwOiAnKD88IVthLXpdKScgKyAnQVBQJyArICcoXFxcXHMqOik/XFxcXHMqKD88YXBwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZWR1OiAnKD88IVthLXpdKScgKyAnw4lEVScgKyAnKFxcXFxzKjopP1xcXFxzKig/PGVkdT5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHNhbjpcbiAgICAgICcoPzwhKFthLXpdfGRlXFxcXHMpKSg/OicgK1xuICAgICAgJ1NBTnxTYW50w6kgTWVudGFsZScgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88c2FuPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgaHA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1BWfFBvaW50cyBkZSB2aWUnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PGhwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgbXA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1BNfFBvaW50cyBkZSBtYWdpZScgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88bXA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkYjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICBrZXlzLmZyLmZ1bGxkYiArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxkYj5bKy1dP1xcXFxkKyg/OmRcXFxcZCt8RFxcXFxkKyk/fCcgK1xuICAgICAga2V5cy5mci5kYk5vbmUgK1xuICAgICAgJylbLFxcXFxzXFxuXSonLFxuICAgIGJ1aWxkOlxuICAgICAgJyg/PCFbYS16XSknICsgJ0NhcnJ1cmUnICsgJyhcXFxccyo6KT9cXFxccysoPzxidWlsZD5bKy1dP1xcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIGFybW9yOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdBcm11cmV8UHJvdGVjdGlvbicgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88YXJtb3I+JyArXG4gICAgICBrZXlzLmZyLmFybW9yTm9uZSArXG4gICAgICAnfFxcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIG1vdjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnTXZ0fE1vdXZlbWVudHxEw6lwbGFjZW1lbnQnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PG1vdj5cXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBsY2s6ICcoPzwhW2Etel0pJyArICdDaGFuY2UnICsgJyhcXFxccyo6KT9cXFxccysoPzxsY2s+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBhdHRhY2tzUGVyUm91bmQ6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ0F0dGFxdWVzIHBhciByb3VuZCcgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88YXR0YWNrc1BlclJvdW5kPicgK1xuICAgICAga2V5cy5mci5hdHRhY2tzUGVyUm91bmROb25lICtcbiAgICAgICd8XFxcXGQrKD8hZCkpWyxcXFxcc1xcbl0qJyxcbiAgICBzYW5Mb3NzOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdQZXJ0ZSBkZSBTYW50w6kgbWVudGFsZXxQZXJ0ZSBkZSBTQU4nICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PHNhbkxvc3M+JyArXG4gICAgICBrZXlzLmZyLnNhbkxvc3NOb25lICtcbiAgICAgICd8XFxcXGREP1srXFxcXGRdKlxcXFwvXFxcXGREP1srXFxcXGRdKilbLFxcXFxzXFxuXSonLFxuICAgIHdlYXBvbjpcbiAgICAgICcoXnxcXFxcbikoPzxuYW1lPlsuXFxcXHQgJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSspKFxcXFwqKiw/XFxcXHMrfFxcXFwqKSg/OlxcXFwofCg/PHBlcmNlbnRhZ2U+XFxcXGQrKSUsPyg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKVxcXFxzKiw/KT8pPyhcXFxccyooPzonICtcbiAgICAgICdkb21tYWdlfGTDqWfDonRzJyArXG4gICAgICAnKSk/XFxcXHMrKD88ZGFtYWdlPig6Pyg6P1xcXFxkK2QpP1xcXFxkKyhcXFxccyovXFxcXHMqfFxcXFxzKlsrLV1cXFxccyooPzonICtcbiAgICAgIGtleXMuZnIuZnVsbGRiICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmZyLmhhbGZkYiArXG4gICAgICAnKVxcXFxzKnxcXFxccypbKy1dXFxcXHMqKDo/XFxcXGQrZCk/XFxcXGQrKSopKylcXFxcKT8nLFxuICAgIHdlYXBvbkRvZGdlOlxuICAgICAgJyg/PG5hbWU+JyArXG4gICAgICAnRXNxdWl2ZXI/JyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylcXFxcKT9cXFxccyolKD86XFxcXHMqXFxcXChcXFxcZCtcXFxcL1xcXFxkK1xcXFwpKT8nLFxuICAgIHNraWxsOlxuICAgICAgJ14oPzxuYW1lPls6XFxcXCouXFxcXHMnICtcbiAgICAgIG5hbWVDaGFyYWN0ZXJzICtcbiAgICAgICddKyg/PCEnICtcbiAgICAgICdUaGUgcGxheWVyIGhhc3xidXQgdGhleSByZWdlbmVyYXRlJyArXG4gICAgICAnKSlcXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylbXmRdJT9cXFxcKT8oXFxcXHMqXFxcXChcXFxcZCsvXFxcXGQrXFxcXCkpP1tcXFxcLixdP1xcXFxzKicsXG4gICAgZ3Vlc3NTdGFydENvbWJhdDpcbiAgICAgICcoXnwoPzwhLClcXG4pKCcgKyAnQXUgY29udGFjdHzDgCBkaXN0YW5jZXxDb21iYXQgcmFwcHJvY2jDqXxCaXRlJyArICcpJyxcbiAgICBuYW1lOiAnXig/PG5hbWU+W1xcXFwuXFxcXHMnICsgbmFtZUNoYXJhY3RlcnMgKyAnXSspWyxcXFxcc1xcbl0rJyxcbiAgICBzZWN0aW9uczpcbiAgICAgICcoJyArXG4gICAgICBrZXlzLmZyLnNlY3Rpb25Db21iYXRzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmZyLnNlY3Rpb25Ta2lsbHMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuZnIuc2VjdGlvbkxhbmdhdWdlcyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5mci5zZWN0aW9uU3BlbGxzICtcbiAgICAgICcpJ1xuICB9LFxuICBlczoge1xuICAgIGFnZTogJyg/PGFnZT5cXFxcZCspXFxcXHMqJyArICdhW8Oxw5Fdb3MnICsgJyg/IVthLXpdKVssXFxcXHNdKicsXG4gICAgb2NjdXBhdGlvbjpcbiAgICAgICdbLFxcXFxzXSonICsgJ09jdXBhY2nDs24nICsgJyhcXFxccyo6KT9cXFxccysoPzxvY2N1cGF0aW9uPi4rKVssXFxcXHNcXG5dKicsXG4gICAgc3RyOiAnKD88IVthLXpdKScgKyAnRlVFJyArICcoXFxcXHMqOik/XFxcXHMqKD88c3RyPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgY29uOiAnKD88IVthLXpdKScgKyAnQ09OJyArICcoXFxcXHMqOik/XFxcXHMqKD88Y29uPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2l6OiAnKD88IVthLXpdKScgKyAnVEFNJyArICcoXFxcXHMqOik/XFxcXHMqKD88c2l6PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgaW50OiAnKD88IVthLXpdKScgKyAnSU5UJyArICcoXFxcXHMqOik/XFxcXHMqKD88aW50PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgcG93OiAnKD88IVthLXpdKScgKyAnUE9EJyArICcoXFxcXHMqOik/XFxcXHMqKD88cG93PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZGV4OiAnKD88IVthLXpdKScgKyAnREVTJyArICcoXFxcXHMqOik/XFxcXHMqKD88ZGV4PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXBwOiAnKD88IVthLXpdKScgKyAnQVBBJyArICcoXFxcXHMqOik/XFxcXHMqKD88YXBwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZWR1OiAnKD88IVthLXpdKScgKyAnRURVJyArICcoXFxcXHMqOik/XFxcXHMqKD88ZWR1PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2FuOlxuICAgICAgJyg/PCFbYS16XSkoPzonICsgJ0NPUnxDb3JkdXJhJyArICcpKFxcXFxzKjopP1xcXFxzKig/PHNhbj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGhwOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdQVnxQdW50b3MgZGUgdmlkYXxQXFxcXC4gP1ZcXFxcLicgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88aHA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBtcDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnUE18UHVudG9zIE3DoWdpY29zfFB1bnRvcyBkZSBNYWdpYScgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88bXA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkYjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICBrZXlzLmVzLmZ1bGxkYiArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxkYj5bKy1dP1xcXFxkKyg/OmRcXFxcZCt8RFxcXFxkKyk/fCcgK1xuICAgICAga2V5cy5lcy5kYk5vbmUgK1xuICAgICAgJylbLFxcXFxzXFxuXSonLFxuICAgIGJ1aWxkOlxuICAgICAgJyg/PCFbYS16XSknICsgJ0NvcnB1bGVuY2lhJyArICcoXFxcXHMqOik/XFxcXHMrKD88YnVpbGQ+WystXT9cXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBhcm1vcjpcbiAgICAgICcoPzwhW2Etel0pJyArXG4gICAgICAnQXJtYWR1cmEnICtcbiAgICAgICcoXFxcXHMqOik/XFxcXHMrKD88YXJtb3I+JyArXG4gICAgICBrZXlzLmVzLmFybW9yTm9uZSArXG4gICAgICAnfFxcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIG1vdjogJyg/PCFbYS16XSknICsgJ01vdmltaWVudG8nICsgJyhcXFxccyo6KT9cXFxccyooPzxtb3Y+XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgbGNrOiAnKD88IVthLXpdKScgKyAnU3VlcnRlJyArICcoXFxcXHMqOik/XFxcXHMrKD88bGNrPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXR0YWNrc1BlclJvdW5kOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdOw7ptZXJvIGRlIEF0YXF1ZXMnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGF0dGFja3NQZXJSb3VuZD4nICtcbiAgICAgIGtleXMuZXMuYXR0YWNrc1BlclJvdW5kTm9uZSArXG4gICAgICAnfFxcXFxkKyg/IWQpKVssXFxcXHNcXG5dKicsXG4gICAgc2FuTG9zczpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnUMOpcmRpZGEgZGUgY29yZHVyYXxQw6lyZGlkYSBkZSBDT1InICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PHNhbkxvc3M+JyArXG4gICAgICBrZXlzLmVzLnNhbkxvc3NOb25lICtcbiAgICAgICd8XFxcXGREP1srXFxcXGRdKlxcXFwvXFxcXGREP1srXFxcXGRdKilbLFxcXFxzXFxuXSonLFxuICAgIHdlYXBvbjpcbiAgICAgICcoXnxcXFxcbikoPzxuYW1lPlsuXFxcXHQgJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSspKFxcXFwqKiw/XFxcXHMrfFxcXFwqKSg/OlxcXFwofCg/PHBlcmNlbnRhZ2U+XFxcXGQrKSUsPyg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKVxcXFxzKiw/KT8pPyhcXFxccyonICtcbiAgICAgICdkYcOxbycgK1xuICAgICAgJyk/XFxcXHMrKD88ZGFtYWdlPig6Pyg6P1xcXFxkK2QpP1xcXFxkKyhcXFxccyovXFxcXHMqfFxcXFxzKlsrLV1cXFxccyooPzonICtcbiAgICAgIGtleXMuZXMuZnVsbGRiICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmVzLmhhbGZkYiArXG4gICAgICAnKVxcXFxzKnxcXFxccypbKy1dXFxcXHMqKDo/XFxcXGQrZCk/XFxcXGQrKSopKylcXFxcKT8nLFxuICAgIHdlYXBvbkRvZGdlOlxuICAgICAgJyg/PG5hbWU+JyArXG4gICAgICAnRXNxdWl2YXInICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzK1xcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVxcXFwpP1xcXFxzKiUoPzpcXFxccypcXFxcKFxcXFxkK1xcXFwvXFxcXGQrXFxcXCkpPycsXG4gICAgc2tpbGw6XG4gICAgICAnXig/PG5hbWU+WzpcXFxcKi5cXFxccycgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKD88IScgK1xuICAgICAgJ1RoZSBwbGF5ZXIgaGFzfGJ1dCB0aGV5IHJlZ2VuZXJhdGUnICtcbiAgICAgICcpKVxcXFxzK1xcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVteZF0lP1xcXFwpPyhcXFxccypcXFxcKFxcXFxkKy9cXFxcZCtcXFxcKSk/W1xcXFwuLF0/XFxcXHMqJyxcbiAgICBndWVzc1N0YXJ0Q29tYmF0OlxuICAgICAgJyhefCg/PCEsKVxcbikoJyArICdDb21iYXRpcnxBcm1hcyBkZSBmdWVnb3xQZWxlYXxNb3JkaXNjbycgKyAnKScsXG4gICAgbmFtZTogJ14oPzxuYW1lPltcXFxcLlxcXFxzJyArIG5hbWVDaGFyYWN0ZXJzICsgJ10rKVssXFxcXHNcXG5dKycsXG4gICAgc2VjdGlvbnM6XG4gICAgICAnKCcgK1xuICAgICAga2V5cy5lcy5zZWN0aW9uQ29tYmF0cyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5lcy5zZWN0aW9uU2tpbGxzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmVzLnNlY3Rpb25MYW5nYXVnZXMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuZXMuc2VjdGlvblNwZWxscyArXG4gICAgICAnKSdcbiAgfSxcbiAgJ3poLVRXJzoge1xuICAgIGFnZTogJyg/PCFbYS16XSknICsgJ2FnZXzlubTpvaEnICsgJyhcXFxccyo6KT9cXFxccyooPzxhZ2U+XFxcXGQrKVssXFxcXHNdKicsXG4gICAgLyogTkVXIEtFWSBCRUxPVyAtIFRSQU5TTEFUSU9OIFJFUVVJUkVEICovXG4gICAgb2NjdXBhdGlvbjpcbiAgICAgICdbLFxcXFxzXSonICsgJ09jY3VwYXRpb24nICsgJyhcXFxccyo6KT9cXFxccysoPzxvY2N1cGF0aW9uPi4rKVssXFxcXHNcXG5dKicsXG4gICAgc3RyOiAnKD88IVthLXpdKScgKyAnU1RSfOWKm+mHjycgKyAnKFxcXFxzKjopP1xcXFxzKig/PHN0cj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGNvbjogJyg/PCFbYS16XSknICsgJ0NPTnzpq5Tos6onICsgJyhcXFxccyo6KT9cXFxccyooPzxjb24+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBzaXo6ICcoPzwhW2Etel0pJyArICdTSVp86auU5Z6LJyArICcoXFxcXHMqOik/XFxcXHMqKD88c2l6PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgaW50OiAnKD88IVthLXpdKScgKyAnSU5UfOaZuuWKmycgKyAnKFxcXFxzKjopP1xcXFxzKig/PGludD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHBvdzogJyg/PCFbYS16XSknICsgJ1BPV3zmhI/lv5cnICsgJyhcXFxccyo6KT9cXFxccyooPzxwb3c+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkZXg6ICcoPzwhW2Etel0pJyArICdERVh85pWP5o23JyArICcoXFxcXHMqOik/XFxcXHMqKD88ZGV4PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXBwOiAnKD88IVthLXpdKScgKyAnQVBQfOWkluiyjicgKyAnKFxcXFxzKjopP1xcXFxzKig/PGFwcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGVkdTogJyg/PCFbYS16XSknICsgJ0VEVXzmlZnogrInICsgJyhcXFxccyo6KT9cXFxccyooPzxlZHU+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBzYW46XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1NBTnxTYW5pdHl855CG5pm6JyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxzYW4+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBocDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnSFB8SGl0IHBvaW50c3znlJ/lkb0nICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PGhwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgbXA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ01QfE1hZ2ljIHBvaW50cycgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88bXA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkYjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICBrZXlzWyd6aC1UVyddLmZ1bGxkYiArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxkYj5bKy1dP1xcXFxkKyg/OmRcXFxcZCt8RFxcXFxkKyk/fCcgK1xuICAgICAga2V5c1snemgtVFcnXS5kYk5vbmUgK1xuICAgICAgJylbLFxcXFxzXFxuXSonLFxuICAgIGJ1aWxkOlxuICAgICAgJyg/PCFbYS16XSknICsgJ0J1aWxkfOmrlOagvCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGJ1aWxkPlsrLV0/XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgYXJtb3I6XG4gICAgICAnKD88IVthLXpdKScgK1xuICAgICAgJ0FybW9yfOitt+eUsicgK1xuICAgICAgJyhcXFxccyo6KT9cXFxccyooPzxhcm1vcj4nICtcbiAgICAgIGtleXNbJ3poLVRXJ10uYXJtb3JOb25lICtcbiAgICAgICd8XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgbW92OiAnKD88IVthLXpdKScgKyAnTW92ZScgKyAnKFxcXFxzKjopP1xcXFxzKig/PG1vdj5cXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBsY2s6ICcoPzwhW2Etel0pJyArICdMdWNrfOW5uOmBiycgKyAnKFxcXFxzKjopP1xcXFxzKig/PGxjaz5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGF0dGFja3NQZXJSb3VuZDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnQXR0YWNrcyBwZXIgcm91bmR8IyBBdHRhY2tzfOaUu+aTiuasoeaVuHwjIOaUu+aTiicgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88YXR0YWNrc1BlclJvdW5kPicgK1xuICAgICAga2V5c1snemgtVFcnXS5hdHRhY2tzUGVyUm91bmROb25lICtcbiAgICAgICd8XFxcXGQrKD8hZCkpWyxcXFxcc1xcbl0qJyxcbiAgICBzYW5Mb3NzOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdTYW5pdHkgbG9zc3xTQU4gbG9zc3znkIbmmbrllqrlpLF8U0FO5YC85pCN5aSxfFNBTuWAvOWWquWksXzmiaNTQU4nICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PHNhbkxvc3M+JyArXG4gICAgICBrZXlzWyd6aC1UVyddLnNhbkxvc3NOb25lICtcbiAgICAgICd8XFxcXGREP1srXFxcXGRdKlxcXFwvXFxcXGREP1srXFxcXGRdKilbLFxcXFxzXFxuXSonLFxuICAgIHdlYXBvbjpcbiAgICAgICcoXnxcXFxcbikoPzxuYW1lPlsuXFxcXHQgJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSspKFxcXFwqKiw/XFxcXHMrfFxcXFwqKSg/OlxcXFwofCg/PHBlcmNlbnRhZ2U+XFxcXGQrKSUsPyg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKVxcXFxzKiw/KT8pPyhcXFxccyooPzonICtcbiAgICAgICdkYW1hZ2V85YK35a6zJyArXG4gICAgICAnKSk/XFxcXHMrKD88ZGFtYWdlPig6Pyg6P1xcXFxkK2QpP1xcXFxkKyhcXFxccyovXFxcXHMqfFxcXFxzKlsrLV1cXFxccyooPzonICtcbiAgICAgIGtleXNbJ3poLVRXJ10uZnVsbGRiICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzWyd6aC1UVyddLmhhbGZkYiArXG4gICAgICAnKVxcXFxzKnxcXFxccypbKy1dXFxcXHMqKDo/XFxcXGQrZCk/XFxcXGQrKSopKylcXFxcKT8nLFxuICAgIHdlYXBvbkRvZGdlOlxuICAgICAgJyg/PG5hbWU+JyArXG4gICAgICAnRG9kZ2V86ZaD6YG/fOmWg+i6sicgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrXFxcXCg/KD88cGVyY2VudGFnZT5cXFxcZCspXFxcXCk/XFxcXHMqJT8oPzpcXFxccypcXFxcKFxcXFxkK1xcXFwvXFxcXGQrXFxcXCkpPycsXG4gICAgc2tpbGw6XG4gICAgICAnXig/PG5hbWU+WzpcXFxcKi5cXFxccycgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKD88IScgK1xuICAgICAgJ1RoZSBwbGF5ZXIgaGFzfGJ1dCB0aGV5IHJlZ2VuZXJhdGUnICtcbiAgICAgICcpKVxcXFxzK1xcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVteZF0lP1xcXFwpPyhcXFxccypcXFxcKFxcXFxkKy9cXFxcZCtcXFxcKSk/W1xcXFwuLF0/XFxcXHMqJyxcbiAgICBndWVzc1N0YXJ0Q29tYmF0OiAnKF58KD88ISwpXFxuKSgnICsgJ+i/keaIsOaKgOiDvXzlsITmk4rmioDog718QnJhd2x8Qml0ZScgKyAnKScsXG4gICAgbmFtZTogJ14oPzxuYW1lPltcXFxcLlxcXFxzJyArIG5hbWVDaGFyYWN0ZXJzICsgJ10rKVssXFxcXHNcXG5dKycsXG4gICAgc2VjdGlvbnM6XG4gICAgICAnKCcgK1xuICAgICAga2V5c1snemgtVFcnXS5zZWN0aW9uQ29tYmF0cyArXG4gICAgICAnfCcgK1xuICAgICAga2V5c1snemgtVFcnXS5zZWN0aW9uU2tpbGxzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzWyd6aC1UVyddLnNlY3Rpb25MYW5nYXVnZXMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXNbJ3poLVRXJ10uc2VjdGlvblNwZWxscyArXG4gICAgICAnKSdcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAge1xuICBzdGF0aWMgY2hlY2tMYW5ndWFnZSAobGFuZyA9IG51bGwpIHtcbiAgICBpZiAoIWxhbmcpIHtcbiAgICAgIGxhbmcgPSBnYW1lLmkxOG4ubGFuZ1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRyYW5zbGF0aW9uc1tsYW5nXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxhbmcgPSAnZW4nXG4gICAgfVxuICAgIHJldHVybiBsYW5nXG4gIH1cblxuICBzdGF0aWMgZ2V0RXhhbXBsZVRleHQgKGxhbmcpIHtcbiAgICBsZXQgZXhhbXBsZSA9IGtleXMuZW4uZXhhbXBsZVxuICAgIGlmICh0eXBlb2Yga2V5c1tsYW5nXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGV4YW1wbGUgPSBrZXlzW2xhbmddLmV4YW1wbGVcbiAgICB9XG4gICAgcmV0dXJuIGV4YW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXRUcmFuc2xhdGlvbnMgKCkge1xuICAgIGNvbnN0IG91dHB1dCA9IHt9XG4gICAgZm9yIChjb25zdCBrZXkgaW4ga2V5cykge1xuICAgICAgb3V0cHV0W2tleV0gPSBrZXlzW2tleV0uZGVzY3JpcHRpb25cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG5cbiAgc3RhdGljIGdldEtleXMgKGxhbmcpIHtcbiAgICByZXR1cm4ga2V5c1tsYW5nXSB8fCBrZXlzLmVuXG4gIH1cblxuICBzdGF0aWMgZ2V0UmVndWxhckV4cHJlc3Npb25zIChsYW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0aW9uc1tsYW5nXSB8fCB0cmFuc2xhdGlvbnMuZW5cbiAgfVxufVxuIiwiLyogZ2xvYmFsIEFjdG9yLCBDT05GSUcsIGZvdW5kcnksIGdhbWUsIHVpICovXG5pbXBvcnQgeyBDb0M3QWN0b3JJbXBvcnRlclJlZ0V4cCB9IGZyb20gJy4vYWN0b3ItaW1wb3J0ZXItcmVnZXhwLmpzJ1xuaW1wb3J0IHsgQ29DQWN0b3IgfSBmcm9tICcuLi9hY3RvcnMvYWN0b3IuanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uL2l0ZW1zL2l0ZW0uanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuXG4vKipcbiAqIENvQzdBY3RvckltcG9ydGVyIGhlbHBlciBjbGFzcyB0byBpbXBvcnQgYW4gQWN0b3IgZnJvbSB0aGUgcmF3IHRleHQgZGVzY3JpcHRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3QWN0b3JJbXBvcnRlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnBhcnNlZCA9IHt9XG4gICAgdGhpcy5pdGVtTG9jYXRpb25zID0gJydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgYXNOdW1iZXIgKCkge1xuICAgIHJldHVybiAnbidcbiAgfVxuXG4gIHN0YXRpYyBnZXQgYXNTdHJpbmcgKCkge1xuICAgIHJldHVybiAncydcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXRSZWdFeCwgZ2V0IFJlZ0V4cCBvYmplY3QgaWYgbm90IGN1cnJlbnRseSBhIFJlZ0V4cCBvYmplY3RcbiAgICogQHBhcmFtIHtNaXhlZH0gcmVnZXggUmVnRXhwIG9yIHN0cmluZ1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbW9kaWZpZXJzIGlmIHN0cmluZyB3YXMgc3VwcGxpZWQgaW4gcmVnZXggbGlzdCBvZiBtb2RpZmllcnMgdG8gYWRkIHRvIHRoZSBSZWdFeHBcbiAgICogQHJldHVybnMge1JlZ0V4cH1cbiAgICovXG4gIGdldFJlZ0V4IChyZWdleCwgbW9kaWZpZXJzID0gJ2l1Jykge1xuICAgIGlmIChyZWdleC5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gJ1JlZ0V4cCcpIHtcbiAgICAgIHJldHVybiByZWdleFxuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleCwgbW9kaWZpZXJzKVxuICB9XG5cbiAgLyoqXG4gICAqIGNsZWFuU3RyaW5nLCByZW1vdmVzIG5ldyBsaW5lIGFuZCBjYXJyaWVyIHJldHVybiBjaGFyYWN0ZXIgYW5kIGxhdGVyYWwgc3BhY2VzIGZyb20gYSBzdHJpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IHMgdGhlIHN0cmluZyB0byBjbGVhblxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgY2xlYW5lZCBzdHJpbmdcbiAgICovXG4gIGNsZWFuU3RyaW5nIChzKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgIC5yZXBsYWNlKC8oXFxufFxccikvZywgJyAnKVxuICAgICAgLnJlcGxhY2UoL15cXHMqLywgJycpXG4gICAgICAucmVwbGFjZSgvXFxzKlxcLj9cXHMqXFwuPyQvLCAnJylcbiAgfVxuXG4gIC8qKlxuICAgKiB0cmFuc2xhdGVSb2xsLCB0cmFuc2xhdGVzIGxhbmd1YWdlIHNwZWNpZmljIHNob3J0Zm9ybSBvZiBkaWNlIChEKSBpbiByb2xsc1xuICAgKiBFeGFtcGxlIGZvciBHZXJtYW4gcm9sbHM6IDFXNCA9PiAxRDQuXG4gICAqIERpY2Ugc2hvcnRmb3JtIGlzIGNvbmZpZ3VyZWQgdXNpbmcga2V5cy5kaWNlU2hvcnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHMgdGhlIHJvbGwgdG8gYmUgdHJhbnNsYXRlZFxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgdHJhbnNsYXRlZCByb2xsXG4gICAqL1xuICB0cmFuc2xhdGVSb2xsIChzKSB7XG4gICAgaWYgKHR5cGVvZiBzID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHNcbiAgICBpZiAodHlwZW9mIHRoaXMua2V5cy5kaWNlU2hvcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCByZWdFeCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICcoPzxuMT5cXFxcZCspJyArIHRoaXMua2V5cy5kaWNlU2hvcnQgKyAnKD88bjI+XFxcXGQrKScsXG4gICAgICAgICdpdWcnXG4gICAgICApXG4gICAgICByZXR1cm4gcy5yZXBsYWNlKHJlZ0V4LCAnJDxuMT5EJDxuMj4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiB0b0hUTUwsIGNvbnZlcnRzIGEgc3RyaW5nIHRvIEhUTUwgc3RyaXBpbmcgb3V0IGVtcHR5IGxpbmVzIG9yIGxpbmVzIHRoYXQgY29udGFpbiBqdXN0ICwgb3IgLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcyB0aGUgc3RyaW5nIHRvIGNvbnZlcnRcbiAgICogQHJldHVybnMge1N0cmluZ30gdGhlIEhUTUwgb3IgYW4gZW1wdHkgc3RyaW5nXG4gICAqL1xuICB0b0hUTUwgKHMpIHtcbiAgICBpZiAocy50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG4gICAgcyA9IHNcbiAgICAgIC50cmltKClcbiAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgIC5tYXAodGV4dCA9PiB0ZXh0LnRyaW0oKS5yZXBsYWNlKC9eWywuXFxzXSskLywgJycpKVxuICAgICAgLmZpbHRlcih0ZXh0ID0+IHRleHQpXG4gICAgICAuam9pbignPC9wPjxwPicpXG4gICAgaWYgKHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG4gICAgcmV0dXJuICc8cD4nICsgcyArICc8L3A+J1xuICB9XG5cbiAgLyoqXG4gICAqIGNoZWNrIGV4cGVjdHMgYSBrZXkgZnJvbSB0aGlzLnJlZ0V4IHdpbGwgYXR0ZW1wdCB0byBtYXRjaCB0aGUgdGV4dFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcmVnRXhLZXkga2V5IGluIHRoaXMucmVnRXhcbiAgICogQHBhcmFtIHtKU09OfVxuICAgKiAtIHJlbW92ZUZyb21UZXh0IHJlbW92ZSBmcm9tIHRoaXMudGV4dFxuICAgKiAtIHNhdmVLZXlzIGFkZCBncm91cCBrZXlzIHRvIHRoaXMucGFyc2VkXG4gICAqIC0gdHlwZSBJZiBhZGRpbmcgd2l0aCBzYXZlS2V5cyBzZXQgdHlwZSAoQ29DN0FjdG9ySW1wb3J0ZXIuYXNTdHJpbmcgLyBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlcilcbiAgICogLSB0ZXh0IElmIHNldCB1c2UgdGhpcyBpbnN0ZWFkIG9mIHRoaXMudGV4dFxuICAgKiAtIHJlcXVpcmVkR3JvdXAgSWYgbm90IGZhbHNlIHJlcXVpcmUgc3BlY2lmaWVkIGtleSBpbiBSZWdFeHAgZ3JvdXBzXG4gICAqIEByZXR1cm5zIHtGYWxzZX0ve0pTT04gZ3JvdXBzICcnIGlzIG1hdGNoZWQgc3RyaW5nfVxuICAgKi9cbiAgY2hlY2sgKFxuICAgIHJlZ0V4S2V5LFxuICAgIHtcbiAgICAgIHJlbW92ZUZyb21UZXh0ID0gdHJ1ZSxcbiAgICAgIHNhdmVLZXlzID0gdHJ1ZSxcbiAgICAgIHR5cGUgPSBDb0M3QWN0b3JJbXBvcnRlci5hc1N0cmluZyxcbiAgICAgIHRleHQgPSBmYWxzZSxcbiAgICAgIHJlcXVpcmVkR3JvdXAgPSBmYWxzZVxuICAgIH0gPSB7fVxuICApIHtcbiAgICBsZXQgb3V0cHV0ID0gZmFsc2VcbiAgICBsZXQgcmVnRXhwID0gZmFsc2VcbiAgICBpZiAodHlwZW9mIHRoaXMucmVnRXhbcmVnRXhLZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVnRXhwID0gdGhpcy5nZXRSZWdFeCh0aGlzLnJlZ0V4W3JlZ0V4S2V5XSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmtleXNbcmVnRXhLZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVnRXhwID0gdGhpcy5nZXRSZWdFeCh0aGlzLmtleXNbcmVnRXhLZXldKVxuICAgIH1cbiAgICBpZiAocmVnRXhwICE9PSBmYWxzZSkge1xuICAgICAgaWYgKHRleHQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRleHQgPSB0aGlzLnRleHRcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoZWNrID0gcmVnRXhwLmV4ZWModGV4dClcbiAgICAgIGxldCB2YWx1ZSA9IG51bGxcbiAgICAgIGlmIChcbiAgICAgICAgY2hlY2sgIT09IG51bGwgJiZcbiAgICAgICAgKHJlcXVpcmVkR3JvdXAgPT09IGZhbHNlIHx8XG4gICAgICAgICAgdHlwZW9mIChjaGVjay5ncm91cHMgfHwge30pW3JlcXVpcmVkR3JvdXBdICE9PSAndW5kZWZpbmVkJylcbiAgICAgICkge1xuICAgICAgICBvdXRwdXQgPSBjaGVjay5ncm91cHMgfHwge31cbiAgICAgICAgaWYgKHJlbW92ZUZyb21UZXh0KSB7XG4gICAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy50ZXh0LnJlcGxhY2UoY2hlY2tbMF0udHJpbSgpLCAnXFxuJykudHJpbSgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNhdmVLZXlzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY2hlY2suZ3JvdXBzKSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgQ29DN0FjdG9ySW1wb3J0ZXIuYXNTdHJpbmc6XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZWRba2V5XSA9IFN0cmluZyhjaGVjay5ncm91cHNba2V5XSkucmVwbGFjZSgnXFxuJywgJyAnKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGNhc2UgQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXI6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBOdW1iZXIoY2hlY2suZ3JvdXBzW2tleV0pXG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VkW2tleV0gPSBOdW1iZXIoY2hlY2suZ3JvdXBzW2tleV0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG91dHB1dFsnLXNvdXJjZSddID0gY2hlY2tbMF1cbiAgICAgICAgb3V0cHV0WyctaW5kZXgnXSA9IGNoZWNrLmluZGV4XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXRcbiAgfVxuXG4gIC8qKlxuICAgKiBwcm9jZXNzQ29tYmF0IGV4dHJhY3RzIGNvbWJhdCAvIGRvZGdlIGluZm9ybWF0aW9uIGZyb20gYSBzdWJzZWN0aW9uIG9mIHRleHRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgdGhlIHJhdyB0ZXh0IG9mIHRoZSBjb21iYXQgc2VjdGlvblxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBwcm9jZXNzQ29tYmF0ICh0ZXh0KSB7XG4gICAgaWYgKHRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmxvZygnY29tYmF0IHRleHQnLCB0ZXh0KVxuICAgIH1cbiAgICBsZXQgd2VhcG9uXG4gICAgbGV0IGRvZGdlXG4gICAgbGV0IG5ld2xpbmVcbiAgICBsZXQgbGFzdFBlcmNlbnQgPSBmYWxzZVxuICAgIGxldCBtYXhMb29wcyA9IDQwXG4gICAgZG8ge1xuICAgICAgbWF4TG9vcHMtLVxuICAgICAgdGV4dCA9IHRleHQudHJpbSgpXG4gICAgICBpZiAoXG4gICAgICAgIChkb2RnZSA9IHRoaXMuY2hlY2soJ3dlYXBvbkRvZGdlJywgeyBzYXZlS2V5czogZmFsc2UsIHRleHQgfSkpXG4gICAgICApIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShkb2RnZVsnLXNvdXJjZSddLCAnXFxuJylcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnBhcnNlZC5za2lsbHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhpcy5wYXJzZWQuc2tpbGxzID0gW11cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcnNlZC5za2lsbHMucHVzaCh7XG4gICAgICAgICAgbmFtZTogdGhpcy5jbGVhblN0cmluZyhkb2RnZS5uYW1lKSxcbiAgICAgICAgICB2YWx1ZTogTnVtYmVyKGRvZGdlLnBlcmNlbnRhZ2UpLFxuICAgICAgICAgIHB1c2g6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAod2VhcG9uID0gdGhpcy5jaGVjaygnd2VhcG9uJywge1xuICAgICAgICAgIHNhdmVLZXlzOiBmYWxzZSxcbiAgICAgICAgICB0ZXh0LFxuICAgICAgICAgIHJlcXVpcmVkR3JvdXA6IGxhc3RQZXJjZW50ID09PSBmYWxzZSA/ICdwZXJjZW50YWdlJyA6IGZhbHNlXG4gICAgICAgIH0pKVxuICAgICAgKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uod2VhcG9uWyctc291cmNlJ10sICdcXG4nKVxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5jbGVhblN0cmluZyh3ZWFwb24ubmFtZSB8fCAnJylcbiAgICAgICAgbGV0IGRhbWFnZSA9IHRoaXMudHJhbnNsYXRlUm9sbCh0aGlzLmNsZWFuU3RyaW5nKHdlYXBvbi5kYW1hZ2UgfHwgJycpKVxuICAgICAgICBjb25zdCBpc1JhbmdlZCA9ICEhKFxuICAgICAgICAgIHRoaXMuY2hlY2soJ2hhbmRndW4nLCB7XG4gICAgICAgICAgICB0ZXh0OiBuYW1lLFxuICAgICAgICAgICAgcmVtb3ZlRnJvbVRleHQ6IGZhbHNlLFxuICAgICAgICAgICAgc2F2ZUtleXM6IGZhbHNlXG4gICAgICAgICAgfSkgfHxcbiAgICAgICAgICB0aGlzLmNoZWNrKCdyaWZsZScsIHtcbiAgICAgICAgICAgIHRleHQ6IG5hbWUsXG4gICAgICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2UsXG4gICAgICAgICAgICBzYXZlS2V5czogZmFsc2VcbiAgICAgICAgICB9KSB8fFxuICAgICAgICAgIHRoaXMuY2hlY2soJ3NtYicsIHtcbiAgICAgICAgICAgIHRleHQ6IG5hbWUsXG4gICAgICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2UsXG4gICAgICAgICAgICBzYXZlS2V5czogZmFsc2VcbiAgICAgICAgICB9KSB8fFxuICAgICAgICAgIHRoaXMuY2hlY2soJ21hY2hpbmVHdW4nLCB7XG4gICAgICAgICAgICB0ZXh0OiBuYW1lLFxuICAgICAgICAgICAgcmVtb3ZlRnJvbVRleHQ6IGZhbHNlLFxuICAgICAgICAgICAgc2F2ZUtleXM6IGZhbHNlXG4gICAgICAgICAgfSkgfHxcbiAgICAgICAgICB0aGlzLmNoZWNrKCdsYXVuY2hlZCcsIHtcbiAgICAgICAgICAgIHRleHQ6IG5hbWUsXG4gICAgICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2UsXG4gICAgICAgICAgICBzYXZlS2V5czogZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICAgIGlmIChcbiAgICAgICAgICB3ZWFwb24ucGVyY2VudGFnZSAhPT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB3ZWFwb24ucGVyY2VudGFnZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgbGFzdFBlcmNlbnQgPSBOdW1iZXIod2VhcG9uLnBlcmNlbnRhZ2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdFBlcmNlbnQgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZvdW5kXG4gICAgICAgIGxldCBhaGRiID0gZmFsc2VcbiAgICAgICAgbGV0IGFkZGIgPSBmYWxzZVxuICAgICAgICBkbyB7XG4gICAgICAgICAgZm91bmQgPSB0aGlzLmdldFJlZ0V4KFxuICAgICAgICAgICAgJ1xcXFxzKlsrLV0/XFxcXHMqKCcgK1xuICAgICAgICAgICAgICB0aGlzLmtleXMuaGFsZmRiICtcbiAgICAgICAgICAgICAgJylcXFxccyooJyArXG4gICAgICAgICAgICAgIHRoaXMua2V5cy5mdWxsZGIgK1xuICAgICAgICAgICAgICAnKT9bLStdP1xcXFxzKignICtcbiAgICAgICAgICAgICAgdGhpcy5wYXJzZWQuZGIucmVwbGFjZSgvXlstK10vLCAnJykgK1xuICAgICAgICAgICAgICAnKT8nXG4gICAgICAgICAgKS5leGVjKGRhbWFnZSlcbiAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgIGFoZGIgPSB0cnVlXG4gICAgICAgICAgICBkYW1hZ2UgPSBkYW1hZ2UucmVwbGFjZShmb3VuZFswXSwgJycpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvdW5kID0gdGhpcy5nZXRSZWdFeChcbiAgICAgICAgICAgICAgJ1xcXFxzKlsrLV0/XFxcXHMqKCcgK1xuICAgICAgICAgICAgICAgIHRoaXMua2V5cy5mdWxsZGIgK1xuICAgICAgICAgICAgICAgICcpXFxcXHMqWy0rXT9cXFxccyooJyArXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZWQuZGIucmVwbGFjZSgvXlstK10vLCAnJykgK1xuICAgICAgICAgICAgICAgICcpPydcbiAgICAgICAgICAgICkuZXhlYyhkYW1hZ2UpXG4gICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgYWRkYiA9IHRydWVcbiAgICAgICAgICAgICAgZGFtYWdlID0gZGFtYWdlLnJlcGxhY2UoZm91bmRbMF0sICcnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoZm91bmQpXG4gICAgICAgIGNvbnN0IGRhbWFnZXMgPSBkYW1hZ2Uuc3BsaXQoJy8nKVxuICAgICAgICBjb25zdCBpc1Nob3RndW4gPSBkYW1hZ2VzLmxlbmd0aCA9PT0gM1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgdHlwZTogJ3dlYXBvbicsXG4gICAgICAgICAgc3lzdGVtOiB7XG4gICAgICAgICAgICBza2lsbDoge1xuICAgICAgICAgICAgICBpZDogbGFzdFBlcmNlbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgICAgIHJhbmdlOiB7XG4gICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBpc1Nob3RndW4gPyAxMCA6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlOiBkYW1hZ2VzWzBdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxvbmc6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXNTaG90Z3VuID8gMjAgOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZTogaXNTaG90Z3VuID8gZGFtYWdlc1sxXSA6ICcnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGV4dHJlbWU6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXNTaG90Z3VuID8gNTAgOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZTogaXNTaG90Z3VuID8gZGFtYWdlc1syXSA6ICcnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHNvbWUgb2YgdGhlIHByb3BlcnRpZXNcbiAgICAgICAgZGF0YS5zeXN0ZW0ucHJvcGVydGllcy5zaG90Z3VuID0gaXNTaG90Z3VuXG4gICAgICAgIGRhdGEuc3lzdGVtLnByb3BlcnRpZXMucm5nZCA9IGlzUmFuZ2VkIHx8IGlzU2hvdGd1blxuICAgICAgICBkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzLm1lbGVlID0gIWRhdGEuc3lzdGVtLnByb3BlcnRpZXMucm5nZFxuICAgICAgICBkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzLmFoZGIgPSBhaGRiXG4gICAgICAgIGRhdGEuc3lzdGVtLnByb3BlcnRpZXMuYWRkYiA9IGFkZGJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnBhcnNlZC5hdHRhY2tzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMucGFyc2VkLmF0dGFja3MgPSBbXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyc2VkLmF0dGFja3MucHVzaChkYXRhKVxuICAgICAgfSBlbHNlIGlmICgobmV3bGluZSA9IHRleHQubWF0Y2goL14oLispXFxuLykpKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UobmV3bGluZVswXSwgJ1xcbicpXG4gICAgICB9IGVsc2UgaWYgKChuZXdsaW5lID0gdGV4dC5tYXRjaCgvXlteXFxuXSskLykpKSB7XG4gICAgICAgIHRleHQgPSAnJ1xuICAgICAgfVxuICAgIH0gd2hpbGUgKG1heExvb3BzID4gMCAmJiAoISF3ZWFwb24gfHwgISFkb2RnZSB8fCAhIXRleHQpKVxuICAgIGlmIChtYXhMb29wcyA9PT0gMCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JVbmV4cGVjdGVkV2VhcG9uVGV4dCcpXG4gICAgICApXG4gICAgICBjb25zb2xlLmRlYnVnKCdVbmV4cGVjdGVkIHdlYXBvbnM6JywgdGV4dClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcHJvY2Vzc1NraWxscyBleHRyYWN0cyBza2lsbHMgLyBsYW5ndWFnZSBpbmZvcm1hdGlvbiBmcm9tIGEgc3Vic2VjdGlvbiBvZiB0ZXh0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IHRoZSByYXcgdGV4dCBvZiB0aGUgc2tpbGxzIC8gbGFuZ3VhZ2Ugc2VjdGlvblxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBwcm9jZXNzU2tpbGxzICh0ZXh0LCBrZXkgPSAnc2tpbGxzJykge1xuICAgIGlmICh0ZXh0LnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBicmVha3MgPSB0ZXh0LnNwbGl0KC9cXC5cXHI/XFxuLylcbiAgICBpZiAoYnJlYWtzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRleHQgPSBicmVha3NbMF1cbiAgICB9XG4gICAgbGV0IHNraWxsXG4gICAgbGV0IG1heExvb3BzID0gNDBcbiAgICBkbyB7XG4gICAgICBtYXhMb29wcy0tXG4gICAgICB0ZXh0ID0gdGV4dC50cmltKClcbiAgICAgIHNraWxsID0gdGhpcy5jaGVjaygnc2tpbGwnLCB7IHNhdmVLZXlzOiBmYWxzZSwgdGV4dCB9KVxuICAgICAgaWYgKHNraWxsKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uoc2tpbGxbJy1zb3VyY2UnXSwgJ1xcbicpXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wYXJzZWRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aGlzLnBhcnNlZFtrZXldID0gW11cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcnNlZFtrZXldLnB1c2goe1xuICAgICAgICAgIG5hbWU6IHRoaXMuY2xlYW5TdHJpbmcoc2tpbGwubmFtZSksXG4gICAgICAgICAgdmFsdWU6IE51bWJlcihza2lsbC5wZXJjZW50YWdlKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gd2hpbGUgKG1heExvb3BzID4gMCAmJiBza2lsbClcbiAgICBpZiAobWF4TG9vcHMgPT09IDApIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVycm9yVW5leHBlY3RlZFNraWxsc1RleHQnKVxuICAgICAgKVxuICAgICAgY29uc29sZS5kZWJ1ZygnVW5leHBlY3RlZCBza2lsbHM6JywgdGV4dClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcHJvY2Vzc1NwZWxscyBleHRyYWN0cyBzcGVsbCBpbmZvcm1hdGlvbiBmcm9tIGEgc3Vic2VjdGlvbiBvZiB0ZXh0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IHRoZSByYXcgdGV4dCBvZiB0aGUgc3BlbGwgc2VjdGlvblxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBwcm9jZXNzU3BlbGxzICh0ZXh0KSB7XG4gICAgaWYgKHRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGJyZWFrcyA9IHRleHQuc3BsaXQoL1xcLlxccj9cXG4vKVxuICAgIGlmIChicmVha3MubGVuZ3RoID4gMSkge1xuICAgICAgdGV4dCA9IGJyZWFrc1swXVxuICAgIH1cbiAgICBjb25zdCBzcGVsbHNBcnIgPSB0ZXh0LnJlcGxhY2UoLyhbXFxuXFxyXSspL2csICcgJykuc3BsaXQoLyg/PCFcXChbXildKyksLylcbiAgICB0aGlzLnRleHQgPSB0aGlzLnRleHQucmVwbGFjZSh0ZXh0LnRyaW0oKSwgJ1xcbicpXG4gICAgZm9yIChjb25zdCBzcGVsbCBvZiBzcGVsbHNBcnIpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wYXJzZWQuc3BlbGxzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnBhcnNlZC5zcGVsbHMgPSBbXVxuICAgICAgfVxuICAgICAgdGhpcy5wYXJzZWQuc3BlbGxzLnB1c2godGhpcy5jbGVhblN0cmluZyhzcGVsbCkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcnNlQ2hhcmFjdGVyIGV4dHJhY3RzIGluZm9ybWF0aW9uIGZyb20gdGhlIHJhdyB0ZXh0IGRlc2NyaXB0aW9uIG9mIGFuIGVudGl0eSAoTlBDIG9yIENyZWF0dXJlKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCB0aGUgcmF3IHRleHQgb2YgdGhlIGVudGl0eVxuICAgKiBAcmV0dXJucyBleHRyYWN0ZWREYXRhIG9iamVjdCB3aXRoIHRoZSBlbnRpdHkgZGF0YVxuICAgKi9cbiAgYXN5bmMgcGFyc2VDaGFyYWN0ZXIgKHRleHQpIHtcbiAgICAvLyBSZXBsYWNlIFwiRW4gRGFzaFwiIGFuZCBcIkVtIERhc2hcIiBkYXNoZXMgd2l0aCAtIGFuZCBcIlJpZ2h0IFNpbmdsZSBRdW90YXRpb24gTWFya1wiIHdpdGggJ1xuICAgIHRoaXMudGV4dCA9IFN0cmluZyh0ZXh0KVxuICAgICAgLnRyaW0oKVxuICAgICAgLnJlcGxhY2UoL1xcdTIwMTN8XFx1MjAxNHxcXHUyMjEyL2csICctJylcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDE5L2csIFwiJ1wiKVxuICAgICAgLnJlcGxhY2UoL1tcXHVkYmMwLVxcdWRiZmVdW1xcdWRjMDAtXFx1ZGZmZl0vZywgJycpXG4gICAgLy8gRWFybGllc3QgY2hhcmFjdGVyIHRoYXQgaGFzIGJlZW4gdXNlZCwgdG8gd29yayBvdXQgdGhlIGhlYWRlclxuICAgIGxldCBtaW4gPSB0aGlzLnRleHQubGVuZ3RoXG4gICAgLy8gU1RSLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGxldCBjaGVjayA9IHRoaXMuY2hlY2soJ3N0cicsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbXG4gICAgICAnLWluZGV4J1xuICAgIF1cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gQ09OLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnY29uJywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gU0laLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnc2l6JywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gSU5ULCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnaW50JywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gUE9XLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygncG93JywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gREVYLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnZGV4JywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gQVBQLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnYXBwJywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gRURVLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnZWR1JywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gU0FOLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnc2FuJywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gSFAsIGlmIGJlcmZvcmUgdGhhbiBwcmV2aW91cyBtaW4gdXBkYXRlIGl0XG4gICAgY2hlY2sgPSB0aGlzLmNoZWNrKCdocCcsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIE1QLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnbXAnLCB7IHR5cGU6IENvQzdBY3RvckltcG9ydGVyLmFzTnVtYmVyIH0pWyctaW5kZXgnXVxuICAgIGlmICghaXNOYU4oY2hlY2spKSB7XG4gICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGNoZWNrKVxuICAgIH1cbiAgICAvLyBXb3JrIG91dCB0aGUgaGVhZGVyIGJhc2VkIG9uIHByZXZpb3VzIG1pbmltdW0gbWF0Y2hlZCBjaGFyYWN0ZXJcbiAgICBsZXQgaGVhZGVyXG4gICAgaWYgKG1pbiA+IDApIHtcbiAgICAgIGhlYWRlciA9IHRoaXMudGV4dC5zdWJzdHIoMCwgbWluKVxuICAgICAgLy8gR2V0IG5hbWUgZnJvbSBoZWFkZXJcbiAgICAgIGNoZWNrID0gdGhpcy5jaGVjaygnbmFtZScsIHsgdGV4dDogaGVhZGVyIH0pXG4gICAgICBpZiAoY2hlY2sgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIElmIG5vdCBmb3VuZCB1c2UgZGVmYXVsdCBOUEMgbmFtZVxuICAgICAgICB0aGlzLnBhcnNlZC5uYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkltcG9ydGVkVW5uYW1lZENoYXJhY3RlcicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZW1vdmUgbmFtZSBmcm9tIGhlYWRlclxuICAgICAgICBoZWFkZXIgPSBoZWFkZXIucmVwbGFjZShjaGVja1snLXNvdXJjZSddLCAnXFxuJylcbiAgICAgIH1cbiAgICAgIC8vIEdldCBhZ2UgZnJvbSBoZWFkZXJcbiAgICAgIGNoZWNrID0gdGhpcy5jaGVjaygnYWdlJywgeyB0ZXh0OiBoZWFkZXIgfSlcbiAgICAgIGlmIChjaGVjayAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy8gSWYgZm91bmQgcmVtb3ZlIGFnZSBmcm9tIGhlYWRlclxuICAgICAgICBoZWFkZXIgPSBoZWFkZXIucmVwbGFjZShjaGVja1snLXNvdXJjZSddLCAnXFxuJylcbiAgICAgIH1cbiAgICAgIC8vIEdldCBvY2N1cGF0aW9uIGZyb20gaGVhZGVyXG4gICAgICBpZiAoIXRoaXMuY2hlY2soJ29jY3VwYXRpb24nLCB7IHRleHQ6IGhlYWRlciB9KSAmJiBoZWFkZXIudHJpbSgpICE9PSAnJykge1xuICAgICAgICAvLyBJZiBvY2N1cGF0aW9uIGlzIG5vdCBmb3VuZCBidXQgdGhlcmUgaXMgYSBoZWFkZXIgc2V0IHRoZSBvY2N1cGF0aW9uIHRvIHRoZSByZW1haW5pbmcgaGVhZGVyXG4gICAgICAgIGxldCBvY2N1cGF0aW9uID0gaGVhZGVyXG4gICAgICAgIGlmIChoZWFkZXIuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGZ1bGwgc3RvcCBqdXN0IHVzZSB0aGUgZmlyc3QgcGFydCBvZiB0aGUgaGVhZGVyIGFzIHRoZSBvY2N1cGF0aW9uXG4gICAgICAgICAgb2NjdXBhdGlvbiA9IGhlYWRlci5zdWJzdHIoMCwgaGVhZGVyLmluZGV4T2YoJy4nKSArIDEpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZWQub2NjdXBhdGlvbiA9IG9jY3VwYXRpb25cbiAgICAgICAgICAucmVwbGFjZSgvKFtcXG5cXHJdKykvZywgJyAnKVxuICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAucmVwbGFjZSgvLCQvLCAnJylcbiAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy50ZXh0LnJlcGxhY2Uob2NjdXBhdGlvbi50cmltKCksICdcXG4nKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVyZSBpcyBubyBoZWFkZXIgc2V0IGRlZmF1bHQgTlBDIG5hbWVcbiAgICAgIHRoaXMucGFyc2VkLm5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSW1wb3J0ZWRVbm5hbWVkQ2hhcmFjdGVyJylcbiAgICB9XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gb2NjdXBhdGlvbiBidXQgbm8gYWdlIGNoZWNrIGlmIHRoZSBvY2N1cGF0aW9uIHN0YXJ0cyBudW1iZXIgc3BsaXQgYWdlIGFuZCBvY2N1cGF0aW9uXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHRoaXMucGFyc2VkLm9jY3VwYXRpb24gIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgdGhpcy5wYXJzZWQuYWdlID09PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc3Qgb2NjdXBhdGlvbkFnZSA9IHRoaXMucGFyc2VkLm9jY3VwYXRpb24ubWF0Y2goXG4gICAgICAgIC9eKD88YWdlPlxcZCspLCg/PG9jY3VwYXRpb24+LispJC9cbiAgICAgIClcbiAgICAgIGlmIChvY2N1cGF0aW9uQWdlKSB7XG4gICAgICAgIHRoaXMucGFyc2VkLmFnZSA9IG9jY3VwYXRpb25BZ2UuZ3JvdXBzLmFnZVxuICAgICAgICB0aGlzLnBhcnNlZC5vY2N1cGF0aW9uID0gb2NjdXBhdGlvbkFnZS5ncm91cHMub2NjdXBhdGlvbi50cmltKClcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gR2V0IGRhbWFnZSBib251cywgaWYgbm90IGZvdW5kIG9yIG5vbmUgc2V0IHRvIDBcbiAgICBpZiAoXG4gICAgICAhdGhpcy5jaGVjaygnZGInKSB8fFxuICAgICAgdGhpcy5jaGVjaygnZGJOb25lJywge1xuICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2UsXG4gICAgICAgIHNhdmVLZXlzOiBmYWxzZSxcbiAgICAgICAgdGV4dDogdGhpcy5wYXJzZWQuZGJcbiAgICAgIH0pXG4gICAgKSB7XG4gICAgICB0aGlzLnBhcnNlZC5kYiA9ICcwJ1xuICAgIH1cbiAgICB0aGlzLnBhcnNlZC5kYiA9IHRoaXMudHJhbnNsYXRlUm9sbCh0aGlzLnBhcnNlZC5kYilcbiAgICAvLyBHZXQgYnVpbGRcbiAgICB0aGlzLmNoZWNrKCdidWlsZCcpXG4gICAgLy8gR2V0IGFybW9yLCBpZiBub3QgZm91bmQgb3Igbm9uZSBzZXQgdG8gMFxuICAgIGlmIChcbiAgICAgICF0aGlzLmNoZWNrKCdhcm1vcicpIHx8XG4gICAgICB0aGlzLmNoZWNrKCdhcm1vck5vbmUnLCB7XG4gICAgICAgIHJlbW92ZUZyb21UZXh0OiBmYWxzZSxcbiAgICAgICAgc2F2ZUtleXM6IGZhbHNlLFxuICAgICAgICB0ZXh0OiB0aGlzLnBhcnNlZC5hcm1vclxuICAgICAgfSlcbiAgICApIHtcbiAgICAgIHRoaXMucGFyc2VkLmFybW9yID0gJzAnXG4gICAgfVxuICAgIC8vIEdldCBtb3ZlbWVudFxuICAgIHRoaXMuY2hlY2soJ21vdicsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlcbiAgICAvLyBHZXQgbHVja1xuICAgIHRoaXMuY2hlY2soJ2xjaycsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlcbiAgICAvLyBHZXQgc2FuaXR5IGxvc3NcbiAgICB0aGlzLmNoZWNrKCdzYW5Mb3NzJylcbiAgICB0aGlzLnBhcnNlZC5zYW5Mb3NzID0gdGhpcy50cmFuc2xhdGVSb2xsKHRoaXMucGFyc2VkLnNhbkxvc3MpXG4gICAgLy8gR2V0IGF0dGFja3MgcGVyIHJvdW5kLCBpZiBub3QgZm91bmQgb3Igbm9uZSBzZXQgdG8gMFxuICAgIGlmIChcbiAgICAgIHRoaXMuY2hlY2soJ2F0dGFja3NQZXJSb3VuZCcpICYmXG4gICAgICB0aGlzLmNoZWNrKCdhdHRhY2tzUGVyUm91bmROb25lJywge1xuICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2UsXG4gICAgICAgIHNhdmVLZXlzOiBmYWxzZSxcbiAgICAgICAgdGV4dDogdGhpcy5wYXJzZWQuYXR0YWNrc1BlclJvdW5kXG4gICAgICB9KVxuICAgICkge1xuICAgICAgdGhpcy5wYXJzZWQuYXR0YWNrc1BlclJvdW5kID0gJzAnXG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgY29tYmF0IHNlY3Rpb25cbiAgICB0aGlzLnRleHQgPSAnXFxuJyArIHRoaXMudGV4dFxuICAgIGxldCBzZWN0aW9ucyA9IHRoaXMuZ2V0UmVnRXgoJygnICsgdGhpcy5rZXlzLnNlY3Rpb25Db21iYXRzICsgJyknLCAnaScpXG4gICAgaWYgKHRoaXMudGV4dC5tYXRjaChzZWN0aW9ucykgPT09IG51bGwpIHtcbiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGNvbWJhdCBzZWN0aW9uIGd1ZXNzIHdoZXJlIGl0IHN0YXJ0c1xuICAgICAgc2VjdGlvbnMgPSB0aGlzLmNoZWNrKCdndWVzc1N0YXJ0Q29tYmF0Jywge1xuICAgICAgICBzYXZlS2V5czogZmFsc2UsXG4gICAgICAgIHJlbW92ZUZyb21UZXh0OiBmYWxzZVxuICAgICAgfSlcbiAgICAgIGlmIChzZWN0aW9ucykge1xuICAgICAgICAvLyBBZGQgYSBoZWFkZXIgdG8gdGhlIHN0YXJ0IG9mIHRoZSBjb21iYXQgc2VjdGlvblxuICAgICAgICB0aGlzLnRleHQgPSBbXG4gICAgICAgICAgdGhpcy50ZXh0LnNsaWNlKDAsIHNlY3Rpb25zWyctaW5kZXgnXSksXG4gICAgICAgICAgdGhpcy5rZXlzLm5ld0NvbWJhdEhlYWRlcixcbiAgICAgICAgICB0aGlzLnRleHQuc2xpY2Uoc2VjdGlvbnNbJy1pbmRleCddKVxuICAgICAgICBdLmpvaW4oJycpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIFNwbGl0IHRoZSBzZWN0aW9ucyBDb21iYXQsIFNraWxscywgTGFuZ3VhZ2VzLCBhbmQgU3BlbGxzXG4gICAgY29uc3QgcmVnRXhwU2VjdGlvbnMgPSB0aGlzLmdldFJlZ0V4KHRoaXMucmVnRXguc2VjdGlvbnMsICdpJylcbiAgICBzZWN0aW9ucyA9IHRoaXMudGV4dC5zcGxpdChyZWdFeHBTZWN0aW9ucylcbiAgICBpZiAoc2VjdGlvbnMgIT09IG51bGwpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpbSA9IHNlY3Rpb25zLmxlbmd0aDsgaSA8IGltOyBpKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNlY3Rpb25zW2ldLm1hdGNoKFxuICAgICAgICAgICAgdGhpcy5nZXRSZWdFeCgnKCcgKyB0aGlzLmtleXMuc2VjdGlvbkNvbWJhdHMgKyAnKScsICdpJylcbiAgICAgICAgICApICE9PSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHNlY3Rpb25zW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gSWYgc2VjdGlvbiBpcyBjb21iYXRcbiAgICAgICAgICB0aGlzLnRleHQgPSAoJ1xcbicgKyB0aGlzLnRleHQgKyAnXFxuJylcbiAgICAgICAgICAgIC5yZXBsYWNlKHNlY3Rpb25zW2ldLCAnXFxuJylcbiAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICB0aGlzLnByb2Nlc3NDb21iYXQoc2VjdGlvbnNbaSArIDFdKVxuICAgICAgICAgIGkrK1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNlY3Rpb25zW2ldLm1hdGNoKFxuICAgICAgICAgICAgdGhpcy5nZXRSZWdFeCgnKCcgKyB0aGlzLmtleXMuc2VjdGlvblNraWxscyArICcpJywgJ2knKVxuICAgICAgICAgICkgIT09IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2Ygc2VjdGlvbnNbaSArIDFdICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICApIHtcbiAgICAgICAgICAvLyBJZiBzZWN0aW9uIGlzIHNraWxsc1xuICAgICAgICAgIHRoaXMudGV4dCA9ICgnXFxuJyArIHRoaXMudGV4dCArICdcXG4nKVxuICAgICAgICAgICAgLnJlcGxhY2Uoc2VjdGlvbnNbaV0sICdcXG4nKVxuICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgIHRoaXMucHJvY2Vzc1NraWxscyhzZWN0aW9uc1tpICsgMV0pXG4gICAgICAgICAgaSsrXG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2VjdGlvbnNbaV0ubWF0Y2goXG4gICAgICAgICAgICB0aGlzLmdldFJlZ0V4KCcoJyArIHRoaXMua2V5cy5zZWN0aW9uTGFuZ2F1Z2VzICsgJyknLCAnaScpXG4gICAgICAgICAgKSAhPT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiBzZWN0aW9uc1tpICsgMV0gIT09ICd1bmRlZmluZWQnXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHNlY3Rpb24gaXMgbGFuZ3VhZ2VzXG4gICAgICAgICAgdGhpcy50ZXh0ID0gKCdcXG4nICsgdGhpcy50ZXh0ICsgJ1xcbicpXG4gICAgICAgICAgICAucmVwbGFjZShzZWN0aW9uc1tpXSwgJ1xcbicpXG4gICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgdGhpcy5wcm9jZXNzU2tpbGxzKHNlY3Rpb25zW2kgKyAxXSwgJ2xhbmd1YWdlcycpXG4gICAgICAgICAgaSsrXG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2VjdGlvbnNbaV0ubWF0Y2goXG4gICAgICAgICAgICB0aGlzLmdldFJlZ0V4KCcoJyArIHRoaXMua2V5cy5zZWN0aW9uU3BlbGxzICsgJyknLCAnaScpXG4gICAgICAgICAgKSAhPT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiBzZWN0aW9uc1tpICsgMV0gIT09ICd1bmRlZmluZWQnXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHNlY3Rpb24gaXMgc3BlbGxzXG4gICAgICAgICAgdGhpcy50ZXh0ID0gKCdcXG4nICsgdGhpcy50ZXh0ICsgJ1xcbicpXG4gICAgICAgICAgICAucmVwbGFjZShzZWN0aW9uc1tpXSwgJ1xcbicpXG4gICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgdGhpcy5wcm9jZXNzU3BlbGxzKHNlY3Rpb25zW2kgKyAxXSlcbiAgICAgICAgICBpKytcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBBbnkgcmVtYWluaW5nIHRleHQgYWRkIHRvIEdNIG5vdGVzIHNvIHlvdSBjYW4gZWFzaWx5IHNlZSBpZiB0aGVyZSBhcmUgYW55IG9idmlvdXMgaXNzdWUgb3IganVzdCBnZW5lcmFsIG5vdGVzXG4gICAgdGhpcy5wYXJzZWQuZ21ub3RlcyA9IHRoaXMudG9IVE1MKHRoaXMudGV4dClcbiAgICByZXR1cm4gdGhpcy5wYXJzZWRcbiAgfVxuXG4gIGRpc2FibGVBdHRyaWJBdXRvIChrZXksIGF0dHJpYlZhbHVlLCBjaGVjaywgdXBkYXRlRGF0YSkge1xuICAgIGNvbnN0IHZhbHVlID0gTWF0aC5tYXgoMCwgTnVtYmVyKGF0dHJpYlZhbHVlKSlcbiAgICBpZiAodmFsdWUgIT09IE51bWJlcihjaGVjaykpIHtcbiAgICAgIHVwZGF0ZURhdGFbYHN5c3RlbS5hdHRyaWJzLiR7a2V5fS5hdXRvYF0gPSBmYWxzZVxuICAgICAgdXBkYXRlRGF0YVtgc3lzdGVtLmF0dHJpYnMuJHtrZXl9LnZhbHVlYF0gPSB2YWx1ZVxuICAgICAgaWYgKGtleSA9PT0gJ2J1aWxkJykge1xuICAgICAgICB1cGRhdGVEYXRhW2BzeXN0ZW0uYXR0cmlicy4ke2tleX0uY3VycmVudGBdID0gdmFsdWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZURhdGFbYHN5c3RlbS5hdHRyaWJzLiR7a2V5fS5tYXhgXSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVEYXRhXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGVudGl0eSAoYG5wY2Agb3IgYGNyZWF0dXJlYCkgZnJvbSB0aGUgb2JqZWN0IHdpdGggdGhlIGFscmVhZHkgcGFyc2VkIGVudGl0eSBkYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjaGFyYWN0ZXJEYXRhIG9iamVjdCB3aXRoIHRoZSBkYXRhIGV4dHJhY3RlZCBmcm9tIHRoZSBjaGFyYWN0ZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGVudGl0eVR5cGVTdHJpbmcgZW50aXR5IHR5cGUgb2J0YWluZWQgZnJvbSB0aGUgdXNlciBpbnB1dFxuICAgKiBAcmV0dXJucyB7QWN0b3J9IHRoZSBjcmVhdGVkIGZvdW5kcnkgYEFjdG9yYFxuICAgKi9cbiAgYXN5bmMgY3JlYXRlRW50aXR5IChjaGFyYWN0ZXJEYXRhLCBlbnRpdHlUeXBlKSB7XG4gICAgY29uc3QgaW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyID1cbiAgICAgIGF3YWl0IENvQzdVdGlsaXRpZXMuY3JlYXRlSW1wb3J0Q2hhcmFjdGVyc0ZvbGRlcklmTm90RXhpc3RzKClcbiAgICBpZiAoZW50aXR5VHlwZSAhPT0gJ25wYycpIHtcbiAgICAgIGVudGl0eVR5cGUgPSAnY3JlYXR1cmUnXG4gICAgfVxuICAgIGNvbnN0IGFjdG9yRGF0YSA9IHtcbiAgICAgIG5hbWU6IGNoYXJhY3RlckRhdGEubmFtZSxcbiAgICAgIHR5cGU6IGVudGl0eVR5cGUsXG4gICAgICBmb2xkZXI6IGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlci5pZCxcbiAgICAgIGRhdGE6IGNoYXJhY3RlckRhdGEuYWN0b3JcbiAgICB9XG4gICAgY29uc3QgbnBjID0gYXdhaXQgQWN0b3IuY3JlYXRlKGFjdG9yRGF0YSlcbiAgICBhd2FpdCBucGMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBjaGFyYWN0ZXJEYXRhLml0ZW1zLCB7XG4gICAgICByZW5kZXJTaGVldDogZmFsc2VcbiAgICB9KVxuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuICAgIGxldCB2YWx1ZSA9IDBcbiAgICBpZiAodHlwZW9mIGNoYXJhY3RlckRhdGEuYWN0b3IuYXR0cmlicy5ocD8udmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmRpc2FibGVBdHRyaWJBdXRvKFxuICAgICAgICAnaHAnLFxuICAgICAgICBjaGFyYWN0ZXJEYXRhLmFjdG9yLmF0dHJpYnMuaHAudmFsdWUsXG4gICAgICAgIG5wYy5ocE1heCxcbiAgICAgICAgdXBkYXRlRGF0YVxuICAgICAgKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoYXJhY3RlckRhdGEuYWN0b3IuYXR0cmlicy5tcD8udmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmRpc2FibGVBdHRyaWJBdXRvKFxuICAgICAgICAnbXAnLFxuICAgICAgICBjaGFyYWN0ZXJEYXRhLmFjdG9yLmF0dHJpYnMubXAudmFsdWUsXG4gICAgICAgIG5wYy5tcE1heCxcbiAgICAgICAgdXBkYXRlRGF0YVxuICAgICAgKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoYXJhY3RlckRhdGEuYWN0b3IuYXR0cmlicy5tb3Y/LnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5kaXNhYmxlQXR0cmliQXV0byhcbiAgICAgICAgJ21vdicsXG4gICAgICAgIGNoYXJhY3RlckRhdGEuYWN0b3IuYXR0cmlicy5tb3YudmFsdWUsXG4gICAgICAgIG5wYy5tb3YsXG4gICAgICAgIHVwZGF0ZURhdGFcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjaGFyYWN0ZXJEYXRhLmFjdG9yLmF0dHJpYnMuYnVpbGQ/LnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5kaXNhYmxlQXR0cmliQXV0byhcbiAgICAgICAgJ2J1aWxkJyxcbiAgICAgICAgY2hhcmFjdGVyRGF0YS5hY3Rvci5hdHRyaWJzLmJ1aWxkLnZhbHVlLFxuICAgICAgICBucGMuYnVpbGQsXG4gICAgICAgIHVwZGF0ZURhdGFcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjaGFyYWN0ZXJEYXRhLmFjdG9yLmF0dHJpYnMuZGI/LnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcoY2hhcmFjdGVyRGF0YS5hY3Rvci5hdHRyaWJzLmRiLnZhbHVlKS5yZXBsYWNlKC9eXFwrXFxzKi8sICcnKVxuICAgICAgaWYgKHZhbHVlICE9PSBTdHJpbmcobnBjLmRiKSkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0cmlicy5kYi5hdXRvJ10gPSBmYWxzZVxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0cmlicy5kYi52YWx1ZSddID0gdmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZURhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ3VwZGF0ZURhdGE6JywgdXBkYXRlRGF0YSlcbiAgICAgIH1cbiAgICAgIGF3YWl0IG5wYy51cGRhdGUodXBkYXRlRGF0YSlcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlSXRlbURhdGEgPSBbXVxuICAgIGxldCBsYXN0V2VhcG9uU2tpbGwgPSBudWxsXG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHRoaXMud2VhcG9uU2tpbGxzKSB7XG4gICAgICBpZiAocGFpclswXSAhPT0gZmFsc2UpIHtcbiAgICAgICAgbGFzdFdlYXBvblNraWxsID0gbnBjLml0ZW1zLmZpbHRlcihcbiAgICAgICAgICBpID0+IGkubmFtZSA9PT0gcGFpclswXS5uYW1lICYmXG4gICAgICAgICAgICBpLnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgIE51bWJlcihpLnN5c3RlbS52YWx1ZSkgPT09IE51bWJlcihwYWlyWzBdLnN5c3RlbS52YWx1ZSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgY29uc3Qgd2VhcG9uID0gbnBjLml0ZW1zLmZpbHRlcihcbiAgICAgICAgaSA9PiBpLm5hbWUgPT09IHBhaXJbMV0ubmFtZSAmJlxuICAgICAgICAgIGkudHlwZSA9PT0gJ3dlYXBvbicgJiZcbiAgICAgICAgICBpLnN5c3RlbS5yYW5nZS5ub3JtYWwuZGFtYWdlID09PSBwYWlyWzFdLnN5c3RlbS5yYW5nZS5ub3JtYWwuZGFtYWdlXG4gICAgICApXG4gICAgICBpZiAobGFzdFdlYXBvblNraWxsWzBdICYmIHdlYXBvblswXSkge1xuICAgICAgICB1cGRhdGVJdGVtRGF0YS5wdXNoKHtcbiAgICAgICAgICBfaWQ6IHdlYXBvblswXS5pZCxcbiAgICAgICAgICAnc3lzdGVtLnNraWxsLm1haW4uaWQnOiBsYXN0V2VhcG9uU2tpbGxbMF0uaWQsXG4gICAgICAgICAgJ3N5c3RlbS5za2lsbC5tYWluLm5hbWUnOiBsYXN0V2VhcG9uU2tpbGxbMF0ubmFtZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodXBkYXRlSXRlbURhdGEubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZygndXBkYXRlSXRlbURhdGE6JywgdXBkYXRlSXRlbURhdGEpXG4gICAgICB9XG4gICAgICBhd2FpdCBucGMudXBkYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCB1cGRhdGVJdGVtRGF0YSlcbiAgICB9XG4gICAgcmV0dXJuIG5wY1xuICB9XG5cbiAgLyoqXG4gICAqIGFjdG9yRGF0YSwgY29udmVydCBwYXJzZUNoYXJhY3RlciBkYXRhIGludG8gQWN0b3IgZGF0YVxuICAgKiBAcGFyYW0ge09iamVjdH0gcGMgb2JqZWN0IHdpdGggdGhlIGRhdGEgZXh0cmFjdGVkIGZyb20gdGhlIGNoYXJhY3RlciBhcyByZXR1cm5lZCBmcm9tIGBwYXJzZUNoYXJhY3RlcmBcbiAgICogQHJldHVybnMge09iamVjdH0gZm9ybWF0dGVkIEFjdG9yIGRhdGFcbiAgICovXG4gIGFjdG9yRGF0YSAocGMpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgY2hhcmFjdGVyaXN0aWNzOiB7fSxcbiAgICAgIGF0dHJpYnM6IHt9LFxuICAgICAgaW5mb3M6IHt9LFxuICAgICAgc3BlY2lhbDoge30sXG4gICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICBrZWVwZXI6ICcnXG4gICAgICB9LFxuICAgICAgZmxhZ3M6IHtcbiAgICAgICAgbG9ja2VkOiBmYWxzZSxcbiAgICAgICAgZGlzcGxheUZvcm11bGE6IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIFtcbiAgICAgICdzdHInLFxuICAgICAgJ2NvbicsXG4gICAgICAnc2l6JyxcbiAgICAgICdkZXgnLFxuICAgICAgJ2FwcCcsXG4gICAgICAnaW50JyxcbiAgICAgICdwb3cnLFxuICAgICAgJ2VkdSdcbiAgICBdKSB7XG4gICAgICBpZiAodHlwZW9mIHBjW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRhdGEuY2hhcmFjdGVyaXN0aWNzW2tleV0gPSB7XG4gICAgICAgICAgdmFsdWU6IE51bWJlcihwY1trZXldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIFsnc2FuJywgJ21vdicsICdidWlsZCcsICdhcm1vcicsICdsY2snLCAnaHAnLCAnbXAnXSkge1xuICAgICAgaWYgKHR5cGVvZiBwY1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBkYXRhLmF0dHJpYnNba2V5XSA9IHtcbiAgICAgICAgICB2YWx1ZTogTnVtYmVyKHBjW2tleV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYy5kYiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuYXR0cmlicy5kYiA9IHtcbiAgICAgICAgdmFsdWU6IHBjLmRiXG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIFsnYWdlJywgJ29jY3VwYXRpb24nXSkge1xuICAgICAgaWYgKHR5cGVvZiBwY1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBkYXRhLmluZm9zW2tleV0gPSBwY1trZXldXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGMuc2FuTG9zcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IFtwYXNzZWQsIGZhaWxlZF0gPSBwYy5zYW5Mb3NzLnNwbGl0KCcvJylcbiAgICAgIGRhdGEuc3BlY2lhbC5zYW5Mb3NzID0ge1xuICAgICAgICBjaGVja1Bhc3NlZDogcGFzc2VkLFxuICAgICAgICBjaGVja0ZhaWxsZWQ6IGZhaWxlZFxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHBjLmF0dGFja3NQZXJSb3VuZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuc3BlY2lhbC5hdHRhY2tzUGVyUm91bmQgPSBOdW1iZXIocGMuYXR0YWNrc1BlclJvdW5kKVxuICAgIH1cbiAgICBkYXRhLmRlc2NyaXB0aW9uLmtlZXBlciA9IHBjLmdtbm90ZXNcbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5kZWJ1ZygnYWN0b3JEYXRhOicsIGRhdGEpXG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICAvKipcbiAgICogaXRlbXNEYXRhLCBjb252ZXJ0IHBhcnNlQ2hhcmFjdGVyIGRhdGEgaW50byBBY3RvciBpdGVtIGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IHBjIG9iamVjdCB3aXRoIHRoZSBkYXRhIGV4dHJhY3RlZCBmcm9tIHRoZSBjaGFyYWN0ZXIgYXMgcmV0dXJuZWQgZnJvbSBgcGFyc2VDaGFyYWN0ZXJgXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGZvcm1hdHRlZCBBY3RvciBkYXRhXG4gICAqL1xuICBhc3luYyBpdGVtc0RhdGEgKHBjKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXVxuICAgIHRoaXMud2VhcG9uU2tpbGxzID0gW11cbiAgICAvLyBXZWFwb24gc2tpbGxzXG4gICAgaWYgKHR5cGVvZiBwYy5hdHRhY2tzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChjb25zdCBhdHRhY2sgb2YgcGMuYXR0YWNrcykge1xuICAgICAgICBsZXQgc2tpbGwgPSBmYWxzZVxuICAgICAgICBpZiAoYXR0YWNrLnN5c3RlbT8uc2tpbGw/LmlkICE9PSB0cnVlKSB7XG4gICAgICAgICAgc2tpbGwgPSBhd2FpdCB0aGlzLndlYXBvblNraWxsKGF0dGFjaylcbiAgICAgICAgICBpdGVtcy5wdXNoKHNraWxsKVxuICAgICAgICB9XG4gICAgICAgIGF0dGFjay5zeXN0ZW0uc2tpbGwuaWQgPSBudWxsXG4gICAgICAgIGl0ZW1zLnB1c2goYXR0YWNrKVxuICAgICAgICB0aGlzLndlYXBvblNraWxscy5wdXNoKFtza2lsbCwgYXR0YWNrXSlcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gU2tpbGxzXG4gICAgaWYgKHR5cGVvZiBwYy5za2lsbHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHBjLnNraWxscykge1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ3Vlc3NJdGVtKCdza2lsbCcsIHNraWxsLm5hbWUsIHtcbiAgICAgICAgICBzb3VyY2U6IHRoaXMuaXRlbUxvY2F0aW9uc1xuICAgICAgICB9KVxuICAgICAgICBpZiAodHlwZW9mIGV4aXN0aW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IGNsb25lZCA9IGV4aXN0aW5nLnRvT2JqZWN0KClcbiAgICAgICAgICBjbG9uZWQuc3lzdGVtLmJhc2UgPSBza2lsbC52YWx1ZVxuICAgICAgICAgIGlmICh0eXBlb2Ygc2tpbGwucHVzaCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5wdXNoID0gc2tpbGwucHVzaFxuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGNsb25lZCkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9XG4gICAgICAgICAgaWYgKHR5cGVvZiBza2lsbC5wdXNoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoID0gc2tpbGwucHVzaFxuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKENvQ0FjdG9yLmVtcHR5U2tpbGwoc2tpbGwubmFtZSwgc2tpbGwudmFsdWUsIG9wdGlvbnMpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIExhbmd1YWdlc1xuICAgIGlmICh0eXBlb2YgcGMubGFuZ3VhZ2VzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChjb25zdCBza2lsbCBvZiBwYy5sYW5ndWFnZXMpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbSgnc2tpbGwnLCBza2lsbC5uYW1lLCB7XG4gICAgICAgICAgc291cmNlOiB0aGlzLml0ZW1Mb2NhdGlvbnNcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKHR5cGVvZiBleGlzdGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBjbG9uZWQgPSBleGlzdGluZy50b09iamVjdCgpXG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5iYXNlID0gc2tpbGwudmFsdWVcbiAgICAgICAgICBpdGVtcy5wdXNoKGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGNsb25lZCkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbXMucHVzaChcbiAgICAgICAgICAgIENvQ0FjdG9yLmVtcHR5U2tpbGwoc2tpbGwubmFtZSwgc2tpbGwudmFsdWUsIHtcbiAgICAgICAgICAgICAgaW1nOiBDb0M3SXRlbS5pY29uTGFuZ3VhZ2UsXG4gICAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uOiAnTGFuZ3VhZ2UnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBTcGVsbHNcbiAgICBpZiAodHlwZW9mIHBjLnNwZWxscyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBwYy5zcGVsbHMpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbSgnc3BlbGwnLCBuYW1lLCB7XG4gICAgICAgICAgc291cmNlOiB0aGlzLml0ZW1Mb2NhdGlvbnNcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKHR5cGVvZiBleGlzdGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBjbG9uZWQgPSBleGlzdGluZy50b09iamVjdCgpXG4gICAgICAgICAgaXRlbXMucHVzaChmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShjbG9uZWQpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1zLnB1c2goQ29DQWN0b3IuZW1wdHlTcGVsbChuYW1lKSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlbXNcbiAgfVxuXG4gIC8qKiB3ZWFwb25Ta2lsbCB0cmllcyB0byBndWVzcyB3aGF0IGtpbmQgb2Ygd2VhcG9uIHNraWxsIHRvIHVzZSBmb3Igd2VhcG9uIGZyb20gaXQncyBuYW1lXG4gICAqIEBwYXJhbSB3ZWFwb246IEpTT04sIHdlYXBvbiBkYXRhXG4gICAqL1xuICBhc3luYyB3ZWFwb25Ta2lsbCAod2VhcG9uKSB7XG4gICAgbGV0IHNraWxsID0gbnVsbFxuICAgIGlmICh0aGlzLmdldFJlZ0V4KCdoYW5kZ3VuJykuZXhlYyh3ZWFwb24ubmFtZSkpIHtcbiAgICAgIHNraWxsID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgJ0hhbmRndW4nLCB7XG4gICAgICAgIGNvbWJhdDogdHJ1ZSxcbiAgICAgICAgc291cmNlOiB0aGlzLml0ZW1Mb2NhdGlvbnNcbiAgICAgIH0pXG4gICAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgICBjb25zb2xlLmRlYnVnKGAke3dlYXBvbi5uYW1lfSB1c2VzIEhhbmRndW4gc2tpbGw6ICR7c2tpbGx9YClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0UmVnRXgoJ3JpZmxlJykuZXhlYyh3ZWFwb24ubmFtZSkpIHtcbiAgICAgIHNraWxsID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgJ1JpZmxlL1Nob3RndW4nLCB7XG4gICAgICAgIGNvbWJhdDogdHJ1ZSxcbiAgICAgICAgc291cmNlOiB0aGlzLml0ZW1Mb2NhdGlvbnNcbiAgICAgIH0pXG4gICAgICBpZiAoIXNraWxsKSB7XG4gICAgICAgIHNraWxsID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgJ1JpZmxlJywge1xuICAgICAgICAgIGNvbWJhdDogdHJ1ZSxcbiAgICAgICAgICBzb3VyY2U6IHRoaXMuaXRlbUxvY2F0aW9uc1xuICAgICAgICB9KVxuICAgICAgICBpZiAoIXNraWxsKSB7XG4gICAgICAgICAgc2tpbGwgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbSgnc2tpbGwnLCAnU2hvdGd1bicsIHtcbiAgICAgICAgICAgIGNvbWJhdDogdHJ1ZSxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5pdGVtTG9jYXRpb25zXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgJHt3ZWFwb24ubmFtZX0gdXNlcyBSaWZsZSBza2lsbDogJHtza2lsbH1gKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5nZXRSZWdFeCgnc21iJykuZXhlYyh3ZWFwb24ubmFtZSkpIHtcbiAgICAgIHNraWxsID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgJ1N1Ym1hY2hpbmUgR3VuJywge1xuICAgICAgICBjb21iYXQ6IHRydWUsXG4gICAgICAgIHNvdXJjZTogdGhpcy5pdGVtTG9jYXRpb25zXG4gICAgICB9KVxuICAgICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgJHt3ZWFwb24ubmFtZX0gdXNlcyBTdWJtYWNoaW5lIEd1biBza2lsbDogJHtza2lsbH1gKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5nZXRSZWdFeCgnbWFjaGluZUd1bicpLmV4ZWMod2VhcG9uLm5hbWUpKSB7XG4gICAgICBza2lsbCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ3Vlc3NJdGVtKCdza2lsbCcsICdNYWNoaW5lIEd1bicsIHtcbiAgICAgICAgY29tYmF0OiB0cnVlLFxuICAgICAgICBzb3VyY2U6IHRoaXMuaXRlbUxvY2F0aW9uc1xuICAgICAgfSlcbiAgICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYCR7d2VhcG9uLm5hbWV9IHVzZXMgTWFjaGluZSBHdW4gc2tpbGw6ICR7c2tpbGx9YClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0UmVnRXgoJ2xhdW5jaGVkJykuZXhlYyh3ZWFwb24ubmFtZSkpIHtcbiAgICAgIHNraWxsID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgJ0xhdW5jaCcsIHtcbiAgICAgICAgY29tYmF0OiB0cnVlLFxuICAgICAgICBzb3VyY2U6IHRoaXMuaXRlbUxvY2F0aW9uc1xuICAgICAgfSlcbiAgICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYCR7d2VhcG9uLm5hbWV9IHVzZXMgTGF1bmNoIHNraWxsOiAke3NraWxsfWApXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChza2lsbCAhPT0gbnVsbCAmJiB0eXBlb2Ygc2tpbGwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBza2lsbENsb25lID0gc2tpbGwuY2xvbmUoe1xuICAgICAgICBzeXN0ZW06IHtcbiAgICAgICAgICB2YWx1ZTogd2VhcG9uLnN5c3RlbT8uc2tpbGw/LmlkXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICByZXR1cm4gc2tpbGxDbG9uZVxuICAgIH1cbiAgICBjb25zdCBmaXJlYXJtcyA9IHdlYXBvbi5zeXN0ZW0/LnByb3BlcnRpZXM/LnJuZ2RcbiAgICBjb25zdCBwYXJ0cyA9IENvQzdJdGVtLmdldE5hbWVQYXJ0c1NwZWMoXG4gICAgICB3ZWFwb24ubmFtZSxcbiAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgZmlyZWFybXNcbiAgICAgICAgICA/ICdDb0M3LkZpcmVhcm1TcGVjaWFsaXphdGlvbk5hbWUnXG4gICAgICAgICAgOiAnQ29DNy5GaWdodGluZ1NwZWNpYWxpemF0aW9uTmFtZSdcbiAgICAgIClcbiAgICApXG4gICAgY29uc3QgbmV3U2tpbGwgPSB7XG4gICAgICB0eXBlOiAnc2tpbGwnLFxuICAgICAgbmFtZTogcGFydHMubmFtZSxcbiAgICAgIHN5c3RlbToge1xuICAgICAgICBza2lsbE5hbWU6IHBhcnRzLnNraWxsTmFtZSxcbiAgICAgICAgc3BlY2lhbGl6YXRpb246IHBhcnRzLnNwZWNpYWxpemF0aW9uLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgc3BlY2lhbDogdHJ1ZSxcbiAgICAgICAgICBmaWdodGluZzogIWZpcmVhcm1zLFxuICAgICAgICAgIGZpcmVhcm06IGZpcmVhcm1zLFxuICAgICAgICAgIGNvbWJhdDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBiYXNlOiB3ZWFwb24uc3lzdGVtPy5za2lsbD8uaWQsXG4gICAgICAgIHZhbHVlOiB3ZWFwb24uc3lzdGVtPy5za2lsbD8uaWRcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICAgIGBXZWFwb24gc2tpbGwgbm90IGZvdW5kIGZvciAke3dlYXBvbi5uYW1lfSwgY3JlYXRpbmcgYSBuZXcgb25lYCxcbiAgICAgICAgbmV3U2tpbGxcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIG5ld1NraWxsXG4gIH1cblxuICAvKipcbiAgICogbmVlZHNDb252ZXJzaW9uIGRvZXMgYW4gZXZhbHVhdGlvbiB0byBzZWUgaWYgdGhlIGdpdmVuIG5wYyBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgdG8gN3RoIEVkaXRpb25cbiAgICogUmV0dXJucyBgZmFsc2VgIHdoZW4gYW55IG9mIHRoZSBDaGFyYWN0ZXJpc3RpY3MgdmFsdWUgaXQncyBhYm92ZSAyOVxuICAgKi9cbiAgbmVlZHNDb252ZXJzaW9uIChucGMpIHtcbiAgICBsZXQgbmVlZHNDb252ZXJzaW9uUmVzdWx0ID0gdHJ1ZVxuICAgIGZvciAoY29uc3Qga2V5IG9mIFtcbiAgICAgICdzdHInLFxuICAgICAgJ2NvbicsXG4gICAgICAnc2l6JyxcbiAgICAgICdkZXgnLFxuICAgICAgJ2FwcCcsXG4gICAgICAnaW50JyxcbiAgICAgICdwb3cnLFxuICAgICAgJ2VkdSdcbiAgICBdKSB7XG4gICAgICBpZiAodHlwZW9mIG5wY1trZXldICE9PSAndW5kZWZpbmVkJyAmJiBucGNba2V5XSA+IDMwKSB7XG4gICAgICAgIG5lZWRzQ29udmVyc2lvblJlc3VsdCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCduZWVkc0NvbnZlcnNpb246JywgbmVlZHNDb252ZXJzaW9uUmVzdWx0KVxuICAgIH1cbiAgICByZXR1cm4gbmVlZHNDb252ZXJzaW9uUmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogY3JlYXRlQWN0b3IgbWFpbiBtZXRob2QgdG8gY3JlYXRlIGFuIGBBY3RvcmAgZnJvbSBhIGdpdmUgdXNlciBpbnB1dCwgdGFrZXMgb24gYWNjb3VudCB0aGUgbGFuZywgZW50aXR5IHR5cGUsXG4gICAqIHRoZSBjb252ZXJ0IHRvIDcgRWRpdGlvbiBmbGFnLCBhbmQgdGhlIHJhdyBlbnRpdHkgZGF0YS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0cyBpbnB1dHMgZnJvbSB0aGUgZm9ybSB0byBjcmVhdGUgYW4gQWN0b3JcbiAgICogQHJldHVybnMge0FjdG9yfSB0aGUgZm91bmRyeSBgQWN0b3JgIGZyb20gdGhlIGdpdmVuIGBpbnB1dGAgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgY3JlYXRlQWN0b3IgKGlucHV0cykge1xuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCdjcmVhdGVBY3RvcjonLCBpbnB1dHMpXG4gICAgfVxuICAgIGNvbnN0IGxhbmcgPSBDb0M3QWN0b3JJbXBvcnRlclJlZ0V4cC5jaGVja0xhbmd1YWdlKGlucHV0cy5sYW5nKVxuICAgIHRoaXMua2V5cyA9IENvQzdBY3RvckltcG9ydGVyUmVnRXhwLmdldEtleXMobGFuZylcbiAgICB0aGlzLnJlZ0V4ID0gQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAuZ2V0UmVndWxhckV4cHJlc3Npb25zKGxhbmcpXG4gICAgdGhpcy5pdGVtTG9jYXRpb25zID0gaW5wdXRzLnNvdXJjZVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCdSZWd1bGFyIEV4cHJlc3Npb25zOicsIGxhbmcsIHRoaXMua2V5cywgdGhpcy5yZWdFeClcbiAgICB9XG4gICAgbGV0IGNoYXJhY3RlciA9IGF3YWl0IHRoaXMucGFyc2VDaGFyYWN0ZXIoaW5wdXRzLnRleHQpXG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoJ3BhcnNlQ2hhcmFjdGVyOicsIGNoYXJhY3RlcilcbiAgICB9XG4gICAgaWYgKFxuICAgICAgKGlucHV0cy5jb252ZXJ0RnJvbTZFID09PSAnY29jLWd1ZXNzJyAmJlxuICAgICAgICB0aGlzLm5lZWRzQ29udmVyc2lvbihjaGFyYWN0ZXIpKSB8fFxuICAgICAgaW5wdXRzLmNvbnZlcnRGcm9tNkUgPT09ICdjb2MtY29udmVydCdcbiAgICApIHtcbiAgICAgIGNoYXJhY3RlciA9IGF3YWl0IHRoaXMuY29udmVydDdFKGNoYXJhY3RlcilcbiAgICB9XG4gICAgY29uc3QgY2hhcmFjdGVyRGF0YSA9IHtcbiAgICAgIG5hbWU6IGNoYXJhY3Rlci5uYW1lLFxuICAgICAgYWN0b3I6IHRoaXMuYWN0b3JEYXRhKGNoYXJhY3RlciksXG4gICAgICBpdGVtczogYXdhaXQgdGhpcy5pdGVtc0RhdGEoY2hhcmFjdGVyKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5wdXRzLnRlc3RNb2RlICE9PSAndW5kZWZpbmVkJyAmJiBpbnB1dHMudGVzdE1vZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBjaGFyYWN0ZXJEYXRhXG4gICAgfVxuICAgIGNvbnN0IG5wYyA9IGF3YWl0IHRoaXMuY3JlYXRlRW50aXR5KGNoYXJhY3RlckRhdGEsIGlucHV0cy5lbnRpdHkpXG4gICAgcmV0dXJuIG5wY1xuICB9XG5cbiAgLyoqXG4gICAqIGNvbnZlcnQ3RSBDb252ZXJ0cyB0aGUgZ2l2ZW4gZW50aXR5IGZyb20gNiBlZGl0aW9uIHRvIDcgZWRpdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gdGhlIGVudGl0eSBvYmplY3QgYXMgb2J0YWluZWQgZnJvbSBgcGFyc2VDaGFyYWN0ZXJgXG4gICAqIEByZXR1cm4gdGhlIHNhbWUgb2JqZWN0IGJ1dCB3aXRoIHVwZGF0ZWQgY2hhcmFjdGVyaXN0aWNzIGZvciA3IGVkaXRpb25cbiAgICovXG4gIGFzeW5jIGNvbnZlcnQ3RSAoY3JlYXR1cmUpIHtcbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5kZWJ1ZygnQ29udmVydGluZyBucGMnLCBjcmVhdHVyZSlcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgWydzdHInLCAnY29uJywgJ3NpeicsICdkZXgnLCAnYXBwJywgJ2ludCcsICdwb3cnXSkge1xuICAgICAgaWYgKHR5cGVvZiBjcmVhdHVyZVtrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjcmVhdHVyZVtrZXldICo9IDVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjcmVhdHVyZS5lZHUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoY3JlYXR1cmUuZWR1IDw9IDE4KSB7XG4gICAgICAgIGNyZWF0dXJlLmVkdSAqPSA1XG4gICAgICB9IGVsc2UgaWYgKGNyZWF0dXJlLmVkdSA8PSAyNikge1xuICAgICAgICBjcmVhdHVyZS5lZHUgPSBjcmVhdHVyZS5lZHUgKyA5MCAtIDE4XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjcmVhdHVyZS5lZHUgPj0yOFxuICAgICAgICBjcmVhdHVyZS5lZHUgPSA5OVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNyZWF0dXJlLmRiICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGNyZWF0dXJlLmRiID09PSAnLTFkNCcpIHtcbiAgICAgICAgY3JlYXR1cmUuZGIgPSAtMVxuICAgICAgfSBlbHNlIGlmIChjcmVhdHVyZS5kYiA9PT0gJy0xZDYnKSB7XG4gICAgICAgIGNyZWF0dXJlLmRiID0gLTJcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoJ2NvbnZlcnQ3RTogJywgY3JlYXR1cmUpXG4gICAgfVxuICAgIHJldHVybiBjcmVhdHVyZVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgRmlsZSwgRmlsZVBpY2tlciwgZ2FtZSwgdWkgKi9cbmV4cG9ydCBjbGFzcyBDb0M3RGlyZWN0b3J5UGlja2VyIGV4dGVuZHMgRmlsZVBpY2tlciB7XG4gIGdldCB0aXRsZSAoKSB7XG4gICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5QaWNrRGlyZWN0b3J5JylcbiAgfVxuXG4gIF9vblN1Ym1pdCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgcGF0aCA9IGV2ZW50LnRhcmdldC50YXJnZXQudmFsdWVcbiAgICBjb25zdCBhY3RpdmVTb3VyY2UgPSB0aGlzLmFjdGl2ZVNvdXJjZVxuICAgIGNvbnN0IGJ1Y2tldCA9IGV2ZW50LnRhcmdldC5idWNrZXQgPyBldmVudC50YXJnZXQuYnVja2V0LnZhbHVlIDogbnVsbFxuICAgIHRoaXMuZmllbGQudmFsdWUgPSBDb0M3RGlyZWN0b3J5UGlja2VyLmZvcm1hdCh7XG4gICAgICBhY3RpdmVTb3VyY2UsXG4gICAgICBidWNrZXQsXG4gICAgICBwYXRoXG4gICAgfSlcbiAgICB0aGlzLmNsb3NlKClcbiAgfVxuXG4gIHN0YXRpYyBEZWZhdWx0RGlyZWN0b3J5ICh2YWwpIHtcbiAgICByZXR1cm4gdmFsID09PSBudWxsID8gJycgOiBTdHJpbmcodmFsKVxuICB9XG5cbiAgc3RhdGljIGZvcm1hdCAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuYnVja2V0ICE9PSBudWxsXG4gICAgICA/IGBbJHt2YWx1ZS5hY3RpdmVTb3VyY2V9OiR7dmFsdWUuYnVja2V0fV0gJHt2YWx1ZS5wYXRofWBcbiAgICAgIDogYFske3ZhbHVlLmFjdGl2ZVNvdXJjZX1dICR7dmFsdWUucGF0aH1gXG4gIH1cblxuICBzdGF0aWMgcGFyc2UgKHJhdykge1xuICAgIGNvbnN0IHN0ciA9IHJhdyA/PyAnJ1xuICAgIGNvbnN0IG1hdGNoZXMgPSBzdHIubWF0Y2goL15cXFsoW146XSspKDooLispKT9cXF1cXHMqKC4rKT8kL3UpXG5cbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aXZlU291cmNlOiBtYXRjaGVzWzFdLFxuICAgICAgICBidWNrZXQ6IG1hdGNoZXNbM10gPz8gJycsXG4gICAgICAgIGN1cnJlbnQ6IG1hdGNoZXNbNF1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZVNvdXJjZTogJ2RhdGEnLFxuICAgICAgYnVja2V0OiBudWxsLFxuICAgICAgY3VycmVudDogc3RyXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHByb2Nlc3NIdG1sIChodG1sKSB7XG4gICAgJChodG1sKVxuICAgICAgLmZpbmQoJ2lucHV0W2RhdGEtZHR5cGU9XCJEZWZhdWx0RGlyZWN0b3J5XCJdJylcbiAgICAgIC5lYWNoKChpLCBlbCkgPT4ge1xuICAgICAgICBjb25zdCBpbnB1dCA9ICQoZWwpXG4gICAgICAgIGlucHV0LnByb3AoJ3JlYWRvbmx5JywgdHJ1ZSlcbiAgICAgICAgaWYgKCFpbnB1dC5uZXh0KCkubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgcGlja2VyID0gbmV3IENvQzdEaXJlY3RvcnlQaWNrZXIoe1xuICAgICAgICAgICAgZmllbGQ6IGlucHV0WzBdLFxuICAgICAgICAgICAgLi4uQ29DN0RpcmVjdG9yeVBpY2tlci5wYXJzZShpbnB1dC52YWwoKSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIGNvbnN0IHBpY2tlckJ1dHRvbiA9ICQoXG4gICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJmaWxlLXBpY2tlclwiIHRpdGxlPVwiJyArXG4gICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5QaWNrRGlyZWN0b3J5JykgK1xuICAgICAgICAgICAgICAnXCI+PGkgY2xhc3M9XCJmYXMgZmEtZmlsZS1pbXBvcnQgZmEtZndcIj48L2k+PC9idXR0b24+J1xuICAgICAgICAgIClcbiAgICAgICAgICBDb0M3RGlyZWN0b3J5UGlja2VyLmNyZWF0ZURlZmF1bHREaXJlY3RvcnkoKVxuICAgICAgICAgIHBpY2tlckJ1dHRvbi5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBwaWNrZXIucmVuZGVyKHRydWUpXG4gICAgICAgICAgfSlcbiAgICAgICAgICBpbnB1dC5wYXJlbnQoKS5hcHBlbmQocGlja2VyQnV0dG9uKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgJChodG1sKS5maW5kKCdvbC5maWxlcy1saXN0JykucmVtb3ZlKClcbiAgICAkKGh0bWwpLmZpbmQoJ2Zvb3RlciBkaXYnKS5yZW1vdmUoKVxuICAgICQoaHRtbCkuZmluZCgnZm9vdGVyIGJ1dHRvbicpLnRleHQoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlBpY2tEaXJlY3RvcnknKSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVEZWZhdWx0RGlyZWN0b3J5ICgpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBDb0M3RGlyZWN0b3J5UGlja2VyLnBhcnNlKFxuICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGhvbGVVcGxvYWREaXJlY3RvcnknKVxuICAgIClcbiAgICB0cnkge1xuICAgICAgYXdhaXQgQ29DN0RpcmVjdG9yeVBpY2tlci5jcmVhdGVEaXJlY3RvcnkoXG4gICAgICAgIHBhcnNlZC5hY3RpdmVTb3VyY2UsXG4gICAgICAgIHBhcnNlZC5jdXJyZW50LFxuICAgICAgICB7IGJ1Y2tldDogcGFyc2VkLmJ1Y2tldCB9XG4gICAgICApXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICghZS5tZXNzYWdlLnN0YXJ0c1dpdGgoJ0VFWElTVCcpKSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFjdG9ySW1wb3J0ZXJVcGxvYWRFcnJvcicpXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHVwbG9hZFRvRGVmYXVsdERpcmVjdG9yeSAoZmlsZSwgZmlsZW5hbWUpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBDb0M3RGlyZWN0b3J5UGlja2VyLnBhcnNlKFxuICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGhvbGVVcGxvYWREaXJlY3RvcnknKVxuICAgIClcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEZpbGVQaWNrZXIudXBsb2FkKFxuICAgICAgcGFyc2VkLmFjdGl2ZVNvdXJjZSxcbiAgICAgIHBhcnNlZC5jdXJyZW50LFxuICAgICAgbmV3IEZpbGUoW2ZpbGVdLCBmaWxlbmFtZSwge1xuICAgICAgICB0eXBlOiAnaW1hZ2UvcG5nJ1xuICAgICAgfSksXG4gICAgICB7IGJ1Y2tldDogcGFyc2VkLmJ1Y2tldCB9XG4gICAgKVxuICAgIGlmICghcmVzcG9uc2UucGF0aCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRmlsZVVwbG9hZEVycm9yJykpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZC5jdXJyZW50ICsgJy8nICsgZmlsZW5hbWVcbiAgfVxufVxuIiwiLyogZ2xvYmFsIEFjdG9yLCBDT05GSUcsIGZvdW5kcnksIGdhbWUsIHVpLCBmZXRjaCAqL1xuaW1wb3J0IHsgQ29DQWN0b3IgfSBmcm9tICcuLi9hY3RvcnMvYWN0b3IuanMnXG5pbXBvcnQgeyBDb0M3RGlyZWN0b3J5UGlja2VyIH0gZnJvbSAnLi4vc2NyaXB0cy9jb2M3LWRpcmVjdG9yeS1waWNrZXIuanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuXG4vKipcbiAqIENvQzdBY3RvckltcG9ydGVyIGhlbHBlciBjbGFzcyB0byBpbXBvcnQgYW4gQWN0b3IgZnJvbSB0aGUgcmF3IHRleHQgZGVzY3JpcHRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3RGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXIge1xuICAvKipcbiAgICogQ29tcG9zZSB0aGUgQmFja3N0b3J5IGZyb20gdGhlIGRpZmZlcmVudCBibG9ja3MuXG4gICAqIEBwYXJhbSB7fSBiYWNrc3RvcnlKU09OIERob2xlSG91c2UgYmFja3N0b3J5IEpTT05cbiAgICogQHJldHVybnMgSFRNTCB3aXRoIHRoZSBmb3JtYXR0ZWQgYmFja3N0b3J5XG4gICAqL1xuICBzdGF0aWMgZ2V0QmFja3N0b3J5IChiYWNrc3RvcnlKU09OKSB7XG4gICAgY29uc3Qgc2VjdGlvbnMgPSBbXG4gICAgICBbJ2Rlc2NyaXB0aW9uJywgJ0Rlc2NyaXB0aW9uJ10sXG4gICAgICBbJ3RyYWl0cycsICdUcmFpdHMnXSxcbiAgICAgIFsnaWRlb2xvZ3knLCAnSWRlb2xvZ3knXSxcbiAgICAgIFsnaW5qdXJ1ZXMnLCAnSW5qdXJpZXMnLCAnaW5qdXJpZXMnXSxcbiAgICAgIFsncGVvcGxlJywgJ1Blb3BsZSddLFxuICAgICAgWydwaG9iaWFzJywgJ1Bob2JpYXMnXSxcbiAgICAgIFsnbG9jYXRpb25zJywgJ0xvY2F0aW9ucyddLFxuICAgICAgWyd0b21lcycsICdUb21lcyddLFxuICAgICAgWydwb3NzZXNzaW9ucycsICdQb3NzZXNzaW9ucyddLFxuICAgICAgWydlbmNvdW50ZXJzJywgJ0VuY291bnRlcnMnXVxuICAgIF1cbiAgICBjb25zdCBiYWNrc3RvcnkgPSB7XG4gICAgICBibG9jazogW10sXG4gICAgICBzZWN0aW9uczogW11cbiAgICB9XG4gICAgZm9yIChjb25zdCBzZWN0aW9uIG9mIHNlY3Rpb25zKSB7XG4gICAgICBpZiAoYmFja3N0b3J5SlNPTltzZWN0aW9uWzBdXSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIHNlY3Rpb25bMl0gPT09ICd1bmRlZmluZWQnIHx8IHNlY3Rpb25bMl0gPT09ICcnKSB7XG4gICAgICAgICAgc2VjdGlvblsyXSA9IHNlY3Rpb25bMF1cbiAgICAgICAgfVxuICAgICAgICBiYWNrc3RvcnkuYmxvY2sucHVzaChcbiAgICAgICAgICBgPGgzPiR7c2VjdGlvblsxXX08L2gzPlxcbjxkaXYgY2xhc3M9XCIke3NlY3Rpb25bMl19XCI+XFxuJHtcbiAgICAgICAgICAgIGJhY2tzdG9yeUpTT05bc2VjdGlvblswXV1cbiAgICAgICAgICB9XFxuPC9kaXY+YFxuICAgICAgICApXG4gICAgICAgIGJhY2tzdG9yeS5zZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICB0aXRsZTogc2VjdGlvblsxXSxcbiAgICAgICAgICB2YWx1ZTogYmFja3N0b3J5SlNPTltzZWN0aW9uWzBdXVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICBiYWNrc3RvcnkuYmxvY2sgPVxuICAgICAgJzxoMj5CYWNrc3Rvcnk8L2gyPlxcbicgKyBiYWNrc3RvcnkuYmxvY2suam9pbignXFxuJywgYmFja3N0b3J5LmJsb2NrKVxuICAgIHJldHVybiBiYWNrc3RvcnlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0pTT059IGRob2xlSG91c2VEYXRhIERob2xlSG91c2VKU09OXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgY29udmVydERob2xlSG91c2VDaGFyYWN0ZXJEYXRhIChkaG9sZUhvdXNlRGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmxvZygnU291cmNlOicsIGRob2xlSG91c2VEYXRhKVxuICAgIH1cbiAgICBkaG9sZUhvdXNlRGF0YSA9IGRob2xlSG91c2VEYXRhLkludmVzdGlnYXRvclxuICAgIGNvbnN0IGJhY2tzdG9yaWVzID0gQ29DN0Rob2xlSG91c2VBY3RvckltcG9ydGVyLmdldEJhY2tzdG9yeShcbiAgICAgIGRob2xlSG91c2VEYXRhLkJhY2tzdG9yeVxuICAgIClcbiAgICBjb25zdCBjRGF0YSA9IHtcbiAgICAgIG5hbWU6IGRob2xlSG91c2VEYXRhLlBlcnNvbmFsRGV0YWlscy5OYW1lLFxuICAgICAgYWN0b3I6IHtcbiAgICAgICAgY2hhcmFjdGVyaXN0aWNzOiB7XG4gICAgICAgICAgc3RyOiB7IHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuU1RSLCAxMCkgfSxcbiAgICAgICAgICBjb246IHsgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5DT04sIDEwKSB9LFxuICAgICAgICAgIHNpejogeyB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLlNJWiwgMTApIH0sXG4gICAgICAgICAgZGV4OiB7IHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuREVYLCAxMCkgfSxcbiAgICAgICAgICBhcHA6IHsgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5BUFAsIDEwKSB9LFxuICAgICAgICAgIGludDogeyB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLklOVCwgMTApIH0sXG4gICAgICAgICAgcG93OiB7IHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuUE9XLCAxMCkgfSxcbiAgICAgICAgICBlZHU6IHsgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5FRFUsIDEwKSB9XG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnM6IHtcbiAgICAgICAgICBzYW46IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuU2FuaXR5LCAxMCksXG4gICAgICAgICAgICBtYXg6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5TYW5pdHlNYXgsIDEwKSxcbiAgICAgICAgICAgIGRhaWx5TGltaXQ6IE1hdGguZmxvb3IoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLlNhbml0eSAvIDUpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBocDoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5IaXRQdHMsIDEwKSxcbiAgICAgICAgICAgIG1heDogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLkhpdFB0c01heCwgMTApXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtcDoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5NYWdpY1B0cywgMTApLFxuICAgICAgICAgICAgbWF4OiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuTWFnaWNQdHNNYXgsIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGNrOiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLkx1Y2ssIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbW92OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLk1vdmUsIDEwKSxcbiAgICAgICAgICAgIG1heDogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLk1vdmUsIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGI6IHsgdmFsdWU6IGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5EYW1hZ2VCb251cyB9LFxuICAgICAgICAgIGJ1aWxkOiB7IHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuQnVpbGQsIDEwKSB9XG4gICAgICAgIH0sXG4gICAgICAgIGluZm9zOiB7XG4gICAgICAgICAgb2NjdXBhdGlvbjogZGhvbGVIb3VzZURhdGEuUGVyc29uYWxEZXRhaWxzLk9jY3VwYXRpb24sXG4gICAgICAgICAgYWdlOiBkaG9sZUhvdXNlRGF0YS5QZXJzb25hbERldGFpbHMuQWdlLFxuICAgICAgICAgIHNleDogZGhvbGVIb3VzZURhdGEuUGVyc29uYWxEZXRhaWxzLkdlbmRlcixcbiAgICAgICAgICByZXNpZGVuY2U6IGRob2xlSG91c2VEYXRhLlBlcnNvbmFsRGV0YWlscy5SZXNpZGVuY2UsXG4gICAgICAgICAgYmlydGhwbGFjZTogZGhvbGVIb3VzZURhdGEuUGVyc29uYWxEZXRhaWxzLkJpcnRocGxhY2VcbiAgICAgICAgfSxcbiAgICAgICAgYmFja3N0b3J5OiBiYWNrc3Rvcmllcy5ibG9jayxcbiAgICAgICAgYmlvZ3JhcGh5OiBiYWNrc3Rvcmllcy5zZWN0aW9ucyxcbiAgICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgICBrZWVwZXI6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5EaG9sZUhvdXNlQWN0b3JJbXBvcnRlclNvdXJjZScpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBza2lsbHM6IGF3YWl0IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlci5leHRyYWN0U2tpbGxzKFxuICAgICAgICBkaG9sZUhvdXNlRGF0YS5Ta2lsbHMuU2tpbGwgPz8gW10sXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICksXG4gICAgICBwb3NzZXNpb25zOiBhd2FpdCBDb0M3RGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXIuZXh0cmFjdFBvc3Nlc3Npb25zKFxuICAgICAgICBkaG9sZUhvdXNlRGF0YS5Qb3NzZXNzaW9ucz8uaXRlbSA/PyBbXSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gY0RhdGFcbiAgfVxuXG4gIHN0YXRpYyBtYWtlU2tpbGxOYW1lIChuYW1lLCBzcGVjaWFsaXphdGlvbikge1xuICAgIGlmIChzcGVjaWFsaXphdGlvbiA9PT0gJ05vbmUnKSB7XG4gICAgICBzcGVjaWFsaXphdGlvbiA9ICdBbnknXG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnTGFuZ3VhZ2UgKE90aGVyKScgfHwgbmFtZSA9PT0gJ0xhbmd1YWdlIChPd24pJykge1xuICAgICAgbmFtZSA9ICdMYW5ndWFnZSdcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdPcGVyYXRlIEhlYXZ5IE1hY2hpbmUnKSB7XG4gICAgICBuYW1lID0gJ09wZXJhdGUgSGVhdnkgTWFjaGluZXJ5J1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ1Rocm93JyAmJiBzcGVjaWFsaXphdGlvbiA9PT0gJycpIHtcbiAgICAgIG5hbWUgPSAnRmlnaHRpbmcnXG4gICAgICBzcGVjaWFsaXphdGlvbiA9ICdUaHJvdydcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHNraWxsTmFtZTogc3BlY2lhbGl6YXRpb24gPT09ICcnID8gbmFtZSA6IHNwZWNpYWxpemF0aW9uLFxuICAgICAgc3BlY2lhbGl6YXRpb246IHNwZWNpYWxpemF0aW9uID09PSAnJyA/ICcnIDogbmFtZSxcbiAgICAgIG5hbWU6IG5hbWUgKyAoc3BlY2lhbGl6YXRpb24gPT09ICcnID8gJycgOiAnICgnICsgc3BlY2lhbGl6YXRpb24gKyAnKScpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGV4dHJhY3RTa2lsbHMgKGRob2xlSG91c2Vza2lsbHMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBza2lsbHMgPSBbXVxuICAgIGZvciAoY29uc3Qgc2tpbGwgb2YgZGhvbGVIb3VzZXNraWxscykge1xuICAgICAgaWYgKFxuICAgICAgICBza2lsbC5zdWJza2lsbCA9PT0gJ05vbmUnICYmXG4gICAgICAgIHNraWxsLnZhbHVlID09PSAnMScgJiZcbiAgICAgICAgc2tpbGwuaGFsZiA9PT0gJzAnICYmXG4gICAgICAgIHNraWxsLmZpZnRoID09PSAnMCdcbiAgICAgICkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgY29uc3QgcGFydHMgPSBDb0M3RGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXIubWFrZVNraWxsTmFtZShcbiAgICAgICAgc2tpbGwubmFtZSxcbiAgICAgICAgc2tpbGwuc3Vic2tpbGwgPz8gJydcbiAgICAgIClcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgcGFydHMubmFtZSwge1xuICAgICAgICBzb3VyY2U6IG9wdGlvbnMuc291cmNlLFxuICAgICAgICBmYWxsYmFja0FueTogdHJ1ZVxuICAgICAgfSlcbiAgICAgIGxldCBjbG9uZWQgPSBudWxsXG4gICAgICBpZiAodHlwZW9mIGV4aXN0aW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjbG9uZWQgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShleGlzdGluZy50b09iamVjdCgpKVxuICAgICAgICBjbG9uZWQubmFtZSA9IHBhcnRzLm5hbWVcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5za2lsbE5hbWUgPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9IHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZWQgPSBDb0NBY3Rvci5lbXB0eVNraWxsKFxuICAgICAgICAgIHBhcnRzLnNraWxsTmFtZSxcbiAgICAgICAgICBwYXJzZUludChza2lsbC52YWx1ZSA/PyAwLCAxMCksXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3BlY2lhbGl6YXRpb246XG4gICAgICAgICAgICAgIHBhcnRzLnNwZWNpYWxpemF0aW9uID09PSAnJyA/IGZhbHNlIDogcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzID0gY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzID8/IHt9XG4gICAgICAgIGlmIChwYXJ0cy5zcGVjaWFsaXphdGlvbiA9PT0gJ0ZpZ2h0aW5nJykge1xuICAgICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5maWdodGluZyA9IHRydWVcbiAgICAgICAgICBjbG9uZWQuc3lzdGVtLnByb3BlcnRpZXMuY29tYmF0ID0gdHJ1ZVxuICAgICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5wdXNoID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIGlmIChwYXJ0cy5zcGVjaWFsaXphdGlvbiA9PT0gJ0ZpcmVhcm1zJykge1xuICAgICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtID0gdHJ1ZVxuICAgICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQgPSB0cnVlXG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLnB1c2ggPSBmYWxzZVxuICAgICAgICB9IGVsc2UgaWYgKHBhcnRzLnNraWxsTmFtZSA9PT0gJ0RvZGdlJykge1xuICAgICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5wdXNoID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNsb25lZC5zeXN0ZW0uc2tpbGxOYW1lID09PSAnQW55Jykge1xuICAgICAgICBjbG9uZWQubmFtZSA9IGNsb25lZC5uYW1lLnJlcGxhY2UoJyAoQW55KScsICcgKE5vbmUpJylcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5za2lsbE5hbWUgPSAnTm9uZSdcbiAgICAgIH1cbiAgICAgIGNsb25lZC5zeXN0ZW0uYmFzZSA9IHBhcnNlSW50KHNraWxsLnZhbHVlID8/IDAsIDEwKVxuICAgICAgY2xvbmVkLnN5c3RlbS52YWx1ZSA9IHBhcnNlSW50KHNraWxsLnZhbHVlID8/IDAsIDEwKVxuICAgICAgY2xvbmVkLnN5c3RlbS5mbGFncyA9IGNsb25lZC5zeXN0ZW0uZmxhZ3MgPz8ge31cbiAgICAgIGNsb25lZC5zeXN0ZW0uZmxhZ3Mub2NjdXBhdGlvbiA9XG4gICAgICAgIHNraWxsLm9jY3VwYXRpb24gPT09IHRydWUgfHwgc2tpbGwub2NjdXBhdGlvbiA9PT0gJ3RydWUnXG4gICAgICBza2lsbHMucHVzaChjbG9uZWQpXG4gICAgfVxuICAgIHJldHVybiBza2lsbHNcbiAgfVxuXG4gIHN0YXRpYyBmaW5kV2VhcG9uU2tpbGxJZCAoc2tpbGxOYW1lLCBjaGFyYWN0ZXIpIHtcbiAgICBjb25zdCBza2lsbHMgPSBjaGFyYWN0ZXIuZ2V0RW1iZWRkZWRDb2xsZWN0aW9uKCdJdGVtJylcbiAgICBjb25zdCBjaGVja05hbWUgPSBza2lsbE5hbWUucmVwbGFjZSgvXlxcKCguKylcXCkkLywgJyQxJylcbiAgICBjb25zdCBjaGFyYWN0ZXJTa2lsbCA9IHNraWxscy5maW5kKGkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgaS5zeXN0ZW0/LnNraWxsTmFtZSA9PT0gY2hlY2tOYW1lIHx8XG4gICAgICAgIGkuc3lzdGVtPy5za2lsbE5hbWU/LmluZGV4T2YoY2hlY2tOYW1lKSA+IC0xXG4gICAgICApXG4gICAgfSlcbiAgICByZXR1cm4gY2hhcmFjdGVyU2tpbGxcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBleHRyYWN0UG9zc2Vzc2lvbnMgKGRob2xlaG91c2VQb3NzZXNzaW9ucywgb3B0aW9ucykge1xuICAgIGNvbnN0IGl0ZW1zID0gW11cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGhvbGVob3VzZVBvc3Nlc3Npb25zKSAmJiBkaG9sZWhvdXNlUG9zc2Vzc2lvbnMgIT0gbnVsbCkge1xuICAgICAgZGhvbGVob3VzZVBvc3Nlc3Npb25zID0gW2Rob2xlaG91c2VQb3NzZXNzaW9uc11cbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGRob2xlaG91c2VQb3NzZXNzaW9ucykge1xuICAgICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbSgnaXRlbScsIGl0ZW0uZGVzY3JpcHRpb24sIHtcbiAgICAgICAgc291cmNlOiBvcHRpb25zLnNvdXJjZVxuICAgICAgfSlcbiAgICAgIGxldCBjbG9uZWQgPSBudWxsXG4gICAgICBpZiAodHlwZW9mIGV4aXN0aW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjbG9uZWQgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShleGlzdGluZy50b09iamVjdCgpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvbmVkID0ge1xuICAgICAgICAgIG5hbWU6IGl0ZW0uZGVzY3JpcHRpb24sXG4gICAgICAgICAgdHlwZTogJ2l0ZW0nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0ZW1zLnB1c2goY2xvbmVkKVxuICAgIH1cbiAgICByZXR1cm4gaXRlbXNcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBleHRyYWN0V2VhcG9ucyAoZGhvbGVob3VzZVdlYXBvbnMsIGNoYXJhY3Rlciwgb3B0aW9ucykge1xuICAgIGNvbnN0IHdlYXBvbnMgPSBbXVxuICAgIGlmICghQXJyYXkuaXNBcnJheShkaG9sZWhvdXNlV2VhcG9ucykpIHtcbiAgICAgIGRob2xlaG91c2VXZWFwb25zID0gW2Rob2xlaG91c2VXZWFwb25zXVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHdlYXBvbiBvZiBkaG9sZWhvdXNlV2VhcG9ucykge1xuICAgICAgY29uc3Qgc2tpbGwgPSBDb0M3RGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXIuZmluZFdlYXBvblNraWxsSWQoXG4gICAgICAgIHdlYXBvbi5za2lsbG5hbWUsXG4gICAgICAgIGNoYXJhY3RlclxuICAgICAgKVxuICAgICAgY29uc3QgZGFtYWdlID0gd2VhcG9uLmRhbWFnZS5yZXBsYWNlKC9cXCtEQi9pLCAnJylcbiAgICAgIGNvbnN0IGFkZGIgPSBkYW1hZ2UgIT09IHdlYXBvbi5kYW1hZ2VcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3dlYXBvbicsIHdlYXBvbi5uYW1lLCB7XG4gICAgICAgIHNvdXJjZTogb3B0aW9ucy5zb3VyY2VcbiAgICAgIH0pXG4gICAgICBsZXQgY2xvbmVkID0gbnVsbFxuICAgICAgaWYgKHR5cGVvZiBleGlzdGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2xvbmVkID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoZXhpc3RpbmcudG9PYmplY3QoKSlcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5za2lsbC5tYWluLm5hbWUgPSBza2lsbD8ubmFtZSA/PyAnJ1xuICAgICAgICBjbG9uZWQuc3lzdGVtLnNraWxsLm1haW4uaWQgPSBza2lsbD8uaWQgPz8gJydcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5yYW5nZSA9IGNsb25lZC5zeXN0ZW0ucmFuZ2UgPz8ge31cbiAgICAgICAgY2xvbmVkLnN5c3RlbS5yYW5nZS5ub3JtYWwgPSBjbG9uZWQuc3lzdGVtLnJhbmdlLm5vcm1hbCA/PyB7fVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnJhbmdlLm5vcm1hbC5kYW1hZ2UgPSBkYW1hZ2VcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5hbW1vID0gd2VhcG9uLmFtbW9cbiAgICAgICAgY2xvbmVkLnN5c3RlbS5tYWxmdW5jdGlvbiA9IHdlYXBvbi5tYWxmXG4gICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcyA9IGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcyA/PyB7fVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnByb3BlcnRpZXMubWVsZWUgPVxuICAgICAgICAgIHNraWxsPy5zeXN0ZW0ucHJvcGVydGllcz8uZmlnaHRpbmcgPz8gZmFsc2VcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QgPVxuICAgICAgICAgIHNraWxsPy5zeXN0ZW0ucHJvcGVydGllcz8uZmlyZWFybSA/PyBmYWxzZVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnByb3BlcnRpZXMuYWRkYiA9IGFkZGJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb25lZCA9IHtcbiAgICAgICAgICBuYW1lOiB3ZWFwb24ubmFtZSxcbiAgICAgICAgICB0eXBlOiAnd2VhcG9uJyxcbiAgICAgICAgICBzeXN0ZW06IHtcbiAgICAgICAgICAgIHNraWxsOiB7XG4gICAgICAgICAgICAgIG1haW46IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBza2lsbD8ubmFtZSA/PyAnJyxcbiAgICAgICAgICAgICAgICBpZDogc2tpbGw/LmlkID8/ICcnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICBkYW1hZ2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFtbW86IHdlYXBvbi5hbW1vLFxuICAgICAgICAgICAgbWFsZnVuY3Rpb246IHdlYXBvbi5tYWxmLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICBtZWxlZTogc2tpbGw/LnN5c3RlbS5wcm9wZXJ0aWVzPy5maWdodGluZyA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgcm5nZDogc2tpbGw/LnN5c3RlbS5wcm9wZXJ0aWVzPy5maXJlYXJtID8/IGZhbHNlLFxuICAgICAgICAgICAgICBhZGRiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3ZWFwb25zLnB1c2goY2xvbmVkKVxuICAgIH1cbiAgICByZXR1cm4gd2VhcG9uc1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNhdmVQb3J0cmFpdCAoYmFzZTY0UG9ydHJhaXQsIGZpbGVOYW1lKSB7XG4gICAgY29uc3QgYmFzZTY0UmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIGJhc2U2NFBvcnRyYWl0XG4gICAgKVxuICAgIGNvbnN0IGltYWdlQmxvYiA9IGF3YWl0IGJhc2U2NFJlc3BvbnNlLmJsb2IoKVxuICAgIGNvbnN0IGZpbGVQYXRoID0gQ29DN0RpcmVjdG9yeVBpY2tlci51cGxvYWRUb0RlZmF1bHREaXJlY3RvcnkoXG4gICAgICBpbWFnZUJsb2IsXG4gICAgICBmaWxlTmFtZVxuICAgIClcbiAgICByZXR1cm4gZmlsZVBhdGhcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVOUENGcm9tRGhvbGVIb3VzZSAoZGhvbGVIb3VzZUNoYXJhY3RlckRhdGEsIG9wdGlvbnMpIHtcbiAgICBpZiAoIWdhbWUudXNlcj8uY2FuKCdGSUxFU19VUExPQUQnKSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFjdG9ySW1wb3J0ZXJVcGxvYWRFcnJvcicpXG4gICAgICApXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgY29uc3QgY2hhcmFjdGVyRGF0YSA9XG4gICAgICBhd2FpdCBDb0M3RGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXIuY29udmVydERob2xlSG91c2VDaGFyYWN0ZXJEYXRhKFxuICAgICAgICBkaG9sZUhvdXNlQ2hhcmFjdGVyRGF0YSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmxvZygnQ2hhcmFjdGVyIERhdGE6JywgY2hhcmFjdGVyRGF0YSlcbiAgICB9XG4gICAgY29uc3QgaW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyID1cbiAgICAgIGF3YWl0IENvQzdVdGlsaXRpZXMuY3JlYXRlSW1wb3J0Q2hhcmFjdGVyc0ZvbGRlcklmTm90RXhpc3RzKClcbiAgICBpZiAoIUNvQzdEaXJlY3RvcnlQaWNrZXIuY3JlYXRlRGVmYXVsdERpcmVjdG9yeSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgY29uc3QgYWN0b3JEYXRhID0ge1xuICAgICAgbmFtZTogY2hhcmFjdGVyRGF0YS5uYW1lLFxuICAgICAgdHlwZTogJ2NoYXJhY3RlcicsXG4gICAgICBmb2xkZXI6IGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlci5pZCxcbiAgICAgIGRhdGE6IGNoYXJhY3RlckRhdGEuYWN0b3JcbiAgICB9XG4gICAgY29uc3QgbnBjID0gYXdhaXQgQWN0b3IuY3JlYXRlKGFjdG9yRGF0YSlcbiAgICAvLyBJZiBwb3NzaWJsZSB1cGxvYWQgdGhlIGltYWdlIHBvcnRyYWl0XG4gICAgaWYgKFxuICAgICAgZGhvbGVIb3VzZUNoYXJhY3RlckRhdGEuSW52ZXN0aWdhdG9yLlBlcnNvbmFsRGV0YWlscy5Qb3J0cmFpdD8ubGVuZ3RoID4gMTBcbiAgICApIHtcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gJ2F2YXRhci0nICsgbnBjLmlkICsgJy5wbmcnXG4gICAgICBjb25zdCBwb3J0cmFpdCA9IGF3YWl0IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlci5zYXZlUG9ydHJhaXQoXG4gICAgICAgIGRob2xlSG91c2VDaGFyYWN0ZXJEYXRhLkludmVzdGlnYXRvci5QZXJzb25hbERldGFpbHMuUG9ydHJhaXQsXG4gICAgICAgIGZpbGVOYW1lXG4gICAgICApXG4gICAgICBpZiAocG9ydHJhaXQgIT09IGZhbHNlKSB7XG4gICAgICAgIG5wYy51cGRhdGUoe1xuICAgICAgICAgIGltZzogcG9ydHJhaXRcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdJdGVtczogJywgY2hhcmFjdGVyRGF0YS5pdGVtcylcbiAgICB9XG4gICAgYXdhaXQgbnBjLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgY2hhcmFjdGVyRGF0YS5za2lsbHMsIHtcbiAgICAgIHJlbmRlclNoZWV0OiBmYWxzZVxuICAgIH0pXG4gICAgYXdhaXQgbnBjLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgY2hhcmFjdGVyRGF0YS5wb3NzZXNpb25zLCB7XG4gICAgICByZW5kZXJTaGVldDogZmFsc2VcbiAgICB9KVxuICAgIGNvbnN0IHdlYXBvbnMgPSBhd2FpdCBDb0M3RGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXIuZXh0cmFjdFdlYXBvbnMoXG4gICAgICBkaG9sZUhvdXNlQ2hhcmFjdGVyRGF0YS5JbnZlc3RpZ2F0b3IuV2VhcG9ucz8ud2VhcG9uID8/IFtdLFxuICAgICAgbnBjLFxuICAgICAgb3B0aW9uc1xuICAgIClcbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5sb2coJ1dlYXBvbnM6ICcsIHdlYXBvbnMpXG4gICAgfVxuICAgIGF3YWl0IG5wYy5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIHdlYXBvbnMsIHtcbiAgICAgIHJlbmRlclNoZWV0OiBmYWxzZVxuICAgIH0pXG5cbiAgICByZXR1cm4gbnBjXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBDT05GSUcsIEZvcm1BcHBsaWNhdGlvbiwgZm91bmRyeSwgZ2FtZSwgSG9va3MsIHVpLCBGaWxlUmVhZGVyICovXG5cbmltcG9ydCB7IENvQzdBY3RvckltcG9ydGVyIH0gZnJvbSAnLi9hY3Rvci1pbXBvcnRlci5qcydcbmltcG9ydCB7IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlciB9IGZyb20gJy4vZGhvbGVob3VzZV9pbXBvcnRlci5qcydcbmltcG9ydCB7IENvQzdBY3RvckltcG9ydGVyUmVnRXhwIH0gZnJvbSAnLi9hY3Rvci1pbXBvcnRlci1yZWdleHAuanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN0FjdG9ySW1wb3J0ZXJEaWFsb2cgZXh0ZW5kcyBGb3JtQXBwbGljYXRpb24ge1xuICAvKiogQG92ZXJyaWRlICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnZGlhbG9nJywgJ2FjdG9yLWltcG9ydGVyJ10sXG4gICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFjdG9ySW1wb3J0ZXInKSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2FjdG9yLWltcG9ydGVyLmh0bWwnLFxuICAgICAgY2xvc2VPblN1Ym1pdDogZmFsc2UsXG4gICAgICB3aWR0aDogNjAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICB9KVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBkYXRhLmltcG9ydFR5cGUgPSBkYXRhLm9iamVjdC5pbXBvcnRUeXBlXG4gICAgZGF0YS5jb252ZXJ0NkUgPSBkYXRhLm9iamVjdC5jb252ZXJ0NkVcbiAgICBkYXRhLnNvdXJjZSA9IGRhdGEub2JqZWN0LnNvdXJjZVxuICAgIGRhdGEuY2hhcmFjdGVyRGF0YSA9IGRhdGEub2JqZWN0LmNoYXJhY3RlckRhdGFcbiAgICBkYXRhLmNhblVwbG9hZCA9IGdhbWUudXNlcj8uY2FuKCdGSUxFU19VUExPQUQnKVxuICAgIGlmIChbJ25wYycsICdjcmVhdHVyZSddLmluY2x1ZGVzKGRhdGEuaW1wb3J0VHlwZSkpIHtcbiAgICAgIGRhdGEubGFuZ3VhZ2VzID0gQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAuZ2V0VHJhbnNsYXRpb25zKClcbiAgICAgIGRhdGEubGFuZ3VhZ2UgPSBDb0M3QWN0b3JJbXBvcnRlclJlZ0V4cC5jaGVja0xhbmd1YWdlKFxuICAgICAgICBkYXRhLm9iamVjdC5sYW5ndWFnZVxuICAgICAgKVxuICAgICAgZGF0YS5wbGFjZWhvbGRlciA9IENvQzdBY3RvckltcG9ydGVyUmVnRXhwLmdldEV4YW1wbGVUZXh0KGRhdGEubGFuZ3VhZ2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWwuZmluZCgnI2Rob2xlaG91c2UtY2hhcmFjdGVyLXByZXZpZXcnKS5oaWRlKClcbiAgICBodG1sXG4gICAgICAuZmluZCgnI2NvYy1lbnRpdHktdHlwZSwjY29jLWVudGl0eS1sYW5nJylcbiAgICAgIC5jaGFuZ2UodGhpcy5fb25DaGFuZ2VTdWJtaXQuYmluZCh0aGlzKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnI2Rob2xlaG91c2UtanNvbi1maWxlLXBpY2tlcicpXG4gICAgICAuY2hhbmdlKHRoaXMuX29uSlNPTkZpbGVTZWxlY3RlZC5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJyNjb2MtcGFzdGVkLWNoYXJhY3Rlci1kYXRhJylcbiAgICAgIC5vbigna2V5dXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJzVG9vRXh0ZW5kZWQgPSAkKHRoaXMpXG4gICAgICAgICAgLnZhbCgpXG4gICAgICAgICAgLm1hdGNoKC9bXFx1ZGJjMC1cXHVkYmZlXVtcXHVkYzAwLVxcdWRmZmZdLylcbiAgICAgICAgY29uc3QgcHJvbXB0ID0gJCgnI2NvYy1wcm9tcHQnKVxuICAgICAgICBpZiAocHJvbXB0LmRhdGEoJ2V4dGVuZGVkJykgJiYgY2hhcmFjdGVyc1Rvb0V4dGVuZGVkKSB7XG4gICAgICAgICAgcHJvbXB0XG4gICAgICAgICAgICAuaHRtbChnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVGV4dEZpZWxkSW52YWxpZENoYXJhY3RlcnMnKSlcbiAgICAgICAgICAgIC5hZGRDbGFzcygnZXJyb3InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb21wdC5odG1sKHByb21wdC5kYXRhKCd0ZXh0JykpLnJlbW92ZUNsYXNzKCdlcnJvcicpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudHJpZ2dlcigna2V5dXAnKVxuXG4gICAgaHRtbC5maW5kKCcuc3VibWl0LWJ1dHRvbicpLmNsaWNrKHRoaXMuX29uQ2xpY2tTdWJtaXQuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJ2Zvcm0nKS5zdWJtaXQoZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIGdldElucHV0cyBleHRyYWN0cyB0aGUgZGF0YSBmcm9tIHRoZSBpbnB1dCBmaWVsZHMgYW5kXG4gICAqIGFkZHMgYSBgLmAgYXQgdGhlIGVuZCBpZiBpdCdzIG5vdCBhbHJlYWR5IHRoZXJlLlxuICAgKi9cbiAgc3RhdGljIGdldElucHV0cyAoZm9ybSkge1xuICAgIGNvbnN0IGlucHV0cyA9IHt9XG4gICAgaW5wdXRzLmVudGl0eSA9IGZvcm0uZmluZCgnI2NvYy1lbnRpdHktdHlwZScpLnZhbCgpLnRyaW0oKVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCdlbnRpdHkgdHlwZTonLCBpbnB1dHMuZW50aXR5KVxuICAgIH1cbiAgICBpZiAoZm9ybS5maW5kKCcjY29jLWNvbnZlcnQtNkUnKS5sZW5ndGggPiAwKSB7XG4gICAgICBpbnB1dHMuY29udmVydEZyb202RSA9IGZvcm0uZmluZCgnI2NvYy1jb252ZXJ0LTZFJykudmFsKCkudHJpbSgpXG4gICAgfVxuICAgIGlmIChmb3JtLmZpbmQoJyNjb2MtZW50aXR5LWxhbmcnKS5sZW5ndGggPiAwKSB7XG4gICAgICBpbnB1dHMubGFuZyA9IENvQzdBY3RvckltcG9ydGVyUmVnRXhwLmNoZWNrTGFuZ3VhZ2UoXG4gICAgICAgIGZvcm0uZmluZCgnI2NvYy1lbnRpdHktbGFuZycpLnZhbCgpLnRyaW0oKVxuICAgICAgKVxuICAgIH1cbiAgICBpZiAoZm9ybS5maW5kKCcjc291cmNlJykubGVuZ3RoID4gMCkge1xuICAgICAgaW5wdXRzLnNvdXJjZSA9IGZvcm0uZmluZCgnI3NvdXJjZScpLnZhbCgpLnRyaW0oKVxuICAgIH1cbiAgICBpZiAoZm9ybS5maW5kKCcjY29jLXBhc3RlZC1jaGFyYWN0ZXItZGF0YScpLmxlbmd0aCA+IDApIHtcbiAgICAgIGlucHV0cy50ZXh0ID0gZm9ybS5maW5kKCcjY29jLXBhc3RlZC1jaGFyYWN0ZXItZGF0YScpLnZhbCgpLnRyaW0oKVxuICAgIH1cblxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCdyZWNlaXZlZCB0ZXh0JywgJyMjJyArIGlucHV0cy50ZXh0ICsgJyMjJylcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0c1xuICB9XG5cbiAgX29uSlNPTkZpbGVTZWxlY3RlZCAoZXZlbnQpIHtcbiAgICBjb25zdCBqc29uRmlsZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rob2xlaG91c2UtanNvbi1maWxlLXBpY2tlcicpXG4gICAgY29uc3QgcG9ydHJhaXRJbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgJ2Rob2xlaG91c2UtY2hhcmFjdGVyLXBvcnRyYWl0J1xuICAgIClcbiAgICBjb25zdCBjaGFyYWN0ZXJOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rob2xlaG91c2UtY2hhcmFjdGVyLW5hbWUnKVxuICAgIGNvbnN0IHByZXZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGhvbGVob3VzZS1jaGFyYWN0ZXItcHJldmlldycpXG4gICAgY29uc3QgZmlsZSA9IGpzb25GaWxlSW5wdXQuZmlsZXNbMF1cbiAgICBjb25zdCBkaWFsb2cgPSB0aGlzXG4gICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkaWFsb2cuY2hhcmFjdGVySlNPTiA9IEpTT04ucGFyc2UoZmlsZVJlYWRlci5yZXN1bHQpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICQoJyNjb2MtcHJvbXB0JylcbiAgICAgICAgICAuaHRtbChnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVGV4dEZpZWxkSW52YWxpZEpTT04nKSlcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2Vycm9yJylcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IHBlcnNvbmFsRGV0YWlscyA9XG4gICAgICAgIGRpYWxvZy5jaGFyYWN0ZXJKU09OPy5JbnZlc3RpZ2F0b3I/LlBlcnNvbmFsRGV0YWlsc1xuICAgICAgaWYgKCFwZXJzb25hbERldGFpbHMpIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRGhvbGVIb3VzZUludmFsaWRBY3RvcicpXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjaGFyYWN0ZXJOYW1lLnRleHRDb250ZW50ID0gcGVyc29uYWxEZXRhaWxzLk5hbWVcbiAgICAgIHBvcnRyYWl0SW1hZ2Uuc3JjID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnICsgcGVyc29uYWxEZXRhaWxzLlBvcnRyYWl0XG4gICAgICBwcmV2aWV3LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgICAkKCcuZGlhbG9nLmFjdG9yLWltcG9ydGVyJykuaGVpZ2h0KCdhdXRvJylcbiAgICB9XG4gICAgZmlsZVJlYWRlci5yZWFkQXNUZXh0KGZpbGUpXG4gIH1cblxuICBfb25DaGFuZ2VTdWJtaXQgKGV2ZW50KSB7XG4gICAgdGhpcy5fb25TdWJtaXQoZXZlbnQpXG4gIH1cblxuICBhc3luYyBfb25DbGlja1N1Ym1pdCAoZXZlbnQpIHtcbiAgICBjb25zdCBpZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5idXR0b25cbiAgICBpZiAoaWQgPT09ICdubycpIHtcbiAgICAgIHRoaXMuY2xvc2UoKVxuICAgIH0gZWxzZSBpZiAoaWQgPT09ICdnZXRFeGFtcGxlTm93Jykge1xuICAgICAgY29uc3QgY29udGVudCA9IENvQzdBY3RvckltcG9ydGVyUmVnRXhwLmdldEV4YW1wbGVUZXh0KFxuICAgICAgICB0aGlzLm9iamVjdC5sYW5ndWFnZVxuICAgICAgKVxuICAgICAgQ29DN1V0aWxpdGllcy5jb3B5VG9DbGlwYm9hcmQoY29udGVudCkudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLmluZm8oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvcGllZCcpKVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKGlkID09PSAnaW1wb3J0Jykge1xuICAgICAgY29uc3QgYXBwID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCdkaXYuZGlhbG9nLmFjdG9yLWltcG9ydGVyJylcbiAgICAgIGFwcC5oaWRlKClcbiAgICAgIGNvbnN0IGZvcm0gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJ2Zvcm0nKVxuICAgICAgY29uc3QgaW5wdXRzID0gQ29DN0FjdG9ySW1wb3J0ZXJEaWFsb2cuZ2V0SW5wdXRzKGZvcm0pXG4gICAgICBpZiAoaW5wdXRzLmVudGl0eSA9PT0gJ2Rob2xlaG91c2UnICYmIHRoaXMuY2hhcmFjdGVySlNPTikge1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPVxuICAgICAgICAgIGF3YWl0IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlci5jcmVhdGVOUENGcm9tRGhvbGVIb3VzZShcbiAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVySlNPTixcbiAgICAgICAgICAgIHsgc291cmNlOiBpbnB1dHMuc291cmNlIH1cbiAgICAgICAgICApXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ2NoYXJhY3RlcjonLCBjaGFyYWN0ZXIpXG4gICAgICAgICAgfVxuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhcbiAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQWN0b3JJbXBvcnRlZCcsIHtcbiAgICAgICAgICAgICAgYWN0b3JUeXBlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuQ2hhcmFjdGVyJyksXG4gICAgICAgICAgICAgIGFjdG9yTmFtZTogY2hhcmFjdGVyLm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICAgIGF3YWl0IGNoYXJhY3Rlci5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICAgICAgICB0aGlzLmNsb3NlKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcHAuc2hvdygpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRzLnRleHQgJiYgaW5wdXRzLnRleHQgIT09ICcnKSB7XG4gICAgICAgIENvQzdBY3RvckltcG9ydGVyRGlhbG9nLmltcG9ydEFjdG9yKGlucHV0cylcbiAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHAuc2hvdygpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZVxuICAgKiBBIHN1YmNsYXNzIG9mIHRoZSBGb3JtQXBwbGljYXRpb24gbXVzdCBpbXBsZW1lbnQgdGhlIF91cGRhdGVPYmplY3QgbWV0aG9kLlxuICAgKi9cbiAgYXN5bmMgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGZvcm1EYXRhKSB7XG4gICAgdGhpcy5vYmplY3QuaW1wb3J0VHlwZSA9IGZvcm1EYXRhWydjb2MtZW50aXR5LXR5cGUnXVxuICAgIHRoaXMub2JqZWN0LmNoYXJhY3RlckRhdGEgPSBmb3JtRGF0YVsnY29jLXBhc3RlZC1jaGFyYWN0ZXItZGF0YSddPy50cmltKClcbiAgICBpZiAodHlwZW9mIGZvcm1EYXRhWydjb2MtY29udmVydC02RSddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5vYmplY3QuY29udmVydDZFID0gZm9ybURhdGFbJ2NvYy1jb252ZXJ0LTZFJ11cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmb3JtRGF0YVsnY29jLWVudGl0eS1sYW5nJ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9iamVjdC5sYW5ndWFnZSA9IGZvcm1EYXRhWydjb2MtZW50aXR5LWxhbmcnXVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGZvcm1EYXRhLnNvdXJjZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMub2JqZWN0LnNvdXJjZSA9IGZvcm1EYXRhLnNvdXJjZVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIGltcG9ydEFjdG9yIGltcG9ydHMgYW4gQWN0b3IgdXNpbmcgdGhlIGRpYWxvZyBkYXRhXG4gICAqIEBwYXJhbSB7aHRtbH0gaHRtbFxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGltcG9ydEFjdG9yIChpbnB1dHMpIHtcbiAgICBpZiAoaW5wdXRzLnRleHRbaW5wdXRzLnRleHQubGVuZ3RoXSAhPT0gJy4nKSB7XG4gICAgICBpbnB1dHMudGV4dCArPSAnLicgLy8gQWRkIGEgZG90IGEgdGhlIGVuZCB0byBoZWxwIHRoZSByZWdleCBmaW5kIHRoZSBlbmRcbiAgICB9XG4gICAgY29uc3QgYWN0b3IgPSBuZXcgQ29DN0FjdG9ySW1wb3J0ZXIoKVxuICAgIGNvbnN0IGNyZWF0ZWRBY3RvciA9IGF3YWl0IGFjdG9yLmNyZWF0ZUFjdG9yKGlucHV0cylcbiAgICAvLyBBY3RvciBjcmVhdGVkLCBOb3RpZnkgdGhlIHVzZXIgYW5kIHNob3cgdGhlIHNoZWV0LlxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCdjcmVhdGVkQWN0b3I6JywgY3JlYXRlZEFjdG9yKVxuICAgIH1cbiAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oXG4gICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkFjdG9ySW1wb3J0ZWQnLCB7XG4gICAgICAgIGFjdG9yVHlwZTogY3JlYXRlZEFjdG9yLnR5cGU/LnRvVXBwZXJDYXNlKCksXG4gICAgICAgIGFjdG9yTmFtZTogY3JlYXRlZEFjdG9yLm5hbWVcbiAgICAgIH0pXG4gICAgKVxuICAgIGF3YWl0IGNyZWF0ZWRBY3Rvci5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICAvLyBjb25zdCB1cGRhdGVkID0gYXdhaXQgVXBkYXRlci51cGRhdGVBY3RvcihucGMpXG4gICAgLy8gY29uc29sZS5kZWJ1ZygndXBkYXRlZDonLCB1cGRhdGVkKVxuICB9XG5cbiAgLy8gLyoqXG4gIC8vICAqIGNyZWF0ZSBpdCdzIHRoZSBkZWZhdWx0IHdlYiB0byBjcmF0ZSB0aGUgQ29DN0FjdG9ySW1wb3J0ZXJEaWFsb2dcbiAgLy8gICovXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMuaW1wb3J0VHlwZSA9IG9wdGlvbnMuaW1wb3J0VHlwZSA/PyAnbnBjJ1xuICAgIG9wdGlvbnMubGFuZ3VhZ2UgPVxuICAgICAgb3B0aW9ucy5sYW5ndWFnZSA/PyBDb0M3QWN0b3JJbXBvcnRlclJlZ0V4cC5jaGVja0xhbmd1YWdlKG51bGwpXG4gICAgb3B0aW9ucy5jb252ZXJ0NkUgPSBvcHRpb25zLmxhbmd1YWdlID8/ICdjb2MtZ3Vlc3MnXG4gICAgb3B0aW9ucy5zb3VyY2UgPSBvcHRpb25zLnNvdXJjZSA/PyAnaXdtcydcbiAgICBvcHRpb25zLmNoYXJhY3RlckRhdGEgPSBvcHRpb25zLmNoYXJhY3RlckRhdGEgPz8gJydcblxuICAgIG5ldyBDb0M3QWN0b3JJbXBvcnRlckRpYWxvZyhvcHRpb25zKS5yZW5kZXIodHJ1ZSlcbiAgfVxufVxuXG5Ib29rcy5vbmNlKCdyZWFkeScsICgpID0+IHtcbiAgaWYgKGdhbWUubW9kdWxlcy5nZXQoJ0NvQzctSW1wb3J0ZXItVGVzdHMnKT8uYWN0aXZlKSB7XG4gICAgd2luZG93LkNvQzdBY3RvckltcG9ydGVyID0gQ29DN0FjdG9ySW1wb3J0ZXJcbiAgfVxufSlcbiIsIi8qIGdsb2JhbCBEaWFsb2csIGZvdW5kcnksIGdhbWUgKi9cbmV4cG9ydCBjbGFzcyBEcm9wQ29DSUQgZXh0ZW5kcyBEaWFsb2cge1xuICBzdGF0aWMgcHJvY2Vzc0Zvcm0gKHJlc3BvbnNlLCBlbGVtZW50LCByZXNvbHZlKSB7XG4gICAgaWYgKGVsZW1lbnQuZmluZCgnaW5wdXQnKS5pcygnOmNoZWNrZWQnKSkge1xuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnZHJvcENvQ0lEJywgKHJlc3BvbnNlID8gJ1knIDogJ04nKSlcbiAgICB9XG4gICAgcmVzb2x2ZShyZXNwb25zZSlcbiAgfVxuXG4gIHN0YXRpYyBwcm9jZXNzSXRlbSAocmVzcG9uc2UsIGl0ZW0pIHtcbiAgICBpZiAocmVzcG9uc2UgJiYgaXRlbS5mbGFncz8uQ29DNz8uY29jaWRGbGFnPy5pZCkge1xuICAgICAgcmV0dXJuIGl0ZW0uZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWRcbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGl0ZW0pXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlICgpIHtcbiAgICBjb25zdCBkcm9wQ29DSUQgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkcm9wQ29DSUQnKVxuICAgIHN3aXRjaCAoZHJvcENvQ0lEKSB7XG4gICAgICBjYXNlICcnOlxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgY29uc3QgZGxnID0gbmV3IERyb3BDb0NJRCh7XG4gICAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5TZXR0aW5ncy5Ecm9wQ29DSUQuTmFtZScpLFxuICAgICAgICAgICAgY29udGVudDogJzxwPicgKyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlNldHRpbmdzLkRyb3BDb0NJRC5EaWFsb2cnKSArICc8L3A+PHA+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwicmVtZW1iZXJ0aGlzXCIgc3R5bGU9XCJ2ZXJ0aWNhbC1hbGlnbjogc3ViO1wiPjxsYWJlbCBmb3I9XCJyZW1lbWJlcnRoaXNcIj4nICsgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5TZXR0aW5ncy5Ecm9wQ29DSUQuUmVtZW1iZXInKSArICc8L2xhYmVsPjwvcD4nLFxuICAgICAgICAgICAgY2xhc3NlczogWydjb2M3JywgJ2FwcCcsICdkaWFsb2cnXSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgeWVzOiB7XG4gICAgICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWNoZWNrXCI+PC9pPicsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnWWVzJyksXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IChlbGVtZW50KSA9PiB7IERyb3BDb0NJRC5wcm9jZXNzRm9ybSh0cnVlLCBlbGVtZW50LCByZXNvbHZlKSB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG5vOiB7XG4gICAgICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPicsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnTm8nKSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKGVsZW1lbnQpID0+IHsgRHJvcENvQ0lELnByb2Nlc3NGb3JtKGZhbHNlLCBlbGVtZW50LCByZXNvbHZlKSB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIGRsZy5yZW5kZXIodHJ1ZSlcbiAgICAgICAgfSlcbiAgICAgIGNhc2UgJ1knOlxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgY2FzZSAnTic6XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIERyYWdEcm9wLCBmb3VuZHJ5LCBnYW1lLCBJdGVtU2hlZXQsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN0l0ZW0gfSBmcm9tICcuLi9pdGVtLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IERyb3BDb0NJRCB9IGZyb20gJy4uLy4uL2FwcHMvZHJvcC1jb2MtaWQuanMnXG5cbi8qKlxuICogRXh0ZW5kIHRoZSBiYXNpYyBJdGVtU2hlZXQgd2l0aCBzb21lIHZlcnkgc2ltcGxlIG1vZGlmaWNhdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdPY2N1cGF0aW9uU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICAvKipcbiAgICogQWN0aXZhdGUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBwcmVwYXJlZCBzaGVldCBIVE1MXG4gICAqIEBwYXJhbSBodG1sIHtIVE1MfSAgIFRoZSBwcmVwYXJlZCBIVE1MIG9iamVjdCByZWFkeSB0byBiZSByZW5kZXJlZCBpbnRvIHRoZSBET01cbiAgICovXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICAvLyBFdmVyeXRoaW5nIGJlbG93IGhlcmUgaXMgb25seSBuZWVkZWQgaWYgdGhlIHNoZWV0IGlzIGVkaXRhYmxlXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZWRpdGFibGUpIHJldHVyblxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5pdGVtIC5pdGVtLW5hbWUgaDQnKVxuICAgICAgLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uSXRlbVN1bW1hcnkoZXZlbnQsICdza2lsbHMnKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLml0ZW0tZGVsZXRlJylcbiAgICAgIC5jbGljayhldmVudCA9PiB0aGlzLl9vbkl0ZW1EZWxldGUoZXZlbnQsICdza2lsbHMnKSlcblxuICAgIGh0bWwuZmluZCgnLmdyb3VwLWl0ZW0tZGVsZXRlJykuY2xpY2sodGhpcy5fb25Hcm91cEl0ZW1EZWxldGUuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5ncm91cC1jb250cm9sJykuY2xpY2sodGhpcy5fb25Hcm91cENvbnRyb2wuYmluZCh0aGlzKSlcblxuICAgIGNvbnN0IGRyYWdEcm9wID0gbmV3IERyYWdEcm9wKHtcbiAgICAgIGRyb3BTZWxlY3RvcjogJy5kcm9wcGFibGUnLFxuICAgICAgY2FsbGJhY2tzOiB7IGRyb3A6IHRoaXMuX29uRHJvcC5iaW5kKHRoaXMpIH1cbiAgICB9KVxuICAgIGRyYWdEcm9wLmJpbmQoaHRtbFswXSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRyb3AgKGV2ZW50LCB0eXBlID0gJ3NraWxsJywgY29sbGVjdGlvbk5hbWUgPSAnc2tpbGxzJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgY29uc3Qgb3B0aW9uYWxTa2lsbCA9IGV2ZW50Py5jdXJyZW50VGFyZ2V0Py5jbGFzc0xpc3Q/LmNvbnRhaW5zKCdvcHRpb25hbC1za2lsbHMnKVxuICAgIGNvbnN0IG9sID0gZXZlbnQ/LmN1cnJlbnRUYXJnZXQ/LmNsb3Nlc3QoJ29sJylcbiAgICBjb25zdCBpbmRleCA9IG9sPy5kYXRhc2V0Py5ncm91cFxuXG4gICAgY29uc3QgZGF0YUxpc3QgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmdldERhdGFGcm9tRHJvcEV2ZW50KGV2ZW50LCAnSXRlbScpXG5cbiAgICBsZXQgdXNlQ29DSUQgPSAwXG4gICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0pIDogW11cbiAgICBjb25zdCBncm91cHMgPSB0aGlzLml0ZW0uc3lzdGVtLmdyb3VwcyA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0uZ3JvdXBzKSA6IFtdXG5cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YUxpc3QpIHtcbiAgICAgIGlmICghaXRlbSB8fCAhaXRlbS5zeXN0ZW0pIGNvbnRpbnVlXG4gICAgICBpZiAoIVt0eXBlXS5pbmNsdWRlcyhpdGVtLnR5cGUpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25hbFNraWxsKSB7XG4gICAgICAgIGlmICghQ29DN0l0ZW0uaXNBbnlTcGVjKGl0ZW0pKSB7XG4gICAgICAgICAgLy8gR2VuZXJpYyBzcGVjaWFsaXphdGlvbiBjYW4gYmUgaW5jbHVkZWQgbWFueSB0aW1lc1xuICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmZpbmQoZWwgPT4gZWwubmFtZSA9PT0gaXRlbS5uYW1lKSkge1xuICAgICAgICAgICAgY29udGludWUgLy8gSWYgc2tpbGwgaXMgYWxyZWFkeSBpbiBtYWluIGRvbid0IGFkZCBpdFxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZ3JvdXBzW2luZGV4XS5za2lsbHMuZmluZChlbCA9PiBlbC5uYW1lID09PSBpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZSAvLyBJZiBza2lsbCBpcyBhbHJlYWR5IGluIGdyb3VwIGRvbid0IGFkZCBpdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VDb0NJRCA9PT0gMCkge1xuICAgICAgICAgIHVzZUNvQ0lEID0gYXdhaXQgRHJvcENvQ0lELmNyZWF0ZSgpXG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzW2luZGV4XS5za2lsbHMgPSBncm91cHNbaW5kZXhdLnNraWxscy5jb25jYXQoW0Ryb3BDb0NJRC5wcm9jZXNzSXRlbSh1c2VDb0NJRCwgaXRlbSldKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFDb0M3SXRlbS5pc0FueVNwZWMoaXRlbSkpIHtcbiAgICAgICAgICAvLyBHZW5lcmljIHNwZWNpYWxpemF0aW9uIGNhbiBiZSBpbmNsdWRlZCBtYW55IHRpbWVzXG4gICAgICAgICAgaWYgKGNvbGxlY3Rpb24uZmluZChlbCA9PiBlbC5uYW1lID09PSBpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgc2FtZSBza2lsbCBpcyBpbiBvbmUgb2YgdGhlIGdyb3VwIHJlbW92ZSBpdCBmcm9tIHRoZSBncm91cHNcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZ3JvdXBzW2ldLnNraWxscy5maW5kSW5kZXgoXG4gICAgICAgICAgICAgIGVsID0+IGVsLm5hbWUgPT09IGl0ZW0ubmFtZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICBncm91cHNbaV0uc2tpbGxzLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZUNvQ0lEID09PSAwKSB7XG4gICAgICAgICAgdXNlQ29DSUQgPSBhd2FpdCBEcm9wQ29DSUQuY3JlYXRlKClcbiAgICAgICAgfVxuICAgICAgICBjb2xsZWN0aW9uLnB1c2goRHJvcENvQ0lELnByb2Nlc3NJdGVtKHVzZUNvQ0lELCBpdGVtKSlcbiAgICAgIH1cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0uZ3JvdXBzJzogZ3JvdXBzIH0pXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7IFtgc3lzdGVtLiR7Y29sbGVjdGlvbk5hbWV9YF06IGNvbGxlY3Rpb24gfSlcbiAgfVxuXG4gIGFzeW5jIF9vbkdyb3VwQ29udHJvbCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcblxuICAgIC8vIEFkZCBuZXcgZGFtYWdlIGNvbXBvbmVudFxuICAgIGlmIChhLmNsYXNzTGlzdC5jb250YWlucygnYWRkLWdyb3VwJykpIHtcbiAgICAgIGF3YWl0IHRoaXMuX29uU3VibWl0KGV2ZW50KSAvLyBTdWJtaXQgYW55IHVuc2F2ZWQgY2hhbmdlc1xuICAgICAgY29uc3QgZ3JvdXBzID0gdGhpcy5pdGVtLnN5c3RlbS5ncm91cHNcbiAgICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLmdyb3Vwcyc6IGdyb3Vwcy5jb25jYXQoW3sgb3B0aW9uczogMCwgc2tpbGxzOiBbXSB9XSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKGEuY2xhc3NMaXN0LmNvbnRhaW5zKCdyZW1vdmUtZ3JvdXAnKSkge1xuICAgICAgYXdhaXQgdGhpcy5fb25TdWJtaXQoZXZlbnQpIC8vIFN1Ym1pdCBhbnkgdW5zYXZlZCBjaGFuZ2VzXG4gICAgICBjb25zdCBncm91cHMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLmdyb3VwcylcbiAgICAgIGNvbnN0IG9sID0gYS5jbG9zZXN0KCcuaXRlbS1saXN0Lmdyb3VwJylcbiAgICAgIGdyb3Vwcy5zcGxpY2UoTnVtYmVyKG9sLmRhdGFzZXQuZ3JvdXApLCAxKVxuICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0uZ3JvdXBzJzogZ3JvdXBzIH0pXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uSXRlbVN1bW1hcnkgKGV2ZW50LCBjb2xsZWN0aW9uTmFtZSA9ICdpdGVtcycpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3Qgb2JqID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgIGNvbnN0IGxpID0gb2JqLnBhcmVudHMoJy5pdGVtJylcbiAgICBjb25zdCBncm91cCA9IG9iai5jbG9zZXN0KCcuZ3JvdXAnKVxuICAgIGxldCBpdGVtXG4gICAgaWYgKGdyb3VwLmxlbmd0aCkge1xuICAgICAgaXRlbSA9IHRoaXMuaXRlbS5zeXN0ZW0uZ3JvdXBzW2dyb3VwLmRhdGEoJ2dyb3VwJyldW2NvbGxlY3Rpb25OYW1lXS5maW5kKHMgPT4ge1xuICAgICAgICByZXR1cm4gcy5faWQgPT09IGxpLmRhdGEoJ2l0ZW0taWQnKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSA9IHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdLmZpbmQocyA9PiB7XG4gICAgICAgIHJldHVybiBzLl9pZCA9PT0gbGkuZGF0YSgnaXRlbS1pZCcpXG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBjaGF0RGF0YSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogdGhpcy5pdGVtLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgLy8gVG9nZ2xlIHN1bW1hcnlcbiAgICBpZiAobGkuaGFzQ2xhc3MoJ2V4cGFuZGVkJykpIHtcbiAgICAgIGNvbnN0IHN1bW1hcnkgPSBsaS5jaGlsZHJlbignLml0ZW0tc3VtbWFyeScpXG4gICAgICBzdW1tYXJ5LnNsaWRlVXAoMjAwLCAoKSA9PiBzdW1tYXJ5LnJlbW92ZSgpKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkaXYgPSAkKGA8ZGl2IGNsYXNzPVwiaXRlbS1zdW1tYXJ5XCI+JHtjaGF0RGF0YX08L2Rpdj5gKVxuICAgICAgY29uc3QgcHJvcHMgPSAkKCc8ZGl2IGNsYXNzPVwiaXRlbS1wcm9wZXJ0aWVzXCI+PC9kaXY+JylcbiAgICAgIC8vIGZvciAoY29uc3QgcCBvZiBjaGF0RGF0YS5wcm9wZXJ0aWVzKSB7IHByb3BzLmFwcGVuZChgPHNwYW4gY2xhc3M9XCJ0YWdcIj4ke3B9PC9zcGFuPmApIH1cbiAgICAgIGRpdi5hcHBlbmQocHJvcHMpXG4gICAgICBsaS5hcHBlbmQoZGl2LmhpZGUoKSlcbiAgICAgIGRpdi5zbGlkZURvd24oMjAwKVxuICAgIH1cbiAgICBsaS50b2dnbGVDbGFzcygnZXhwYW5kZWQnKVxuICB9XG5cbiAgYXN5bmMgX29uSXRlbURlbGV0ZSAoZXZlbnQsIGNvbGxlY3Rpb25OYW1lID0gJ2l0ZW1zJykge1xuICAgIGNvbnN0IGl0ZW0gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCBpdGVtSWQgPSBpdGVtLmRhdGEoJ2l0ZW0taWQnKVxuICAgIGNvbnN0IENvQ0lkID0gaXRlbS5kYXRhKCdjb2NpZCcpXG4gICAgY29uc3QgaXRlbUluZGV4ID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0uZmluZEluZGV4KGkgPT4gKGl0ZW1JZCAmJiBpLl9pZCA9PT0gaXRlbUlkKSB8fCAoQ29DSWQgJiYgaSA9PT0gQ29DSWQpKVxuICAgIGlmIChpdGVtSW5kZXggPiAtMSkge1xuICAgICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0pIDogW11cbiAgICAgIGNvbGxlY3Rpb24uc3BsaWNlKGl0ZW1JbmRleCwgMSlcbiAgICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyBbYHN5c3RlbS4ke2NvbGxlY3Rpb25OYW1lfWBdOiBjb2xsZWN0aW9uIH0pXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uR3JvdXBJdGVtRGVsZXRlIChldmVudCkge1xuICAgIGNvbnN0IGl0ZW0gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCBncm91cCA9IE51bWJlcihpdGVtLmNsb3Nlc3QoJy5pdGVtLWxpc3QuZ3JvdXAnKS5kYXRhKCdncm91cCcpKVxuICAgIGNvbnN0IGdyb3VwcyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0uZ3JvdXBzKVxuICAgIGlmICh0eXBlb2YgZ3JvdXBzW2dyb3VwXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGl0ZW1JZCA9IGl0ZW0uZGF0YSgnaXRlbS1pZCcpXG4gICAgICBjb25zdCBDb0NJZCA9IGl0ZW0uZGF0YSgnY29jaWQnKVxuICAgICAgY29uc3QgaXRlbUluZGV4ID0gZ3JvdXBzW2dyb3VwXS5za2lsbHMuZmluZEluZGV4KGkgPT4gKGl0ZW1JZCAmJiBpLl9pZCA9PT0gaXRlbUlkKSB8fCAoQ29DSWQgJiYgaSA9PT0gQ29DSWQpKVxuICAgICAgaWYgKGl0ZW1JbmRleCA+IC0xKSB7XG4gICAgICAgIGdyb3Vwc1tncm91cF0uc2tpbGxzLnNwbGljZShpdGVtSW5kZXgsIDEpXG4gICAgICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyAnc3lzdGVtLmdyb3Vwcyc6IGdyb3VwcyB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2hlZXQnLCAnb2NjdXBhdGlvbiddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL29jY3VwYXRpb24uaHRtbCcsXG4gICAgICB3aWR0aDogNTI1LFxuICAgICAgaGVpZ2h0OiA0ODAsXG4gICAgICBkcmFnRHJvcDogW3sgZHJhZ1NlbGVjdG9yOiAnLml0ZW0nIH1dLFxuICAgICAgc2Nyb2xsWTogWycudGFiLmRlc2NyaXB0aW9uJ10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXZpZ2F0aW9uJyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXQtYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2Rlc2NyaXB0aW9uJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuaGFzT3duZXIgPSB0aGlzLml0ZW0uaXNFbWJlZGRlZCA9PT0gdHJ1ZVxuXG4gICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLnNraWxscyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5leHBhbmRJdGVtQXJyYXkoeyBpdGVtTGlzdDogc2hlZXREYXRhLmRhdGEuc3lzdGVtLnNraWxscyB9KVxuXG4gICAgc2hlZXREYXRhLnNraWxsTGlzdEVtcHR5ID0gc2hlZXREYXRhLmRhdGEuc3lzdGVtLnNraWxscy5sZW5ndGggPT09IDBcblxuICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5za2lsbHMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDAsIGxlbiA9IHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5ncm91cHMubGVuZ3RoOyBpbmRleCA8IGxlbjsgaW5kZXgrKykge1xuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmdyb3Vwc1tpbmRleF0uc2tpbGxzID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmV4cGFuZEl0ZW1BcnJheSh7IGl0ZW1MaXN0OiBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZ3JvdXBzW2luZGV4XS5za2lsbHMgfSlcblxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmdyb3Vwc1tpbmRleF0uaXNFbXB0eSA9IHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5ncm91cHNbaW5kZXhdLnNraWxscy5sZW5ndGggPT09IDBcblxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmdyb3Vwc1tpbmRleF0uc2tpbGxzLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9uUG9pbnRzU3RyaW5nID0gQ29DN09jY3VwYXRpb25TaGVldC5vY2N1cGF0aW9uUG9pbnRzU3RyaW5nKHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5vY2N1cGF0aW9uU2tpbGxQb2ludHMpXG5cbiAgICBzaGVldERhdGEuaXRlbVByb3BlcnRpZXMgPSBbXVxuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLnR5cGUpKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgc2hlZXREYXRhLml0ZW1Qcm9wZXJ0aWVzLnB1c2goQ09DNy5vY2N1cGF0aW9uUHJvcGVydGllc1trZXldID8gQ09DNy5vY2N1cGF0aW9uUHJvcGVydGllc1trZXldIDogbnVsbClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvblZhbHVlID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cbiAgICByZXR1cm4gc2hlZXREYXRhXG4gIH1cblxuICBzdGF0aWMgb2NjdXBhdGlvblBvaW50c1N0cmluZyAob2NjdXBhdGlvblNraWxsUG9pbnRzKSB7XG4gICAgY29uc3Qgb3B0aW9ubmFsID0gW11cbiAgICBjb25zdCBtYW5kYXRvcnkgPSBbXVxuICAgIGZvciAoY29uc3QgW2tleSwgY2FyYWNdIG9mIE9iamVjdC5lbnRyaWVzKG9jY3VwYXRpb25Ta2lsbFBvaW50cykpIHtcbiAgICAgIGlmIChjYXJhYy5tdWx0aXBsaWVyKSB7XG4gICAgICAgIGNvbnN0IGNhcmFjTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShgQ0hBUkFDLiR7a2V5LnRvVXBwZXJDYXNlKCl9YClcbiAgICAgICAgaWYgKGNhcmFjLnNlbGVjdGVkICYmIGNhcmFjLm9wdGlvbmFsKSB7XG4gICAgICAgICAgb3B0aW9ubmFsLnB1c2goYCR7Y2FyYWNOYW1lfXgke2NhcmFjLm11bHRpcGxpZXJ9YClcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FyYWMuc2VsZWN0ZWQgJiYgIWNhcmFjLm9wdGlvbmFsKSB7XG4gICAgICAgICAgbWFuZGF0b3J5LnB1c2goYCR7Y2FyYWNOYW1lfXgke2NhcmFjLm11bHRpcGxpZXJ9YClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgb2NjdXBhdGlvblBvaW50c1N0cmluZyA9ICcnXG4gICAgY29uc3Qgb3JTdHJpbmcgPSBgICR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk9yJyl9IGBcbiAgICBpZiAobWFuZGF0b3J5Lmxlbmd0aCkgb2NjdXBhdGlvblBvaW50c1N0cmluZyArPSBtYW5kYXRvcnkuam9pbignICsgJylcbiAgICBpZiAob3B0aW9ubmFsLmxlbmd0aCAmJiBtYW5kYXRvcnkubGVuZ3RoKSB7XG4gICAgICBvY2N1cGF0aW9uUG9pbnRzU3RyaW5nICs9IGAgKyAoJHtvcHRpb25uYWwuam9pbihvclN0cmluZyl9KWBcbiAgICB9XG4gICAgaWYgKG9wdGlvbm5hbC5sZW5ndGggJiYgIW1hbmRhdG9yeS5sZW5ndGgpIHtcbiAgICAgIG9jY3VwYXRpb25Qb2ludHNTdHJpbmcgKz0gb3B0aW9ubmFsLmpvaW4ob3JTdHJpbmcpXG4gICAgfVxuICAgIHJldHVybiBvY2N1cGF0aW9uUG9pbnRzU3RyaW5nXG4gIH1cblxuICBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICBjb25zdCBzeXN0ZW0gPSBmb3VuZHJ5LnV0aWxzLmV4cGFuZE9iamVjdChmb3JtRGF0YSk/LnN5c3RlbVxuICAgIGlmIChzeXN0ZW0uZ3JvdXBzKSB7XG4gICAgICBmb3JtRGF0YVsnc3lzdGVtLmdyb3VwcyddID0gT2JqZWN0LnZhbHVlcyhcbiAgICAgICAgc3lzdGVtLmdyb3VwcyB8fCBbXVxuICAgICAgKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaXRlbS5zeXN0ZW0uZ3JvdXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBmb3JtRGF0YVtgc3lzdGVtLmdyb3Vwcy4ke2luZGV4fS5za2lsbHNgXSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgICAgIHRoaXMuaXRlbS5zeXN0ZW0uZ3JvdXBzW2luZGV4XS5za2lsbHNcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIHN1cGVyLl91cGRhdGVPYmplY3QoZXZlbnQsIGZvcm1EYXRhKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQWN0b3IsIENoYXRNZXNzYWdlLCBDT05TVCwgRm9ybUFwcGxpY2F0aW9uLCBmb3VuZHJ5LCBnYW1lLCBIb29rcywgcmVuZGVyVGVtcGxhdGUsIFJvbGwsIFRleHRFZGl0b3IsIHVpICovXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DQWN0b3IgfSBmcm9tICcuLi9hY3RvcnMvYWN0b3IuanMnXG5pbXBvcnQgeyBDb0M3T2NjdXBhdGlvblNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc2hlZXRzL29jY3VwYXRpb24uanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuaW1wb3J0IHsgU2tpbGxTcGVjaWFsaXphdGlvblNlbGVjdERpYWxvZyB9IGZyb20gJy4uL2FwcHMvc2tpbGwtc3BlY2lhbGl6YXRpb24tc2VsZWN0LWRpYWxvZy5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdJbnZlc3RpZ2F0b3JXaXphcmQgZXh0ZW5kcyBGb3JtQXBwbGljYXRpb24ge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgaWQ6ICdpbnZlc3RpZ2F0b3Itd2l6YXJkLWFwcGxpY2F0aW9uJyxcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnLCAnaW52ZXN0aWdhdG9yLXdpemFyZCddLFxuICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5JbnZlc3RpZ2F0b3JXaXphcmQuVGl0bGUnKSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQuaGJzJyxcbiAgICAgIHdpZHRoOiA1MjAsXG4gICAgICBoZWlnaHQ6IDYwMCxcbiAgICAgIGNsb3NlT25TdWJtaXQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsWTogWycuc2Nyb2xsc2VjdGlvbiddLFxuICAgICAgZHJhZ0Ryb3A6IFt7IGRyYWdTZWxlY3RvcjogJy5kcmFnZ2FibGUnLCBkcm9wU2VsZWN0b3I6IG51bGwgfV1cbiAgICB9KVxuICB9XG5cbiAgZ2V0IHBhZ2VMaXN0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgUEFHRV9OT05FOiAtMSxcbiAgICAgIFBBR0VfSU5UUk9EVUNUSU9OOiAwLFxuICAgICAgUEFHRV9DT05GSUdVUkFUSU9OOiAxLFxuICAgICAgUEFHRV9TRVRVUFM6IDIsXG4gICAgICBQQUdFX0FSQ0hFVFlQRVM6IDMsXG4gICAgICBQQUdFX0NIQVJBQ1RJU1RJQ1M6IDQsXG4gICAgICBQQUdFX0FUVFJJQlVURVM6IDUsXG4gICAgICBQQUdFX1ZJRVdfQVRUUklCVVRFUzogNixcbiAgICAgIFBBR0VfT0NDVVBBVElPTlM6IDcsXG4gICAgICBQQUdFX09DQ1VQQVRJT05fU0tJTExTOiA4LFxuICAgICAgUEFHRV9BUkNIRVRZUEVfU0tJTExTOiA5LFxuICAgICAgUEFHRV9QT0lOVFNfU0tJTExTOiAxMCxcbiAgICAgIFBBR0VfSU5WRVNUSUdBVE9SOiAxMSxcbiAgICAgIFBBR0VfQkFDS1NUT1JZOiAxMixcbiAgICAgIFBBR0VfQ1JFQVRFOiAxM1xuICAgIH1cbiAgfVxuXG4gIGdldCBjaGFyYWN0ZXJpc3RpY3NNZXRob2RzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgTUVUSE9EX0RFRkFVTFQ6IDEsXG4gICAgICBNRVRIT0RfUk9MTDogMSxcbiAgICAgIE1FVEhPRF9QT0lOVFM6IDIsXG4gICAgICBNRVRIT0RfVkFMVUVTOiAzXG4gICAgfVxuICB9XG5cbiAgZ2V0IGNvY2lkQ3JlZGl0UmF0aW5nICgpIHtcbiAgICByZXR1cm4gJ2kuc2tpbGwuY3JlZGl0LXJhdGluZydcbiAgfVxuXG4gIGdldCBjb2NpZExhbmd1YWdlT3duICgpIHtcbiAgICByZXR1cm4gJ2kuc2tpbGwubGFuZ3VhZ2Utb3duJ1xuICB9XG5cbiAgZ2V0IHBhZ2VPcmRlciAoKSB7XG4gICAgY29uc3QgcGFnZXMgPSB0aGlzLnBhZ2VMaXN0XG4gICAgbGV0IHBhZ2VPcmRlciA9IFtcbiAgICAgIHBhZ2VzLlBBR0VfSU5UUk9EVUNUSU9OXG4gICAgXVxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgcGFnZU9yZGVyLnB1c2gocGFnZXMuUEFHRV9DT05GSUdVUkFUSU9OKVxuICAgIH1cbiAgICBpZiAodGhpcy5vYmplY3QuZGVmYXVsdFNldHVwID09PSAnJykge1xuICAgICAgcGFnZU9yZGVyLnB1c2gocGFnZXMuUEFHRV9TRVRVUFMpXG4gICAgfVxuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUFyY2hldHlwZScpKSB7XG4gICAgICBwYWdlT3JkZXIucHVzaChwYWdlcy5QQUdFX0FSQ0hFVFlQRVMpXG4gICAgfVxuICAgIHBhZ2VPcmRlci5wdXNoKHBhZ2VzLlBBR0VfQ0hBUkFDVElTVElDUylcbiAgICBpZiAoIWdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlSWdub3JlQWdlUGVuYWx0aWVzJykpIHtcbiAgICAgIHBhZ2VPcmRlci5wdXNoKHBhZ2VzLlBBR0VfQVRUUklCVVRFUylcbiAgICB9XG4gICAgcGFnZU9yZGVyID0gcGFnZU9yZGVyLmNvbmNhdChbXG4gICAgICBwYWdlcy5QQUdFX1ZJRVdfQVRUUklCVVRFUyxcbiAgICAgIHBhZ2VzLlBBR0VfT0NDVVBBVElPTlMsXG4gICAgICBwYWdlcy5QQUdFX09DQ1VQQVRJT05fU0tJTExTXG4gICAgXSlcbiAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVBcmNoZXR5cGUnKSkge1xuICAgICAgcGFnZU9yZGVyLnB1c2gocGFnZXMuUEFHRV9BUkNIRVRZUEVfU0tJTExTKVxuICAgIH1cbiAgICBwYWdlT3JkZXIgPSBwYWdlT3JkZXIuY29uY2F0KFtcbiAgICAgIHBhZ2VzLlBBR0VfUE9JTlRTX1NLSUxMUyxcbiAgICAgIHBhZ2VzLlBBR0VfSU5WRVNUSUdBVE9SLFxuICAgICAgcGFnZXMuUEFHRV9CQUNLU1RPUlksXG4gICAgICBwYWdlcy5QQUdFX0NSRUFURVxuICAgIF0pXG4gICAgcmV0dXJuIHBhZ2VPcmRlclxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGxvYWRDYWNoZUl0ZW1CeUNvQ0lEICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRFJlZ2V4QmVzdCh7IGNvY2lkUmVnRXhwOiAvXmlcXC4vLCB0eXBlOiAnaScsIHNob3dMb2FkaW5nOiB0cnVlIH0pLnRoZW4oKGl0ZW1zKSA9PiB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSB7fVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICBsaXN0W2l0ZW0uZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWRdID0gaXRlbVxuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUobGlzdClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGZpbHRlckNhY2hlSXRlbUJ5Q29DSUQgKHJlZ2V4cCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhhd2FpdCB0aGlzLm9iamVjdC5jYWNoZUNvQ0lEKS5maWx0ZXIoZW50cnkgPT4gZW50cnlbMF0ubWF0Y2gocmVnZXhwKSkubWFwKGVudHJ5ID0+IGVudHJ5WzFdKVxuICB9XG5cbiAgYXN5bmMgZ2V0Q2FjaGVJdGVtQnlDb0NJRCAoaWQpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMub2JqZWN0LmNhY2hlQ29DSUQpW2lkXSA/PyBmYWxzZVxuICB9XG5cbiAgYXN5bmMgZXhwYW5kSXRlbUFycmF5IChpdGVtTGlzdCkge1xuICAgIGNvbnN0IGl0ZW1zID0gaXRlbUxpc3QuZmlsdGVyKGl0ID0+IHR5cGVvZiBpdCAhPT0gJ3N0cmluZycpXG4gICAgY29uc3QgY29jaWRzID0gaXRlbUxpc3QuZmlsdGVyKGl0ID0+IHR5cGVvZiBpdCA9PT0gJ3N0cmluZycpXG4gICAgaWYgKGNvY2lkcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IGF3YWl0IHRoaXMub2JqZWN0LmNhY2hlQ29DSURcbiAgICAgIGNvbnN0IG1pc3NpbmcgPSBbXVxuICAgICAgZm9yIChjb25zdCBjb2NpZCBvZiBjb2NpZHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbY29jaWRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGl0ZW1zLnB1c2goc291cmNlW2NvY2lkXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtaXNzaW5nLnB1c2goY29jaWQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtaXNzaW5nLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBlcmEgPSBnYW1lLmkxOG4uZm9ybWF0KENPQzcuZXJhc1t0aGlzLm9iamVjdC5kZWZhdWx0RXJhXSA/PyAnQ29DNy5Db0NJREZsYWcuZXJyb3IudW5rbm93bi1lcmEnLCB7IGVyYTogdGhpcy5vYmplY3QuZGVmYXVsdEVyYSB9KVxuICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcuZXJyb3IuZG9jdW1lbnRzLW5vdC1mb3VuZCcsIHsgY29jaWRzOiBtaXNzaW5nLmpvaW4oJywgJyksIGxhbmc6IGdhbWUuaTE4bi5sYW5nLCBlcmEgfSkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtc1xuICB9XG5cbiAgZ2V0QWdlQWRqdXN0bWVudHMgKCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzKSB7XG4gICAgICB0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldID0gMFxuICAgIH1cbiAgICAvLyBlZHU6IG9wdGlvbmFsIC0gbnVtYmVyIG9mIGVkdSBpbXByb3ZlbWVudCBjaGVja3NcbiAgICAvLyBkZWR1Y3Q6IG9wdGlvbmFsIC0gZGVkdWN0IFt0b3RhbF0gYmV0d2VlbiBbZnJvbV1cbiAgICAvLyByZWR1Y2U6IG9wdGlvbmFsIC0gZGVkdWN0IFt0b3RsYV0gZnJvbSBbZnJvbV1cbiAgICAvLyBsdWNrOiBvcHRpb25hbCAtIHJlcm9sbCBsdWNrIGFuZCB0YWtlIGhpZ2hlclxuICAgIGlmICghZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMnKSkge1xuICAgICAgaWYgKHRoaXMub2JqZWN0LmFnZSA+PSA0MCkge1xuICAgICAgICBjb25zdCBrZXkgPSBNYXRoLmZsb29yKHRoaXMub2JqZWN0LmFnZSAvIDEwKVxuICAgICAgICB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzID0ge1xuICAgICAgICAgIGVkdToge1xuICAgICAgICAgICAgdG90YWw6IChrZXkgLSAyID4gNCA/IDQgOiBrZXkgLSAyKSxcbiAgICAgICAgICAgIHJvbGxlZDogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlZHVjdDoge1xuICAgICAgICAgICAgdG90YWw6IChrZXkgPiAxID8gNSAqIE1hdGgucG93KDIsIGtleSAtIDQpIDogMCksXG4gICAgICAgICAgICBmcm9tOiBbJ3N0cicsICdjb24nLCAnZGV4J10sXG4gICAgICAgICAgICB2YWx1ZXM6IHt9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWR1Y2U6IHtcbiAgICAgICAgICAgIHRvdGFsOiAoa2V5IC0gMykgKiA1LFxuICAgICAgICAgICAgZnJvbTogJ2FwcCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QuYWdlID49IDIwKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMgPSB7XG4gICAgICAgICAgZWR1OiB7XG4gICAgICAgICAgICB0b3RhbDogMSxcbiAgICAgICAgICAgIHJvbGxlZDogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QuYWdlID49IDE1KSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMgPSB7XG4gICAgICAgICAgZGVkdWN0OiB7XG4gICAgICAgICAgICB0b3RhbDogNSxcbiAgICAgICAgICAgIGZyb206IFsnc3RyJywgJ3NpeiddLFxuICAgICAgICAgICAgdmFsdWVzOiB7fVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVkdWNlOiB7XG4gICAgICAgICAgICB0b3RhbDogNSxcbiAgICAgICAgICAgIGZyb206ICdlZHUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsdWNrOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3QucmVxdWlyZXNBZ2VBZGp1c3RtZW50cy5yZWR1Y2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW3RoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMucmVkdWNlLmZyb21dID0gLXRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMucmVkdWNlLnRvdGFsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuXG4gICAgc2hlZXREYXRhLnBhZ2VzID0gdGhpcy5wYWdlTGlzdFxuXG4gICAgc2hlZXREYXRhLmNhbk5leHQgPSBmYWxzZVxuICAgIHNoZWV0RGF0YS5jcmVhdGVCdXR0b24gPSBmYWxzZVxuXG4gICAgbGV0IHNldHVwXG4gICAgbGV0IGFyY2hldHlwZVxuICAgIGxldCBvY2N1cGF0aW9uXG5cbiAgICBsZXQgc2hvd01vbmV0YXJ5ID0gZmFsc2VcblxuICAgIHN3aXRjaCAoc2hlZXREYXRhLm9iamVjdC5zdGVwKSB7XG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0lOVFJPRFVDVElPTjpcbiAgICAgICAgc2hlZXREYXRhLmVyYSA9IGdhbWUuaTE4bi5mb3JtYXQoQ09DNy5lcmFzW3NoZWV0RGF0YS5vYmplY3QuZGVmYXVsdEVyYV0gPz8gJ0NvQzcuQ29DSURGbGFnLmVycm9yLnVua25vd24tZXJhJywgeyBlcmE6IHNoZWV0RGF0YS5vYmplY3QuZGVmYXVsdEVyYSB9KVxuICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBzaGVldERhdGEucGFnZXMuUEFHRV9DT05GSUdVUkFUSU9OOlxuICAgICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgICBzaGVldERhdGEuc2V0dXBzID0gYXdhaXQgdGhpcy5maWx0ZXJDYWNoZUl0ZW1CeUNvQ0lEKC9eaVxcLnNldHVwXFwuLylcbiAgICAgICAgICBzaGVldERhdGEub2NjdXBhdGlvbnMgPSBhd2FpdCB0aGlzLmZpbHRlckNhY2hlSXRlbUJ5Q29DSUQoL15pXFwub2NjdXBhdGlvblxcLi8pXG4gICAgICAgICAgc2hlZXREYXRhLmFyY2hldHlwZXMgPSBhd2FpdCB0aGlzLmZpbHRlckNhY2hlSXRlbUJ5Q29DSUQoL15pXFwuYXJjaGV0eXBlXFwuLylcbiAgICAgICAgICBzZXR1cCA9IHNoZWV0RGF0YS5zZXR1cHMuZmluZChzID0+IHMuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWQgPT09IHNoZWV0RGF0YS5vYmplY3QuZGVmYXVsdFNldHVwKVxuICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzaGVldERhdGEub2JqZWN0LmRlZmF1bHRTZXR1cCA9ICcnXG4gICAgICAgICAgICBzaGVldERhdGEub2JqZWN0LnNldHVwID0gJydcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hlZXREYXRhLmRlc2NyaXB0aW9uID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgICAgICAgICBzZXR1cC5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZWNyZXRzOiBnYW1lLnVzZXIuaXNHTVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICAgIHNoZWV0RGF0YS5vd25lcnNoaXAgPSB7XG4gICAgICAgICAgICBbQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5OT05FXTogJ09XTkVSU0hJUC5OT05FJyxcbiAgICAgICAgICAgIFtDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLkxJTUlURURdOiAnT1dORVJTSElQLkxJTUlURUQnLFxuICAgICAgICAgICAgW0NPTlNULkRPQ1VNRU5UX09XTkVSU0hJUF9MRVZFTFMuT0JTRVJWRVJdOiAnT1dORVJTSElQLk9CU0VSVkVSJyxcbiAgICAgICAgICAgIFtDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk9XTkVSXTogJ09XTkVSU0hJUC5PV05FUidcbiAgICAgICAgICB9XG4gICAgICAgICAgc2hlZXREYXRhLl9lcmFzID0gW11cbiAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LmVyYXMpKSB7XG4gICAgICAgICAgICBzaGVldERhdGEuX2VyYXMucHVzaCh7XG4gICAgICAgICAgICAgIGlkOiBrZXksXG4gICAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzID0gdGhpcy5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzXG4gICAgICAgICAgc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZCA9IHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9ERUZBVUxUXG4gICAgICAgICAgaWYgKHNoZWV0RGF0YS5vYmplY3QuZW5mb3JjZVBvaW50QnV5KSB7XG4gICAgICAgICAgICBzaGVldERhdGEuY2hhcmFjdGVyaXN0aWNzTWV0aG9kID0gc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZHMuTUVUSE9EX1BPSU5UU1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QucXVpY2tGaXJlVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZCA9IHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9WQUxVRVNcbiAgICAgICAgICB9XG4gICAgICAgICAgc2hlZXREYXRhLl9lcmFzLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuICAgICAgICAgIHNoZWV0RGF0YS5oYXNBcmNoZXR5cGVzID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVBcmNoZXR5cGUnKVxuICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2Ugc2hlZXREYXRhLnBhZ2VzLlBBR0VfU0VUVVBTOlxuICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5kZWZhdWx0U2V0dXAgPT09ICcnKSB7XG4gICAgICAgICAgc2hlZXREYXRhLnNldHVwcyA9IGF3YWl0IHRoaXMuZmlsdGVyQ2FjaGVJdGVtQnlDb0NJRCgvXmlcXC5zZXR1cFxcLi8pXG4gICAgICAgICAgc2hlZXREYXRhLnNldHVwcy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5zZXR1cCAhPT0gJycpIHtcbiAgICAgICAgICAgIHNldHVwID0gc2hlZXREYXRhLnNldHVwcy5maW5kKHMgPT4gcy5mbGFncy5Db0M3LmNvY2lkRmxhZy5pZCA9PT0gc2hlZXREYXRhLm9iamVjdC5zZXR1cClcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5kZXNjcmlwdGlvbiA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgICAgICAgICAgICBzZXR1cC5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICAgICAgICBzZWNyZXRzOiBnYW1lLnVzZXIuaXNHTVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBzaGVldERhdGEucGFnZXMuUEFHRV9BUkNIRVRZUEVTOlxuICAgICAgICBzaGVldERhdGEuYXJjaGV0eXBlcyA9IGF3YWl0IHRoaXMuZmlsdGVyQ2FjaGVJdGVtQnlDb0NJRCgvXmlcXC5hcmNoZXR5cGVcXC4vKVxuICAgICAgICBpZiAoc2hlZXREYXRhLmFyY2hldHlwZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hlZXREYXRhLmFyY2hldHlwZXMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICAgICAgaWYgKHNoZWV0RGF0YS5vYmplY3QuYXJjaGV0eXBlICE9PSAnJykge1xuICAgICAgICAgICAgYXJjaGV0eXBlID0gc2hlZXREYXRhLmFyY2hldHlwZXMuZmluZChzID0+IHMuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWQgPT09IHNoZWV0RGF0YS5vYmplY3QuYXJjaGV0eXBlKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmNoZXR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5kZXNjcmlwdGlvbiA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgICAgICAgICAgICBhcmNoZXR5cGUuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgc2VjcmV0czogZ2FtZS51c2VyLmlzR01cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgc2hlZXREYXRhLmJvbnVzUG9pbnRzID0gYXJjaGV0eXBlLnN5c3RlbS5ib251c1BvaW50c1xuICAgICAgICAgICAgICBjb25zdCBjb3JlQ2hhcmFjdGVyaXN0aWNzID0gW11cbiAgICAgICAgICAgICAgZm9yIChjb25zdCBjb3JlQ2hhcmFjdGVyaXN0aWMgaW4gYXJjaGV0eXBlLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyY2hldHlwZS5zeXN0ZW0uY29yZUNoYXJhY3RlcmlzdGljc1tjb3JlQ2hhcmFjdGVyaXN0aWNdKSB7XG4gICAgICAgICAgICAgICAgICBjb3JlQ2hhcmFjdGVyaXN0aWNzLnB1c2goY29yZUNoYXJhY3RlcmlzdGljKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoY29yZUNoYXJhY3RlcmlzdGljcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5jb3JlQ2hhcmFjdGVyaXN0aWMgPSAnJ1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmVDaGFyYWN0ZXJpc3RpY3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3QuY29yZUNoYXJhY3RlcmlzdGljID0gY29yZUNoYXJhY3RlcmlzdGljc1swXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5jb3JlQ2hhcmFjdGVyaXN0aWMgPSBjb3JlQ2hhcmFjdGVyaXN0aWNzLm1hcChjID0+IGMudG9Mb2NhbGVVcHBlckNhc2UoKSkuam9pbignICcgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuT3InKSArICcgJylcbiAgICAgICAgICAgICAgY29uc3Qgc2tpbGxzID0gW11cbiAgICAgICAgICAgICAgYXJjaGV0eXBlLnN5c3RlbS5za2lsbHMgPSBhd2FpdCB0aGlzLmV4cGFuZEl0ZW1BcnJheShhcmNoZXR5cGUuc3lzdGVtLnNraWxscylcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBza2lsbCBvZiBhcmNoZXR5cGUuc3lzdGVtLnNraWxscykge1xuICAgICAgICAgICAgICAgIHNraWxscy5wdXNoKHNraWxsLm5hbWUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2hlZXREYXRhLnNraWxscyA9IHNraWxscy5qb2luKCcsICcpXG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5zdWdnZXN0ZWRPY2N1cGF0aW9ucyA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgICAgICAgICAgICBhcmNoZXR5cGUuc3lzdGVtLnN1Z2dlc3RlZE9jY3VwYXRpb25zLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgc2VjcmV0czogZ2FtZS51c2VyLmlzR01cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgc2hlZXREYXRhLnN1Z2dlc3RlZFRyYWl0cyA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgICAgICAgICAgICBhcmNoZXR5cGUuc3lzdGVtLnN1Z2dlc3RlZFRyYWl0cyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIHNlY3JldHM6IGdhbWUudXNlci5pc0dNXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0NIQVJBQ1RJU1RJQ1M6XG4gICAgICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzID0gdGhpcy5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzXG4gICAgICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2QgPSBzaGVldERhdGEuY2hhcmFjdGVyaXN0aWNzTWV0aG9kcy5NRVRIT0RfUk9MTFxuICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5zZXR1cCAhPT0gJycpIHtcbiAgICAgICAgICBzZXR1cCA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGVJdGVtQnlDb0NJRCh0aGlzLm9iamVjdC5zZXR1cClcbiAgICAgICAgICBpZiAodHlwZW9mIHNldHVwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHNldHVwLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLmVuYWJsZWQgfHwgdGhpcy5vYmplY3QuZW5mb3JjZVBvaW50QnV5KSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2QgPSBzaGVldERhdGEuY2hhcmFjdGVyaXN0aWNzTWV0aG9kcy5NRVRIT0RfUE9JTlRTXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZCA9IHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9WQUxVRVNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5zZXR1cCA9IHtcbiAgICAgICAgICAgICAgdG90YWw6IDAsXG4gICAgICAgICAgICAgIHBvaW50czogc2V0dXAuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5wb2ludHMudmFsdWUsXG4gICAgICAgICAgICAgIGNoYXJhY3RlcmlzdGljczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTogJ3N0cicsXG4gICAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLnN0cixcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLlN0cmVuZ3RoJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2V5OiAnY29uJyxcbiAgICAgICAgICAgICAgICAgIHJvbGw6IHNldHVwLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMuY29uLFxuICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDSEFSQUMuQ29uc3RpdHV0aW9uJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2V5OiAnc2l6JyxcbiAgICAgICAgICAgICAgICAgIHJvbGw6IHNldHVwLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMuc2l6LFxuICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDSEFSQUMuU2l6ZSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTogJ2RleCcsXG4gICAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmRleCxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLkRleHRlcml0eSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTogJ2FwcCcsXG4gICAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmFwcCxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLkFwcGVhcmFuY2UnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBrZXk6ICdpbnQnLFxuICAgICAgICAgICAgICAgICAgcm9sbDogc2V0dXAuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5yb2xscy5pbnQsXG4gICAgICAgICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5JbnRlbGxpZ2VuY2UnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBrZXk6ICdwb3cnLFxuICAgICAgICAgICAgICAgICAgcm9sbDogc2V0dXAuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5yb2xscy5wb3csXG4gICAgICAgICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5Qb3dlcidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTogJ2VkdScsXG4gICAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmVkdSxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLkVkdWNhdGlvbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGx1Y2s6IHtcbiAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmx1Y2ssXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDb0M3Lkx1Y2snXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5jb3JlQ2hhcmFjdGVyaXN0aWNzID0gW11cbiAgICAgICAgICAgIGlmIChzaGVldERhdGEub2JqZWN0LmFyY2hldHlwZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgYXJjaGV0eXBlID0gYXdhaXQgdGhpcy5nZXRDYWNoZUl0ZW1CeUNvQ0lEKHRoaXMub2JqZWN0LmFyY2hldHlwZSlcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmNoZXR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb3JlQ2hhcmFjdGVyaXN0aWMgaW4gYXJjaGV0eXBlLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYXJjaGV0eXBlLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzW2NvcmVDaGFyYWN0ZXJpc3RpY10pIHtcbiAgICAgICAgICAgICAgICAgICAgc2hlZXREYXRhLmNvcmVDaGFyYWN0ZXJpc3RpY3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAga2V5OiBjb3JlQ2hhcmFjdGVyaXN0aWMsXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmZvcm1hdChzaGVldERhdGEuc2V0dXAuY2hhcmFjdGVyaXN0aWNzLmZpbmQoYyA9PiBjLmtleSA9PT0gY29yZUNoYXJhY3RlcmlzdGljKT8ubGFiZWwgPz8gJ1Vua25vd24nKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaGVldERhdGEuY29yZUNoYXJhY3RlcmlzdGljcy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vYmplY3QuY29yZUNoYXJhY3RlcmlzdGljICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgaWYgKGFyY2hldHlwZS5zeXN0ZW0uY29yZUNoYXJhY3RlcmlzdGljc0Zvcm11bGEuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBzaGVldERhdGEuc2V0dXAuY2hhcmFjdGVyaXN0aWNzLmZpbmQoYyA9PiBjLmtleSA9PT0gdGhpcy5vYmplY3QuY29yZUNoYXJhY3RlcmlzdGljKS5yb2xsID0gYXJjaGV0eXBlLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS52YWx1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVtcHRpZXMgPSBmYWxzZVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2hlZXREYXRhLm9iamVjdC5zZXR1cFBvaW50cykge1xuICAgICAgICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5zZXR1cFBvaW50c1trZXldICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICdsdWNrJykge1xuICAgICAgICAgICAgICAgICAgc2hlZXREYXRhLnNldHVwLnRvdGFsICs9IHBhcnNlSW50KHNoZWV0RGF0YS5vYmplY3Quc2V0dXBQb2ludHNba2V5XSwgMTApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVtcHRpZXMgPSB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm9iamVjdC5jb3JlQ2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgICAgICAgICAgc2hlZXREYXRhLmNvcmVDaGFyYWN0ZXJpc3RpYyA9IHRoaXMub2JqZWN0LmNvcmVDaGFyYWN0ZXJpc3RpYy50b0xvY2FsZVVwcGVyQ2FzZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVtcHRpZXMgJiYgdGhpcy5vYmplY3QuYWdlID49IDE1KSB7XG4gICAgICAgICAgICAgIGlmIChbc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZHMuTUVUSE9EX1JPTEwsIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9WQUxVRVNdLmluY2x1ZGVzKHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2QpKSB7XG4gICAgICAgICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSB0cnVlXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hlZXREYXRhLnNldHVwLnRvdGFsLnRvU3RyaW5nKCkgPT09IHNoZWV0RGF0YS5zZXR1cC5wb2ludHMudG9TdHJpbmcoKSkge1xuICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2Ugc2hlZXREYXRhLnBhZ2VzLlBBR0VfQVRUUklCVVRFUzpcbiAgICAgICAgc2hlZXREYXRhLnB1bHBSdWxlSWdub3JlQWdlUGVuYWx0aWVzID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMnKVxuICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgc2hlZXREYXRhLnBvaW50cyA9IHt9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzKSB7XG4gICAgICAgICAgc2hlZXREYXRhLnBvaW50c1trZXldID0ge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSxcbiAgICAgICAgICAgIG1pbjogLXBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIDEsXG4gICAgICAgICAgICBsYWJlbDogQ29DN1V0aWxpdGllcy5nZXRDaGFyYWN0ZXJpc3RpY05hbWVzKGtleSkubGFiZWxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmVkdSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMuZWR1LnJvbGxlZCkge1xuICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMuZGVkdWN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNoZWV0RGF0YS5kZWR1Y3RUb3RhbCA9IDBcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmRlZHVjdC5mcm9tKSB7XG4gICAgICAgICAgICBzaGVldERhdGEuZGVkdWN0VG90YWwgPSBzaGVldERhdGEuZGVkdWN0VG90YWwgLSBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldLCAxMClcbiAgICAgICAgICB9XG4gICAgICAgICAgc2hlZXREYXRhLmRlZHVjdEZyb20gPSB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmRlZHVjdC5mcm9tLm1hcChuID0+IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLicgKyBuLnRvVXBwZXJDYXNlKCkpKS5qb2luKCcsICcpLnJlcGxhY2UoLygsICkoW14sXSspJC8sICckMScgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuT3InKSArICcgJDInKS5yZXBsYWNlKC9eKFteLF0rKSwoW14sXSspJC8sICckMSQyJylcbiAgICAgICAgICBpZiAoc2hlZXREYXRhLmRlZHVjdFRvdGFsICE9PSB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmRlZHVjdC50b3RhbCkge1xuICAgICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMucmVkdWNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNoZWV0RGF0YS5yZWR1Y2VGcm9tID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuJyArIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMucmVkdWNlLmZyb20udG9VcHBlckNhc2UoKSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMubHVjayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzaGVldERhdGEubHVja1ZhbHVlID0gTWF0aC5tYXgodGhpcy5vYmplY3Quc2V0dXBQb2ludHMubHVjaywgdGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnMubHVjaylcbiAgICAgICAgICBpZiAodGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnMubHVjayA9PT0gMCkge1xuICAgICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX1ZJRVdfQVRUUklCVVRFUzpcbiAgICAgICAgc2hlZXREYXRhLnBvaW50cyA9IHt9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzKSB7XG4gICAgICAgICAgc2hlZXREYXRhLnBvaW50c1trZXldID0ge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSxcbiAgICAgICAgICAgIHByZWZpeDogJycsXG4gICAgICAgICAgICBzdWZmaXg6ICclJyxcbiAgICAgICAgICAgIGxhYmVsOiBDb0M3VXRpbGl0aWVzLmdldENoYXJhY3RlcmlzdGljTmFtZXMoa2V5KS5sYWJlbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEucG9pbnRzLmRiID0ge1xuICAgICAgICAgIHZhbHVlOiBDb0NBY3Rvci5kYkZyb21DaGFyYWN0ZXJpc3RpY3Moc2hlZXREYXRhLnBvaW50cyksXG4gICAgICAgICAgcHJlZml4OiAnJyxcbiAgICAgICAgICBzdWZmaXg6ICcnLFxuICAgICAgICAgIGxhYmVsOiAnQ29DNy5Cb251c0RhbWFnZSdcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOYU4oc2hlZXREYXRhLnBvaW50cy5kYi52YWx1ZSkgfHwgTnVtYmVyKHNoZWV0RGF0YS5wb2ludHMuZGIudmFsdWUpID49IDApIHtcbiAgICAgICAgICBzaGVldERhdGEucG9pbnRzLmRiLnByZWZpeCA9ICcrJ1xuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5wb2ludHMuYnVpbGQgPSB7XG4gICAgICAgICAgdmFsdWU6IENvQ0FjdG9yLmJ1aWxkRnJvbUNoYXJhY3RlcmlzdGljcyhzaGVldERhdGEucG9pbnRzKSxcbiAgICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICAgIHN1ZmZpeDogJycsXG4gICAgICAgICAgbGFiZWw6ICdDb0M3LkJ1aWxkJ1xuICAgICAgICB9XG4gICAgICAgIGlmIChOdW1iZXIoc2hlZXREYXRhLnBvaW50cy5idWlsZC52YWx1ZSkgPj0gMCkge1xuICAgICAgICAgIHNoZWV0RGF0YS5wb2ludHMuYnVpbGQucHJlZml4ID0gJysnXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLnBvaW50cy5ocCA9IHtcbiAgICAgICAgICB2YWx1ZTogQ29DQWN0b3IuaHBGcm9tQ2hhcmFjdGVyaXN0aWNzKHNoZWV0RGF0YS5wb2ludHMsICdjaGFyYWN0ZXInKSxcbiAgICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICAgIHN1ZmZpeDogJycsXG4gICAgICAgICAgbGFiZWw6ICdDb0M3LkhpdFBvaW50cydcbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEucG9pbnRzLmhwLnByZWZpeCA9IHNoZWV0RGF0YS5wb2ludHMuaHAudmFsdWUgKyAnLydcbiAgICAgICAgc2hlZXREYXRhLnBvaW50cy5tcCA9IHtcbiAgICAgICAgICB2YWx1ZTogQ29DQWN0b3IubXBGcm9tQ2hhcmFjdGVyaXN0aWNzKHNoZWV0RGF0YS5wb2ludHMpLFxuICAgICAgICAgIHByZWZpeDogJycsXG4gICAgICAgICAgc3VmZml4OiAnJyxcbiAgICAgICAgICBsYWJlbDogJ0NvQzcuTWFnaWNQb2ludHMnXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLnBvaW50cy5tcC5wcmVmaXggPSBzaGVldERhdGEucG9pbnRzLm1wLnZhbHVlICsgJy8nXG4gICAgICAgIHNoZWV0RGF0YS5wb2ludHMuc2FuID0ge1xuICAgICAgICAgIHZhbHVlOiBzaGVldERhdGEucG9pbnRzLnBvdy52YWx1ZSxcbiAgICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICAgIHN1ZmZpeDogJy85OScsXG4gICAgICAgICAgbGFiZWw6ICdDb0M3LlNhbml0eSdcbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEucG9pbnRzLm1vdiA9IHtcbiAgICAgICAgICB2YWx1ZTogQ29DQWN0b3IubW92RnJvbUNoYXJhY3RlcmlzdGljcyhzaGVldERhdGEucG9pbnRzLCAnY2hhcmFjdGVyJywgdGhpcy5vYmplY3QuYWdlKSxcbiAgICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICAgIHN1ZmZpeDogJycsXG4gICAgICAgICAgbGFiZWw6ICdDb0M3Lk1vdmVtZW50J1xuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX09DQ1VQQVRJT05TOlxuICAgICAgICBzaGVldERhdGEub2NjdXBhdGlvbnMgPSBhd2FpdCB0aGlzLmZpbHRlckNhY2hlSXRlbUJ5Q29DSUQoL15pXFwub2NjdXBhdGlvblxcLi8pXG4gICAgICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9ucy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgICAgaWYgKHNoZWV0RGF0YS5vYmplY3Qub2NjdXBhdGlvbiAhPT0gJycpIHtcbiAgICAgICAgICBvY2N1cGF0aW9uID0gc2hlZXREYXRhLm9jY3VwYXRpb25zLmZpbmQocyA9PiBzLmZsYWdzLkNvQzcuY29jaWRGbGFnLmlkID09PSBzaGVldERhdGEub2JqZWN0Lm9jY3VwYXRpb24pXG4gICAgICAgICAgaWYgKHR5cGVvZiBvY2N1cGF0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgc2hlZXREYXRhLmRlc2NyaXB0aW9uID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgICAgICAgICBvY2N1cGF0aW9uLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNlY3JldHM6IGdhbWUudXNlci5pc0dNXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9uUG9pbnRzU3RyaW5nID0gQ29DN09jY3VwYXRpb25TaGVldC5vY2N1cGF0aW9uUG9pbnRzU3RyaW5nKG9jY3VwYXRpb24uc3lzdGVtLm9jY3VwYXRpb25Ta2lsbFBvaW50cylcbiAgICAgICAgICAgIHNoZWV0RGF0YS5jcmVkaXRSYXRpbmcgPSBvY2N1cGF0aW9uLnN5c3RlbS5jcmVkaXRSYXRpbmdcbiAgICAgICAgICAgIHNoZWV0RGF0YS5wZXJzb25hbCA9IG9jY3VwYXRpb24uc3lzdGVtLnBlcnNvbmFsXG4gICAgICAgICAgICBzaGVldERhdGEucGVyc29uYWxUZXh0ID0gb2NjdXBhdGlvbi5zeXN0ZW0ucGVyc29uYWxUZXh0XG4gICAgICAgICAgICBzaGVldERhdGEuc2tpbGxzID0gYXdhaXQgdGhpcy5leHBhbmRJdGVtQXJyYXkob2NjdXBhdGlvbi5zeXN0ZW0uc2tpbGxzKVxuICAgICAgICAgICAgc2hlZXREYXRhLmdyb3VwcyA9IHt9XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb2NjdXBhdGlvbi5zeXN0ZW0uZ3JvdXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICBzaGVldERhdGEuZ3JvdXBzW2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBvY2N1cGF0aW9uLnN5c3RlbS5ncm91cHNbaW5kZXhdLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc2tpbGxzOiBbXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5ncm91cHNbaW5kZXhdLnNraWxscyA9IGF3YWl0IHRoaXMuZXhwYW5kSXRlbUFycmF5KG9jY3VwYXRpb24uc3lzdGVtLmdyb3Vwc1tpbmRleF0uc2tpbGxzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hlZXREYXRhLnBvaW50cyA9IDBcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBbXVxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBjYXJhY10gb2YgT2JqZWN0LmVudHJpZXMob2NjdXBhdGlvbi5zeXN0ZW0ub2NjdXBhdGlvblNraWxsUG9pbnRzKSkge1xuICAgICAgICAgICAgICBpZiAoY2FyYWMuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FyYWMub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaChjYXJhYy5tdWx0aXBsaWVyICogKHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSkpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5wb2ludHMgKz0gY2FyYWMubXVsdGlwbGllciAqIChwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldLCAxMCkgKyBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldLCAxMCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5wb2ludHMgKz0gTWF0aC5tYXgoLi4ub3B0aW9ucylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0lOVkVTVElHQVRPUjpcbiAgICAgICAgc2hlZXREYXRhLmxhbmd1YWdlID0gKHR5cGVvZiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW3RoaXMuY29jaWRMYW5ndWFnZU93bl0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICBpZiAoc2hlZXREYXRhLmxhbmd1YWdlKSB7XG4gICAgICAgICAgc2hlZXREYXRhLmxhbmd1YWdlTmFtZSA9IHRoaXMub2JqZWN0LnNraWxsSXRlbXNbdGhpcy5jb2NpZExhbmd1YWdlT3duXS5pdGVtLm5hbWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGVldERhdGEubGFuZ3VhZ2VOYW1lID0gJydcbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBzaGVldERhdGEucGFnZXMuUEFHRV9PQ0NVUEFUSU9OX1NLSUxMUzpcbiAgICAgICAgc2hlZXREYXRhLmRlZmF1bHQgPSAwXG4gICAgICAgIHNoZWV0RGF0YS5zZWxlY3RlZCA9IDBcbiAgICAgICAgc2hlZXREYXRhLnNraWxsSXRlbXMgPSBbXVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zKSB7XG4gICAgICAgICAgbGV0IGdyb3VwID0gJ290aGVyJ1xuICAgICAgICAgIGNvbnN0IHJvd3MgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzLmxlbmd0aFxuICAgICAgICAgIGNvbnN0IGlzTXVsdGlwbGUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5mbGFncy5pc011bHRpcGxlXG4gICAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGluZGV4OiAtMSxcbiAgICAgICAgICAgICAgbmFtZTogc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5uYW1lLFxuICAgICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgICAgdG9nZ2xlOiBmYWxzZSxcbiAgICAgICAgICAgICAgaXNDcmVkaXRSYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICBpc011bHRpcGxlOiB0cnVlLFxuICAgICAgICAgICAgICBpc1BpY2thYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJvd3M7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBpc1BpY2thYmxlID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5pc09jY3VwYXRpb25EZWZhdWx0KSB7XG4gICAgICAgICAgICAgIGdyb3VwID0gJ2RlZmF1bHQnXG4gICAgICAgICAgICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgaXNQaWNrYWJsZSA9IHRydWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzaGVldERhdGEuZGVmYXVsdCsrXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLmluT2NjdXBhdGlvbkdyb3VwICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBncm91cCA9IHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLmluT2NjdXBhdGlvbkdyb3VwXG4gICAgICAgICAgICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgaXNQaWNrYWJsZSA9IHRydWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZ3JvdXAgPSAnb3RoZXInXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdG9nZ2xlID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0ub2NjdXBhdGlvblRvZ2dsZVxuICAgICAgICAgICAgaWYgKGlzUGlja2FibGUpIHtcbiAgICAgICAgICAgICAgdG9nZ2xlID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzcGVjaWFsaXphdGlvbiA9IHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLml0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICBsZXQgc2tpbGxOYW1lID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5zeXN0ZW0uc2tpbGxOYW1lXG4gICAgICAgICAgICBsZXQgcGlja2VkID0gZmFsc2VcbiAgICAgICAgICAgIGxldCBkZWxldGVhYmxlID0gZmFsc2VcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uc2VsZWN0ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHBpY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgc2tpbGxOYW1lID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uc2VsZWN0ZWRcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uc2VsZWN0ZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHBpY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgc3BlY2lhbGl6YXRpb24gPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZC5zeXN0ZW0uc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgICAgc2tpbGxOYW1lID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uc2VsZWN0ZWQuc3lzdGVtLnNraWxsTmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvZ2dsZSB8fCAoaXNQaWNrYWJsZSAmJiBwaWNrZWQpKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5zZWxlY3RlZCsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmFtZSA9IHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLml0ZW0ubmFtZVxuICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5jb2NpZExhbmd1YWdlT3duKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSBzcGVjaWFsaXphdGlvbiArICcgKCcgKyBza2lsbE5hbWUgKyAnKSdcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzUGlja2FibGUgJiYgcGlja2VkKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSBzcGVjaWFsaXphdGlvbiArICcgKCcgKyBza2lsbE5hbWUgKyAnKSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQaWNrYWJsZSAmJiBwaWNrZWQpIHtcbiAgICAgICAgICAgICAgZGVsZXRlYWJsZSA9ICFzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5hcmNoZXR5cGVUb2dnbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICBncm91cDogZ3JvdXAudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgdG9nZ2xlLFxuICAgICAgICAgICAgICBpc0NyZWRpdFJhdGluZzogc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uaXNDcmVkaXRSYXRpbmcsXG4gICAgICAgICAgICAgIGlzTXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICAgICAgICBpc1BpY2thYmxlLFxuICAgICAgICAgICAgICBwaWNrZWQsXG4gICAgICAgICAgICAgIGRlbGV0ZWFibGUsXG4gICAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uLFxuICAgICAgICAgICAgICBza2lsbE5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5tYXggPSAocGFyc2VJbnQoc2hlZXREYXRhLmRlZmF1bHQsIDEwKSB8fCAwKSArIChwYXJzZUludChzaGVldERhdGEub2JqZWN0LnBlcnNvbmFsLCAxMCkgfHwgMCkgKyBPYmplY3QudmFsdWVzKHNoZWV0RGF0YS5vYmplY3Qub2NjdXBhdGlvbkdyb3VwcykucmVkdWNlKChzLCB2KSA9PiBzICsgKHBhcnNlSW50KHYsIDEwKSB8fCAwKSwgMClcbiAgICAgICAgc2hlZXREYXRhLnNraWxsSXRlbXMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICAgIGlmIChzaGVldERhdGEuc2VsZWN0ZWQgPT09IHNoZWV0RGF0YS5tYXgpIHtcbiAgICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0FSQ0hFVFlQRV9TS0lMTFM6XG4gICAgICAgIHNoZWV0RGF0YS5tYXggPSAwXG4gICAgICAgIHNoZWV0RGF0YS5zZWxlY3RlZCA9IDBcbiAgICAgICAgc2hlZXREYXRhLnNraWxsSXRlbXMgPSBbXVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zKSB7XG4gICAgICAgICAgbGV0IGdyb3VwID0gJ290aGVyJ1xuICAgICAgICAgIGNvbnN0IHJvd3MgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzLmxlbmd0aFxuICAgICAgICAgIGNvbnN0IGlzTXVsdGlwbGUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5mbGFncy5pc011bHRpcGxlXG4gICAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGluZGV4OiAtMSxcbiAgICAgICAgICAgICAgbmFtZTogc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5uYW1lLFxuICAgICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgICAgdG9nZ2xlOiBmYWxzZSxcbiAgICAgICAgICAgICAgaXNDcmVkaXRSYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICBpc011bHRpcGxlOiB0cnVlLFxuICAgICAgICAgICAgICBpc1BpY2thYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJvd3M7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBpc1BpY2thYmxlID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5pc0FyY2hldHlwZURlZmF1bHQpIHtcbiAgICAgICAgICAgICAgZ3JvdXAgPSAnZGVmYXVsdCdcbiAgICAgICAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICBpc1BpY2thYmxlID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5tYXgrK1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZ3JvdXAgPSAnb3RoZXInXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdG9nZ2xlID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uYXJjaGV0eXBlVG9nZ2xlXG4gICAgICAgICAgICBpZiAoaXNQaWNrYWJsZSkge1xuICAgICAgICAgICAgICB0b2dnbGUgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHNwZWNpYWxpemF0aW9uID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgIGxldCBza2lsbE5hbWUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5pdGVtLnN5c3RlbS5za2lsbE5hbWVcbiAgICAgICAgICAgIGxldCBwaWNrZWQgPSBmYWxzZVxuICAgICAgICAgICAgbGV0IGRlbGV0ZWFibGUgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgcGlja2VkID0gdHJ1ZVxuICAgICAgICAgICAgICBza2lsbE5hbWUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZFxuICAgICAgICAgICAgfSBlbHNlIGlmIChzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcGlja2VkID0gdHJ1ZVxuICAgICAgICAgICAgICBzcGVjaWFsaXphdGlvbiA9IHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLnNlbGVjdGVkLnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgICBza2lsbE5hbWUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZC5zeXN0ZW0uc2tpbGxOYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9nZ2xlIHx8IChpc1BpY2thYmxlICYmIHBpY2tlZCkpIHtcbiAgICAgICAgICAgICAgc2hlZXREYXRhLnNlbGVjdGVkKytcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuYW1lID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5uYW1lXG4gICAgICAgICAgICBpZiAoa2V5ID09PSB0aGlzLmNvY2lkTGFuZ3VhZ2VPd24pIHtcbiAgICAgICAgICAgICAgbmFtZSA9IHNwZWNpYWxpemF0aW9uICsgJyAoJyArIHNraWxsTmFtZSArICcpJ1xuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNQaWNrYWJsZSAmJiBwaWNrZWQpIHtcbiAgICAgICAgICAgICAgbmFtZSA9IHNwZWNpYWxpemF0aW9uICsgJyAoJyArIHNraWxsTmFtZSArICcpJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BpY2thYmxlICYmIHBpY2tlZCkge1xuICAgICAgICAgICAgICBkZWxldGVhYmxlID0gIXNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLm9jY3VwYXRpb25Ub2dnbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICBncm91cDogZ3JvdXAudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgdG9nZ2xlLFxuICAgICAgICAgICAgICBpc0NyZWRpdFJhdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgIGlzTXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICAgICAgICBpc1BpY2thYmxlLFxuICAgICAgICAgICAgICBwaWNrZWQsXG4gICAgICAgICAgICAgIGRlbGV0ZWFibGUsXG4gICAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uLFxuICAgICAgICAgICAgICBza2lsbE5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuICAgICAgICBpZiAoc2hlZXREYXRhLnNlbGVjdGVkID09PSBzaGVldERhdGEubWF4KSB7XG4gICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBzaGVldERhdGEucGFnZXMuUEFHRV9QT0lOVFNfU0tJTExTOlxuICAgICAgICBzaGVldERhdGEuc2tpbGxzID0gW11cbiAgICAgICAgc2hlZXREYXRhLmNyZWRpdFJhdGluZ09rYXkgPSAhKHRoaXMub2JqZWN0LmNyZWRpdFJhdGluZy5tYXggPiAwKVxuICAgICAgICBzaGVldERhdGEucGVyc29uYWwgPSB7XG4gICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgdG90YWw6IDIgKiAocGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHMuaW50LCAxMCkgKyBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVycy5pbnQsIDEwKSksXG4gICAgICAgICAgcmVtYWluaW5nOiAwXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLm9jY3VwYXRpb24gPSB7XG4gICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgdG90YWw6IDAsXG4gICAgICAgICAgcmVtYWluaW5nOiAwXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLmFyY2hldHlwZSA9IHtcbiAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgICByZW1haW5pbmc6IDBcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5zZXR1cCAhPT0gJycpIHtcbiAgICAgICAgICBzaG93TW9uZXRhcnkgPSAoYXdhaXQgdGhpcy5nZXRDYWNoZUl0ZW1CeUNvQ0lEKHNoZWV0RGF0YS5vYmplY3Quc2V0dXApKS5zeXN0ZW0ubW9uZXRhcnkudmFsdWVzLmxlbmd0aCA+IDBcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5vY2N1cGF0aW9uICE9PSAnJykge1xuICAgICAgICAgIG9jY3VwYXRpb24gPSBhd2FpdCB0aGlzLmdldENhY2hlSXRlbUJ5Q29DSUQodGhpcy5vYmplY3Qub2NjdXBhdGlvbilcbiAgICAgICAgICBpZiAob2NjdXBhdGlvbikge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIGNhcmFjXSBvZiBPYmplY3QuZW50cmllcyhvY2N1cGF0aW9uLnN5c3RlbS5vY2N1cGF0aW9uU2tpbGxQb2ludHMpKSB7XG4gICAgICAgICAgICAgIGlmIChjYXJhYy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIGlmIChjYXJhYy5vcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGNhcmFjLm11bHRpcGxpZXIgKiAocGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHNba2V5XSwgMTApICsgcGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnNba2V5XSwgMTApKSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2hlZXREYXRhLm9jY3VwYXRpb24udG90YWwgKz0gY2FyYWMubXVsdGlwbGllciAqIChwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldLCAxMCkgKyBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldLCAxMCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9uLnRvdGFsICs9IE1hdGgubWF4KC4uLm9wdGlvbnMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9iamVjdC5hcmNoZXR5cGUgIT09ICcnKSB7XG4gICAgICAgICAgY29uc3QgYXJjaGV0eXBlID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRCh0aGlzLm9iamVjdC5hcmNoZXR5cGUpXG4gICAgICAgICAgaWYgKGFyY2hldHlwZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHNoZWV0RGF0YS5hcmNoZXR5cGUudG90YWwgPSBhcmNoZXR5cGVbMF0uc3lzdGVtLmJvbnVzUG9pbnRzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLm9iamVjdC5za2lsbEl0ZW1zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5vYmplY3Quc2tpbGxJdGVtcykge1xuICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV1cbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMCwgaW0gPSBza2lsbC5yb3dzLmxlbmd0aDsgaW5kZXggPCBpbTsgaW5kZXgrKykge1xuICAgICAgICAgICAgICBjb25zdCByb3cgPSBza2lsbC5yb3dzW2luZGV4XVxuICAgICAgICAgICAgICBpZiAoIXNraWxsLmZsYWdzLmlzTXVsdGlwbGUgfHwgcm93LnNlbGVjdGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoc2tpbGwuaXRlbSlcbiAgICAgICAgICAgICAgICBpZiAocm93LnNlbGVjdGVkICE9PSBmYWxzZSAmJiB0eXBlb2Ygcm93LnNlbGVjdGVkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgaXRlbSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHJvdy5zZWxlY3RlZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGJhc2UgPSBpdGVtLnN5c3RlbS5iYXNlXG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOdW1lcmljKGJhc2UpKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9iamVjdC5zZXR1cFBvaW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdFeCA9IG5ldyBSZWdFeHAoJ0AnICsga2V5LCAnaScpXG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UocmVnRXgsIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOdW1lcmljKGJhc2UpKSB7XG4gICAgICAgICAgICAgICAgICBiYXNlID0gTWF0aC5mbG9vcihuZXcgUm9sbChiYXNlKS5ldmFsdWF0ZSh7IGFzeW5jOiBmYWxzZSB9KS50b3RhbClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsUG9pbnRzID0gcGFyc2VJbnQoYmFzZSwgMTApXG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihyb3cucGVyc29uYWxQb2ludHMpID4gMCkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbnVtID0gTnVtYmVyKHJvdy5wZXJzb25hbFBvaW50cylcbiAgICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5wZXJzb25hbC5jb3VudCArPSBudW1cbiAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRzID0gdG90YWxQb2ludHMgKyBudW1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihyb3cub2NjdXBhdGlvblBvaW50cykgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIocm93Lm9jY3VwYXRpb25Qb2ludHMpXG4gICAgICAgICAgICAgICAgICBzaGVldERhdGEub2NjdXBhdGlvbi5jb3VudCArPSBudW1cbiAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRzID0gdG90YWxQb2ludHMgKyBudW1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihyb3cuYXJjaGV0eXBlUG9pbnRzKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihyb3cuYXJjaGV0eXBlUG9pbnRzKVxuICAgICAgICAgICAgICAgICAgc2hlZXREYXRhLmFyY2hldHlwZS5jb3VudCArPSBudW1cbiAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRzID0gdG90YWxQb2ludHMgKyBudW1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihyb3cuZXhwZXJpZW5jZVBvaW50cykgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIocm93LmV4cGVyaWVuY2VQb2ludHMpXG4gICAgICAgICAgICAgICAgICB0b3RhbFBvaW50cyA9IHRvdGFsUG9pbnRzICsgbnVtXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBuYW1lID0gaXRlbS5uYW1lXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5jb2NpZExhbmd1YWdlT3duKSB7XG4gICAgICAgICAgICAgICAgICBuYW1lID0gaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gKyAnICgnICsgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lICsgJyknXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChza2lsbC5mbGFncy5pc0NyZWRpdFJhdGluZykge1xuICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUgKyAnIFsnICsgdGhpcy5vYmplY3QuY3JlZGl0UmF0aW5nLm1pbiArICcgLSAnICsgdGhpcy5vYmplY3QuY3JlZGl0UmF0aW5nLm1heCArICddJ1xuICAgICAgICAgICAgICAgICAgaWYgKHRvdGFsUG9pbnRzID49IHRoaXMub2JqZWN0LmNyZWRpdFJhdGluZy5taW4gJiYgdG90YWxQb2ludHMgPD0gdGhpcy5vYmplY3QuY3JlZGl0UmF0aW5nLm1heCkge1xuICAgICAgICAgICAgICAgICAgICBzaGVldERhdGEuY3JlZGl0UmF0aW5nT2theSA9IHRydWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3cuc2VsZWN0ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICBuYW1lID0gaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gKyAnICgnICsgcm93LnNlbGVjdGVkICsgJyknXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICBpc09jY3VwYXRpb246IHJvdy5vY2N1cGF0aW9uVG9nZ2xlLFxuICAgICAgICAgICAgICAgICAgaXNBcmNoZXR5cGU6IHJvdy5hcmNoZXR5cGVUb2dnbGUsXG4gICAgICAgICAgICAgICAgICBiYXNlLFxuICAgICAgICAgICAgICAgICAgcGVyc29uYWxQb2ludHM6IHJvdy5wZXJzb25hbFBvaW50cyxcbiAgICAgICAgICAgICAgICAgIG9jY3VwYXRpb25Qb2ludHM6IHJvdy5vY2N1cGF0aW9uUG9pbnRzLFxuICAgICAgICAgICAgICAgICAgYXJjaGV0eXBlUG9pbnRzOiByb3cuYXJjaGV0eXBlUG9pbnRzLFxuICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZVBvaW50czogcm93LmV4cGVyaWVuY2VQb2ludHMsXG4gICAgICAgICAgICAgICAgICB0b3RhbFBvaW50cyxcbiAgICAgICAgICAgICAgICAgIHNob3dDcmVkaXRSYXRpbmc6IHNob3dNb25ldGFyeSAmJiBrZXkgPT09IHRoaXMuY29jaWRDcmVkaXRSYXRpbmdcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNoZWV0RGF0YS5za2lsbHMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICAgICAgaWYgKHNoZWV0RGF0YS5jcmVkaXRSYXRpbmdPa2F5KSB7XG4gICAgICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGVldERhdGEucGVyc29uYWwucmVtYWluaW5nID0gc2hlZXREYXRhLnBlcnNvbmFsLnRvdGFsIC0gc2hlZXREYXRhLnBlcnNvbmFsLmNvdW50XG4gICAgICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9uLnJlbWFpbmluZyA9IHNoZWV0RGF0YS5vY2N1cGF0aW9uLnRvdGFsIC0gc2hlZXREYXRhLm9jY3VwYXRpb24uY291bnRcbiAgICAgICAgc2hlZXREYXRhLmFyY2hldHlwZS5yZW1haW5pbmcgPSBzaGVldERhdGEuYXJjaGV0eXBlLnRvdGFsIC0gc2hlZXREYXRhLmFyY2hldHlwZS5jb3VudFxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0JBQ0tTVE9SWTpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGFsbEJhY2tzdG9yaWVzID0gYXdhaXQgdGhpcy5vYmplY3QuY2FjaGVCYWNrc3Rvcmllc1xuICAgICAgICAgIHNoZWV0RGF0YS5iYWNrc3RvcmllcyA9IHt9XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgc2hlZXREYXRhLmJhY2tzdG9yaWVzW2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgIG5hbWU6IHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XS5uYW1lLFxuICAgICAgICAgICAgICByb2xsczogKGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5maW5kQ29jSWRJbkxpc3QodGhpcy5vYmplY3QuYmlvU2VjdGlvbnNbaW5kZXhdLmtleSwgYWxsQmFja3N0b3JpZXMpLmxlbmd0aCA/IHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XS5rZXkgOiAnJyksXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLm9iamVjdC5iaW9TZWN0aW9uc1tpbmRleF0udmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSB0cnVlXG4gICAgICAgIHNoZWV0RGF0YS5jcmVhdGVCdXR0b24gPSBnYW1lLnVzZXIucm9sZSA+PSBDT05TVC5VU0VSX1BFUk1JU1NJT05TLkFDVE9SX0NSRUFURS5kZWZhdWx0Um9sZVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0NSRUFURTpcbiAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSB0cnVlXG4gICAgICAgIHNoZWV0RGF0YS5jcmVhdGVCdXR0b24gPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGh0bWwua2V5cHJlc3MoZSA9PiAvdGV4dGFyZWEvaS50ZXN0KChlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQpLnRhZ05hbWUpIHx8IChlLmtleUNvZGUgfHwgZS53aGljaCB8fCBlLmNoYXJDb2RlIHx8IDApICE9PSAxMylcbiAgICBodG1sLmZpbmQoJy5zdWJtaXRfb25fY2hhbmdlJykuY2hhbmdlKHRoaXMuX29uQ2hhbmdlU3VibWl0LmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcucm9sbC1jaGFyYWN0ZXJpc3RpYycpLmNsaWNrKHRoaXMuX29uUm9sbENoYXJhY3RlcmlzdGljLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaW5jcmVhc2UtMTAtY2hhcmFjdGVyaXN0aWMnKS5jbGljayh0aGlzLl9vbkluY3JlYXNlQ2hhcmFjdGVyaXN0aWMxMC5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLmluY3JlYXNlLWNoYXJhY3RlcmlzdGljJykuY2xpY2sodGhpcy5fb25JbmNyZWFzZUNoYXJhY3RlcmlzdGljLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuZGVjcmVhc2UtY2hhcmFjdGVyaXN0aWMnKS5jbGljayh0aGlzLl9vbkRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5kZWNyZWFzZS0xMC1jaGFyYWN0ZXJpc3RpYycpLmNsaWNrKHRoaXMuX29uRGVjcmVhc2VDaGFyYWN0ZXJpc3RpYzEwLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCdidXR0b24ucm9sbF9hbGwnKS5jbGljayh0aGlzLl9vblJvbGxBbGwuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJ2J1dHRvbi5yb2xsX2VkdScpLmNsaWNrKHRoaXMuX29uUm9sbEVkdS5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnYnV0dG9uLnJvbGxfbHVjaycpLmNsaWNrKHRoaXMuX29uUm9sbEx1Y2suYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5pdGVtIGlucHV0LnN1Ym1pdF9vbl9ibHVyJykuYmx1cih0aGlzLl9vbkNoYW5nZVN1Ym1pdC5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLml0ZW0gaW5wdXQuc2F2ZS1jaGFyYWN0ZXJpc3RpYy1vbi1ibHVyJykuYmx1cih0aGlzLl9vbkNoYW5nZVNhdmVDaGFyYWN0ZXJpc3RpYy5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLml0ZW0udG9nZ2xlYWJsZScpLmNsaWNrKHRoaXMuX29uVG9nZ2xlU2tpbGwuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5pdGVtLmNsaWNrYWJsZScpLmNsaWNrKHRoaXMuX29uQ2xpY2tQaWNrU2tpbGwuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5za2lsbHMtbGlzdCBpbnB1dCcpLmNsaWNrKHRoaXMuX29uQ2xpY2tTa2lsbFNwZWNpYWwuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5za2lsbHMtbGlzdCAucmVtb3ZlLXNraWxsJykuY2xpY2sodGhpcy5fb25DbGlja1JlbW92ZVNraWxsLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaXRlbSBpbnB1dC5za2lsbC1hZGp1c3RtZW50JykuYmx1cih0aGlzLl9vbkNoYW5nZVNraWxsUG9pbnRzLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCd0ZXh0YXJlYS5iYWNrc3RvcnktdGV4dCcpLmtleXVwKHRoaXMuX29uQ2hhbmdlQmFja3N0b3J5VGV4dC5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnYnV0dG9uLmJhY2tzdG9yeS1yb2xsJykuY2xpY2sodGhpcy5fb25Sb2xsQmFja3N0b3J5LmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCdidXR0b24uYmFja3N0b3J5LXJlc2V0JykuY2xpY2sodGhpcy5fb25SZXNldEJhY2tzdG9yeS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgYXN5bmMgcm9sbE1lc3NhZ2UgKHJvbGxzKSB7XG4gICAgaWYgKHJvbGxzLmxlbmd0aCkge1xuICAgICAgY29uc3QgaHRtbCA9IFtdXG4gICAgICBmb3IgKGNvbnN0IHJvbGwgb2Ygcm9sbHMpIHtcbiAgICAgICAgaHRtbC5wdXNoKGF3YWl0IHJlbmRlclRlbXBsYXRlKFJvbGwuQ0hBVF9URU1QTEFURSwge1xuICAgICAgICAgIGZvcm11bGE6IChDb0M3VXRpbGl0aWVzLmdldENoYXJhY3RlcmlzdGljTmFtZXMocm9sbFswXSk/LmxhYmVsID8/IHJvbGxbMF0pICsgJzogJyArIHJvbGxbMV0sXG4gICAgICAgICAgdG9vbHRpcDogYXdhaXQgcm9sbFsyXS5nZXRUb29sdGlwKCksXG4gICAgICAgICAgdG90YWw6IHJvbGxbMl0udG90YWxcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgICBDaGF0TWVzc2FnZS5jcmVhdGUoe1xuICAgICAgICB1c2VyOiBnYW1lLnVzZXIuaWQsXG4gICAgICAgIHNwZWFrZXI6IHtcbiAgICAgICAgICBhbGlhczogZ2FtZS51c2VyLm5hbWVcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudDogaHRtbC5qb2luKCc8ZGl2PiZuYnNwOzwvZGl2PicpLFxuICAgICAgICB3aGlzcGVyOiBDaGF0TWVzc2FnZS5nZXRXaGlzcGVyUmVjaXBpZW50cygnR00nKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBhZGRJdGVtVG9MaXN0IChpdGVtLCB7IGlzT2NjdXBhdGlvbkRlZmF1bHQgPSBmYWxzZSwgaW5PY2N1cGF0aW9uR3JvdXAgPSBmYWxzZSwgb2NjdXBhdGlvblRvZ2dsZSA9IGZhbHNlLCBpc0FyY2hldHlwZURlZmF1bHQgPSBmYWxzZSwgYXJjaGV0eXBlVG9nZ2xlID0gZmFsc2UsIGlzQ3JlZGl0UmF0aW5nID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgY29uc3Qga2V5ID0gKGl0ZW0uZmxhZ3MuQ29DNz8uY29jaWRGbGFnPy5pZCA/PyBpdGVtLm5hbWUpXG4gICAgaWYgKGl0ZW0udHlwZSAhPT0gJ3NraWxsJykge1xuICAgICAgdGhpcy5vYmplY3QuaW52ZXN0aWdhdG9ySXRlbXMucHVzaChpdGVtKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGlzTXVsdGlwbGUgPSAhIShpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWwgJiYgKChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLnJlcXVpcmVzbmFtZSAmJiAhKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMub25seW9uZSA/PyBmYWxzZSkpIHx8IGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMucGlja25hbWVvbmx5IHx8IGl0ZW0ubmFtZSA9PT0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5BbnlTcGVjTmFtZScpKSlcbiAgICBjb25zdCBmbGFncyA9IHtcbiAgICAgIGlzT2NjdXBhdGlvbkRlZmF1bHQsXG4gICAgICBpbk9jY3VwYXRpb25Hcm91cCxcbiAgICAgIGlzQXJjaGV0eXBlRGVmYXVsdCxcbiAgICAgIGlzQ3JlZGl0UmF0aW5nLFxuICAgICAgb2NjdXBhdGlvblRvZ2dsZSxcbiAgICAgIGFyY2hldHlwZVRvZ2dsZVxuICAgIH1cbiAgICBjb25zdCByb3dzID0ge1xuICAgICAgb2NjdXBhdGlvblBvaW50czogJycsXG4gICAgICBhcmNoZXR5cGVQb2ludHM6ICcnLFxuICAgICAgZXhwZXJpZW5jZVBvaW50czogJycsXG4gICAgICBwZXJzb25hbFBvaW50czogJycsXG4gICAgICBzZWxlY3RlZDogZmFsc2VcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0gPSB7XG4gICAgICAgIGl0ZW0sXG4gICAgICAgIGZsYWdzOiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGZsYWdzLCB7IGlzTXVsdGlwbGUgfSwgeyBpbnBsYWNlOiBmYWxzZSB9KSxcbiAgICAgICAgcm93czogW11cbiAgICAgIH1cbiAgICAgIGlmICghaXNNdWx0aXBsZSB8fCAhKGlzT2NjdXBhdGlvbkRlZmF1bHQgPT09IGZhbHNlICYmIGluT2NjdXBhdGlvbkdyb3VwID09PSBmYWxzZSAmJiBpc0FyY2hldHlwZURlZmF1bHQgPT09IGZhbHNlKSkge1xuICAgICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93cy5wdXNoKGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QoZmxhZ3MsIHJvd3MsIHsgaW5wbGFjZTogZmFsc2UgfSkpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaXNNdWx0aXBsZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGZsYWcgaW4gZmxhZ3MpIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1swXVtmbGFnXSA9IHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzWzBdW2ZsYWddIHx8IGZsYWdzW2ZsYWddXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzLnB1c2goZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChmbGFncywgcm93cywgeyBpbnBsYWNlOiBmYWxzZSB9KSlcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgZmxhZyBpbiBmbGFncykge1xuICAgICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uZmxhZ3NbZmxhZ10gPSB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uZmxhZ3NbZmxhZ10gfHwgZmxhZ3NbZmxhZ11cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc011bHRpcGxlICYmIGZsYWdzLmlzQ3JlZGl0UmF0aW5nKSB7XG4gICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1swXS5vY2N1cGF0aW9uUG9pbnRzID0gdGhpcy5vYmplY3QuY3JlZGl0UmF0aW5nLm1pblxuICAgIH1cbiAgfVxuXG4gIGNsZWFyU2V0dXBQb2ludHMgKCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzKSB7XG4gICAgICB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldID0gJydcbiAgICB9XG4gIH1cblxuICBhc3luYyBzZXRTa2lsbExpc3RzICgpIHtcbiAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zID0ge31cbiAgICB0aGlzLm9iamVjdC5vY2N1cGF0aW9uR3JvdXBzID0ge31cbiAgICB0aGlzLm9iamVjdC5pbnZlc3RpZ2F0b3JJdGVtcyA9IFtdXG4gICAgdGhpcy5vYmplY3QucGxhY2VhYmxlID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5vYmplY3QucXVpY2tGaXJlVmFsdWVzKVxuICAgIGNvbnN0IHNldHVwID0gYXdhaXQgdGhpcy5nZXRDYWNoZUl0ZW1CeUNvQ0lEKHRoaXMub2JqZWN0LnNldHVwKVxuICAgIGNvbnN0IG9jY3VwYXRpb24gPSBhd2FpdCB0aGlzLmdldENhY2hlSXRlbUJ5Q29DSUQodGhpcy5vYmplY3Qub2NjdXBhdGlvbilcbiAgICBsZXQgYXJjaGV0eXBlID0gZmFsc2VcbiAgICBpZiAodGhpcy5vYmplY3QuYXJjaGV0eXBlICE9PSAnJykge1xuICAgICAgYXJjaGV0eXBlID0gYXdhaXQgdGhpcy5nZXRDYWNoZUl0ZW1CeUNvQ0lEKHRoaXMub2JqZWN0LmFyY2hldHlwZSlcbiAgICB9XG4gICAgaWYgKHNldHVwICYmIG9jY3VwYXRpb24gJiYgKCFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUFyY2hldHlwZScpIHx8IGFyY2hldHlwZSkpIHtcbiAgICAgIHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zID0gW11cbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzZXR1cC5zeXN0ZW0uYmlvU2VjdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zLnB1c2goe1xuICAgICAgICAgIG5hbWU6IHNldHVwLnN5c3RlbS5iaW9TZWN0aW9uc1tpbmRleF0sXG4gICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgIGtleTogJ3J0Li5iYWNrc3RvcnktJyArIENvQzdVdGlsaXRpZXMudG9LZWJhYkNhc2Uoc2V0dXAuc3lzdGVtLmJpb1NlY3Rpb25zW2luZGV4XSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHRoaXMub2JqZWN0LnBlcnNvbmFsID0gb2NjdXBhdGlvbi5zeXN0ZW0ucGVyc29uYWxcbiAgICAgIHRoaXMub2JqZWN0LnBlcnNvbmFsVGV4dCA9IG9jY3VwYXRpb24uc3lzdGVtLnBlcnNvbmFsVGV4dFxuICAgICAgdGhpcy5vYmplY3QuY3JlZGl0UmF0aW5nID0gb2NjdXBhdGlvbi5zeXN0ZW0uY3JlZGl0UmF0aW5nXG4gICAgICBsZXQgaXRlbXMgPSBbXVxuICAgICAgaXRlbXMgPSBhd2FpdCB0aGlzLmV4cGFuZEl0ZW1BcnJheShzZXR1cC5zeXN0ZW0uaXRlbXMpXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDAsIGltID0gaXRlbXMubGVuZ3RoOyBpbmRleCA8IGltOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMuYWRkSXRlbVRvTGlzdChpdGVtc1tpbmRleF0pXG4gICAgICB9XG4gICAgICBpdGVtcyA9IGF3YWl0IHRoaXMuZXhwYW5kSXRlbUFycmF5KG9jY3VwYXRpb24uc3lzdGVtLnNraWxscylcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMCwgaW0gPSBpdGVtcy5sZW5ndGg7IGluZGV4IDwgaW07IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy5hZGRJdGVtVG9MaXN0KGl0ZW1zW2luZGV4XSwgeyBpc09jY3VwYXRpb25EZWZhdWx0OiB0cnVlLCBvY2N1cGF0aW9uVG9nZ2xlOiB0cnVlIH0pXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBncm91cCA9IDAsIGdtID0gb2NjdXBhdGlvbi5zeXN0ZW0uZ3JvdXBzLmxlbmd0aDsgZ3JvdXAgPCBnbTsgZ3JvdXArKykge1xuICAgICAgICB0aGlzLm9iamVjdC5vY2N1cGF0aW9uR3JvdXBzW2dyb3VwXSA9IG9jY3VwYXRpb24uc3lzdGVtLmdyb3Vwc1tncm91cF0ub3B0aW9uc1xuICAgICAgICBpdGVtcyA9IGF3YWl0IHRoaXMuZXhwYW5kSXRlbUFycmF5KG9jY3VwYXRpb24uc3lzdGVtLmdyb3Vwc1tncm91cF0uc2tpbGxzKVxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDAsIGltID0gaXRlbXMubGVuZ3RoOyBpbmRleCA8IGltOyBpbmRleCsrKSB7XG4gICAgICAgICAgdGhpcy5hZGRJdGVtVG9MaXN0KGl0ZW1zW2luZGV4XSwgeyBpbk9jY3VwYXRpb25Hcm91cDogZ3JvdXAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFyY2hldHlwZSkge1xuICAgICAgICBpdGVtcyA9IGF3YWl0IHRoaXMuZXhwYW5kSXRlbUFycmF5KGFyY2hldHlwZS5zeXN0ZW0uc2tpbGxzKVxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDAsIGltID0gaXRlbXMubGVuZ3RoOyBpbmRleCA8IGltOyBpbmRleCsrKSB7XG4gICAgICAgICAgdGhpcy5hZGRJdGVtVG9MaXN0KGl0ZW1zW2luZGV4XSwgeyBpc0FyY2hldHlwZURlZmF1bHQ6IHRydWUsIGFyY2hldHlwZVRvZ2dsZTogdHJ1ZSB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoTnVtYmVyKHRoaXMub2JqZWN0LmNyZWRpdFJhdGluZy5tYXgpID4gMCkge1xuICAgICAgICBjb25zdCBuYW1lQ3JlZGl0UmF0aW5nID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcua2V5cy4nICsgdGhpcy5jb2NpZENyZWRpdFJhdGluZylcbiAgICAgICAgY29uc3QgZmxhZ3MgPSB7IGlzT2NjdXBhdGlvbkRlZmF1bHQ6IHRydWUsIG9jY3VwYXRpb25Ub2dnbGU6IHRydWUsIGlzQ3JlZGl0UmF0aW5nOiB0cnVlIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW3RoaXMuY29jaWRDcmVkaXRSYXRpbmddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMuYWRkSXRlbVRvTGlzdCh0aGlzLm9iamVjdC5za2lsbEl0ZW1zW3RoaXMuY29jaWRDcmVkaXRSYXRpbmddLml0ZW0sIGZsYWdzKVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW25hbWVDcmVkaXRSYXRpbmddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMuYWRkSXRlbVRvTGlzdCh0aGlzLm9iamVjdC5za2lsbEl0ZW1zW25hbWVDcmVkaXRSYXRpbmddLml0ZW0sIGZsYWdzKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNraWxsID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRCh0aGlzLmNvY2lkQ3JlZGl0UmF0aW5nKVxuICAgICAgICAgIGlmIChza2lsbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkSXRlbVRvTGlzdChza2lsbFswXSwgZmxhZ3MpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX29uRHJhZ1N0YXJ0IChldmVudCkge1xuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2hhcmFjdGVyaXN0aWNLZXkpIHtcbiAgICAgIGNvbnN0IGRyYWdEYXRhID0geyB0eXBlOiAnaW52ZXN0aWdhdG9yQ2hhcmFjdGVyaXN0aWMnLCBrZXk6IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jaGFyYWN0ZXJpc3RpY0tleSwgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC52YWx1ZSB9XG4gICAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRyYWdEYXRhKSlcbiAgICB9XG4gIH1cblxuICBfY2FuRHJhZ1N0YXJ0IChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBfY2FuRHJhZ0Ryb3AgKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIF9vbkRyb3AgKGV2ZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGFMaXN0ID0gSlNPTi5wYXJzZShldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpKVxuICAgICAgaWYgKHR5cGVvZiBkYXRhTGlzdC50eXBlICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhTGlzdC50eXBlID09PSAnaW52ZXN0aWdhdG9yQ2hhcmFjdGVyaXN0aWMnKSB7XG4gICAgICAgIGRhdGFMaXN0LmRlc3RpbmF0aW9uID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ2xpJykuZGF0YXNldC5jaGFyYWN0ZXJpc3RpY0tleVxuICAgICAgICBkYXRhTGlzdC5va2F5ID0gZmFsc2VcbiAgICAgICAgaWYgKGRhdGFMaXN0LmtleSA9PT0gJy0nICYmIHR5cGVvZiB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5kZXN0aW5hdGlvbl0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm9iamVjdC5wbGFjZWFibGUuaW5kZXhPZihwYXJzZUludChkYXRhTGlzdC52YWx1ZSwgMTApKVxuICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnBsYWNlYWJsZS5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5kZXN0aW5hdGlvbl0gIT09ICcnKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdC5wbGFjZWFibGUucHVzaChwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5kZXN0aW5hdGlvbl0sIDEwKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3QuZGVzdGluYXRpb25dID0gcGFyc2VJbnQoZGF0YUxpc3QudmFsdWUsIDEwKVxuICAgICAgICAgIHRoaXMub2JqZWN0LnBsYWNlYWJsZS5zb3J0KCkucmV2ZXJzZSgpXG4gICAgICAgICAgZGF0YUxpc3Qub2theSA9IHRydWVcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3Qua2V5XSAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YUxpc3QuZGVzdGluYXRpb24gPT09ICctJykge1xuICAgICAgICAgIGlmICh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5rZXldICE9PSAnJykge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QucGxhY2VhYmxlLnB1c2gocGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3Qua2V5XSwgMTApKVxuICAgICAgICAgICAgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3Qua2V5XSA9ICcnXG4gICAgICAgICAgICB0aGlzLm9iamVjdC5wbGFjZWFibGUuc29ydCgpLnJldmVyc2UoKVxuICAgICAgICAgICAgZGF0YUxpc3Qub2theSA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2RhdGFMaXN0LmtleV0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5kZXN0aW5hdGlvbl0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgdGVtcCA9ICh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5rZXldID09PSAnJyA/ICcnIDogcGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3Qua2V5XSwgMTApKVxuICAgICAgICAgIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2RhdGFMaXN0LmtleV0gPSAodGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3QuZGVzdGluYXRpb25dID09PSAnJyA/ICcnIDogcGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3QuZGVzdGluYXRpb25dLCAxMCkpXG4gICAgICAgICAgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3QuZGVzdGluYXRpb25dID0gdGVtcFxuICAgICAgICAgIGRhdGFMaXN0Lm9rYXkgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFMaXN0Lm9rYXkpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgfVxuICAgIGNvbnN0IGRhdGFMaXN0ID0gYXdhaXQgQ29DN1V0aWxpdGllcy5nZXREYXRhRnJvbURyb3BFdmVudChldmVudCwgJ0l0ZW0nKVxuICAgIGlmIChbdGhpcy5wYWdlTGlzdC5QQUdFX0FSQ0hFVFlQRV9TS0lMTFMsIHRoaXMucGFnZUxpc3QuUEFHRV9PQ0NVUEFUSU9OX1NLSUxMU10uaW5jbHVkZXModGhpcy5vYmplY3Quc3RlcCkpIHtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhTGlzdCkge1xuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICAgICAgdGhpcy5hZGRJdGVtVG9MaXN0KGl0ZW0pXG4gICAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9vbkNsaWNrU2tpbGxTcGVjaWFsIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gIH1cblxuICBfb25DbGlja1JlbW92ZVNraWxsIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgY29uc3Qga2V5ID0gZXZlbnQuY3VycmVudFRhcmdldD8ucGFyZW50Tm9kZT8uZGF0YXNldD8ua2V5XG4gICAgY29uc3QgaW5kZXggPSBldmVudC5jdXJyZW50VGFyZ2V0Py5wYXJlbnROb2RlPy5kYXRhc2V0Py5pbmRleFxuICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldPy5yb3dzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzLnNwbGljZShpbmRleCwgaW5kZXgpXG4gICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblRvZ2dsZVNraWxsIChldmVudCkge1xuICAgIGNvbnN0IGtleSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ/LmRhdGFzZXQ/LmtleVxuICAgIGNvbnN0IGluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldD8uZGF0YXNldD8uaW5kZXhcbiAgICBjb25zdCB0b2dnbGVLZXkgPSBldmVudC5jdXJyZW50VGFyZ2V0Py5kYXRhc2V0Py50b2dnbGVLZXlcbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XT8ucm93c1tpbmRleF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF1bdG9nZ2xlS2V5XSA9ICF0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF1bdG9nZ2xlS2V5XVxuICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25DbGlja1BpY2tTa2lsbCAoZXZlbnQpIHtcbiAgICBjb25zdCBrZXkgPSBldmVudC5jdXJyZW50VGFyZ2V0Py5kYXRhc2V0Py5rZXlcbiAgICBjb25zdCBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ/LmRhdGFzZXQ/LmluZGV4XG4gICAgY29uc3QgdG9nZ2xlS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldD8uZGF0YXNldD8udG9nZ2xlS2V5XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF1bdG9nZ2xlS2V5XSA9IGZhbHNlXG4gICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgICB9XG4gICAgICBsZXQgc2tpbGxMaXN0ID0gW11cbiAgICAgIGNvbnN0IGdyb3VwID0gZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmd1ZXNzR3JvdXBGcm9tS2V5KGtleSlcbiAgICAgIGlmIChncm91cCkge1xuICAgICAgICBza2lsbExpc3QgPSAoYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRFJlZ2V4QmVzdCh7IGNvY2lkUmVnRXhwOiBuZXcgUmVnRXhwKCdeJyArIENvQzdVdGlsaXRpZXMucXVvdGVSZWdFeHAoZ3JvdXApICsgJy4rJCcpLCB0eXBlOiAnaScgfSkpLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICByZXR1cm4gIShpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5zcGVjaWFsICYmICEhKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LnJlcXVpcmVzbmFtZSB8fCBpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5waWNrbmFtZW9ubHkpKVxuICAgICAgICB9KVxuICAgICAgICBpZiAoc2tpbGxMaXN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBza2lsbExpc3Quc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNraWxsRGF0YSA9IGF3YWl0IFNraWxsU3BlY2lhbGl6YXRpb25TZWxlY3REaWFsb2cuY3JlYXRlKHtcbiAgICAgICAgc2tpbGxzOiBza2lsbExpc3QsXG4gICAgICAgIGFsbG93Q3VzdG9tOiAodGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLml0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LnJlcXVpcmVzbmFtZSA/PyBmYWxzZSksXG4gICAgICAgIGZpeGVkQmFzZVZhbHVlOiB0cnVlLFxuICAgICAgICBzcGVjaWFsaXphdGlvbk5hbWU6IHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5pdGVtLnN5c3RlbS5zcGVjaWFsaXphdGlvbixcbiAgICAgICAgbGFiZWw6IHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5pdGVtLm5hbWVcbiAgICAgIH0pXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBpZiAoc2tpbGxEYXRhLnNlbGVjdGVkICE9PSAnJykge1xuICAgICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZCA9IHNraWxsTGlzdC5maW5kKGkgPT4gaS5pZCA9PT0gc2tpbGxEYXRhLnNlbGVjdGVkKVxuICAgICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XVt0b2dnbGVLZXldID0gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKHNraWxsRGF0YS5uYW1lICE9PSAnJykge1xuICAgICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZCA9IHNraWxsRGF0YS5uYW1lXG4gICAgICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdW3RvZ2dsZUtleV0gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzZWxlY3RlZCA9IGZhbHNlXG4gICAgICAgIGlmIChza2lsbERhdGEuc2VsZWN0ZWQgIT09ICcnKSB7XG4gICAgICAgICAgc2VsZWN0ZWQgPSBza2lsbExpc3QuZmluZChpID0+IGkuaWQgPT09IHNraWxsRGF0YS5zZWxlY3RlZClcbiAgICAgICAgfSBlbHNlIGlmIChza2lsbERhdGEubmFtZSAhPT0gJycpIHtcbiAgICAgICAgICBzZWxlY3RlZCA9IHNraWxsRGF0YS5uYW1lXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3MucHVzaCh7XG4gICAgICAgICAgaXNPY2N1cGF0aW9uRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgaW5PY2N1cGF0aW9uR3JvdXA6IGZhbHNlLFxuICAgICAgICAgIGlzQXJjaGV0eXBlRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgaXNDcmVkaXRSYXRpbmc6IGZhbHNlLFxuICAgICAgICAgIG9jY3VwYXRpb25Ub2dnbGU6ICh0b2dnbGVLZXkgPT09ICdvY2N1cGF0aW9uVG9nZ2xlJyksXG4gICAgICAgICAgYXJjaGV0eXBlVG9nZ2xlOiAodG9nZ2xlS2V5ID09PSAnYXJjaGV0eXBlVG9nZ2xlJyksXG4gICAgICAgICAgb2NjdXBhdGlvblBvaW50czogJycsXG4gICAgICAgICAgYXJjaGV0eXBlUG9pbnRzOiAnJyxcbiAgICAgICAgICBleHBlcmllbmNlUG9pbnRzOiAnJyxcbiAgICAgICAgICBwZXJzb25hbFBvaW50czogJycsXG4gICAgICAgICAgc2VsZWN0ZWRcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uQ2hhbmdlU2tpbGxQb2ludHMgKGV2ZW50KSB7XG4gICAgY29uc3QgaW5wdXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgY29uc3QgYWRqdXN0bWVudCA9IGlucHV0LmRhdGEoJ2FkanVzdG1lbnQnKVxuICAgIGNvbnN0IGxpID0gaW5wdXQuY2xvc2VzdCgnbGknKVxuICAgIGNvbnN0IGtleSA9IGxpLmRhdGEoJ2tleScpXG4gICAgY29uc3QgaW5kZXggPSBsaS5kYXRhKCdpbmRleCcpXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0/LnJvd3NbaW5kZXhdW2FkanVzdG1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdW2FkanVzdG1lbnRdID0gaW5wdXQudmFsKClcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF9vbkNoYW5nZUJhY2tzdG9yeVRleHQgKGV2ZW50KSB7XG4gICAgY29uc3QgdGV4dGFyZWEgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgY29uc3QgaW5kZXggPSB0ZXh0YXJlYS5kYXRhKCdpbmRleCcpXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5iaW9TZWN0aW9uc1tpbmRleF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9iamVjdC5iaW9TZWN0aW9uc1tpbmRleF0udmFsdWUgPSB0ZXh0YXJlYS52YWwoKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblJvbGxCYWNrc3RvcnkgKGV2ZW50KSB7XG4gICAgY29uc3QgYnV0dG9uID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgIGNvbnN0IGluZGV4ID0gYnV0dG9uLmRhdGEoJ2luZGV4JylcbiAgICBjb25zdCBrZXkgPSBidXR0b24uZGF0YSgna2V5JylcbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHJvbGx0YWJsZSA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSUQoa2V5KVxuICAgICAgaWYgKHJvbGx0YWJsZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY29uc3QgdGFibGVSZXN1bHQgPSBhd2FpdCByb2xsdGFibGVbMF0ucm9sbCgpXG4gICAgICAgIGlmICh0YWJsZVJlc3VsdC5yZXN1bHRzWzBdLnR5cGUgPT09IENPTlNULlRBQkxFX1JFU1VMVF9UWVBFUy5URVhUKSB7XG4gICAgICAgICAgdGhpcy5vYmplY3QuYmlvU2VjdGlvbnNbaW5kZXhdLnZhbHVlID0gKHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XS52YWx1ZSArICdcXG4nICsgdGFibGVSZXN1bHQucmVzdWx0c1swXS50ZXh0LnRyaW0oKSkudHJpbSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF9vblJlc2V0QmFja3N0b3J5IChldmVudCkge1xuICAgIGNvbnN0IGJ1dHRvbiA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICBjb25zdCBpbmRleCA9IGJ1dHRvbi5kYXRhKCdpbmRleCcpXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5iaW9TZWN0aW9uc1tpbmRleF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9iamVjdC5iaW9TZWN0aW9uc1tpbmRleF0udmFsdWUgPSAnJ1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uUm9sbEx1Y2sgKGV2ZW50KSB7XG4gICAgY29uc3Qgc2V0dXAgPSBhd2FpdCB0aGlzLmdldENhY2hlSXRlbUJ5Q29DSUQodGhpcy5vYmplY3Quc2V0dXApXG4gICAgaWYgKHNldHVwKSB7XG4gICAgICBjb25zdCBkaWUgPSBhd2FpdCBuZXcgUm9sbChzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmx1Y2sudG9TdHJpbmcoKSkuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgdGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnMubHVjayA9IFtkaWUudG90YWxdXG4gICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUoUm9sbC5DSEFUX1RFTVBMQVRFLCB7XG4gICAgICAgIGZvcm11bGE6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5JbnZlc3RpZ2F0b3JXaXphcmQuUm9sbFR3aWNlRm9yTHVjaycpICsgJzogJyArIHNldHVwLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMubHVjay50b1N0cmluZygpLFxuICAgICAgICB0b29sdGlwOiBhd2FpdCBkaWUuZ2V0VG9vbHRpcCgpLFxuICAgICAgICB0b3RhbDogZGllLnRvdGFsXG4gICAgICB9KVxuICAgICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKHtcbiAgICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgICBzcGVha2VyOiB7XG4gICAgICAgICAgYWxpYXM6IGdhbWUudXNlci5uYW1lXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgIHdoaXNwZXI6IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgICB9KVxuICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25Sb2xsRWR1IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMuZWR1ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKCF0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmVkdS5yb2xsZWQgJiYgdGhpcy5vYmplY3QucmVxdWlyZXNBZ2VBZGp1c3RtZW50cy5lZHUudG90YWwpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHMuZWR1LCAxMClcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IFtdXG4gICAgICAgIGZvciAobGV0IHJvbGxzID0gdGhpcy5vYmplY3QucmVxdWlyZXNBZ2VBZGp1c3RtZW50cy5lZHUudG90YWw7IHJvbGxzID4gMDsgcm9sbHMtLSkge1xuICAgICAgICAgIGNvbnN0IGRpZSA9IGF3YWl0IG5ldyBSb2xsKCcxZDEwMCcpLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICBpZiAoZGllLnRvdGFsID4gdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGF1Z21lbnREaWUgPSBhd2FpdCBuZXcgUm9sbCgnMWQxMCcpLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICAgIG1lc3NhZ2UucHVzaChgPHNwYW4gY2xhc3M9XCJ1cGdyYWRlLXN1Y2Nlc3NcIj4ke2dhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgICdDb0M3LkRldlN1Y2Nlc3MnLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuRWR1Y2F0aW9uJyksXG4gICAgICAgICAgICAgICAgZGllOiBkaWUudG90YWwsXG4gICAgICAgICAgICAgICAgc2NvcmU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIGF1Z21lbnQ6IGF1Z21lbnREaWUudG90YWxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKX08L3NwYW4+PGJyPmApXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgcGFyc2VJbnQoYXVnbWVudERpZS50b3RhbCwgMTApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UucHVzaChgPHNwYW4gY2xhc3M9XCJ1cGdyYWRlLWZhaWxlZFwiPiR7Z2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgJ0NvQzcuRGV2RmFpbHVyZScsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5FZHVjYXRpb24nKSxcbiAgICAgICAgICAgICAgICBkaWU6IGRpZS50b3RhbCxcbiAgICAgICAgICAgICAgICBzY29yZTogdmFsdWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKX08L3NwYW4+PGJyPmApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIENoYXRNZXNzYWdlLmNyZWF0ZSh7XG4gICAgICAgICAgZmxhdm9yOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUm9sbEFsbDREZXYnKSxcbiAgICAgICAgICB1c2VyOiBnYW1lLnVzZXIuaWQsXG4gICAgICAgICAgc3BlYWtlcjoge1xuICAgICAgICAgICAgYWxpYXM6IGdhbWUudXNlci5uYW1lXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb250ZW50OiBtZXNzYWdlLmpvaW4oJycpLFxuICAgICAgICAgIHdoaXNwZXI6IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzLmVkdSA9IHZhbHVlIC0gcGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHMuZWR1LCAxMClcbiAgICAgICAgdGhpcy5vYmplY3QucmVxdWlyZXNBZ2VBZGp1c3RtZW50cy5lZHUucm9sbGVkID0gdHJ1ZVxuICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblJvbGxBbGwgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHJvbGxzID0gW11cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBbJ3N0cicsICdjb24nLCAnc2l6JywgJ2RleCcsICdhcHAnLCAnaW50JywgJ3BvdycsICdlZHUnLCAnbHVjayddKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnJvbGxDaGFyYWN0ZXJpc3RpYyhrZXkpXG4gICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICByb2xscy5wdXNoKHJlc3VsdClcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yb2xsTWVzc2FnZShyb2xscylcbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uSW5jcmVhc2VDaGFyYWN0ZXJpc3RpYzEwIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGlmICh0eXBlb2YgbGkuZGF0YXNldC5vZmZzZXQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBsaS5kYXRhc2V0Lm1pbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxpLmRhdGFzZXQubWF4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5tb2RpZnlPZmZzZXQobGkuZGF0YXNldC5vZmZzZXQsIDEwLCBsaS5kYXRhc2V0Lm1pbiwgbGkuZGF0YXNldC5tYXgpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGkuZGF0YXNldC5rZXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1vZGlmeUNoYXJhY3RlcmlzdGljKGxpLmRhdGFzZXQua2V5LCAxMClcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF9vbkluY3JlYXNlQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgaWYgKHR5cGVvZiBsaS5kYXRhc2V0Lm9mZnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxpLmRhdGFzZXQubWluICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGkuZGF0YXNldC5tYXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1vZGlmeU9mZnNldChsaS5kYXRhc2V0Lm9mZnNldCwgMSwgbGkuZGF0YXNldC5taW4sIGxpLmRhdGFzZXQubWF4KVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpLmRhdGFzZXQua2V5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5tb2RpZnlDaGFyYWN0ZXJpc3RpYyhsaS5kYXRhc2V0LmtleSwgMSlcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgaWYgKHR5cGVvZiBsaS5kYXRhc2V0Lm9mZnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxpLmRhdGFzZXQubWluICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGkuZGF0YXNldC5tYXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1vZGlmeU9mZnNldChsaS5kYXRhc2V0Lm9mZnNldCwgLTEsIGxpLmRhdGFzZXQubWluLCBsaS5kYXRhc2V0Lm1heClcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaS5kYXRhc2V0LmtleSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubW9kaWZ5Q2hhcmFjdGVyaXN0aWMobGkuZGF0YXNldC5rZXksIC0xKVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgX29uRGVjcmVhc2VDaGFyYWN0ZXJpc3RpYzEwIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGlmICh0eXBlb2YgbGkuZGF0YXNldC5vZmZzZXQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBsaS5kYXRhc2V0Lm1pbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxpLmRhdGFzZXQubWF4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5tb2RpZnlPZmZzZXQobGkuZGF0YXNldC5vZmZzZXQsIC0xMCwgbGkuZGF0YXNldC5taW4sIGxpLmRhdGFzZXQubWF4KVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpLmRhdGFzZXQua2V5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5tb2RpZnlDaGFyYWN0ZXJpc3RpYyhsaS5kYXRhc2V0LmtleSwgLTEwKVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgbW9kaWZ5T2Zmc2V0IChrZXksIHZhbHVlLCBtaW4sIG1heCkge1xuICAgIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0gPSBNYXRoLm1heChNYXRoLm1pbihwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldLCAxMCkgKyB2YWx1ZSwgcGFyc2VJbnQobWF4LCAxMCkpLCBwYXJzZUludChtaW4sIDEwKSlcbiAgfVxuXG4gIG1vZGlmeUNoYXJhY3RlcmlzdGljIChrZXksIHZhbHVlKSB7XG4gICAgY29uc3QgbGkgPSB0aGlzLl9lbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoYGxpLml0ZW1bZGF0YS1rZXk9JHtrZXl9XWApXG4gICAgY29uc3QgaW5wdXQgPSBsaT8ucXVlcnlTZWxlY3RvcignaW5wdXQnKVxuICAgIGlmIChpbnB1dCkge1xuICAgICAgaW5wdXQudmFsdWUgPSBOdW1iZXIoaW5wdXQudmFsdWUpICsgdmFsdWVcbiAgICAgIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0gPSBOdW1iZXIoaW5wdXQudmFsdWUpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uUm9sbENoYXJhY3RlcmlzdGljIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGNvbnN0IGNoYXJhY0tleSA9IGxpLmRhdGFzZXQua2V5XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5yb2xsQ2hhcmFjdGVyaXN0aWMoY2hhcmFjS2V5KVxuICAgIGlmIChyZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnJvbGxNZXNzYWdlKFtyZXN1bHRdKVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgcm9sbENoYXJhY3RlcmlzdGljIChrZXkpIHtcbiAgICBjb25zdCBsaSA9ICQoYCNpbnZlc3RpZ2F0b3Itd2l6YXJkLWFwcGxpY2F0aW9uIGxpLml0ZW1bZGF0YS1rZXk9JHtrZXl9XWApXG4gICAgY29uc3QgaW5wdXQgPSBsaS5maW5kKCdpbnB1dCcpXG4gICAgY29uc3QgZm9ybXVsYSA9IGxpLmRhdGEoJ3JvbGwnKVxuICAgIGlmIChpbnB1dCAmJiBmb3JtdWxhKSB7XG4gICAgICBpZiAodGhpcy5vYmplY3QucmVyb2xsc0VuYWJsZWQgfHwgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNba2V5XSA9PT0gJycpIHtcbiAgICAgICAgY29uc3Qgcm9sbCA9IG5ldyBSb2xsKGZvcm11bGEudG9TdHJpbmcoKSlcbiAgICAgICAgYXdhaXQgcm9sbC5ldmFsdWF0ZSh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICAgIGlucHV0LnZhbChyb2xsLnRvdGFsKVxuICAgICAgICB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldID0gTnVtYmVyKHJvbGwudG90YWwpXG4gICAgICAgIHJldHVybiBba2V5LCBmb3JtdWxhLnRvU3RyaW5nKCksIHJvbGxdXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZVxuICAgKiBBIHN1YmNsYXNzIG9mIHRoZSBGb3JtQXBwbGljYXRpb24gbXVzdCBpbXBsZW1lbnQgdGhlIF9vbkNoYW5nZVN1Ym1pdCBtZXRob2QuXG4gICAqL1xuICBfb25DaGFuZ2VTdWJtaXQgKGV2ZW50KSB7XG4gICAgdGhpcy5fb25TdWJtaXQoZXZlbnQpXG4gIH1cblxuICBfb25DaGFuZ2VTYXZlQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgY29uc3Qgb2JqID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgIGNvbnN0IG5hbWUgPSBvYmoucHJvcCgnbmFtZScpXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW25hbWVdID0gb2JqLnZhbCgpXG4gICAgICBsZXQgZW1wdGllcyA9IGZhbHNlXG4gICAgICBsZXQgdG90YWwgPSAwXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9iamVjdC5zZXR1cFBvaW50cykge1xuICAgICAgICBpZiAodGhpcy5vYmplY3Quc2V0dXBQb2ludHNba2V5XSAhPT0gJycpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbHVjaycpIHtcbiAgICAgICAgICAgIHRvdGFsICs9IHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbXB0aWVzID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBvYmpUb3RhbCA9IG9iai5jbG9zZXN0KCdvbC5pdGVtLWxpc3QnKS5maW5kKCdzcGFuLnRvdGFsJylcbiAgICAgIGNvbnN0IG1heCA9IHBhcnNlSW50KG9ialRvdGFsLnNpYmxpbmdzKCdzcGFuLnZhbHVlJykudGV4dCgpLCAxMClcbiAgICAgIG9ialRvdGFsLnRleHQodG90YWwpXG4gICAgICBpZiAodG90YWwgPT09IG1heCAmJiAhZW1wdGllcykge1xuICAgICAgICBpZiAob2JqLmNsb3Nlc3QoJ2Zvcm0nKS5maW5kKCdidXR0b24uc3VibWl0LWJ1dHRvbltkYXRhLWJ1dHRvbj1uZXh0XScpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChvYmouY2xvc2VzdCgnZm9ybScpLmZpbmQoJ2J1dHRvbi5zdWJtaXQtYnV0dG9uW2RhdGEtYnV0dG9uPW5leHRdJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRQYWdlTnVtYmVyIChkaXJlY3Rpb24pIHtcbiAgICBjb25zdCBwYWdlT3JkZXIgPSB0aGlzLnBhZ2VPcmRlclxuICAgIGNvbnN0IGtleSA9IHBhcnNlSW50KE9iamVjdC5rZXlzKHBhZ2VPcmRlcikuZmluZChrZXkgPT4gcGFnZU9yZGVyW2tleV0gPT09IHRoaXMub2JqZWN0LnN0ZXApLCAxMCkgKyBkaXJlY3Rpb25cbiAgICByZXR1cm4gcGFnZU9yZGVyW2tleV1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGVcbiAgICogQSBzdWJjbGFzcyBvZiB0aGUgRm9ybUFwcGxpY2F0aW9uIG11c3QgaW1wbGVtZW50IHRoZSBfdXBkYXRlT2JqZWN0IG1ldGhvZC5cbiAgICovXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGlmIChbJ2JhY2snLCAnbmV4dCddLmluY2x1ZGVzKGV2ZW50LnN1Ym1pdHRlcj8uZGF0YXNldC5idXR0b24pKSB7XG4gICAgICBpZiAoZXZlbnQuc3VibWl0dGVyLmNsYXNzTmFtZS5pbmRleE9mKCdjdXJyZW50bHktc3VibWl0dGluZycpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBldmVudC5zdWJtaXR0ZXIuY2xhc3NOYW1lID0gZXZlbnQuc3VibWl0dGVyLmNsYXNzTmFtZSArICcgY3VycmVudGx5LXN1Ym1pdHRpbmcnXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZm9ybURhdGFbJ2RlZmF1bHQtc2V0dXAnXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGZvcm1EYXRhWyd3b3JsZC1lcmEnXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGZvcm1EYXRhWydkZWZhdWx0LW93bmVyc2hpcCddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXMub2JqZWN0LmRlZmF1bHRTZXR1cCAhPT0gZm9ybURhdGFbJ2RlZmF1bHQtc2V0dXAnXSkge1xuICAgICAgICB0aGlzLm9iamVjdC5kZWZhdWx0U2V0dXAgPSBmb3JtRGF0YVsnZGVmYXVsdC1zZXR1cCddXG4gICAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFNldHVwJywgdGhpcy5vYmplY3QuZGVmYXVsdFNldHVwKVxuICAgICAgICB0aGlzLm9iamVjdC5zZXR1cCA9IHRoaXMub2JqZWN0LmRlZmF1bHRTZXR1cFxuICAgICAgICB0aGlzLmNsZWFyU2V0dXBQb2ludHMoKVxuICAgICAgICBhd2FpdCB0aGlzLnNldFNraWxsTGlzdHMoKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMub2JqZWN0LmRlZmF1bHRPd25lcnNoaXAgIT09IGZvcm1EYXRhWydkZWZhdWx0LW93bmVyc2hpcCddKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LmRlZmF1bHRPd25lcnNoaXAgPSBmb3JtRGF0YVsnZGVmYXVsdC1vd25lcnNoaXAnXVxuICAgICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRPd25lcnNoaXAnLCB0aGlzLm9iamVjdC5kZWZhdWx0T3duZXJzaGlwKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMub2JqZWN0LmRlZmF1bHRFcmEgIT09IGZvcm1EYXRhWyd3b3JsZC1lcmEnXSkge1xuICAgICAgICBjb25zdCBvYmogPSAkKHRoaXMuZWxlbWVudC5maW5kKCdmb3JtJykpXG4gICAgICAgIGNvbnN0IHN0YXJ0ZWQgPSBEYXRlLm5vdygpXG4gICAgICAgIG9iai5maW5kKCcuZGlhbG9nLWJ1dHRvbnM6Zmlyc3QnKS5oaWRlKClcbiAgICAgICAgb2JqLmZpbmQoJy5zY3JvbGxzZWN0aW9uOmZpcnN0JykuaGlkZSgpXG4gICAgICAgIG9iai5maW5kKCcuZXJhY2hhbmdlOmZpcnN0Jykuc2hvdygpXG4gICAgICAgIHRoaXMub2JqZWN0LmRlZmF1bHRFcmEgPSBmb3JtRGF0YVsnd29ybGQtZXJhJ11cbiAgICAgICAgYXdhaXQgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnd29ybGRFcmEnLCB0aGlzLm9iamVjdC5kZWZhdWx0RXJhKVxuICAgICAgICB0aGlzLm9iamVjdC5jYWNoZUNvQ0lEID0gYXdhaXQgQ29DN0ludmVzdGlnYXRvcldpemFyZC5sb2FkQ2FjaGVJdGVtQnlDb0NJRCgpXG4gICAgICAgIC8vIFRvIHByZXZlbnQgZmxhc2hpbmcgc2hvdyBtZXNzYWdlIGZvciBhdCBsZWFzdCA1MDAgbXNcbiAgICAgICAgY29uc3QgYnVmZmVyID0gNTAwIC0gKERhdGUubm93KCkgLSBzdGFydGVkKVxuICAgICAgICAvLyBEb24ndCBib3RoZXIgaWYgbGVzcyB0aGFuIDEwbXMgcmVtYWluaW5nXG4gICAgICAgIGlmIChidWZmZXIgPiAxMCkge1xuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBidWZmZXIpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoKHR5cGVvZiBmb3JtRGF0YVsnY2hhcmFjdGVyaXN0aWNzLW1ldGhvZCddICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IE51bWJlcihmb3JtRGF0YVsnY2hhcmFjdGVyaXN0aWNzLW1ldGhvZCddKVxuICAgICAgICBpZiAodHlwZSA9PT0gdGhpcy5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9ERUZBVUxUKSB7XG4gICAgICAgICAgdGhpcy5vYmplY3QuZW5mb3JjZVBvaW50QnV5ID0gZmFsc2VcbiAgICAgICAgICB0aGlzLm9iamVjdC5xdWlja0ZpcmVWYWx1ZXMgPSBbXVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IHRoaXMuY2hhcmFjdGVyaXN0aWNzTWV0aG9kcy5NRVRIT0RfUE9JTlRTKSB7XG4gICAgICAgICAgdGhpcy5vYmplY3QuZW5mb3JjZVBvaW50QnV5ID0gdHJ1ZVxuICAgICAgICAgIHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcyA9IFtdXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gdGhpcy5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9WQUxVRVMpIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5lbmZvcmNlUG9pbnRCdXkgPSBmYWxzZVxuICAgICAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUFyY2hldHlwZScpKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdC5xdWlja0ZpcmVWYWx1ZXMgPSBbOTAsIDgwLCA3MCwgNjAsIDYwLCA1MCwgNTAsIDQwXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdC5xdWlja0ZpcmVWYWx1ZXMgPSBbODAsIDcwLCA2MCwgNjAsIDUwLCA1MCwgNTAsIDQwXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRQb2ludEJ1eScsIHRoaXMub2JqZWN0LmVuZm9yY2VQb2ludEJ1eSlcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUXVpY2tGaXJlJywgdGhpcy5vYmplY3QucXVpY2tGaXJlVmFsdWVzKVxuICAgICAgfVxuICAgICAgdGhpcy5vYmplY3QucmVyb2xsc0VuYWJsZWQgPSAodHlwZW9mIGZvcm1EYXRhWydyZXJvbGxzLWVuYWJsZWQnXSA9PT0gJ3N0cmluZycpXG4gICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRSZXJvbGxzJywgdGhpcy5vYmplY3QucmVyb2xsc0VuYWJsZWQpXG4gICAgICBmb3IgKGxldCBpID0gMCwgaW0gPSB0aGlzLm9iamVjdC5xdWlja0ZpcmVWYWx1ZXMubGVuZ3RoOyBpIDwgaW07IGkrKykge1xuICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIoZm9ybURhdGFbJ3F1aWNrLWZpcmUtdmFsdWVzLScgKyBpXSlcbiAgICAgICAgaWYgKG51bSA+IDApIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5xdWlja0ZpcmVWYWx1ZXNbaV0gPSBudW1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5vYmplY3QucXVpY2tGaXJlVmFsdWVzLnNvcnQoKS5yZXZlcnNlKClcbiAgICAgIHRoaXMub2JqZWN0LnBsYWNlYWJsZSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcylcbiAgICAgIGlmICh0eXBlb2YgZm9ybURhdGFbJ2RlZmF1bHQtZW5hYmxlZCddID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGhpcy5vYmplY3QuZGVmYXVsdFF1YW50aXR5LnRvU3RyaW5nKCkgPT09ICcwJykge1xuICAgICAgICAgIHRoaXMub2JqZWN0LmRlZmF1bHRRdWFudGl0eSA9IDFcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRRdWFudGl0eScsIHRoaXMub2JqZWN0LmRlZmF1bHRRdWFudGl0eSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5kZWZhdWx0UXVhbnRpdHkgPSBmb3JtRGF0YVsnZGVmYXVsdC1xdWFudGl0eSddXG4gICAgICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUXVhbnRpdHknLCB0aGlzLm9iamVjdC5kZWZhdWx0UXVhbnRpdHkpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QuZGVmYXVsdFF1YW50aXR5LnRvU3RyaW5nKCkgIT09ICcwJykge1xuICAgICAgICB0aGlzLm9iamVjdC5kZWZhdWx0UXVhbnRpdHkgPSAwXG4gICAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFF1YW50aXR5JywgdGhpcy5vYmplY3QuZGVmYXVsdFF1YW50aXR5KVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZvcm1EYXRhWydjb2Mtc2V0dXAnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0aGlzLm9iamVjdC5zZXR1cCAhPT0gZm9ybURhdGFbJ2NvYy1zZXR1cCddKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnNldHVwID0gZm9ybURhdGFbJ2NvYy1zZXR1cCddXG4gICAgICAgIHRoaXMuY2xlYXJTZXR1cFBvaW50cygpXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U2tpbGxMaXN0cygpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZm9ybURhdGFbJ2NvYy1hcmNoZXR5cGUnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0aGlzLm9iamVjdC5hcmNoZXR5cGUgIT09IGZvcm1EYXRhWydjb2MtYXJjaGV0eXBlJ10pIHtcbiAgICAgICAgdGhpcy5vYmplY3QuYXJjaGV0eXBlID0gZm9ybURhdGFbJ2NvYy1hcmNoZXR5cGUnXVxuICAgICAgICB0aGlzLm9iamVjdC5jb3JlQ2hhcmFjdGVyaXN0aWMgPSAnJ1xuICAgICAgICB0aGlzLmNsZWFyU2V0dXBQb2ludHMoKVxuICAgICAgICBhd2FpdCB0aGlzLnNldFNraWxsTGlzdHMoKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZvcm1EYXRhWydjb2Mtb2NjdXBhdGlvbiddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXMub2JqZWN0Lm9jY3VwYXRpb24gIT09IGZvcm1EYXRhWydjb2Mtb2NjdXBhdGlvbiddKSB7XG4gICAgICAgIHRoaXMub2JqZWN0Lm9jY3VwYXRpb24gPSBmb3JtRGF0YVsnY29jLW9jY3VwYXRpb24nXVxuICAgICAgICBhd2FpdCB0aGlzLnNldFNraWxsTGlzdHMoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9iamVjdC5zZXR1cFBvaW50cykge1xuICAgICAgICBpZiAodHlwZW9mIGZvcm1EYXRhW2tleV0gIT09ICd1bmRlZmluZWQnICYmIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0gIT09IGZvcm1EYXRhW2tleV0pIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldID0gZm9ybURhdGFba2V5XVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGZvcm1EYXRhWydjb2MtY29yZS1jaGFyYWN0ZXJpc3RpYyddICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm9iamVjdC5jb3JlQ2hhcmFjdGVyaXN0aWMgIT09IGZvcm1EYXRhWydjb2MtY29yZS1jaGFyYWN0ZXJpc3RpYyddKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LmNvcmVDaGFyYWN0ZXJpc3RpYyA9IGZvcm1EYXRhWydjb2MtY29yZS1jaGFyYWN0ZXJpc3RpYyddXG4gICAgICAgIHRoaXMuY2xlYXJTZXR1cFBvaW50cygpXG4gICAgICAgIHRoaXMub2JqZWN0LnBsYWNlYWJsZSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcylcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZmxhdEtleXMgPSBbJ25hbWUnLCAnYWdlJywgJ3Jlc2lkZW5jZScsICdiaXJ0aHBsYWNlJywgJ2xhbmd1YWdlJywgJ2F2YXRhcicsICd0b2tlbiddXG4gICAgZm9yIChjb25zdCBrZXkgb2YgZmxhdEtleXMpIHtcbiAgICAgIGlmICh0eXBlb2YgZm9ybURhdGFba2V5XSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5vYmplY3Rba2V5XSAhPT0gZm9ybURhdGFba2V5XSkge1xuICAgICAgICB0aGlzLm9iamVjdFtrZXldID0gZm9ybURhdGFba2V5XVxuICAgICAgICBpZiAoa2V5ID09PSAnYWdlJykge1xuICAgICAgICAgIHRoaXMuZ2V0QWdlQWRqdXN0bWVudHMoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChldmVudC5zdWJtaXR0ZXI/LmRhdGFzZXQuYnV0dG9uID09PSAnYmFjaycpIHtcbiAgICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSB0aGlzLmdldFBhZ2VOdW1iZXIoLTEpXG4gICAgICBpZiAodHlwZW9mIHBhZ2VOdW1iZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnN0ZXAgPSBwYWdlTnVtYmVyXG4gICAgICAgIC8vIFdoZW4gbW92aW5nIHN0ZXAgcmVzZXQgc2Nyb2xsIGhlaWdodFxuICAgICAgICBjb25zdCBvYmogPSB0aGlzLmVsZW1lbnQuZmluZCgnLnNjcm9sbHNlY3Rpb24nKVxuICAgICAgICBpZiAob2JqLmxlbmd0aCAmJiBvYmpbMF0uc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgb2JqWzBdLnNjcm9sbFRvcCA9IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXZlbnQuc3VibWl0dGVyPy5kYXRhc2V0LmJ1dHRvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAodGhpcy5vYmplY3Quc3RlcCA9PT0gdGhpcy5wYWdlTGlzdC5QQUdFX0NSRUFURSB8fCAodGhpcy5vYmplY3Quc3RlcCA9PT0gdGhpcy5wYWdlTGlzdC5QQUdFX0JBQ0tTVE9SWSAmJiBnYW1lLnVzZXIucm9sZSA+PSBDT05TVC5VU0VSX1BFUk1JU1NJT05TLkFDVE9SX0NSRUFURS5kZWZhdWx0Um9sZSkpIHtcbiAgICAgICAgdGhpcy5hdHRlbXB0VG9DcmVhdGUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSB0aGlzLmdldFBhZ2VOdW1iZXIoMSlcbiAgICAgICAgaWYgKHR5cGVvZiBwYWdlTnVtYmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMub2JqZWN0LnN0ZXAgPSBwYWdlTnVtYmVyXG4gICAgICAgICAgLy8gV2hlbiBtb3Zpbmcgc3RlcCByZXNldCBzY3JvbGwgaGVpZ2h0XG4gICAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5lbGVtZW50LmZpbmQoJy5zY3JvbGxzZWN0aW9uJylcbiAgICAgICAgICBpZiAob2JqLmxlbmd0aCAmJiBvYmpbMF0uc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICBvYmpbMF0uc2Nyb2xsVG9wID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgYXR0ZW1wdFRvQ3JlYXRlICgpIHtcbiAgICBjb25zdCBhY3RvckRhdGEgPSBhd2FpdCB0aGlzLm5vcm1hbGl6ZUNoYXJhY3RlckRhdGEodGhpcy5vYmplY3QpXG4gICAgaWYgKGdhbWUudXNlci5pc0dNIHx8IGdhbWUudXNlci5yb2xlID49IENPTlNULlVTRVJfUEVSTUlTU0lPTlMuQUNUT1JfQ1JFQVRFLmRlZmF1bHRSb2xlKSB7XG4gICAgICBjb25zdCBhY3RvciA9IGF3YWl0IENvQzdJbnZlc3RpZ2F0b3JXaXphcmQuY3JlYXRlQ2hhcmFjdGVyKGFjdG9yRGF0YSlcbiAgICAgIGFjdG9yLnNoZWV0LnJlbmRlcih0cnVlKVxuICAgICAgdGhpcy5jbG9zZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGtlZXBlcnMgPSBnYW1lLnVzZXJzLmZpbHRlcih1ID0+IHUuYWN0aXZlICYmIHUuaXNHTSlcbiAgICAgIGlmIChrZWVwZXJzLmxlbmd0aCkge1xuICAgICAgICBhY3RvckRhdGEub3duZXJzaGlwW2dhbWUudXNlci5pZF0gPSBDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk9XTkVSXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgdHlwZTogJ2NoYXJhY3Rlci13aXphcmQnLFxuICAgICAgICAgIGxpc3RlbmVyOiBrZWVwZXJzWzBdLmlkLFxuICAgICAgICAgIHBheWxvYWQ6IGFjdG9yRGF0YVxuICAgICAgICB9XG4gICAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3JywgZGF0YSlcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5JbnZlc3RpZ2F0b3JXaXphcmQuQ3JlYXRpbmdJbnZlc3RpZ2F0b3InKVxuICAgICAgICApXG4gICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JNaXNzaW5nS2VlcGVyVXNlcicpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBub3JtYWxpemVDaGFyYWN0ZXJEYXRhIChkYXRhKSB7XG4gICAgY29uc3Qgd2VhcG9uU2tpbGxzID0ge1xuICAgICAgbWVsZWU6IHt9LFxuICAgICAgcm5nZDoge31cbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSBbXVxuICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEuc2tpbGxJdGVtcykge1xuICAgICAgY29uc3Qgc2tpbGwgPSBkYXRhLnNraWxsSXRlbXNba2V5XVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwLCBpbSA9IHNraWxsLnJvd3MubGVuZ3RoOyBpbmRleCA8IGltOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IHJvdyA9IHNraWxsLnJvd3NbaW5kZXhdXG4gICAgICAgIGlmICghc2tpbGwuZmxhZ3MuaXNNdWx0aXBsZSB8fCByb3cuc2VsZWN0ZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgbGV0IGl0ZW0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShza2lsbC5pdGVtKVxuICAgICAgICAgIGlmIChyb3cuc2VsZWN0ZWQgIT09IGZhbHNlICYmIHR5cGVvZiByb3cuc2VsZWN0ZWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpdGVtID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUocm93LnNlbGVjdGVkKVxuICAgICAgICAgICAgcm93LnNlbGVjdGVkID0gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJvdy5vY2N1cGF0aW9uVG9nZ2xlKSB7XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5mbGFncy5vY2N1cGF0aW9uID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocm93LmFyY2hldHlwZVRvZ2dsZSkge1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0uZmxhZ3MuYXJjaGV0eXBlID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgYmFzZSA9IGl0ZW0uc3lzdGVtLmJhc2VcbiAgICAgICAgICBpZiAoIU51bWJlci5pc051bWVyaWMoYmFzZSkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEuc2V0dXBQb2ludHMpIHtcbiAgICAgICAgICAgICAgY29uc3QgcmVnRXggPSBuZXcgUmVnRXhwKCdAJyArIGtleSwgJ2knKVxuICAgICAgICAgICAgICBiYXNlID0gYmFzZS5yZXBsYWNlKHJlZ0V4LCBwYXJzZUludChkYXRhLnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnNba2V5XSwgMTApKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIU51bWJlci5pc051bWVyaWMoYmFzZSkpIHtcbiAgICAgICAgICAgIGJhc2UgPSBNYXRoLmZsb29yKG5ldyBSb2xsKGJhc2UpLmV2YWx1YXRlKHsgYXN5bmM6IGZhbHNlIH0pLnRvdGFsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtLnN5c3RlbS5iYXNlID0gYmFzZVxuICAgICAgICAgIGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzID0gaXRlbS5zeXN0ZW0uYWRqdXN0bWVudHMgPz8ge31cbiAgICAgICAgICBpZiAoTnVtYmVyKHJvdy5wZXJzb25hbFBvaW50cykgPiAwKSB7XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5hZGp1c3RtZW50cy5wZXJzb25hbCA9IHBhcnNlSW50KHJvdy5wZXJzb25hbFBvaW50cywgMTApXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChOdW1iZXIocm93Lm9jY3VwYXRpb25Qb2ludHMpID4gMCkge1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0uYWRqdXN0bWVudHMub2NjdXBhdGlvbiA9IHBhcnNlSW50KHJvdy5vY2N1cGF0aW9uUG9pbnRzLCAxMClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKE51bWJlcihyb3cuYXJjaGV0eXBlUG9pbnRzKSA+IDApIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzLmFyY2hldHlwZSA9IHBhcnNlSW50KHJvdy5hcmNoZXR5cGVQb2ludHMsIDEwKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoTnVtYmVyKHJvdy5leHBlcmllbmNlUG9pbnRzKSA+IDApIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UgPSBwYXJzZUludChyb3cuZXhwZXJpZW5jZVBvaW50cywgMTApXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrZXkgPT09IHRoaXMuY29jaWRMYW5ndWFnZU93bikge1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lID0gZGF0YS5sYW5ndWFnZVxuICAgICAgICAgICAgaXRlbS5uYW1lID0gaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gKyAnICgnICsgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lICsgJyknXG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygcm93LnNlbGVjdGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lID0gcm93LnNlbGVjdGVkXG4gICAgICAgICAgICBpdGVtLl9pZCA9IGZvdW5kcnkudXRpbHMucmFuZG9tSUQoKVxuICAgICAgICAgICAgaXRlbS5uYW1lID0gaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gKyAnICgnICsgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lICsgJyknXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0uZmxhZ3MuQ29DNz8uY29jaWRGbGFnPy5pZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgaXRlbS5mbGFncy5Db0M3LmNvY2lkRmxhZy5pZCA9IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5ndWVzc0lkKGl0ZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5maWdodGluZykge1xuICAgICAgICAgICAgd2VhcG9uU2tpbGxzLm1lbGVlW2l0ZW0ubmFtZV0gPSBpdGVtLl9pZFxuICAgICAgICAgICAgd2VhcG9uU2tpbGxzLm1lbGVlW2l0ZW0uc3lzdGVtLnNraWxsTmFtZV0gPSBpdGVtLl9pZFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5zeXN0ZW0ucHJvcGVydGllcz8uZmlyZWFybSkge1xuICAgICAgICAgICAgd2VhcG9uU2tpbGxzLnJuZ2RbaXRlbS5uYW1lXSA9IGl0ZW0uX2lkXG4gICAgICAgICAgICB3ZWFwb25Ta2lsbHMucm5nZFtpdGVtLnN5c3RlbS5za2lsbE5hbWVdID0gaXRlbS5faWRcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc291cmNlSXRlbSBvZiBkYXRhLmludmVzdGlnYXRvckl0ZW1zKSB7XG4gICAgICBjb25zdCBpdGVtID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoc291cmNlSXRlbSlcbiAgICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLm1lbGVlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2VhcG9uU2tpbGxzLm1lbGVlW2l0ZW0uc3lzdGVtLnNraWxsLm1haW4ubmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaXRlbS5zeXN0ZW0uc2tpbGwubWFpbi5pZCA9IHdlYXBvblNraWxscy5tZWxlZVtpdGVtLnN5c3RlbS5za2lsbC5tYWluLm5hbWVdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3ZWFwb25Ta2lsbHMubWVsZWVbaXRlbS5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpdGVtLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkID0gd2VhcG9uU2tpbGxzLm1lbGVlW2l0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYubmFtZV1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3ZWFwb25Ta2lsbHMucm5nZFtpdGVtLnN5c3RlbS5za2lsbC5tYWluLm5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGl0ZW0uc3lzdGVtLnNraWxsLm1haW4uaWQgPSB3ZWFwb25Ta2lsbHMucm5nZFtpdGVtLnN5c3RlbS5za2lsbC5tYWluLm5hbWVdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3ZWFwb25Ta2lsbHMucm5nZFtpdGVtLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2Lm5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGl0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQgPSB3ZWFwb25Ta2lsbHMucm5nZFtpdGVtLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2Lm5hbWVdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0ZW1zLnB1c2goaXRlbSlcbiAgICB9XG4gICAgbGV0IG1vbmV0YXJ5ID0ge31cbiAgICBjb25zdCBzZXR1cCA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGVJdGVtQnlDb0NJRCh0aGlzLm9iamVjdC5zZXR1cClcbiAgICBpZiAoc2V0dXApIHtcbiAgICAgIG1vbmV0YXJ5ID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoc2V0dXAuc3lzdGVtLm1vbmV0YXJ5KVxuICAgIH1cbiAgICBjb25zdCBkZXZlbG9wbWVudCA9IHtcbiAgICAgIHBlcnNvbmFsOiAyICogKHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHMuaW50LCAxMCkgKyBwYXJzZUludChkYXRhLnNldHVwTW9kaWZpZXJzLmludCwgMTApKSxcbiAgICAgIG9jY3VwYXRpb246IDAsXG4gICAgICBhcmNoZXR5cGU6IDBcbiAgICB9XG4gICAgaWYgKGRhdGEuYXJjaGV0eXBlICE9PSAnJykge1xuICAgICAgY29uc3QgYXJjaGV0eXBlID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRChkYXRhLmFyY2hldHlwZSlcbiAgICAgIGlmIChhcmNoZXR5cGUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGl0ZW1zLnB1c2goYXJjaGV0eXBlWzBdLnRvT2JqZWN0KCkpXG4gICAgICAgIGRldmVsb3BtZW50LmFyY2hldHlwZSA9IGFyY2hldHlwZVswXS5zeXN0ZW0uYm9udXNQb2ludHNcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRhdGEub2NjdXBhdGlvbiAhPT0gJycpIHtcbiAgICAgIGNvbnN0IG9jY3VwYXRpb24gPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZnJvbUNvQ0lEKGRhdGEub2NjdXBhdGlvbilcbiAgICAgIGlmIChvY2N1cGF0aW9uLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpdGVtcy5wdXNoKG9jY3VwYXRpb25bMF0udG9PYmplY3QoKSlcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgY2FyYWNdIG9mIE9iamVjdC5lbnRyaWVzKG9jY3VwYXRpb25bMF0uc3lzdGVtLm9jY3VwYXRpb25Ta2lsbFBvaW50cykpIHtcbiAgICAgICAgICBpZiAoY2FyYWMuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIGlmIChjYXJhYy5vcHRpb25hbCkge1xuICAgICAgICAgICAgICBvcHRpb25zLnB1c2goY2FyYWMubXVsdGlwbGllciAqIChwYXJzZUludChkYXRhLnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnNba2V5XSwgMTApKSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRldmVsb3BtZW50Lm9jY3VwYXRpb24gKz0gY2FyYWMubXVsdGlwbGllciAqIChwYXJzZUludChkYXRhLnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnNba2V5XSwgMTApKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGV2ZWxvcG1lbnQub2NjdXBhdGlvbiArPSBNYXRoLm1heCguLi5vcHRpb25zKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGJpb2dyYXBoeSA9IFtdXG4gICAgZm9yIChsZXQgaW5kZXggPSAwLCBpbSA9IGRhdGEuYmlvU2VjdGlvbnMubGVuZ3RoOyBpbmRleCA8IGltOyBpbmRleCsrKSB7XG4gICAgICBiaW9ncmFwaHkucHVzaCh7XG4gICAgICAgIHRpdGxlOiBkYXRhLmJpb1NlY3Rpb25zW2luZGV4XS5uYW1lLFxuICAgICAgICB2YWx1ZTogZGF0YS5iaW9TZWN0aW9uc1tpbmRleF0udmFsdWVcbiAgICAgIH0pXG4gICAgfVxuICAgIGNvbnN0IGFjdG9yRGF0YSA9IHtcbiAgICAgIHR5cGU6ICdjaGFyYWN0ZXInLFxuICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgaW1nOiBkYXRhLmF2YXRhcixcbiAgICAgIHN5c3RlbToge1xuICAgICAgICBjaGFyYWN0ZXJpc3RpY3M6IHtcbiAgICAgICAgICBzdHI6IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkYXRhLnNldHVwUG9pbnRzLnN0ciwgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVycy5zdHIsIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uOiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZGF0YS5zZXR1cFBvaW50cy5jb24sIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnMuY29uLCAxMClcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNpejoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHMuc2l6LCAxMCkgKyBwYXJzZUludChkYXRhLnNldHVwTW9kaWZpZXJzLnNpeiwgMTApXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZXg6IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkYXRhLnNldHVwUG9pbnRzLmRleCwgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVycy5kZXgsIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXBwOiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZGF0YS5zZXR1cFBvaW50cy5hcHAsIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnMuYXBwLCAxMClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludDoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHMuaW50LCAxMCkgKyBwYXJzZUludChkYXRhLnNldHVwTW9kaWZpZXJzLmludCwgMTApXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb3c6IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkYXRhLnNldHVwUG9pbnRzLnBvdywgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVycy5wb3csIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWR1OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZGF0YS5zZXR1cFBvaW50cy5lZHUsIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnMuZWR1LCAxMClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnM6IHtcbiAgICAgICAgICBsY2s6IHtcbiAgICAgICAgICAgIHZhbHVlOiBNYXRoLm1heChwYXJzZUludChkYXRhLnNldHVwUG9pbnRzLmx1Y2ssIDEwKSwgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVycy5sdWNrLCAxMCkpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzYW46IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkYXRhLnNldHVwUG9pbnRzLnBvdywgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVycy5wb3csIDEwKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5mb3M6IHtcbiAgICAgICAgICBhZ2U6IGRhdGEuYWdlLFxuICAgICAgICAgIHJlc2lkZW5jZTogZGF0YS5yZXNpZGVuY2UsXG4gICAgICAgICAgYmlydGhwbGFjZTogZGF0YS5iaXJ0aHBsYWNlXG4gICAgICAgIH0sXG4gICAgICAgIGRldmVsb3BtZW50LFxuICAgICAgICBiaW9ncmFwaHksXG4gICAgICAgIG1vbmV0YXJ5XG4gICAgICB9LFxuICAgICAgcHJvdG90eXBlVG9rZW46IHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICBhY3Rvckxpbms6IHRydWUsXG4gICAgICAgIHRleHR1cmU6IHtcbiAgICAgICAgICBzcmM6IGRhdGEudG9rZW5cbiAgICAgICAgfSxcbiAgICAgICAgZGlzcG9zaXRpb246IENPTlNULlRPS0VOX0RJU1BPU0lUSU9OUy5GUklFTkRMWSxcbiAgICAgICAgc2lnaHQ6IHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpdGVtcyxcbiAgICAgIG93bmVyc2hpcDoge1xuICAgICAgICBkZWZhdWx0OiBwYXJzZUludChkYXRhLmRlZmF1bHRPd25lcnNoaXAsIDEwKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWN0b3JEYXRhXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlQ2hhcmFjdGVyRnJvbURhdGEgKGFjdG9yRGF0YSkge1xuICAgIGNvbnN0IGFjdG9yID0gYXdhaXQgQ29DN0ludmVzdGlnYXRvcldpemFyZC5jcmVhdGVDaGFyYWN0ZXIoYWN0b3JEYXRhKVxuICAgIGNvbnN0IGZ1bmN0aW9uSWQgPSBIb29rcy5vbigncmVuZGVyQWN0b3JTaGVldCcsIChhcHAsIGh0bWwsIGRhdGEpID0+IHtcbiAgICAgIGlmIChhcHAub2JqZWN0LmlkID09PSBhY3Rvci5pZCkge1xuICAgICAgICBnYW1lLnNvY2tldC5lbWl0KCdzeXN0ZW0uQ29DNycsIHtcbiAgICAgICAgICB0eXBlOiAnb3Blbi1jaGFyYWN0ZXInLFxuICAgICAgICAgIGxpc3RlbmVyOiBPYmplY3Qua2V5cyhhY3RvckRhdGEub3duZXJzaGlwKS5maW5kKGsgPT4gayAhPT0gJ2RlZmF1bHQnKSxcbiAgICAgICAgICBwYXlsb2FkOiBhY3Rvci5pZFxuICAgICAgICB9KVxuICAgICAgICBIb29rcy5vZmYoJ3JlbmRlckFjdG9yU2hlZXQnLCBmdW5jdGlvbklkKVxuICAgICAgfVxuICAgIH0pXG4gICAgYWN0b3Iuc2hlZXQucmVuZGVyKHRydWUpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlQ2hhcmFjdGVyIChhY3RvckRhdGEpIHtcbiAgICBjb25zdCBhY3RvciA9IGF3YWl0IEFjdG9yLmNyZWF0ZShhY3RvckRhdGEpXG4gICAgYXdhaXQgYWN0b3IudXBkYXRlKHtcbiAgICAgICdzeXN0ZW0uYXR0cmlicy5ocC52YWx1ZSc6IGFjdG9yLnJhd0hwTWF4LFxuICAgICAgJ3N5c3RlbS5hdHRyaWJzLm1wLnZhbHVlJzogYWN0b3IucmF3TXBNYXgsXG4gICAgICAnc3lzdGVtLmF0dHJpYnMuc2FuLm1heCc6IGFjdG9yLnJhd01wTWF4XG4gICAgfSlcbiAgICBhd2FpdCBhY3Rvci5yZXNldERhaWx5U2FuaXR5KClcbiAgICByZXR1cm4gYWN0b3JcbiAgfVxuXG4gIC8qKlxuICAgKiBjcmVhdGUgaXQncyB0aGUgZGVmYXVsdCB3YXkgdG8gY3JlYXRlIHRoZSBDb0M3Q2hhcmFjdGVyV2l6YXJkXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgY3JlYXRlIChvcHRpb25zID0ge30pIHtcbiAgICAvLyBUcnkgYW5kIHByZXJlcXVzdCBhcyBtYW55IENvQ0lEcyBkdWUgdG8gdGhlIHdheSB0aGV5IGhhdmUgdG8gYmUgbG9hZGVkXG4gICAgb3B0aW9ucyA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoe1xuICAgICAgc3RlcDogMCxcbiAgICAgIGRlZmF1bHRTZXR1cDogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkU2V0dXAnKSxcbiAgICAgIGRlZmF1bHRRdWFudGl0eTogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUXVhbnRpdHknKSxcbiAgICAgIGRlZmF1bHRPd25lcnNoaXA6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZE93bmVyc2hpcCcpLFxuICAgICAgZGVmYXVsdEVyYTogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnd29ybGRFcmEnKSxcbiAgICAgIHJlcm9sbHNFbmFibGVkOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRSZXJvbGxzJyksXG4gICAgICBlbmZvcmNlUG9pbnRCdXk6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFBvaW50QnV5JyksXG4gICAgICBxdWlja0ZpcmVWYWx1ZXM6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFF1aWNrRmlyZScpLFxuICAgICAgcGxhY2VhYmxlOiBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRRdWlja0ZpcmUnKSksXG4gICAgICBjYWNoZUNvQ0lEOiBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkLmxvYWRDYWNoZUl0ZW1CeUNvQ0lEKCksXG4gICAgICBjYWNoZUJhY2tzdG9yaWVzOiBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZnJvbUNvQ0lEUmVnZXhCZXN0KHsgY29jaWRSZWdFeHA6IC9ecnRcXC5cXC5iYWNrc3RvcnktLywgdHlwZTogJ3J0JyB9KSxcbiAgICAgIGNhY2hlSXRlbXM6IHt9LFxuICAgICAgc2V0dXA6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFNldHVwJyksXG4gICAgICBza2lsbEl0ZW1zOiB7fSxcbiAgICAgIG9jY3VwYXRpb25Hcm91cHM6IHt9LFxuICAgICAgaW52ZXN0aWdhdG9ySXRlbXM6IFtdLFxuICAgICAgc2V0dXBQb2ludHM6IHtcbiAgICAgICAgc3RyOiAnJyxcbiAgICAgICAgY29uOiAnJyxcbiAgICAgICAgc2l6OiAnJyxcbiAgICAgICAgZGV4OiAnJyxcbiAgICAgICAgYXBwOiAnJyxcbiAgICAgICAgaW50OiAnJyxcbiAgICAgICAgcG93OiAnJyxcbiAgICAgICAgZWR1OiAnJyxcbiAgICAgICAgbHVjazogJydcbiAgICAgIH0sXG4gICAgICBzZXR1cE1vZGlmaWVyczoge1xuICAgICAgICBzdHI6IDAsXG4gICAgICAgIGNvbjogMCxcbiAgICAgICAgc2l6OiAwLFxuICAgICAgICBkZXg6IDAsXG4gICAgICAgIGFwcDogMCxcbiAgICAgICAgaW50OiAwLFxuICAgICAgICBwb3c6IDAsXG4gICAgICAgIGVkdTogMCxcbiAgICAgICAgbHVjazogMFxuICAgICAgfSxcbiAgICAgIGFyY2hldHlwZTogJycsXG4gICAgICBjb3JlQ2hhcmFjdGVyaXN0aWM6ICcnLFxuICAgICAgb2NjdXBhdGlvbjogJycsXG4gICAgICBiaW9TZWN0aW9uczogW10sXG4gICAgICBwZXJzb25hbDogMCxcbiAgICAgIHBlcnNvbmFsVGV4dDogJycsXG4gICAgICBjcmVkaXRSYXRpbmc6IHtcbiAgICAgICAgbWluOiAwLFxuICAgICAgICBtYXg6IDBcbiAgICAgIH0sXG4gICAgICBuYW1lOiAnJyxcbiAgICAgIGFnZTogJycsXG4gICAgICByZXF1aXJlc0FnZUFkanVzdG1lbnRzOiBmYWxzZSxcbiAgICAgIHJlc2lkZW5jZTogJycsXG4gICAgICBiaXJ0aHBsYWNlOiAnJyxcbiAgICAgIGxhbmd1YWdlOiAnJyxcbiAgICAgIGF2YXRhcjogJ2ljb25zL3N2Zy9teXN0ZXJ5LW1hbi5zdmcnLFxuICAgICAgdG9rZW46ICdpY29ucy9zdmcvbXlzdGVyeS1tYW4uc3ZnJ1xuICAgIH0sIG9wdGlvbnMpXG4gICAgbmV3IENvQzdJbnZlc3RpZ2F0b3JXaXphcmQob3B0aW9ucykucmVuZGVyKHRydWUpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBjYW52YXMsIGZvdW5kcnksIGdhbWUsIFBsYWNlYWJsZXNMYXllciAqL1xuaW1wb3J0IHsgQ29DN0NoYXQgfSBmcm9tICcuL2NoYXQuanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBDb0M3QWN0b3JJbXBvcnRlckRpYWxvZyB9IGZyb20gJy4vYXBwcy9hY3Rvci1pbXBvcnRlci1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb0M3Q29udGVudExpbmtEaWFsb2cgfSBmcm9tICcuL2FwcHMvY29jNy1jb250ZW50LWxpbmstZGlhbG9nLmpzJ1xuaW1wb3J0IHsgQ29DN0ludmVzdGlnYXRvcldpemFyZCB9IGZyb20gJy4vYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkLmpzJ1xuXG5jbGFzcyBDb0M3TWVudUxheWVyIGV4dGVuZHMgUGxhY2VhYmxlc0xheWVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLm9iamVjdHMgPSB7fVxuICB9XG5cbiAgc3RhdGljIGdldCBsYXllck9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmxheWVyT3B0aW9ucywge1xuICAgICAgbmFtZTogJ2NvYzdtZW51JyxcbiAgICAgIHpJbmRleDogNjBcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGdldCBkb2N1bWVudE5hbWUgKCkge1xuICAgIHJldHVybiAnVG9rZW4nXG4gIH1cblxuICBnZXQgcGxhY2VhYmxlcyAoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvQzdNZW51IHtcbiAgc3RhdGljIGdldEJ1dHRvbnMgKGNvbnRyb2xzKSB7XG4gICAgY2FudmFzLmNvYzdnbXRvb2xzID0gbmV3IENvQzdNZW51TGF5ZXIoKVxuICAgIGNvbnN0IGlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cbiAgICBjb25zdCBzaG93SGlkZGVuRGV2TWVudSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2hpZGRlbmRldm1lbnUnKVxuICAgIGNvbnRyb2xzLnB1c2goe1xuICAgICAgbmFtZTogJ2NvYzdtZW51JyxcbiAgICAgIHRpdGxlOiAnQ29DNy5HbVRvb2xzJyxcbiAgICAgIGxheWVyOiAnY29jN2dtdG9vbHMnLFxuICAgICAgaWNvbjogJ2dhbWUtaWNvbiBnYW1lLWljb24tdGVudGFjbGUtc3RyaWtlJyxcbiAgICAgIHZpc2libGU6IGlzS2VlcGVyLFxuICAgICAgdG9vbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICAgICAgICBpY29uOiAnZmFzIGZhLWFuZ2xlLWRvdWJsZS11cCcsXG4gICAgICAgICAgbmFtZTogJ2RldnBoYXNlJyxcbiAgICAgICAgICBhY3RpdmU6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2RldmVsb3BtZW50RW5hYmxlZCcpLFxuICAgICAgICAgIHRpdGxlOiAnQ29DNy5EZXZQaGFzZScsXG4gICAgICAgICAgb25DbGljazogYXN5bmMgdG9nZ2xlID0+IGF3YWl0IENvQzdVdGlsaXRpZXMudG9nZ2xlRGV2UGhhc2UodG9nZ2xlKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgICAgIGljb246ICdmYXMgZmEtdXNlci1lZGl0JyxcbiAgICAgICAgICBuYW1lOiAnY2hhcmNyZWF0ZScsXG4gICAgICAgICAgYWN0aXZlOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdjaGFyQ3JlYXRpb25FbmFibGVkJyksXG4gICAgICAgICAgdGl0bGU6ICdDb0M3LkNoYXJDcmVhdGlvbk1vZGUnLFxuICAgICAgICAgIG9uQ2xpY2s6IGFzeW5jIHRvZ2dsZSA9PlxuICAgICAgICAgICAgYXdhaXQgQ29DN1V0aWxpdGllcy50b2dnbGVDaGFyQ3JlYXRpb24odG9nZ2xlKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYnV0dG9uOiB0cnVlLFxuICAgICAgICAgIGljb246ICdmYXMgZmEtdXNlci1wbHVzJyxcbiAgICAgICAgICBuYW1lOiAnYWN0b3ItaW1wb3J0JyxcbiAgICAgICAgICB0aXRsZTogJ0NvQzcuQWN0b3JJbXBvcnRlcicsXG4gICAgICAgICAgb25DbGljazogYXN5bmMgKCkgPT4gYXdhaXQgQ29DN0FjdG9ySW1wb3J0ZXJEaWFsb2cuY3JlYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICBpY29uOiAnZmFzIGZhLXVzZXItY2hlY2snLFxuICAgICAgICAgIG5hbWU6ICdpbnZlc3RpZ2F0b3Itd2l6YXJkJyxcbiAgICAgICAgICB0aXRsZTogJ0NvQzcuSW52ZXN0aWdhdG9yV2l6YXJkLlRpdGxlJyxcbiAgICAgICAgICBvbkNsaWNrOiBhc3luYyAoKSA9PiBhd2FpdCBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkLmNyZWF0ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0b2dnbGU6IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2ZhcyBmYS1jZXJ0aWZpY2F0ZScsXG4gICAgICAgICAgY2xhc3M6ICd4cF90b2dnbGUnLFxuICAgICAgICAgIG5hbWU6ICd4cHRvZ2dsZScsXG4gICAgICAgICAgYWN0aXZlOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd4cEVuYWJsZWQnKSxcbiAgICAgICAgICB0aXRsZTogJ0NvQzcudG9nZ2xlWFAnLFxuICAgICAgICAgIG9uQ2xpY2s6IGFzeW5jIHRvZ2dsZSA9PiBhd2FpdCBDb0M3VXRpbGl0aWVzLnRvZ2dsZVhQR2Fpbih0b2dnbGUpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBidXR0b246IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2dhbWUtaWNvbiBnYW1lLWljb24tY2FyZC1qb2tlcicsXG4gICAgICAgICAgbmFtZTogJ2Zha2Vyb2xsJyxcbiAgICAgICAgICB0aXRsZTogJ0NvQzcuRmFrZVJvbGwnLFxuICAgICAgICAgIG9uQ2xpY2s6IENvQzdDaGF0LmZha2VSb2xsTWVzc2FnZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYnV0dG9uOiB0cnVlLFxuICAgICAgICAgIGljb246ICdmYXMgZmEtbW9vbicsXG4gICAgICAgICAgbmFtZTogJ3N0YXJ0cmVzdCcsXG4gICAgICAgICAgdGl0bGU6ICdDb0M3LnN0YXJ0UmVzdCcsXG4gICAgICAgICAgb25DbGljazogYXN5bmMgKCkgPT4gYXdhaXQgQ29DN1V0aWxpdGllcy5nZXRUYXJnZXQoKVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgICBpZiAoc2hvd0hpZGRlbkRldk1lbnUpIHtcbiAgICAgIGNhbnZhcy5jb2M3RGV2VG9vbHMgPSBuZXcgQ29DN01lbnVMYXllcigpXG4gICAgICBjb250cm9scy5wdXNoKHtcbiAgICAgICAgbmFtZTogJ2NvYzdEZXZNZW51JyxcbiAgICAgICAgdGl0bGU6XG4gICAgICAgICAgXCJEZXYgdG9vbHMuIElmIHlvdSBkb24ndCBrbm93IHdoYXQgaXQgaXMsIHlvdSBkb24ndCBuZWVkIGl0IGFuZCB5b3Ugc2hvdWxkbid0IHVzZSBpdCAhIVwiLFxuICAgICAgICBsYXllcjogJ2NvYzdEZXZUb29scycsXG4gICAgICAgIGljb246ICdnYW1lLWljb24gZ2FtZS1pY29uLXBvbGljZS1iYWRnZScsXG4gICAgICAgIHZpc2libGU6IGlzS2VlcGVyLFxuICAgICAgICB0b29sczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICAgICAgICAgIGljb246ICdnYW1lLWljb24gZ2FtZS1pY29uLWRpY2UtZmlyZScsXG4gICAgICAgICAgICBuYW1lOiAnYWx3YXlzQ3JpdCcsXG4gICAgICAgICAgICBhY3RpdmU6IGdhbWUuQ29DNy5kZXYuZGljZS5hbHdheXNDcml0LFxuICAgICAgICAgICAgdGl0bGU6ICdBbGwgcm9sbHMgd2lsbCBjcml0JyxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRvZ2dsZSA9PiB7XG4gICAgICAgICAgICAgIGdhbWUuQ29DNy5kZXYuZGljZS5hbHdheXNGdW1ibGUgPSBmYWxzZVxuICAgICAgICAgICAgICBnYW1lLkNvQzcuZGV2LmRpY2UuYWx3YXlzQ3JpdCA9IHRvZ2dsZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgICAgICAgaWNvbjogJ2dhbWUtaWNvbiBnYW1lLWljb24tZmlyZS1leHRpbmd1aXNoZXInLFxuICAgICAgICAgICAgbmFtZTogJ2Fsd2F5c0Z1bWJsZScsXG4gICAgICAgICAgICBhY3RpdmU6IGdhbWUuQ29DNy5kZXYuZGljZS5hbHdheXNGdW1ibGUsXG4gICAgICAgICAgICB0aXRsZTogJ0FsbCByb2xscyB3aWxsIGZ1bWJsZScsXG4gICAgICAgICAgICBvbkNsaWNrOiB0b2dnbGUgPT4ge1xuICAgICAgICAgICAgICBnYW1lLkNvQzcuZGV2LmRpY2UuYWx3YXlzRnVtYmxlID0gdG9nZ2xlXG4gICAgICAgICAgICAgIGdhbWUuQ29DNy5kZXYuZGljZS5hbHdheXNDcml0ID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHJlbmRlckNvbnRyb2xzIChhcHAsIGh0bWwsIGRhdGEpIHtcbiAgICBjb25zdCBpc0tlZXBlciA9IGdhbWUudXNlci5pc0dNXG4gICAgY29uc3Qga2VlcGVyTWVudSA9IGh0bWwuZmluZCgnLmdhbWUtaWNvbi10ZW50YWNsZS1zdHJpa2UnKS5wYXJlbnQoKVxuICAgIGtlZXBlck1lbnUuYWRkQ2xhc3MoJ2NvYzctbWVudScpXG4gICAgaWYgKGlzS2VlcGVyKSB7XG4gICAgICBrZWVwZXJNZW51LmFmdGVyKFxuICAgICAgICAnPGxpIGNsYXNzPVwic2NlbmUtY29udHJvbCBjb2M3LW1lbnUgY29jNy1jcmVhdGUtbGlua1wiIHRpdGxlPVwiJyArXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyZWF0ZUxpbmsnKSArXG4gICAgICAgICAgJ1wiPjxpIGNsYXNzPVwiZmFzIGZhLWxpbmtcIj48L2k+PC9saT4nXG4gICAgICApXG4gICAgfVxuICAgIGtlZXBlck1lbnUuYWZ0ZXIoXG4gICAgICAnPGxpIGNsYXNzPVwic2NlbmUtY29udHJvbCBjb2M3LW1lbnUgY29jNy1kaWNlLXJvbGxcIiB0aXRsZT1cIicgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUm9sbERpY2UnKSArXG4gICAgICAgICdcIj48aSBjbGFzcz1cImdhbWUtaWNvbiBnYW1lLWljb24tZDEwXCI+PC9pPjwvbGk+J1xuICAgIClcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmNvYzctbWVudS5jb2M3LWRpY2Utcm9sbCcpXG4gICAgICAuY2xpY2soZXZlbnQgPT4gQ29DN1V0aWxpdGllcy5yb2xsRGljZShldmVudCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5jb2M3LW1lbnUuY29jNy1jcmVhdGUtbGluaycpXG4gICAgICAuY2xpY2soZXZlbnQgPT4gQ29DN0NvbnRlbnRMaW5rRGlhbG9nLmNyZWF0ZShldmVudCkpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBnYW1lLCB1aSAqL1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IENvQzdMaW5rIH0gZnJvbSAnLi9jb2M3LWxpbmsuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q2FudmFzIHtcbiAgc3RhdGljIGdldCBDT0M3X1RZUEVTX1NVUFBPUlRFRCAoKSB7XG4gICAgcmV0dXJuIFsnQ29DN0xpbmsnLCAnbG9jYXRvcicsICdnZXRUb2tlbiddXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgb25Ecm9wU29tZXRoaW5nIChjYW52YXMsIGRhdGEpIHtcbiAgICBpZiAoXG4gICAgICBkYXRhLnR5cGUgJiZcbiAgICAgIENvQzdDYW52YXMuQ09DN19UWVBFU19TVVBQT1JURUQuaW5jbHVkZXMoZGF0YS50eXBlKVxuICAgICkge1xuICAgICAgY29uc3QgZ3JpZFNpemUgPSBjYW52YXMuc2NlbmUuZ3JpZC5zaXplXG4gICAgICBjb25zdCB4ID0gZGF0YS54IC0gZ3JpZFNpemUgLyAyXG4gICAgICBjb25zdCB5ID0gZGF0YS55IC0gZ3JpZFNpemUgLyAyXG4gICAgICBjb25zdCBoZWlnaHQgPSBncmlkU2l6ZVxuICAgICAgY29uc3Qgd2lkdGggPSBncmlkU2l6ZVxuICAgICAgbGV0IGRyb3BUYXJnZXRUb2tlbnMgPSBjYW52YXMudG9rZW5zLnBsYWNlYWJsZXMuZmlsdGVyKG9iaiA9PiB7XG4gICAgICAgIGNvbnN0IGMgPSBvYmouY2VudGVyXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgTnVtYmVyLmJldHdlZW4oYy54LCB4LCB4ICsgd2lkdGgpICYmXG4gICAgICAgICAgTnVtYmVyLmJldHdlZW4oYy55LCB5LCB5ICsgaGVpZ2h0KVxuICAgICAgICApXG4gICAgICB9KSAvLyBGaW5kIGRyb3AgdGFyZ2V0LlxuICAgICAgaWYgKCFkcm9wVGFyZ2V0VG9rZW5zLmxlbmd0aCkgZHJvcFRhcmdldFRva2VucyA9IGNhbnZhcy50b2tlbnMuY29udHJvbGxlZCAvLyBJZiBubyB0YXJnZXQgd2hpc3BlciB0byBzZWxlY3RlZCB0b2tlblxuICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnQ29DN0xpbmsnOlxuICAgICAgICAgIGlmIChkYXRhLmNoZWNrID09PSBDb0M3TGluay5DSEVDS19UWVBFLkVGRkVDVCkge1xuICAgICAgICAgICAgaWYgKGRyb3BUYXJnZXRUb2tlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgZHJvcFRhcmdldFRva2Vucykge1xuICAgICAgICAgICAgICAgIENvQzdMaW5rLl9vbkxpbmtBY3RvckNsaWNrKHRva2VuLmFjdG9yLCBkYXRhKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBBcHBseSB0byBldmVyeW9uZSA/IG9yIG9ubHkgcGxheWVycyA/IG9yIG5vYm9keVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZHJvcFRhcmdldFRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIENvQzdMaW5rLnRvV2hpc3Blck1lc3NhZ2UoZGF0YSwgZHJvcFRhcmdldFRva2Vucy5maWx0ZXIodCA9PiB0LmFjdG9yLm93bmVycy5sZW5ndGgpLm1hcCh0ID0+IHQuYWN0b3IpKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBDb0M3TGluay50b1doaXNwZXJNZXNzYWdlKGRhdGEsIGdhbWUudXNlcnMucGxheWVycy5maWx0ZXIodSA9PiAhIXUuY2hhcmFjdGVyKS5tYXAodSA9PiB1LmNoYXJhY3RlcikpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2dldFRva2VuJzpcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGEuYXBwSWQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkYXRhLmNhbGxCYWNrID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdWkud2luZG93c1tkYXRhLmFwcElkXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHVpLndpbmRvd3NbZGF0YS5hcHBJZF1bZGF0YS5jYWxsQmFja10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHVpLndpbmRvd3NbZGF0YS5hcHBJZF1bZGF0YS5jYWxsQmFja10oZHJvcFRhcmdldFRva2VucylcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICAvLyBIYW5kbGVzIGdlbmVyaWMgY2FudmEgZHJvcC5cbiAgICAgICAgLy8gZGF0YVRyYW5zZmVyIG11c3QgaW5jbHVkZSA6XG4gICAgICAgIC8vIC0gZG9jVXVpZCA6IHRoZSBVdWlkIG9mIHRoZSBkb2N1bWVudCB0byBjYWxsXG4gICAgICAgIC8vIC0gY2FsbEJhY2sgOiB0aGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gY2FsbCBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICAgIC8vIFVzZWQgdG8gc2VsZWN0IGxvY2F0aW9uIGZvciBjaGFzZVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChkYXRhLmRvY1V1aWQgJiYgZGF0YS5jYWxsQmFjaykge1xuICAgICAgICAgICAgY29uc3QgZG9jID0gQ29DN1V0aWxpdGllcy5TZnJvbVV1aWQoZGF0YS5kb2NVdWlkKVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBkb2NbZGF0YS5jYWxsQmFja10gJiZcbiAgICAgICAgICAgICAgdHlwZW9mIGRvY1tkYXRhLmNhbGxCYWNrXSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zY2VuZSA9IGNhbnZhcy5zY2VuZS51dWlkXG4gICAgICAgICAgICAgICAgZG9jW2RhdGEuY2FsbEJhY2tdKGRhdGEpXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycm9yLm1lc3NhZ2UpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBDT05GSUcsIERpYWxvZywgZ2FtZSwgU2V0dGluZ3MgKi9cbmV4cG9ydCBjbGFzcyBDb0M3U2V0dGluZ3NEaXJlY3RvcnkgZXh0ZW5kcyBTZXR0aW5ncyB7XG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJyNzZXR0aW5ncy1nYW1lJylcbiAgICAgICAgLmFwcGVuZChcbiAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cInRyaWdnZXItZGF0YS1taWdyYXRpb25cIj48aSBjbGFzcz1cImZhcyBmYS13cmVuY2hcIj48L2k+ICcgK1xuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1pZ3JhdGUuVHJpZ2dlckJ1dHRvbicpICtcbiAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgIClcbiAgICAgIGh0bWwuZmluZCgnI3NldHRpbmdzLWRvY3VtZW50YXRpb24nKVxuICAgICAgICAuYXBwZW5kKCc8YnV0dG9uIGNsYXNzPVwidHJpZ2dlci1zeXN0ZW0tbWFudWFsXCI+PGkgY2xhc3M9XCJmYXMgZmEtYm9va3NcIj48L2k+ICcgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU3lzdGVtLkRvY3VtZW50YXRpb24nKSArXG4gICAgICAgICc8L2J1dHRvbj4nKVxuICAgICAgaHRtbC5maW5kKCcudHJpZ2dlci1kYXRhLW1pZ3JhdGlvbicpLmNsaWNrKCgpID0+IHtcbiAgICAgICAgbmV3IERpYWxvZyhcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1pZ3JhdGUuVHJpZ2dlclRpdGxlJyksXG4gICAgICAgICAgICBjb250ZW50OiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWlncmF0ZS5UcmlnZ2VyQ29udGVudHMnKSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgbWlncmF0ZToge1xuICAgICAgICAgICAgICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1jaGVja1wiPjwvaT4nLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWlncmF0ZS5UcmlnZ2VyUmVzdGFydCcpLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdzeXN0ZW1VcGRhdGVWZXJzaW9uJywgMClcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2xvc2U6IHtcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtYmFuXCI+PC9pPicsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ2FuY2VsJyksXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHt9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0OiAnY2xvc2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7fVxuICAgICAgICApLnJlbmRlcih0cnVlKVxuICAgICAgfSlcbiAgICAgIGh0bWwuZmluZCgnLnRyaWdnZXItc3lzdGVtLW1hbnVhbCcpLmNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgKGF3YWl0IGdhbWUucGFja3MuZ2V0KCdDb0M3LnN5c3RlbS1kb2MnKS5nZXREb2N1bWVudChDT05GSUcuQ29DNy5NYW51YWwpKT8uc2hlZXQucmVuZGVyKHRydWUpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsIENvbXBlbmRpdW1EaXJlY3RvcnksIERpYWxvZywgZ2FtZSAqL1xuZXhwb3J0IGNsYXNzIENvQzdDb21wZW5kaXVtRGlyZWN0b3J5IGV4dGVuZHMgQ29tcGVuZGl1bURpcmVjdG9yeSB7XG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICBsZXQgdHJhbnNsYXRlZCA9IGZhbHNlXG4gICAgaWYgKGdhbWUuaTE4bi5sYW5nID09PSAnZW4nKSB7XG4gICAgICB0cmFuc2xhdGVkID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGdhbWUuYmFiZWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChjb25zdCB2IG9mIE9iamVjdC52YWx1ZXMoZ2FtZS5iYWJlbGUubW9kdWxlcykpIHtcbiAgICAgICAgaWYgKHYubGFuZyA9PT0gZ2FtZS5pMThuLmxhbmcpIHtcbiAgICAgICAgICB0cmFuc2xhdGVkID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnZm9vdGVyLmRpcmVjdG9yeS1mb290ZXInKVxuICAgICAgICAuYXBwZW5kKFxuICAgICAgICAgICc8YSBjbGFzcz1cImNvbXBlbmRpdW0tdHJhbnNsYXRpb25cIiB0aXRsZT1cIicgK1xuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkhvd1RvVHJhbnNsYXRlVGl0bGUnKSArXG4gICAgICAgICAgICAnXCI+JyArXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSG93VG9UcmFuc2xhdGVUaXRsZScpICtcbiAgICAgICAgICAgICc8L2E+J1xuICAgICAgICApXG4gICAgICBodG1sLmZpbmQoJy5jb21wZW5kaXVtLXRyYW5zbGF0aW9uJykuY2xpY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlID1cbiAgICAgICAgICAnPHA+JyArXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkhvd1RvVHJhbnNsYXRlV2FybmluZycpICtcbiAgICAgICAgICAnPC9wPicgK1xuICAgICAgICAgICc8cD4nICtcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSG93VG9UcmFuc2xhdGVJbnN0YWxsQmFiZWxlJykgK1xuICAgICAgICAgICc8L3A+JyArXG4gICAgICAgICAgJzxwPicgK1xuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ib3dUb1RyYW5zbGF0ZUluc3RhbGxUcmFuc2xhdGlvbicpICtcbiAgICAgICAgICAnPC9wPicgK1xuICAgICAgICAgICc8cD4nICtcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSG93VG9UcmFuc2xhdGVFbmFibGVUcmFuc2xhdGlvbicpICtcbiAgICAgICAgICAnPC9wPicgK1xuICAgICAgICAgICc8cD4nICtcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSG93VG9UcmFuc2xhdGVOb1RyYW5zbGF0aW9uJykgK1xuICAgICAgICAgICc8L3A+J1xuICAgICAgICBuZXcgRGlhbG9nKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSG93VG9UcmFuc2xhdGVUaXRsZScpLFxuICAgICAgICAgICAgY29udGVudDogbWVzc2FnZSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHt9LFxuICAgICAgICAgICAgZGVmYXVsdDogJ2Nsb3NlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge31cbiAgICAgICAgKS5yZW5kZXIodHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQWN0b3JEaXJlY3RvcnksIENPTlNULCBnYW1lICovXG5pbXBvcnQgeyBDb0M3QWN0b3JJbXBvcnRlckRpYWxvZyB9IGZyb20gJy4vYXBwcy9hY3Rvci1pbXBvcnRlci1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkIH0gZnJvbSAnLi9hcHBzL2ludmVzdGlnYXRvci13aXphcmQuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3QWN0b3JEaXJlY3RvcnkgZXh0ZW5kcyBBY3RvckRpcmVjdG9yeSB7XG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIC8vIEFsbG93IEludmVzdGlnYXRvciBXaXphcmRcbiAgICAvLyAgKiBJZiB0aGUgdXNlciByb2xlIGlzIGFsbG93ZWQgdG8gY3JlYXRlIGFjdG9yc1xuICAgIC8vICAqIElmIHRoZSB1c2VyIGhhcyBsZXNzIG93bmVkIGFjdG9ycyB0aGFuIGFsbG93ZWQgaW4gc2V0dGluZ3NcbiAgICBsZXQgYWxsb3dXaXphcmQgPSBnYW1lLnVzZXIucm9sZSA+PSBDT05TVC5VU0VSX1BFUk1JU1NJT05TLkFDVE9SX0NSRUFURS5kZWZhdWx0Um9sZVxuICAgIGlmICghYWxsb3dXaXphcmQpIHtcbiAgICAgIGNvbnN0IGFsbG93ZWQgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRRdWFudGl0eScpXG4gICAgICBpZiAoYWxsb3dlZCA+IDApIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBnYW1lLmFjdG9ycy5maWx0ZXIoYSA9PiBbYS5vd25lcnNoaXAuZGVmYXVsdCwgKGEub3duZXJzaGlwW2dhbWUudXNlci5pZF0gPz8gQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5OT05FKV0uaW5jbHVkZXMoQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5PV05FUikpLmxlbmd0aFxuICAgICAgICBhbGxvd1dpemFyZCA9IGV4aXN0aW5nIDwgYWxsb3dlZFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhbGxvd1dpemFyZCkge1xuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnZm9vdGVyLmRpcmVjdG9yeS1mb290ZXInKVxuICAgICAgICAuYXBwZW5kKCc8YSBjbGFzcz1cImludmVzdGlnYXRvci13aXphcmRcIj4nICsgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkludmVzdGlnYXRvcldpemFyZC5UaXRsZScpICsgJzwvYT4nKVxuICAgICAgaHRtbC5maW5kKCcuaW52ZXN0aWdhdG9yLXdpemFyZCcpLmNsaWNrKCgpID0+IHtcbiAgICAgICAgQ29DN0ludmVzdGlnYXRvcldpemFyZC5jcmVhdGUoKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoZ2FtZS51c2VyLnJvbGUgPj0gQ09OU1QuVVNFUl9QRVJNSVNTSU9OUy5BQ1RPUl9DUkVBVEUuZGVmYXVsdFJvbGUpIHtcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJ2Zvb3Rlci5kaXJlY3RvcnktZm9vdGVyJylcbiAgICAgICAgLmFwcGVuZChcbiAgICAgICAgICAnPGEgY2xhc3M9XCJhY3Rvci1pbXBvcnRcIj4nICtcbiAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BY3RvckltcG9ydGVyJykgK1xuICAgICAgICAgICAgJzwvYT4nXG4gICAgICAgIClcbiAgICAgIGh0bWwuZmluZCgnLmFjdG9yLWltcG9ydCcpLmNsaWNrKCgpID0+IHtcbiAgICAgICAgQ29DN0FjdG9ySW1wb3J0ZXJEaWFsb2cuY3JlYXRlKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ2hhdE1lc3NhZ2UsIERpYWxvZywgZm91bmRyeSwgZ2FtZSwgUm9sbCwgcmVuZGVyVGVtcGxhdGUsIHVpICovXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzLmpzJ1xuaW1wb3J0IHsgQ29DN0l0ZW0gfSBmcm9tICcuLi9pdGVtLmpzJ1xuaW1wb3J0IHsgU2FuQ2hlY2tDYXJkIH0gZnJvbSAnLi4vLi4vY2hhdC9jYXJkcy9zYW4tY2hlY2suanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3U3BlbGwgZXh0ZW5kcyBDb0M3SXRlbSB7XG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvcGVudGFncmFtLXJvc2Uuc3ZnJ1xuICAgIH1cbiAgICBzdXBlcihkYXRhLCBjb250ZXh0KVxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHRcbiAgfVxuXG4gIGFzeW5jIGNhc3QgKCkge1xuICAgIGlmICghdGhpcy5pc093bmVkKSB7XG4gICAgICAvKiogVGhpcyBpcyBub3Qgb3duZWQgYnkgYW55IEFjdG9yICovXG4gICAgICByZXR1cm4gdWkubm90aWZpY2F0aW9ucy5lcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm90T3duZWQnKSlcbiAgICB9XG4gICAgY29uc3QgY29zdHMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5jb3N0cylcbiAgICBjb25zdCBsb3NzZXMgPSBbXVxuICAgIGxldCBjb252ZXJ0U3VycGx1c0ludG9IaXRQb2ludHNcbiAgICBjb3N0cy5tYWdpY1BvaW50cyA9IENvQzdVdGlsaXRpZXMuaXNGb3JtdWxhKGNvc3RzLm1hZ2ljUG9pbnRzKVxuICAgICAgPyAoYXdhaXQgbmV3IFJvbGwoY29zdHMubWFnaWNQb2ludHMpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KSkudG90YWxcbiAgICAgIDogcGFyc2VJbnQoY29zdHMubWFnaWNQb2ludHMpXG4gICAgaWYgKFxuICAgICAgY29zdHMubWFnaWNQb2ludHMgJiZcbiAgICAgIGNvc3RzLm1hZ2ljUG9pbnRzID4gdGhpcy5hY3Rvci5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZVxuICAgICkge1xuICAgICAgY29udmVydFN1cnBsdXNJbnRvSGl0UG9pbnRzID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZEhpdFBvaW50cyA9XG4gICAgICAgICAgY29zdHMubWFnaWNQb2ludHMgLSB0aGlzLmFjdG9yLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlXG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZE1hZ2ljUG9pbnRzID0gY29zdHMubWFnaWNQb2ludHMgLSBjb252ZXJ0ZWRIaXRQb2ludHNcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICB0aXRsZTogJyAnLFxuICAgICAgICAgIGNvbnRlbnQ6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTm90RW5vdWdoTWFnaWNQb2ludHMnLCB7XG4gICAgICAgICAgICBhY3Rvck1hZ2ljUG9pbnRzOiB0aGlzLmFjdG9yLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlLFxuICAgICAgICAgICAgY29udmVydGVkSGl0UG9pbnRzLFxuICAgICAgICAgICAgY29udmVydGVkTWFnaWNQb2ludHMsXG4gICAgICAgICAgICBvcmlnaW5hbE1hZ2ljUG9pbnRzOiBjb3N0cy5tYWdpY1BvaW50cyxcbiAgICAgICAgICAgIHNwZWxsOiB0aGlzLm5hbWVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICBjYW5jZWw6IHtcbiAgICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPicsXG4gICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ2FuY2VsJyksXG4gICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZmFsc2UpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZWVkOiB7XG4gICAgICAgICAgICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1jaGVja1wiPjwvaT4nLFxuICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlByb2NlZWQnKSxcbiAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb3N0cy5oaXRQb2ludHMgPSBjb252ZXJ0ZWRIaXRQb2ludHNcbiAgICAgICAgICAgICAgICBjb3N0cy5tYWdpY1BvaW50cyA9IGNvbnZlcnRlZE1hZ2ljUG9pbnRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVmYXVsdDogJ2NhbmNlbCcsXG4gICAgICAgICAgY2xhc3NlczogWydjb2M3JywgJ2RpYWxvZyddXG4gICAgICAgIH1cbiAgICAgICAgbmV3IERpYWxvZyhkYXRhKS5yZW5kZXIodHJ1ZSlcbiAgICAgIH0pXG4gICAgICBpZiAoIWNvbnZlcnRTdXJwbHVzSW50b0hpdFBvaW50cykgcmV0dXJuXG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNvc3RzKSkge1xuICAgICAgaWYgKCF2YWx1ZSB8fCBOdW1iZXIodmFsdWUpID09PSAwKSBjb250aW51ZVxuICAgICAgbG9zc2VzLnB1c2goYXdhaXQgdGhpcy5yZXNvbHZlTG9zc2VzKGtleSwgdmFsdWUpKVxuICAgIH1cbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL3NwZWxsL2NoYXQuaHRtbCdcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB7IGRlc2NyaXB0aW9uLCBsb3NzZXMgfSlcbiAgICByZXR1cm4gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKHtcbiAgICAgIHVzZXI6IGdhbWUudXNlci5pZCxcbiAgICAgIHNwZWFrZXI6IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoeyBhY3RvcjogdGhpcy5hY3RvciB9KSxcbiAgICAgIGZsYXZvcjogdGhpcy5uYW1lLFxuICAgICAgY29udGVudDogaHRtbFxuICAgIH0pXG4gIH1cblxuICBhc3luYyByZXNvbHZlTG9zc2VzIChjaGFyYWN0ZXJpc3RpYywgdmFsdWUpIHtcbiAgICBsZXQgY2hhcmFjdGVyaXN0aWNOYW1lXG4gICAgbGV0IGxvc3NcbiAgICBpZiAoQ29DN1V0aWxpdGllcy5pc0Zvcm11bGEodmFsdWUpKSB7XG4gICAgICBsb3NzID0gKGF3YWl0IG5ldyBSb2xsKHZhbHVlKS5yb2xsKHsgYXN5bmM6IHRydWUgfSkpLnRvdGFsXG4gICAgfSBlbHNlIHtcbiAgICAgIGxvc3MgPSBwYXJzZUludCh2YWx1ZSlcbiAgICB9XG4gICAgY29uc3QgYWN0b3JEYXRhID0gdGhpcy5hY3Rvci5zeXN0ZW1cbiAgICBzd2l0Y2ggKGNoYXJhY3RlcmlzdGljKSB7XG4gICAgICBjYXNlICdoaXRQb2ludHMnOlxuICAgICAgICBjaGFyYWN0ZXJpc3RpY05hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGl0UG9pbnRzJylcbiAgICAgICAgdGhpcy5hY3Rvci5kZWFsRGFtYWdlKGxvc3MsIHsgaWdub3JlQXJtb3I6IHRydWUgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3Nhbml0eSc6XG4gICAgICAgIGNoYXJhY3RlcmlzdGljTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHlQb2ludHMnKVxuICAgICAgICB0aGlzLmdyYW50U2FuaXR5TG9zcyhsb3NzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbWFnaWNQb2ludHMnOlxuICAgICAgICBjaGFyYWN0ZXJpc3RpY05hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWFnaWNQb2ludHMnKVxuICAgICAgICB0aGlzLmFjdG9yLnNldE1wKGFjdG9yRGF0YS5hdHRyaWJzLm1wLnZhbHVlIC0gbG9zcylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3Bvd2VyJzpcbiAgICAgICAgY2hhcmFjdGVyaXN0aWNOYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuUG93ZXInKVxuICAgICAgICB0aGlzLmFjdG9yLnVwZGF0ZSh7XG4gICAgICAgICAgJ3N5c3RlbS5jaGFyYWN0ZXJpc3RpY3MucG93LnZhbHVlJzpcbiAgICAgICAgICAgIGFjdG9yRGF0YS5jaGFyYWN0ZXJpc3RpY3MucG93LnZhbHVlIC0gbG9zc1xuICAgICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4geyBjaGFyYWN0ZXJpc3RpY05hbWUsIGxvc3MgfVxuICB9XG5cbiAgLyoqIEJ5cGFzcyB0aGUgU2FuaXR5IGNoZWNrIGFuZCBqdXN0IHJvbGwgdGhlIGRhbWFnZSAqL1xuICBhc3luYyBncmFudFNhbml0eUxvc3MgKHZhbHVlKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBTYW5DaGVja0NhcmQudGVtcGxhdGVcbiAgICBsZXQgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB7fSlcbiAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKHtcbiAgICAgIHVzZXI6IGdhbWUudXNlci5pZCxcbiAgICAgIHNwZWFrZXI6IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoeyBhY3RvcjogdGhpcy5hY3RvciB9KSxcbiAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5DYXN0aW5nU3BlbGwnLCB7XG4gICAgICAgIHNwZWxsOiB0aGlzLm5hbWVcbiAgICAgIH0pLFxuICAgICAgY29udGVudDogaHRtbFxuICAgIH0pXG4gICAgY29uc3QgY2FyZCA9IGF3YWl0IG1lc3NhZ2UuZ2V0SFRNTCgpXG4gICAgaWYgKHR5cGVvZiBjYXJkLmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FyZC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IHNhbml0eUxvc3MgPSB2YWx1ZVxuICAgICAgaHRtbCA9IGNhcmQuZmluZCgnLmNoYXQtY2FyZCcpWzBdXG4gICAgICBodG1sLmRhdGFzZXQub2JqZWN0ID0gZXNjYXBlKFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgYWN0b3JLZXk6IHRoaXMuYWN0b3IuaWQsXG4gICAgICAgICAgZmFzdEZvcndhcmQ6IGZhbHNlLFxuICAgICAgICAgIHNhbkRhdGE6IHtcbiAgICAgICAgICAgIHNhbk1pbjogc2FuaXR5TG9zcyxcbiAgICAgICAgICAgIHNhbk1heDogc2FuaXR5TG9zc1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIGNvbnN0IHNhbml0eUNoZWNrID0gU2FuQ2hlY2tDYXJkLmdldEZyb21DYXJkKGh0bWwpXG4gICAgICBhd2FpdCBzYW5pdHlDaGVjay5ieXBhc3NSb2xsU2FuKClcbiAgICAgIGF3YWl0IHNhbml0eUNoZWNrLnJvbGxTYW5Mb3NzKClcbiAgICAgIHNhbml0eUNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICB9XG4gIH1cblxuICBhc3luYyB1cGRhdGUgKGRhdGEsIGNvbnRleHQpIHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgdGhpcy5jb250ZXh0LnBhcmVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiB0aGlzLmNvbnRleHQuYm9va0lkICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgbGV0IGl0ZW1cbiAgICAgIGxldCBib29rXG4gICAgICAvLyBsZXQgc3BlbGxEYXRhXG4gICAgICBpZiAodGhpcy5jb250ZXh0LnBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICBpdGVtID0gZ2FtZS5pdGVtcy5nZXQodGhpcy5jb250ZXh0LmJvb2tJZClcbiAgICAgICAgYm9vayA9IGl0ZW0udG9PYmplY3QoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm9vayA9IHRoaXMuY29udGV4dC5wYXJlbnQuaXRlbXMuZ2V0KHRoaXMuY29udGV4dC5ib29rSWQpLnRvT2JqZWN0KClcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwLCBpbSA9IGJvb2suc3lzdGVtLnNwZWxscy5sZW5ndGg7IGkgPCBpbTsgaSsrKSB7XG4gICAgICAgIGlmIChib29rLnN5c3RlbS5zcGVsbHNbaV0uX2lkID09PSB0aGlzLmlkKSB7XG4gICAgICAgICAgYm9vay5zeXN0ZW0uc3BlbGxzW2ldID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChib29rLnN5c3RlbS5zcGVsbHNbaV0sIGRhdGEpXG4gICAgICAgICAgLy8gc3BlbGxEYXRhID0gYm9vay5zeXN0ZW0uc3BlbGxzW2ldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbnRleHQucGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgIGF3YWl0IGl0ZW0udXBkYXRlKHtcbiAgICAgICAgICAnc3lzdGVtLnNwZWxscyc6IGJvb2suc3lzdGVtLnNwZWxsc1xuICAgICAgICB9KVxuICAgICAgICB0aGlzLnNoZWV0Lm9iamVjdCA9IG5ldyBDb0M3U3BlbGwoXG4gICAgICAgICAgYm9vay5zeXN0ZW0uc3BlbGxzLmZpbmQoc3BlbGwgPT4gc3BlbGwuX2lkID09PSB0aGlzLmlkKSxcbiAgICAgICAgICB0aGlzLmNvbnRleHRcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0LnBhcmVudC51cGRhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtib29rXSlcbiAgICAgICAgdGhpcy5zaGVldC5vYmplY3QgPSBuZXcgQ29DN1NwZWxsKFxuICAgICAgICAgIGJvb2suc3lzdGVtLnNwZWxscy5maW5kKHNwZWxsID0+IHNwZWxsLl9pZCA9PT0gdGhpcy5pZCksXG4gICAgICAgICAgdGhpcy5jb250ZXh0XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHRoaXMuc2hlZXQucmVuZGVyKHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHN1cGVyLnVwZGF0ZShkYXRhLCBjb250ZXh0KVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsIENoYXRNZXNzYWdlLCBmb3VuZHJ5LCBnYW1lLCByZW5kZXJUZW1wbGF0ZSwgUm9sbCwgdWkgKi9cbmltcG9ydCB7IFNhbkNoZWNrQ2FyZCB9IGZyb20gJy4uLy4uL2NoYXQvY2FyZHMvc2FuLWNoZWNrLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uL2l0ZW0uanMnXG5pbXBvcnQgeyBDb0M3U3BlbGwgfSBmcm9tICcuLi9zcGVsbC9kYXRhLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN0Jvb2sgZXh0ZW5kcyBDb0M3SXRlbSB7XG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvc2VjcmV0LWJvb2suc3ZnJ1xuICAgIH1cbiAgICBzdXBlcihkYXRhLCBjb250ZXh0KVxuICB9XG5cbiAgLyoqIENvbnZlcnQgdGhlIGRpZmZpY3VsdHkgb24gdGhlIHNlbGVjdCBlbGVtZW50IHRvIGEgZm9ybWF0IGFjY2VwdGVkICovXG4gIHN0YXRpYyBjb252ZXJ0RGlmZmljdWx0eSAoZGlmZmljdWx0eSkge1xuICAgIHN3aXRjaCAoZGlmZmljdWx0eSkge1xuICAgICAgY2FzZSAnaGFyZCc6XG4gICAgICAgIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmhhcmRcbiAgICAgIGNhc2UgJ2V4dHJlbWUnOlxuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lXG4gICAgICBjYXNlICdjcml0aWNhbCc6XG4gICAgICAgIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmNyaXRpY2FsXG4gICAgICBjYXNlICd1bnJlYWRhYmxlJzpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaW1wb3NzaWJsZVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgdGhlIGZ1dHVyZTogYWRkIGFkdmFuY2VkIHJ1bGVzIGZvciBsZWFybmluZyBzcGVsbHMsIHBnLiAxNzZcbiAgICogQHBhcmFtIFt7RG9jdW1lbnR9XSBzcGVsbHNcbiAgICogQHJldHVybnMge1Byb21pc2U8RG9jdW1lbnQ+fSB1cGRhdGUgdG8gSXRlbSBkb2N1bWVudFxuICAgKi9cbiAgYXN5bmMgYWRkU3BlbGxzIChzcGVsbHMpIHtcbiAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5zeXN0ZW0uc3BlbGxzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLnNwZWxscylcbiAgICAgIDogW11cbiAgICBmb3IgKGNvbnN0IHNwZWxsIG9mIHNwZWxscykge1xuICAgICAgY29sbGVjdGlvbi5wdXNoKHNwZWxsKVxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLnNwZWxscyc6IGNvbGxlY3Rpb24gfSlcbiAgfVxuXG4gIGFzeW5jIHNwZWxsRGV0YWlsIChpbmRleCkge1xuICAgIGNvbnN0IGlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cbiAgICBjb25zdCBkYXRhID0gdGhpcy5zeXN0ZW0uc3BlbGxzW2luZGV4XVxuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuYWN0b3IgPyB0aGlzLmFjdG9yIDogbnVsbFxuICAgIGNvbnN0IHNwZWxsID0gbmV3IENvQzdTcGVsbChkYXRhLCB7IHBhcmVudCwgYm9va0lkOiB0aGlzLmlkIH0pXG4gICAgaWYgKGlzS2VlcGVyIHx8IHNwZWxsLnN5c3RlbS5sZWFybmVkKSB7XG4gICAgICByZXR1cm4gYXdhaXQgc3BlbGwuc2hlZXQucmVuZGVyKHRydWUpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYWxsIHRoZSBsb2dpYyBpbnZvbHZpbmcgdGhlIGF0dGVtcHQgb2YgaW5pdGlhbCByZWFkaW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBAc2VlIGxpc3RlbiBAc2VlIGdyYW50SW5pdGlhbFJlYWRpbmdcbiAgICovXG4gIGFzeW5jIGF0dGVtcHRJbml0aWFsUmVhZGluZyAoKSB7XG4gICAgLyoqIENvbnZlcnRzIHRoZSBkaWZmaWN1bHR5IHZhbHVlIHRvIHNvbWV0aGluZyBhY2NlcHRlZCBieSBDb0M3Q2hlY2sgKi9cbiAgICBjb25zdCBkaWZmaWN1bHR5ID0gQ29DN0Jvb2suY29udmVydERpZmZpY3VsdHkoXG4gICAgICB0aGlzLnN5c3RlbS5kaWZmaWN1bHR5TGV2ZWxcbiAgICApXG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLnN5c3RlbS5sYW5ndWFnZVxuICAgIGNvbnN0IHNraWxsID0gdGhpcy5hY3Rvcj8uZ2V0U2tpbGxzQnlOYW1lKGxhbmd1YWdlKVxuICAgIGlmICghc2tpbGwpIHtcbiAgICAgIC8qKiBUaGlzIGlzIG5vdCBvd25lZCBieSBhbnkgQWN0b3IgKi9cbiAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob3RPd25lZCcpKVxuICAgIH0gZWxzZSBpZiAoc2tpbGwubGVuZ3RoID09PSAwKSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBBY3RvciB3aG8gb3ducyB0aGlzIGRvZXMgbm90IGhhdmUgdGhlIHNraWxsIG9mXG4gICAgICAgKiB0aGUgbGFuZ3VhZ2UgaW4gd2hpY2ggaXQgd2FzIHdyaXR0ZW5cbiAgICAgICAqL1xuICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuVW5rbm93bkxhbmd1YWdlJywgeyBhY3RvcjogdGhpcy5hY3Rvci5uYW1lIH0pXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgICBjaGVjay5hY3RvciA9IHRoaXMuYWN0b3JcbiAgICAgIGNoZWNrLnNraWxsID0gc2tpbGxbMF0uaWRcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5XG4gICAgICBjaGVjay5wYXJlbnQgPSB0aGlzLnV1aWRcbiAgICAgIGNoZWNrLmNvbnRleHQgPSAnSU5JVElBTF9SRUFESU5HJ1xuICAgICAgY2hlY2suZmxhdm9yID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZWFkQXR0ZW1wdCcsIHtcbiAgICAgICAgYm9vazogdGhpcy5uYW1lLFxuICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgZGlmZmljdWx0eTogdGhpcy5zeXN0ZW0uZGlmZmljdWx0eUxldmVsXG4gICAgICB9KVxuICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICByZXR1cm4gYXdhaXQgY2hlY2sudG9NZXNzYWdlKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRzIGlzIGNhbGxlZCBldmVyeSB0aW1lIHRoZSB1c2VyIGludGVyYWN0cyBpbiBzb21lIHdheSB3aXRoIHByb2dyZXNzIGJhclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSAncmVzZXQnIHx8ICdpbmNyZWFzZScgfHwgJ2RlY3JlYXNlJ1xuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUganVzdCBzbyB0aGF0IHByb2dyZXNzIGlzIG5vdCBncmVhdGVyIHRoYW4gbmVjZXNzYXJ5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERvY3VtZW50Pn0gdXBkYXRlIHRvIEl0ZW0gZG9jdW1lbnRcbiAgICovXG4gIGFzeW5jIGNoYW5nZVByb2dyZXNzIChtb2RlLCB2YWx1ZSkge1xuICAgIGlmICghdGhpcy5pc093bmVkICYmIG1vZGUgIT09ICdyZXNldCcpIHtcbiAgICAgIC8qKiBUaGlzIGlzIG5vdCBvd25lZCBieSBhbnkgQWN0b3IgKi9cbiAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob3RPd25lZCcpKVxuICAgIH1cbiAgICBpZiAoIXRoaXMuc3lzdGVtLmluaXRpYWxSZWFkaW5nICYmIG1vZGUgIT09ICdyZXNldCcpIHtcbiAgICAgIC8qKiBBY3RvciBkaWQgbm90IHBlcmZvcm1lZCBhbiBpbml0aWFsIHJlYWRpbmcgZmlyc3QgKi9cbiAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkluaXRpYWxSZWFkaW5nTmVlZGVkJywge1xuICAgICAgICAgIGFjdG9yOiB0aGlzLmFjdG9yLm5hbWUsXG4gICAgICAgICAgYm9vazogdGhpcy5uYW1lXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfVxuICAgIGlmICghdGhpcy5zeXN0ZW0udHlwZS5teXRob3MgJiYgbW9kZSAhPT0gJ3Jlc2V0Jykge1xuICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vdE15dGhvc1RvbWUnKSlcbiAgICB9XG4gICAgY29uc3QgbmVjZXNzYXJ5ID0gdGhpcy5zeXN0ZW0uc3R1ZHkubmVjZXNzYXJ5XG4gICAgbGV0IGZ1bGxTdHVkeSA9IHRoaXMuc3lzdGVtLmZ1bGxTdHVkeVxuICAgIGxldCBwcm9ncmVzcyA9IHRoaXMuc3lzdGVtLnN0dWR5LnByb2dyZXNzXG4gICAgaWYgKGlzTmFOKHByb2dyZXNzKSkge1xuICAgICAgLyoqIEl0IHNlZW1zIGEgbGl0dGxlIGltcG9zc2libGUsIGJ1dCB5b3UgbmV2ZXIga25vdyAqL1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5zdHVkeS5wcm9ncmVzcyc6IDBcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmICh2YWx1ZSAmJiBwcm9ncmVzcyA+IHZhbHVlKSB7XG4gICAgICAvKipcbiAgICAgICAqIFByb2dyZXNzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB2YWx1ZSBlbnRlcmVkIGJ5IHVzZXIgYXMgbmVjZXNzYXJ5LFxuICAgICAgICogcmVzZXQgcHJvZ3Jlc3MgdG8gYmUgZXF1YWwgbmVjZXNzYXJ5IGFuZCBjb21wbGV0ZSBmdWxsIHN0dWR5XG4gICAgICAgKi9cbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5mdWxsU3R1ZHknOiArK2Z1bGxTdHVkeSxcbiAgICAgICAgJ3N5c3RlbS5zdHVkeS5wcm9ncmVzcyc6IHZhbHVlXG4gICAgICB9KVxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29tcGxldGVGdWxsU3R1ZHkoKVxuICAgIH1cbiAgICBpZiAobW9kZSA9PT0gJ2luY3JlYXNlJyAmJiBwcm9ncmVzcyA8IG5lY2Vzc2FyeSkge1xuICAgICAgLyoqIFVzZXIgY2xpY2tlZCBvbiBwbHVzIGljb24gdG8gaW5jcmVhc2UgcHJvZ3Jlc3MgKi9cbiAgICAgIGlmICgoYXdhaXQgdGhpcy5jaGVja0V4aGF1c3Rpb24oKSkgIT09IGZhbHNlKSByZXR1cm5cbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5zdHVkeS5wcm9ncmVzcyc6ICsrcHJvZ3Jlc3NcbiAgICAgIH0pXG4gICAgICBpZiAocHJvZ3Jlc3MgPT09IG5lY2Vzc2FyeSkge1xuICAgICAgICAvKiogQ29tcGxldGUgZnVsbCBzdHVkeSBpZiBwcm9ncmVzcyBpcyBlcXVhbCBuZWNlc3NhcnkgKi9cbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmZ1bGxTdHVkeSc6ICsrZnVsbFN0dWR5IH0pXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdyYW50RnVsbFN0dWR5KClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdkZWNyZWFzZScgJiYgcHJvZ3Jlc3MgPiAwKSB7XG4gICAgICAvKiogVXNlciBjbGlja2VkIG9uIG1pbnVzIGljb24gdG8gZGVjcmVhc2UgcHJvZ3Jlc3MgKi9cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICdzeXN0ZW0uc3R1ZHkucHJvZ3Jlc3MnOiAtLXByb2dyZXNzXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNoZWNrRXhoYXVzdGlvbiAoKSB7XG4gICAgY29uc3QgYWN0b3JNeXRob3NWYWx1ZSA9IHRoaXMuYWN0b3I/LmN0aHVsaHVNeXRob3NcbiAgICBjb25zdCBteXRob3NSYXRpbmcgPSB0aGlzLnN5c3RlbS5teXRob3NSYXRpbmdcbiAgICBpZiAodGhpcy5zeXN0ZW0uaW5pdGlhbFJlYWRpbmcpIHtcbiAgICAgIGlmIChhY3Rvck15dGhvc1ZhbHVlID49IG15dGhvc1JhdGluZykge1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgJ3N5c3RlbS5zdHVkeS5wcm9ncmVzcyc6IHRoaXMuc3lzdGVtLnN0dWR5Lm5lY2Vzc2FyeVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQm9va0hhc05vdGhpbmdNb3JlVG9UZWFjaCcsIHtcbiAgICAgICAgICAgIGFjdG9yOiB0aGlzLmFjdG9yLm5hbWUsXG4gICAgICAgICAgICBib29rOiB0aGlzLm5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICB9IGVsc2UgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ3JhbnRGdWxsU3R1ZHkgKCkge1xuICAgIGlmICghdGhpcy5zeXN0ZW0udHlwZS5teXRob3MpIHJldHVyblxuICAgIGlmICgoYXdhaXQgdGhpcy5jaGVja0V4aGF1c3Rpb24oKSkgIT09IGZhbHNlKSByZXR1cm5cbiAgICBjb25zdCBhY3Rvck15dGhvc1ZhbHVlID0gdGhpcy5hY3Rvci5jdGh1bGh1TXl0aG9zXG4gICAgY29uc3QgZGV2ZWxvcG1lbnRzID0gW11cbiAgICBjb25zdCBteXRob3NSYXRpbmcgPSB0aGlzLnN5c3RlbS5teXRob3NSYXRpbmdcbiAgICBsZXQgbXl0aG9zRmluYWwgPSB0aGlzLnN5c3RlbS5nYWlucy5jdGh1bGh1TXl0aG9zLmZpbmFsXG4gICAgaWYgKGFjdG9yTXl0aG9zVmFsdWUgKyBteXRob3NGaW5hbCA+IG15dGhvc1JhdGluZykge1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8PSBteXRob3NGaW5hbDsgaW5kZXgrKykge1xuICAgICAgICBpZiAoYWN0b3JNeXRob3NWYWx1ZSArIG15dGhvc0ZpbmFsIC0gaW5kZXggPD0gbXl0aG9zUmF0aW5nKSB7XG4gICAgICAgICAgbXl0aG9zRmluYWwgLT0gaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhZGVyIGF1dG9tYXRpY2FsbHkgZ2FpbnMgYSBza2lsbCB0aWNrIGZvciB0aGVcbiAgICAgKiBsYW5ndWFnZSBpbiB3aGljaCB0aGUgYm9vayBpcyB3cml0dGVuXG4gICAgICovXG4gICAgZGV2ZWxvcG1lbnRzLnB1c2goXG4gICAgICB7XG4gICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db0NJREZsYWcua2V5cy5pLnNraWxsLmN0aHVsaHUtbXl0aG9zJyksXG4gICAgICAgIGdhaW46IHBhcnNlSW50KG15dGhvc0ZpbmFsKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogdGhpcy5zeXN0ZW0ubGFuZ3VhZ2UsXG4gICAgICAgIGdhaW46ICdkZXZlbG9wbWVudCdcbiAgICAgIH1cbiAgICApXG4gICAgYXdhaXQgdGhpcy5ncmFudFNraWxsRGV2ZWxvcG1lbnQoZGV2ZWxvcG1lbnRzKVxuICAgIGF3YWl0IHRoaXMucm9sbFNhbml0eUxvc3MoKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAnc3lzdGVtLmZ1bGxTdHVkaWVzJzogKyt0aGlzLnN5c3RlbS5mdWxsU3R1ZGllc1xuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8RG9jdW1lbnQ+fSB1cGRhdGUgdG8gSXRlbSBkb2N1bWVudFxuICAgKi9cbiAgYXN5bmMgZ3JhbnRJbml0aWFsUmVhZGluZyAoKSB7XG4gICAgLyoqIElmIGluaXRpYWwgcmVhZGluZyBoYXMgYWxyZWFkeSBiZWVuIGRvbmUgdGhlcmUgaXMgbm90aGluZyB0byBkbyBoZXJlICovXG4gICAgaWYgKHRoaXMuc3lzdGVtLmluaXRpYWxSZWFkaW5nKSByZXR1cm5cbiAgICBjb25zdCBkZXZlbG9wbWVudHMgPSBbXVxuICAgIGNvbnN0IG15dGhvcyA9IHtcbiAgICAgIGdhaW5zOiB0aGlzLnN5c3RlbS5nYWlucy5jdGh1bGh1TXl0aG9zLmluaXRpYWwsXG4gICAgICB0eXBlOiB0aGlzLnN5c3RlbS50eXBlLm15dGhvc1xuICAgIH1cbiAgICBjb25zdCBvY2N1bHQgPSB7XG4gICAgICBnYWluczogdGhpcy5zeXN0ZW0uZ2FpbnMub2NjdWx0LFxuICAgICAgdHlwZTogdGhpcy5zeXN0ZW0udHlwZS5vY2N1bHRcbiAgICB9XG4gICAgY29uc3Qgb3RoZXIgPSB7XG4gICAgICBnYWluczogdGhpcy5zeXN0ZW0uZ2FpbnMub3RoZXJzLFxuICAgICAgdHlwZTogdGhpcy5zeXN0ZW0udHlwZS5vdGhlclxuICAgIH1cbiAgICBpZiAobXl0aG9zLnR5cGUgJiYgbXl0aG9zLmdhaW5zKSB7XG4gICAgICBkZXZlbG9wbWVudHMucHVzaCh7XG4gICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db0NJREZsYWcua2V5cy5pLnNraWxsLmN0aHVsaHUtbXl0aG9zJyksXG4gICAgICAgIGdhaW46IHBhcnNlSW50KG15dGhvcy5nYWlucylcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChvY2N1bHQudHlwZSAmJiBvY2N1bHQuZ2FpbnMpIHtcbiAgICAgIGRldmVsb3BtZW50cy5wdXNoKHtcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk9jY3VsdCcpLFxuICAgICAgICBnYWluOiBwYXJzZUludChvY2N1bHQuZ2FpbnMpXG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAob3RoZXIudHlwZSkge1xuICAgICAgZm9yIChjb25zdCBza2lsbCBvZiBvdGhlci5nYWlucykge1xuICAgICAgICBjb25zdCBwYXR0ZXJuID0gc2tpbGwubmFtZS5tYXRjaCgvXiguKykgXFwoKC4rKVxcKSQvKVxuICAgICAgICAvKiogU2FuaXRpemF0aW9uIHRvIGRlYWwgd2l0aCBzcGVjaWFsaXphdGlvbnMgKi9cbiAgICAgICAgaWYgKHBhdHRlcm4pIHtcbiAgICAgICAgICBza2lsbC5zcGVjaWFsaXphdGlvbiA9IHBhdHRlcm5bMV1cbiAgICAgICAgICBza2lsbC5uYW1lID0gcGF0dGVyblsyXVxuICAgICAgICB9XG4gICAgICAgIGlmIChza2lsbC52YWx1ZSAhPT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgIHNraWxsLnZhbHVlID0gKFxuICAgICAgICAgICAgYXdhaXQgbmV3IFJvbGwoc2tpbGwudmFsdWUpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgICkudG90YWxcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2tpbGwudmFsdWUpIHtcbiAgICAgICAgICBkZXZlbG9wbWVudHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBza2lsbC5uYW1lLFxuICAgICAgICAgICAgZ2Fpbjogc2tpbGwudmFsdWUsXG4gICAgICAgICAgICBzcGVjaWFsaXphdGlvbjogc2tpbGwuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuZ3JhbnRTa2lsbERldmVsb3BtZW50KGRldmVsb3BtZW50cylcbiAgICBpZiAoKG15dGhvcy50eXBlIHx8IG9jY3VsdC50eXBlKSAmJiB0aGlzLnN5c3RlbS5zYW5pdHlMb3NzKSB7XG4gICAgICBhd2FpdCB0aGlzLnJvbGxTYW5pdHlMb3NzKClcbiAgICB9XG4gICAgLyoqIE1hcmsgaW5pdGlhbCByZWFkaW5nIGFzIGNvbXBsZXRlICovXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5pbml0aWFsUmVhZGluZyc6IHRydWUgfSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0l0ZW19IHNwZWxsbGVhcm5lZCBUaGUgc3BlbGwgdGhhdCB3YXMgbGVhcm5lZCBzdWNjZXNzZnVsbHkgZnJvbSBib29rXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBhc3luYyBncmFudFNwZWxsTGVhcm5pbmcgKHNwZWxsbGVhcm5lZCkge1xuICAgIGZvciAoY29uc3Qgc3BlbGwgb2YgdGhpcy5zeXN0ZW0uc3BlbGxzKSB7XG4gICAgICBpZiAoc3BlbGwuX2lkID09PSBzcGVsbGxlYXJuZWQuX2lkKSB7XG4gICAgICAgIHNwZWxsLnN5c3RlbS5sZWFybmVkID0gdHJ1ZVxuICAgICAgICAvLyBEb2VzIHRoZSBhY3RvciBhbHJlYWR5IGhhcyBhIHNwZWxsIG9mIHRoYXQgbmFtZT8gVGhlbiBkbyBub3QgYWRkIHRoZSBzcGVsbFxuICAgICAgICBjb25zdCBleGlzdGluZ1NwZWxsID0gYXdhaXQgdGhpcy5hY3Rvci5pdGVtcy5maW5kKFxuICAgICAgICAgIGl0ZW0gPT5cbiAgICAgICAgICAgIGl0ZW0udHlwZSA9PT0gJ3NwZWxsJyAmJiBpdGVtLm5hbWUgPT09IHNwZWxsbGVhcm5lZC5uYW1lXG4gICAgICAgIClcbiAgICAgICAgaWYgKCFleGlzdGluZ1NwZWxsKSB7XG4gICAgICAgICAgc3BlbGxsZWFybmVkLnN5c3RlbS5sZWFybmVkID0gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU3BlbGxBbHJlYWR5TGVhcm5lZCcsIHtcbiAgICAgICAgICAgICAgc3BlbGw6IHNwZWxsbGVhcm5lZC5uYW1lLFxuICAgICAgICAgICAgICBib29rOiB0aGlzLm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIFNhdmUgc3BlbGwgbGlzdCBvZiBib29rXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLnNwZWxscyc6IHRoaXMuc3lzdGVtLnNwZWxscyB9KVxuICAgIC8vIEFkZCBsZWFybmVkIHNwZWxsIHRvIGFjdG9yXG4gICAgaWYgKHNwZWxsbGVhcm5lZC5zeXN0ZW0ubGVhcm5lZCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlNwZWxsU3VjY2Vzc2Z1bGx5TGVhcm5lZCcsIHtcbiAgICAgICAgICBzcGVsbDogc3BlbGxsZWFybmVkLm5hbWUsXG4gICAgICAgICAgYm9vazogdGhpcy5uYW1lXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICBhd2FpdCB0aGlzLmFjdG9yLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW1xuICAgICAgICBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShzcGVsbGxlYXJuZWQpXG4gICAgICBdKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNlaXZlcyBhbiBBcnJheSBvZiBza2lsbHMgYW5kIGhhbmRsZXMgYWxsIHRoZSBsb2dpYyB0byBkZXZlbG9wIHRoZW1cbiAgICogQHBhcmFtIHtBcnJheX0gZGV2ZWxvcG1lbnRzIEBzZWUgZ3JhbnRJbml0aWFsUmVhZGluZ1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudD59IHVwZGF0ZSB0byBJdGVtIGRvY3VtZW50XG4gICAqL1xuICBhc3luYyBncmFudFNraWxsRGV2ZWxvcG1lbnQgKGRldmVsb3BtZW50cykge1xuICAgIGlmIChkZXZlbG9wbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICBmb3IgKGNvbnN0IGRldmVsb3BtZW50IG9mIGRldmVsb3BtZW50cykge1xuICAgICAgLyoqIFRlc3QgaWYgdGhlIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB6ZXJvICovXG4gICAgICBpZiAoIWRldmVsb3BtZW50LmdhaW4pIGNvbnRpbnVlXG4gICAgICBsZXQgc2tpbGwgPSBhd2FpdCB0aGlzLmFjdG9yLmdldFNraWxsc0J5TmFtZShkZXZlbG9wbWVudC5uYW1lKVxuICAgICAgLyoqIFRoZSBBY3RvciBkb2VzIG5vdCBvd24gdGhpcyBza2lsbCwgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICogRmlyc3QsIGNoZWNrIGlmIHRoZXJlIGlzIGFueSBza2lsbCBpbiB0aGUgZ2FtZSB3aXRoIHRoZSBzYW1lIG5hbWVcbiAgICAgICAqIEluIHRoZSBsYXN0IGFsdGVybmF0aXZlIGp1c3QgY3JlYXRlIGEgbmV3IGdlbmVyaWMgc2tpbGxcbiAgICAgICAqL1xuICAgICAgaWYgKHNraWxsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBleGlzdGluZ1NraWxsID0gYXdhaXQgZ2FtZS5pdGVtcy5maW5kKFxuICAgICAgICAgIGl0ZW0gPT5cbiAgICAgICAgICAgIGl0ZW0udHlwZSA9PT0gJ3NraWxsJyAmJiBpdGVtLm5hbWUgPT09IGRldmVsb3BtZW50Lm5hbWVcbiAgICAgICAgKVxuICAgICAgICBpZiAoZXhpc3RpbmdTa2lsbCkge1xuICAgICAgICAgIHNraWxsID0gYXdhaXQgdGhpcy5hY3Rvci5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtcbiAgICAgICAgICAgIGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGV4aXN0aW5nU2tpbGwpXG4gICAgICAgICAgXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBza2lsbCA9IGF3YWl0IHRoaXMuYWN0b3IuY3JlYXRlU2tpbGwoZGV2ZWxvcG1lbnQubmFtZSwgMClcbiAgICAgICAgICBpZiAoZGV2ZWxvcG1lbnQuc3BlY2lhbGl6YXRpb24pIHtcbiAgICAgICAgICAgIGF3YWl0IHNraWxsWzBdLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5zcGVjaWFsJzogdHJ1ZSxcbiAgICAgICAgICAgICAgJ3N5c3RlbS5zcGVjaWFsaXphdGlvbic6IGRldmVsb3BtZW50LnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2tpbGwgPSBza2lsbFswXVxuICAgICAgaWYgKGRldmVsb3BtZW50LmdhaW4gPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgLyoqIFNpbXBseSBtYXJrIHRoZSBza2lsbCBmb3IgZGV2ZWxvcG1lbnQgKi9cbiAgICAgICAgYXdhaXQgc2tpbGwuZmxhZ0ZvckRldmVsb3BlbWVudCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHJlY2VpdmVkIHZhbHVlIGdhaW5lZCBpcyBudW1lcmljLCBlbnN1cmUgdGhhdCB0aGUgYW1vdW50XG4gICAgICAgICAqIHdpbGwgbm90IGV4Y2VlZCB0aGUgbWF4aW11bSB2YWx1ZSBvZiA5OVxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHNraWxsLnZhbHVlICsgZGV2ZWxvcG1lbnQuZ2FpbiA+IDk5KSB7XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8PSBkZXZlbG9wbWVudC5nYWluOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBpZiAoc2tpbGwudmFsdWUgKyBkZXZlbG9wbWVudC5nYWluIC0gaW5kZXggPD0gOTkpIHtcbiAgICAgICAgICAgICAgZGV2ZWxvcG1lbnQuZ2FpbiAtPSBpbmRleFxuICAgICAgICAgICAgICBhd2FpdCBza2lsbC5pbmNyZWFzZUV4cGVyaWVuY2UoZGV2ZWxvcG1lbnQuZ2FpbilcbiAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgc2tpbGwuaW5jcmVhc2VFeHBlcmllbmNlKGRldmVsb3BtZW50LmdhaW4pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNob3dEZXZlbG9wbWVudHNUYWJsZShkZXZlbG9wbWVudHMpXG4gIH1cblxuICAvKipcbiAgICogU3Vic2VxdWVudCBwZXJpb2RzIG9mIGZ1bGwgc3R1ZHkgbWF5IGJlIHVuZGVydGFrZW4sIHRoZSBkaWZmZXJlbmNlIGJlaW5nXG4gICAqIHRoYXQgZWFjaCBzdHVkeSB3aWxsIHRha2UgdHdpY2UgYXMgbG9uZyBhcyB0aGUgcHJldmlvdXMgb25lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxEb2N1bWVudD59IHVwZGF0ZSB0byBJdGVtIGRvY3VtZW50XG4gICAqL1xuICBhc3luYyByZWRvRnVsbFN0dWR5ICgpIHtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uc3R1ZHkucHJvZ3Jlc3MnOiAwIH0pXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICdzeXN0ZW0uc3R1ZHkubmVjZXNzYXJ5JzogdGhpcy5zeXN0ZW0uc3R1ZHkubmVjZXNzYXJ5ICogMlxuICAgIH0pXG4gIH1cblxuICAvKiogQnlwYXNzIHRoZSBTYW5pdHkgY2hlY2sgYW5kIGp1c3Qgcm9sbCB0aGUgZGFtYWdlICovXG4gIGFzeW5jIHJvbGxTYW5pdHlMb3NzICgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3lzdGVtLnNhbml0eUxvc3NcbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSAnJykgcmV0dXJuXG4gICAgY29uc3QgdGVtcGxhdGUgPSBTYW5DaGVja0NhcmQudGVtcGxhdGVcbiAgICBsZXQgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB7fSlcbiAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKHtcbiAgICAgIHVzZXI6IGdhbWUudXNlci5pZCxcbiAgICAgIHNwZWFrZXI6IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoeyBhY3RvcjogdGhpcy5hY3RvciB9KSxcbiAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZWFkaW5nTXl0aG9zVG9tZScsIHtcbiAgICAgICAgYm9vazogdGhpcy5uYW1lXG4gICAgICB9KSxcbiAgICAgIGNvbnRlbnQ6IGh0bWxcbiAgICB9KVxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCBtZXNzYWdlLmdldEhUTUwoKVxuICAgIGlmICh0eXBlb2YgY2FyZC5sZW5ndGggIT09ICd1bmRlZmluZWQnICYmIGNhcmQubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBzYW5pdHlMb3NzID0gKGF3YWl0IG5ldyBSb2xsKHZhbHVlKS5yb2xsKHsgYXN5bmM6IHRydWUgfSkpLnRvdGFsXG4gICAgICBodG1sID0gY2FyZC5maW5kKCcuY2hhdC1jYXJkJylbMF1cbiAgICAgIGh0bWwuZGF0YXNldC5vYmplY3QgPSBlc2NhcGUoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBhY3RvcktleTogdGhpcy5hY3Rvci5pZCxcbiAgICAgICAgICBmYXN0Rm9yd2FyZDogZmFsc2UsXG4gICAgICAgICAgc2FuRGF0YToge1xuICAgICAgICAgICAgc2FuTWluOiBzYW5pdHlMb3NzLFxuICAgICAgICAgICAgc2FuTWF4OiBzYW5pdHlMb3NzXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgY29uc3Qgc2FuaXR5Q2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoaHRtbClcbiAgICAgIGF3YWl0IHNhbml0eUNoZWNrLmJ5cGFzc1JvbGxTYW4oKVxuICAgICAgYXdhaXQgc2FuaXR5Q2hlY2sucm9sbFNhbkxvc3MoKVxuICAgICAgc2FuaXR5Q2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IGEgdGFibGUgaW4gdGhlIGNoYXQgd2l0aCBhbGwgc2tpbGwgZGV2ZWxvcG1lbnRzIG9idGFpbmVkXG4gICAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gZGV2ZWxvcG1lbnRzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERvY3VtZW50Pn0gY3JlYXRlIENoYXRNZXNzYWdlXG4gICAqL1xuICBhc3luYyBzaG93RGV2ZWxvcG1lbnRzVGFibGUgKGRldmVsb3BtZW50cykge1xuICAgIC8qKiBQcmVwYXJlIHRoZSBBcnJheSBkYXRhIHRvIGJlIHNob3duIHRvIHRoZSBlbmQgdXNlciBpbiBjaGF0ICovXG4gICAgZm9yIChjb25zdCBkZXZlbG9wbWVudCBvZiBkZXZlbG9wbWVudHMpIHtcbiAgICAgIGlmIChkZXZlbG9wbWVudC5zcGVjaWFsaXphdGlvbikge1xuICAgICAgICBkZXZlbG9wbWVudC5uYW1lID0gYCR7ZGV2ZWxvcG1lbnQuc3BlY2lhbGl6YXRpb259ICgke2RldmVsb3BtZW50Lm5hbWV9KWBcbiAgICAgIH1cbiAgICAgIGlmIChkZXZlbG9wbWVudC5nYWluID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgIGRldmVsb3BtZW50LmdhaW4gPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWFya2VkRm9yRGV2ZWxvcG1lbnQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGV2ZWxvcG1lbnQuZ2FpbiA9IGArJHtkZXZlbG9wbWVudC5nYWlufSAke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAnQ29DNy5Qb2ludHMnXG4gICAgICAgICl9YFxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL2Jvb2svZGV2ZWxvcG1lbnQuaHRtbCdcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHsgZGV2ZWxvcG1lbnRzIH0pXG4gICAgcmV0dXJuIGF3YWl0IENoYXRNZXNzYWdlLmNyZWF0ZSh7XG4gICAgICB1c2VyOiBnYW1lLnVzZXIuaWQsXG4gICAgICBzcGVha2VyOiBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHsgYWN0b3I6IHRoaXMuYWN0b3IgfSksXG4gICAgICBmbGF2b3I6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuR2FpbnNGb3JSZWFkaW5nJywgeyBib29rOiB0aGlzLm5hbWUgfSksXG4gICAgICBjb250ZW50OiBodG1sXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGF0dGVtcHRTcGVsbExlYXJuaW5nIChpZCkge1xuICAgIGlmICghdGhpcy5pc093bmVkKSB7XG4gICAgICAvKiogVGhpcyBpcyBub3Qgb3duZWQgYnkgYW55IEFjdG9yICovXG4gICAgICByZXR1cm4gdWkubm90aWZpY2F0aW9ucy5lcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm90T3duZWQnKSlcbiAgICB9XG4gICAgaWYgKCF0aGlzLnN5c3RlbS5pbml0aWFsUmVhZGluZykge1xuICAgICAgLyoqIEFjdG9yIGRpZCBub3QgcGVyZm9ybWVkIGFuIGluaXRpYWwgcmVhZGluZyBmaXJzdCAqL1xuICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5pdGlhbFJlYWRpbmdOZWVkZWQnLCB7XG4gICAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3IubmFtZSxcbiAgICAgICAgICBib29rOiB0aGlzLm5hbWVcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG4gICAgY29uc3Qgc3BlbGwgPSB0aGlzLnN5c3RlbS5zcGVsbHMuZmluZChzcGVsbCA9PiB7XG4gICAgICByZXR1cm4gc3BlbGwuX2lkID09PSBpZFxuICAgIH0pXG4gICAgaWYgKHNwZWxsKSB7XG4gICAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgY2hlY2suYWN0b3IgPSB0aGlzLmFjdG9yXG4gICAgICBjaGVjay5kaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5oYXJkXG4gICAgICBjaGVjay5wYXJlbnQgPSB0aGlzLnV1aWRcbiAgICAgIGNoZWNrLmZsYXZvciA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTGVhcm5TcGVsbEF0dGVtcHQnLCB7XG4gICAgICAgIGJvb2s6IHRoaXMubmFtZSxcbiAgICAgICAgc3BlbGw6IHNwZWxsLm5hbWVcbiAgICAgIH0pXG4gICAgICBjaGVjay5jb250ZXh0ID0gJ1NQRUxMX0xFQVJOSU5HJ1xuICAgICAgY2hlY2suc3BlbGwgPSBzcGVsbFxuICAgICAgYXdhaXQgY2hlY2sucm9sbENoYXJhY3RlcmlzdGljKCdpbnQnKVxuICAgICAgYXdhaXQgY2hlY2sudG9NZXNzYWdlKClcbiAgICB9XG4gIH1cblxuICAvKiogTGlzdGVuIHRvIGNoYW5nZXMgb24gdGhlIGNoZWNrIGNhcmQgKi9cbiAgYXN5bmMgdXBkYXRlUm9sbCAocm9sbCkge1xuICAgIGNvbnN0IGNoZWNrID0gQ29DN0NoZWNrLmZyb21Sb2xsU3RyaW5nKHJvbGwpXG5cbiAgICAvKiogV2lsbCBrbm93IGlmIHVzZXIgcHVzaCB0aGUgcm9sbCBvciBzcGVuZCBMdWNrICovXG4gICAgaWYgKGNoZWNrLnBhc3NlZCkge1xuICAgICAgaWYgKGNoZWNrLmNvbnRleHQgPT09ICdJTklUSUFMX1JFQURJTkcnKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdyYW50SW5pdGlhbFJlYWRpbmcoKVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5jb250ZXh0ID09PSAnU1BFTExfTEVBUk5JTkcnKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdyYW50U3BlbGxMZWFybmluZyhjaGVjay5zcGVsbClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBDaGF0TWVzc2FnZSwgRm9ybURhdGFFeHRlbmRlZCwgZm91bmRyeSwgZnJvbVV1aWQsIGdhbWUsIEhvb2tzLCByZW5kZXJUZW1wbGF0ZSwgc29ja2V0bGliLCB1aSAqL1xuXG5jb25zdCBFQ0NfQ0xBU1MgPSAnZW5oYW5jZWQtY2hhdC1jYXJkJ1xuXG5jb25zdCBQRVJNSVNTSU9OX1RZUEUgPSB7XG4gIEdNOiAnZ20nLCAvLyB1c2VyIGlzIEdNXG4gIE5PVF9HTTogJyFnbScsIC8vIHVzZXIgaXMgTk9UIGdtIChoaWRlIHRvIEdNIGluIGNhc2Ugb2YgdmlzaWJpbGl0eSlcbiAgU1BFQUtFUjogJ3NwZWFrZXInLCAvLyB0aGUgc3BlYWtlciBpcyBhbiBhY3RvciBjb250cm9sZWQvb3duZWQgYnkgdGhlIHVzZXJcbiAgVVNFUjogJ3VzZXInLCAvLyB0aGUgdXNlciBpcyB0aGUgbWVzc2FnZSdzIGF1dGhvclxuICBFVkVSWU9ORTogJ2FsbCcsIC8vIGVxdWl2YWxlbnQgdG8gZW1wdHkgc3RyaW5nXG4gIEJMQUNLTElTVDogJ2JsYWNrbGlzdCcgLy8gaW52ZXJ0IHRoZSBsb2dpY1xufVxuXG5jb25zdCBTVEFURSA9IHtcbiAgT046ICdzd2l0Y2hlZC1vbicsXG4gIE9GRjogJ3N3aXRjaGVkLW9mZidcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRFQ0MgKC4uLmNhcmRjbGFzcykge1xuICAvLyBIb29rcy5vbmNlKCdpbml0JywgZnVuY3Rpb24gKCkge1xuICAvLyB9KVxuXG4gIEhvb2tzLm9uKCdyZW5kZXJDaGF0TG9nJywgKGFwcCwgaHRtbCwgZGF0YSkgPT5cbiAgICBFbmhhbmNlZENoYXRDYXJkTGliLmluamVjdENTUyhhcHAsIGh0bWwsIGRhdGEpXG4gIClcblxuICBIb29rcy5vbmNlKCdzb2NrZXRsaWIucmVhZHknLCBmdW5jdGlvbiAoKSB7XG4gICAgRW5oYW5jZWRDaGF0Q2FyZExpYi5yZWdpc3RlcihjYXJkY2xhc3MpXG4gICAgRW5oYW5jZWRDaGF0Q2FyZExpYi5zb2NrZXQgPSBzb2NrZXRsaWIucmVnaXN0ZXJTeXN0ZW0oZ2FtZS5zeXN0ZW0uaWQpIC8vIFNvY2tldCBpcyBhdHRhY2hlZCB0byBjdXJyZW50IHN5c3RlbVxuICAgIEVuaGFuY2VkQ2hhdENhcmRMaWIuc29ja2V0LnJlZ2lzdGVyKCd1cGRhdGVNZXNzYWdlJywgdXBkYXRlTWVzc2FnZSlcbiAgICBFbmhhbmNlZENoYXRDYXJkTGliLnNvY2tldC5yZWdpc3RlcignR01VcGRhdGUnLCBHTVVwZGF0ZSlcbiAgICBFbmhhbmNlZENoYXRDYXJkTGliLnNvY2tldC5yZWdpc3RlcignYWR2aXNlJywgYWR2aXNlKVxuICAgIC8vIEVuaGFuY2VkQ2hhdENhcmRMaWIuc29ja2V0LnJlZ2lzdGVyKCdnbXRyYWRlaXRlbXRvJywgZ210cmFkZWl0ZW10bylcbiAgfSlcblxuICBIb29rcy5vbigncmVuZGVyQ2hhdE1lc3NhZ2UnLCAoYXBwLCBodG1sLCBkYXRhKSA9PlxuICAgIEVuaGFuY2VkQ2hhdENhcmQuYmluZExpc3RlbmVycyhodG1sKVxuICApXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZU1lc3NhZ2UgKG1lc3NhZ2VJZCwgbmV3Q29udGVudCkge1xuICBjb25zdCBjaGF0TWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VJZClcblxuICBhd2FpdCBjaGF0TWVzc2FnZS51cGRhdGUoe1xuICAgIGNvbnRlbnQ6IG5ld0NvbnRlbnRcbiAgfSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gR01VcGRhdGUgKGRhdGEsIG9wdGlvbnMsIGNhcmRDbGFzc05hbWUsIG1lc3NhZ2VJZCA9IHVuZGVmaW5lZCkge1xuICBjb25zdCBjYXJkID0gYXdhaXQgRW5oYW5jZWRDaGF0Q2FyZC5mcm9tRGF0YShcbiAgICBkYXRhLFxuICAgIG9wdGlvbnMsXG4gICAgY2FyZENsYXNzTmFtZSxcbiAgICBtZXNzYWdlSWRcbiAgKVxuICBhd2FpdCBjYXJkLkdNVXBkYXRlKClcbiAgLy8gY29uc3QgZGlmZiA9IGZvdW5kcnkudXRpbHMuZGlmZk9iamVjdCggZGF0YSwgY2FyZC50b09iamVjdCgpKVxuICByZXR1cm4gY2FyZC50b09iamVjdCgpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFkdmlzZSAoKSB7fVxuXG5jbGFzcyBFbmhhbmNlZENoYXRDYXJkTGliIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMudHlwZXMgPSBuZXcgTWFwKClcbiAgICB0aGlzLnNvY2tldCA9IG51bGxcbiAgICAvLyB0aGlzLmVuaGFuY2VkQ2hhdENhcmRDbGFzcyA9IEVuaGFuY2VkQ2hhdENhcmRcbiAgfVxuXG4gIHN0YXRpYyBpbmplY3RDU1MgKCkge1xuICAgIGxldCBzdHlsZSA9ICQoJ2hlYWQnKS5maW5kKCdzdHlsZScpXG4gICAgaWYgKCFzdHlsZT8ubGVuZ3RoKSB7XG4gICAgICAkKCdoZWFkJykuYXBwZW5kKCQoJzxzdHlsZSAgdHlwZT1cInRleHQvY3NzXCI+PC9zdHlsZT4nKSlcbiAgICAgIHN0eWxlID0gJCgnaGVhZCcpLmZpbmQoJ3N0eWxlJylcbiAgICB9XG4gICAgc3R5bGUuYXBwZW5kKFxuICAgICAgYC5lY2MtcmVzdHJpY3RlZCB7Y29sb3I6IHJlZH1cbiAgICAuZWNjLXJlc3RyaWN0ZWQ6aG92ZXIge2N1cnNvcjogbm90LWFsbG93ZWR9YFxuICAgIClcbiAgfVxuXG4gIHN0YXRpYyBzZXQgc29ja2V0ICh4KSB7XG4gICAgaWYgKCFnYW1lLmVuaGFuY2VkQ2hhdENhcmRzTGliKSB7XG4gICAgICBnYW1lLmVuaGFuY2VkQ2hhdENhcmRzTGliID0gbmV3IEVuaGFuY2VkQ2hhdENhcmRMaWIoKVxuICAgIH1cbiAgICBnYW1lLmVuaGFuY2VkQ2hhdENhcmRzTGliLnNvY2tldCA9IHhcbiAgfVxuXG4gIHN0YXRpYyBnZXQgc29ja2V0ICgpIHtcbiAgICBpZiAoIWdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ0VDQyBub3QgSW5pdGlhbGl6ZWQnKVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICBpZiAoIWdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIuc29ja2V0KSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdFQ0Mgbm8gc29ja2V0JylcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgcmV0dXJuIGdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIuc29ja2V0XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGVzICgpIHtcbiAgICBpZiAoIWdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIpIHtcbiAgICAgIGdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIgPSBuZXcgRW5oYW5jZWRDaGF0Q2FyZExpYigpXG4gICAgfVxuICAgIHJldHVybiBnYW1lLmVuaGFuY2VkQ2hhdENhcmRzTGliLnR5cGVzXG4gIH1cblxuICBzdGF0aWMgcmVnaXN0ZXIgKGNhcmRDb25zdHJ1Y3RvcnMpIHtcbiAgICBjYXJkQ29uc3RydWN0b3JzLmZvckVhY2goY2FyZENvbnN0cnVjdG9yID0+IHtcbiAgICAgIGlmICghRW5oYW5jZWRDaGF0Q2FyZExpYi50eXBlcy5nZXQoY2FyZENvbnN0cnVjdG9yLm5hbWUpKSB7XG4gICAgICAgIEVuaGFuY2VkQ2hhdENhcmRMaWIudHlwZXMuc2V0KGNhcmRDb25zdHJ1Y3Rvci5uYW1lLCBjYXJkQ29uc3RydWN0b3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHN0YXRpYyBnbV9vblRvZ2dsZSAoZGF0YSl7XG4gIC8vICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKCAnZ21fb25Ub2dnbGUnKVxuICAvLyB9XG59XG5cbmZ1bmN0aW9uIHNldEJ5UGF0aCAob2JqLCBwYXRoLCB2YWx1ZSkge1xuICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy4nKVxuICBsZXQgbyA9IG9ialxuICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBpZiAoIW9bcGFydHNbaV1dKSBvW3BhcnRzW2ldXSA9IHt9XG4gICAgICBvID0gb1twYXJ0c1tpXV1cbiAgICB9XG4gIH1cblxuICBvW3BhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXSA9IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGdldEJ5UGF0aCAob2JqLCBwYXRoKSB7XG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLicpXG4gIGxldCBvID0gb2JqXG4gIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGlmICghb1twYXJ0c1tpXV0pIHJldHVybiB1bmRlZmluZWRcbiAgICAgIG8gPSBvW3BhcnRzW2ldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvW3BhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXVxufVxuXG5leHBvcnQgY2xhc3MgRW5oYW5jZWRDaGF0Q2FyZCB7XG4gIC8vIHN0YXRpYyByZWdpc3RlciAoY2FyZENvbnN0cnVjdG9yKSB7XG4gIC8vICAgRW5oYW5jZWRDaGF0Q2FyZExpYi5yZWdpc3RlcihjYXJkQ29uc3RydWN0b3IpXG4gIC8vIH1cblxuICBjb25zdHJ1Y3RvciAoZGF0YSA9IHt9LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhXG4gICAgaWYgKCF0aGlzLmRhdGEuZmxhZ3MpIHRoaXMuZGF0YS5mbGFncyA9IHt9XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb25seSBvbmNlIGJlZm9yZSBzZW5kaW5nIG1lc3NhZ2UgdG8gY2hhdC5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBpbml0aWFsaXplICgpIHt9XG5cbiAgZ2V0IG9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdE9wdGlvbnMsIHRoaXMuX29wdGlvbnMpXG4gIH1cblxuICBzZXQgb3B0aW9ucyAoeCkge1xuICAgIHRoaXMuX29wdGlvbnMgPSB4XG4gIH1cblxuICBnZXQgdGVtcGxhdGUgKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMudGVtcGxhdGVcbiAgfVxuXG4gIGdldCBjc3NDbGFzc2VzICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNsYXNzZXM/LmpvaW4oJyAnKVxuICB9XG5cbiAgZ2V0IHNwZWFrZXIgKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub29jKSByZXR1cm4gZ2FtZS51c2VyXG4gICAgaWYgKFxuICAgICAgdGhpcy5vcHRpb25zLnNwZWFrZXIgJiZcbiAgICAgIENoYXRNZXNzYWdlLmdldFNwZWFrZXJBY3Rvcih0aGlzLm9wdGlvbnMuc3BlYWtlcilcbiAgICApIHtcbiAgICAgIHJldHVybiBDaGF0TWVzc2FnZS5nZXRTcGVha2VyQWN0b3IodGhpcy5vcHRpb25zLnNwZWFrZXIpXG4gICAgfVxuICAgIHJldHVybiBnYW1lLnVzZXJcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIC8vIGF3YWl0IHRoaXMuYXNzaWduT2JqZWN0cygpXG4gICAgcmV0dXJuIHtcbiAgICAgIGNhcmQ6IHRoaXMsXG4gICAgICBmbGFnczogdGhpcy5mbGFncyxcbiAgICAgIGRhdGE6IHRoaXMudG9PYmplY3QoKSxcbiAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgIGNzczogdGhpcy5jc3NDbGFzc2VzLFxuICAgICAgdXNlcjogZ2FtZS51c2VyLFxuICAgICAgc3BlYWtlcjogdGhpcy5zcGVha2VyXG4gICAgfVxuICB9XG5cbiAgdG9PYmplY3QgKCkge1xuICAgIGlmICghdGhpcy5kYXRhKSByZXR1cm5cbiAgICBjb25zdCBkYXRhID0ge31cbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModGhpcy5kYXRhKSkge1xuICAgICAgY29uc3QgdiA9IHRoaXMuZGF0YVtrXVxuICAgICAgaWYgKHYgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgZGF0YVtrXSA9IHYudG9PYmplY3QgPyB2LnRvT2JqZWN0KCkgOiBmb3VuZHJ5LnV0aWxzLmRlZXBDbG9uZSh2KVxuICAgICAgfSBlbHNlIGRhdGFba10gPSB2XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBhc3luYyB0b01lc3NhZ2UgKG9wdGlvbm5hbENoYXREYXRhID0ge30pIHtcbiAgICAvLyBNYXAgZWNjIGNhcmQgdHlwZSBpZiBub3QgcmVnaXN0ZXJlZCBhbHJlYWR5XG4gICAgLy8gdGhpcy5yZWdpc3RlckVDQ0NsYXNzKClcblxuICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZSgpXG5cbiAgICAvLyBQdWJsaXNoIGJ5IGN1cnJlbnQgdXNlciBieSBkZWZhdWx0IHVubGVzcyBvcHRpb25zLkdNY2hhdENhcmRcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5nZXREYXRhKClcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGhpcy50ZW1wbGF0ZSwgZGF0YSlcbiAgICBjb25zdCBodG1sQ2FyZEVsZW1lbnQgPSAkKGh0bWwpWzBdXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdHRhY2hPYmplY3QpIHtcbiAgICAgIGh0bWxDYXJkRWxlbWVudC5kYXRhc2V0Lm9iamVjdCA9IGVzY2FwZSh0aGlzLm9iamVjdERhdGFTdHJpbmcpXG4gICAgfVxuICAgIGh0bWxDYXJkRWxlbWVudC5kYXRhc2V0LmVjY0NsYXNzID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgaHRtbENhcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4udGhpcy5vcHRpb25zLmNsYXNzZXMpXG5cbiAgICBjb25zdCBzcGVha2VyID1cbiAgICAgIHRoaXMub3B0aW9ucy5zcGVha2VyICYmICF0aGlzLm9wdGlvbnMub29jXG4gICAgICAgID8gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcih0aGlzLm9wdGlvbnMuc3BlYWtlcilcbiAgICAgICAgOiB7fVxuXG4gICAgLy8gY29uc3QgdXNlcklkID0gdGhpcy5vcHRpb25zLnVzZXJJZCA/IHRoaXMub3B0aW9ucy51c2VySWQgOiBnYW1lLnVzZXIuaWRcblxuICAgIGNvbnN0IGNoYXREYXRhID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChcbiAgICAgIHtcbiAgICAgICAgLy8gdXNlcjogdXNlcklkLFxuICAgICAgICB1c2VyOiBnYW1lLnVzZXIuaWQsXG4gICAgICAgIHNwZWFrZXIsXG4gICAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmxvY2FsaXplKHRoaXMub3B0aW9ucy50aXRsZSksXG4gICAgICAgIGNvbnRlbnQ6IGh0bWxDYXJkRWxlbWVudC5vdXRlckhUTUxcbiAgICAgIH0sXG4gICAgICBvcHRpb25uYWxDaGF0RGF0YVxuICAgIClcblxuICAgIGlmIChbJ2dtcm9sbCcsICdibGluZHJvbGwnXS5pbmNsdWRlcyh0aGlzLnJvbGxNb2RlKSkge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgfVxuICAgIGlmICh0aGlzLnJvbGxNb2RlID09PSAnc2VsZnJvbGwnKSBjaGF0RGF0YS53aGlzcGVyID0gW2dhbWUudXNlci5pZF1cbiAgICBpZiAodGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCcpIGNoYXREYXRhLmJsaW5kID0gdHJ1ZVxuXG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKS50aGVuKG1zZyA9PiB7XG4gICAgICByZXR1cm4gbXNnXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkICh7IGF0dGFjaE9iamVjdCA9IHRydWUgfSA9IHt9KSB7XG4gICAgLy8gVE9ETyB0aGUgd2hvbGUgZnVuY3Rpb24gaGFzIHRvIGJlIGV4ZWN1dGVkIGJ5IEdNIGlmIG9wdGlvbnMuR01jaGF0Q2FyZFxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcHV0ZSkgYXdhaXQgdGhpcy5sb2NhbENvbXB1dGUoKVxuICAgIGlmICh0aGlzLm9wdGlvbnMuR01VcGRhdGUpIGF3YWl0IHRoaXMuRXhlY3V0ZUdNVXBkYXRlKClcbiAgICBpZiAoIXRoaXMubWVzc2FnZUlkKSB7XG4gICAgICB0aGlzLnRvTWVzc2FnZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmdldERhdGEoKVxuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIGRhdGEpXG4gICAgICBjb25zdCBodG1sQ2FyZEVsZW1lbnQgPSAkLnBhcnNlSFRNTChodG1sKVswXVxuXG4gICAgICAvLyBBdHRhY2ggdGhlIG9iamVjdCB0byB0aGUgbWVzc2FnZS5cbiAgICAgIGlmIChhdHRhY2hPYmplY3QgJiYgIXRoaXMuZGF0YS5FRUNfQUNUSU9OPy5kZXRhY2hEYXRhKSB7XG4gICAgICAgIGh0bWxDYXJkRWxlbWVudC5kYXRhc2V0Lm9iamVjdCA9IGVzY2FwZSh0aGlzLm9iamVjdERhdGFTdHJpbmcpXG4gICAgICB9XG4gICAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5lY2NDbGFzcyA9IHRoaXMuY29uc3RydWN0b3IubmFtZVxuICAgICAgaHRtbENhcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4udGhpcy5vcHRpb25zLmNsYXNzZXMpXG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgbWVzc2FnZS5cbiAgICAgIGdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIuc29ja2V0LmV4ZWN1dGVBc0dNKFxuICAgICAgICAndXBkYXRlTWVzc2FnZScsXG4gICAgICAgIHRoaXMubWVzc2FnZUlkLFxuICAgICAgICBodG1sQ2FyZEVsZW1lbnQub3V0ZXJIVE1MXG4gICAgICApXG4gICAgICAvLyBjb25zdCBjaGF0TWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuXG4gICAgICAvLyBjb25zdCBtc2cgPSBhd2FpdCBjaGF0TWVzc2FnZS51cGRhdGUoeyAvL0Rpc3BhdGNoIHJlcXVlc3QgYnkgc29ja2V0XG4gICAgICAvLyBjb250ZW50OiBodG1sQ2FyZEVsZW1lbnQub3V0ZXJIVE1MIC8vRGlzcGF0Y2ggcmVxdWVzdCBieSBzb2NrZXRcbiAgICAgIC8vIH0pIC8vRGlzcGF0Y2ggcmVxdWVzdCBieSBzb2NrZXRcbiAgICAgIC8vIGF3YWl0IHVpLmNoYXQudXBkYXRlTWVzc2FnZShtc2csIGZhbHNlKSAvL0Rpc3BhdGNoIHJlcXVlc3QgYnkgc29ja2V0XG4gICAgICAvLyByZXR1cm4gbXNnIC8vRGlzcGF0Y2ggcmVxdWVzdCBieSBzb2NrZXRcbiAgICB9XG4gIH1cblxuICBhc3luYyBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIC8vIGh0bWwub24oXG4gICAgLy8gICAnY2xpY2snLFxuICAgIC8vICAgYC4ke0VDQ19DTEFTU30gLmVjYy1yYWRpby1zd2l0Y2hgLFxuICAgIC8vICAgdGhpcy5fb25Ub2dnbGUuYmluZCh0aGlzKVxuICAgIC8vIClcbiAgICBodG1sLm9uKCdjaGFuZ2UnLCAnaW5wdXQsc2VsZWN0LHRleHRhcmVhJywgdGhpcy5fb25DaGFuZ2UuYmluZCh0aGlzKSlcbiAgICBodG1sLm9uKCdjbGljaycsIGAuJHtFQ0NfQ0xBU1N9IC5lY2Mtc3dpdGNoYCwgdGhpcy5fb25Ub2dnbGUuYmluZCh0aGlzKSlcbiAgICBodG1sLm9uKCdjbGljaycsIGAuJHtFQ0NfQ0xBU1N9IC5zdWJtaXRgLCB0aGlzLl9vblN1Ym1pdC5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oJ2ZvY3Vzb3V0JywgYC4ke0VDQ19DTEFTU30gaW5wdXRgLCB0aGlzLl9vbkNoYW5nZS5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oJ2NsaWNrJywgYC4ke0VDQ19DTEFTU30gYnV0dG9uYCwgdGhpcy5fb25CdXR0b24uYmluZCh0aGlzKSlcbiAgICBodG1sLm9uKCdrZXlkb3duJywgYC4ke0VDQ19DTEFTU30gZm9ybWAsIHRoaXMuX29uS2V5LmJpbmQodGhpcykpXG5cbiAgICAvLyBjb25zdCB2aXNpID0gaHRtbC5maW5kKCdbZGF0YS1lY2MtdmlzaWJpbGl0eV0nKVxuICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgdmlzaS5sZW5ndGg7IGkrKykge1xuICAgIC8vICAgY29uc3QgZWwgPSB2aXNpW2ldO1xuICAgIC8vICAgYXdhaXQgdGhpcy5zZXRWaXNpYmlsaXR5KGVsKVxuXG4gICAgLy8gfVxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJ1tkYXRhLWVjYy12aXNpYmlsaXR5XScpXG4gICAgICAuZWFjaChhc3luYyAoaSwgZWwpID0+IGF3YWl0IHRoaXMuc2V0VmlzaWJpbGl0eShlbCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJ1tkYXRhLWVjYy1wZXJtaXNzaW9uc10nKVxuICAgICAgLmVhY2goYXN5bmMgKGksIGVsKSA9PiBhd2FpdCB0aGlzLnNldFBlcm1pc3Npb24oZWwpKVxuICAgIGh0bWwuZmluZChgLiR7RUNDX0NMQVNTfSAuZWNjLXN3aXRjaGApLmVhY2goKGksIGVsKSA9PiB0aGlzLnNldFN0YXRlKGVsKSlcbiAgICBodG1sXG4gICAgICAuZmluZChgLiR7RUNDX0NMQVNTfSBpbnB1dFt0eXBlPVwicmFkaW9cIl1gKVxuICAgICAgLmVhY2goKGksIGVsKSA9PiB0aGlzLnNldFJhZGlvU3RhdGUoZWwpKVxuICAgIC8vIGh0bWwuZmluZChgLiR7RUNDX0NMQVNTfSAuZWNjLXJhZGlvLXN3aXRjaGApLmVhY2goIChpLCBlbCkgPT4gdGhpcy5zZXRTdGF0ZShlbCkpXG4gIH1cblxuICBzZXRTdGF0ZSAoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkgcmV0dXJuXG4gICAgaWYgKGVsZW1lbnQuZGF0YXNldC5mbGFnKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXG4gICAgICAgIHRoaXMuZmxhZ3NbZWxlbWVudC5kYXRhc2V0LmZsYWddID8gU1RBVEUuT04gOiBTVEFURS5PRkZcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGVsZW1lbnQuZGF0YXNldC5uYW1lKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGdldEJ5UGF0aCh0aGlzLCBlbGVtZW50LmRhdGFzZXQubmFtZSlcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh2YWx1ZSA/IFNUQVRFLk9OIDogU1RBVEUuT0ZGKVxuICAgIH1cbiAgfVxuXG4gIHNldFJhZGlvU3RhdGUgKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQubmFtZSkgcmV0dXJuXG4gICAgY29uc3Qgc3BsaXRlZCA9IGVsZW1lbnQubmFtZS5zcGxpdCgnLicpXG4gICAgaWYgKHNwbGl0ZWRbMF0udG9Mb3dlckNhc2UoKSAhPT0gJ2RhdGEnKSByZXR1cm5cbiAgICBpZiAodGhpcy5kYXRhICYmIHR5cGVvZiB0aGlzLmRhdGFbc3BsaXRlZFsxXV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodGhpcy5kYXRhW3NwbGl0ZWRbMV1dID09PSBlbGVtZW50LnZhbHVlKSB7XG4gICAgICAgIGVsZW1lbnQuY2hlY2tlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBzZXRWaXNpYmlsaXR5IChlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50LmRhdGFzZXQuZWNjVmlzaWJpbGl0eSkgcmV0dXJuXG4gICAgY29uc3QgY2FuWW91U2VlID0gYXdhaXQgdGhpcy5oYXNQZXJtKGVsZW1lbnQuZGF0YXNldC5lY2NWaXNpYmlsaXR5LCB0cnVlKVxuICAgIGlmICghY2FuWW91U2VlKSBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgfVxuXG4gIGFzeW5jIHNldFBlcm1pc3Npb24gKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQuZGF0YXNldC5lY2NQZXJtaXNzaW9ucykgcmV0dXJuXG4gICAgY29uc3QgY2FuWW91TW9kID0gYXdhaXQgdGhpcy5oYXNQZXJtKGVsZW1lbnQuZGF0YXNldC5lY2NQZXJtaXNzaW9ucylcbiAgICBpZiAoIWNhbllvdU1vZCkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdlY2MtcmVzdHJpY3RlZCcpXG4gICAgICBpZiAoJChlbGVtZW50KS5pcygnaW5wdXQnKSkge1xuICAgICAgICBpZiAoZWxlbWVudC50eXBlID09PSAncmFuZ2UnKSAkKGVsZW1lbnQpLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSlcbiAgICAgICAgZWxzZSAkKGVsZW1lbnQpLmF0dHIoJ3JlYWRvbmx5JywgdHJ1ZSlcbiAgICAgIH1cbiAgICAgIGlmICgkKGVsZW1lbnQpLmlzKCdzZWxlY3QnKSkgJChlbGVtZW50KS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBjdXJyZW50IHVzZXIgYXMgcGVybWlzc2lvbiBhZ2FpbnN0IGEgc3RyaW5nIG9mIGFsbG93ZWQgcGVyc29ucy5cbiAgICogSWYgdGhlIHN0cmluZyBpcyBlbXB0eSBwZXJtaXNzaW9uIGFyZSBhbGwgZ3JhbnRlZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzdHJpY3RlZFRvICAgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgc2V0IG9mIHBsYXllciBhbGxvd2VkLiBWYWx1ZSBjYW4gYmUgb3duZXIsIGdtLCBwbGF5ZXJzLCB1dWlkIHNlcGFyYXRlZCBieSBzcGFjZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZpc2lvbiAgICAgICAgaWYgdHJ1ZSBnbSB3aWxsIGJlIGNvbnNpZGVyZWQgZm9yIHBlcm1pc3Npb25zLiBmYWxzZSA9IGdtIGhhcyBhbHdheXMgcmlnaHQuIHRydWUgR00gcGVybWlzc2lvbiB3aWxsIGJlIGNoZWNrZWRcbiAgICogQHJldHVybnNcbiAgICovXG4gIGFzeW5jIGhhc1Blcm0gKHJlc3RyaWN0ZWRUbywgdmlzaW9uID0gZmFsc2UpIHtcbiAgICBpZiAoIXJlc3RyaWN0ZWRUby5sZW5ndGgpIHJldHVybiB0cnVlXG4gICAgbGV0IHBlcm1pc3Npb25zQXJyYXkgPSByZXN0cmljdGVkVG8uc3BsaXQoJyAnKVxuICAgIGNvbnN0IHdoaXRlTGlzdCA9ICFwZXJtaXNzaW9uc0FycmF5LmluY2x1ZGVzKFBFUk1JU1NJT05fVFlQRS5CTEFDS0xJU1QpXG4gICAgaWYgKCF3aGl0ZUxpc3QpIHtcbiAgICAgIHBlcm1pc3Npb25zQXJyYXkgPSBwZXJtaXNzaW9uc0FycmF5LmZpbHRlcihcbiAgICAgICAgZSA9PiBlICE9PSBQRVJNSVNTSU9OX1RZUEUuQkxBQ0tMSVNUXG4gICAgICApXG4gICAgfVxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaWYgKCF2aXNpb24pIHJldHVybiB0cnVlIC8vIEdNIGNhbiBhbHdheXMgbW9kaWZ5IGV2ZXJ5dGhpbmcgISBOYWhcbiAgICAgIGlmIChwZXJtaXNzaW9uc0FycmF5LmluY2x1ZGVzKFBFUk1JU1NJT05fVFlQRS5HTSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWUgJiYgd2hpdGVMaXN0XG4gICAgICB9XG4gICAgICBpZiAocGVybWlzc2lvbnNBcnJheS5pbmNsdWRlcyhQRVJNSVNTSU9OX1RZUEUuTk9UX0dNKSkge1xuICAgICAgICByZXR1cm4gZmFsc2UgfHwgIXdoaXRlTGlzdFxuICAgICAgfVxuICAgIH1cblxuICAgIHBlcm1pc3Npb25zQXJyYXkgPSBwZXJtaXNzaW9uc0FycmF5LmZpbHRlcihlID0+IGUgIT09IFBFUk1JU1NJT05fVFlQRS5HTSlcbiAgICBwZXJtaXNzaW9uc0FycmF5ID0gcGVybWlzc2lvbnNBcnJheS5maWx0ZXIoXG4gICAgICBlID0+IGUgIT09IFBFUk1JU1NJT05fVFlQRS5OT1RfR01cbiAgICApXG5cbiAgICAvLyAgIHJldHVybiBmYWxzZSB8fCAhd2hpdGVMaXN0IC8vSWYgcGFzcyB0aGUgZmlsdGVyIHJldHVybiBmYWxzZSB1bmxlc3MgaXQncyBhIGJsYWNrbGlzdFxuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICBwZXJtaXNzaW9uc0FycmF5ID0gcGVybWlzc2lvbnNBcnJheS5maWx0ZXIoZSA9PiBlICE9IFBFUk1JU1NJT05fVFlQRS5HTSlcbiAgICAvLyB9XG5cbiAgICBpZiAocGVybWlzc2lvbnNBcnJheS5pbmNsdWRlcyhQRVJNSVNTSU9OX1RZUEUuVVNFUikpIHtcbiAgICAgIGlmICh0aGlzLm1lc3NhZ2UuaXNBdXRob3IpIHJldHVybiB0cnVlICYmIHdoaXRlTGlzdCAvLyBpc0F1dGhvciB2cyB1c2VyLmlzT3duZXIgP1xuICAgICAgcGVybWlzc2lvbnNBcnJheSA9IHBlcm1pc3Npb25zQXJyYXkuZmlsdGVyKFxuICAgICAgICBlID0+IGUgIT09IFBFUk1JU1NJT05fVFlQRS5VU0VSXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHBlcm1pc3Npb25zQXJyYXkuaW5jbHVkZXMoUEVSTUlTU0lPTl9UWVBFLlNQRUFLRVIpKSB7XG4gICAgICBjb25zdCBzcGVha2VyID0gdGhpcy5tZXNzYWdlLmRhdGEuc3BlYWtlclxuICAgICAgaWYgKHNwZWFrZXIudG9rZW4gJiYgc3BlYWtlci5zY2VuZSkge1xuICAgICAgICBjb25zdCBhY3RvciA9IGF3YWl0IGZyb21VdWlkKFxuICAgICAgICAgIGBTY2VuZS4ke3NwZWFrZXIuc2NlbmV9LlRva2VuLiR7c3BlYWtlci50b2tlbn1gXG4gICAgICAgIClcbiAgICAgICAgaWYgKGFjdG9yKSB7XG4gICAgICAgICAgaWYgKGFjdG9yLmlzT3duZXIpIHJldHVybiB0cnVlICYmIHdoaXRlTGlzdFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNwZWFrZXIuYWN0b3IpIHtcbiAgICAgICAgY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoc3BlYWtlci5hY3RvcilcbiAgICAgICAgaWYgKGFjdG9yKSB7XG4gICAgICAgICAgaWYgKGFjdG9yLmlzT3duZXIpIHJldHVybiB0cnVlICYmIHdoaXRlTGlzdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBlbHNlIGlmIChzcGVha2VyLnVzZXIpIHtcbiAgICAgIC8vICAgaWYgKGdhbWUudXNlci5pZCA9PSBzcGVha2VyLnVzZXIpIHJldHVybiB0cnVlICYmIHdoaXRlTGlzdFxuICAgICAgLy8gfVxuICAgICAgcGVybWlzc2lvbnNBcnJheSA9IHBlcm1pc3Npb25zQXJyYXkuZmlsdGVyKFxuICAgICAgICBlID0+IGUgIT09IFBFUk1JU1NJT05fVFlQRS5TUEVBS0VSXG4gICAgICApXG4gICAgfVxuICAgIC8vIEFsbCBmaWx0ZXIgcGFzc2VkLCBhcnJheSBzaG91bGQgY29udGFpbnMgb25seSB1dWlkcyBvciBhY3Rvci90b2tlbiBpZHNcbiAgICBpZiAocGVybWlzc2lvbnNBcnJheS5sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGVybWlzc2lvbnNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB1dWlkID0gcGVybWlzc2lvbnNBcnJheVtpXVxuICAgICAgICBsZXQgYWN0b3IgPSBhd2FpdCBmcm9tVXVpZCh1dWlkKVxuICAgICAgICBpZiAoIWFjdG9yKSBhY3RvciA9IGdhbWUuYWN0b3JzLmdldCh1dWlkKVxuICAgICAgICBpZiAoYWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gYWN0b3IuaXNPd25lclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoYFVuYWJsZSB0byBmaW5kIGFjdG9yICR7dXVpZH1gKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZSB8fCAhd2hpdGVMaXN0IC8vIElmIHBhc3MgdGhlIGZpbHRlciByZXR1cm4gZmFsc2UgdW5sZXNzIGl0J3MgYSBibGFja2xpc3RcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBiaW5kTGlzdGVuZXJzIChodG1sKSB7XG4gICAgY29uc3QgaHRtbE1lc3NhZ2VFbGVtZW50ID0gaHRtbFswXVxuICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9IGh0bWxNZXNzYWdlRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtFQ0NfQ0xBU1N9YClcbiAgICBpZiAoIWh0bWxDYXJkRWxlbWVudCkgcmV0dXJuXG5cbiAgICBjb25zdCBjYXJkID0gYXdhaXQgRW5oYW5jZWRDaGF0Q2FyZC5mcm9tSFRNTENhcmRFbGVtZW50KGh0bWxDYXJkRWxlbWVudClcbiAgICBpZiAoIWNhcmQpIHJldHVyblxuICAgIGNhcmQuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgfVxuXG4gIGdldCBmbGFncyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5mbGFnc1xuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRvIHJlYXNzaWduIG9iamVjdCBmcm9tIHRoZSBkYXRhIHN0cnVjdHVyZS5cbiAgICogQHJldHVybnNcbiAgICovXG4gIGFzeW5jIGFzc2lnbk9iamVjdHMgKCkge31cblxuICAvKipcbiAgICogT3ZlcnJpZGUgdG8gdXBkYXRlIG9iamVjdCBhZnRlciBkYXRhIGNoYW5nZS5cbiAgICogVGhpcyBpcyBjYWxsZWQgYnkgdGhlIGxvY2FsIGNsaWVudFxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgYXN5bmMgbG9jYWxDb21wdXRlICgpIHt9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRvIHVwZGF0ZSBvYmplY3QgYWZ0ZXIgZGF0YSBjaGFuZ2UuXG4gICAqIFRoaXMgaXMgY2FsbGVkIGJ5IG9uZSBvZiB0aGUgR00gY2xpZW50cy5cbiAgICogQHJldHVybnNcbiAgICovXG4gIGFzeW5jIEdNVXBkYXRlICgpIHt9XG5cbiAgYXN5bmMgRXhlY3V0ZUdNVXBkYXRlICgpIHtcbiAgICBjb25zdCBuZXdEYXRhID0gYXdhaXQgZ2FtZS5lbmhhbmNlZENoYXRDYXJkc0xpYi5zb2NrZXQuZXhlY3V0ZUFzR00oXG4gICAgICAnR01VcGRhdGUnLFxuICAgICAgdGhpcy50b09iamVjdCgpLFxuICAgICAgdGhpcy5fb3B0aW9ucyxcbiAgICAgIHRoaXMuY29uc3RydWN0b3IubmFtZSxcbiAgICAgIHRoaXMubWVzc2FnZUlkXG4gICAgKVxuXG4gICAgdGhpcy5kYXRhID0gbmV3RGF0YVxuICAgIGF3YWl0IHRoaXMuYXNzaWduT2JqZWN0cygpXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudCB3aWxsIGNoZWNrIGZvciBhbiBhY3Rpb24gKGRhdGEtYWN0aW9uKVxuICAgKiBpZiBhIG1ldGhvZCB3aXRoIHRoYXQgbmFtZSBleGlzdCBpdCB3aWxsIGJlIHRyaWdnZXJlZC5cbiAgICovXG4gIGFzeW5jIF9vbkJ1dHRvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG5cbiAgICB0YXJnZXQuc3R5bGUuZGlzcGxheSA9ICdub25lJyAvLyBBdm9pZCBtdWx0aXBsZSBwdXNoXG4gICAgY29uc3QgYWN0aW9uID0gdGFyZ2V0LmRhdGFzZXQuYWN0aW9uXG5cbiAgICBsZXQgZm9ybVVwZGF0ZVxuICAgIGxldCBhY3Rpb25VcGRhdGUgPSBmYWxzZVxuXG4gICAgLy8gaWYgKCdzdWJtaXQnID09IHRhcmdldC50eXBlKSB7XG4gICAgLy8gICBjb25zb2xlLndhcm4oJ0J1dHRvbiBpcyBhbHNvIGEgc3VibWl0JylcbiAgICAvLyB9XG5cbiAgICAvLyBQZXJmb3JtIGNhcmQgdXBkYXRlIGZpcnN0XG4gICAgY29uc3QgY2FyZCA9IHRhcmdldC5jbG9zZXN0KGAuJHtFQ0NfQ0xBU1N9YClcbiAgICBpZiAoY2FyZCkgZm9ybVVwZGF0ZSA9IHRoaXMuX3VwZGF0ZShjYXJkKVxuICAgIGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYENvdWxkIG5vdCBmaW5kIGEgRUVDIGNsYXNzIGZvciB0aGlzIGNhcmQ6ICR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfWBcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBvcmlnaW5hbERpc3BsYXlTdHlsZSA9IHRhcmdldC5zdHlsZS5kaXNwbGF5XG5cbiAgICBpZiAoIWFjdGlvbikge1xuICAgICAgY29uc29sZS53YXJuKCdubyBhY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoaXMgYnV0dG9uJylcbiAgICAgIGlmICghZm9ybVVwZGF0ZSkgcmV0dXJuIC8vIElmIHRoZSBmb3JtIHdhcyB1cGRhdGVkIHdlIHN0aWxsIHVwZGF0ZSB0aGUgY2FyZFxuICAgIH1cbiAgICBpZiAoIXRoaXNbYWN0aW9uXSkge1xuICAgICAgY29uc29sZS53YXJuKGBubyAke2FjdGlvbn0gYWN0aW9uIGZvdW5kIGZvciB0aGlzIGNhcmRgKVxuICAgICAgaWYgKCFmb3JtVXBkYXRlKSByZXR1cm4gLy8gSWYgdGhlIGZvcm0gd2FzIHVwZGF0ZWQgd2Ugc3RpbGwgdXBkYXRlIHRoZSBjYXJkXG4gICAgfVxuICAgIGlmICh0aGlzW2FjdGlvbl0pIHtcbiAgICAgIGFjdGlvblVwZGF0ZSA9IGF3YWl0IHRoaXNbYWN0aW9uXSh7IGV2ZW50LCB1cGRhdGVDYXJkOiBmYWxzZSB9KVxuICAgIH1cblxuICAgIGlmIChmb3JtVXBkYXRlIHx8IGFjdGlvblVwZGF0ZSkgYXdhaXQgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gICAgZWxzZSB0YXJnZXQuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheVN0eWxlXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudFxuICAgKiBAcmV0dXJucyBmYWxzZSBpZiBrZXkgaXMgZW50ZXIgdG8gYXZvaWQgZ2xvYmFsIHN1Ym1pc3Npb25cbiAgICovXG4gIF9vbktleSAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB0aGlzLl9vblN1Ym1pdChldmVudClcbiAgICByZXR1cm4gZXZlbnQua2V5ICE9PSAnRW50ZXInXG4gIH1cblxuICBfb25DaGFuZ2UgKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdWJtaXRPbkNoYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX29uU3VibWl0KGV2ZW50KVxuICAgIH1cbiAgfVxuXG4gIF9vblN1Ym1pdCAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgdGFnTmFtZSA9IHRhcmdldC50YWdOYW1lXG4gICAgaWYgKHRhZ05hbWUgPT09ICdCVVRUT04nICYmICdhY3Rpb24nIGluIHRhcmdldC5kYXRhc2V0KSByZXR1cm4gLy9cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCBjYXJkID0gdGFyZ2V0LmNsb3Nlc3QoYC4ke0VDQ19DTEFTU31gKVxuICAgIGlmICghY2FyZCkgcmV0dXJuXG4gICAgY29uc3QgdXBkYXRlcyA9IHRoaXMuX3VwZGF0ZShjYXJkKVxuICAgIGlmICh1cGRhdGVzKSB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgZm9ybSBmcm9tIHRoZSBjYXJkIGFuZCB1cGRhdGUgdGhlIGRhdGEgc3RydWN0dXJlXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhcmRcbiAgICogQHJldHVybnNcbiAgICovXG4gIF91cGRhdGUgKGNhcmQpIHtcbiAgICBjb25zdCBmb3JtcyA9IGNhcmQucXVlcnlTZWxlY3RvckFsbCgnZm9ybScpXG4gICAgbGV0IHVwZGF0ZXMgPSBmYWxzZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZvcm0gPSBmb3Jtc1tpXVxuICAgICAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGFFeHRlbmRlZChmb3JtKVxuICAgICAgY29uc3QgZGF0YSA9IGZkLm9iamVjdFxuICAgICAgLy8gZGF0YSA9IGZvdW5kcnkudXRpbHMuZGlmZk9iamVjdChcbiAgICAgIC8vICAgdGhpcy5kYXRhLFxuICAgICAgLy8gICBmb3VuZHJ5LnV0aWxzLmV4cGFuZE9iamVjdChkYXRhKVxuICAgICAgLy8gKVxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YSkpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBnZXRCeVBhdGgodGhpcywga2V5KVxuICAgICAgICBpZiAoIShvbGRWYWx1ZSA9PT0gdmFsdWUpKSB7XG4gICAgICAgICAgc2V0QnlQYXRoKHRoaXMsIGtleSwgdmFsdWUpXG4gICAgICAgICAgdXBkYXRlcyA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlc1xuICB9XG5cbiAgZ2V0IG1lc3NhZ2UgKCkge1xuICAgIGlmICh0aGlzLl9tZXNzYWdlKSByZXR1cm4gdGhpcy5fbWVzc2FnZVxuICAgIGlmICh0aGlzLl9tZXNzYWdlSWQpIHJldHVybiBnYW1lLm1lc3NhZ2VzLmdldCh0aGlzLl9tZXNzYWdlSWQpXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgc2V0IG1lc3NhZ2UgKHgpIHtcbiAgICB0aGlzLl9tZXNzYWdlID0geFxuICB9XG5cbiAgZ2V0IG1lc3NhZ2VJZCAoKSB7XG4gICAgaWYgKHRoaXMuX21lc3NhZ2VJZCkgcmV0dXJuIHRoaXMuX21lc3NhZ2VJZFxuICAgIGlmICh0aGlzLl9tZXNzYWdlKSByZXR1cm4gdGhpcy5fbWVzc2FnZS5pZFxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHNldCBtZXNzYWdlSWQgKHgpIHtcbiAgICB0aGlzLl9tZXNzYWdlSWQgPSB4XG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXR0YWNoT2JqZWN0OiB0cnVlLFxuICAgICAgY2xhc3NlczogW0VDQ19DTEFTU10sXG4gICAgICBleGNsdWRlOiBbXSxcbiAgICAgIGV4Y2x1ZGVTdGFydFdpdGg6ICdfJyxcbiAgICAgIHN1Ym1pdE9uQ2hhbmdlOiB0cnVlLFxuICAgICAgc3BlYWtlcjogQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpLFxuICAgICAgb29jOiBmYWxzZSwgLy8gICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5vb2M9ZmFsc2VdICBVc2UgdGhlIHNwZWFrZXIvZ2V0c3BlYWtlci4gaWYgdHJ1ZSB1c2UgdGhlIHVzZXIgaW5zdGVhZFxuICAgICAgY29tcHV0ZTogdHJ1ZSwgLy8gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNvbXB1dGUubG9jYWw9dHJ1ZV0gaW52b3F1ZSB0aGUgY29tcHV0ZSBtZXRob2QgYXMgbG9jYWwgdXNlciA9PiBuZWVkIHRvIG92ZXJyaWRlIGxvY2FsQ29tcHV0ZVxuICAgICAgR01VcGRhdGU6IGZhbHNlIC8vICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jb21wdXRlLkdNPWZhbHNlXSBpbnZvcXVlIHRoZSBHTVVwZGF0ZSBtZXRob2QgYXMgR00gPT4gbmVlZCB0byBvdmVycmlkZSBHTVVwZGF0ZVxuICAgIH1cbiAgfVxuXG4gIGdldCBvYmplY3REYXRhU3RyaW5nICgpIHtcbiAgICBjb25zdCBzYXZlRGF0YSA9IHtcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIG9wdGlvbnM6IHRoaXMuX29wdGlvbnNcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHNhdmVEYXRhLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4Y2x1ZGU/LmluY2x1ZGVzKGtleSkpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCh0aGlzLm9wdGlvbnMuZXhjbHVkZVN0YXJ0V2l0aCkpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0pXG4gIH1cblxuICBnZXQgcm9sbE1vZGUgKCkge1xuICAgIGlmICghdGhpcy5fcm9sbE1vZGUpIHRoaXMuX3JvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIHJldHVybiB0aGlzLl9yb2xsTW9kZVxuICB9XG5cbiAgc2V0IHJvbGxNb2RlICh4KSB7XG4gICAgaWYgKHggPT09IGZhbHNlKSB0aGlzLl9yb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICB0aGlzLl9yb2xsTW9kZSA9IHhcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tTWVzc2FnZUlkIChtZXNzYWdlSWQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCB0aGlzLmZyb21NZXNzYWdlKG1lc3NhZ2UpXG4gICAgY2FyZC5tZXNzYWdlSWQgPSBtZXNzYWdlSWRcbiAgICByZXR1cm4gY2FyZFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21NZXNzYWdlIChtZXNzYWdlKSB7XG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSAkKG1lc3NhZ2UuZGF0YS5jb250ZW50KVswXVxuICAgIGlmICghY2FyZEVsZW1lbnQpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBjYXJkID0gYXdhaXQgdGhpcy5mcm9tSFRNTENhcmRFbGVtZW50KGNhcmRFbGVtZW50KVxuICAgIGNhcmQubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICByZXR1cm4gY2FyZFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21IVE1MQ2FyZEVsZW1lbnQgKGh0bW1sQ2FyZCkge1xuICAgIGlmICghaHRtbWxDYXJkKSByZXR1cm5cbiAgICBpZiAoIWh0bW1sQ2FyZC5kYXRhc2V0LmVjY0NsYXNzKSByZXR1cm5cbiAgICBpZiAoIWh0bW1sQ2FyZC5kYXRhc2V0Lm9iamVjdCkgcmV0dXJuXG4gICAgY29uc3QgY2FyZERhdGEgPSBKU09OLnBhcnNlKHVuZXNjYXBlKGh0bW1sQ2FyZC5kYXRhc2V0Lm9iamVjdCkpXG4gICAgY29uc3QgbWVzc2FnZSA9IGh0bW1sQ2FyZC5jbG9zZXN0KCcubWVzc2FnZScpXG4gICAgY29uc3QgbWVzc2FnZUlkID0gbWVzc2FnZT8uZGF0YXNldD8ubWVzc2FnZUlkXG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5mcm9tRGF0YShcbiAgICAgIGNhcmREYXRhLmRhdGEsXG4gICAgICBjYXJkRGF0YS5vcHRpb25zLFxuICAgICAgaHRtbWxDYXJkLmRhdGFzZXQuZWNjQ2xhc3MsXG4gICAgICBtZXNzYWdlSWRcbiAgICApXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZnJvbURhdGEgKGRhdGEsIG9wdGlvbnMsIGNhcmRDbGFzc05hbWUsIG1lc3NhZ2VJZCA9IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IENhcmRDbGFzcyA9IGdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIudHlwZXMuZ2V0KGNhcmRDbGFzc05hbWUpXG5cbiAgICBpZiAoIUNhcmRDbGFzcykge1xuICAgICAgY29uc29sZS5lcnJvcihgVW5rbm93biBjaGF0IGNhcmQgdHlwZTogJHtjYXJkQ2xhc3NOYW1lfWApXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkQ2xhc3MoZGF0YSwgb3B0aW9ucylcbiAgICBpZiAobWVzc2FnZUlkKSBjYXJkLm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZFxuICAgIGF3YWl0IGNhcmQuYXNzaWduT2JqZWN0cygpXG4gICAgcmV0dXJuIGNhcmRcbiAgfVxuXG4gIHNldERhdGEgKG5hbWUpIHtcbiAgICBpZiAoIW5hbWUgJiYgISgkLnR5cGUobmFtZSkgPT09ICdzdHJpbmcnKSkgcmV0dXJuXG4gICAgc2V0QnlQYXRoKHRoaXMsIG5hbWUsIHRydWUpXG4gIH1cblxuICB1bnNldERhdGEgKG5hbWUpIHtcbiAgICBpZiAoIW5hbWUgJiYgISgkLnR5cGUobmFtZSkgPT09ICdzdHJpbmcnKSkgcmV0dXJuXG4gICAgc2V0QnlQYXRoKHRoaXMsIG5hbWUsIGZhbHNlKVxuICB9XG5cbiAgdG9nZ2xlRGF0YSAobmFtZSkge1xuICAgIGlmICghbmFtZSAmJiAhKCQudHlwZShuYW1lKSA9PT0gJ3N0cmluZycpKSByZXR1cm5cbiAgICBjb25zdCB2YWx1ZSA9IGdldEJ5UGF0aCh0aGlzLCBuYW1lKVxuICAgIHNldEJ5UGF0aCh0aGlzLCBuYW1lLCAhdmFsdWUpXG4gIH1cblxuICBhc3luYyBfb25Ub2dnbGUgKGV2ZW50KSB7XG4gICAgLy8gY29uc3QgYW5zd2VyID0gYXdhaXQgRW5oYW5jZWRDaGF0Q2FyZExpYi5zb2NrZXQuZXhlY3V0ZUFzR00oJ2dtX29uVG9nZ2xlJywge1xuICAgIC8vICAgZXZlbnQ6IGV2ZW50LFxuICAgIC8vICAgY2FyZDogdGhpc1xuICAgIC8vIH0pXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGlmICgnYWN0aW9uJyBpbiB0YXJnZXQuZGF0YXNldCkgcmV0dXJuIHRoaXMuX29uQnV0dG9uKGV2ZW50KVxuICAgIGlmIChcbiAgICAgIHRhcmdldCAmJlxuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZ20tc2VsZWN0LW9ubHknKSAmJlxuICAgICAgIWdhbWUudXNlci5pc0dNXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgbmFtZSA9IHRhcmdldC5kYXRhc2V0LmZsYWdcbiAgICAgID8gYGRhdGEuZmxhZ3MuJHt0YXJnZXQuZGF0YXNldC5mbGFnfWBcbiAgICAgIDogdGFyZ2V0LmRhdGFzZXQubmFtZVxuICAgIGlmICghbmFtZSkgcmV0dXJuXG4gICAgY29uc3QgdG9nZ2xlID0gdGFyZ2V0LmNsb3Nlc3QoJy5lY2MtcmFkaW8nKVxuICAgIGlmICghdG9nZ2xlKSB7XG4gICAgICB0aGlzLnRvZ2dsZURhdGEobmFtZSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYnV0dG9ucyA9IHRvZ2dsZS5xdWVyeVNlbGVjdG9yQWxsKCcuZWNjLXN3aXRjaCcpXG4gICAgICBmb3IgKGNvbnN0IGIgb2YgYnV0dG9ucykge1xuICAgICAgICBjb25zdCBiTmFtZSA9IGIuZGF0YXNldC5mbGFnXG4gICAgICAgICAgPyBgZGF0YS5mbGFncy4ke2IuZGF0YXNldC5mbGFnfWBcbiAgICAgICAgICA6IGIuZGF0YXNldC5uYW1lXG4gICAgICAgIHRoaXMudW5zZXREYXRhKGJOYW1lKVxuICAgICAgfVxuICAgICAgdGhpcy5zZXREYXRhKG5hbWUpXG4gICAgfVxuICAgIGNvbnN0IGNhcmQgPSB0YXJnZXQuY2xvc2VzdChgLiR7RUNDX0NMQVNTfWApXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdWJtaXRPbkNoYW5nZSkge1xuICAgICAgaWYgKGNhcmQpIHRoaXMuX3VwZGF0ZShjYXJkKVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZUNoYXRDYXJkKCkgLy8gU3VibWl0IG9uIGNoYW5nZSA/XG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBnYW1lLCB1aSAqL1xuaW1wb3J0IHsgY2hhdEhlbHBlciB9IGZyb20gJy4uLy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzLmpzJ1xuXG5leHBvcnQgY2xhc3MgX3BhcnRpY2lwYW50IHtcbiAgY29uc3RydWN0b3IgKGRhdGEgPSB7fSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGFcbiAgfVxuXG4gIF9mZXRjaCAoKSB7XG4gICAgaWYgKCF0aGlzLl9kb2MgJiYgdGhpcy5kYXRhLmRvY1V1aWQpIHtcbiAgICAgIHRoaXMuX2RvYyA9IENvQzdVdGlsaXRpZXMuZ2V0RG9jdW1lbnRGcm9tS2V5KHRoaXMuZGF0YS5kb2NVdWlkKVxuICAgIH1cblxuICAgIGlmICghdGhpcy5fYWN0b3IpIHtcbiAgICAgIGlmICh0aGlzLl9kb2MpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9kb2MuY29uc3RydWN0b3I/Lm5hbWUpIHtcbiAgICAgICAgICBjYXNlICdUb2tlbkRvY3VtZW50JzpcbiAgICAgICAgICAgIHRoaXMuX2FjdG9yID0gdGhpcy5fZG9jLmFjdG9yXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnQ29DQWN0b3InOlxuICAgICAgICAgICAgdGhpcy5fYWN0b3IgPSB0aGlzLl9kb2NcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB0aGlzLl9hY3RvciA9IENvQzdVdGlsaXRpZXMuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuZGF0YS5kb2NVdWlkKVxuICAgIH1cbiAgfVxuXG4gIGdldCBhY3RvciAoKSB7XG4gICAgdGhpcy5fZmV0Y2goKVxuICAgIHJldHVybiB0aGlzLl9hY3RvclxuICB9XG5cbiAgZ2V0IGlzQWN0b3IgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0FjdG9yIHx8IHRoaXMuaGFzVmVoaWNsZVxuICB9XG5cbiAgZ2V0IGlzQWN0aXZlICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmFjdGl2ZSB8fCBmYWxzZVxuICB9XG5cbiAgZ2V0IGtleSAoKSB7XG4gICAgaWYgKHRoaXMuaGFzVmVoaWNsZSkgcmV0dXJuIHRoaXMudmVoaWNsZS5hY3RvcktleVxuICAgIGlmICh0aGlzLmhhc0FjdG9yKSByZXR1cm4gdGhpcy5hY3Rvci5hY3RvcktleVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBpY29uICgpIHtcbiAgICBpZiAoIXRoaXMuaXNBY3Rvcikge1xuICAgICAgcmV0dXJuICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zL3F1ZXN0aW9uLWNpcmNsZS1yZWd1bGFyLnN2ZydcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzVmVoaWNsZSkgcmV0dXJuIHRoaXMudmVoaWNsZS5pbWdcbiAgICBpZiAodGhpcy5oYXNBY3RvcikgcmV0dXJuIHRoaXMuYWN0b3IuaW1nXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IGRyaXZlciAoKSB7XG4gICAgaWYgKCF0aGlzLl9kcml2ZXIpIHtcbiAgICAgIHRoaXMuX2RyaXZlciA9IENvQzdVdGlsaXRpZXMuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuZGF0YS5kb2NVdWlkKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZHJpdmVyXG4gIH1cblxuICBnZXQgdmVoaWNsZSAoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS52ZWhpY2xlS2V5KSB7XG4gICAgICB0aGlzLl92ZWhpY2xlID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5kYXRhLnZlaGljbGVLZXkpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl92ZWhpY2xlXG4gIH1cblxuICBnZXQgaGFzQWN0b3IgKCkge1xuICAgIHJldHVybiAhIXRoaXMuYWN0b3JcbiAgfVxuXG4gIGdldCBoYXNWZWhpY2xlICgpIHtcbiAgICByZXR1cm4gISF0aGlzLnZlaGljbGVcbiAgfVxuXG4gIGdldCBuYW1lICgpIHtcbiAgICBpZiAodGhpcy5oYXNWZWhpY2xlKSByZXR1cm4gdGhpcy52ZWhpY2xlLm5hbWVcbiAgICBpZiAodGhpcy5oYXNBY3RvcikgcmV0dXJuIHRoaXMuYWN0b3IubmFtZVxuICAgIHJldHVybiB0aGlzLmRhdGEubmFtZSB8fCB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBtb3YgKCkge1xuICAgIGlmICghdGhpcy5kYXRhLm1vdikge1xuICAgICAgaWYgKHRoaXMuaGFzVmVoaWNsZSkgdGhpcy5kYXRhLm1vdiA9IHRoaXMudmVoaWNsZS5tb3ZcbiAgICAgIGVsc2UgaWYgKHRoaXMuaGFzQWN0b3IpIHRoaXMuZGF0YS5tb3YgPSB0aGlzLmFjdG9yLm1vdlxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEubW92KSB7XG4gICAgICBpZiAoIWlzTmFOKE51bWJlcih0aGlzLmRhdGEubW92KSkpIHRoaXMuZGF0YS5oYXNWYWxpZE1vdiA9IHRydWVcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmRhdGEuaGFzVmFsaWRNb3YgPSBmYWxzZVxuICAgICAgICB0aGlzLmRhdGEubW92ID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGF0YS5tb3ZcbiAgfVxuXG4gIGdldCB1dWlkICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnV1aWRcbiAgfVxuXG4gIGdldCBoYXNNYXhCb251c0RpY2UgKCkge1xuICAgIHJldHVybiB0aGlzLmJvbnVzRGljZSA+PSAyXG4gIH1cblxuICBnZXQgYm9udXNEaWNlICgpIHtcbiAgICBpZiAoXG4gICAgICBpc05hTih0aGlzLmRhdGEuYm9udXNEaWNlKSB8fFxuICAgICAgdGhpcy5kYXRhLmJvbnVzRGljZSA8IDAgfHxcbiAgICAgIHRoaXMuZGF0YS5ib251c0RpY2UgPiAyXG4gICAgKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kYXRhLmJvbnVzRGljZVxuICB9XG5cbiAgc2V0IGJvbnVzRGljZSAoeCkge1xuICAgIGlmIChpc05hTih4KSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignQm9udXMgZGljZSBjYW4gT25seSBiZSBhIG51bWJlcicpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHggPiAyKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdNYXggMiBib251cyBkaWNlJylcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ05vIG5lZ2F0aXYgYm9udXMgZGljZScpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5kYXRhLmJvbnVzRGljZSA9IHhcbiAgfVxuXG4gIGdldCBocCAoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEuaHApIHtcbiAgICAgIHRoaXMuZGF0YS5ocCA9IDBcbiAgICB9XG4gICAgaWYgKHRoaXMuYWN0b3IpIHtcbiAgICAgIHRoaXMuZGF0YS5ocCA9IHRoaXMuYWN0b3IuaHBcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhLmhwXG4gIH1cblxuICBzZXQgaHAgKHgpIHtcbiAgICB0aGlzLmRhdGEuaHAgPSB4XG4gICAgaWYgKHRoaXMuYWN0b3IpIHtcbiAgICAgIHRoaXMuYWN0b3Iuc2V0SHAoeClcbiAgICB9XG4gIH1cblxuICBhZGRCb251c0RpY2UgKCkge1xuICAgIGlmICh0aGlzLmRhdGEuYm9udXNEaWNlID49IDIpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ0FscmVhZHkgaGF2ZSBtYXggYm9udXMgZGljZScpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5kYXRhLmJvbnVzRGljZSArPSAxXG4gIH1cblxuICByZW1vdmVCb251c0RpY2UgKCkge1xuICAgIGlmICh0aGlzLmRhdGEuYm9udXNEaWNlIDw9IDApIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ0FscmVhZHkgaGF2ZSAwIGJvbnVzIGRpY2UnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuZGF0YS5ib251c0RpY2UgLT0gMVxuICB9XG5cbiAgcmVzZXRCb251c0RpY2UgKCkge1xuICAgIHRoaXMuZGF0YS5ib251c0RpY2UgPSAwXG4gIH1cblxuICBnZXQgaGFzQm9udXNEaWNlICgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNPbmVCb251c0RpY2UgfHwgdGhpcy5oYXNUd29Cb251c0RpY2VcbiAgfVxuXG4gIGdldCBoYXNPbmVCb251c0RpY2UgKCkge1xuICAgIHJldHVybiB0aGlzLmJvbnVzRGljZSA+PSAxXG4gIH1cblxuICBnZXQgaGFzVHdvQm9udXNEaWNlICgpIHtcbiAgICByZXR1cm4gdGhpcy5ib251c0RpY2UgPj0gMlxuICB9XG5cbiAgZ2V0IGNhbkFzc2lzdCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXNzaXN0Py5sZW5ndGggPiAwXG4gIH1cblxuICBnZXQgY2FuQmVDYXV0aW91cyAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmhhc01heEJvbnVzRGljZVxuICB9XG5cbiAgZ2V0IGFzc2lzdCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5hc3Npc3QgfHwgW11cbiAgfVxuXG4gIGdldCBkZXggKCkge1xuICAgIGlmICghdGhpcy5kYXRhLmRleCkge1xuICAgICAgaWYgKHRoaXMuaGFzVmVoaWNsZSAmJiB0aGlzLmhhc0RyaXZlcikge1xuICAgICAgICB0aGlzLmRhdGEuZGV4ID0gdGhpcy5kcml2ZXIuY2hhcmFjdGVyaXN0aWNzLmRleC52YWx1ZVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmhhc0FjdG9yKSB7XG4gICAgICAgIHRoaXMuZGF0YS5kZXggPSB0aGlzLmFjdG9yLmNoYXJhY3RlcmlzdGljcy5kZXgudmFsdWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5kYXRhLmRleCkge1xuICAgICAgaWYgKCFpc05hTihOdW1iZXIodGhpcy5kYXRhLmRleCkpKSB0aGlzLmRhdGEuaGFzVmFsaWREZXggPSB0cnVlXG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5kYXRhLmhhc1ZhbGlkRGV4ID0gZmFsc2VcbiAgICAgICAgdGhpcy5kYXRhLmRleCA9IDBcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhLmRleFxuICB9XG5cbiAgZ2V0IGhhc0FHdW5SZWFkeSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5oYXNBR3VuUmVhZHkgfHwgZmFsc2VcbiAgfVxuXG4gIGdldCBpbml0aWF0aXZlICgpIHtcbiAgICBsZXQgaW5pdCA9IHRoaXMuZGV4XG4gICAgaWYgKHRoaXMuaGFzQUd1blJlYWR5KSB7XG4gICAgICBpbml0ICs9IDUwXG4gICAgfVxuICAgIC8vIGlmKCB0aGlzLnNwZWVkQ2hlY2spe1xuICAgIC8vICAgaWYodGhpcy5zcGVlZENoZWNrLnNjb3JlKSBpbml0ICs9IHRoaXMuc3BlZWRDaGVjay5zY29yZS8xMDBcbiAgICAvLyB9XG5cbiAgICByZXR1cm4gaW5pdFxuICB9XG5cbiAgZ2V0IGlzQ2hhc2VyICgpIHtcbiAgICByZXR1cm4gISF0aGlzLmRhdGEuY2hhc2VyXG4gIH1cblxuICBnZXQgaXNQcmV5ICgpIHtcbiAgICByZXR1cm4gIXRoaXMuaXNDaGFzZXJcbiAgfVxuXG4gIGdldCBpc1ZhbGlkICgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNWYWxpZERleCAmJiB0aGlzLmhhc1ZhbGlkTW92XG4gIH1cblxuICBnZXQgaGFzVmFsaWREZXggKCkge1xuICAgIHJldHVybiAhaXNOYU4oTnVtYmVyKHRoaXMuZGF0YS5kZXgpKVxuICB9XG5cbiAgZ2V0IGhhc1ZhbGlkTW92ICgpIHtcbiAgICByZXR1cm4gIWlzTmFOKE51bWJlcih0aGlzLmRhdGEubW92KSlcbiAgfVxuXG4gIGdldCBoYXNEcml2ZXIgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc1ZlaGljbGUgJiYgdGhpcy5oYXNBY3RvclxuICB9XG5cbiAgZ2V0IG1vdkFkanVzdG1lbnQgKCkge1xuICAgIGlmICh0aGlzLmRhdGEuc3BlZWRDaGVjaz8ucm9sbERhdGFTdHJpbmcpIHtcbiAgICAgIGNvbnN0IHJvbGwgPSBDb0M3Q2hlY2suZnJvbVJvbGxTdHJpbmcodGhpcy5kYXRhLnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmcpXG4gICAgICBpZiAocm9sbCkge1xuICAgICAgICBpZiAoIXJvbGwuc3RhbmRieSkge1xuICAgICAgICAgIGlmIChyb2xsLnN1Y2Nlc3NMZXZlbCA+PSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWUpIHJldHVybiAxXG4gICAgICAgICAgZWxzZSBpZiAocm9sbC5mYWlsZWQpIHJldHVybiAtMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cblxuICBnZXQgYWRqdXN0ZWRNb3YgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5tb3YgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKGlzTmFOKE51bWJlcih0aGlzLm1vdikpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIE51bWJlcih0aGlzLm1vdikgKyB0aGlzLm1vdkFkanVzdG1lbnRcbiAgfVxuXG4gIGdldCBoYXNNb3ZBZGp1c3RtZW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNCb251c01vdiB8fCB0aGlzLmhhc01hbHVzTW92XG4gIH1cblxuICBnZXQgaGFzQm9udXNNb3YgKCkge1xuICAgIGlmICh0aGlzLmRhdGEubW92QWRqdXN0bWVudCA+IDApIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgaGFzTWFsdXNNb3YgKCkge1xuICAgIGlmICh0aGlzLmRhdGEubW92QWRqdXN0bWVudCA8IDApIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBnZXQgb3B0aW9ucygpe1xuICAvLyAgcmV0dXJuIHtcbiAgLy8gICAgZXhjbHVkZTogW10sXG4gIC8vICAgIGV4Y2x1ZGVTdGFydFdpdGg6ICdfJ1xuICAvLyAgfTtcbiAgLy8gfVxuXG4gIC8vIGdldCBkYXRhU3RyaW5nKCl7XG4gIC8vICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcywgKGtleSx2YWx1ZSk9PntcbiAgLy8gICAgaWYoIG51bGwgPT09IHZhbHVlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAvLyAgICBpZiggdGhpcy5vcHRpb25zLmV4Y2x1ZGU/LmluY2x1ZGVzKGtleSkpIHJldHVybiB1bmRlZmluZWQ7XG4gIC8vICAgIGlmKCBrZXkuc3RhcnRzV2l0aCh0aGlzLm9wdGlvbnMuZXhjbHVkZVN0YXJ0V2l0aCkpIHJldHVybiB1bmRlZmluZWQ7XG4gIC8vICAgIHJldHVybiB2YWx1ZTtcbiAgLy8gIH0pO1xuICAvLyB9XG5cbiAgdG9vU2xvdyAoKSB7XG4gICAgdGhpcy5kYXRhLmV4Y2x1ZGVkID0gdHJ1ZVxuICB9XG5cbiAgaW5jbHVkZUluQ2hhc2UgKCkge1xuICAgIHRoaXMuZGF0YS5leGNsdWRlZCA9IGZhbHNlXG4gICAgdGhpcy5kYXRhLmVzY2FwZWQgPSBmYWxzZVxuICB9XG5cbiAgZXNjYXBlZCAoKSB7XG4gICAgdGhpcy5kYXRhLmVzY2FwZWQgPSB0cnVlXG4gIH1cblxuICBzZXQgc2xvd2VzdCAoeCkge1xuICAgIHRoaXMuZGF0YS5zbG93ZXN0ID0geFxuICB9XG5cbiAgZ2V0IHNsb3dlc3QgKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuc2xvd2VzdFxuICB9XG5cbiAgc2V0IGZhc3Rlc3QgKHgpIHtcbiAgICB0aGlzLmRhdGEuZmFzdGVzdCA9IHhcbiAgfVxuXG4gIGdldCBmYXN0ZXN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmZhc3Rlc3RcbiAgfVxuXG4gIGNhbGN1bGF0ZU1vdmVtZW50QWN0aW9ucyAobWluTW92KSB7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHRoaXMubW92ZW1lbnRBY3Rpb24gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICB0eXBlb2YgdGhpcy5hZGp1c3RlZE1vdiA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgIGlzTmFOKG1pbk1vdilcbiAgICApIHtcbiAgICAgIHRoaXMubW92ZW1lbnRBY3Rpb24gPSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZW1lbnRBY3Rpb24gPSAxICsgKHRoaXMuYWRqdXN0ZWRNb3YgLSBtaW5Nb3YpXG4gICAgfVxuICAgIC8vIGlmKCB0aGlzLm1vdmVtZW50QWN0aW9uIDwgMCkgdGhpcy5tb3ZlbWVudEFjdGlvbiA9IDBcbiAgfVxuXG4gIHNldCBtb3ZlbWVudEFjdGlvbiAoeCkge1xuICAgIHRoaXMuZGF0YS5tb3ZlbWVudEFjdGlvbiA9IHhcbiAgfVxuXG4gIGdldCBtb3ZlbWVudEFjdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5tb3ZlbWVudEFjdGlvblxuICB9XG5cbiAgc2V0IGN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgKHgpIHtcbiAgICB0aGlzLmRhdGEuY3VycmVudE1vdmVtZW50QWN0aW9ucyA9IHhcbiAgfVxuXG4gIGdldCBjdXJyZW50TW92ZW1lbnRBY3Rpb25zICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgfHwgMFxuICB9XG5cbiAgZ2V0IGhhc01heE12dEFjdGlvbnMgKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPj0gdGhpcy5tb3ZlbWVudEFjdGlvblxuICB9XG5cbiAgZ2V0IGhhc05vTXZ0QWN0aW9ucyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudE1vdmVtZW50QWN0aW9ucyA8PSAwXG4gIH1cblxuICBhZGRNb3ZlbWVudEFjdGlvbnMgKHggPSAxKSB7XG4gICAgdGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zICs9IHhcbiAgICBpZiAodGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID4gdGhpcy5tb3ZlbWVudEFjdGlvbikge1xuICAgICAgdGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID0gdGhpcy5tb3ZlbWVudEFjdGlvblxuICAgIH1cbiAgfVxuXG4gIGFsdGVyTW92ZW1lbnRBY3Rpb25zICh4KSB7XG4gICAgdGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zICs9IHhcbiAgICBpZiAodGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID4gdGhpcy5tb3ZlbWVudEFjdGlvbikge1xuICAgICAgdGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID0gdGhpcy5tb3ZlbWVudEFjdGlvblxuICAgIH1cbiAgfVxuXG4gIGdldCBtb3ZlbWVudEFjdGlvbkFycmF5ICgpIHtcbiAgICBjb25zdCBiYXNlQXJyYXkgPSBBcnJheSh0aGlzLm1vdmVtZW50QWN0aW9uKS5maWxsKCdiYXNlJylcbiAgICBpZiAodGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID49IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zOyBpKyspIHtcbiAgICAgICAgYmFzZUFycmF5W2ldID0gJ2Jhc2UgYXZhaWxhYmxlJ1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VBcnJheVxuICAgIH1cblxuICAgIGlmICh0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPCAwKSB7XG4gICAgICBjb25zdCBkZWZpY2l0QXJyYXkgPSBBcnJheShNYXRoLmFicyh0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMpKS5maWxsKFxuICAgICAgICAnZGVmaWNpdCdcbiAgICAgIClcbiAgICAgIHJldHVybiBkZWZpY2l0QXJyYXkuY29uY2F0KGJhc2VBcnJheSlcbiAgICB9XG4gIH1cblxuICBnZXQgY3NzQ2xhc3MgKCkge1xuICAgIGNvbnN0IGNzc0NsYXNzZXMgPSBbXVxuICAgIGlmICh0aGlzLmlzQ2hhc2VyKSBjc3NDbGFzc2VzLnB1c2goJ2NoYXNlcicpXG4gICAgZWxzZSBjc3NDbGFzc2VzLnB1c2goJ3ByZXknKVxuICAgIGlmICh0aGlzLmRhdGEuZXhjbHVkZWQpIGNzc0NsYXNzZXMucHVzaCgnZXhjbHVkZWQnLCAndG9vX3Nsb3cnKVxuICAgIGlmICh0aGlzLmRhdGEuZXNjYXBlZCkgY3NzQ2xhc3Nlcy5wdXNoKCdlc2NhcGVkJylcbiAgICBpZiAodGhpcy5kYXRhLmZhc3Rlc3QpIGNzc0NsYXNzZXMucHVzaCgnZmFzdGVzdCcpXG4gICAgaWYgKHRoaXMuZGF0YS5zbG93ZXN0KSBjc3NDbGFzc2VzLnB1c2goJ3Nsb3dlc3QnKVxuICAgIGlmICh0aGlzLmRhdGEuYWN0aXZlKSBjc3NDbGFzc2VzLnB1c2goJ2FjdGl2ZScpXG4gICAgaWYgKHRoaXMuZGF0YS5jdXJyZW50TW92ZW1lbnRBY3Rpb25zIDw9IDApIGNzc0NsYXNzZXMucHVzaCgnbm8tYWN0aW9ucycpXG4gICAgcmV0dXJuIGNzc0NsYXNzZXMuam9pbignICcpXG4gIH1cblxuICBnZXQgc3BlZWRDaGVjayAoKSB7XG4gICAgY29uc3QgY2hlY2sgPSB7fVxuICAgIGlmICh0aGlzLmRhdGEuc3BlZWRDaGVjaz8ubmFtZSkgY2hlY2submFtZSA9IHRoaXMuZGF0YS5zcGVlZENoZWNrLm5hbWVcbiAgICBpZiAodGhpcy5kYXRhLnNwZWVkQ2hlY2s/LnNjb3JlKSBjaGVjay5zY29yZSA9IHRoaXMuZGF0YS5zcGVlZENoZWNrLnNjb3JlXG4gICAgY2hlY2suY3NzQ2xhc3NlcyA9ICcnXG4gICAgaWYgKHRoaXMuZGF0YS5zcGVlZENoZWNrPy5yb2xsRGF0YVN0cmluZykge1xuICAgICAgY2hlY2sucm9sbCA9IENvQzdDaGVjay5mcm9tUm9sbFN0cmluZyh0aGlzLmRhdGEuc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZylcbiAgICAgIGlmIChjaGVjay5yb2xsKSB7XG4gICAgICAgIGlmICghY2hlY2sucm9sbC5zdGFuZGJ5IHx8IGNoZWNrLnJvbGwuaGFzQ2FyZCkge1xuICAgICAgICAgIGNoZWNrLnJvbGxlZCA9IHRydWVcbiAgICAgICAgICBjaGVjay5pbmxpbmVSb2xsID0gY2hlY2sucm9sbC5pbmxpbmVDaGVjay5vdXRlckhUTUxcbiAgICAgICAgICBjaGVjay5jc3NDbGFzc2VzICs9ICdyb2xsZWQnXG4gICAgICAgICAgaWYgKCFjaGVjay5yb2xsLnN0YW5kYnkpIHtcbiAgICAgICAgICAgIGlmIChjaGVjay5yb2xsLnN1Y2Nlc3NMZXZlbCA+PSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWUpIHtcbiAgICAgICAgICAgICAgY2hlY2subW9kaWZpZXJDc3MgPSAndXBncmFkZSdcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hlY2sucm9sbC5mYWlsZWQpIGNoZWNrLm1vZGlmaWVyQ3NzID0gJ2Rvd25ncmFkZSdcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgY2hlY2sucm9sbC5zdWNjZXNzTGV2ZWwgPj0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lIHx8XG4gICAgICAgICAgICAgIGNoZWNrLnJvbGwuZmFpbGVkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY2hlY2suaGFzTW9kaWZpZXIgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLmhhc0FjdG9yKSB7XG4gICAgICBjaGVjay5vcHRpb25zID0gW11cbiAgICAgIGZvciAoY29uc3QgYyBvZiBbJ2NvbiddKSB7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcmlzdGljID0gdGhpcy5hY3Rvci5nZXRDaGFyYWN0ZXJpc3RpYyhjKVxuICAgICAgICBpZiAoY2hhcmFjdGVyaXN0aWM/LnZhbHVlKSBjaGVjay5vcHRpb25zLnB1c2goY2hhcmFjdGVyaXN0aWMubGFiZWwpXG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgcyBvZiB0aGlzLmFjdG9yLmRyaXZlU2tpbGxzKSB7XG4gICAgICAgIGNoZWNrLm9wdGlvbnMucHVzaChzLm5hbWUpXG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgcyBvZiB0aGlzLmFjdG9yLnBpbG90U2tpbGxzKSB7XG4gICAgICAgIGNoZWNrLm9wdGlvbnMucHVzaChzLm5hbWUpXG4gICAgICB9XG4gICAgICBjaGVjay5oYXNPcHRpb25zID0gISFjaGVjay5vcHRpb25zLmxlbmd0aFxuXG4gICAgICBpZiAodGhpcy5kYXRhLnNwZWVkQ2hlY2s/LmlkKSB7XG4gICAgICAgIGxldCBpdGVtID0gdGhpcy5hY3Rvci5maW5kKHRoaXMuZGF0YS5zcGVlZENoZWNrLmlkKVxuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICBjb25zdCBnYW1lSXRlbSA9IGdhbWUuaXRlbXMuZ2V0KHRoaXMuZGF0YS5zcGVlZENoZWNrLmlkKVxuICAgICAgICAgIGlmIChnYW1lSXRlbSkgaXRlbSA9IHRoaXMuYWN0b3IuZmluZChnYW1lSXRlbS5uYW1lKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnaXRlbScgJiYgaXRlbS52YWx1ZS5kYXRhPy50eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICAgICAgICBjaGVjay5yZWYgPSBpdGVtLnZhbHVlXG4gICAgICAgICAgICBjaGVjay5uYW1lID0gaXRlbS52YWx1ZS5uYW1lXG4gICAgICAgICAgICBjaGVjay50eXBlID0gJ3NraWxsJ1xuICAgICAgICAgICAgY2hlY2suaXNTa2lsbCA9IHRydWVcbiAgICAgICAgICAgIGNoZWNrLnJlZlNldCA9IHRydWVcbiAgICAgICAgICAgIGNoZWNrLnNjb3JlID0gaXRlbS52YWx1ZS52YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnY2hhcmFjdGVyaXN0aWMnKSB7XG4gICAgICAgICAgICBjaGVjay5yZWYgPSBpdGVtLnZhbHVlXG4gICAgICAgICAgICBjaGVjay5uYW1lID0gaXRlbS52YWx1ZS5sYWJlbFxuICAgICAgICAgICAgY2hlY2sudHlwZSA9ICdjaGFyYWN0ZXJpc3RpYydcbiAgICAgICAgICAgIGNoZWNrLmlzQ2hhcmFjdGVyaXN0aWMgPSB0cnVlXG4gICAgICAgICAgICBjaGVjay5yZWZTZXQgPSB0cnVlXG4gICAgICAgICAgICBjaGVjay5zY29yZSA9IGl0ZW0udmFsdWUudmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2F0dHJpYnV0ZScpIHtcbiAgICAgICAgICAgIGNoZWNrLnJlZiA9IGl0ZW0udmFsdWVcbiAgICAgICAgICAgIGNoZWNrLm5hbWUgPSBpdGVtLnZhbHVlLmxhYmVsXG4gICAgICAgICAgICBjaGVjay50eXBlID0gJ2F0dHJpYnV0ZSdcbiAgICAgICAgICAgIGNoZWNrLmlzQXR0cmlidXRlID0gdHJ1ZVxuICAgICAgICAgICAgY2hlY2sucmVmU2V0ID0gdHJ1ZVxuICAgICAgICAgICAgY2hlY2suc2NvcmUgPSBpdGVtLnZhbHVlLnZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5zcGVlZENoZWNrPy5uYW1lKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLmZpbmQodGhpcy5kYXRhLnNwZWVkQ2hlY2submFtZSlcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnaXRlbScgJiYgaXRlbS52YWx1ZS5kYXRhPy50eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICAgICAgICBjaGVjay5yZWYgPSBpdGVtLnZhbHVlXG4gICAgICAgICAgICBjaGVjay5uYW1lID0gaXRlbS52YWx1ZS5uYW1lXG4gICAgICAgICAgICBjaGVjay50eXBlID0gJ3NraWxsJ1xuICAgICAgICAgICAgY2hlY2suaXNTa2lsbCA9IHRydWVcbiAgICAgICAgICAgIGNoZWNrLnJlZlNldCA9IHRydWVcbiAgICAgICAgICAgIGNoZWNrLnNjb3JlID0gaXRlbS52YWx1ZS52YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnY2hhcmFjdGVyaXN0aWMnKSB7XG4gICAgICAgICAgICBjaGVjay5yZWYgPSBpdGVtLnZhbHVlXG4gICAgICAgICAgICBjaGVjay5uYW1lID0gaXRlbS52YWx1ZS5sYWJlbFxuICAgICAgICAgICAgY2hlY2sudHlwZSA9ICdjaGFyYWN0ZXJpc3RpYydcbiAgICAgICAgICAgIGNoZWNrLmlzQ2hhcmFjdGVyaXN0aWMgPSB0cnVlXG4gICAgICAgICAgICBjaGVjay5yZWZTZXQgPSB0cnVlXG4gICAgICAgICAgICBjaGVjay5zY29yZSA9IGl0ZW0udmFsdWUudmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2F0dHJpYnV0ZScpIHtcbiAgICAgICAgICAgIGNoZWNrLnJlZiA9IGl0ZW0udmFsdWVcbiAgICAgICAgICAgIGNoZWNrLm5hbWUgPSBpdGVtLnZhbHVlLmxhYmVsXG4gICAgICAgICAgICBjaGVjay50eXBlID0gJ2F0dHJpYnV0ZSdcbiAgICAgICAgICAgIGNoZWNrLmlzQXR0cmlidXRlID0gdHJ1ZVxuICAgICAgICAgICAgY2hlY2sucmVmU2V0ID0gdHJ1ZVxuICAgICAgICAgICAgY2hlY2suc2NvcmUgPSBpdGVtLnZhbHVlLnZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmRhdGEuc3BlZWRDaGVjaz8uaWQpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBnYW1lLml0ZW1zLmdldCh0aGlzLmRhdGEuc3BlZWRDaGVjay5pZClcbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLmRhdGE/LnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICBjaGVjay5yZWYgPSBpdGVtXG4gICAgICAgICAgY2hlY2submFtZSA9IGl0ZW0ubmFtZVxuICAgICAgICAgIGNoZWNrLnR5cGUgPSAnc2tpbGwnXG4gICAgICAgICAgY2hlY2suaXNTa2lsbCA9IHRydWVcbiAgICAgICAgICBjaGVjay5yZWZTZXQgPSBmYWxzZVxuICAgICAgICAgIGNoZWNrLnNjb3JlID0gaXRlbS5iYXNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5zcGVlZENoZWNrPy5uYW1lICYmIHRoaXMuZGF0YS5zcGVlZENoZWNrPy5zY29yZSkge1xuICAgICAgY2hlY2submFtZSA9IHRoaXMuZGF0YS5zcGVlZENoZWNrLm5hbWVcbiAgICAgIGNoZWNrLnNjb3JlID0gdGhpcy5kYXRhLnNwZWVkQ2hlY2suc2NvcmVcbiAgICAgIGNoZWNrLnJlZlNldCA9IGZhbHNlXG4gICAgfVxuXG4gICAgY2hlY2suY2FuQmVSb2xsZWQgPSB0cnVlXG5cbiAgICBpZiAoIWNoZWNrLnJvbGxlZCAmJiAhY2hlY2suc2NvcmUpIHtcbiAgICAgIGNoZWNrLmNzc0NsYXNzZXMgKz0gJyBpbnZhbGlkJ1xuICAgICAgY2hlY2suY2FuQmVSb2xsZWQgPSBmYWxzZVxuICAgIH1cbiAgICBjaGVjay5pc1ZhbGlkID0gY2hlY2sucm9sbGVkICYmICFpc05hTihjaGVjay5zY29yZSlcblxuICAgIHJldHVybiBjaGVja1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QnlSb2xlQW5kRGV4IChhLCBiKSB7XG4gIGlmICghYSAmJiBiKSByZXR1cm4gMVxuICBpZiAoIWIgJiYgYSkgcmV0dXJuIC0xXG4gIGlmICghYSAmJiAhYikgcmV0dXJuIDBcbiAgLy8gUHV0IGNoYXNlcnMgZmlyc3RcbiAgaWYgKGIuY2hhc2VyICYmICFhLmNoYXNlcikgcmV0dXJuIDFcbiAgaWYgKGEuY2hhc2VyICYmICFiLmNoYXNlcikgcmV0dXJuIC0xXG4gIC8vIElmIHNhbWV0eXBlIHNvcnQgYnkgZGV4XG4gIHJldHVybiBhLmRleCAtIGIuZGV4XG59XG4iLCIvKiBnbG9iYWwgZm91bmRyeSwgZ2FtZSwgUm9sbCwgdWkgKi9cbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgRW5oYW5jZWRDaGF0Q2FyZCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jaGF0Y2FyZGxpYi9zcmMvY2hhdGNhcmRsaWIuanMnXG5pbXBvcnQgeyBDb0M3RGljZSB9IGZyb20gJy4uLy4uL2RpY2UuanMnXG5pbXBvcnQgeyBfcGFydGljaXBhbnQgfSBmcm9tICcuLi8uLi9pdGVtcy9jaGFzZS9wYXJ0aWNpcGFudC5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBjcmVhdGVJbmxpbmVSb2xsIH0gZnJvbSAnLi4vaGVscGVyLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ2hhc2VPYnN0YWNsZUNhcmQgZXh0ZW5kcyBFbmhhbmNlZENoYXRDYXJkIHtcbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvY2FyZHMvY2hhc2Utb2JzdGFjbGUuaHRtbCcsXG4gICAgICBHTVVwZGF0ZTogdHJ1ZVxuICAgIH0pXG4gICAgb3B0aW9ucy5jbGFzc2VzLnB1c2goJ29ic3RhY2xlLWNhcmQnKVxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIGRhdGEuc3RhdHVzID0gW11cbiAgICBkYXRhLnN0cmluZ3MgPSB7fVxuICAgIGRhdGEuZGlzcGxheUFjdG9yT25DYXJkID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGlzcGxheUFjdG9yT25DYXJkJylcbiAgICAvLyBkYXRhLnBhcnRpY2lwYW50ID0gbmV3IF9wYXJ0aWNpcGFudCh0aGlzLnBhcnRpY2lwYW50RGF0YSlcblxuICAgIGRhdGEuc3RhdHVzLnB1c2goe1xuICAgICAgbmFtZTpcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFjdGlvbkNvc3QnKSArIGAgOiR7dGhpcy5kYXRhLnRvdGFsQWN0aW9uQ29zdH1gXG4gICAgfSlcblxuICAgIGRhdGEuY2FyZC5icmVha2FibGVPYnN0YWNsZSA9XG4gICAgICBkYXRhLmRhdGEub2JzdGFjbGU/LmJhcnJpZXIgJiYgZGF0YS5kYXRhLm9ic3RhY2xlLmhhc0hpdFBvaW50cyAvLyBUT0RPOiBDaGVjayBpZiB1c2VmdWxsXG4gICAgZGF0YS5jYXJkLnZhbGlkQ2hlY2sgPSBmYWxzZVxuXG4gICAgaWYgKFxuICAgICAgZGF0YS5kYXRhLnN0YXRlcz8ub2JzdGFjbGVEZWZpbmVkICYmXG4gICAgICAoZGF0YS5kYXRhLm9ic3RhY2xlLmhhemFyZCB8fFxuICAgICAgICAoZGF0YS5kYXRhLm9ic3RhY2xlLmJhcnJpZXIgJiYgIWRhdGEuZGF0YS5vYnN0YWNsZS5oYXNIaXRQb2ludHMpKVxuICAgICkge1xuICAgICAgZGF0YS5kYXRhLnN0YXRlcy50cnlUb05lZ290aWF0ZSA9IHRydWVcbiAgICAgIGRhdGEuZGF0YS5zdGF0ZXMudHJ5VG9CcmVhayA9IGZhbHNlXG4gICAgICBkYXRhLmRhdGEuc3RhdGVzLmJyZWFrT3JOZWdvdGlhdGVEZWZpbmVkID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcnRpY2lwYW50Py5hY3Rvcikge1xuICAgICAgZGF0YS5za2lsbCA9IHRoaXMucGFydGljaXBhbnQuYWN0b3IuZmluZChkYXRhLmRhdGEub2JzdGFjbGUuY2hlY2tOYW1lKVxuICAgICAgZGF0YS5jaGVja09wdGlvbnMgPSB0aGlzLmNoYXNlLmdldEFjdG9yU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzKFxuICAgICAgICB0aGlzLmRhdGEucGFydGljaXBhbnRVdWlkXG4gICAgICApXG4gICAgICBpZiAoZGF0YS5za2lsbCkge1xuICAgICAgICBkYXRhLnZhbGlkQ2hlY2sgPSB0cnVlXG4gICAgICAgIGRhdGEudmFsaWRTa2lsbCA9IHRydWVcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5kYXRhLm9ic3RhY2xlLmNoZWNrTmFtZSAmJiBkYXRhLmRhdGEuY2hlY2tUaHJlc2hvbGQpIHtcbiAgICAgICAgZGF0YS52YWxpZENoZWNrID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmNoZWNrT3B0aW9ucyA9IHRoaXMuY2hhc2UuYWxsU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzXG4gICAgICBkYXRhLmR1bW15QWN0b3IgPSB0cnVlXG4gICAgICBpZiAoZGF0YS5kYXRhLm9ic3RhY2xlLmNoZWNrTmFtZSAmJiBkYXRhLmRhdGEuY2hlY2tUaHJlc2hvbGQpIHtcbiAgICAgICAgZGF0YS52YWxpZENoZWNrID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZGF0YS5kYXRhLmJvbnVzRGljZSkgZGF0YS5kYXRhLmJvbnVzRGljZSA9IDBcblxuICAgIGlmIChcbiAgICAgIGRhdGEuZGF0YS5ib251c0RpY2UgPCAyICYmXG4gICAgICBkYXRhLmRhdGEudG90YWxBY3Rpb25Db3N0IDwgZGF0YS5kYXRhLm1vdmVtZW50QWN0aW9uXG4gICAgKSB7XG4gICAgICBkYXRhLmNhblRha2VDYXV0aW91c0FwcHJvYWNoID0gdHJ1ZVxuICAgIH1cblxuICAgIGRhdGEuY3VzdG9tV2VhcG9uID0gZmFsc2VcbiAgICBpZiAodGhpcy5kYXRhLndlYXBvbkNob2ljZSA9PT0gJzAnKSB7XG4gICAgICBkYXRhLmN1c3RvbVdlYXBvbiA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoZGF0YS52YWxpZENoZWNrKSB7XG4gICAgICBsZXQgY2hlY2tOYW1lLCB2YWx1ZVxuICAgICAgaWYgKGRhdGEuc2tpbGwpIHtcbiAgICAgICAgY2hlY2tOYW1lID0gZGF0YS5za2lsbC52YWx1ZS5uYW1lXG4gICAgICAgIHZhbHVlID0gZGF0YS5za2lsbC52YWx1ZS52YWx1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hlY2tOYW1lID0gZGF0YS5kYXRhLm9ic3RhY2xlLmNoZWNrTmFtZVxuICAgICAgICB2YWx1ZSA9IGRhdGEuZGF0YS5jaGVja1RocmVzaG9sZFxuICAgICAgfVxuICAgICAgZGF0YS5zdHJpbmdzLmNoZWNrUm9sbFJlcXVlc3QgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkFza1JvbGwnLCB7XG4gICAgICAgIG5hbWU6IGNoZWNrTmFtZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pXG4gICAgICBpZiAoZGF0YS5kYXRhLmJvbnVzRGljZSAhPT0gMCkge1xuICAgICAgICBpZiAoZGF0YS5kYXRhLmJvbnVzRGljZSA+IDApIHtcbiAgICAgICAgICBkYXRhLnN0cmluZ3MuY2hlY2tSb2xsUmVxdWVzdCArPSBgICgrJHtkYXRhLmRhdGEuYm9udXNEaWNlfSlgXG4gICAgICAgIH0gZWxzZSBkYXRhLnN0cmluZ3MuY2hlY2tSb2xsUmVxdWVzdCArPSBgICgke2RhdGEuZGF0YS5ib251c0RpY2V9KWBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS5kYXRhLnN0YXRlcz8ub2JzdGFjbGVEZWZpbmVkKSB7XG4gICAgICBkYXRhLnN0cmluZ3Mub2JzdGFjbGVEZWZpbmVkID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5GYWNpbmdPYnN0YWNsZScsIHtcbiAgICAgICAgdHlwZTogZGF0YS5kYXRhLm9ic3RhY2xlLmJhcnJpZXJcbiAgICAgICAgICA/IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BQmFycmllcicpXG4gICAgICAgICAgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQUhhemFyZCcpXG4gICAgICB9KVxuICAgICAgaWYgKGRhdGEuZGF0YS5vYnN0YWNsZS5uYW1lKSB7XG4gICAgICAgIGRhdGEuc3RyaW5ncy5vYnN0YWNsZURlZmluZWQgKz0gYCAoJHtkYXRhLmRhdGEub2JzdGFjbGUubmFtZX0pYFxuICAgICAgfVxuXG4gICAgICBkYXRhLmRhdGEuc3RhdGVzLmNhbkFza1JvbGwgPSB0cnVlXG4gICAgICAvLyBkYXRhLmRhdGEuc3RhdGVzLm9ic3RhY2xlQ2FuQmVCcm9rZW4gPSBmYWxzZVxuICAgICAgaWYgKGRhdGEuZGF0YS5vYnN0YWNsZS5iYXJyaWVyKSB7XG4gICAgICAgIGRhdGEuc3RhdHVzLnB1c2goeyBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQmFycmllcicpIH0pXG4gICAgICAgIGlmIChkYXRhLmRhdGEub2JzdGFjbGUuaGFzSGl0UG9pbnRzKSB7XG4gICAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7IG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5CcmVha2FibGUnKSB9KVxuICAgICAgICAgIC8vIGRhdGEuZGF0YS5zdGF0ZXMub2JzdGFjbGVDYW5CZUJyb2tlbiA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRhdGEuZGF0YS5vYnN0YWNsZS5oYXphcmQpIHtcbiAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7IG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXphcmQnKSB9KVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLnN0YXRlcy50cnlUb05lZ290aWF0ZSkge1xuICAgICAgICBpZiAoIWRhdGEudmFsaWRDaGVjaykge1xuICAgICAgICAgIGRhdGEuc3RhdHVzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vVmFsaWRDaGVjaycpLFxuICAgICAgICAgICAgY3NzOiAnZXJyb3InXG4gICAgICAgICAgfSlcbiAgICAgICAgICBkYXRhLnN0cmluZ3MuRW50ZXJWYWx1ZVRpdGxlID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICdDb0M3LlNraWxsU2VsZWN0QmFzZScsXG4gICAgICAgICAgICB7IG5hbWU6IGRhdGEuZGF0YS5vYnN0YWNsZS5jaGVja05hbWUgfVxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoIWRhdGEuZGF0YS5jaGVja1RocmVzaG9sZCkgZGF0YS5kYXRhLnN0YXRlcy5jYW5Bc2tSb2xsID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIGlmICghZGF0YS52YWxpZFNraWxsKSB7XG4gICAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm9WYWxpZFNraWxsJyksXG4gICAgICAgICAgICBjc3M6ICd3YXJuaW5nJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9CcmVhaykge1xuICAgICAgICBsZXQgZGFtYWdlU3RhdHVzID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkJyZWFrRG93bicpXG4gICAgICAgIGlmICh0aGlzLmRhdGEub2JqZWN0cz8ub2JzdGFjbGVEYW1hZ2VSb2xsPy50b3RhbCkge1xuICAgICAgICAgIGRhbWFnZVN0YXR1cyArPSBgIDogJHt0aGlzLmRhdGEub2JqZWN0cy5vYnN0YWNsZURhbWFnZVJvbGwudG90YWx9YFxuICAgICAgICB9XG4gICAgICAgIGRhdGEuc3RhdHVzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IGRhbWFnZVN0YXR1c1xuICAgICAgICB9KVxuXG4gICAgICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLm9ic3RhY2xlRGFtYWdlUm9sbGVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZGF0YS5vYmplY3RzPy5vYnN0YWNsZURhbWFnZVJvbGw/LnRvdGFsIDw9IDApIHtcbiAgICAgICAgICAgIGRhdGEuc3RyaW5ncy5vYnN0YWNsZURhbWFnZSA9XG4gICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob0RhbWFnZURlYWx0JylcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YS5pbmxpbmVEYW1hZ2VSb2xsID0gY3JlYXRlSW5saW5lUm9sbChcbiAgICAgICAgICAgICAgdGhpcy5kYXRhLm9iamVjdHMub2JzdGFjbGVEYW1hZ2VSb2xsXG4gICAgICAgICAgICApPy5vdXRlckhUTUxcbiAgICAgICAgICAgIGRhdGEuc3RyaW5ncy5vYnN0YWNsZURhbWFnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRGFtYWdlRGVhbHQnLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBkYXRhLmlubGluZURhbWFnZVJvbGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlKSB7XG4gICAgICAgIGRhdGEuc3RhdHVzLnB1c2goeyBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTmVnb3RpYXRlJykgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS50b3RhbENhdXRpb3VzQXBwcm9hY2gpIHtcbiAgICAgICAgY29uc3QgY2F1dGlvdXNTdGF0dXMgPSB7XG4gICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNhdXRpb3VzJyksXG4gICAgICAgICAgY3NzOiAnJ1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRhdGEudG90YWxDYXV0aW91c0FwcHJvYWNoID4gMSkge1xuICAgICAgICAgIGNhdXRpb3VzU3RhdHVzLmNzcyA9ICdzdHJvbmcnXG4gICAgICAgICAgZGF0YS5zdHJpbmdzLmNhdXRpb3VzQXBwcm9hY2hUeXBlID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgJ0NvQzcuQmVpbmdWZXJ5Q2F1dGlvdXMnXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEuc3RyaW5ncy5jYXV0aW91c0FwcHJvYWNoVHlwZSA9XG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQmVpbmdDYXV0aW91cycpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kYXRhLmZsYWdzLmNvbnN1bWVCb251c0RpY2UpIGNhdXRpb3VzU3RhdHVzLmNzcyArPSAnIGNvbnN1bWUnXG4gICAgICAgIGRhdGEuc3RhdHVzLnB1c2goY2F1dGlvdXNTdGF0dXMpXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEub2JqZWN0cz8uY2hlY2spIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5oYXphcmQpIHRoaXMuZGF0YS5tb3ZlUGxheWVyID0gdHJ1ZSAvLyBPbiBoYXphcmQsIHlvdSBwYXNzIGV2ZW4gaWYgeW91IGZhaWwgeW91ciByb2xsXG4gICAgICAgIGlmICh0aGlzLmRhdGEub2JqZWN0cy5jaGVjay5wYXNzZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZGF0YS5tb3ZlUGxheWVyID09PSAndW5kZWZpbmVkJykgdGhpcy5kYXRhLm1vdmVQbGF5ZXIgPSB0cnVlXG4gICAgICAgICAgZGF0YS5zdHJpbmdzLm9ic3RhY2xlUGFzc2VkID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgJ0NvQzcuT2JzdGFjbGVQYXNzZWQnXG4gICAgICAgICAgKVxuICAgICAgICAgIGlmICh0aGlzLmRhdGEub2JqZWN0cy5jaGVjay5sdWNrU3BlbnQpIHtcbiAgICAgICAgICAgIGRhdGEuc3RyaW5ncy5vYnN0YWNsZVBhc3NlZCArPSBgICgke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgJ0NvQzcuR290THVja3knXG4gICAgICAgICAgICApfSlgXG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGEuc3RhdHVzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlN1Y2Nlc3MnKSxcbiAgICAgICAgICAgIGNzczogJ3N1Y2Nlc3MnXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEub2JqZWN0cy5jaGVjay5pc0Z1bWJsZSkge1xuICAgICAgICAgIGRhdGEuc3RyaW5ncy5jaGVja0ZhaWxlZCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5PYnN0YWNsZUZ1bWJsZScpXG4gICAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRnVtYmxlJyksXG4gICAgICAgICAgICBjc3M6ICdmdW1ibGUnXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhLnN0cmluZ3MuY2hlY2tGYWlsZWQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuT2JzdGFjbGVGYWlsJylcbiAgICAgICAgICBkYXRhLnN0YXR1cy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GYWlsdXJlJyksXG4gICAgICAgICAgICBjc3M6ICdmYWlsdXJlJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5kYXRhLnN0YXRlcy5wbGF5ZXJBY3Rpb25EZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLm9ic3RhY2xlLmhhemFyZCkge1xuICAgICAgICBkYXRhLnN0cmluZ3MucGxheWVySW50ZW50aW9ucyA9IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAnQ29DNy5UcnlUb05lZ290aWF0ZUhhemFyZCdcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEub2JzdGFjbGUuYmFycmllcikge1xuICAgICAgICBpZiAodGhpcy5kYXRhLnN0YXRlcy50cnlUb05lZ290aWF0ZSkge1xuICAgICAgICAgIGRhdGEuc3RyaW5ncy5wbGF5ZXJJbnRlbnRpb25zID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgJ0NvQzcuVHJ5VG9HZXRQYXN0QmFycmllcnMnXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9CcmVhaykge1xuICAgICAgICAgIGRhdGEuc3RyaW5ncy5wbGF5ZXJJbnRlbnRpb25zID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRyeVRvQnJlYWsnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS5zdGF0ZXMuY2hlY2tSb2xsZWQpIHtcbiAgICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLmNhcmRSZXNvbHZlZCkge1xuICAgICAgICAvLyBJZiB0aGUgY2FyZCBpcyByZXNvbHZlZCB0aGUgY2hlY2sgaXMgZnJvemVuXG4gICAgICAgIGRhdGEuaHRtbENoZWNrID0gYXdhaXQgdGhpcy5kYXRhLm9iamVjdHMuY2hlY2suaW5saW5lQ2hlY2s/Lm91dGVySFRNTFxuICAgICAgfSBlbHNlIGRhdGEuaHRtbENoZWNrID0gYXdhaXQgdGhpcy5kYXRhLm9iamVjdHMuY2hlY2suZ2V0SHRtbFJvbGwoKVxuICAgIH1cblxuICAgIC8vIGlmICh0aGlzLmRhdGEub2JqZWN0cz8uZmFpbGVkRGFtYWdlUm9sbCkge1xuICAgIC8vICAgaWYgKCFkYXRhLmRhdGEuYXJtb3IpIHtcbiAgICAvLyAgICAgaWYgKHRoaXMucGFydGljaXBhbnQuYWN0b3IpXG4gICAgLy8gICAgICAgZGF0YS5kYXRhLmFybW9yID1cbiAgICAvLyAgICAgICAgIHRoaXMucGFydGljaXBhbnQuYWN0b3IuZGF0YS5kYXRhLmF0dHJpYnMuYXJtb3IudmFsdWUgfHwgMFxuICAgIC8vICAgfVxuICAgIC8vICAgaWYgKGRhdGEuZGF0YS5hcm1vcikge1xuICAgIC8vICAgICBpZiAoaXNOYU4oTnVtYmVyKGRhdGEuZGF0YS5hcm1vcikpKSBkYXRhLmRhdGEuYXJtb3IgPSBudWxsXG4gICAgLy8gICB9XG4gICAgLy8gfVxuXG4gICAgaWYgKHRoaXMuZGF0YS5zdGF0ZXMuY2FyZFJlc29sdmVkKSB7XG4gICAgICBkYXRhLnBsYXllckRhbWFnZVRha2VuID0gZmFsc2VcbiAgICAgIGRhdGEub2JzdGFsY2VEZWZpbml0aW9uQ2hhbmdlZCA9IGZhbHNlXG5cbiAgICAgIC8vIEhhcyB0aGUgb2JzdGFjbGUgY2hhbmdlZCA/XG4gICAgICBjb25zdCBkaWZmID0gdGhpcy5saXN0Q2hhbmdlcygpXG4gICAgICBpZiAoZGlmZi5jaGFuZ2VzKSB7XG4gICAgICAgIGRhdGEub2JzdGFsY2VEZWZpbml0aW9uQ2hhbmdlZCA9IHRydWVcbiAgICAgIH1cblxuICAgICAgLy8gSXMgcGxheWVyIHRha2luZyBkYW1hZ2VcbiAgICAgIGlmICh0aGlzLmRhdGEub2JzdGFjbGUuaGFzRGFtYWdlICYmIHRoaXMuZGF0YS5vYmplY3RzPy5jaGVjaz8uaXNGYWlsdXJlKSB7XG4gICAgICAgIGRhdGEucGxheWVyRGFtYWdlVGFrZW4gPSB0cnVlXG4gICAgICAgIGRhdGEuaW5saW5lRGFtYWdlVGFrZW5Sb2xsID0gY3JlYXRlSW5saW5lUm9sbChcbiAgICAgICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWREYW1hZ2VSb2xsXG4gICAgICAgICk/Lm91dGVySFRNTFxuICAgICAgICAvLyBpZiAoZGF0YS5kYXRhLnRvdGFsUGxheWVyRGFtYWdlVGFrZW4gPCAwKVxuICAgICAgICAvLyAgIGRhdGEuZGF0YS50b3RhbFBsYXllckRhbWFnZVRha2VuID0gMFxuXG4gICAgICAgIGlmIChkYXRhLmRhdGEudG90YWxQbGF5ZXJEYW1hZ2VUYWtlbiA9PT0gMCkge1xuICAgICAgICAgIGRhdGEuc3RyaW5ncy5kYW1hZ2VUYWtlbiA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Zb3VUYWtlTm9EYW1hZ2UnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEuc3RyaW5ncy5kYW1hZ2VUYWtlbiA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAnQ29DNy5Zb3VUYWtlU29tZURhbWFnZScsXG4gICAgICAgICAgICB7IGFtb3VudDogZGF0YS5kYXRhLnRvdGFsUGxheWVyRGFtYWdlVGFrZW4gfVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBkYXRhLnN0YXR1cy5wdXNoKHtcbiAgICAgICAgICBuYW1lOlxuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRvdGFsRGFtYWdlJykgK1xuICAgICAgICAgICAgYCA6JHtkYXRhLmRhdGEudG90YWxQbGF5ZXJEYW1hZ2VUYWtlbn1gXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLmhhc0FjdGlvbkNvc3QgJiZcbiAgICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLmhhemFyZCAmJlxuICAgICAgICB0aGlzLmRhdGEub2JqZWN0cz8uY2hlY2s/LmlzRmFpbHVyZVxuICAgICAgKSB7XG4gICAgICAgIGRhdGEuYWN0aW9uTG9zdCA9IHRydWVcbiAgICAgICAgZGF0YS5zdHJpbmdzLmFjdGlvbkxvc3QgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuWW91TG9zdFRpbWUnKVxuICAgICAgICBkYXRhLmlubGluZUFjdGlvbkxvc3RSb2xsID0gY3JlYXRlSW5saW5lUm9sbChcbiAgICAgICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWRBY3Rpb25Sb2xsXG4gICAgICAgICk/Lm91dGVySFRNTFxuICAgICAgfVxuXG4gICAgICBkYXRhLnN0YXR1cy5wdXNoKHtcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNhcmRSZXNvbHZlZCcpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLmNsb3NlZCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5tb3ZlUGxheWVyKSB7XG4gICAgICAgIGRhdGEuc3RyaW5ncy5maW5hbE91dGNvbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTW92ZVRvTG9jYXRpb24nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YS5zdHJpbmdzLmZpbmFsT3V0Y29tZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAnQ29DNy5Eb250TW92ZVRvTG9jYXRpb24nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXN5bmMgR01VcGRhdGUgKCkge1xuICAgIGlmICghZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvQzc6IEdNVXBkYXRlIGNhbGxlZCBmcm9tIG5vbiBHTSB1c2VyJylcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhLnN0YXRlcy5jYXJkUmVzb2x2ZWQpIHtcbiAgICAgIC8vIENhcmQgaXMgcmVzb2x2ZWQsIGNvbXB1dGUgYWxsIGZvcm11bGFzIGFuZCBkYW1hZ2UuXG4gICAgICBpZiAodGhpcy5kYXRhLm9iamVjdHM/LmZhaWxlZERhbWFnZVJvbGw/LnRvdGFsKSB7XG4gICAgICAgIGNvbnN0IHRvdGFsRGFtYWdlID0gdGhpcy5kYXRhLm9iamVjdHMuZmFpbGVkRGFtYWdlUm9sbC50b3RhbFxuICAgICAgICBjb25zdCBhcm1vclZhbHVlID0gdGhpcy5kYXRhLmZsYWdzLmlnbm9yZUFybW9yID8gMCA6IHRoaXMuZGF0YS5hcm1vclxuICAgICAgICBpZiAoQ29DN1V0aWxpdGllcy5pc0Zvcm11bGEoYXJtb3JWYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLmRhdGEuYXJtb3IgPSAoXG4gICAgICAgICAgICBhd2FpdCBuZXcgUm9sbChhcm1vclZhbHVlKS5yb2xsKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICApLnRvdGFsXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKE51bWJlcihhcm1vclZhbHVlKSkpIHtcbiAgICAgICAgICB0aGlzLmRhdGEuYXJtb3IgPSBOdW1iZXIoYXJtb3JWYWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhLnRvdGFsUGxheWVyRGFtYWdlVGFrZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhpcy5kYXRhLnRvdGFsUGxheWVyRGFtYWdlVGFrZW4gPSB0b3RhbERhbWFnZSAtIHRoaXMuZGF0YS5hcm1vclxuICAgICAgICAgIGlmICh0aGlzLmRhdGEudG90YWxQbGF5ZXJEYW1hZ2VUYWtlbiA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS50b3RhbFBsYXllckRhbWFnZVRha2VuID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLmRhdGEucmVmbGVjdE9ic3RhbGVDaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMuZGF0YS5yZWZsZWN0T2JzdGFsZUNoYW5nZXMgPSB0cnVlIC8vIEJ5IGRlZmF1bHQgcmVmbGVjdCBjaGFuZ2VzXG4gICAgICB9XG5cbiAgICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuZGF0YS5tb3ZlUGxheWVyKSB7XG4gICAgICAgIHRoaXMuZGF0YS5tb3ZlUGxheWVyID1cbiAgICAgICAgICAodGhpcy5kYXRhLnN0YXRlcy50cnlUb05lZ290aWF0ZSB8fCB0aGlzLmRhdGEub2JzdGFjbGUuaGF6YXJkKSAmJlxuICAgICAgICAgICF0aGlzLmRhdGEuc3RhdGVzLmZhaWxlZENvbnNlcXVlbmNlc1JvbGxlZFxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuZGF0YS5vYnN0YWNsZS5iYXJyaWVyICYmXG4gICAgICAgIHRoaXMuZGF0YS5vYnN0YWNsZS5oYXNIaXRQb2ludHMgJiZcbiAgICAgICAgdGhpcy5kYXRhLm9iamVjdHM/Lm9ic3RhY2xlRGFtYWdlUm9sbD8udG90YWxcbiAgICAgICkge1xuICAgICAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLmRhdGEudG90YWxPYnN0YWNsZURhbWFnZSkge1xuICAgICAgICAgIHRoaXMuZGF0YS50b3RhbE9ic3RhY2xlRGFtYWdlID1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5vYmplY3RzLm9ic3RhY2xlRGFtYWdlUm9sbC50b3RhbFxuICAgICAgICB9XG4gICAgICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuZGF0YS5mbGFncy5vYnN0YWNsZURlc3RveWVkKSB7XG4gICAgICAgICAgdGhpcy5kYXRhLmZsYWdzLm9ic3RhY2xlRGVzdG95ZWQgPVxuICAgICAgICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLkhpdFBvaW50cyAtIHRoaXMuZGF0YS50b3RhbE9ic3RhY2xlRGFtYWdlIDw9IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLmNsb3NlZCkge1xuICAgICAgdGhpcy5kYXRhLm1vdmVtZW50QWN0aW9uQXJyYXkgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudC5tb3ZlbWVudEFjdGlvbkFycmF5XG4gICAgICApXG4gICAgICB0aGlzLmRhdGEuRUVDX0FDVElPTiA9IHsgZGV0YWNoRGF0YTogdHJ1ZSB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhc3luYyBsb2NhbENvbXB1dGUgKCkge31cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGFzeW5jIGFzc2lnbk9iamVjdHMgKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuZGF0YS5vYmplY3RzPy5jaGVjayAmJlxuICAgICAgdGhpcy5kYXRhLm9iamVjdHMuY2hlY2s/LmNvbnN0cnVjdG9yPy5uYW1lID09PSAnT2JqZWN0J1xuICAgICkge1xuICAgICAgdGhpcy5kYXRhLm9iamVjdHMuY2hlY2sgPSBDb0M3Q2hlY2suZnJvbURhdGEodGhpcy5kYXRhLm9iamVjdHMuY2hlY2spXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5kYXRhLm9iamVjdHM/Lm9ic3RhY2xlRGFtYWdlUm9sbCAmJlxuICAgICAgdGhpcy5kYXRhLm9iamVjdHMub2JzdGFjbGVEYW1hZ2VSb2xsPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gJ09iamVjdCdcbiAgICApIHtcbiAgICAgIHRoaXMuZGF0YS5vYmplY3RzLm9ic3RhY2xlRGFtYWdlUm9sbCA9IFJvbGwuZnJvbURhdGEoXG4gICAgICAgIHRoaXMuZGF0YS5vYmplY3RzLm9ic3RhY2xlRGFtYWdlUm9sbFxuICAgICAgKVxuICAgIH1cbiAgICBpZiAoXG4gICAgICB0aGlzLmRhdGEub2JqZWN0cz8uZmFpbGVkRGFtYWdlUm9sbCAmJlxuICAgICAgdGhpcy5kYXRhLm9iamVjdHMuZmFpbGVkRGFtYWdlUm9sbD8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdPYmplY3QnXG4gICAgKSB7XG4gICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWREYW1hZ2VSb2xsID0gUm9sbC5mcm9tRGF0YShcbiAgICAgICAgdGhpcy5kYXRhLm9iamVjdHMuZmFpbGVkRGFtYWdlUm9sbFxuICAgICAgKVxuICAgIH1cbiAgICBpZiAoXG4gICAgICB0aGlzLmRhdGEub2JqZWN0cz8uZmFpbGVkQWN0aW9uUm9sbCAmJlxuICAgICAgdGhpcy5kYXRhLm9iamVjdHMuZmFpbGVkQWN0aW9uUm9sbD8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdPYmplY3QnXG4gICAgKSB7XG4gICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWRBY3Rpb25Sb2xsID0gUm9sbC5mcm9tRGF0YShcbiAgICAgICAgdGhpcy5kYXRhLm9iamVjdHMuZmFpbGVkQWN0aW9uUm9sbFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXN5bmMgaW5pdGlhbGl6ZSAoKSB7XG4gICAgLy8gY29uc3QgY2hhc2UgPSBhd2FpdCBmcm9tVXVpZCh0aGlzLmRhdGEuY2hhc2VVdWlkKVxuICAgIGlmICghdGhpcy5jaGFzZSkgcmV0dXJuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmNoYXNlLmFjdGl2ZVBhcnRpY2lwYW50RGF0YT8udXVpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhID09PSAndW5kZWZpbmVkJykgdGhpcy5kYXRhID0ge31cbiAgICBpZiAodHlwZW9mIHRoaXMuZGF0YS5zdGF0ZXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLmRhdGEuc3RhdGVzID0ge31cblxuICAgIC8vIGNvbnN0IGxvY2F0aW9uID0gY2hhc2UuZ2V0TG9jYXRpb25EYXRhKHRoaXMuZGF0YS5sb2NhdGlvblV1aWQpXG4gICAgdGhpcy5kYXRhLm9ic3RhY2xlID0gdGhpcy5sb2NhdGlvbj8ub2JzdGFjbGVEZXRhaWxzIC8vIEZlZWQgdGhlIG9ic3RhY2xlIGRlZmluaXRpb25cbiAgICAvLyB0aGlzLmRhdGEucGFydGljaXBhbnREYXRhID0gY2hhc2UuYWN0aXZlUGFydGljaXBhbnREYXRhXG4gICAgdGhpcy5kYXRhLnBhcnRpY2lwYW50VXVpZCA9IHRoaXMuY2hhc2UuYWN0aXZlUGFydGljaXBhbnREYXRhLnV1aWRcblxuICAgIGlmICh0aGlzLnBhcnRpY2lwYW50RGF0YT8uYm9udXNEaWNlID4gMCkge1xuICAgICAgdGhpcy5kYXRhLmJvbnVzRGljZSA9IHRoaXMucGFydGljaXBhbnREYXRhLmJvbnVzRGljZVxuICAgICAgdGhpcy5kYXRhLmZsYWdzLmNvbnN1bWVCb251c0RpY2UgPSB0cnVlXG4gICAgICB0aGlzLmRhdGEuZmxhZ3MuaGFzQm9udXNEaWNlID0gdGhpcy5wYXJ0aWNpcGFudC5oYXNCb251c0RpY2VcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEubW92ZW1lbnRBY3Rpb25BcnJheSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgdGhpcy5wYXJ0aWNpcGFudC5tb3ZlbWVudEFjdGlvbkFycmF5XG4gICAgKVxuICAgIHRoaXMuZGF0YS5tb3ZlbWVudEFjdGlvbiA9IHRoaXMucGFydGljaXBhbnQuY3VycmVudE1vdmVtZW50QWN0aW9uc1xuICAgIHRoaXMuZGF0YS50b3RhbEFjdGlvbkNvc3QgPSAwXG4gIH1cblxuICBnZXQgcGFydGljaXBhbnQgKCkge1xuICAgIGlmICghdGhpcy5wYXJ0aWNpcGFudERhdGEpIHJldHVybiB1bmRlZmluZWRcbiAgICAvLyBpZiAoIXRoaXMuX3BhcnRpY2lwYW50KVxuICAgIC8vICAgdGhpcy5fcGFydGljaXBhbnQgPSBuZXcgX3BhcnRpY2lwYW50KHRoaXMucGFydGljaXBhbnREYXRhKVxuICAgIC8vIHJldHVybiB0aGlzLl9wYXJ0aWNpcGFudFxuICAgIHJldHVybiBuZXcgX3BhcnRpY2lwYW50KHRoaXMucGFydGljaXBhbnREYXRhKSAvLyBUTyBSRVNFVFxuICB9XG5cbiAgZ2V0IHBhcnRpY2lwYW50RGF0YSAoKSB7XG4gICAgaWYgKCF0aGlzLmNoYXNlKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKCF0aGlzLmRhdGEucGFydGljaXBhbnRVdWlkKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuY2hhc2UuZ2V0UGFydGljaXBhbnREYXRhKHRoaXMuZGF0YS5wYXJ0aWNpcGFudFV1aWQpXG4gIH1cblxuICBnZXQgbG9jYXRpb24gKCkge1xuICAgIGlmICghdGhpcy5jaGFzZSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmNoYXNlLmdldExvY2F0aW9uRGF0YSh0aGlzLmRhdGEubG9jYXRpb25VdWlkKVxuICB9XG5cbiAgZ2V0IG9ic3RhY2xlICgpIHtcbiAgICBpZiAoIXRoaXMubG9jYXRpb24pIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi5vYnN0YWNsZURldGFpbHNcbiAgfVxuXG4gIGdldCBjaGFzZSAoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEuY2hhc2VVdWlkKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKCF0aGlzLl9jaGFzZSkgdGhpcy5fY2hhc2UgPSBDb0M3VXRpbGl0aWVzLlNmcm9tVXVpZCh0aGlzLmRhdGEuY2hhc2VVdWlkKVxuICAgIHJldHVybiB0aGlzLl9jaGFzZVxuICB9XG5cbiAgZ2V0IHJvbGwgKCkge1xuICAgIGxldCByb2xsRGF0YVxuICAgIGlmICh0aGlzLnBhcnRpY2lwYW50LmFjdG9yICYmIHRoaXMuZGF0YS5vYnN0YWNsZS5jaGVja05hbWUpIHtcbiAgICAgIGNvbnN0IGFjdG9yU2tpbGwgPSB0aGlzLnBhcnRpY2lwYW50LmFjdG9yLmZpbmQoXG4gICAgICAgIHRoaXMuZGF0YS5vYnN0YWNsZS5jaGVja05hbWVcbiAgICAgIClcbiAgICAgIGlmICh0eXBlb2YgYWN0b3JTa2lsbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcm9sbERhdGEgPSBhY3RvclNraWxsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb2xsRGF0YSA9IHtcbiAgICAgICAgICB0eXBlOiAndmFsdWUnLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmRhdGEub2JzdGFjbGUuY2hlY2tOYW1lLFxuICAgICAgICAgICAgdGhyZXNob2xkOiB0aGlzLmRhdGEuY2hlY2tUaHJlc2hvbGRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJvbGxEYXRhLmFjdG9yID0geyBhY3RvcktleTogdGhpcy5wYXJ0aWNpcGFudC5hY3Rvci5pZCB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmRhdGEub2JzdGFjbGUuY2hlY2tOYW1lICYmIHRoaXMuZGF0YS5jaGVja1RocmVzaG9sZCkge1xuICAgICAgICByb2xsRGF0YSA9IHtcbiAgICAgICAgICB0eXBlOiAndmFsdWUnLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmRhdGEub2JzdGFjbGUuY2hlY2tOYW1lLFxuICAgICAgICAgICAgdGhyZXNob2xkOiB0aGlzLmRhdGEuY2hlY2tUaHJlc2hvbGRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFjdG9yOiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLnBhcnRpY2lwYW50Lm5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJvbGxEYXRhKSB7XG4gICAgICByb2xsRGF0YS5kaWNlTW9kaWZpZXIgPSB0aGlzLmRhdGE/LmJvbnVzRGljZSB8fCAwXG4gICAgICByb2xsRGF0YS5kaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgICByb2xsRGF0YS5kZW55UHVzaCA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuIHJvbGxEYXRhIHx8IHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IHZhbGlkRmFpbGVkUm9sbHMgKCkge1xuICAgIGlmICghdGhpcy5kYXRhLm9iamVjdHM/LmNoZWNrPy5pc0ZhaWx1cmUpIHJldHVybiBmYWxzZVxuICAgIGlmICh0aGlzLmRhdGEub2JzdGFjbGUuaGFzRGFtYWdlKSB7XG4gICAgICBjb25zdCBkYW1hZ2UgPVxuICAgICAgICB0eXBlb2YgdGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZENoZWNrRGFtYWdlID09PSAnbnVtYmVyJ1xuICAgICAgICAgID8gYCR7dGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZENoZWNrRGFtYWdlfWBcbiAgICAgICAgICA6IHRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRDaGVja0RhbWFnZVxuICAgICAgaWYgKCF0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQ2hlY2tEYW1hZ2UpIHJldHVybiBmYWxzZVxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQ2hlY2tEYW1hZ2UgJiZcbiAgICAgICAgIVJvbGwudmFsaWRhdGUoZGFtYWdlKSAvLyBWYWxpZGF0ZSBvbmx5IHRha2UgYSBzdHJpbmcsIGlmIGRhbWFnZSBpcyBhIG51bWJlciBjb252ZXJ0IHRvIGEgc3RyaW5nXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLmRhdGEub2JzdGFjbGUuaGF6YXJkICYmIHRoaXMuZGF0YS5vYnN0YWNsZS5oYXNBY3Rpb25Db3N0KSB7XG4gICAgICBjb25zdCBhY3Rpb25Db3N0ID1cbiAgICAgICAgdHlwZW9mIHRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRBY3Rpb25Db3N0ID09PSAnbnVtYmVyJ1xuICAgICAgICAgID8gYCR7dGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZEFjdGlvbkNvc3R9YFxuICAgICAgICAgIDogdGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZEFjdGlvbkNvc3RcbiAgICAgIGlmICghdGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZEFjdGlvbkNvc3QpIHJldHVybiBmYWxzZVxuICAgICAgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRBY3Rpb25Db3N0ICYmICFSb2xsLnZhbGlkYXRlKGFjdGlvbkNvc3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZ2V0IHdlYXBvbnNPcHRpb25zICgpIHtcbiAgICBjb25zdCB3ZWFwb25zID0gW11cbiAgICB0aGlzLnBhcnRpY2lwYW50LmFjdG9yPy5pdGVtVHlwZXM/LndlYXBvbj8uZm9yRWFjaCh3ID0+IHtcbiAgICAgIGxldCBmb3JtdWxhID0gdy5kYXRhLmRhdGEucmFuZ2Uubm9ybWFsLmRhbWFnZVxuICAgICAgbGV0IGRiID0gdGhpcy5wYXJ0aWNpcGFudC5hY3Rvci5kYlxuICAgICAgaWYgKGRiID09PSBudWxsIHx8IE51bWJlcihkYikgPT09IDApIHtcbiAgICAgICAgZGIgPSAnJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGIgPSBgJHtkYn1gXG4gICAgICB9XG5cbiAgICAgIGlmIChkYiAmJiAhZGIuc3RhcnRzV2l0aCgnLScpKSBkYiA9ICcrJyArIGRiXG4gICAgICBpZiAody5kYXRhLmRhdGEucHJvcGVydGllcy5hZGRiKSBmb3JtdWxhID0gZm9ybXVsYSArIGRiXG4gICAgICBpZiAody5kYXRhLmRhdGEucHJvcGVydGllcy5haGJkKSBmb3JtdWxhID0gZm9ybXVsYSArIGRiICsgJy8yJ1xuICAgICAgd2VhcG9ucy5wdXNoKHtcbiAgICAgICAgbmFtZTogYCR7dy5kYXRhLm5hbWV9ICgke2Zvcm11bGF9KWAsXG4gICAgICAgIGRhbWFnZTogZm9ybXVsYSxcbiAgICAgICAgdXVpZDogdy51dWlkXG4gICAgICB9KVxuICAgIH0pXG4gICAgd2VhcG9ucy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcblxuICAgIGlmIChcbiAgICAgICF3ZWFwb25zLmZpbmQodyA9PlxuICAgICAgICB3Lm5hbWVcbiAgICAgICAgICAudG9VcHBlckNhc2UoKVxuICAgICAgICAgIC5zdGFydHNXaXRoKFxuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlVuYXJtZWRXZWFwb25OYW1lJyk/LnRvVXBwZXJDYXNlKClcbiAgICAgICAgICApXG4gICAgICApXG4gICAgKSB7XG4gICAgICBsZXQgZGIgPSAnJ1xuICAgICAgaWYgKHRoaXMucGFydGljaXBhbnQuYWN0b3IpIHtcbiAgICAgICAgZGIgPSB0aGlzLnBhcnRpY2lwYW50LmFjdG9yLmRiXG4gICAgICAgIGlmIChkYiAmJiAhZGIuc3RhcnRzV2l0aCgnLScpKSBkYiA9ICcrJyArIGRiXG4gICAgICAgIGlmIChkYiA9PT0gbnVsbCB8fCBOdW1iZXIoZGIpID09PSAwKSBkYiA9ICcnXG4gICAgICB9XG5cbiAgICAgIHdlYXBvbnMudW5zaGlmdCh7XG4gICAgICAgIG5hbWU6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5VbmFybWVkV2VhcG9uTmFtZScpfSAoMUQzJHtkYn0pYCxcbiAgICAgICAgZGFtYWdlOiBgMUQzJHtkYn1gLFxuICAgICAgICB1dWlkOiAndW5hcm1lZCdcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgd2VhcG9ucy5wdXNoKHtcbiAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5PdGhlcicpLFxuICAgICAgZGFtYWdlOiB0aGlzLmRhdGE/LmN1c3RvbVdlYXBvbkRhbWFnZSB8fCBudWxsLFxuICAgICAgdXVpZDogMFxuICAgIH0pXG4gICAgcmV0dXJuIHdlYXBvbnNcbiAgfVxuXG4gIGdldCB1c2VkV2VhcG9uICgpIHtcbiAgICBpZiAoIXRoaXMuZGF0YT8ud2VhcG9uQ2hvaWNlKSB7XG4gICAgICBpZiAoIXRoaXMud2VhcG9uc09wdGlvbnMpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGlmICghdGhpcy5kYXRhKSB0aGlzLmRhdGEgPSB7fSAvLyB1c2VsZXNzICEhIVxuICAgICAgdGhpcy5kYXRhLndlYXBvbkNob2ljZSA9IHRoaXMud2VhcG9uc09wdGlvbnNbMF0udXVpZFxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEud2VhcG9uQ2hvaWNlKSB7XG4gICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLndlYXBvbnNPcHRpb25zLmZpbmQoXG4gICAgICAgIGUgPT4gZS51dWlkID09PSB0aGlzLmRhdGEud2VhcG9uQ2hvaWNlXG4gICAgICApXG4gICAgICBpZiAod2VhcG9uKSByZXR1cm4gd2VhcG9uXG4gICAgfVxuICB9XG5cbiAgZ2V0IGluZmxpY3RlZERhbWFnZUZvcm11bGEgKCkge1xuICAgIGlmICh0aGlzLnVzZWRXZWFwb24pIHtcbiAgICAgIGNvbnN0IHdlYXBvbiA9IHRoaXMudXNlZFdlYXBvblxuICAgICAgaWYgKHdlYXBvbiAmJiB3ZWFwb24uZGFtYWdlICYmIFJvbGwudmFsaWRhdGUod2VhcG9uLmRhbWFnZSkpIHtcbiAgICAgICAgcmV0dXJuIHdlYXBvbi5kYW1hZ2VcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IHZhbGlkT2JzdGFjbGVEYW1hZ2UgKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuZGF0YS5vYnN0YWNsZS5oYXNIaXRQb2ludHMgJiZcbiAgICAgICFpc05hTihOdW1iZXIodGhpcy5kYXRhLm9ic3RhY2xlLkhpdFBvaW50cykpICYmXG4gICAgICBOdW1iZXIodGhpcy5kYXRhLm9ic3RhY2xlLkhpdFBvaW50cykgPiAwICYmXG4gICAgICB0aGlzLmluZmxpY3RlZERhbWFnZUZvcm11bGFcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IHN0cmluZ3MgKCkge1xuICAgIGNvbnN0IHN0cmluZ3MgPSB7fVxuICAgIHN0cmluZ3MuZGFtYWdlUm9sbFJlcXVlc3QgPSB0aGlzLnVzZWRXZWFwb24ubmFtZVxuXG4gICAgcmV0dXJuIHN0cmluZ3NcbiAgfVxuXG4gIC8vIEFjdGlvbnMgOlxuICBhc3luYyB2YWxpZGF0ZUNhcmQgKG9wdGlvbnMpIHtcbiAgICBsZXQgbG9hY3Rpb25DaGFuZ2VkXG4gICAgbGV0IHBhcnRpY2lwYW50Q2hhZ2VkID0gZmFsc2VcbiAgICBjb25zdCBvYnN0YWNsZVVwZGF0ZSA9IHt9XG4gICAgb2JzdGFjbGVVcGRhdGUub2JzdGFjbGVEZXRhaWxzID0ge31cbiAgICBjb25zdCBwYXJ0aWNpcGFudFVwZGF0ZSA9IHt9XG4gICAgaWYgKHRoaXMuZGF0YS5mbGFncy5vYnN0YWNsZURlc3RveWVkKSB7XG4gICAgICBsb2FjdGlvbkNoYW5nZWQgPSB0cnVlXG4gICAgICBvYnN0YWNsZVVwZGF0ZS5vYnN0YWNsZSA9IGZhbHNlXG4gICAgICBvYnN0YWNsZVVwZGF0ZS5vYnN0YWNsZURldGFpbHMuaGF6YXJkID0gZmFsc2VcbiAgICAgIG9ic3RhY2xlVXBkYXRlLm9ic3RhY2xlRGV0YWlscy5iYXJyaWVyID0gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBkaWZmID0gdGhpcy5saXN0Q2hhbmdlcygpXG4gICAgaWYgKGRpZmYuY2hhbmdlcykge1xuICAgICAgaWYgKHRoaXMuZGF0YS5yZWZsZWN0T2JzdGFsZUNoYW5nZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGlmZi5vYnN0YWNsZSkpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAndHlwZScpIHtcbiAgICAgICAgICAgIG9ic3RhY2xlVXBkYXRlLm9ic3RhY2xlRGV0YWlsc1t2YWx1ZS5rZXldID0gdmFsdWUubmV3XG4gICAgICAgICAgICBsb2FjdGlvbkNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS50b3RhbE9ic3RhY2xlRGFtYWdlID4gMCAmJiB0aGlzLmRhdGEub2JzdGFjbGUuaGFzSGl0UG9pbnRzKSB7XG4gICAgICBsZXQgcmVtYWluaW5nSHAgPSB0aGlzLmRhdGEub2JzdGFjbGUuSGl0UG9pbnRzXG4gICAgICByZW1haW5pbmdIcCAtPSB0aGlzLmRhdGEudG90YWxPYnN0YWNsZURhbWFnZVxuICAgICAgaWYgKHJlbWFpbmluZ0hwIDwgMCkgcmVtYWluaW5nSHAgPSAwXG4gICAgICBpZiAodGhpcy5vYnN0YWNsZS5IaXRQb2ludHMgIT09IHJlbWFpbmluZ0hwKSB7XG4gICAgICAgIG9ic3RhY2xlVXBkYXRlLm9ic3RhY2xlRGV0YWlscy5IaXRQb2ludHMgPSByZW1haW5pbmdIcFxuICAgICAgICB0aGlzLmRhdGEub2JzdGFjbGUuSGl0UG9pbnRzID0gcmVtYWluaW5nSHBcbiAgICAgICAgbG9hY3Rpb25DaGFuZ2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEudG90YWxQbGF5ZXJEYW1hZ2VUYWtlbiA+IDApIHtcbiAgICAgIHBhcnRpY2lwYW50Q2hhZ2VkID0gdHJ1ZVxuICAgICAgaWYgKHRoaXMucGFydGljaXBhbnQuYWN0b3IpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXJ0aWNpcGFudC5hY3Rvci5kZWFsRGFtYWdlKFxuICAgICAgICAgIHRoaXMuZGF0YS50b3RhbFBsYXllckRhbWFnZVRha2VuLFxuICAgICAgICAgIHsgaWdub3JlQXJtb3I6IHRydWUgfVxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0aWNpcGFudFVwZGF0ZS5ocCA9IHRoaXMucGFydGljaXBhbnREYXRhLmhwXG4gICAgICAgIHBhcnRpY2lwYW50VXBkYXRlLmhwIC09IHRoaXMuZGF0YS50b3RhbFBsYXllckRhbWFnZVRha2VuXG4gICAgICAgIGlmIChwYXJ0aWNpcGFudFVwZGF0ZS5ocCA8IDApIHBhcnRpY2lwYW50VXBkYXRlLmhwID0gMFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEudG90YWxBY3Rpb25Db3N0ID4gMCkge1xuICAgICAgcGFydGljaXBhbnRDaGFnZWQgPSB0cnVlXG4gICAgICBwYXJ0aWNpcGFudFVwZGF0ZS5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID1cbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudERhdGEuY3VycmVudE1vdmVtZW50QWN0aW9uc1xuICAgICAgcGFydGljaXBhbnRVcGRhdGUuY3VycmVudE1vdmVtZW50QWN0aW9ucyAtPSB0aGlzLmRhdGEudG90YWxBY3Rpb25Db3N0XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmRhdGEuZmxhZ3MuY29uc3VtZUJvbnVzRGljZSA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuZGF0YS5mbGFncy5jb25zdW1lQm9udXNEaWNlID0gdHJ1ZSAvLyBCb251cyBkaWNlIGF3YXJkZWQgZHVyaW5nIGZsb3cgYXJlIGJlaW5nIGNvbnN1bWVkXG5cbiAgICBpZiAodGhpcy5kYXRhLmZsYWdzLmNvbnN1bWVCb251c0RpY2UpIHtcbiAgICAgIHBhcnRpY2lwYW50Q2hhZ2VkID0gdHJ1ZVxuICAgICAgcGFydGljaXBhbnRVcGRhdGUuYm9udXNEaWNlID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgICFpc05hTih0aGlzLmRhdGEuYm9udXNEaWNlKSAmJlxuICAgICAgICB0aGlzLmRhdGEuYm9udXNEaWNlICE9PSB0aGlzLnBhcnRpY2lwYW50LmJvbnVzRGljZVxuICAgICAgKSB7XG4gICAgICAgIHBhcnRpY2lwYW50VXBkYXRlLmJvbnVzRGljZSA9IHRoaXMuZGF0YS5ib251c0RpY2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5kYXRhLm1vdmVQbGF5ZXIpIHtcbiAgICAgIGxldCB0YXJnZXRMb2NhdGlvblxuICAgICAgaWYgKHRoaXMuZGF0YS5mb3J3YXJkKSB7XG4gICAgICAgIHRhcmdldExvY2F0aW9uID0gdGhpcy5sb2NhdGlvblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0TG9jYXRpb24gPSB0aGlzLmNoYXNlLmdldExvY2F0aW9uU2hpZnQodGhpcy5sb2NhdGlvbi51dWlkLCB7XG4gICAgICAgICAgc2tpcDogLTFcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldExvY2F0aW9uLnV1aWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5jaGFzZS5tb3ZlUGFydGljaXBhbnRUb0xvY2F0aW9uKFxuICAgICAgICAgIHRoaXMucGFydGljaXBhbnREYXRhLnV1aWQsXG4gICAgICAgICAgdGFyZ2V0TG9jYXRpb24udXVpZCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY3JvbGxUb0xvY2F0aW9uOiB0cnVlLFxuICAgICAgICAgICAgYWN0aXZhdGVMb2NhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICByZW5kZXI6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxvYWN0aW9uQ2hhbmdlZCkge1xuICAgICAgYXdhaXQgdGhpcy5jaGFzZS51cGRhdGVMb2NhdGlvbih0aGlzLmxvY2F0aW9uLnV1aWQsIG9ic3RhY2xlVXBkYXRlLCB7XG4gICAgICAgIHJlbmRlcjogZmFsc2VcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChwYXJ0aWNpcGFudENoYWdlZCkge1xuICAgICAgYXdhaXQgdGhpcy5jaGFzZS51cGRhdGVQYXJ0aWNpcGFudChcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudERhdGEudXVpZCxcbiAgICAgICAgcGFydGljaXBhbnRVcGRhdGUsXG4gICAgICAgIHsgcmVuZGVyOiBmYWxzZSB9XG4gICAgICApXG4gICAgfVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMuY2xvc2VkID0gdHJ1ZVxuICAgIGF3YWl0IHRoaXMuY2hhc2UuYWN0aXZhdGVOZXh0UGFydGljaXBhbnRUdXJuKCkgLy8gUmVuZGVyIHdpbGwgYmUgZG9uZSB0aGVyZSAhXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIGRlZmluZU9ic3RhY2xlIChvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEuc3RhdGVzKSB0aGlzLmRhdGEuc3RhdGVzID0ge31cbiAgICB0aGlzLmRhdGEuc3RhdGVzLm9ic3RhY2xlRGVmaW5lZCA9IHRydWVcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgdHJ5VG9OZWdvdGlhdGVPYnN0YWNsZSAob3B0aW9ucykge1xuICAgIHRoaXMuZGF0YS5zdGF0ZXMuYnJlYWtPck5lZ290aWF0ZURlZmluZWQgPSB0cnVlXG4gICAgdGhpcy5kYXRhLnN0YXRlcy50cnlUb05lZ290aWF0ZSA9IHRydWVcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnRyeVRvQnJlYWsgPSBmYWxzZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyB0cnlUb0JyZWFrRG93bk9ic3RhY2xlIChvcHRpb25zKSB7XG4gICAgdGhpcy5kYXRhLnN0YXRlcy5icmVha09yTmVnb3RpYXRlRGVmaW5lZCA9IHRydWVcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlID0gZmFsc2VcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnRyeVRvQnJlYWsgPSB0cnVlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIGNhbmNlbE9ic3RhY2xlRGVmaW5pdGlvbiAob3B0aW9ucykge1xuICAgIHRoaXMuZGF0YS5zdGF0ZXMub2JzdGFjbGVEZWZpbmVkID0gZmFsc2VcbiAgICB0aGlzLmRhdGEuc3RhdGVzLmJyZWFrT3JOZWdvdGlhdGVEZWZpbmVkID0gZmFsc2VcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlID0gZmFsc2VcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnRyeVRvQnJlYWsgPSBmYWxzZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyBjYW5jZWxCcmVha09yUGFzc0Nob2ljZSAob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5kYXRhLm9ic3RhY2xlLmhhc0hpdFBvaW50cykgcmV0dXJuIHRoaXMuY2FuY2VsT2JzdGFjbGVEZWZpbml0aW9uKClcbiAgICB0aGlzLmRhdGEuc3RhdGVzLmJyZWFrT3JOZWdvdGlhdGVEZWZpbmVkID0gZmFsc2VcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlID0gZmFsc2VcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnRyeVRvQnJlYWsgPSBmYWxzZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyByZXF1ZXN0Um9sbCAob3B0aW9ucykge1xuICAgIHRoaXMuZGF0YS5zdGF0ZXMucGxheWVyQWN0aW9uRGVmaW5lZCA9IHRydWVcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgdGFrZUNhdXRpb3VzQXBwcm9hY2ggKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuZGF0YS50b3RhbENhdXRpb3VzQXBwcm9hY2gpIHRoaXMuZGF0YS50b3RhbENhdXRpb3VzQXBwcm9hY2ggPSAwXG4gICAgdGhpcy5kYXRhLnRvdGFsQ2F1dGlvdXNBcHByb2FjaCArPSAxXG4gICAgdGhpcy5kYXRhLmJvbnVzRGljZSArPSAxXG4gICAgdGhpcy5kYXRhLnRvdGFsQWN0aW9uQ29zdCArPSAxXG4gICAgaWYgKCF0aGlzLmRhdGEuZmxhZ3MuY29uc3VtZUJvbnVzRGljZSkge1xuICAgICAgdGhpcy5kYXRhLmZsYWdzLmNvbnN1bWVCb251c0RpY2UgPSB0cnVlXG4gICAgfVxuICAgIGlmICghdGhpcy5kYXRhLmZsYWdzLmhhc0JvbnVzRGljZSkge1xuICAgICAgdGhpcy5kYXRhLmZsYWdzLmhhc0JvbnVzRGljZSA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuZGF0YS5tb3ZlbWVudEFjdGlvbiA8PSB0aGlzLmRhdGEudG90YWxBY3Rpb25Db3N0KSB7IC8vIEFsbCBtb3YgYWN0aW9uIGhhdmUgYmVlbiB1c2VkIHRvIHRha2UgY3VhdGlvdXMgYXBwcm9hY2guXG4gICAgICB0aGlzLmRhdGEuZmxhZ3MuY29uc3VtZUJvbnVzRGljZSA9IGZhbHNlIC8vIERvIG5vdCBjb25zdW1lIHRoZSBib251cyBkaWNlLlxuICAgICAgdGhpcy5kYXRhLnN0YXRlcy5jYXJkUmVzb2x2ZWQgPSB0cnVlXG4gICAgICB0aGlzLmRhdGEubW92ZVBsYXllciA9IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyByb2xsU2tpbGxDaGVjayAob3B0aW9ucykge1xuICAgIGNvbnN0IHRhcmdldCA9IG9wdGlvbnMuZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSByZXR1cm5cbiAgICB0YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgnZGlzYWJsZWQnKVxuICAgIGlmICghdGhpcy5yb2xsKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob3RoaW5nVG9Sb2xsJykpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCF0aGlzLmRhdGEub2JqZWN0cykgdGhpcy5kYXRhLm9iamVjdHMgPSB7fVxuICAgIHRoaXMuZGF0YS5vYmplY3RzLmNoZWNrID0gQ29DN0NoZWNrLmNyZWF0ZUZyb21BY3RvclJvbGxEYXRhKHRoaXMucm9sbClcbiAgICBpZiAoIXRoaXMuZGF0YS5vYmplY3RzLmNoZWNrKSByZXR1cm4gZmFsc2VcbiAgICB0aGlzLmRhdGEub2JqZWN0cy5jaGVjay5kZW55UHVzaCA9IHRydWUgLy8gT2JzdGFjbGUgY2hlY2sgY2FuJ3QgYmUgcHVzaGVkXG4gICAgYXdhaXQgdGhpcy5kYXRhLm9iamVjdHMuY2hlY2suX3BlcmZvcm0oeyBmb3JjZURTTjogdHJ1ZSB9KVxuICAgIHRoaXMuZGF0YS50b3RhbEFjdGlvbkNvc3QgKz0gMVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMuY2hlY2tSb2xsZWQgPSB0cnVlXG4gICAgdGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ2Rpc2FibGVkJylcbiAgICBpZiAodGhpcy5kYXRhLm9iamVjdHMuY2hlY2sucGFzc2VkKSB7XG4gICAgICB0aGlzLmRhdGEubW92ZVBsYXllciA9IHRydWVcbiAgICAgIHRoaXMuZGF0YS5zdGF0ZXMuY2FyZFJlc29sdmVkID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuZGF0YS5hcm1vciA9PT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5wYXJ0aWNpcGFudC5hY3Rvcikge1xuICAgICAgICB0aGlzLmRhdGEuYXJtb3IgPVxuICAgICAgICAgIHRoaXMucGFydGljaXBhbnQuYWN0b3IuZGF0YS5kYXRhLmF0dHJpYnMuYXJtb3IudmFsdWUgfHwgMFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyB1c2VMdWNrIChvcHRpb25zKSB7XG4gICAgYXdhaXQgQ29DN0NoZWNrLmFsdGVyKHRoaXMuZGF0YS5vYmplY3RzLmNoZWNrLCAndXNlTHVjaycsIHtcbiAgICAgIHRhcmdldDogb3B0aW9ucy5ldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgdXBkYXRlOiBmYWxzZVxuICAgIH0pXG4gICAgaWYgKHRoaXMuZGF0YS5vYmplY3RzLmNoZWNrLnBhc3NlZCkge1xuICAgICAgdGhpcy5kYXRhLnN0YXRlcy5jYXJkUmVzb2x2ZWQgPSB0cnVlXG4gICAgICB0aGlzLmRhdGEubW92ZVBsYXllciA9IHRydWVcbiAgICAgIHRoaXMuZGF0YS50b3RhbEFjdGlvbkNvc3QgKz0gMVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgcm9sbEZhaWxDb25zZXF1ZW5jZXMgKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuZGF0YS5vYmplY3RzKSB0aGlzLmRhdGEub2JqZWN0cyA9IHt9XG4gICAgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5oYXNEYW1hZ2UgJiYgdGhpcy5kYXRhLm9iamVjdHMuY2hlY2s/LmlzRmFpbHVyZSkge1xuICAgICAgY29uc3QgZGFtYWdlID1cbiAgICAgICAgdHlwZW9mIHRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRDaGVja0RhbWFnZSA9PT0gJ251bWJlcidcbiAgICAgICAgICA/IGAke3RoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRDaGVja0RhbWFnZX1gXG4gICAgICAgICAgOiB0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQ2hlY2tEYW1hZ2VcbiAgICAgIHRoaXMuZGF0YS5vYmplY3RzLmZhaWxlZERhbWFnZVJvbGwgPSBuZXcgUm9sbChkYW1hZ2UpXG4gICAgICBhd2FpdCB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWREYW1hZ2VSb2xsLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICB9XG4gICAgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5oYXphcmQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLmhhc0FjdGlvbkNvc3QgJiZcbiAgICAgICAgdGhpcy5kYXRhLm9iamVjdHMuY2hlY2s/LmlzRmFpbHVyZVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbkNvc3QgPVxuICAgICAgICAgIHR5cGVvZiB0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQWN0aW9uQ29zdCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gYCR7dGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZEFjdGlvbkNvc3R9YFxuICAgICAgICAgICAgOiB0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQWN0aW9uQ29zdFxuICAgICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWRBY3Rpb25Sb2xsID0gbmV3IFJvbGwoYWN0aW9uQ29zdClcbiAgICAgICAgYXdhaXQgdGhpcy5kYXRhLm9iamVjdHMuZmFpbGVkQWN0aW9uUm9sbC5ldmFsdWF0ZSh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICAgIHRoaXMuZGF0YS50b3RhbEFjdGlvbkNvc3QgKz0gKHRoaXMuZGF0YS5vYmplY3RzLmZhaWxlZEFjdGlvblJvbGwudG90YWwgLSAxKSAvLyAxIGFjdGlvbiBhbHJlYWR5IHNwZW5kIGZvciBza2lsbCBjaGVja1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZGF0YS5zdGF0ZXMuZmFpbGVkQ29uc2VxdWVuY2VzUm9sbGVkID0gdHJ1ZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMuY2FyZFJlc29sdmVkID0gdHJ1ZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyBhc2tSb2xsT2JzdGFjbGVEYW1hZ2UgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnBsYXllckFjdGlvbkRlZmluZWQgPSB0cnVlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIHJvbGxPYnN0YWNsZURhbWFnZSAob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5kYXRhLm9iamVjdHMpIHRoaXMuZGF0YS5vYmplY3RzID0ge31cbiAgICB0aGlzLmRhdGEub2JqZWN0cy5vYnN0YWNsZURhbWFnZVJvbGwgPSBuZXcgUm9sbCh0aGlzLnVzZWRXZWFwb24/LmRhbWFnZSlcbiAgICBhd2FpdCB0aGlzLmRhdGEub2JqZWN0cy5vYnN0YWNsZURhbWFnZVJvbGwuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgIGF3YWl0IENvQzdEaWNlLnNob3dSb2xsRGljZTNkKHRoaXMuZGF0YS5vYmplY3RzLm9ic3RhY2xlRGFtYWdlUm9sbClcbiAgICB0aGlzLmRhdGEuc3RhdGVzLm9ic3RhY2xlRGFtYWdlUm9sbGVkID0gdHJ1ZVxuICAgIHRoaXMuZGF0YS50b3RhbEFjdGlvbkNvc3QgKz0gMVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMuY2FyZFJlc29sdmVkID0gdHJ1ZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyBMaXN0IGFsbCBjaGFuZ2VzXG4gIGxpc3RDaGFuZ2VzICh2YWxpZGF0ZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgZGlmZiA9IHtcbiAgICAgIG9ic3RhY2xlOiB7fSxcbiAgICAgIHBsYXllcjoge30sXG4gICAgICBjaGFuZ2VzOiBmYWxzZVxuICAgIH1cbiAgICBjb25zdCBuYW1lcyA9IHtcbiAgICAgIGJhcnJpZXI6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5UeXBlJyksXG4gICAgICBoYXphcmQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5UeXBlJyksXG4gICAgICBoYXNIaXRQb2ludHM6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5CcmVha2FibGUnKSxcbiAgICAgIEhpdFBvaW50czogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhpdFBvaW50cycpLFxuICAgICAgaGFzQWN0aW9uQ29zdDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFjdGlvbkNvc3QnKSxcbiAgICAgIGZhaWxlZEFjdGlvbkNvc3Q6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BY3Rpb25Db3N0JyksXG4gICAgICBoYXNEYW1hZ2U6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GaWdodEJhY2snKSxcbiAgICAgIGZhaWxlZENoZWNrRGFtYWdlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2VhcG9uRGFtYWdlJyksXG4gICAgICBjaGVja05hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGVjaycpLFxuICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5hbWUnKVxuICAgIH1cblxuICAgIGlmICh2YWxpZGF0ZSAmJiAhdGhpcy5kYXRhLnZhbGlkYXRpb24pIHtcbiAgICAgIHRoaXMuZGF0YS52YWxpZGF0aW9uID0ge31cbiAgICB9XG5cbiAgICBjb25zdCBuZXdPYnN0YWNsZSA9IGZvdW5kcnkudXRpbHMuZGlmZk9iamVjdChcbiAgICAgIHRoaXMub2JzdGFjbGUsXG4gICAgICB0aGlzLmRhdGEub2JzdGFjbGVcbiAgICApXG4gICAgLy8gY29uc3Qgb2xkT2JzdGFjbGUgPSBmb3VuZHJ5LnV0aWxzLmRpZmZPYmplY3QodGhpcy5kYXRhLm9ic3RhY2xlLCB0aGlzLm9ic3RhY2xlKVxuXG4gICAgZm9yIChjb25zdCBba2V5XSBvZiBPYmplY3QuZW50cmllcyhuZXdPYnN0YWNsZSkpIHtcbiAgICAgIC8vIGlmICgnYmFycmllcicgPT0ga2V5IHx8ICdoYXphcmQnID09IGtleSlcbiAgICAgIC8vIHtcbiAgICAgIC8vICAgZGlmZi5jaGFuZ2VzID0gdHJ1ZVxuICAgICAgLy8gICBkaWZmLm9ic3RhY2xlLnR5cGUgPSB7XG4gICAgICAvLyAgICAgb2xkOiBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAvLyAgICAgICB0aGlzLm9ic3RhY2xlLmJhcnJpZXIgPyAnQ29DNy5CYXJyaWVyJyA6ICdDb0M3LkhhemFyZCdcbiAgICAgIC8vICAgICApLFxuICAgICAgLy8gICAgIG5ldzogZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgLy8gICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLmJhcnJpZXIgPyAnQ29DNy5CYXJyaWVyJyA6ICdDb0M3LkhhemFyZCdcbiAgICAgIC8vICAgICApLFxuICAgICAgLy8gICAgIGtleTogJ3R5cGUnLFxuICAgICAgLy8gICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5UeXBlJylcbiAgICAgIC8vICAgfVxuICAgICAgLy8gICBpZiAodmFsaWRhdGUpIHtcbiAgICAgIC8vICAgICB0aGlzLmRhdGEudmFsaWRhdGlvbltrZXldID0gdHJ1ZVxuICAgICAgLy8gICAgIHRoaXMuZGF0YS52YWxpZGF0aW9uLnR5cGUgPSB0cnVlXG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH1cbiAgICAgIC8vIGVsc2VcbiAgICAgIC8vIHtcbiAgICAgIGlmIChcbiAgICAgICAgIShcbiAgICAgICAgICAobmV3T2JzdGFjbGVba2V5XSA9PT0gJycgJiYgdGhpcy5vYnN0YWNsZVtrZXldID09PSBudWxsKSB8fFxuICAgICAgICAgICghaXNOYU4oTnVtYmVyKG5ld09ic3RhY2xlW2tleV0pKSAmJlxuICAgICAgICAgICAgTnVtYmVyKG5ld09ic3RhY2xlW2tleV0pID09PSB0aGlzLm9ic3RhY2xlW2tleV0pXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBkaWZmLmNoYW5nZXMgPSB0cnVlXG5cbiAgICAgICAgZGlmZi5vYnN0YWNsZVtrZXldID0ge1xuICAgICAgICAgIG9sZDogdGhpcy5vYnN0YWNsZVtrZXldLFxuICAgICAgICAgIG5ldzogbmV3T2JzdGFjbGVba2V5XSxcbiAgICAgICAgICBuYW1lOiBuYW1lc1trZXldLFxuICAgICAgICAgIGtleVxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWxpZGF0ZSkgdGhpcy5kYXRhLnZhbGlkYXRpb25ba2V5XSA9IHRydWVcbiAgICAgIH1cbiAgICAgIC8vIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGlmZlxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgY2FudmFzLCBEaWFsb2csIGZvdW5kcnksIGdhbWUsIFBJWEksIFRva2VuLCBUb2tlbkRvY3VtZW50LCB1aSAqL1xuaW1wb3J0IHsgQ29DQWN0b3IgfSBmcm9tICcuLi8uLi9hY3RvcnMvYWN0b3IuanMnXG5pbXBvcnQgeyBDaGFzZU9ic3RhY2xlQ2FyZCB9IGZyb20gJy4uLy4uL2NoYXQvY2FyZHMvY2hhc2Utb2JzdGFjbGUuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi8uLi9jaGVjay5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uL2l0ZW0uanMnXG5pbXBvcnQgeyBfcGFydGljaXBhbnQsIHNvcnRCeVJvbGVBbmREZXggfSBmcm9tICcuL3BhcnRpY2lwYW50LmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN0NoYXNlIGV4dGVuZHMgQ29DN0l0ZW0ge1xuICBjb25zdHJ1Y3RvciAoZGF0YSwgY29udGV4dCkge1xuICAgIGlmICh0eXBlb2YgZGF0YS5pbWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkYXRhLmltZyA9ICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zL3J1bm5pbmctc29saWQuc3ZnJ1xuICAgIH1cbiAgICBzdXBlcihkYXRhLCBjb250ZXh0KVxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHRcbiAgfVxuXG4gIC8vIEhhbmRsZSBwYXJ0aWNpcGFudHNcbiAgZ2V0IHBhcnRpY2lwYW50cyAoKSB7XG4gICAgY29uc3QgcExpc3QgPSBbXVxuICAgIGNvbnN0IHByZXlzID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICAuZmlsdGVyKHAgPT4gIXAuY2hhc2VyKVxuICAgICAgLm1hcChwID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBfcGFydGljaXBhbnQocClcbiAgICAgIH0pXG4gICAgY29uc3QgY2hhc2VycyA9IHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgLmZpbHRlcihwID0+IHAuY2hhc2VyKVxuICAgICAgLm1hcChwID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBfcGFydGljaXBhbnQocClcbiAgICAgIH0pXG4gICAgdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzLmZvckVhY2gocCA9PiB7XG4gICAgICAvLyBwLmluZGV4ID0gcExpc3QubGVuZ3RoIC0gMVxuICAgICAgcC5hc3Npc3QgPSBbXVxuICAgICAgaWYgKHAuY2hhc2VyKSB7XG4gICAgICAgIHAuYXNzaXN0ID0gY2hhc2Vyc1xuICAgICAgICAgIC5maWx0ZXIoYyA9PiBjLnV1aWQgIT09IHAudXVpZCAmJiAhYy5oYXNNYXhCb251c0RpY2UpXG4gICAgICAgICAgLm1hcChjID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IHV1aWQ6IGMudXVpZCwgbmFtZTogYy5uYW1lIH1cbiAgICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcC5hc3Npc3QgPSBwcmV5c1xuICAgICAgICAgIC5maWx0ZXIoYyA9PiBjLnV1aWQgIT09IHAudXVpZCAmJiAhYy5oYXNNYXhCb251c0RpY2UpXG4gICAgICAgICAgLm1hcChjID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IHV1aWQ6IGMudXVpZCwgbmFtZTogYy5uYW1lIH1cbiAgICAgICAgICB9KVxuICAgICAgfVxuICAgICAgY29uc3QgcGFydGljcGFudCA9IG5ldyBfcGFydGljaXBhbnQocClcbiAgICAgIC8vIHBhcnRpY3BhbnQubG9jYXRpb24gPSB0aGlzLmdldFBhcnRpY2lwYW50TG9jYXRpb24oIHBhcnRpY3BhbnQudXVpZCkgLy8gUmVjdXJzaXZpdHlcbiAgICAgIHBMaXN0LnB1c2gocGFydGljcGFudClcbiAgICB9KVxuICAgIHJldHVybiBwTGlzdFxuICB9XG5cbiAgZ2V0IHBhcnRpY2lwYW50c09iamVjdCAoKSB7XG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5wYXJ0aWNpcGFudHNcbiAgICBwYXJ0aWNpcGFudHMuZm9yRWFjaChwID0+IHtcbiAgICAgIHAubG9jYXRpb24gPSB0aGlzLmdldFBhcnRpY2lwYW50TG9jYXRpb24ocC51dWlkKVxuICAgIH0pXG4gICAgcmV0dXJuIHBhcnRpY2lwYW50c1xuICB9XG5cbiAgZ2V0IGFjdGl2ZVBhcnRpY2lwYW50RGF0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cy5maW5kKHAgPT4gcC5hY3RpdmUpXG4gIH1cblxuICBnZXQgYWN0aXZlQWN0b3IgKCkge1xuICAgIGNvbnN0IHAgPSB0aGlzLmFjdGl2ZVBhcnRpY2lwYW50RGF0YVxuICAgIGlmICghcCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmIChwLmRvY1V1aWQpIHtcbiAgICAgIHJldHVybiBDb0M3VXRpbGl0aWVzLmdldEFjdG9yRnJvbUtleShwLmRvY1V1aWQpXG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBwYXJ0aWNpcGFudHNCeUFkanVzdGVkTW92ICgpIHtcbiAgICBjb25zdCBwTGlzdCA9IHRoaXMuYWN0dWFsUGFydGljaXBhbnRzLnNvcnQoXG4gICAgICAoYSwgYikgPT4gYS5hZGp1c3RlZE1vdiAtIGIuYWRqdXN0ZWRNb3ZcbiAgICApXG4gICAgcExpc3QuZm9yRWFjaChwID0+IHtcbiAgICAgIHAubG9jYXRpb24gPSB0aGlzLmdldFBhcnRpY2lwYW50TG9jYXRpb24ocC51dWlkKVxuICAgIH0pXG4gICAgcmV0dXJuIHBMaXN0XG4gIH1cblxuICBnZXQgcGFydGljaXBhbnRzQnlJbml0aWF0aXZlICgpIHtcbiAgICBjb25zdCBwTGlzdCA9IHRoaXMuYWN0dWFsUGFydGljaXBhbnRzLnNvcnQoXG4gICAgICAoYSwgYikgPT4gYi5pbml0aWF0aXZlIC0gYS5pbml0aWF0aXZlXG4gICAgKVxuICAgIHBMaXN0LmZvckVhY2gocCA9PiB7XG4gICAgICBwLmxvY2F0aW9uID0gdGhpcy5nZXRQYXJ0aWNpcGFudExvY2F0aW9uKHAudXVpZClcbiAgICB9KVxuICAgIHJldHVybiBwTGlzdFxuICB9XG5cbiAgZ2V0IHByZXlzICgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJ0aWNpcGFudHMuZmlsdGVyKHAgPT4gIXAuaXNDaGFzZXIgJiYgcC5pc1ZhbGlkKSB8fCBbXVxuICB9XG5cbiAgZ2V0IGNoYXNlcnMgKCkge1xuICAgIHJldHVybiB0aGlzLnBhcnRpY2lwYW50cy5maWx0ZXIocCA9PiBwLmlzQ2hhc2VyICYmIHAuaXNWYWxpZCkgfHwgW11cbiAgfVxuXG4gIGdldCBhbGxIYXZlVmFsaWRNb3YgKCkge1xuICAgIHJldHVybiB0aGlzLnBhcnRpY2lwYW50cy5ldmVyeShlID0+IGUuaGFzVmFsaWRNb3YpXG4gIH1cblxuICBnZXQgYWxsSGF2ZVNwZWVkUm9sbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFydGljaXBhbnRzLmV2ZXJ5KHAgPT4gcC5zcGVlZENoZWNrPy5yb2xsZWQpXG4gIH1cblxuICBnZXRQYXJ0aWNpcGFudExvY2F0aW9uIChwYXJ0aWNpcGFudFV1aWQpIHtcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmxvY2F0aW9ucz8ubGlzdD8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIGlmICghdGhpcy5zdGFydGVkKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgbG9jYXRpb25zID0gdGhpcy5sb2NhdGlvbnNcblxuICAgIGNvbnN0IGxvY2F0aW9uID0gbG9jYXRpb25zLmZpbmQobCA9PiB7XG4gICAgICBjb25zdCBscCA9IGwucGFydGljaXBhbnRzPy5maW5kKHAgPT4gcGFydGljaXBhbnRVdWlkID09PSBwLnV1aWQpXG4gICAgICByZXR1cm4gISFscFxuICAgIH0pXG4gICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gbG9jYXRpb25cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0UGFydGljaXBhbnREYXRhIChwYXJ0aWNpcGFudFV1aWQpIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cy5maW5kKFxuICAgICAgcCA9PiBwYXJ0aWNpcGFudFV1aWQgPT09IHAudXVpZFxuICAgIClcbiAgICBpZiAocGFydGljaXBhbnQpIHJldHVybiBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShwYXJ0aWNpcGFudCkgLy8gVE9ETyA6IGNoZWNrIGlmIHdlIG5lZWQgdG8gZHVwbGljYXRlXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0UGFydGljaXBhbnQgKHBhcnRpY2lwYW50VXVpZCkge1xuICAgIGNvbnN0IHBhcnRpY2lwYW50RGF0YSA9IHRoaXMuZ2V0UGFydGljaXBhbnREYXRhKHBhcnRpY2lwYW50VXVpZClcbiAgICBpZiAocGFydGljaXBhbnREYXRhKSByZXR1cm4gbmV3IF9wYXJ0aWNpcGFudChwYXJ0aWNpcGFudERhdGEpXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IG5leHRBY3RpdmVQYXJ0aWNpcGFudCAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5wYXJ0aWNpcGFudHNCeUluaXRpYXRpdmUuZmluZChcbiAgICAgIHAgPT4gcC5kYXRhLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPiAwXG4gICAgKVxuICB9XG5cbiAgZ2V0IHNsb3dlc3RQcmV5ICgpIHtcbiAgICBjb25zdCBwcmV5cyA9IHRoaXMucGFydGljaXBhbnRzXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5hZGp1c3RlZE1vdiAtIGIuYWRqdXN0ZWRNb3YpXG4gICAgICA/LmZpbHRlcihwID0+IHAuaXNQcmV5KVxuICAgIGlmIChwcmV5cy5sZW5ndGggPiAwKSByZXR1cm4gcHJleXNbMF1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgZmFzdGVzdENoYXNlciAoKSB7XG4gICAgY29uc3QgY2hhc2VycyA9IHRoaXMucGFydGljaXBhbnRzXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5hZGp1c3RlZE1vdiAtIGIuYWRqdXN0ZWRNb3YpXG4gICAgICA/LmZpbHRlcihwID0+IHAuaXNDaGFzZXIpXG4gICAgaWYgKGNoYXNlcnMubGVuZ3RoID4gMCkgcmV0dXJuIGNoYXNlcnMuc2xpY2UoLTEpLnBvcCgpXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IGFjdHVhbFBhcnRpY2lwYW50cyAoKSB7XG4gICAgY29uc3Qgc2xvd2VzdFByZXkgPSB0aGlzLnNsb3dlc3RQcmV5XG4gICAgY29uc3QgZmFzdGVzdENoYXNlciA9IHRoaXMuZmFzdGVzdENoYXNlclxuICAgIGxldCBwTGlzdCA9IHRoaXMucGFydGljaXBhbnRzXG4gICAgaWYgKCF0aGlzLnN5c3RlbS5pbmNsdWRlTGF0ZWNvbWVycyAmJiBzbG93ZXN0UHJleSkge1xuICAgICAgcExpc3QgPSBwTGlzdC5maWx0ZXIocCA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcC5pc1ByZXkgfHwgKHAuaXNDaGFzZXIgJiYgcC5hZGp1c3RlZE1vdiA+PSBzbG93ZXN0UHJleS5hZGp1c3RlZE1vdilcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3lzdGVtLmluY2x1ZGVFc2NhcGVkICYmIGZhc3Rlc3RDaGFzZXIpIHtcbiAgICAgIHBMaXN0ID0gcExpc3QuZmlsdGVyKHAgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHAuaXNDaGFzZXIgfHwgKHAuaXNQcmV5ICYmIHAuYWRqdXN0ZWRNb3YgPD0gZmFzdGVzdENoYXNlci5hZGp1c3RlZE1vdilcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gcExpc3RcbiAgfVxuXG4gIGdldCBzbG93ZXN0UGFydGljaXBhbnQgKCkge1xuICAgIGNvbnN0IHBMaXN0ID0gdGhpcy5wYXJ0aWNpcGFudHNCeUFkanVzdGVkTW92XG4gICAgaWYgKHBMaXN0Lmxlbmd0aCA+IDApIHJldHVybiBwTGlzdFswXVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVBhcnRpY2lwYW50cyAobGlzdCwgeyByZW5kZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IHBhcnRpY2lwYW50c0RhdGEgPSB0aGlzLmNsZWFuUGFydGljaXBhbnRMaXN0KGxpc3QpXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKFxuICAgICAgeyAnc3lzdGVtLnBhcnRpY2lwYW50cyc6IHBhcnRpY2lwYW50c0RhdGEgfSxcbiAgICAgIHsgcmVuZGVyIH1cbiAgICApXG4gIH1cblxuICBhc3luYyB1cGRhdGVQYXJ0aWNpcGFudCAocGFydGljaWFudFV1aWQsIHVwZGF0ZURhdGEsIHsgcmVuZGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgY29uc3QgdXBkYXRlID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodXBkYXRlRGF0YSlcbiAgICBjb25zdCBwYXJ0aWNpcGFudEluZGV4ID0gcGFydGljaXBhbnRzLmZpbmRJbmRleChcbiAgICAgIHAgPT4gcGFydGljaWFudFV1aWQgPT09IHAudXVpZFxuICAgIClcbiAgICBpZiAocGFydGljaXBhbnRJbmRleCA9PT0gLTEpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAodXBkYXRlLnV1aWQpIGRlbGV0ZSB1cGRhdGUudXVpZFxuICAgIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QocGFydGljaXBhbnRzW3BhcnRpY2lwYW50SW5kZXhdLCB1cGRhdGUsIHtcbiAgICAgIG92ZXJ3cml0ZTogdHJ1ZVxuICAgIH0pXG4gICAgYXdhaXQgdGhpcy51cGRhdGVQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzLCB7IHJlbmRlciB9KVxuICB9XG5cbiAgY2xlYW5QYXJ0aWNpcGFudExpc3QgKGxpc3QpIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gbGlzdCB8fCBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgbGlzdC5mb3JFYWNoKHAgPT4ge1xuICAgICAgbGV0IGRhdGFcbiAgICAgIGlmIChwLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdfcGFydGljaXBhbnQnKSB7XG4gICAgICAgIGRhdGEgPSBwLmRhdGFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBwXG4gICAgICB9XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZEluZGV4KHBhcnRpY2lwYW50c0RhdGEsIGRhdGEudXVpZClcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcGFydGljaXBhbnRzRGF0YS5wdXNoKGRhdGEpXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUGFydGljaXBhbnREYXRhTWlzc2luZycpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydGljaXBhbnRzRGF0YVtpbmRleF0gPSBkYXRhXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gcGFydGljaXBhbnRzRGF0YVxuICB9XG5cbiAgYXN5bmMgYXNzaXN0UGFydGljaXBhbnQgKFxuICAgIGFzc2lzdGFudFV1aWQsXG4gICAgYmVuZWZpY2lhcnlVdWlkLFxuICAgIHsgdXNlTW92ZW1lbnRBY3Rpb25zID0gdHJ1ZSwgcmVuZGVyID0gdHJ1ZSB9ID0ge31cbiAgKSB7XG4gICAgY29uc3QgYXNzaXN0YW50ID0gdGhpcy5nZXRQYXJ0aWNpcGFudChhc3Npc3RhbnRVdWlkKVxuICAgIGNvbnN0IGJlbmVmaWNpYXJ5ID0gdGhpcy5nZXRQYXJ0aWNpcGFudChiZW5lZmljaWFyeVV1aWQpXG4gICAgY29uc3QgcGFydGljaXBhbnRzRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgKVxuICAgIGNvbnN0IGFzc2lzdGFudEluZGV4ID0gcGFydGljaXBhbnRzRGF0YS5maW5kSW5kZXgoXG4gICAgICBwID0+IGFzc2lzdGFudFV1aWQgPT09IHAudXVpZFxuICAgIClcbiAgICBjb25zdCBiZW5lZmljaWFyeUluZGV4ID0gcGFydGljaXBhbnRzRGF0YS5maW5kSW5kZXgoXG4gICAgICBwID0+IGJlbmVmaWNpYXJ5VXVpZCA9PT0gcC51dWlkXG4gICAgKVxuXG4gICAgaWYgKCFhc3Npc3RhbnQgfHwgIWJlbmVmaWNpYXJ5KSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5QYXJ0aWNpcGFudE5vdEZvdW5kJykpXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgaWYgKGJlbmVmaWNpYXJ5Lmhhc01heEJvbnVzRGljZSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckJlbmVmaWNpYXJ5QXRNYXhCb251cycsIHtcbiAgICAgICAgICBuYW1lOiBiZW5lZmljaWFyeS5uYW1lXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgaWYgKHVzZU1vdmVtZW50QWN0aW9ucykge1xuICAgICAgaWYgKGFzc2lzdGFudC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zIDwgMSkge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuUGFydGljaXBhbnROb3RFbm91Z2hNb3ZlbWVudCcsIHtcbiAgICAgICAgICAgIGFzc2lzdGFudFV1aWQsXG4gICAgICAgICAgICBhY3Rpb25zOiBhc3Npc3RhbnQuY3VycmVudE1vdmVtZW50QWN0aW9uc1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuICAgICAgYXNzaXN0YW50LmFsdGVyTW92ZW1lbnRBY3Rpb25zKC0xKVxuICAgICAgcGFydGljaXBhbnRzRGF0YVthc3Npc3RhbnRJbmRleF0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShhc3Npc3RhbnQuZGF0YSlcbiAgICB9XG5cbiAgICBiZW5lZmljaWFyeS5hZGRCb251c0RpY2UoKVxuICAgIHBhcnRpY2lwYW50c0RhdGFbYmVuZWZpY2lhcnlJbmRleF0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgIGJlbmVmaWNpYXJ5LmRhdGFcbiAgICApXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoXG4gICAgICB7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzRGF0YSB9LFxuICAgICAgeyByZW5kZXIgfVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIHRvZ2dsZUJvbnVzRGljZSAocGFydGljaXBhbnRVdWlkLCBkaWNlTnVtYmVyLCB7IHJlbmRlciA9IHRydWUgfSA9IHt9KSB7XG4gICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLmdldFBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZClcblxuICAgIGlmICghcGFydGljaXBhbnQpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuUGFydGljaXBhbnRVdWlkTm90Rm91bmQnLCB7XG4gICAgICAgICAgcGFydGljaXBhbnRVdWlkXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3QgcGFydGljaXBhbnRzRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgKVxuICAgIGNvbnN0IHBhcnRpY2lwYW50SW5kZXggPSBwYXJ0aWNpcGFudHNEYXRhLmZpbmRJbmRleChcbiAgICAgIHAgPT4gcGFydGljaXBhbnRVdWlkID09PSBwLnV1aWRcbiAgICApXG4gICAgaWYgKHBhcnRpY2lwYW50LmJvbnVzRGljZSA+PSBkaWNlTnVtYmVyKSBwYXJ0aWNpcGFudC5yZW1vdmVCb251c0RpY2UoKVxuICAgIGVsc2UgcGFydGljaXBhbnQuYWRkQm9udXNEaWNlKClcbiAgICBwYXJ0aWNpcGFudHNEYXRhW3BhcnRpY2lwYW50SW5kZXhdID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICBwYXJ0aWNpcGFudC5kYXRhXG4gICAgKVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKFxuICAgICAgeyAnc3lzdGVtLnBhcnRpY2lwYW50cyc6IHBhcnRpY2lwYW50c0RhdGEgfSxcbiAgICAgIHsgcmVuZGVyIH1cbiAgICApXG4gIH1cblxuICBhc3luYyBjYXV0aW91c0FwcHJvYWNoIChcbiAgICBwYXJ0aWNpcGFudFV1aWQsXG4gICAgeyB1c2VNb3ZlbWVudEFjdGlvbnMgPSB0cnVlLCByZW5kZXIgPSB0cnVlIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRoaXMuZ2V0UGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkKVxuXG4gICAgaWYgKCFwYXJ0aWNpcGFudCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5QYXJ0aWNpcGFudFV1aWROb3RGb3VuZCcsIHtcbiAgICAgICAgICBwYXJ0aWNpcGFudFV1aWRcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICApXG4gICAgY29uc3QgcGFydGljaXBhbnRJbmRleCA9IHBhcnRpY2lwYW50c0RhdGEuZmluZEluZGV4KFxuICAgICAgcCA9PiBwYXJ0aWNpcGFudFV1aWQgPT09IHAudXVpZFxuICAgIClcbiAgICBpZiAocGFydGljaXBhbnQuaGFzTWF4Qm9udXNEaWNlKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yUGFydGljaXBhbnRBdE1heEJvbnVzJywge1xuICAgICAgICAgIHBhcnRpY2lwYW50VXVpZFxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh1c2VNb3ZlbWVudEFjdGlvbnMpIHtcbiAgICAgIGlmIChwYXJ0aWNpcGFudC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zIDwgMSkge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuUGFydGljaXBhbnROb3RFbm91Z2hNb3ZlbWVudCcsIHtcbiAgICAgICAgICAgIGFzc2lzdGFudFV1aWQ6IHBhcnRpY2lwYW50VXVpZCxcbiAgICAgICAgICAgIGFjdGlvbnM6IHBhcnRpY2lwYW50LmN1cnJlbnRNb3ZlbWVudEFjdGlvbnNcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIHBhcnRpY2lwYW50LmFsdGVyTW92ZW1lbnRBY3Rpb25zKC0xKVxuICAgIH1cbiAgICBwYXJ0aWNpcGFudC5hZGRCb251c0RpY2UoKVxuICAgIHBhcnRpY2lwYW50c0RhdGFbcGFydGljaXBhbnRJbmRleF0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgIHBhcnRpY2lwYW50LmRhdGFcbiAgICApXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoXG4gICAgICB7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzRGF0YSB9LFxuICAgICAgeyByZW5kZXIgfVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIGFsdGVyUGFydGljaXBhbnRNb3ZlbWVudEFjdGlvbiAoXG4gICAgcGFydGljaXBhbnRVdWlkLFxuICAgIGNvdW50LFxuICAgIHsgcmVuZGVyID0gdHJ1ZSB9ID0ge31cbiAgKSB7XG4gICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLmdldFBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZClcblxuICAgIGlmICghcGFydGljaXBhbnQpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuUGFydGljaXBhbnRVdWlkTm90Rm91bmQnLCB7XG4gICAgICAgICAgcGFydGljaXBhbnRVdWlkXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3QgcGFydGljaXBhbnRzRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgKVxuICAgIGNvbnN0IHBhcnRpY2lwYW50SW5kZXggPSBwYXJ0aWNpcGFudHNEYXRhLmZpbmRJbmRleChcbiAgICAgIHAgPT4gcGFydGljaXBhbnRVdWlkID09PSBwLnV1aWRcbiAgICApXG5cbiAgICBwYXJ0aWNpcGFudC5hbHRlck1vdmVtZW50QWN0aW9ucyhjb3VudClcblxuICAgIHBhcnRpY2lwYW50c0RhdGFbcGFydGljaXBhbnRJbmRleF0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgIHBhcnRpY2lwYW50LmRhdGFcbiAgICApXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoXG4gICAgICB7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzRGF0YSB9LFxuICAgICAgeyByZW5kZXIgfVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIGFjdGl2YXRlTmV4dFBhcnRpY2lwYW50VHVybiAoe1xuICAgIHNjcm9sbFRvTG9jYXRpb24gPSB0cnVlLFxuICAgIGFjdGl2YXRlTG9jYXRpb24gPSB0cnVlLFxuICAgIHJlbmRlciA9IHRydWUsXG4gICAgaHRtbCA9IG51bGxcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgYWN0aXZlUGFydGljaXBhbnQgPSB0aGlzLm5leHRBY3RpdmVQYXJ0aWNpcGFudFxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBzY3JvbGxUb0xvY2F0aW9uLFxuICAgICAgYWN0aXZhdGVMb2NhdGlvbixcbiAgICAgIHJlbmRlcixcbiAgICAgIGh0bWxcbiAgICB9XG4gICAgaWYgKCFhY3RpdmVQYXJ0aWNpcGFudCkgcmV0dXJuIHRoaXMuYWN0aXZhdGVQYXJ0aWNpcGFudCh1bmRlZmluZWQsIG9wdGlvbnMpXG4gICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVQYXJ0aWNpcGFudChhY3RpdmVQYXJ0aWNpcGFudC51dWlkLCBvcHRpb25zKVxuICB9XG5cbiAgYXN5bmMgYWN0aXZhdGVQYXJ0aWNpcGFudCAoXG4gICAgcGFydGljaXBhbnRVdWlkLFxuICAgIHtcbiAgICAgIHNjcm9sbFRvTG9jYXRpb24gPSB0cnVlLFxuICAgICAgYWN0aXZhdGVMb2NhdGlvbiA9IHRydWUsXG4gICAgICByZW5kZXIgPSB0cnVlLFxuICAgICAgaHRtbCA9IG51bGxcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgY29uc3QgZGF0YVVwZGF0ZSA9IHRoaXMuZ2V0QWN0aXZhdGVQYXJ0aWNpcGFudFVwZGF0ZURhdGEocGFydGljaXBhbnRVdWlkLCB7XG4gICAgICBzY3JvbGxUb0xvY2F0aW9uLFxuICAgICAgYWN0aXZlTG9jYXRpb246IGFjdGl2YXRlTG9jYXRpb24sXG4gICAgICBodG1sXG4gICAgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShkYXRhVXBkYXRlLCB7IHJlbmRlciB9KVxuICB9XG5cbiAgZ2V0QWN0aXZhdGVQYXJ0aWNpcGFudFVwZGF0ZURhdGEgKFxuICAgIHBhcnRpY2lwYW50VXVpZCxcbiAgICB7IHNjcm9sbFRvTG9jYXRpb24gPSB0cnVlLCBhY3RpdmF0ZUxvY2F0aW9uID0gdHJ1ZSwgaHRtbCA9IG51bGwgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IHBVdWlkID0gcGFydGljaXBhbnRVdWlkXG4gICAgLy8gICA/IHBhcnRpY2lwYW50VXVpZFxuICAgIC8vICAgOiB0aGlzLnBhcnRpY2lwYW50c0J5SW5pdGlhdGl2ZVswXT8udXVpZFxuICAgIGNvbnN0IHBhcnRpY2lwYW50c0RhdGFVcGRhdGUgPSB7fVxuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICA6IFtdXG4gICAgcGFydGljaXBhbnRzLmZvckVhY2gocCA9PiB7XG4gICAgICBkZWxldGUgcC5hY3RpdmVcbiAgICAgIGlmIChwVXVpZCAmJiBwVXVpZCA9PT0gcC51dWlkKSBwLmFjdGl2ZSA9IHRydWVcbiAgICB9KVxuICAgIHBhcnRpY2lwYW50c0RhdGFVcGRhdGVbJ3N5c3RlbS5wYXJ0aWNpcGFudHMnXSA9IHBhcnRpY2lwYW50c1xuXG4gICAgY29uc3QgcGFydGljaXBhbnRMb2NhdGlvbiA9IHRoaXMuZ2V0UGFydGljaXBhbnRMb2NhdGlvbihwVXVpZClcbiAgICBsZXQgbG9jYXRpb25zRGF0YVVwZGF0ZSA9IG51bGxcbiAgICBpZiAocGFydGljaXBhbnRMb2NhdGlvbikge1xuICAgICAgaWYgKGFjdGl2YXRlTG9jYXRpb24pIHtcbiAgICAgICAgbG9jYXRpb25zRGF0YVVwZGF0ZSA9IHRoaXMuZ2V0QWN0aXZhdGVMb2NhdGlvblVwZGF0ZURhdGEoXG4gICAgICAgICAgcGFydGljaXBhbnRMb2NhdGlvbi51dWlkLFxuICAgICAgICAgIHsgc2Nyb2xsVG9Mb2NhdGlvbiwgaHRtbCB9XG4gICAgICAgIClcbiAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsVG9Mb2NhdGlvbikge1xuICAgICAgICBsb2NhdGlvbnNEYXRhVXBkYXRlID0ge31cbiAgICAgICAgbG9jYXRpb25zRGF0YVVwZGF0ZVsnc3lzdGVtLnNjcm9sbC5jaGFzZVRyYWNrLmZyb20nXSA9XG4gICAgICAgICAgdGhpcy5jaGFzZVRyYWNrQ3VycmVudFNjcm9sbFBvc2l0aW9uXG4gICAgICAgIGxvY2F0aW9uc0RhdGFVcGRhdGVbJ3N5c3RlbS5zY3JvbGwuY2hhc2VUcmFjay50byddID1cbiAgICAgICAgICB0aGlzLmdldENoYXNlVHJhY2tMb2NhdGlvblNjcm9sbFBvc2l0aW9uKHBhcnRpY2lwYW50TG9jYXRpb24udXVpZCwge1xuICAgICAgICAgICAgaHRtbFxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uc0RhdGFVcGRhdGUgPSB0aGlzLmdldEFjdGl2YXRlTG9jYXRpb25VcGRhdGVEYXRhKHVuZGVmaW5lZCwge1xuICAgICAgICBzY3JvbGxUb0xvY2F0aW9uXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbnNEYXRhVXBkYXRlKSB7XG4gICAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChcbiAgICAgICAgcGFydGljaXBhbnRzRGF0YVVwZGF0ZSxcbiAgICAgICAgbG9jYXRpb25zRGF0YVVwZGF0ZVxuICAgICAgKVxuICAgIH0gZWxzZSByZXR1cm4gcGFydGljaXBhbnRzRGF0YVVwZGF0ZVxuICB9XG5cbiAgYWN0aXZlUGFydGljaXBhbnRPYnN0YWNsZUNoZWNrIChcbiAgICBsb2NhdGlvblV1aWQsXG4gICAgeyBtb3ZlUGFydGljaXBhbnQgPSB0cnVlIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBjYXJkID0gbmV3IENoYXNlT2JzdGFjbGVDYXJkKHtcbiAgICAgIGNoYXNlVXVpZDogdGhpcy51dWlkLFxuICAgICAgbG9jYXRpb25VdWlkLFxuICAgICAgbW92ZVBhcnRpY2lwYW50LFxuICAgICAgZm9yd2FyZDogbG9jYXRpb25VdWlkICE9PSB0aGlzLmFjdGl2ZUxvY2F0aW9uLnV1aWRcbiAgICB9KVxuICAgIGNhcmQudG9NZXNzYWdlKClcblxuICAgIC8vIGNvbnN0IHRlc3QgPSBuZXcgdGVzdENhcmQoKVxuICAgIC8vIHRlc3QuaW5pdGlhbGl6ZSh7fSlcbiAgICAvLyB0ZXN0LnRvTWVzc2FnZSgpXG4gIH1cblxuICAvLyBIYW5kbGUgcm91bmRzXG5cbiAgYXN5bmMgcHJvZ3Jlc3NUb05leHRSb3VuZCAoeyByZW5kZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICA6IFtdXG4gICAgcGFydGljaXBhbnRzLmZvckVhY2gocCA9PiB7XG4gICAgICBpZiAocC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zIDwgcC5tb3ZlbWVudEFjdGlvbikge1xuICAgICAgICBwLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgKz0gcC5tb3ZlbWVudEFjdGlvblxuICAgICAgICBpZiAocC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID4gcC5tb3ZlbWVudEFjdGlvbikge1xuICAgICAgICAgIHAuY3VycmVudE1vdmVtZW50QWN0aW9ucyA9IHAubW92ZW1lbnRBY3Rpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgYXdhaXQgdGhpcy51cGRhdGVQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzLCB7IHJlbmRlcjogZmFsc2UgfSlcbiAgICB0aGlzLmFjdGl2YXRlTmV4dFBhcnRpY2lwYW50VHVybih7IHJlbmRlciB9KVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhc3luYyB1cGRhdGVSb2xsIChyb2xsU3RyaW5nKSB7XG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBjb25zdCByb2xsID0gQ29DN0NoZWNrLmZyb21Sb2xsU3RyaW5nKHJvbGxTdHJpbmcpXG4gICAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICAgIDogW11cbiAgICAgIGNvbnN0IGluZGV4ID0gcGFydGljaXBhbnRzLmZpbmRJbmRleChwID0+IHAucm9sbFV1aWQgPT09IHJvbGwudXVpZClcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHBhcnRpY2lwYW50c1tpbmRleF0uc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZyA9IHJvbGwuSlNPTlJvbGxTdHJpbmdcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLnBhcnRpY2lwYW50cyc6IHBhcnRpY2lwYW50cyB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBkYXRhOiByb2xsU3RyaW5nLFxuICAgICAgICB0eXBlOiAnaW52b2tlJyxcbiAgICAgICAgbWV0aG9kOiAndXBkYXRlUm9sbCcsXG4gICAgICAgIGl0ZW06IHRoaXMudXVpZFxuICAgICAgfVxuICAgICAgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCBkYXRhKVxuICAgIH1cbiAgfVxuXG4gIC8vIGhhbmRsZSBsb2NhdGlvbnNcbiAgZ2V0IGxvY2F0aW9ucyAoKSB7XG4gICAgY29uc3QgbG9jYXRpb25zID0gdGhpcy5zdGFydGVkXG4gICAgICA/IHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0XG4gICAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgICAgIDogW11cbiAgICAgIDogdGhpcy5pbml0VHJhY2tcbiAgICB0aGlzLnByb2Nlc3NMb2NhdGlvbnMobG9jYXRpb25zKVxuICAgIHJldHVybiBsb2NhdGlvbnNcbiAgfVxuXG4gIGdldExvY2F0aW9uRGF0YSAobG9jYXRpb25VdWlkLCB7IGR1cGxpY2F0ZURhdGEgPSB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGR1cGxpY2F0ZURhdGFcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5sb2NhdGlvbnMpXG4gICAgICA6IHRoaXMubG9jYXRpb25zXG4gICAgcmV0dXJuIGxvY2F0aW9ucy5maW5kKGwgPT4gbG9jYXRpb25VdWlkID09PSBsLnV1aWQpXG4gIH1cblxuICBwcm9jZXNzTG9jYXRpb25zIChsb2NhdGlvbnMpIHtcbiAgICBpZiAoIWxvY2F0aW9ucz8ubGVuZ3RoKSByZXR1cm5cbiAgICBsb2NhdGlvbnNbMF0uZmlyc3QgPSB0cnVlXG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbG9jYXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgY2xhc3NlcyA9IFtdXG4gICAgICBjb25zdCBsb2NhdGlvbiA9IGxvY2F0aW9uc1tpbmRleF1cbiAgICAgIGlmICghbG9jYXRpb24ubmFtZSkgY2xhc3Nlcy5wdXNoKCdlbXB0eScpXG4gICAgICBpZiAobG9jYXRpb24uYWN0aXZlKSBjbGFzc2VzLnB1c2goJ2FjdGl2ZScpXG4gICAgICBpZiAobG9jYXRpb24uaW5pdCAmJiAhdGhpcy5zdGFydGVkKSBjbGFzc2VzLnB1c2goJ2luaXQnKVxuICAgICAgbG9jYXRpb24uY3NzQ2xhc3NlcyA9IGNsYXNzZXMuam9pbignICcpXG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9ucy5sZW5ndGggPiAxKSBsb2NhdGlvbnNbbG9jYXRpb25zLmxlbmd0aCAtIDFdLmxhc3QgPSB0cnVlXG5cbiAgICBsb2NhdGlvbnMuZm9yRWFjaChsID0+IHtcbiAgICAgIGlmIChsLnBhcnRpY2lwYW50cyAmJiBsLnBhcnRpY2lwYW50cy5sZW5ndGgpIHtcbiAgICAgICAgbC5wYXJ0aWNpcGFudHMgPSBsLnBhcnRpY2lwYW50cy5maWx0ZXIocCA9PiAhKHAgPT09IG51bGwpKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGwucGFydGljaXBhbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgZWxlbSA9IGwucGFydGljaXBhbnRzW2ldIC8vIEluaXQgdHJhY2sgPSBvbmx5IHV1aWQsIHVwZGF0ZSBsb2NhdGlvbiBsaXN0IGNoYW5nZSBmb3IgdXVpZFxuXG4gICAgICAgICAgLy8gdWkubm90aWZpY2F0aW9ucy5lcnJvcihgVHlwZSA6ICR7dHlwZW9mIGVsZW19YClcbiAgICAgICAgICBsZXQgcFxuICAgICAgICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gJ3N0cmluZycgfHwgZWxlbSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICAgICAgcCA9IHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cy5maW5kKHAgPT4gZWxlbSA9PT0gcC51dWlkKSAvLyBSZXRyaWV2ZSBwYXJ0aWNpcGFudCBkYXRhIGZyb20gbGlzdC5cbiAgICAgICAgICB9IGVsc2UgaWYgKGVsZW0/LmNvbnN0cnVjdG9yPy5uYW1lID09PSAnX3BhcnRpY2lwYW50Jykge1xuICAgICAgICAgICAgcCA9IHVuZGVmaW5lZCAvLyBwYXJ0aWNpcGFudCBpcyBhbHJlYWR5IHByb2Nlc3NlZC5cbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlBhcnRpY2lwYW50QWxyZWFkeVByb2Nlc3NlZCcpXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSBlbHNlIHAgPSB1bmRlZmluZWRcblxuICAgICAgICAgIGlmICh0eXBlb2YgcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGwucGFydGljaXBhbnRzW2ldID0gbmV3IF9wYXJ0aWNpcGFudChwKSAvLyByZXBsYWNlIHV1aWQgd2l0aCBfcGFydGljaXBhbnRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFydGljaXBhbnRzLnB1c2goIG51bGwpXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAnVW5kZWZpbmVkIHBhdGljaXBhbnQgd2hpbGUgcHJvY2Vzc2luZyBwYXJ0aWNpcGFudHMgYXJyYXknXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGwucGFydGljaXBhbnRzLnNvcnQoc29ydEJ5Um9sZUFuZERleCkgLy8gVE9ETyA6IHRlc3QgaWYgc29ydGluZyB3b3Jrc1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBnZXQgaW5pdFRyYWNrICgpIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QgfHxcbiAgICAgIHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0Lmxlbmd0aCA9PT0gMFxuICAgICkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGNvbnN0IGxvY2F0aW9ucyA9IFtdIC8vICEhISEhISEgbG9jYXRpb25zIHZzIGluaXQgbG9jYXRpb25zICEhIVxuXG4gICAgY29uc3QgaW5pdCA9IHRoaXMuc3RhcnRpbmdMaW5lXG4gICAgbGV0IGxvY2F0aW9uc0luZGV4U3RhcnQsIGluaXRJbmRleFN0YXJ0LCBsb2NhdGlvbnNMZW5ndGhcbiAgICBpZiAoaW5pdC5sZW5ndGggPD0gMCkgbG9jYXRpb25zSW5kZXhTdGFydCA9IDBcbiAgICBlbHNlIGlmICh0aGlzLnN5c3RlbS5zdGFydGluZ0luZGV4ID49IGluaXQubGVuZ3RoKSB7XG4gICAgICBsb2NhdGlvbnNJbmRleFN0YXJ0ID0gMFxuICAgIH0gZWxzZSBsb2NhdGlvbnNJbmRleFN0YXJ0ID0gaW5pdC5sZW5ndGggLSB0aGlzLnN5c3RlbS5zdGFydGluZ0luZGV4XG5cbiAgICBpZiAodGhpcy5zeXN0ZW0uc3RhcnRpbmdJbmRleCA8PSAwKSBpbml0SW5kZXhTdGFydCA9IDBcbiAgICBlbHNlIGlmICh0aGlzLnN5c3RlbS5zdGFydGluZ0luZGV4IDw9IGluaXQubGVuZ3RoKSBpbml0SW5kZXhTdGFydCA9IDBcbiAgICBlbHNlIGluaXRJbmRleFN0YXJ0ID0gdGhpcy5zeXN0ZW0uc3RhcnRpbmdJbmRleCAtIGluaXQubGVuZ3RoXG5cbiAgICBpZiAobG9jYXRpb25zSW5kZXhTdGFydCA9PT0gMCkge1xuICAgICAgbG9jYXRpb25zTGVuZ3RoID0gdGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QubGVuZ3RoXG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uc0xlbmd0aCA9XG4gICAgICAgIHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0Lmxlbmd0aCArIGxvY2F0aW9uc0luZGV4U3RhcnRcbiAgICB9XG5cbiAgICBpZiAoaW5pdC5sZW5ndGggIT09IDApIHtcbiAgICAgIGlmICh0aGlzLnN5c3RlbS5zdGFydGluZ0luZGV4IDwgMCkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgICAgaW5kZXggPCBNYXRoLmFicyh0aGlzLnN5c3RlbS5zdGFydGluZ0luZGV4KTtcbiAgICAgICAgICBpbmRleCsrXG4gICAgICAgICkge1xuICAgICAgICAgIGluaXQucHVzaCh7XG4gICAgICAgICAgICB1dWlkOiB0aGlzLmdlbmVyYXRlTmV3VXVpZCgpLFxuICAgICAgICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgICAgICAgIHBhcnRpY2lwYW50czogW11cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY2hhc2VMb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMpXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxvY2F0aW9uc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgbGV0IGxvY2F0aW9uID0ge31cbiAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IFtdXG4gICAgICBpZiAoXG4gICAgICAgIGluZGV4ID49IGxvY2F0aW9uc0luZGV4U3RhcnQgJiZcbiAgICAgICAgaW5kZXggLSBsb2NhdGlvbnNJbmRleFN0YXJ0IDwgY2hhc2VMb2NhdGlvbnMubGlzdC5sZW5ndGhcbiAgICAgICkge1xuICAgICAgICBsb2NhdGlvbiA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgICAgIGNoYXNlTG9jYXRpb25zLmxpc3RbaW5kZXggLSBsb2NhdGlvbnNJbmRleFN0YXJ0XVxuICAgICAgICApXG4gICAgICAgIGxvY2F0aW9uLmluaXQgPSBmYWxzZVxuICAgICAgICBsb2NhdGlvbi5wYXJ0aWNpcGFudHM/LmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgaWYgKHAgIT0gbnVsbCkgcGFydGljaXBhbnRzLnB1c2gocClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGlmIChpbmRleCA+PSBpbml0SW5kZXhTdGFydCAmJiBpbmRleCAtIGluaXRJbmRleFN0YXJ0IDwgaW5pdC5sZW5ndGgpIHtcbiAgICAgICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChsb2NhdGlvbiwgaW5pdFtpbmRleCAtIGluaXRJbmRleFN0YXJ0XSwge1xuICAgICAgICAgIG92ZXJ3cml0ZTogZmFsc2VcbiAgICAgICAgfSlcblxuICAgICAgICBpbml0W2luZGV4IC0gaW5pdEluZGV4U3RhcnRdLnBhcnRpY2lwYW50cz8uZm9yRWFjaChwID0+IHtcbiAgICAgICAgICBpZiAocCAhPSBudWxsKSBwYXJ0aWNpcGFudHMucHVzaChwKVxuICAgICAgICB9KVxuXG4gICAgICAgIGxvY2F0aW9uLnBhcnRpY2lwYW50cyA9IHBhcnRpY2lwYW50c1xuICAgICAgfVxuICAgICAgbG9jYXRpb24uZmlyc3QgPSBmYWxzZVxuICAgICAgbG9jYXRpb24uZW5kID0gZmFsc2VcbiAgICAgIGxvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKVxuICAgIH1cblxuICAgIHJldHVybiBsb2NhdGlvbnNcbiAgfVxuXG4gIGdldCBzdGFydGluZ0xpbmUgKCkge1xuICAgIC8vIEdldCBwcmV5cyBhbmQgY2hlY2sgZm9yIGVzY2FwZWRcbiAgICBjb25zdCBwcmV5cyA9IHRoaXMuc3lzdGVtLmluY2x1ZGVFc2NhcGVkXG4gICAgICA/IHRoaXMucHJleXNcbiAgICAgIDogdGhpcy5wcmV5cz8uZmlsdGVyKHAgPT4gIXAuZGF0YS5lc2NhcGVkKVxuICAgIC8vIEdldCBjaGFzZXJzXG4gICAgY29uc3QgY2hhc2VycyA9IHRoaXMuc3lzdGVtLmluY2x1ZGVMYXRlY29tZXJzXG4gICAgICA/IHRoaXMuY2hhc2Vyc1xuICAgICAgOiB0aGlzLmNoYXNlcnM/LmZpbHRlcihjID0+ICFjLmRhdGEuZXhjbHVkZWQpXG5cbiAgICAvLyBSZWN1cnNpdml0eSAhISB3aXRoIGdldFBhcnRpY2lwYW50TG9jYXRpb24gYW5kIGdldCBwYXJ0aWNpcGFudHNcblxuICAgIC8vIElmIG5vIHByZXkgb3Igbm8gY2hhc3NlclxuICAgIC8vIGlmICgwID09IGNoYXNlcnMubGVuZ3RoKSB7XG4gICAgLy8gICB1aS5ub3RpZmljYXRpb25zLndhcm4oJ05vIGNoYXNlcnMnKVxuICAgIC8vICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIC8vIH1cbiAgICAvLyBpZiAoMCA9PSBwcmV5cy5sZW5ndGgpIHtcbiAgICAvLyAgIHVpLm5vdGlmaWNhdGlvbnMud2FybignTm8gcHJleXMnKVxuICAgIC8vICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIC8vIH1cblxuICAgIC8vIEJ1aWxkIHN0YXJ0aW5nIHRyYWNrXG4gICAgY29uc3QgY2hhc2VUcmFjayA9IFtdXG5cbiAgICBjb25zdCBjaGFzZXJzTWluTW92ID0gdGhpcy5maW5kTWluTW92KGNoYXNlcnMpXG4gICAgY29uc3QgY2hhc2Vyc01heE1vdiA9IHRoaXMuZmluZE1heE1vdihjaGFzZXJzKVxuICAgIGNvbnN0IHByZXlzTWluTW92ID0gdGhpcy5maW5kTWluTW92KHByZXlzKVxuICAgIGNvbnN0IHByZXlzTWF4TW92ID0gdGhpcy5maW5kTWF4TW92KHByZXlzKVxuXG4gICAgaWYgKGNoYXNlcnNNaW5Nb3YgIT09IC0xICYmIGNoYXNlcnNNYXhNb3YgIT09IC0xKSB7XG4gICAgICAvLyBBZGQgY2hhc2VycyB0byB0aGUgdHJhY2suXG4gICAgICBmb3IgKGxldCBtb3YgPSBjaGFzZXJzTWluTW92OyBtb3YgPD0gY2hhc2Vyc01heE1vdjsgbW92KyspIHtcbiAgICAgICAgLy8gRmluZCBhbGwgd2l0aCB0aGF0IG1vdlxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHtcbiAgICAgICAgICB1dWlkOiB0aGlzLmdlbmVyYXRlTmV3VXVpZCgpLFxuICAgICAgICAgIGluaXQ6IHRydWUsXG4gICAgICAgICAgcGFydGljaXBhbnRzOiBbXVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uUGFydGljaXBhbnRzTGlzdCA9IGNoYXNlcnNcbiAgICAgICAgICAuZmlsdGVyKHAgPT4gbW92ID09PSBwLmFkanVzdGVkTW92KVxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRleCAtIGIuZGV4KVxuICAgICAgICBsb2NhdGlvblBhcnRpY2lwYW50c0xpc3QuZm9yRWFjaChwID0+XG4gICAgICAgICAgbG9jYXRpb24ucGFydGljaXBhbnRzLnB1c2gocC51dWlkKVxuICAgICAgICApXG4gICAgICAgIGNoYXNlVHJhY2sucHVzaChsb2NhdGlvbilcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHNwYWNlIGJldHdlZW4gY2hhc2VycyBhbmQgcHJleXMuXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zeXN0ZW0uc3RhcnRpbmdSYW5nZTsgaW5kZXgrKykge1xuICAgICAgICBjaGFzZVRyYWNrLnB1c2goe1xuICAgICAgICAgIHV1aWQ6IHRoaXMuZ2VuZXJhdGVOZXdVdWlkKCksXG4gICAgICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgICAgICBwYXJ0aWNpcGFudHM6IFtdXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXlzTWluTW92ICE9PSAtMSAmJiBwcmV5c01heE1vdiAhPT0gLTEpIHtcbiAgICAgIC8vIEFkZCBwcmV5cyB0byB0aGUgdHJhY2suXG4gICAgICBmb3IgKGxldCBtb3YgPSBwcmV5c01pbk1vdjsgbW92IDw9IHByZXlzTWF4TW92OyBtb3YrKykge1xuICAgICAgICAvLyBGaW5kIGFsbCB3aXRoIHRoYXQgbW92XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0ge1xuICAgICAgICAgIHV1aWQ6IHRoaXMuZ2VuZXJhdGVOZXdVdWlkKCksXG4gICAgICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgICAgICBwYXJ0aWNpcGFudHM6IFtdXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9jYXRpb25QYXJ0aWNpcGFudHNMaXN0ID0gcHJleXNcbiAgICAgICAgICAuZmlsdGVyKHAgPT4gbW92ID09PSBwLmFkanVzdGVkTW92KVxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRleCAtIGIuZGV4KVxuICAgICAgICBsb2NhdGlvblBhcnRpY2lwYW50c0xpc3QuZm9yRWFjaChwID0+XG4gICAgICAgICAgbG9jYXRpb24ucGFydGljaXBhbnRzLnB1c2gocC51dWlkKVxuICAgICAgICApXG4gICAgICAgIGNoYXNlVHJhY2sucHVzaChsb2NhdGlvbilcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hhc2VUcmFja1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlTG9jYXRpb25zTGlzdCAobGlzdCwgeyByZW5kZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIC8vIFJlbW92ZSBhbGwgdW5uZWNlc3NhcnkgaXRlbXMgKGNzc0NsYXNzLCApXG4gICAgY29uc3QgdXBkYXRlZExpc3QgPSB0aGlzLmNsZWFuTG9jYXRpb25zTGlzdChsaXN0KVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKFxuICAgICAgeyAnc3lzdGVtLmxvY2F0aW9ucy5saXN0JzogdXBkYXRlZExpc3QgfSxcbiAgICAgIHsgcmVuZGVyIH1cbiAgICApXG4gIH1cblxuICBhc3luYyB1cGRhdGVMb2NhdGlvbiAobG9jYXRpb25VdWlkLCB1cGRhdGVEYXRhLCB7IHJlbmRlciA9IHRydWUgfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jYXRpb25zID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgY29uc3QgdXBkYXRlID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodXBkYXRlRGF0YSlcbiAgICBjb25zdCBsb2NhdGlvbkluZGV4ID0gbG9jYXRpb25zLmZpbmRJbmRleChsID0+IGxvY2F0aW9uVXVpZCA9PT0gbC51dWlkKVxuICAgIGlmIChsb2NhdGlvbkluZGV4ID09PSAtMSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICh1cGRhdGUudXVpZCkgZGVsZXRlIHVwZGF0ZS51dWlkXG4gICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0sIHVwZGF0ZSwge1xuICAgICAgb3ZlcndyaXRlOiB0cnVlXG4gICAgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zLCB7IHJlbmRlciB9KVxuICB9XG5cbiAgY2xlYW5Mb2NhdGlvbnNMaXN0IChsaXN0KSB7XG4gICAgY29uc3QgdXBkYXRlZExpc3QgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShsaXN0KVxuICAgIGNvbnN0IHBhcnRpcGFudHNVdWlkQXJyYXkgPSB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMubWFwKHAgPT4gcC51dWlkKVxuXG4gICAgdXBkYXRlZExpc3QuZm9yRWFjaChsID0+IHtcbiAgICAgIC8vIGRlbGV0ZSBsLmFjdGl2ZVxuICAgICAgZGVsZXRlIGwuY3NzQ2xhc3Nlc1xuICAgICAgZGVsZXRlIGwuZmlyc3RcbiAgICAgIGRlbGV0ZSBsLmxhc3RcbiAgICAgIGRlbGV0ZSBsLmVuZFxuICAgICAgaWYgKGwucGFydGljaXBhbnRzICYmIGwucGFydGljaXBhbnRzLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGwucGFydGljaXBhbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbC5wYXJ0aWNpcGFudHMgPSBsLnBhcnRpY2lwYW50cy5maWx0ZXIocCA9PiAhKHAgPT09IG51bGwpKSAvLyBSZW1vdmUgbnVsbCBlbGVtZW50c1xuICAgICAgICAgIC8vIFJlcGxhY2UgX1BhcnRpY2lwYW50cyBieSB1dWlkXG4gICAgICAgICAgaWYgKGwucGFydGljaXBhbnRzW2ldLmRhdGE/LnV1aWQpIHtcbiAgICAgICAgICAgIGwucGFydGljaXBhbnRzW2ldID0gbC5wYXJ0aWNpcGFudHNbaV0uZGF0YS51dWlkXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHVua293biBwYXJ0aWNpY3BhbnRzXG4gICAgICAgIGwucGFydGljaXBhbnRzID0gbC5wYXJ0aWNpcGFudHMuZmlsdGVyKHV1aWQgPT5cbiAgICAgICAgICBwYXJ0aXBhbnRzVXVpZEFycmF5LmluY2x1ZGVzKHV1aWQpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIHVwZGF0ZWRMaXN0XG4gIH1cblxuICBhc3luYyBpbnNlcnRMb2NhdGlvbiAoXG4gICAgaW5zZXJ0QXRVdWlkLFxuICAgIHsgc2hpZnQgPSAwLCBsb2NEYXRhID0ge30sIHJlbmRlciA9IHRydWUgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgIGxvY2F0aW9ucy5mb3JFYWNoKGwgPT4ge1xuICAgICAgZGVsZXRlIGwuYWN0aXZlXG4gICAgfSlcbiAgICBjb25zdCBsb2NhdGlvbkluZGV4ID0gbG9jYXRpb25zLmZpbmRJbmRleChsID0+IGluc2VydEF0VXVpZCA9PT0gbC51dWlkKVxuICAgIGlmIChsb2NhdGlvbkluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGNvbnN0IG5ld0xvY2F0aW9uSW5kZXggPSBsb2NhdGlvbkluZGV4ICsgc2hpZnRcbiAgICBpZiAobmV3TG9jYXRpb25JbmRleCA+IGxvY2F0aW9ucy5sZW5ndGgpIHJldHVybiBmYWxzZVxuICAgIGNvbnN0IG5ld0xvY2F0aW9uID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUobG9jRGF0YSlcbiAgICBuZXdMb2NhdGlvbi51dWlkID0gdGhpcy5nZW5lcmF0ZU5ld1V1aWQoKVxuICAgIG5ld0xvY2F0aW9uLmluaXQgPSBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0uaW5pdFxuICAgIG5ld0xvY2F0aW9uLmFjdGl2ZSA9IHRydWVcbiAgICBsb2NhdGlvbnMuc3BsaWNlKG5ld0xvY2F0aW9uSW5kZXgsIDAsIG5ld0xvY2F0aW9uKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zLCB7IHJlbmRlciB9KVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlTG9jYXRpb24gKHV1aWQsIHsgcmVuZGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICBjb25zdCBsb2NhdGlvbkluZGV4ID0gbG9jYXRpb25zLmZpbmRJbmRleChsID0+IHV1aWQgPT09IGwudXVpZClcbiAgICBsb2NhdGlvbnMuc3BsaWNlKGxvY2F0aW9uSW5kZXgsIDEpXG4gICAgbG9jYXRpb25zLmZvckVhY2gobCA9PiB7XG4gICAgICBkZWxldGUgbC5hY3RpdmVcbiAgICB9KVxuICAgIGlmIChsb2NhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IGluZGV4ID0gbG9jYXRpb25JbmRleCAtIDFcbiAgICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gMFxuICAgICAgbG9jYXRpb25zW2luZGV4XS5hY3RpdmUgPSB0cnVlXG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zLCB7IHJlbmRlciB9KVxuICB9XG5cbiAgYXN5bmMgYWN0aXZhdGVMb2NhdGlvbiAoXG4gICAgbG9jYXRpb25VdWlkLFxuICAgIHsgc2Nyb2xsVG9Mb2NhdGlvbiA9IHRydWUsIHJlbmRlciA9IHRydWUgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB0aGlzLmdldEFjdGl2YXRlTG9jYXRpb25VcGRhdGVEYXRhKGxvY2F0aW9uVXVpZCwge1xuICAgICAgc2Nyb2xsVG9Mb2NhdGlvblxuICAgIH0pXG4gICAgYXdhaXQgdGhpcy51cGRhdGUodXBkYXRlRGF0YSwgeyByZW5kZXIgfSlcbiAgfVxuXG4gIGdldENsZWFyQWN0aXZlTG9jYXRpb25VcGRhdGVEYXRhICh7XG4gICAgc2Nyb2xsVG9Mb2NhdGlvbiA9IHRydWUsXG4gICAgaHRtbCA9IG51bGxcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9XG4gICAgY29uc3QgbG9jYXRpb25zID0gdGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3RcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgICA6IFtdXG4gICAgbG9jYXRpb25zLmZvckVhY2gobCA9PiB7XG4gICAgICBkZWxldGUgbC5hY3RpdmVcbiAgICB9KVxuICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5sb2NhdGlvbnMubGlzdCddID0gdGhpcy5jbGVhbkxvY2F0aW9uc0xpc3QobG9jYXRpb25zKVxuXG4gICAgaWYgKHNjcm9sbFRvTG9jYXRpb24pIHtcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zY3JvbGwuY2hhc2VUcmFjay5mcm9tJ10gPSAwXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2Nyb2xsLmNoYXNlVHJhY2sudG8nXSA9IC0xXG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVEYXRhXG4gIH1cblxuICBnZXRBY3RpdmF0ZUxvY2F0aW9uVXBkYXRlRGF0YSAoXG4gICAgbG9jYXRpb25VdWlkLFxuICAgIHsgc2Nyb2xsVG9Mb2NhdGlvbiA9IHRydWUsIGh0bWwgPSBudWxsIH0gPSB7fVxuICApIHtcbiAgICBpZiAoIWxvY2F0aW9uVXVpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2xlYXJBY3RpdmVMb2NhdGlvblVwZGF0ZURhdGEoe1xuICAgICAgICBzY3JvbGxUb0xvY2F0aW9uXG4gICAgICB9KVxuICAgIH1cbiAgICBjb25zdCB1cGRhdGVEYXRhID0ge31cbiAgICBjb25zdCBsb2NhdGlvbnMgPSB0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdFxuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICAgIDogW11cbiAgICBsb2NhdGlvbnMuZm9yRWFjaChsID0+IHtcbiAgICAgIGRlbGV0ZSBsLmFjdGl2ZVxuICAgICAgaWYgKGxvY2F0aW9uVXVpZCA9PT0gbC51dWlkKSBsLmFjdGl2ZSA9IHRydWVcbiAgICB9KVxuICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5sb2NhdGlvbnMubGlzdCddID0gdGhpcy5jbGVhbkxvY2F0aW9uc0xpc3QobG9jYXRpb25zKVxuICAgIC8vIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMsIHsgcmVuZGVyOiBmYWxzZSB9KVxuICAgIGlmIChzY3JvbGxUb0xvY2F0aW9uKSB7XG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2Nyb2xsLmNoYXNlVHJhY2suZnJvbSddID1cbiAgICAgICAgdGhpcy5jaGFzZVRyYWNrQ3VycmVudFNjcm9sbFBvc2l0aW9uXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2Nyb2xsLmNoYXNlVHJhY2sudG8nXSA9XG4gICAgICAgIHRoaXMuZ2V0Q2hhc2VUcmFja0xvY2F0aW9uU2Nyb2xsUG9zaXRpb24obG9jYXRpb25VdWlkLCB7IGh0bWwgfSlcbiAgICAgIC8vIGF3YWl0IHRoaXMuc2V0Y2hhc2VUcmFja1Njcm9sbCh7XG4gICAgICAvLyAgIGZyb206IHRoaXMuY2hhc2VUcmFja0N1cnJlbnRTY3JvbGxQb3NpdGlvbixcbiAgICAgIC8vICAgdG86IHRoaXMuY2hhc2VUcmFja0FjdGl2ZUxvY2F0aW9uU2Nyb2xsUG9zaXRpb25cbiAgICAgIC8vIH0pXG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVEYXRhXG4gIH1cblxuICAvLyBMb2NhdGlvbnMgbmF2aWdhdGlvblxuICBnZXQgYWN0aXZlTG9jYXRpb24gKCkge1xuICAgIGlmICghdGhpcy5sb2NhdGlvbnMpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMubG9jYXRpb25zLmZpbmQobCA9PiBsLmFjdGl2ZSlcbiAgICBpZiAoIWxvY2F0aW9uKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKGxvY2F0aW9uLnBhcnRpY2lwYW50cz8ubGVuZ3RoKSBsb2NhdGlvbi5oYXNQYXJ0aWNpcGFudCA9IHRydWVcbiAgICBjb25zdCBhY3RvciA9IHRoaXMuYWN0aXZlQWN0b3JcbiAgICBpZiAoYWN0b3IpIHtcbiAgICAgIGNvbnN0IHRlc3QgPSBhY3Rvci5maW5kKGxvY2F0aW9uLm9ic3RhY2xlRGV0YWlscz8uY2hlY2tOYW1lKVxuICAgICAgaWYgKHRlc3QpIHtcbiAgICAgICAgbG9jYXRpb24uYWN0aXZlQWN0b3JIYXNTa2lsbCA9IHRydWVcbiAgICAgICAgbG9jYXRpb24uYWN0aXZlQWN0b3JUZXN0ID0gdGVzdFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYXRpb25cbiAgfVxuXG4gIGdldCBwcmV2aW91c0xvY2F0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMubG9jYXRpb25zKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLmxvY2F0aW9ucy5maW5kSW5kZXgobCA9PiBsLmFjdGl2ZSlcbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IC0xKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09PSAwKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uc1thY3RpdmVJbmRleCAtIDFdXG4gICAgY29uc3QgYWN0b3IgPSB0aGlzLmFjdGl2ZUFjdG9yXG4gICAgaWYgKGFjdG9yKSB7XG4gICAgICBjb25zdCB0ZXN0ID0gYWN0b3IuZmluZChsb2NhdGlvbi5vYnN0YWNsZURldGFpbHM/LmNoZWNrTmFtZSlcbiAgICAgIGlmICh0ZXN0KSB7XG4gICAgICAgIGxvY2F0aW9uLmFjdGl2ZUFjdG9ySGFzU2tpbGwgPSB0cnVlXG4gICAgICAgIGxvY2F0aW9uLmFjdGl2ZUFjdG9yVGVzdCA9IHRlc3RcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvY2F0aW9uXG4gIH1cblxuICBnZXQgbmV4dExvY2F0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMubG9jYXRpb25zKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLmxvY2F0aW9ucy5maW5kSW5kZXgobCA9PiBsLmFjdGl2ZSlcbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IC0xKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09PSB0aGlzLmxvY2F0aW9ucy5sZW5ndGggLSAxKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uc1thY3RpdmVJbmRleCArIDFdXG4gICAgY29uc3QgYWN0b3IgPSB0aGlzLmFjdGl2ZUFjdG9yXG4gICAgaWYgKGFjdG9yKSB7XG4gICAgICBjb25zdCB0ZXN0ID0gYWN0b3IuZmluZChsb2NhdGlvbi5vYnN0YWNsZURldGFpbHM/LmNoZWNrTmFtZSlcbiAgICAgIGlmICh0ZXN0KSB7XG4gICAgICAgIGxvY2F0aW9uLmFjdGl2ZUFjdG9ySGFzU2tpbGwgPSB0cnVlXG4gICAgICAgIGxvY2F0aW9uLmFjdGl2ZUFjdG9yVGVzdCA9IHRlc3RcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvY2F0aW9uXG4gIH1cblxuICBhc3luYyBsb2NhdG9yRHJvcHBlZCAoZGF0YSkge1xuICAgIGF3YWl0IHRoaXMuc2V0TG9jYXRpb25Db29yZGluYXRlcyhcbiAgICAgIGRhdGEubG9jYXRpb25VdWlkLFxuICAgICAgZGF0YS54LFxuICAgICAgZGF0YS55LFxuICAgICAgZGF0YS5zY2VuZVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIHNldExvY2F0aW9uQ29vcmRpbmF0ZXMgKFxuICAgIGxvY2F0aW9uVXVpZCxcbiAgICB4LFxuICAgIHksXG4gICAgc2NlbmVJZCxcbiAgICB7IHJlbmRlciA9IHRydWUgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgIGNvbnN0IGxvY2F0aW9uSW5kZXggPSBsb2NhdGlvbnMuZmluZEluZGV4KGwgPT4gbG9jYXRpb25VdWlkID09PSBsLnV1aWQpXG4gICAgbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLmNvb3JkaW5hdGVzID0geyB4LCB5LCBzY2VuZTogc2NlbmVJZCB9XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9ucywgeyByZW5kZXIgfSlcbiAgfVxuXG4gIGFzeW5jIGNsZWFyQWN0aXZlTG9jYXRpb25Db29yZGluYXRlcyAoeyByZW5kZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLmFjdGl2ZUxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGVhckxvY2F0aW9uQ29vcmRpbmF0ZXModGhpcy5hY3RpdmVMb2NhdGlvbi51dWlkLCB7XG4gICAgICAgIHJlbmRlclxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBjbGVhckxvY2F0aW9uQ29vcmRpbmF0ZXMgKGxvY2F0aW9uVXVpZCwgeyByZW5kZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgIGNvbnN0IGxvY2F0aW9uSW5kZXggPSBsb2NhdGlvbnMuZmluZEluZGV4KGwgPT4gbG9jYXRpb25VdWlkID09PSBsLnV1aWQpXG4gICAgZGVsZXRlIGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5jb29yZGluYXRlc1xuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMsIHsgcmVuZGVyIH0pXG4gIH1cblxuICAvLyBnZXQgYWN0aXZlUGFydGljaXBhbnRIYXZlQWN0aXZlTG9jYXRpb25Ta2lsbCAoKXtcbiAgLy8gICBpZiggIXRoaXMuYWN0aXZlQWN0b3IpIHJldHVybiBmYWxzZVxuICAvLyAgIGlmKCB0aGlzLmFjdGl2ZUFjdG9yLmZpbmQoIHRoaXMuYWN0aXZlTG9jYXRpb24ub2JzdGFjbGVEZXRhaWxzPy5jaGVja05hbWUpKSByZXR1cm4gdHJ1ZVxuICAvLyAgIHJldHVybiBmYWxzZVxuICAvLyB9XG5cbiAgLy8gSGFuZGxlIG1lY2hhbmljc1xuICBhc3luYyBjdXRUb1RoZUNoYXNlICgpIHtcbiAgICBpZiAoIXRoaXMuYWxsSGF2ZVNwZWVkUm9sbCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob3RBbGxIYXZlU3BlZWRSb2xsJykpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHRoaXMuYWN0dWFsUGFydGljaXBhbnRzPy5sZW5ndGggPCAyKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5lZWRNaW4yUGFydGljaXBhbnRzJykpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHRoaXMuYWxsSGF2ZVZhbGlkTW92KSB7XG4gICAgICAvLyBUT0RPIDogQ2hlY2sgZm9yIHNwZWVkIHJvbGwgPz9cblxuICAgICAgLy8gQ2FsY3VsYXRlIG1vdmVtZW50IGFjdGlvbnNcbiAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMucGFydGljaXBhbnRzXG4gICAgICBjb25zdCBtaW5Nb3YgPSB0aGlzLmZpbmRNaW5Nb3YodGhpcy5hY3R1YWxQYXJ0aWNpcGFudHMpXG4gICAgICBwYXJ0aWNpcGFudHMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgLy8gcC5kYXRhLm1vdmVtZW50QWN0aW9uID0gMSArIChwLmFkanVzdGVkTW92IC0gbWluTW92KVxuICAgICAgICBwLmNhbGN1bGF0ZU1vdmVtZW50QWN0aW9ucyhtaW5Nb3YpXG4gICAgICAgIHAuY3VycmVudE1vdmVtZW50QWN0aW9ucyA9IHAubW92ZW1lbnRBY3Rpb25cbiAgICAgICAgcC5ib251c0RpY2UgPSAwXG4gICAgICB9KVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGVQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzLCB7IHJlbmRlcjogZmFsc2UgfSlcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdCh0aGlzLmxvY2F0aW9ucywgeyByZW5kZXI6IGZhbHNlIH0pXG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0KClcbiAgICB9XG4gIH1cblxuICBhc3luYyByZXN0YXJ0ICgpIHtcbiAgICAvLyBhd2FpdCB0aGlzLmNsZWFuTG9jYXRpb25zKCkgLy9UcmFuc2ZlcnJlZCBpbiB1cGRhdGVMb2NhdGlvbkxpc3RcbiAgICBjb25zdCBsb2NhdGlvbnMgPSB0aGlzLmxvY2F0aW9ucy5maWx0ZXIobCA9PiAhbC5pbml0KVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobG9jYXRpb25zW2ldLnBhcnRpY2lwYW50cykgbG9jYXRpb25zW2ldLnBhcnRpY2lwYW50cyA9IFtdXG4gICAgICBpZiAobG9jYXRpb25zW2ldLmFjdGl2ZSkgZGVsZXRlIGxvY2F0aW9uc1tpXS5hY3RpdmVcbiAgICB9XG4gICAgY29uc3QgcGFydGljaXBhbnRzRGF0YSA9IHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICA6IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWNpcGFudHNEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocGFydGljaXBhbnRzRGF0YVtpXS5hY3RpdmUpIGRlbGV0ZSBwYXJ0aWNpcGFudHNEYXRhW2ldLmFjdGl2ZVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLnNldGNoYXNlVHJhY2tTY3JvbGwoMCwgMCwgeyByZW5kZXI6IGZhbHNlIH0pXG4gICAgYXdhaXQgdGhpcy51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9ucywgeyByZW5kZXI6IGZhbHNlIH0pXG4gICAgYXdhaXQgdGhpcy51cGRhdGVQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzRGF0YSwgeyByZW5kZXI6IGZhbHNlIH0pXG4gICAgYXdhaXQgdGhpcy5zdG9wKClcbiAgfVxuXG4gIGdldExvY2F0aW9uU2hpZnQgKGxvY2F0aW9uVXVpZCwgeyBza2lwID0gMSB9ID0ge30pIHtcbiAgICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICBjb25zdCBvcmlnaW5JbmRleCA9IGxvY2F0aW9ucy5maW5kSW5kZXgobCA9PiBsb2NhdGlvblV1aWQgPT09IGwudXVpZClcbiAgICBjb25zdCBkZXN0aW5hdGlvbkluZGV4ID0gb3JpZ2luSW5kZXggKyBza2lwXG4gICAgaWYgKGxvY2F0aW9ucy5sZW5ndGggPT09IDApIHJldHVybiBudWxsXG4gICAgaWYgKGRlc3RpbmF0aW9uSW5kZXggPj0gbG9jYXRpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uc1tsb2NhdGlvbnMubGVuZ3RoIC0gMV1cbiAgICB9XG4gICAgaWYgKGRlc3RpbmF0aW9uSW5kZXggPCAwKSByZXR1cm4gbG9jYXRpb25zWzBdXG4gICAgcmV0dXJuIGxvY2F0aW9uc1tkZXN0aW5hdGlvbkluZGV4XSAvLyBFUlJPUiBNT1ZFIDIgRk9SIFNLSVAgKzFcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZVBhcnRpY2lwYW50IChwYXJ0aWNpcGFudFV1aWQsIHsgcmVuZGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBjb25zdCBwID0gdGhpcy5nZXRQYXJ0aWNpcGFudChwYXJ0aWNpcGFudFV1aWQpXG4gICAgYXdhaXQgRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZW1vdmVQYXJ0aWNpcGFudCcpLFxuICAgICAgY29udGVudDogYDxwPiR7Z2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZW1vdmVQYXJ0aWNpcGFudEhpbnQnLCB7XG4gICAgICAgIG5hbWU6IHAubmFtZVxuICAgICAgfSl9PC9wPmAsXG4gICAgICB5ZXM6IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcGFydGljaXBhbnRzRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgICAgIHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgICApXG4gICAgICAgIGNvbnN0IG5ld1BhcnRpY2lwYW50c0RhdGEgPSBwYXJ0aWNpcGFudHNEYXRhLmZpbHRlcihcbiAgICAgICAgICBwID0+IHBhcnRpY2lwYW50VXVpZCAhPT0gcC51dWlkXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgbG9jYXRpb25zRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgICAgIHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0XG4gICAgICAgIClcbiAgICAgICAgbG9jYXRpb25zRGF0YS5mb3JFYWNoKGwgPT4ge1xuICAgICAgICAgIGlmIChsLnBhcnRpY2lwYW50cyAmJiBsLnBhcnRpY2lwYW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGwucGFydGljaXBhbnRzID0gbC5wYXJ0aWNpcGFudHMuZmlsdGVyKFxuICAgICAgICAgICAgICB1dWlkID0+IHBhcnRpY2lwYW50VXVpZCAhPT0gdXVpZFxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQYXJ0aWNpcGFudHMobmV3UGFydGljaXBhbnRzRGF0YSwgeyByZW5kZXI6IGZhbHNlIH0pXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnNEYXRhLCB7IHJlbmRlciB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBhZGRQYXJ0aWNpcGFudCAoXG4gICAgcGFydGljaXBhbnQsXG4gICAge1xuICAgICAgcmVuZGVyID0gdHJ1ZSxcbiAgICAgIGxvY2F0aW9uVXVpZCA9IG51bGwsXG4gICAgICByZWNhbGN1bGF0ZU1vdmVtZW50QWN0aW9ucyA9IHRydWUsXG4gICAgICB1cGRhdGUgPSBmYWxzZVxuICAgIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cblxuICAgIGlmIChwYXJ0aWNpcGFudC5kYXRhLmNoYXNlVXVpZCkgZGVsZXRlIHBhcnRpY2lwYW50LmRhdGEuY2hhc2VVdWlkXG4gICAgaWYgKHBhcnRpY2lwYW50LmRhdGEubG9jYXRpb25VdWlkKSBkZWxldGUgcGFydGljaXBhbnQuZGF0YS5sb2NhdGlvblV1aWRcbiAgICBpZiAocGFydGljaXBhbnQuZGF0YS51cGRhdGUpIGRlbGV0ZSBwYXJ0aWNpcGFudC5kYXRhLnVwZGF0ZVxuXG4gICAgaWYgKCFwYXJ0aWNpcGFudC51dWlkKSB7XG4gICAgICBsZXQgdW5pcXVlID0gZmFsc2VcbiAgICAgIHdoaWxlICghdW5pcXVlKSB7XG4gICAgICAgIHBhcnRpY2lwYW50LmRhdGEudXVpZCA9IGZvdW5kcnkudXRpbHMucmFuZG9tSUQoMTYpXG4gICAgICAgIHVuaXF1ZSA9XG4gICAgICAgICAgcGFydGljaXBhbnRzRGF0YS5maWx0ZXIocCA9PiBwLnV1aWQgPT09IHBhcnRpY2lwYW50LnV1aWQpLmxlbmd0aCA9PT0gMFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1cGRhdGUpIHtcbiAgICAgIGlmIChwYXJ0aWNpcGFudC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID4gcGFydGljaXBhbnQubW92ZW1lbnRBY3Rpb24pIHtcbiAgICAgICAgcGFydGljaXBhbnQuY3VycmVudE1vdmVtZW50QWN0aW9ucyA9IHBhcnRpY2lwYW50Lm1vdmVtZW50QWN0aW9uXG4gICAgICB9XG4gICAgICBjb25zdCBpbmRleCA9IHBhcnRpY2lwYW50c0RhdGEuZmluZEluZGV4KHAgPT4gcC51dWlkID09PSBwYXJ0aWNpcGFudC51dWlkKVxuICAgICAgcGFydGljaXBhbnRzRGF0YVtpbmRleF0gPSBwYXJ0aWNpcGFudC5kYXRhXG4gICAgfSBlbHNlIHBhcnRpY2lwYW50c0RhdGEucHVzaChwYXJ0aWNpcGFudC5kYXRhKVxuXG4gICAgYXdhaXQgdGhpcy51cGRhdGVQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzRGF0YSwge1xuICAgICAgcmVuZGVyOiByZW5kZXIgJiYgIXRoaXMuc3RhcnRlZCAmJiAhdGhpcy5yZWNhbGN1bGF0ZU1vdmVtZW50QWN0aW9uc1xuICAgIH0pXG5cbiAgICBpZiAocmVjYWxjdWxhdGVNb3ZlbWVudEFjdGlvbnMpIHtcbiAgICAgIGNvbnN0IHNsb3dlc3QgPSB0aGlzLnNsb3dlc3RQYXJ0aWNpcGFudD8uYWRqdXN0ZWRNb3ZcbiAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMucGFydGljaXBhbnRzXG4gICAgICBwYXJ0aWNpcGFudHMuZm9yRWFjaChwID0+IHAuY2FsY3VsYXRlTW92ZW1lbnRBY3Rpb25zKHNsb3dlc3QpKVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGVQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyICYmICF0aGlzLnN0YXJ0ZWRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5zdGFydGVkICYmXG4gICAgICAhKHBhcnRpY2lwYW50LmRhdGEuZXNjYXBlZCB8fCBwYXJ0aWNpcGFudC5kYXRhLmV4Y2x1ZGVkKVxuICAgICkge1xuICAgICAgY29uc3QgbG9jYXRpb25zRGF0YSA9IHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0XG4gICAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgICAgIDogW11cblxuICAgICAgaWYgKGxvY2F0aW9uc0RhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVycm9yRW1wdHlMb2NhdGlvbnNMaXN0JylcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBsZXQgbG9jYXRpb25JbmRleCA9IGxvY2F0aW9uc0RhdGEuZmluZEluZGV4KGwgPT4gbG9jYXRpb25VdWlkID09PSBsLnV1aWQpXG4gICAgICBpZiAobG9jYXRpb25JbmRleCA9PT0gLTEpIGxvY2F0aW9uSW5kZXggPSAwXG4gICAgICBpZiAoIWxvY2F0aW9uc0RhdGFbbG9jYXRpb25JbmRleF0ucGFydGljaXBhbnRzKSB7XG4gICAgICAgIGxvY2F0aW9uc0RhdGFbbG9jYXRpb25JbmRleF0ucGFydGljaXBhbnRzID0gW11cbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgbG9jYXRpb25zRGF0YVtsb2NhdGlvbkluZGV4XS5wYXJ0aWNpcGFudHMuZmluZEluZGV4KFxuICAgICAgICAgIHAgPT4gcCA9PT0gcGFydGljaXBhbnQudXVpZFxuICAgICAgICApID09PSAtMVxuICAgICAgKSB7XG4gICAgICAgIGxvY2F0aW9uc0RhdGFbbG9jYXRpb25JbmRleF0ucGFydGljaXBhbnRzLnB1c2gocGFydGljaXBhbnQudXVpZClcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnNEYXRhLCB7IHJlbmRlciB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGVkaXRQYXJ0aWNpcGFudCAoXG4gICAgcGFydGljaXBhbnRVdWlkLFxuICAgIHtcbiAgICAgIHVzZU1vdmVtZW50QWN0aW9ucyA9IHRydWUsXG4gICAgICBzY3JvbGxUb0xvY2F0aW9uID0gdHJ1ZSxcbiAgICAgIGFjdGl2YXRlTG9jYXRpb24gPSB0cnVlLFxuICAgICAgYWN0aXZhdGVQYXJ0aWNpcGFudCA9IHRydWUsXG4gICAgICByZW5kZXIgPSB0cnVlXG4gICAgfSA9IHt9XG4gICkge31cblxuICAvKipcbiAgICogTW92ZSBhIHBhcnRpY2lwYW50IGZvciBhIG51bWJlciBvZiBsb2NhdGlvbnMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHBhcnRpY2lwYW50VXVpZCAgICAgVXVpZCBvZiBwYXJ0aWNpcGFudFxuICAgKiBAcGFyYW0geyp9IGxvY2F0aW9uTW92ZWQgICAgICAgICAgICAgICAgIE51bWJlciBvZiBsb2NhdGlvbnMgbW92cmVkXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICAgVG90YWwgbnVtYmVyIG9mIGxvY2F0aW9ucyBjcm9zc2VkXG4gICAqL1xuICBhc3luYyBtb3ZlUGFydGljaXBhbnQgKFxuICAgIHBhcnRpY2lwYW50VXVpZCxcbiAgICBsb2NhdGlvbk1vdmVkLFxuICAgIHtcbiAgICAgIHVzZU1vdmVtZW50QWN0aW9ucyA9IHRydWUsXG4gICAgICBzY3JvbGxUb0xvY2F0aW9uID0gdHJ1ZSxcbiAgICAgIGFjdGl2YXRlTG9jYXRpb24gPSB0cnVlLFxuICAgICAgYWN0aXZhdGVQYXJ0aWNpcGFudCA9IHRydWUsXG4gICAgICByZW5kZXIgPSB0cnVlXG4gICAgfSA9IHt9XG4gICkge1xuICAgIC8vIGNvbnN0IHNlbGVjdG9yID0gYCNpdGVtLSR7dGhpcy5pZH0gLmNoYXNlLXRyYWNrYFxuICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggYG1vdmVQYXJ0aWNpcGFudCA6IEpxdWVyeSByb290OiAkeyQoJzpyb290JykuZmluZChzZWxlY3Rvcikuc2Nyb2xsTGVmdCgpfWApXG4gICAgbGV0IG1vZGlmaWVkID0gZmFsc2VcbiAgICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICBjb25zdCBvcmlnaW5JbmRleCA9IGxvY2F0aW9ucy5maW5kSW5kZXgobCA9PlxuICAgICAgbC5wYXJ0aWNpcGFudHM/LmluY2x1ZGVzKHBhcnRpY2lwYW50VXVpZClcbiAgICApXG4gICAgbGV0IGRlc3RpbmF0aW9uSW5kZXggPSBvcmlnaW5JbmRleCArIGxvY2F0aW9uTW92ZWRcbiAgICBpZiAoZGVzdGluYXRpb25JbmRleCA+IGxvY2F0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICBkZXN0aW5hdGlvbkluZGV4ID0gbG9jYXRpb25zLmxlbmd0aCAtIDFcbiAgICB9XG5cbiAgICBpZiAoZGVzdGluYXRpb25JbmRleCA8IDApIHtcbiAgICAgIGRlc3RpbmF0aW9uSW5kZXggPSAwXG4gICAgfVxuXG4gICAgY29uc3QgdG90YWxNb3ZlID0gZGVzdGluYXRpb25JbmRleCAtIG9yaWdpbkluZGV4XG4gICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLmdldFBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZClcbiAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICApXG4gICAgY29uc3QgcGFydGljaXBhbnRJbmRleCA9IHBhcnRpY2lwYW50c0RhdGEuZmluZEluZGV4KFxuICAgICAgcCA9PiBwYXJ0aWNpcGFudFV1aWQgPT09IHAudXVpZFxuICAgIClcblxuICAgIGlmICh1c2VNb3ZlbWVudEFjdGlvbnMpIHtcbiAgICAgIGlmICghcGFydGljaXBhbnQpIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlBhcnRpY2lwYW50VXVpZE5vdEZvdW5kJywge1xuICAgICAgICAgICAgcGFydGljaXBhbnRVdWlkOiB0aGlzLnBhcnRpY2lwYW50VXVpZFxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuICAgICAgaWYgKHBhcnRpY2lwYW50LmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPCBNYXRoLmFicyh0b3RhbE1vdmUpKSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5QYXJ0aWNpcGFudE5vdEVub3VnaE1vdmVtZW50Jywge1xuICAgICAgICAgICAgYXNzaXN0YW50VXVpZDogcGFydGljaXBhbnRVdWlkLFxuICAgICAgICAgICAgYWN0aW9uczogcGFydGljaXBhbnQuY3VycmVudE1vdmVtZW50QWN0aW9uc1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuICAgICAgcGFydGljaXBhbnQuYWx0ZXJNb3ZlbWVudEFjdGlvbnMoMCAtIE1hdGguYWJzKHRvdGFsTW92ZSkpXG4gICAgICBwYXJ0aWNpcGFudHNEYXRhW3BhcnRpY2lwYW50SW5kZXhdID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICAgIHBhcnRpY2lwYW50LmRhdGFcbiAgICAgIClcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKFxuICAgICAgICB7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzRGF0YSB9LFxuICAgICAgICB7IHJlbmRlcjogZmFsc2UgfVxuICAgICAgKVxuICAgICAgbW9kaWZpZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHRvdGFsTW92ZSAhPT0gMCkge1xuICAgICAgYXdhaXQgdGhpcy5tb3ZlUGFydGljaXBhbnRUb0xvY2F0aW9uKFxuICAgICAgICBwYXJ0aWNpcGFudFV1aWQsXG4gICAgICAgIGxvY2F0aW9uc1tkZXN0aW5hdGlvbkluZGV4XS51dWlkLFxuICAgICAgICB7IHJlbmRlcjogZmFsc2UgfVxuICAgICAgKVxuICAgICAgbW9kaWZpZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2YXRlUGFydGljaXBhbnQpIHtcbiAgICAgIGF3YWl0IHRoaXMuYWN0aXZhdGVQYXJ0aWNpcGFudChwYXJ0aWNpcGFudFV1aWQsIHtcbiAgICAgICAgc2Nyb2xsVG9Mb2NhdGlvbixcbiAgICAgICAgYWN0aXZhdGVMb2NhdGlvbixcbiAgICAgICAgcmVuZGVyOiBmYWxzZVxuICAgICAgfSlcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChhY3RpdmF0ZUxvY2F0aW9uICYmICFhY3RpdmF0ZVBhcnRpY2lwYW50KSB7XG4gICAgICBhd2FpdCB0aGlzLmFjdGl2YXRlTG9jYXRpb24obG9jYXRpb25zW2Rlc3RpbmF0aW9uSW5kZXhdLnV1aWQsIHtcbiAgICAgICAgc2Nyb2xsVG9Mb2NhdGlvbixcbiAgICAgICAgcmVuZGVyOiBmYWxzZVxuICAgICAgfSlcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChtb2RpZmllZCAmJiByZW5kZXIpIGF3YWl0IHRoaXMuc2hlZXQucmVuZGVyKHRydWUpXG4gICAgcmV0dXJuIHRvdGFsTW92ZVxuICB9XG5cbiAgYXN5bmMgbW92ZVBhcnRpY2lwYW50VG9Mb2NhdGlvbiAoXG4gICAgcGFydGljaXBhbnRVdWlkLFxuICAgIGxvY2F0aW9uVXVpZCxcbiAgICB7XG4gICAgICBzY3JvbGxUb0xvY2F0aW9uID0gdHJ1ZSxcbiAgICAgIGFjdGl2YXRlTG9jYXRpb24gPSB0cnVlLFxuICAgICAgYW5pbWF0ZSA9IG51bGwsXG4gICAgICBtb3ZlVG9rZW4gPSB0cnVlLFxuICAgICAgcmVuZGVyID0gdHJ1ZVxuICAgIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcblxuICAgIC8vIEZpbmQgZGVzdGluYXRpb24gbG9jYXRpb24uXG4gICAgY29uc3QgZGVzdGluYXRpb24gPSBsb2NhdGlvbnMuZmluZChsID0+IGxvY2F0aW9uVXVpZCA9PT0gbC51dWlkKVxuICAgIGlmICghZGVzdGluYXRpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gbW92ZSAke3BhcnRpY2lwYW50VXVpZH0uIExvY2F0aW9uICR7bG9jYXRpb25VdWlkfSB1bmtub3duYFxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gRmluZCBvcmlnaW4gbG9jYXRpb25cbiAgICBjb25zdCBvcmlnaW4gPSBsb2NhdGlvbnMuZmluZChsID0+XG4gICAgICBsLnBhcnRpY2lwYW50cz8uaW5jbHVkZXMocGFydGljaXBhbnRVdWlkKVxuICAgIClcblxuICAgIGlmICghb3JpZ2luKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZmluZCAke3BhcnRpY2lwYW50VXVpZH0gaW4gbG9jYXRpb25zYClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghZGVzdGluYXRpb24ucGFydGljaXBhbnRzKSBkZXN0aW5hdGlvbi5wYXJ0aWNpcGFudHMgPSBbXVxuICAgIGlmIChkZXN0aW5hdGlvbi5wYXJ0aWNpcGFudHMuaW5jbHVkZXMocGFydGljaXBhbnRVdWlkKSkgcmV0dXJuIC8vIG1vdmluZyBwYXJ0aWNwYW50IHRvIGEgbG9jYXRpb24gaGUgYWxyZWFkeSBvY2N1cGllc1xuICAgIGRlc3RpbmF0aW9uLnBhcnRpY2lwYW50cy5wdXNoKHBhcnRpY2lwYW50VXVpZClcbiAgICAvLyBkZXN0aW5hdGlvbi5wYXJ0aWNpcGFudHMuc29ydChzb3J0QnlSb2xlQW5kRGV4KVxuXG4gICAgY29uc3Qgb2xkUGFydGljaXBhbnRzTGlzdCA9IG9yaWdpbi5wYXJ0aWNpcGFudHMuZmlsdGVyKFxuICAgICAgcCA9PiBwYXJ0aWNpcGFudFV1aWQgIT09IHBcbiAgICApXG4gICAgb3JpZ2luLnBhcnRpY2lwYW50cyA9IG9sZFBhcnRpY2lwYW50c0xpc3RcblxuICAgIGlmIChtb3ZlVG9rZW4gJiYgZGVzdGluYXRpb24uY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5nZXRQYXJ0aWNpcGFudChwYXJ0aWNpcGFudFV1aWQpXG4gICAgICBsZXQgcGFydGljcGFudERvY3VtZW50ID0gQ29DN1V0aWxpdGllcy5nZXREb2N1bWVudEZyb21LZXkoXG4gICAgICAgIHBhcnRpY2lwYW50Py5kYXRhPy5kb2NVdWlkXG4gICAgICApXG4gICAgICAvLyBGaW5kIHRva2VuXG4gICAgICBpZiAocGFydGljcGFudERvY3VtZW50ICYmICEocGFydGljcGFudERvY3VtZW50IGluc3RhbmNlb2YgVG9rZW5Eb2N1bWVudCB8fCBwYXJ0aWNwYW50RG9jdW1lbnQ/Lm9iamVjdCBpbnN0YW5jZW9mIFRva2VuKSkge1xuICAgICAgICBjb25zdCBmb3VuZFRva2VucyA9IGNhbnZhcy5zY2VuZS50b2tlbnMuZmlsdGVyKGQgPT4gZC5hY3RvckxpbmsgJiYgZC5hY3Rvcj8uaWQgPT09IHBhcnRpY3BhbnREb2N1bWVudC5pZClcbiAgICAgICAgaWYgKGZvdW5kVG9rZW5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHBhcnRpY3BhbnREb2N1bWVudCA9IGZvdW5kVG9rZW5zWzBdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgcGFydGljcGFudERvY3VtZW50ICYmXG4gICAgICAgICEoXG4gICAgICAgICAgLyogcGFydGljcGFudERvY3VtZW50LmlzVG9rZW4gfHwgKi8gKFxuICAgICAgICAgICAgcGFydGljcGFudERvY3VtZW50IGluc3RhbmNlb2YgVG9rZW5Eb2N1bWVudCB8fFxuICAgICAgICAgICAgcGFydGljcGFudERvY3VtZW50Py5vYmplY3QgaW5zdGFuY2VvZiBUb2tlblxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTm8gdG9rZW4gYXNzb2NpYXRlZCB3aXRoIHRoaXMgYWN0b3InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uLmNvb3JkaW5hdGVzLnNjZW5lICE9PSBnYW1lLnNjZW5lcy52aWV3ZWQudXVpZCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignQ2F1dGlvbiB0aGUgc2NlbmUgaXMgbm90IHRoZSBhY3RpdmUgc2NlbmUnKVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWNwYW50RG9jdW1lbnQucGFyZW50Py51dWlkICE9PSBkZXN0aW5hdGlvbi5jb29yZGluYXRlcy5zY2VuZSkge1xuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JUb2tlbk5vdE9uU2NlbmUnKVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzY2VuZSA9IENvQzdVdGlsaXRpZXMuZ2V0RG9jdW1lbnRGcm9tS2V5KFxuICAgICAgICAgICAgZGVzdGluYXRpb24uY29vcmRpbmF0ZXMuc2NlbmVcbiAgICAgICAgICApXG4gICAgICAgICAgbGV0IHggPSBkZXN0aW5hdGlvbi5jb29yZGluYXRlcy54XG4gICAgICAgICAgY29uc3QgeSA9IGRlc3RpbmF0aW9uLmNvb3JkaW5hdGVzLnlcbiAgICAgICAgICBsZXQgdGFyZ2V0UmVjdCA9IG5ldyBQSVhJLlJlY3RhbmdsZShcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgcGFydGljcGFudERvY3VtZW50Lm9iamVjdC53aWR0aCxcbiAgICAgICAgICAgIHBhcnRpY3BhbnREb2N1bWVudC5vYmplY3QuaGVpZ2h0XG4gICAgICAgICAgKS5ub3JtYWxpemUoKVxuICAgICAgICAgIGNvbnN0IHVwZGF0ZSA9IFtdXG4gICAgICAgICAgbGV0IGZvdW5kRnJlZVNwYWNlID0gZmFsc2VcbiAgICAgICAgICB3aGlsZSAoIWZvdW5kRnJlZVNwYWNlKSB7XG4gICAgICAgICAgICBjb25zdCBvdmVybGFwaW5nVG9rZW4gPSBzY2VuZS50b2tlbnMuZmluZCh0ID0+IHtcbiAgICAgICAgICAgICAgaWYgKHQuaWQgPT09IHBhcnRpY3BhbnREb2N1bWVudC5pZCkgcmV0dXJuIGZhbHNlIC8vIFlvdSBjYW4ndCBvdmVybGFwIHdpdGggeW91cnNlbGZcbiAgICAgICAgICAgICAgcmV0dXJuIHQub2JqZWN0LmJvdW5kcy5pbnRlcnNlY3RzKHRhcmdldFJlY3QpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKG92ZXJsYXBpbmdUb2tlbikge1xuICAgICAgICAgICAgICB4ID0gb3ZlcmxhcGluZ1Rva2VuLm9iamVjdC5ib3VuZHMucmlnaHQgKyAxXG4gICAgICAgICAgICAgIHRhcmdldFJlY3QgPSBuZXcgUElYSS5SZWN0YW5nbGUoXG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgIHBhcnRpY3BhbnREb2N1bWVudC5vYmplY3Qud2lkdGgsXG4gICAgICAgICAgICAgICAgcGFydGljcGFudERvY3VtZW50Lm9iamVjdC5oZWlnaHRcbiAgICAgICAgICAgICAgKS5ub3JtYWxpemUoKVxuICAgICAgICAgICAgfSBlbHNlIGZvdW5kRnJlZVNwYWNlID0gdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHVwZGF0ZS5wdXNoKHtcbiAgICAgICAgICAgIF9pZDogcGFydGljcGFudERvY3VtZW50LmlkLFxuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgLy8gZGVzdGluYXRpb24ucGFydGljaXBhbnRzPy5mb3JFYWNoKCBwVXVpZCA9PntcbiAgICAgICAgICAvLyAgIGNvbnN0IHAgPSB0aGlzLmdldFBhcnRpY2lwYW50KHBVdWlkKVxuICAgICAgICAgIC8vICAgY29uc3QgcERvYyA9IENvQzdVdGlsaXRpZXMuZ2V0RG9jdW1lbnRGcm9tS2V5KCBwPy5kYXRhPy5kb2NVdWlkKVxuICAgICAgICAgIC8vICAgaWYoIHBEb2MgaW5zdGFuY2VvZiBUb2tlbkRvY3VtZW50ICYmIHBEb2Mub2JqZWN0IGluc3RhbmNlb2YgVG9rZW4pe1xuICAgICAgICAgIC8vICAgICB1cGRhdGVzID0gdHJ1ZVxuICAgICAgICAgIC8vICAgICB1cGRhdGUucHVzaCh7XG4gICAgICAgICAgLy8gICAgICAgX2lkOiBwRG9jLmlkLFxuICAgICAgICAgIC8vICAgICAgIHg6eCxcbiAgICAgICAgICAvLyAgICAgICB5OnlcbiAgICAgICAgICAvLyAgICAgfSlcbiAgICAgICAgICAvLyAgICAgaWYoIHBEb2Mub2JqZWN0LndpZHRoKSB4ICs9IHBEb2Mub2JqZWN0LndpZHRoXG4gICAgICAgICAgLy8gICB9XG4gICAgICAgICAgLy8gfSlcbiAgICAgICAgICBjb25zdCBzaG93VG9rZW5Nb3ZlbWVudCA9XG4gICAgICAgICAgICB0eXBlb2YgYW5pbWF0ZSA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICAgID8gYW5pbWF0ZVxuICAgICAgICAgICAgICA6IHRoaXMuc3lzdGVtLnNob3dUb2tlbk1vdmVtZW50XG4gICAgICAgICAgYXdhaXQgcGFydGljcGFudERvY3VtZW50LnBhcmVudC51cGRhdGVFbWJlZGRlZERvY3VtZW50cyhcbiAgICAgICAgICAgICdUb2tlbicsXG4gICAgICAgICAgICB1cGRhdGUsXG4gICAgICAgICAgICB7IGFuaW1hdGU6IHNob3dUb2tlbk1vdmVtZW50IH1cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zLCB7IHJlbmRlciB9KVxuICB9XG5cbiAgLy8gSGFuZGxlIHNjcm9sbGluZ1xuICBhc3luYyBzZXRjaGFzZVRyYWNrU2Nyb2xsICh7XG4gICAgZnJvbSA9IHVuZGVmaW5lZCxcbiAgICB0byA9IC0xLFxuICAgIHJlbmRlciA9IHRydWVcbiAgfSA9IHt9KSB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoXG4gICAgICB7XG4gICAgICAgICdzeXN0ZW0uc2Nyb2xsLmNoYXNlVHJhY2suZnJvbSc6XG4gICAgICAgICAgdW5kZWZpbmVkID09PSBmcm9tID8gdGhpcy5jaGFzZVRyYWNrQ3VycmVudFNjcm9sbFBvc2l0aW9uIDogZnJvbSxcbiAgICAgICAgJ3N5c3RlbS5zY3JvbGwuY2hhc2VUcmFjay50byc6XG4gICAgICAgICAgdW5kZWZpbmVkID09PSB0byA/IHRoaXMuY2hhc2VUcmFja0N1cnJlbnRTY3JvbGxQb3NpdGlvbiA6IHRvXG4gICAgICB9LFxuICAgICAgeyByZW5kZXIgfVxuICAgIClcbiAgfVxuXG4gIGdldCBjaGFzZVRyYWNrQ3VycmVudFNjcm9sbFBvc2l0aW9uICgpIHtcbiAgICBjb25zdCBodG1sID0gdGhpcy5zaGVldD8uX2VsZW1lbnRcbiAgICBpZiAoIWh0bWwpIHJldHVybiAtMVxuICAgIGNvbnN0IGNoYXNlVHJhY2sgPSBodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJy5jaGFzZS10cmFjaycpXG4gICAgaWYgKCFjaGFzZVRyYWNrKSByZXR1cm4gLTFcbiAgICAvLyBjb25zdCBzZWxlY3RvciA9IGAjaXRlbS0ke3RoaXMuaWR9IC5jaGFzZS10cmFja2BcbiAgICAvLyB1aS5ub3RpZmljYXRpb25zLmluZm8oIGBEQVRBIDogSnF1ZXJ5IHJvb3Q6ICR7JCgnOnJvb3QnKS5maW5kKHNlbGVjdG9yKS5zY3JvbGxMZWZ0KCl9YClcbiAgICAvLyByZXR1cm4gJCgnOnJvb3QnKS5maW5kKHNlbGVjdG9yKS5zY3JvbGxMZWZ0KClcblxuICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggYERBVEEgOiBKcXVlcnkgcm9vdDogJHskKCc6cm9vdCcpLmZpbmQoJyNpdGVtLVZOaHRxeEEyd0pKbldTdFQgLmNoYXNlLXRyYWNrJykuc2Nyb2xsTGVmdCgpfS5DaGFzZSB0cmFjayBvZmZzZXQ6ICR7Y2hhc2VUcmFjay5zY3JvbGxMZWZ0fSwgRG9jdW1lbnQgb2Zmc2V0OiR7ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2l0ZW0tVk5odHF4QTJ3SkpuV1N0VCcpLnF1ZXJ5U2VsZWN0b3IoJy5jaGFzZS10cmFjaycpLnNjcm9sbExlZnR9YClcbiAgICByZXR1cm4gY2hhc2VUcmFjay5zY3JvbGxMZWZ0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBvZmZzZXQgcG9zaXRpb24gb2YgdGhlIGFjdGl2ZSBsb2NhdGlvblxuICAgKiB0aGUgY2VudGVyIG9mIHRoZSBhY3RpdmUgbG9jYXRpb24gd2lsbCBiZSBjZW50ZXJlZFxuICAgKiBpbiB0aGUgcGFyZW50LlxuICAgKi9cbiAgZ2V0IGNoYXNlVHJhY2tBY3RpdmVMb2NhdGlvblNjcm9sbFBvc2l0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuYWN0aXZlTG9jYXRpb24pIHJldHVybiAtMVxuICAgIHJldHVybiB0aGlzLmdldENoYXNlVHJhY2tMb2NhdGlvblNjcm9sbFBvc2l0aW9uKHRoaXMuYWN0aXZlTG9jYXRpb24udXVpZClcbiAgfVxuXG4gIGdldENoYXNlVHJhY2tMb2NhdGlvblNjcm9sbFBvc2l0aW9uIChsb2NhdGlvblV1aWQsIHsgaHRtbCA9IG51bGwgfSkge1xuICAgIGNvbnN0IGh0bWxFbGVtZW50ID0gaHRtbCB8fCB0aGlzLnNoZWV0Py5fZWxlbWVudFxuICAgIGlmICghaHRtbEVsZW1lbnQgfHwgIWh0bWxFbGVtZW50WzBdKSByZXR1cm4gLTFcbiAgICBjb25zdCBjaGFzZVRyYWNrID0gaHRtbEVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLmNoYXNlLXRyYWNrJylcbiAgICBpZiAoIWNoYXNlVHJhY2spIHJldHVybiAtMVxuICAgIGNvbnN0IGFjdGl2ZUxvY2F0aW9uRWxlbWVudCA9IGNoYXNlVHJhY2sucXVlcnlTZWxlY3RvcihcbiAgICAgIGAuY2hhc2UtbG9jYXRpb25bZGF0YS11dWlkPVwiJHtsb2NhdGlvblV1aWR9XCJdYFxuICAgIClcbiAgICBpZiAoIWFjdGl2ZUxvY2F0aW9uRWxlbWVudCkgcmV0dXJuIC0xXG4gICAgY29uc3QgbGVmdFNjcm9sbCA9XG4gICAgICBhY3RpdmVMb2NhdGlvbkVsZW1lbnQub2Zmc2V0TGVmdCArXG4gICAgICBhY3RpdmVMb2NhdGlvbkVsZW1lbnQuY2xpZW50V2lkdGggLyAyIC1cbiAgICAgIGNoYXNlVHJhY2suY2xpZW50V2lkdGggLyAyXG4gICAgcmV0dXJuIGxlZnRTY3JvbGwgPCAwID8gMCA6IE1hdGguZmxvb3IobGVmdFNjcm9sbClcbiAgfVxuXG4gIC8vIFNob3VsZCBiZSByZW1vdmVkXG4gIGZpbmRNaW5Nb3YgKGxpc3QpIHtcbiAgICBpZiAoIWxpc3Q/Lmxlbmd0aCkgcmV0dXJuIC0xXG4gICAgcmV0dXJuIGxpc3QucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PlxuICAgICAgcHJldi5hZGp1c3RlZE1vdiA8IGN1cnJlbnQuYWRqdXN0ZWRNb3YgPyBwcmV2IDogY3VycmVudFxuICAgICkuYWRqdXN0ZWRNb3ZcbiAgfVxuXG4gIGZpbmRNYXhNb3YgKGxpc3QpIHtcbiAgICBpZiAoIWxpc3Q/Lmxlbmd0aCkgcmV0dXJuIC0xXG4gICAgcmV0dXJuIGxpc3QucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PlxuICAgICAgcHJldi5hZGp1c3RlZE1vdiA+IGN1cnJlbnQuYWRqdXN0ZWRNb3YgPyBwcmV2IDogY3VycmVudFxuICAgICkuYWRqdXN0ZWRNb3ZcbiAgfVxuXG4gIC8vIFV0aWxpdGllc1xuICBmaW5kSW5kZXggKGxpc3QsIHV1aWQpIHtcbiAgICByZXR1cm4gbGlzdC5maW5kSW5kZXgocCA9PiBwLnV1aWQgPT09IHV1aWQpXG4gIH1cblxuICBnZXQgc3RhcnRlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RmxhZygnQ29DNycsICdzdGFydGVkJylcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0ICgpIHtcbiAgICBjb25zdCByZW1TdHJpbmcgPSAkKCc6cm9vdCcpLmNzcygnZm9udC1zaXplJylcbiAgICBjb25zdCByZW1TaXplID0gTnVtYmVyKHJlbVN0cmluZy5yZXBsYWNlKCdweCcsICcnKSlcbiAgICBjb25zdCBwQ291bnQgPSB0aGlzLmFjdHVhbFBhcnRpY2lwYW50cy5sZW5ndGhcbiAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KChwQ291bnQgKiAxMS4yICsgMykgKiByZW1TaXplLCA0MCAqIHJlbVNpemUpXG4gICAgdGhpcy5zaGVldC5fdGFic1swXS5hY3RpdmUgPSAnc2V0dXAnXG4gICAgdGhpcy5zaGVldC5wb3NpdGlvbi53aWR0aCA9IHdpZHRoXG4gICAgYXdhaXQgdGhpcy5zZXRGbGFnKCdDb0M3JywgJ3N0YXJ0ZWQnLCB0cnVlKVxuICAgIGF3YWl0IHRoaXMuYWN0aXZhdGVOZXh0UGFydGljaXBhbnRUdXJuKClcbiAgfVxuXG4gIGFzeW5jIHN0b3AgKCkge1xuICAgIHJldHVybiB0aGlzLnVuc2V0RmxhZygnQ29DNycsICdzdGFydGVkJylcbiAgfVxuXG4gIGdlbmVyYXRlTmV3VXVpZCAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMucmFuZG9tSUQoMTYpXG4gIH1cblxuICBnZXRBY3RvclNraWxsc0FuZENoYXJhY3RlcmlzdGljcyAocGFydGljaXBhbnRVdWlkKSB7XG4gICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLmdldFBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZClcbiAgICBpZiAoIXBhcnRpY2lwYW50LmFjdG9yKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgbGlzdCA9IFtdXG4gICAgQ29DQWN0b3IuZ2V0Q2hhcmFjdGVyaXN0aWNEZWZpbml0aW9uKCkuZm9yRWFjaChjID0+XG4gICAgICBsaXN0LnB1c2goXG4gICAgICAgIGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGFyYWN0ZXJpc3RpY3MnKX0gKCR7Yy5zaG9ydE5hbWV9KWBcbiAgICAgIClcbiAgICApXG4gICAgbGlzdC5wdXNoKFxuICAgICAgYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkF0dHJpYnV0ZScpfSAoJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICdDb0M3Lkx1Y2snXG4gICAgICApfSlgXG4gICAgKVxuICAgIGxpc3QucHVzaChcbiAgICAgIGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BdHRyaWJ1dGUnKX0gKCR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAnQ29DNy5TQU4nXG4gICAgICApfSlgXG4gICAgKVxuICAgIHBhcnRpY2lwYW50LmFjdG9yLnNraWxscy5mb3JFYWNoKHMgPT4gbGlzdC5wdXNoKHMubmFtZSkpXG4gICAgcmV0dXJuIGxpc3RcbiAgfVxuXG4gIGdldCBhY3RpdmVBY3RvclNraWxsc0FuZENoYXJhY3RlcmlzdGljcyAoKSB7XG4gICAgY29uc3QgcGFydGljaWNwYW50RGF0YSA9IHRoaXMuYWN0aXZlUGFydGljaXBhbnREYXRhXG4gICAgaWYgKCFwYXJ0aWNpY3BhbnREYXRhKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuZ2V0QWN0b3JTa2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3MocGFydGljaWNwYW50RGF0YS51dWlkKVxuICB9XG5cbiAgZ2V0IGFsbFNraWxsc0FuZENoYXJhY3RlcmlzdGljcyAoKSB7XG4gICAgY29uc3QgbGlzdCA9IFtdXG4gICAgQ29DQWN0b3IuZ2V0Q2hhcmFjdGVyaXN0aWNEZWZpbml0aW9uKCkuZm9yRWFjaChjID0+XG4gICAgICBsaXN0LnB1c2goXG4gICAgICAgIGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGFyYWN0ZXJpc3RpY3MnKX0gKCR7Yy5zaG9ydE5hbWV9KWBcbiAgICAgIClcbiAgICApXG4gICAgbGlzdC5wdXNoKFxuICAgICAgYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkF0dHJpYnV0ZScpfSAoJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICdDb0M3Lkx1Y2snXG4gICAgICApfSlgXG4gICAgKVxuICAgIGxpc3QucHVzaChcbiAgICAgIGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BdHRyaWJ1dGUnKX0gKCR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAnQ29DNy5TQU4nXG4gICAgICApfSlgXG4gICAgKVxuXG4gICAgZ2FtZS5Db0M3LnNraWxsTGlzdD8uZm9yRWFjaChzID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgIWxpc3QuaW5jbHVkZXMocy5uYW1lKSAmJlxuICAgICAgICAhcy5uYW1lXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAuaW5jbHVkZXMoYCgke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BbnlTcGVjTmFtZScpfSlgLnRvTG93ZXJDYXNlKCkpXG4gICAgICApIHtcbiAgICAgICAgbGlzdC5wdXNoKHMubmFtZSlcbiAgICAgIH1cbiAgICB9KSAvLyBUT0RPOiBSZW1vdmUgPz9cbiAgICB0aGlzLnBhcnRpY2lwYW50cy5mb3JFYWNoKHAgPT4ge1xuICAgICAgaWYgKHAuYWN0b3IpIHtcbiAgICAgICAgcC5hY3Rvci5za2lsbHMuZm9yRWFjaChzID0+IHtcbiAgICAgICAgICBpZiAoIWxpc3QuaW5jbHVkZXMocy5uYW1lKSkgbGlzdC5wdXNoKHMubmFtZSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBsaXN0LnNvcnQoSW50bC5Db2xsYXRvcigpLmNvbXBhcmUpXG4gIH1cblxuICBnZXQgYWxsU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzU2hvcnQgKCkge1xuICAgIGNvbnN0IGxpc3QgPSBbXVxuICAgIENvQ0FjdG9yLmdldENoYXJhY3RlcmlzdGljRGVmaW5pdGlvbigpLmZvckVhY2goYyA9PiBsaXN0LnB1c2goYCR7Yy5sYWJlbH1gKSlcbiAgICBsaXN0LnB1c2goYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkx1Y2snKX1gKVxuICAgIGxpc3QucHVzaChgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU0FOJyl9YClcblxuICAgIGdhbWUuQ29DNy5za2lsbExpc3Q/LmZvckVhY2gocyA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgICFsaXN0LmluY2x1ZGVzKHMubmFtZSkgJiZcbiAgICAgICAgIXMubmFtZVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgLmluY2x1ZGVzKGAoJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQW55U3BlY05hbWUnKX0pYC50b0xvd2VyQ2FzZSgpKVxuICAgICAgKSB7XG4gICAgICAgIGxpc3QucHVzaChzLm5hbWUpXG4gICAgICB9XG4gICAgfSkgLy8gVE9ETzogUmVtb3ZlID8/XG4gICAgdGhpcy5wYXJ0aWNpcGFudHMuZm9yRWFjaChwID0+IHtcbiAgICAgIGlmIChwLmFjdG9yKSB7XG4gICAgICAgIHAuYWN0b3Iuc2tpbGxzLmZvckVhY2gocyA9PiB7XG4gICAgICAgICAgaWYgKCFsaXN0LmluY2x1ZGVzKHMubmFtZSkpIGxpc3QucHVzaChzLm5hbWUpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gbGlzdC5zb3J0KEludGwuQ29sbGF0b3IoKS5jb21wYXJlKVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFuIHRoZSBkYXRhIG9mIGFsbCBwYXJhc2l0ZSBwYXJ0aWNpcGFudHMgaW4gbG9jYXRpb25zLlxuICAgKiBTaG91bGQgbmV2ZXIgaGFwcGVuXG4gICAqL1xuICAvLyBhc3luYyBjbGVhbkxvY2F0aW9ucyAoKSB7XG4gIC8vICAgY29uc3QgbG9jYXRpb25zID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gIC8vICAgbG9jYXRpb25zLmZvckVhY2gobCA9PiB7XG4gIC8vICAgICBjb25zdCBwYXJ0aXBhbnRzVXVpZEFycmF5ID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzLm1hcChwID0+IHAudXVpZClcbiAgLy8gICAgIGlmIChsLnBhcnRpY2lwYW50cykge1xuICAvLyAgICAgICBsLnBhcnRpY2lwYW50cyA9IGwucGFydGljaXBhbnRzLmZpbHRlcih1dWlkID0+XG4gIC8vICAgICAgICAgcGFydGlwYW50c1V1aWRBcnJheS5pbmNsdWRlcyh1dWlkKVxuICAvLyAgICAgICApXG4gIC8vICAgICB9XG4gIC8vICAgfSlcbiAgLy8gICB0aGlzLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zKVxuICAvLyB9XG59XG4iLCIvKiBnbG9iYWwgZm91bmRyeSwgZ2FtZSAqL1xuaW1wb3J0IHsgQ29DN0l0ZW0gfSBmcm9tICcuLi9pdGVtLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN1NraWxsIGV4dGVuZHMgQ29DN0l0ZW0ge1xuICBjb25zdHJ1Y3RvciAoZGF0YSwgY29udGV4dCkge1xuICAgIGlmICh0eXBlb2YgZGF0YS5zeXN0ZW0/LnNraWxsTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHNraWxsID0gQ29DN1NraWxsLmd1ZXNzTmFtZVBhcnRzKGRhdGEubmFtZSlcbiAgICAgIGNvbnN0IHsgbmFtZSwgc2tpbGxOYW1lLCBzcGVjaWFsaXphdGlvbiwgLi4ubmV3UHJvcGVydGllcyB9ID0gc2tpbGxcbiAgICAgIGRhdGEubmFtZSA9IG5hbWVcbiAgICAgIGRhdGEuc3lzdGVtIHx8PSB7fVxuICAgICAgY29uc3QgcHJvcGVydGllcyA9IHsgLi4uZGF0YS5zeXN0ZW0ucHJvcGVydGllcywgLi4ubmV3UHJvcGVydGllcyB9XG4gICAgICBkYXRhLnN5c3RlbSA9IHsgLi4uZGF0YS5zeXN0ZW0sIHNraWxsTmFtZSwgc3BlY2lhbGl6YXRpb24sIHByb3BlcnRpZXMgfVxuICAgIH1cbiAgICBzdXBlcihkYXRhLCBjb250ZXh0KVxuICB9XG5cbiAgc3RhdGljIGd1ZXNzTmFtZVBhcnRzIChza2lsbE5hbWUpIHtcbiAgICBjb25zdCBvdXRwdXQgPSB7XG4gICAgICBjb21iYXQ6IGZhbHNlLFxuICAgICAgZmlnaHRpbmc6IGZhbHNlLFxuICAgICAgZmlyZWFybTogZmFsc2UsXG4gICAgICBuYW1lOiBza2lsbE5hbWUsXG4gICAgICBza2lsbE5hbWUsXG4gICAgICBzcGVjaWFsOiBmYWxzZSxcbiAgICAgIHNwZWNpYWxpemF0aW9uOiAnJ1xuICAgIH1cblxuICAgIGNvbnN0IG1hdGNoID0gc2tpbGxOYW1lLm1hdGNoKC9eKC4rKVxccypcXCgoW14pXSspXFwpJC8pXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBvdXRwdXQuc2tpbGxOYW1lID0gbWF0Y2hbMl0udHJpbSgpXG4gICAgICBvdXRwdXQuc3BlY2lhbCA9IHRydWVcblxuICAgICAgY29uc3Qgc3BlY2lhbGl6YXRpb24gPSBtYXRjaFsxXS50cmltKClcbiAgICAgIG91dHB1dC5zcGVjaWFsaXphdGlvbiA9IHNwZWNpYWxpemF0aW9uXG4gICAgICBvdXRwdXQubmFtZSA9IHNwZWNpYWxpemF0aW9uICsgJyAoJyArIG91dHB1dC5za2lsbE5hbWUgKyAnKSdcbiAgICAgIG91dHB1dC5maWdodGluZyA9IHNwZWNpYWxpemF0aW9uID09PSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUnKVxuICAgICAgb3V0cHV0LmZpcmVhcm0gPSBzcGVjaWFsaXphdGlvbiA9PT0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkZpcmVhcm1TcGVjaWFsaXphdGlvbk5hbWUnKVxuICAgICAgb3V0cHV0LmNvbWJhdCA9IG91dHB1dC5maWdodGluZyB8fCBvdXRwdXQuZmlyZWFybVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cblxuICBnZXQgaGFzQWN0aXZlRWZmZWN0cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlRWZmZWN0cy5sZW5ndGggPiAwXG4gIH1cblxuICBnZXQgYWN0aXZlRWZmZWN0cyAoKSB7XG4gICAgaWYgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmVmZmVjdHMpIHtcbiAgICAgIGNvbnN0IGVmZmVjdEtleUZ1bGwgPSBgc2tpbGwuJHt0aGlzLm5hbWV9YC50b0xvd2VyQ2FzZSgpXG4gICAgICBjb25zdCBlZmZlY3RLZXlTaG9ydCA9IGBza2lsbC4ke3RoaXMuc3lzdGVtLnNraWxsTmFtZX1gLnRvTG93ZXJDYXNlKClcbiAgICAgIGxldCBjaGFuZ2VzID0gdGhpcy5wYXJlbnQuZWZmZWN0cy5yZWR1Y2UoKGNoYW5nZXMsIGUpID0+IHtcbiAgICAgICAgaWYgKGUuZGlzYWJsZWQgfHwgZS5pc1N1cHByZXNzZWQpIHJldHVybiBjaGFuZ2VzXG4gICAgICAgIHJldHVybiBjaGFuZ2VzLmNvbmNhdChcbiAgICAgICAgICBlLmRhdGEuY2hhbmdlcy5tYXAoYyA9PiB7XG4gICAgICAgICAgICBjID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoYylcbiAgICAgICAgICAgIGMuZWZmZWN0ID0gZVxuICAgICAgICAgICAgYy5wcmlvcml0eSA9IGMucHJpb3JpdHkgPz8gYy5tb2RlICogMTBcbiAgICAgICAgICAgIHJldHVybiBjXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfSwgW10pXG4gICAgICBjaGFuZ2VzLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KVxuICAgICAgY2hhbmdlcyA9IGNoYW5nZXMuZmlsdGVyKFxuICAgICAgICBlID0+XG4gICAgICAgICAgZS5rZXkudG9Mb3dlckNhc2UoKSA9PT0gZWZmZWN0S2V5U2hvcnQgfHxcbiAgICAgICAgICBlLmtleS50b0xvd2VyQ2FzZSgpID09PSBlZmZlY3RLZXlGdWxsXG4gICAgICApXG4gICAgICByZXR1cm4gY2hhbmdlc1xuICAgIH1cbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIC8qKlxuICAqIFVuaXF1ZSBpZGVudGlmaWVyIHNob3VsZCBiZSB1c2VkIHRvIHN0b3JlIGFuZCBvYnRhaW4gaXRlbSB0byBhc3Nlc3MgaXRlbSB1bmlxdWVuZXNzLlxuICAqIEZvciBvbGQgaXRlbXMgd2l0aG91dCBpZCwgZmFsbGJhY2sgb2Ygc2tpbGxOYW1lIG1heSBzdGlsbCBiZSB1c2VkXG4gICogYnV0IGlmIHNraWxsIG5hbWUgaXMgbm90IHVuaXF1ZSBpdCB3aWxsIGNhdXNlIHByb2JsZW1zLlxuICAqL1xuICBnZXQgaXRlbUlkZW50aWZpZXIgKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWVcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2tpbGwgc2NvcmUgdW5hZmZlY3RlZCBieSBhY3RpdmUgZWZmZWN0c1xuICAgKi9cbiAgZ2V0IHJhd1ZhbHVlICgpIHtcbiAgICBsZXQgdmFsdWUgPSAwXG4gICAgaWYgKHRoaXMuYWN0b3IudHlwZSA9PT0gJ2NoYXJhY3RlcicpIHtcbiAgICAgIC8vIEZvciBhbiBhY3RvciB3aXRoIGV4cGVyaWVuY2Ugd2UgbmVlZCB0byBjYWxjdWxhdGUgc2tpbGwgdmFsdWVcbiAgICAgIHZhbHVlID0gdGhpcy5iYXNlXG4gICAgICB2YWx1ZSArPSB0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8ucGVyc29uYWxcbiAgICAgICAgPyBwYXJzZUludCh0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8ucGVyc29uYWwpXG4gICAgICAgIDogMFxuICAgICAgdmFsdWUgKz0gdGhpcy5zeXN0ZW0uYWRqdXN0bWVudHM/Lm9jY3VwYXRpb25cbiAgICAgICAgPyBwYXJzZUludCh0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8ub2NjdXBhdGlvbilcbiAgICAgICAgOiAwXG4gICAgICB2YWx1ZSArPSB0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8uZXhwZXJpZW5jZVxuICAgICAgICA/IHBhcnNlSW50KHRoaXMuc3lzdGVtLmFkanVzdG1lbnRzPy5leHBlcmllbmNlKVxuICAgICAgICA6IDBcbiAgICAgIGlmIChcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVBcmNoZXR5cGUnKSAmJlxuICAgICAgICB0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8uYXJjaGV0eXBlXG4gICAgICApIHtcbiAgICAgICAgdmFsdWUgKz0gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYWRqdXN0bWVudHM/LmFyY2hldHlwZSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRm9yIGFsbCBvdGhlcnMgYWN0b3Igd2Ugc3RvcmUgdGhlIHZhbHVlIGRpcmVjdGx5XG4gICAgICB2YWx1ZSA9IHBhcnNlSW50KHRoaXMuc3lzdGVtLnZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gIWlzTmFOKHZhbHVlKSA/IHZhbHVlIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHNraWxsJ3MgdmFsdWUgYWZ0ZXIgYWN0aXZlIGVmZmVjdHMgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICovXG4gIGdldCB2YWx1ZSAoKSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnBhcmVudD8uc3lzdGVtLnNraWxscz8uW2Ake3RoaXMuaXRlbUlkZW50aWZpZXJ9YF0/LnZhbHVlXG4gICAgcmV0dXJuIHZhbHVlIHx8IHRoaXMucmF3VmFsdWVcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVZhbHVlICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmFjdG9yLnR5cGUgPT09ICdjaGFyYWN0ZXInKSB7XG4gICAgICBjb25zdCBkZWx0YSA9IHBhcnNlSW50KHZhbHVlKSAtIHRoaXMucmF3VmFsdWVcbiAgICAgIGNvbnN0IGV4cCA9XG4gICAgICAgICh0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8uZXhwZXJpZW5jZVxuICAgICAgICAgID8gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYWRqdXN0bWVudHMuZXhwZXJpZW5jZSlcbiAgICAgICAgICA6IDApICsgZGVsdGFcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5hZGp1c3RtZW50cy5leHBlcmllbmNlJzogZXhwID4gMCA/IGV4cCA6IDBcbiAgICAgIH0pXG4gICAgfSBlbHNlIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS52YWx1ZSc6IHZhbHVlIH0pXG4gIH1cblxuICBhc3luYyBpbmNyZWFzZUV4cGVyaWVuY2UgKHgpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnc2tpbGwnKSByZXR1cm4gbnVsbFxuICAgIGlmICh0aGlzLmFjdG9yLnR5cGUgPT09ICdjaGFyYWN0ZXInKSB7XG4gICAgICBjb25zdCBleHAgPVxuICAgICAgICAodGhpcy5zeXN0ZW0uYWRqdXN0bWVudHM/LmV4cGVyaWVuY2VcbiAgICAgICAgICA/IHBhcnNlSW50KHRoaXMuc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UpXG4gICAgICAgICAgOiAwKSArIHBhcnNlSW50KHgpXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICdzeXN0ZW0uYWRqdXN0bWVudHMuZXhwZXJpZW5jZSc6IGV4cCA+IDAgPyBleHAgOiAwXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIGdldCB2YWx1ZSAoKSB7XG4gIC8vICAgbGV0IHBWYWx1ZVxuICAvLyAgIGlmKCB0aGlzLnBhcmVudCl7XG5cbiAgLy8gICB9XG4gIC8vICAgY29uc3QgdmFsdWUgPSBzdXBlci52YWx1ZVxuICAvLyAgIGxldCB1cGRhdGVkID0gdmFsdWVcbiAgLy8gICBmb3IgKGNvbnN0IGNoYW5nZSBvZiB0aGlzLmFjdGl2ZUVmZmVjdHMpIHtcbiAgLy8gICAgIGNvbnN0IG1vZGlmaWVyID0gTnVtYmVyLmZyb21TdHJpbmcoY2hhbmdlLnZhbHVlKVxuICAvLyAgICAgaWYgKCFpc05hTihtb2RpZmllcikpIHtcbiAgLy8gICAgICAgY29uc3QgbW9kZXMgPSBDT05TVC5BQ1RJVkVfRUZGRUNUX01PREVTXG4gIC8vICAgICAgIHN3aXRjaCAoY2hhbmdlLm1vZGUpIHtcbiAgLy8gICAgICAgICBjYXNlIG1vZGVzLkFERDpcbiAgLy8gICAgICAgICAgIHVwZGF0ZWQgKz0gbW9kaWZpZXJcbiAgLy8gICAgICAgICAgIGJyZWFrXG4gIC8vICAgICAgICAgY2FzZSBtb2Rlcy5NVUxUSVBMWTpcbiAgLy8gICAgICAgICAgIHVwZGF0ZWQgPSBNYXRoLnJvdW5kKHVwZGF0ZWQgKiBtb2RpZmllcilcbiAgLy8gICAgICAgICAgIGJyZWFrXG4gIC8vICAgICAgICAgY2FzZSBtb2Rlcy5PVkVSUklERTpcbiAgLy8gICAgICAgICAgIHVwZGF0ZWQgPSBtb2RpZmllclxuICAvLyAgICAgICAgICAgYnJlYWtcbiAgLy8gICAgICAgICBjYXNlIG1vZGVzLlVQR1JBREU6XG4gIC8vICAgICAgICAgICBpZiAobW9kaWZlciA+IHVwZGF0ZWQpIHVwZGF0ZWQgPSBtb2RpZmllclxuICAvLyAgICAgICAgICAgYnJlYWtcbiAgLy8gICAgICAgICBjYXNlIG1vZGVzLkRPV05HUkFERTpcbiAgLy8gICAgICAgICAgIGlmIChtb2RpZmVyIDwgdXBkYXRlZCkgdXBkYXRlZCA9IG1vZGlmaWVyXG4gIC8vICAgICAgICAgICBicmVha1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIGlmICghaXNOYU4odXBkYXRlZCkgJiYgdXBkYXRlZCAhPSB2YWx1ZSkge1xuICAvLyAgICAgaWYgKHVwZGF0ZWQgPCAwKSB1cGRhdGVkID0gMFxuICAvLyAgICAgcmV0dXJuIHVwZGF0ZWRcbiAgLy8gICB9IHJldHVybiB2YWx1ZVxuICAvLyB9XG59XG4iLCJpbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4uL2FjdG9yLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN1ZlaGljbGUgZXh0ZW5kcyBDb0NBY3RvciB7XG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvamVlcC5zdmcnXG4gICAgfVxuICAgIHN1cGVyKGRhdGEsIGNvbnRleHQpXG4gIH1cblxuICBnZXQgcmF3QnVpbGQgKCkge1xuICAgIHJldHVybiB0aGlzLmJ1aWxkXG4gIH1cblxuICBnZXQgYnVpbGQgKCkge1xuICAgIGNvbnN0IGJ1aWxkID0gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZSlcbiAgICByZXR1cm4gaXNOYU4oYnVpbGQpID8gbnVsbCA6IGJ1aWxkXG4gIH1cblxuICBnZXQgaHAgKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQuY3VycmVudCA9PT0gbnVsbCB8fFxuICAgICAgdW5kZWZpbmVkID09PSB0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLmN1cnJlbnQgfHxcbiAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQuY3VycmVudCA9PT0gJydcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkXG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQuY3VycmVudCA+IHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQudmFsdWVcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkXG4gICAgfVxuICAgIGNvbnN0IGhwID0gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC5jdXJyZW50KVxuICAgIHJldHVybiBpc05hTihocCkgPyBudWxsIDogaHBcbiAgfVxuXG4gIGdldCBocE1heCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRcbiAgfVxuXG4gIGdldCByYXdIcE1heCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRcbiAgfVxuXG4gIGFzeW5jIHNldEhwICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA+IHRoaXMuYnVpbGQpIHZhbHVlID0gdGhpcy5idWlsZFxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYXR0cmlicy5idWlsZC5jdXJyZW50JzogdmFsdWUgfSlcbiAgfVxuXG4gIGdldCByYXdEYiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGJcbiAgfVxuXG4gIGdldCBkYiAoKSB7XG4gICAgY29uc3QgZGIgPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLmRiPy52YWx1ZSlcbiAgICByZXR1cm4gaXNOYU4oZGIpID8gbnVsbCA6IGRiXG4gIH1cblxuICBnZXQgcmF3TW92ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tb3ZcbiAgfVxuXG4gIGdldCBtb3YgKCkge1xuICAgIGNvbnN0IG1vdiA9IHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnMubW92Py52YWx1ZSlcbiAgICByZXR1cm4gaXNOYU4obW92KSA/IG51bGwgOiBtb3ZcbiAgfVxuXG4gIGdldCBtcE1heCAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnM/Lm1wPy5tYXgpIHx8IDBcbiAgfVxuXG4gIGdldCByYXdNcE1heCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubXBNYXhcbiAgfVxuXG4gIGdldCBzYW5NYXggKCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgcmF3U2FuTWF4ICgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iLCIvKiBnbG9iYWwgRGllICovXG5cbmV4cG9ydCBjbGFzcyBDb0M3RGVjYWRlckRpZSBleHRlbmRzIERpZSB7XG4gIGNvbnN0cnVjdG9yICh0ZXJtRGF0YSkge1xuICAgIHRlcm1EYXRhLmZhY2VzID0gMTBcbiAgICBzdXBlcih0ZXJtRGF0YSlcbiAgfVxuXG4gIGdldCB0b3RhbCAoKSB7XG4gICAgY29uc3QgdG90YWwgPSBzdXBlci50b3RhbFxuICAgIHJldHVybiB0b3RhbCA9PT0gMTAgPyAwIDogdG90YWwgKiAxMFxuICB9XG5cbiAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdGF0aWMgZ2V0IERFTk9NSU5BVElPTiAoKSB7XG4gICAgcmV0dXJuICd0J1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb0M3RGVjYWRlckRpZSB9IGZyb20gJy4vZGVjYWRlci1kaWUuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3RGVjYWRlckRpZU90aGVyIGV4dGVuZHMgQ29DN0RlY2FkZXJEaWUge1xuICBzdGF0aWMgZ2V0IERFTk9NSU5BVElPTiAoKSB7XG4gICAgcmV0dXJuICdvJ1xuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ09ORklHLCBGb3JtQXBwbGljYXRpb24sIGZvdW5kcnksIGdhbWUgKi9cbmNvbnN0IFNFVFRJTkdTID0ge1xuICBwdWxwUnVsZXM6IHtcbiAgICBuYW1lOiAnJyxcbiAgICBoaW50OiAnJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSxcbiAgaW5pdGlhdGl2ZVJ1bGU6IHtcbiAgICBuYW1lOiAnU0VUVElOR1MuSW5pdGlhdGl2ZVJ1bGUnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5Jbml0aWF0aXZlUnVsZUhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogJ2Jhc2ljJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczoge1xuICAgICAgYmFzaWM6ICdTRVRUSU5HUy5Jbml0aWF0aXZlUnVsZUJhc2ljJyxcbiAgICAgIG9wdGlvbmFsOiAnU0VUVElOR1MuSW5pdGlhdGl2ZVJ1bGVPcHRpb25hbCdcbiAgICB9LFxuICAgIG9uQ2hhbmdlOiBydWxlID0+IF9zZXRJbml0aWF0aXZlT3B0aW9ucyhydWxlKVxuICB9LFxuICBkZXZlbG9wbWVudFJvbGxGb3JMdWNrOiB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLmRldmVsb3BtZW50Um9sbEZvckx1Y2snLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5kZXZlbG9wbWVudFJvbGxGb3JMdWNrSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0sXG4gIHB1bHBSdWxlRG91YmxlTWF4SGVhbHRoOiB7XG4gICAgbmFtZTogJ0NvQzcuU2V0dGluZ3MuUHVscFJ1bGVzLkRvdWJsZU1heEhlYWx0aC5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuRG91YmxlTWF4SGVhbHRoLkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9LFxuICBwdWxwUnVsZURldmVsb3BtZW50Um9sbEx1Y2s6IHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuRGV2ZWxvcG1lbnRSb2xsTHVjay5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuRGV2ZWxvcG1lbnRSb2xsTHVjay5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSxcbiAgcHVscFJ1bGVBcmNoZXR5cGU6IHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuQXJjaGV0eXBlLk5hbWUnLFxuICAgIGhpbnQ6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5BcmNoZXR5cGUuSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0sXG4gIHB1bHBSdWxlT3JnYW5pemF0aW9uOiB7XG4gICAgbmFtZTogJ0NvQzcuU2V0dGluZ3MuUHVscFJ1bGVzLk9yZ2FuaXphdGlvbi5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuT3JnYW5pemF0aW9uLkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9LFxuICBwdWxwUnVsZVRhbGVudHM6IHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuVGFsZW50cy5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuVGFsZW50cy5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSxcbiAgcHVscFJ1bGVGYXN0ZXJSZWNvdmVyeToge1xuICAgIG5hbWU6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5GYXN0ZXJSZWNvdmVyeS5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuRmFzdGVyUmVjb3ZlcnkuSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0sXG4gIHB1bHBSdWxlSWdub3JlTWFqb3JXb3VuZHM6IHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuSWdub3JlTWFqb3JXb3VuZHMuTmFtZScsXG4gICAgaGludDogJ0NvQzcuU2V0dGluZ3MuUHVscFJ1bGVzLklnbm9yZU1ham9yV291bmRzLkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9LFxuICBwdWxwUnVsZUlnbm9yZUFnZVBlbmFsdGllczoge1xuICAgIG5hbWU6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5JZ25vcmVBZ2VQZW5hbHRpZXMuTmFtZScsXG4gICAgaGludDogJ0NvQzcuU2V0dGluZ3MuUHVscFJ1bGVzLklnbm9yZUFnZVBlbmFsdGllcy5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSxcbiAgb3Bwb3NlZFJvbGxUaWVCcmVha2VyOiB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLk9wcG9zZWRSb2xsVGllQnJlYWtlcicsXG4gICAgaGludDogJ1NFVFRJTkdTLk9wcG9zZWRSb2xsVGllQnJlYWtlckhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9XG59XG5cbmZ1bmN0aW9uIF9zZXRJbml0aWF0aXZlT3B0aW9ucyAocnVsZSkge1xuICBsZXQgZGVjaW1hbHMgPSAwXG4gIHN3aXRjaCAocnVsZSkge1xuICAgIGNhc2UgJ29wdGlvbmFsJzpcbiAgICAgIGRlY2ltYWxzID0gMlxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNpYyc6XG4gICAgICBkZWNpbWFscyA9IDBcbiAgICAgIGJyZWFrXG4gIH1cbiAgQ09ORklHLkNvbWJhdC5pbml0aWF0aXZlID0ge1xuICAgIGZvcm11bGE6IG51bGwsXG4gICAgZGVjaW1hbHNcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29DN0dhbWVSdWxlU2V0dGluZ3MgZXh0ZW5kcyBGb3JtQXBwbGljYXRpb24ge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgdGl0bGU6ICdTRVRUSU5HUy5UaXRsZVJ1bGVzJyxcbiAgICAgIGlkOiAncnVsZXMtc2V0dGluZ3MnLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL3N5c3RlbS9ydWxlLXNldHRpbmdzLmh0bWwnLFxuICAgICAgd2lkdGg6IDU1MCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgY2xvc2VPblN1Ym1pdDogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICBnZXREYXRhICgpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge31cbiAgICBjb25zdCBwdWxwUnVsZXMgPSB7XG4gICAgICB0cnVlOiBmYWxzZSxcbiAgICAgIGZhbHNlOiBmYWxzZVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhTRVRUSU5HUykpIHtcbiAgICAgIG9wdGlvbnNba10gPSB7XG4gICAgICAgIHZhbHVlOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsIGspLFxuICAgICAgICBzZXR0aW5nOiB2XG4gICAgICB9XG4gICAgICBpZiAoay5tYXRjaCgvXnB1bHBSdWxlLnsyLH0kLykpIHtcbiAgICAgICAgcHVscFJ1bGVzW29wdGlvbnNba10udmFsdWVdID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBvcHRpb25zLnB1bHBTZWxlY3Rpb24gPSBwdWxwUnVsZXMudHJ1ZVxuICAgICAgPyBwdWxwUnVsZXMuZmFsc2VcbiAgICAgICAgPyAnc29tZSdcbiAgICAgICAgOiAnYWxsJ1xuICAgICAgOiAnbm9uZSdcbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgc3RhdGljIHJlZ2lzdGVyU2V0dGluZ3MgKCkge1xuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKFNFVFRJTkdTKSkge1xuICAgICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsIGssIHYpXG4gICAgfVxuICAgIF9zZXRJbml0aWF0aXZlT3B0aW9ucyhnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdpbml0aWF0aXZlUnVsZScpKVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcjcHVscFJ1bGVzU2VsZWN0JylcbiAgICAgIC5vbignY2hhbmdlJywgZXZlbnQgPT4gdGhpcy5vbkNoYW5nZVB1bHBTZWxlY3QoZXZlbnQpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCdpbnB1dC5wdWxwUnVsZXNTZWxlY3RbdHlwZT1jaGVja2JveF0nKVxuICAgICAgLm9uKCdjbGljaycsIGV2ZW50ID0+IHRoaXMub25DbGlja1B1bHAoZXZlbnQpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCdidXR0b25bbmFtZT1yZXNldF0nKVxuICAgICAgLm9uKCdjbGljaycsIGV2ZW50ID0+IHRoaXMub25SZXNldERlZmF1bHRzKGV2ZW50KSlcbiAgfVxuXG4gIG9uQ2hhbmdlUHVscFNlbGVjdCAoZXZlbnQpIHtcbiAgICBjb25zdCB2YWwgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnZhbCgpXG4gICAgaWYgKHZhbCA9PT0gJ25vbmUnIHx8IHZhbCA9PT0gJ2FsbCcpIHtcbiAgICAgICQoJyNydWxlcy1zZXR0aW5ncycpXG4gICAgICAgIC5maW5kKCdpbnB1dC5wdWxwUnVsZXNTZWxlY3RbdHlwZT1jaGVja2JveF0nKVxuICAgICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgY2hlY2tib3ggPSAkKHRoaXMpXG4gICAgICAgICAgaWYgKHZhbCA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICBjaGVja2JveC5wcm9wKCdjaGVja2VkJywgZmFsc2UpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrYm94LnByb3AoJ2NoZWNrZWQnLCB0cnVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBvbkNsaWNrUHVscCAoZXZlbnQpIHtcbiAgICBjb25zdCBwdWxwUnVsZXMgPSB7XG4gICAgICB0cnVlOiBmYWxzZSxcbiAgICAgIGZhbHNlOiBmYWxzZVxuICAgIH1cbiAgICAkKCcjcnVsZXMtc2V0dGluZ3MnKVxuICAgICAgLmZpbmQoJ2lucHV0LnB1bHBSdWxlc1NlbGVjdFt0eXBlPWNoZWNrYm94XScpXG4gICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ID0gJCh0aGlzKVxuICAgICAgICBpZiAoY2hlY2tib3gucHJvcCgnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgcHVscFJ1bGVzLnRydWUgPSB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVscFJ1bGVzLmZhbHNlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICQoJyNwdWxwUnVsZXNTZWxlY3QnKS52YWwoXG4gICAgICBwdWxwUnVsZXMudHJ1ZSA/IChwdWxwUnVsZXMuZmFsc2UgPyAnc29tZScgOiAnYWxsJykgOiAnbm9uZSdcbiAgICApXG4gIH1cblxuICBhc3luYyBvblJlc2V0RGVmYXVsdHMgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGZvciBhd2FpdCAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKFNFVFRJTkdTKSkge1xuICAgICAgYXdhaXQgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCBrLCB2Py5kZWZhdWx0KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZW5kZXIoKVxuICB9XG5cbiAgYXN5bmMgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGRhdGEpIHtcbiAgICBjb25zdCBwdWxwUnVsZXMgPSB7XG4gICAgICB0cnVlOiBmYWxzZSxcbiAgICAgIGZhbHNlOiBmYWxzZVxuICAgIH1cbiAgICBmb3IgYXdhaXQgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhTRVRUSU5HUykpIHtcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3Jywga2V5LCBkYXRhW2tleV0pXG4gICAgICBpZiAoa2V5Lm1hdGNoKC9ecHVscFJ1bGUuezIsfSQvKSkge1xuICAgICAgICBwdWxwUnVsZXNbZGF0YVtrZXldXSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAncHVscFJ1bGVzJywgcHVscFJ1bGVzLnRydWUgJiYgIXB1bHBSdWxlcy5mYWxzZSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIGZvdW5kcnksIGdhbWUsIEl0ZW1TaGVldCwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi4vaXRlbS5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBEcm9wQ29DSUQgfSBmcm9tICcuLi8uLi9hcHBzL2Ryb3AtY29jLWlkLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgSXRlbVNoZWV0IHdpdGggc29tZSB2ZXJ5IHNpbXBsZSBtb2RpZmljYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3QXJjaGV0eXBlU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICAvKipcbiAgICogQWN0aXZhdGUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBwcmVwYXJlZCBzaGVldCBIVE1MXG4gICAqIEBwYXJhbSBodG1sIHtIVE1MfSAgIFRoZSBwcmVwYXJlZCBIVE1MIG9iamVjdCByZWFkeSB0byBiZSByZW5kZXJlZCBpbnRvIHRoZSBET01cbiAgICovXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICAvLyBFdmVyeXRoaW5nIGJlbG93IGhlcmUgaXMgb25seSBuZWVkZWQgaWYgdGhlIHNoZWV0IGlzIGVkaXRhYmxlXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZWRpdGFibGUpIHJldHVyblxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5pdGVtIC5pdGVtLW5hbWUgaDQnKVxuICAgICAgLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uSXRlbVN1bW1hcnkoZXZlbnQsICdza2lsbHMnKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLml0ZW0tZGVsZXRlJylcbiAgICAgIC5jbGljayhldmVudCA9PiB0aGlzLl9vbkl0ZW1EZWxldGUoZXZlbnQsICdza2lsbHMnKSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRyb3AgKGV2ZW50LCB0eXBlID0gJ3NraWxsJywgY29sbGVjdGlvbk5hbWUgPSAnc2tpbGxzJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgY29uc3QgZGF0YUxpc3QgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmdldERhdGFGcm9tRHJvcEV2ZW50KGV2ZW50LCAnSXRlbScpXG5cbiAgICBsZXQgdXNlQ29DSUQgPSAwXG4gICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0pIDogW11cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YUxpc3QpIHtcbiAgICAgIGlmICghaXRlbSB8fCAhaXRlbS5zeXN0ZW0pIGNvbnRpbnVlXG4gICAgICBpZiAoIVt0eXBlXS5pbmNsdWRlcyhpdGVtLnR5cGUpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBpZiAoIUNvQzdJdGVtLmlzQW55U3BlYyhpdGVtKSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbi5maW5kKGVsID0+IGVsLm5hbWUgPT09IGl0ZW0ubmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh1c2VDb0NJRCA9PT0gMCkge1xuICAgICAgICB1c2VDb0NJRCA9IGF3YWl0IERyb3BDb0NJRC5jcmVhdGUoKVxuICAgICAgfVxuICAgICAgY29sbGVjdGlvbi5wdXNoKERyb3BDb0NJRC5wcm9jZXNzSXRlbSh1c2VDb0NJRCwgaXRlbSkpXG4gICAgfVxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyBbYHN5c3RlbS4ke2NvbGxlY3Rpb25OYW1lfWBdOiBjb2xsZWN0aW9uIH0pXG4gIH1cblxuICBhc3luYyBfb25JdGVtU3VtbWFyeSAoZXZlbnQsIGNvbGxlY3Rpb25OYW1lID0gJ2l0ZW1zJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXS5maW5kKHMgPT4ge1xuICAgICAgcmV0dXJuIHMuX2lkID09PSBsaS5kYXRhKCdpdGVtLWlkJylcbiAgICB9KVxuICAgIGlmICghaXRlbSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGNoYXREYXRhID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgaXRlbS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiB0aGlzLml0ZW0uZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICAvLyBUb2dnbGUgc3VtbWFyeVxuICAgIGlmIChsaS5oYXNDbGFzcygnZXhwYW5kZWQnKSkge1xuICAgICAgY29uc3Qgc3VtbWFyeSA9IGxpLmNoaWxkcmVuKCcuaXRlbS1zdW1tYXJ5JylcbiAgICAgIHN1bW1hcnkuc2xpZGVVcCgyMDAsICgpID0+IHN1bW1hcnkucmVtb3ZlKCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpdiA9ICQoYDxkaXYgY2xhc3M9XCJpdGVtLXN1bW1hcnlcIj4ke2NoYXREYXRhfTwvZGl2PmApXG4gICAgICBjb25zdCBwcm9wcyA9ICQoJzxkaXYgY2xhc3M9XCJpdGVtLXByb3BlcnRpZXNcIj48L2Rpdj4nKVxuICAgICAgLy8gZm9yIChjb25zdCBwIG9mIGNoYXREYXRhLnByb3BlcnRpZXMpIHsgcHJvcHMuYXBwZW5kKGA8c3BhbiBjbGFzcz1cInRhZ1wiPiR7cH08L3NwYW4+YCkgfVxuICAgICAgZGl2LmFwcGVuZChwcm9wcylcbiAgICAgIGxpLmFwcGVuZChkaXYuaGlkZSgpKVxuICAgICAgZGl2LnNsaWRlRG93bigyMDApXG4gICAgfVxuICAgIGxpLnRvZ2dsZUNsYXNzKCdleHBhbmRlZCcpXG4gIH1cblxuICBhc3luYyBfb25JdGVtRGVsZXRlIChldmVudCwgY29sbGVjdGlvbk5hbWUgPSAnaXRlbXMnKSB7XG4gICAgY29uc3QgaXRlbSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW1JZCA9IGl0ZW0uZGF0YSgnaXRlbS1pZCcpXG4gICAgY29uc3QgQ29DSWQgPSBpdGVtLmRhdGEoJ2NvY2lkJylcbiAgICBjb25zdCBpdGVtSW5kZXggPSB0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXS5maW5kSW5kZXgoaSA9PiAoaXRlbUlkICYmIGkuX2lkID09PSBpdGVtSWQpIHx8IChDb0NJZCAmJiBpID09PSBDb0NJZCkpXG4gICAgaWYgKGl0ZW1JbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0gPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXSkgOiBbXVxuICAgICAgY29sbGVjdGlvbi5zcGxpY2UoaXRlbUluZGV4LCAxKVxuICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7IFtgc3lzdGVtLiR7Y29sbGVjdGlvbk5hbWV9YF06IGNvbGxlY3Rpb24gfSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ29jY3VwYXRpb24nXSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9pdGVtcy9hcmNoZXR5cGUuaHRtbCcsXG4gICAgICB3aWR0aDogNTIwLFxuICAgICAgaGVpZ2h0OiA0ODAsXG4gICAgICBkcmFnRHJvcDogW3sgZHJhZ1NlbGVjdG9yOiAnLml0ZW0nIH1dLFxuICAgICAgc2Nyb2xsWTogWycudGFiLmRlc2NyaXB0aW9uJ10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXZpZ2F0aW9uJyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXQtYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2Rlc2NyaXB0aW9uJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuaGFzT3duZXIgPSB0aGlzLml0ZW0uaXNFbWJlZGRlZCA9PT0gdHJ1ZVxuXG4gICAgY29uc3QgY29yZUNoYXJhY3RlcmlzdGljcyA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCBzZWxlY3RlZF0gb2YgT2JqZWN0LmVudHJpZXMoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uY29yZUNoYXJhY3RlcmlzdGljc1xuICAgICkpIHtcbiAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICBjb25zdCBjaGFyYWNOYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKGBDSEFSQUMuJHtrZXkudG9VcHBlckNhc2UoKX1gKVxuICAgICAgICBjb3JlQ2hhcmFjdGVyaXN0aWNzLnB1c2goY2hhcmFjTmFtZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvblZhbHVlID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkU3VnZ2VzdGVkT2NjdXBhdGlvbnMgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uc3VnZ2VzdGVkT2NjdXBhdGlvbnMsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWRTdWdnZXN0ZWRUcmFpdHMgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uc3VnZ2VzdGVkVHJhaXRzLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLnNraWxscyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5leHBhbmRJdGVtQXJyYXkoeyBpdGVtTGlzdDogc2hlZXREYXRhLmRhdGEuc3lzdGVtLnNraWxscyB9KVxuICAgIHNoZWV0RGF0YS5za2lsbExpc3RFbXB0eSA9IHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5za2lsbHMubGVuZ3RoID09PSAwXG5cbiAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uc2tpbGxzLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgc2hlZXREYXRhLmNvcmVDaGFyYWN0ZXJpc3RpY3NTdHJpbmcgPSAnJ1xuICAgIGNvbnN0IG9yU3RyaW5nID0gYCAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5PcicpfSBgXG4gICAgaWYgKGNvcmVDaGFyYWN0ZXJpc3RpY3MubGVuZ3RoKSB7XG4gICAgICBzaGVldERhdGEuY29yZUNoYXJhY3RlcmlzdGljc1N0cmluZyArPSBjb3JlQ2hhcmFjdGVyaXN0aWNzLmpvaW4ob3JTdHJpbmcpXG4gICAgfVxuXG4gICAgc2hlZXREYXRhLml0ZW1Qcm9wZXJ0aWVzID0gW11cblxuICAgIHNoZWV0RGF0YS5pdGVtUHJvcGVydGllcy5wdXNoKFxuICAgICAgYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlB1bHBUYWxlbnRzJyl9OiAke3NoZWV0RGF0YS5kYXRhLnN5c3RlbS50YWxlbnRzfWBcbiAgICApXG4gICAgc2hlZXREYXRhLml0ZW1Qcm9wZXJ0aWVzLnB1c2goXG4gICAgICBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQm9udXNQb2ludHMnKX06ICR7c2hlZXREYXRhLmRhdGEuc3lzdGVtLmJvbnVzUG9pbnRzfWBcbiAgICApXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIGZvdW5kcnksIGdhbWUsIEl0ZW1TaGVldCwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Qm9va1NoZWV0IGV4dGVuZHMgSXRlbVNoZWV0IHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9pdGVtcy9ib29rL21haW4uaHRtbCcsXG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnaXRlbScsICdib29rJ10sXG4gICAgICB3aWR0aDogNTAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICByZXNpemFibGU6IGZhbHNlLFxuICAgICAgZHJhZ0Ryb3A6IFt7IGRyYWdTZWxlY3RvcjogJy5zcGVsbHMnLCBkcm9wU2VsZWN0b3I6IG51bGwgfV0sXG4gICAgICBzY3JvbGxZOiBbJy5ib2R5J10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5uYXZpZ2F0aW9uJyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2Rlc2NyaXB0aW9uJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG4gICAgc2hlZXREYXRhLmluaXRpYWxSZWFkaW5nID0gdGhpcy5pdGVtLnN5c3RlbS5pbml0aWFsUmVhZGluZ1xuICAgIHNoZWV0RGF0YS5pc0tlZXBlciA9IGdhbWUudXNlci5pc0dNXG4gICAgc2hlZXREYXRhLmlzT3duZXIgPSB0aGlzLml0ZW0uaXNPd25lclxuICAgIHNoZWV0RGF0YS5zcGVsbHNMZWFybmVkID0gdGhpcy5zcGVsbHNMZWFybmVkXG4gICAgc2hlZXREYXRhLmV4aGF1c3RlZCA9IChhd2FpdCB0aGlzLml0ZW0uY2hlY2tFeGhhdXN0aW9uKCkpICE9PSBmYWxzZVxuICAgIHNoZWV0RGF0YS5zdHVkeUNvbXBsZXRlZCA9IHRoaXMuaXRlbS5zeXN0ZW0uc3R1ZHkucHJvZ3Jlc3MgPT09IHRoaXMuaXRlbS5zeXN0ZW0uc3R1ZHkubmVjZXNzYXJ5XG4gICAgc2hlZXREYXRhLmhhc093bmVyID0gdGhpcy5pdGVtLmlzRW1iZWRkZWQgPT09IHRydWVcbiAgICBzaGVldERhdGEuc3BlbGxMaXN0RW1wdHkgPSB0aGlzLml0ZW0uc3lzdGVtLnNwZWxscy5sZW5ndGggPT09IDBcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWRDb250ZW50ID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmNvbnRlbnQsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gc2hlZXREYXRhXG4gIH1cblxuICBnZXQgc3BlbGxzTGVhcm5lZCAoKSB7XG4gICAgbGV0IGFtb3VudCA9IDBcbiAgICBjb25zdCBzcGVsbHMgPSB0aGlzLml0ZW0uc3lzdGVtLnNwZWxsc1xuICAgIGZvciAoY29uc3Qgc3BlbGwgb2Ygc3BlbGxzKSB7XG4gICAgICBpZiAoc3BlbGwuc3lzdGVtLmxlYXJuZWQpIGFtb3VudCsrXG4gICAgfVxuICAgIHJldHVybiBgJHthbW91bnR9IC8gJHtzcGVsbHMubGVuZ3RofWBcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICBodG1sLmZpbmQoJyNhdHRlbXB0LWluaXRpYWwtcmVhZGluZycpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIHRoaXMuaXRlbS5hdHRlbXB0SW5pdGlhbFJlYWRpbmcoKVxuICAgIH0pXG4gICAgaHRtbC5maW5kKCcuZGVsZXRlLXNwZWxsJykuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25EZWxldGUoZXZlbnQpKVxuICAgIGh0bWwuZmluZCgnLmVkaXQtc3BlbGwnKS5jbGljayhldmVudCA9PiB0aGlzLl9vblNwZWxsRGV0YWlsKGV2ZW50KSlcbiAgICBodG1sLmZpbmQoJy5zcGVsbC1uYW1lJykuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25TcGVsbERldGFpbChldmVudCkpXG4gICAgaHRtbC5maW5kKCcudGVhY2gtc3BlbGwnKS5jbGljayhldmVudCA9PiB7XG4gICAgICBjb25zdCBpZCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnbGknKS5kYXRhKCdpZCcpXG4gICAgICB0aGlzLml0ZW0uYXR0ZW1wdFNwZWxsTGVhcm5pbmcoaWQpXG4gICAgfSlcbiAgICBodG1sLmZpbmQoJ1tuYW1lPVwic3lzdGVtLnN0dWR5Lm5lY2Vzc2FyeVwiXScpLmNoYW5nZShldmVudCA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICB0aGlzLml0ZW0uY2hhbmdlUHJvZ3Jlc3MoJ3Jlc2V0JywgdmFsdWUpXG4gICAgfSlcbiAgICBodG1sLmZpbmQoJyNpbmNyZWFzZS1wcm9ncmVzcycpLmNsaWNrKCgpID0+IHtcbiAgICAgIHRoaXMuaXRlbS5jaGFuZ2VQcm9ncmVzcygnaW5jcmVhc2UnKVxuICAgIH0pXG4gICAgaHRtbC5maW5kKCcjZGVjcmVhc2UtcHJvZ3Jlc3MnKS5jbGljaygoKSA9PiB7XG4gICAgICB0aGlzLml0ZW0uY2hhbmdlUHJvZ3Jlc3MoJ2RlY3JlYXNlJylcbiAgICB9KVxuICAgIGh0bWwuZmluZCgnLmFkZC1vdGhlci1nYWlucycpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgIHRoaXMubW9kaWZ5T3RoZXJzR2FpbnMoZXZlbnQsICdhZGQnKVxuICAgIH0pXG4gICAgaHRtbC5maW5kKCcuY2hhbmdlLW90aGVyLWdhaW5zJykuY2hhbmdlKGV2ZW50ID0+IHtcbiAgICAgIHRoaXMubW9kaWZ5T3RoZXJzR2FpbnMoZXZlbnQsICdjaGFuZ2UnKVxuICAgIH0pXG4gICAgaHRtbC5maW5kKCcjcmVkby1mdWxsLXN0dWR5JykuY2xpY2soKCkgPT4ge1xuICAgICAgdGhpcy5pdGVtLnJlZG9GdWxsU3R1ZHkoKVxuICAgIH0pXG4gICAgaHRtbC5maW5kKCcucmVtb3ZlLW90aGVyLWdhaW5zJykuY2xpY2soZXZlbnQgPT4ge1xuICAgICAgdGhpcy5tb2RpZnlPdGhlcnNHYWlucyhldmVudCwgJ3JlbW92ZScpXG4gICAgfSlcbiAgICBodG1sLmZpbmQoJy5vcHRpb24nKS5jbGljayhldmVudCA9PiB0aGlzLm1vZGlmeVR5cGUoZXZlbnQpKVxuICB9XG5cbiAgYXN5bmMgX29uU3BlbGxEZXRhaWwgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGVsZW1lbnQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgLyoqIEBzZWUgZGF0YS1pbmRleCBwcm9wZXJ0eSBvbiB0ZW1wbGF0ZSAqL1xuICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudC5wYXJlbnRzKCdsaScpLmRhdGEoJ2luZGV4JylcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5pdGVtLnNwZWxsRGV0YWlsKGluZGV4KVxuICB9XG5cbiAgLyoqXG4gICAqIEl0IGlzIGNhbGxlZCBldmVyeSB0aW1lIHRoZSB1c2VyIGRlbGV0ZSBhIHNwZWxsIG9uIHRoZSBzaGVldFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZXZlbnQgQHNlZSBhY3RpdmF0ZUxpc3RlbmVyc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48RG9jdW1lbnQ+fSB1cGRhdGUgdG8gSXRlbSBkb2N1bWVudFxuICAgKi9cbiAgYXN5bmMgX29uRGVsZXRlIChldmVudCkge1xuICAgIGlmICghZ2FtZS51c2VyLmlzR00pIHJldHVyblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBlbGVtZW50ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgIC8qKiBAc2VlIGRhdGEtaW5kZXggcHJvcGVydHkgb24gdGVtcGxhdGUgKi9cbiAgICBjb25zdCBpbmRleCA9IGVsZW1lbnQucGFyZW50cygnbGknKS5kYXRhKCdpbmRleCcpXG4gICAgLyoqIEFsd2F5cyBoYXMgdG8gYmUgQHR5cGUge0FycmF5fSAqL1xuICAgIGNvbnN0IHNwZWxscyA9IHRoaXMuaXRlbS5zeXN0ZW0uc3BlbGxzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0uc3BlbGxzKVxuICAgICAgOiBbXVxuICAgIGlmIChpbmRleCA+PSAwKSBzcGVsbHMuc3BsaWNlKGluZGV4LCAxKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ3N5c3RlbS5zcGVsbHMnOiBzcGVsbHMgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJdCBpcyBjYWxsZWQgZXZlcnkgdGltZSB0aGUgdXNlciBkcmFncyBhbiBpdGVtIHRvIHRoZSBzaGVldFxuICAgKiBGaWx0ZXJzIG9ubHkgJ3NwZWxsJyBpdGVtcyBhbmQgaW5zZXJ0cyB0aGVtIGluIGEgQHR5cGUge0FycmF5fVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZXZlbnQgQHNlZSBhY3RpdmF0ZUxpc3RlbmVyc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48RG9jdW1lbnQ+fSB1cGRhdGUgdG8gSXRlbSBkb2N1bWVudFxuICAgKi9cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQsIHR5cGUgPSAnc3BlbGwnKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIC8qKiBQcmV2ZW50cyBwcm9wYWdhdGlvbiBvZiB0aGUgc2FtZSBldmVudCBmcm9tIGJlaW5nIGNhbGxlZCAqL1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBkYXRhTGlzdCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ2V0RGF0YUZyb21Ecm9wRXZlbnQoZXZlbnQsICdJdGVtJylcblxuICAgIGNvbnN0IHNwZWxscyA9IFtdXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGFMaXN0KSB7XG4gICAgICBpZiAoIWl0ZW0gfHwgIVsnc2tpbGwnLCAnc3BlbGwnXS5pbmNsdWRlcyhpdGVtLnR5cGUpKSBjb250aW51ZVxuICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3NwZWxsJykge1xuICAgICAgICBzcGVsbHMucHVzaChpdGVtKVxuICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdza2lsbCcgJiYgdGhpcy5pdGVtLnN5c3RlbS50eXBlLm90aGVyKSB7XG4gICAgICAgIHRoaXMubW9kaWZ5T3RoZXJzR2FpbnMobnVsbCwgJ2FkZCcsIHsgbmFtZTogaXRlbS5uYW1lIH0pXG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuaXRlbS5hZGRTcGVsbHMoc3BlbGxzKVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSB0aGUgY2hlY2tib3hlcyBmb3IgdHlwZSB3aGVuIHVzZXIgY2xpY2tzIG9uIHRoZSBjb3JyZXNwb25kaW5nXG4gICAqIGxhYmVsLCBub3Qgc3VyZSBpZiB0aGlzIHdvcmtzIG9uIGVuZ2luZXMgb3RoZXIgdGhhbiBWOFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZXZlbnQgQHNlZSBhY3RpdmF0ZUxpc3RlbmVyc1xuICAgKiBAcmV0dXJucyB7alF1ZXJ5LkV2ZW50fSBjbGlja1xuICAgKi9cbiAgbW9kaWZ5VHlwZSAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgLyoqIFByZXZlbnRzIHByb3BhZ2F0aW9uIG9mIHRoZSBzYW1lIGV2ZW50IGZyb20gYmVpbmcgY2FsbGVkICovXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBjb25zdCB0b2dnbGVTd2l0Y2ggPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgcmV0dXJuIHRvZ2dsZVN3aXRjaC5wcmV2KCkudHJpZ2dlcignY2xpY2snKVxuICB9XG5cbiAgLyoqXG4gICAqIE1vZGlmeSBJdGVtIGRhdGEgYmFzZWQgb24gdXNlciBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgb3RoZXIgc2tpbGxcbiAgICogZ2FpbnMgdGFibGUgb24gZGV0YWlscyB0YWIgb24gdGhpcyBzaGVldFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZXZlbnQgQHNlZSBhY3RpdmF0ZUxpc3RlbmVyc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSAnYWRkJyB8fCAnY2hhbmdlJyB8fCAncmVtb3ZlJ1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudD59IHVwZGF0ZSB0byBJdGVtIGRvY3VtZW50XG4gICAqL1xuICBhc3luYyBtb2RpZnlPdGhlcnNHYWlucyAoZXZlbnQsIG1vZGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIC8qKiBObyBuZWVkIHRvIGNoZWNrIGlmIHVzZXIgaXMgR00gYmVjYXVzZSBvbmx5IHRoZXkgY2FuIHNlZSBkZXRhaWxzIHRhYiAqL1xuICAgIGxldCBpbmRleCA9IG51bGxcbiAgICBsZXQgZWxlbWVudCA9IG51bGxcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIGVsZW1lbnQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgICAvKiogQHNlZSBkYXRhLWluZGV4IHByb3BlcnR5IG9uIHRlbXBsYXRlICovXG4gICAgICBpbmRleCA9IGVsZW1lbnQucGFyZW50cygndHInKS5kYXRhKCdpbmRleCcpXG4gICAgICAvKiogQWx3YXlzIGhhcyB0byBiZSBAdHlwZSB7QXJyYXl9ICovXG4gICAgfVxuICAgIGNvbnN0IHNraWxscyA9IHRoaXMuaXRlbS5zeXN0ZW0uZ2FpbnMub3RoZXJzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0uZ2FpbnMub3RoZXJzKVxuICAgICAgOiBbXVxuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgLyoqIFVzZXIgY2xpY2tlZCBvbiBwbHVzIGljb24gdG8gYWRkIGEgbmV3IHNraWxsIG9uIG90aGVyIGdhaW5zIHRhYmxlICovXG4gICAgICAgIHNraWxscy5wdXNoKHtcbiAgICAgICAgICAvKiogbmV3IHNraWxsICovXG4gICAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lIHx8IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5OZXdTa2lsbE5hbWUnKSxcbiAgICAgICAgICAvKiogZGV2ZWxvcG1lbnQgYnkgZGVmYXVsdCwgdmFsdWUgY2FuIGFsc28gYmUgMWQ2IG9yIDFkMTAgKi9cbiAgICAgICAgICB2YWx1ZTogJ2RldmVsb3BtZW50J1xuICAgICAgICB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY2hhbmdlJzpcbiAgICAgICAgLyoqIFVzZXIgY2hhbmdlZCBuYW1lIChpbnB1dCkgb3IgdmFsdWUgKHNlbGVjdCkgb2YgYSBza2lsbCBvbiB0YWJsZSAqL1xuICAgICAgICBza2lsbHNbaW5kZXhdID0ge1xuICAgICAgICAgIG5hbWU6IGVsZW1lbnQuaXMoJ2lucHV0JykgPyBlbGVtZW50LnZhbCgpIDogc2tpbGxzW2luZGV4XS5uYW1lLFxuICAgICAgICAgIHZhbHVlOiBlbGVtZW50LmlzKCdzZWxlY3QnKSA/IGVsZW1lbnQudmFsKCkgOiBza2lsbHNbaW5kZXhdLnZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3JlbW92ZSc6XG4gICAgICAgIC8qKiBVc2VyIGNsaWNrZWQgb24gbWludXMgaWNvbiB0byByZW1vdmUgYSBza2lsbCBvbiBvdGhlciBnYWlucyB0YWJsZSAqL1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkgc2tpbGxzLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyAnc3lzdGVtLmdhaW5zLm90aGVycyc6IHNraWxscyB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQWN0b3JTaGVldCwgQ09OU1QsIERpYWxvZywgRm9ybURhdGEsIGZvdW5kcnksIGdhbWUsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN0NvbnRhaW5lclNoZWV0IGV4dGVuZHMgQWN0b3JTaGVldCB7XG4gIC8qKlxuICAgKiBFeHRlbmQgYW5kIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgdXNlZCBieSB0aGUgNWUgQWN0b3IgU2hlZXRcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2hlZXQnLCAnYWN0b3InLCAnc3RvcmFnZSddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9zdG9yYWdlLXNoZWV0Lmh0bWwnLFxuICAgICAgd2lkdGg6IDY3MixcbiAgICAgIGhlaWdodDogNzY1LFxuICAgICAgZHJhZ0Ryb3A6IFt7IGRyYWdTZWxlY3RvcjogJy5pdGVtJywgZHJvcFNlbGVjdG9yOiBudWxsIH1dLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcuc2hlZXQtbmF2JyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXQtYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2l0ZW1zJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRyb3AgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBkYXRhTGlzdCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ2V0RGF0YUZyb21Ecm9wRXZlbnQoZXZlbnQsICdJdGVtJylcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5lZGl0YWJsZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5hY3Rvci5pdGVtcy50b09iamVjdCgpIHx8IFtdXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGFMaXN0KSB7XG4gICAgICBpZiAoIWl0ZW0gfHwgIWl0ZW0uc3lzdGVtKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBpZiAoIVsnYm9vaycsICdpdGVtJywgJ3NwZWxsJywgJ3dlYXBvbiddLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGl0ZW1zLnB1c2goaXRlbS50b09iamVjdCgpKVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLmFjdG9yLnVwZGF0ZSh7IGl0ZW1zIH0pXG4gIH1cblxuICBvbkNsb3NlU2hlZXQgKCkge31cblxuICBfZ2V0SGVhZGVyQnV0dG9ucyAoKSB7XG4gICAgY29uc3QgaGVhZGVyQnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uKGhlYWRlckJ1dHRvbnMsIHRoaXMpXG4gICAgcmV0dXJuIGhlYWRlckJ1dHRvbnNcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGNvbnN0IHNoZWV0RGF0YSA9IGF3YWl0IHN1cGVyLmdldERhdGEoKVxuXG4gICAgc2hlZXREYXRhLmlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cbiAgICBzaGVldERhdGEuZWRpdGFibGUgPSB0aGlzLmlzRWRpdGFibGVcblxuICAgIHNoZWV0RGF0YS5pdGVtc0J5VHlwZSA9IHt9XG4gICAgaWYgKHNoZWV0RGF0YS5pdGVtcykge1xuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHNoZWV0RGF0YS5pdGVtcykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiAgICAgICAgICAgIHNoZWV0RGF0YS5pdGVtc0J5VHlwZSxcbiAgICAgICAgICAgIGl0ZW0udHlwZVxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlW2l0ZW0udHlwZV0gPSBbXVxuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5pdGVtc0J5VHlwZVtpdGVtLnR5cGVdLnB1c2goaXRlbSlcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgaXRlbVR5cGUgaW4gc2hlZXREYXRhLml0ZW1zQnlUeXBlKSB7XG4gICAgICAgIHNoZWV0RGF0YS5pdGVtc0J5VHlwZVtpdGVtVHlwZV0uc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hlZXREYXRhLmFsbG93VW5sb2NrID1cbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3BsYXllclVubG9ja1NoZWV0TW9kZScpID09PSAnYWx3YXlzJyB8fFxuICAgICAgZ2FtZS51c2VyLmlzR01cblxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5SXRlbXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ2l0ZW0nKSB8fFxuICAgICAgIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWRcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICdib29rJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTcGVsbHMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3NwZWxsJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICd0YWxlbnQnKSB8fFxuICAgICAgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkICYmXG4gICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlVGFsZW50cycpKVxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5V2VhcG9ucyA9XG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2hlZXREYXRhLml0ZW1zQnlUeXBlLCAnd2VhcG9uJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG5cbiAgICBzaGVldERhdGEuaGFzSW52ZW50b3J5ID1cbiAgICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5SXRlbXMgfHxcbiAgICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5Qm9va3MgfHxcbiAgICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5U3BlbGxzIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVRhbGVudHMgfHxcbiAgICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5V2VhcG9uc1xuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlcixcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWwuZmluZCgnLml0ZW0tZWRpdCcpLmNsaWNrKGV2ID0+IHtcbiAgICAgIGNvbnN0IGxpID0gJChldi5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuaXRlbScpXG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQobGkuZGF0YSgnaXRlbUlkJykpXG4gICAgICBpdGVtLnNoZWV0LnJlbmRlcih0cnVlKVxuICAgIH0pXG5cbiAgICBodG1sLmZpbmQoJy5pbnZlbnRvcnktaGVhZGVyJykuY2xpY2sodGhpcy5fb25JbnZlbnRvcnlIZWFkZXIuYmluZCh0aGlzKSlcblxuICAgIGh0bWwuZmluZCgnLml0ZW0tdHJhZGUnKS5jbGljayh0aGlzLl9vblRyYWRlSXRlbS5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLnNob3ctZGV0YWlsJykuY2xpY2sodGhpcy5fb25JdGVtU3VtbWFyeS5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbC5maW5kKCcuaXRlbS1kZWxldGUnKS5jbGljayhhc3luYyBldiA9PiB7XG4gICAgICBjb25zdCBsaSA9ICQoZXYuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgICAgY29uc3QgaXRlbVRvRGVsZXRlID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQobGkuZGF0YSgnaXRlbUlkJyksIHtcbiAgICAgICAgc3RyaWN0OiB0cnVlXG4gICAgICB9KVxuICAgICAgYXdhaXQgaXRlbVRvRGVsZXRlLmRlbGV0ZSgpXG4gICAgICBsaS5zbGlkZVVwKDIwMCwgKCkgPT4gdGhpcy5yZW5kZXIoZmFsc2UpKVxuICAgIH0pXG5cbiAgICBodG1sLmZpbmQoJy5hZGQtaXRlbScpLmNsaWNrKGV2ID0+IHtcbiAgICAgIHN3aXRjaCAoZXYuY3VycmVudFRhcmdldC5kYXRhc2V0LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYm9vayc6XG4gICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eUJvb2soZXYpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnaXRlbSc6XG4gICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eUl0ZW0oZXYpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnc2tpbGwnOlxuICAgICAgICAgIHRoaXMuYWN0b3IuY3JlYXRlRW1wdHlTa2lsbChldilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdzcGVsbCc6XG4gICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eVNwZWxsKGV2KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3dlYXBvbic6XG4gICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eVdlYXBvbihldilcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH0pXG5cbiAgICBodG1sLmZpbmQoJy5sb2NrJykuY2xpY2sodGhpcy5fb25Mb2NrQ2xpY2tlZC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgYXN5bmMgX29uTG9ja0NsaWNrZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGlzTG9ja2VkID0gdGhpcy5hY3Rvci5sb2NrZWRcbiAgICB0aGlzLmFjdG9yLmxvY2tlZCA9ICFpc0xvY2tlZFxuICB9XG5cbiAgYXN5bmMgX29uVHJhZGVJdGVtIChldmVudCkge1xuICAgIGNvbnN0IGxpID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuaXRlbScpXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGxpLmRhdGEoJ2l0ZW1JZCcpKVxuICAgIGxldCBjb250ZW50ID0gJzxwPicgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWVzc2FnZVNlbGVjdFVzZXJUb0dpdmVUbycpXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIGFjdG9yRnJvbTogdGhpcy5hY3Rvci5pZCxcbiAgICAgIHNjZW5lOiBudWxsLFxuICAgICAgYWN0b3JUbzogdGhpcy5hY3Rvci5pZCxcbiAgICAgIGl0ZW06IGl0ZW0uaWRcbiAgICB9XG4gICAgaWYgKHRoaXMudG9rZW4/LmFjdG9yKSB7XG4gICAgICBtZXNzYWdlLmFjdG9yRnJvbSA9IHRoaXMudG9rZW4uaWRcbiAgICAgIG1lc3NhZ2Uuc2NlbmUgPSB0aGlzLnRva2VuLnBhcmVudC5pZFxuICAgIH1cbiAgICBjb25zdCBhY3RvcnMgPSBnYW1lLmFjdG9ycy5maWx0ZXIoZSA9PiB7XG4gICAgICBpZiAoIVsnY2hhcmFjdGVyJywgJ25wYycsICdjcmVhdHVyZScsICdjb250YWluZXInXS5pbmNsdWRlcyhlLnR5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWN0b3IuaWQgPT09IGUuaWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBsZXQgdmlzaWJsZSA9IGZhbHNlXG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhlLm93bmVyc2hpcCkpIHtcbiAgICAgICAgaWYgKGsgPT09ICdkZWZhdWx0JyB8fCBrID09PSBnYW1lLnVzZXIuaWQpIHtcbiAgICAgICAgICB2aXNpYmxlID1cbiAgICAgICAgICAgIHZpc2libGUgfHxcbiAgICAgICAgICAgIHYgIT09IENPTlNULkRPQ1VNRU5UX09XTkVSU0hJUF9MRVZFTFMuTk9ORVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmlzaWJsZVxuICAgIH0pXG4gICAgY29udGVudCA9IGNvbnRlbnQgKyAnPGZvcm0gaWQ9XCJzZWxlY3Rmb3JtXCI+PHNlbGVjdCBuYW1lPVwidXNlclwiPidcbiAgICBmb3IgKGNvbnN0IGFjdG9yIG9mIGFjdG9ycykge1xuICAgICAgY29udGVudCA9XG4gICAgICAgIGNvbnRlbnQgKyAnPG9wdGlvbiB2YWx1ZT1cIicgKyBhY3Rvci5pZCArICdcIj4nICsgYWN0b3IubmFtZSArICc8L29wdGlvbj4nXG4gICAgfVxuICAgIGNvbnRlbnQgPSBjb250ZW50ICsgJzwvc2VsZWN0PjwvZm9ybT48L3A+J1xuICAgIGF3YWl0IERpYWxvZy5wcm9tcHQoe1xuICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NZXNzYWdlVGl0bGVTZWxlY3RVc2VyVG9HaXZlVG8nKSxcbiAgICAgIGNvbnRlbnQsXG4gICAgICBjYWxsYmFjazogaHRtbCA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGh0bWxbMF0ucXVlcnlTZWxlY3RvcignI3NlbGVjdGZvcm0nKSlcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIGZvcm1EYXRhKSB7XG4gICAgICAgICAgaWYgKG5hbWUgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgbWVzc2FnZS5hY3RvclRvID0gdmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIGF3YWl0IGdhbWUuQ29DN3NvY2tldC5leGVjdXRlQXNHTSgnZ210cmFkZWl0ZW10bycsIG1lc3NhZ2UpXG4gIH1cblxuICBhc3luYyBfb25JdGVtU3VtbWFyeSAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5pdGVtJylcbiAgICBjb25zdCBpdGVtID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQobGkuZGF0YSgnaXRlbS1pZCcpKVxuICAgIGNvbnN0IGNoYXREYXRhID0gYXdhaXQgaXRlbS5nZXRDaGF0RGF0YSh7IHNlY3JldHM6IHRoaXMuYWN0b3IuaXNPd25lciB9KVxuXG4gICAgLy8gVG9nZ2xlIHN1bW1hcnlcbiAgICBpZiAobGkuaGFzQ2xhc3MoJ2V4cGFuZGVkJykpIHtcbiAgICAgIGNvbnN0IHN1bW1hcnkgPSBsaS5jaGlsZHJlbignLml0ZW0tc3VtbWFyeScpXG4gICAgICBzdW1tYXJ5LnNsaWRlVXAoMjAwLCAoKSA9PiBzdW1tYXJ5LnJlbW92ZSgpKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkaXYgPSAkKCc8ZGl2IGNsYXNzPVwiaXRlbS1zdW1tYXJ5XCI+PC9kaXY+JylcblxuICAgICAgY29uc3QgbGFiZWxzID0gJCgnPGRpdiBjbGFzcz1cIml0ZW0tbGFiZWxzXCI+PC9kaXY+JylcbiAgICAgIGZvciAoY29uc3QgcCBvZiBjaGF0RGF0YS5sYWJlbHMpIHtcbiAgICAgICAgbGFiZWxzLmFwcGVuZChcbiAgICAgICAgICBgPGRpdiBjbGFzcz1cIml0ZW0tbGFiZWxcIj48c3BhbiBjbGFzcz1cImxhYmVsLW5hbWVcIj4ke3AubmFtZX0gOjwvc3Bhbj48c3BhbiBjbGFzcz1cImxhYmVsLXZhbHVlXCI+JHtwLnZhbHVlfTwvc3Bhbj48L2Rpdj5gXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGRpdi5hcHBlbmQobGFiZWxzKVxuXG4gICAgICBkaXYuYXBwZW5kKFxuICAgICAgICAkKGA8ZGl2IGNsYXNzPVwiaXRlbS1kZXNjcmlwdGlvblwiPiR7Y2hhdERhdGEuZGVzY3JpcHRpb24udmFsdWV9PC9kaXY+YClcbiAgICAgIClcbiAgICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5zcGNsKSB7XG4gICAgICAgIGNvbnN0IHNwZWNpYWxEaXYgPSAkKFxuICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaXRlbS1zcGVjaWFsXCI+JHtjaGF0RGF0YS5kZXNjcmlwdGlvbi5zcGVjaWFsfTwvZGl2PmBcbiAgICAgICAgKVxuICAgICAgICBkaXYuYXBwZW5kKHNwZWNpYWxEaXYpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BzID0gJCgnPGRpdiBjbGFzcz1cIml0ZW0tcHJvcGVydGllc1wiPjwvZGl2PicpXG4gICAgICBmb3IgKGNvbnN0IHAgb2YgY2hhdERhdGEucHJvcGVydGllcykge1xuICAgICAgICBwcm9wcy5hcHBlbmQoXG4gICAgICAgICAgYDxkaXYgY2xhc3M9XCJ0YWcgaXRlbS1wcm9wZXJ0eVwiPiR7Z2FtZS5pMThuLmxvY2FsaXplKHApfTwvZGl2PmBcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgZGl2LmFwcGVuZChwcm9wcylcblxuICAgICAgbGkuYXBwZW5kKGRpdi5oaWRlKCkpXG4gICAgICBkaXYuc2xpZGVEb3duKDIwMClcbiAgICB9XG4gICAgbGkudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJylcbiAgICAvLyAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnRvZ2dsZUNsYXNzKCdleHBhbmRlZCcpO1xuICB9XG5cbiAgX29uSW52ZW50b3J5SGVhZGVyIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnNpYmxpbmdzKCdsaScpLnNsaWRlVG9nZ2xlKDIwMClcbiAgfVxufVxuIiwiLyogZ2xvYmFsIERyYWdEcm9wLCBGb3JtQXBwbGljYXRpb24sIGZvdW5kcnksIGdhbWUsIHVpICovXG5pbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4uL2FjdG9ycy9hY3Rvci5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgX3BhcnRpY2lwYW50IH0gZnJvbSAnLi4vaXRlbXMvY2hhc2UvcGFydGljaXBhbnQuanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN0NoYXNlUGFydGljaXBhbnRJbXBvcnRlciBleHRlbmRzIEZvcm1BcHBsaWNhdGlvbiB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFkZEFjdG9yVG9DaGFzZScpLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvY2hhc2UtcGFydGljaXBhbnQtaW1wb3J0ZXIuaHRtbCcsXG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnZGlhbG9nJywgJ2NoYXNlLXBhcnRpY2lwYW50LWltcG9ydGVyJ10sXG4gICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgIHJlc2l6YWJsZTogZmFsc2UsXG4gICAgICBzdWJtaXRPbkNoYW5nZTogdHJ1ZSxcbiAgICAgIGNsb3NlT25TdWJtaXQ6IGZhbHNlLFxuICAgICAgd2lkdGg6IDMwMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgfSlcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGNvbnN0IHBhcnRpY2lwYW50RHJhZ0Ryb3AgPSBuZXcgRHJhZ0Ryb3Aoe1xuICAgICAgZHJvcFNlbGVjdG9yOiAnLmZvcm0tY29udGFpbmVyJyxcbiAgICAgIHBlcm1pc3Npb25zOiB7IGRyb3A6IGdhbWUudXNlci5pc0dNIH0sXG4gICAgICBjYWxsYmFja3M6IHsgZHJvcDogdGhpcy5fb25Ecm9wUGFydGljaXBhbnQuYmluZCh0aGlzKSB9XG4gICAgfSlcbiAgICBwYXJ0aWNpcGFudERyYWdEcm9wLmJpbmQoaHRtbFswXSlcblxuICAgIGNvbnN0IHRva2VuU2VsZWN0b3JEcmFnRHJvcCA9IG5ldyBEcmFnRHJvcCh7XG4gICAgICBkcmFnU2VsZWN0b3I6ICcuY2hhc2UtdG9rZW4nLFxuICAgICAgcGVybWlzc2lvbnM6IHtcbiAgICAgICAgZHJhZ3N0YXJ0OiBnYW1lLnVzZXIuaXNHTVxuICAgICAgfSxcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICBkcmFnc3RhcnQ6IHRoaXMuX29uVG9rZW5TZWxlY3RvckRyYWdTdGFydC5iaW5kKHRoaXMpXG4gICAgICB9XG4gICAgfSlcbiAgICB0b2tlblNlbGVjdG9yRHJhZ0Ryb3AuYmluZChodG1sWzBdKVxuXG4gICAgaHRtbC5maW5kKCcucmVzZXQtcGFydGljaXBhbnQnKS5jbGljayhhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLm9iamVjdCA9IHt9XG4gICAgICB0aGlzLl9hY3RvciA9IG51bGxcbiAgICAgIGF3YWl0IHRoaXMucmVuZGVyKHRydWUpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmZvb2QtY2hhaW4nKS5jbGljayhhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLm9iamVjdC5jaGFzZXIgPSAhdGhpcy5vYmplY3QuY2hhc2VyXG4gICAgICBhd2FpdCB0aGlzLnJlbmRlcih0cnVlKVxuICAgIH0pXG5cbiAgICBodG1sLmZpbmQoJ1tkYXRhLWFjdGlvbl0nKS5jbGljayh0aGlzLl9vbkFjdGlvbi5iaW5kKHRoaXMpKVxuXG4gICAgLy8gaHRtbC5maW5kKCdidXR0b24nKS5jbGljayh0aGlzLl9vbkJ1dHRvbi5iaW5kKHRoaXMpKVxuICB9XG5cbiAgYXN5bmMgX29uVG9rZW5TZWxlY3RvckRyYWdTdGFydCAoZXZlbnQpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgdHlwZTogJ2dldFRva2VuJyxcbiAgICAgIGFwcElkOiB0aGlzLmFwcElkLFxuICAgICAgY2FsbEJhY2s6ICdhZGRUb2tlblRvQ2hhc2UnXG4gICAgfVxuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBpZiAoIXRoaXMub2JqZWN0LmluaXRpYXRpdmUpIHtcbiAgICAgIGNvbnN0IGluaXQgPSBDb0NBY3Rvci5nZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24oKS5maW5kKFxuICAgICAgICBjID0+IGMua2V5ID09PSAnZGV4J1xuICAgICAgKVxuICAgICAgdGhpcy5vYmplY3QuaW5pdGlhdGl2ZSA9IGluaXQubGFiZWxcbiAgICAgIC8vIHRoaXMub2JqZWN0LmluaXRpYXRpdmUgPSBgJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAvLyAgICdDb0M3LkNoYXJhY3RlcmlzdGljcydcbiAgICAgIC8vICl9ICgke2luaXQuc2hvcnROYW1lfSlgXG4gICAgfVxuICAgIGlmICghdGhpcy5vYmplY3Quc3BlZWRDaGVjaykge1xuICAgICAgY29uc3Qgc3BlZWRDaGVjayA9IENvQ0FjdG9yLmdldENoYXJhY3RlcmlzdGljRGVmaW5pdGlvbigpLmZpbmQoXG4gICAgICAgIGMgPT4gYy5rZXkgPT09ICdjb24nXG4gICAgICApXG4gICAgICB0aGlzLm9iamVjdC5zcGVlZENoZWNrID0ge1xuICAgICAgICBuYW1lOiBzcGVlZENoZWNrLmxhYmVsXG4gICAgICB9XG4gICAgICAvLyB0aGlzLm9iamVjdC5zcGVlZENoZWNrID0ge1xuICAgICAgLy8gICBuYW1lOiBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ2hhcmFjdGVyaXN0aWNzJyl9ICgke1xuICAgICAgLy8gICAgIHNwZWVkQ2hlY2suc2hvcnROYW1lXG4gICAgICAvLyAgIH0pYFxuICAgICAgLy8gfVxuICAgIH1cblxuICAgIHRoaXMudmFsaWRhdGVQYXJ0aWNpcGFudCgpXG5cbiAgICAvLyBjb25zdCBzcGVlZENoZWNrID0gdGhpcy5hY3Rvcj8uZmluZCggdGhpcy5vYmplY3Quc3BlZWRDaGVjaz8ubmFtZSlcbiAgICAvLyBpZiggc3BlZWRDaGVjayl7XG4gICAgLy8gICB0aGlzLm9iamVjdC5zcGVlZENoZWNrID0gc3BlZWRDaGVja1xuICAgIC8vIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIGRhdGEucGFydGljaXBhbnQgPSBuZXcgX3BhcnRpY2lwYW50KHRoaXMub2JqZWN0KVxuICAgIGlmIChkYXRhLm9iamVjdC5zcGVlZENoZWNrLm5hbWUgJiYgdGhpcy5hY3Rvcikge1xuICAgICAgY29uc3Qgc3BlZWRDaGVjayA9IHRoaXMuYWN0b3IuZmluZChkYXRhLm9iamVjdC5zcGVlZENoZWNrLm5hbWUpXG4gICAgICBpZiAoc3BlZWRDaGVjaykge1xuICAgICAgICBkYXRhLm9iamVjdC5zcGVlZENoZWNrLnNjb3JlID0gc3BlZWRDaGVjay52YWx1ZS52YWx1ZVxuICAgICAgICBkYXRhLnNwZWVkQ2hlY2tSZWFkT25seSA9IHRydWVcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGRhdGEucGFydGljaXBhbnQuc3BlZWRDaGVjay5zY29yZSAmJlxuICAgICAgICAhdGhpcy5vYmplY3Quc3BlZWRDaGVjaz8uc2NvcmVcbiAgICAgICkge1xuICAgICAgICBkYXRhLm9iamVjdC5zcGVlZENoZWNrLnNjb3JlID0gZGF0YS5wYXJ0aWNpcGFudC5zcGVlZENoZWNrLnNjb3JlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGEub2JqZWN0LmluaXRpYXRpdmUgJiYgdGhpcy5hY3Rvcikge1xuICAgICAgY29uc3QgaW5pdGlhdGl2ZSA9IHRoaXMuYWN0b3IuZmluZChkYXRhLm9iamVjdC5pbml0aWF0aXZlKVxuICAgICAgaWYgKGluaXRpYXRpdmUpIHtcbiAgICAgICAgZGF0YS5vYmplY3QuZGV4ID0gaW5pdGlhdGl2ZS52YWx1ZS52YWx1ZVxuICAgICAgICBkYXRhLmluaXRSZWFkT25seSA9IHRydWVcbiAgICAgIH0gZWxzZSBkYXRhLm9iamVjdC5kZXggPSBkYXRhLnBhcnRpY2lwYW50LmluaXRpYXRpdmVcbiAgICB9XG5cbiAgICBkYXRhLmFjdG9yID0gdGhpcy5hY3RvclxuICAgIGRhdGEuY2hhc2UgPSB0aGlzLmNoYXNlXG4gICAgZGF0YS5kYXRhID0gdGhpcy5kYXRhXG5cbiAgICBkYXRhLm9wdGlvbnNMaXN0ID0ge31cbiAgICBpZiAodGhpcy5jaGFzZSkge1xuICAgICAgZGF0YS5za2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NMaXN0ID1cbiAgICAgICAgdGhpcy5jaGFzZS5hbGxTa2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NTaG9ydFxuICAgIH1cblxuICAgIGlmICh0aGlzLmFjdG9yKSB7XG4gICAgICBkYXRhLnNraWxsc0FuZENoYXJhY3RlcmlzdGljc0xpc3QgPSBbXVxuICAgICAgQ29DQWN0b3IuZ2V0Q2hhcmFjdGVyaXN0aWNEZWZpbml0aW9uKCkuZm9yRWFjaChjID0+XG4gICAgICAgIGRhdGEuc2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzTGlzdC5wdXNoKGAke2MubGFiZWx9YClcbiAgICAgIClcbiAgICAgIGRhdGEuc2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzTGlzdC5wdXNoKFxuICAgICAgICBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTHVjaycpfWBcbiAgICAgIClcbiAgICAgIGRhdGEuc2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzTGlzdC5wdXNoKFxuICAgICAgICBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU0FOJyl9YFxuICAgICAgKVxuICAgICAgdGhpcy5hY3Rvci5za2lsbHMuZm9yRWFjaChzID0+XG4gICAgICAgIGRhdGEuc2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzTGlzdC5wdXNoKHMubmFtZSlcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgZ2V0IGNoYXNlICgpIHtcbiAgICBpZiAoIXRoaXMuX2NoYXNlKSB7XG4gICAgICB0aGlzLl9jaGFzZSA9IENvQzdVdGlsaXRpZXMuU2Zyb21VdWlkKHRoaXMub2JqZWN0LmNoYXNlVXVpZClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NoYXNlXG4gIH1cblxuICBnZXQgYWN0b3IgKCkge1xuICAgIGlmICghdGhpcy5vYmplY3QuZG9jVXVpZCkgcmV0dXJuIG51bGxcbiAgICBpZiAoIXRoaXMuX2FjdG9yKSB7XG4gICAgICB0aGlzLl9hY3RvciA9IENvQzdVdGlsaXRpZXMuZ2V0QWN0b3JGcm9tS2V5KHRoaXMub2JqZWN0LmRvY1V1aWQpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hY3RvclxuICB9XG5cbiAgYXN5bmMgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGZvcm1EYXRhKSB7XG4gICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdCh0aGlzLCBmb3JtRGF0YSlcbiAgICBhd2FpdCB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcFBhcnRpY2lwYW50IChldmVudCkge1xuICAgIGNvbnN0IGRyb3BTdHJpbmcgPSBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpXG4gICAgY29uc3QgZHJvcERhdGEgPSBKU09OLnBhcnNlKGRyb3BTdHJpbmcpXG5cbiAgICBjb25zdCBkb2NVdWlkID0gQ29DN1V0aWxpdGllcy5nZXRBY3RvckRvY3VtZW50RnJvbURyb3BEYXRhKGRyb3BEYXRhKVxuXG4gICAgdGhpcy5vYmplY3QuZG9jVXVpZCA9IGRvY1V1aWRcblxuICAgIC8vIElmIGFjdG9yIGlzIGNvbnRyb2xsZWQgYnkgR00gb25seSB3ZSBhc3N1bWUgaGUgaXMgYSBjaGFzZXJcbiAgICB0aGlzLm9iamVjdC5jaGFzZXIgPSB0aGlzLmFjdG9yPy5vd25lcnM/LmZpbHRlcih1ID0+ICF1LmlzR00pLmxlbmd0aCA9PT0gMFxuICAgIGlmICh0aGlzLm9iamVjdC5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nKSB7XG4gICAgICBkZWxldGUgdGhpcy5vYmplY3Quc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZ1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyBhZGRUb2tlblRvQ2hhc2UgKHRva2Vucykge1xuICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLm9iamVjdC5kb2NVdWlkID0gdG9rZW5zWzBdLmRvY3VtZW50Py51dWlkXG4gICAgICAvLyBJZiBhY3RvciBpcyBjb250cm9sbGVkIGJ5IEdNIG9ubHkgd2UgYXNzdW1lIGhlIGlzIGEgY2hhc2VyXG4gICAgICB0aGlzLm9iamVjdC5jaGFzZXIgPSB0aGlzLmFjdG9yPy5vd25lcnM/LmZpbHRlcih1ID0+ICF1LmlzR00pLmxlbmd0aCA9PT0gMFxuICAgICAgaWYgKHRoaXMub2JqZWN0LnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmcpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMub2JqZWN0LnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmdcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMucmVuZGVyKHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JUb2tlbkluY29ycmVjdCcpKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vbkFjdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCBhY3Rpb24gPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2NoYXNlLWNhbmNlbCc6XG4gICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY2hhc2UtYWRkJzpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gbmV3IF9wYXJ0aWNpcGFudCh0aGlzLm9iamVjdClcblxuICAgICAgICAgIGlmICh0aGlzLmNoYXNlLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIShwYXJ0aWNpcGFudC5tb3ZlbWVudEFjdGlvbiAmJiBwYXJ0aWNpcGFudC5tb3ZlbWVudEFjdGlvbiA+IDApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Eb2VzTm90TWVldE1pbmltdW1SZXFUb0JlQWRkZWQnKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5vdmVycmlkZU1vdmVtZW50QWN0aW9uKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNsb3dlc3QgPSB0aGlzLmNoYXNlLnNsb3dlc3RQYXJ0aWNpcGFudFxuICAgICAgICAgICAgICBpZiAoaXNOYU4ocGFydGljaXBhbnQuYWRqdXN0ZWRNb3YpKSB7XG4gICAgICAgICAgICAgICAgcGFydGljaXBhbnQubW92ID0gc2xvd2VzdC5hZGp1c3RlZE1vdlxuICAgICAgICAgICAgICB9IC8qKiBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLm1vdiA9XG4gICAgICAgICAgICAgICAgICBzbG93ZXN0LmFkanVzdGVkTW92ICsgcGFydGljaXBhbnQubW92ZW1lbnRBY3Rpb24gLSAxXG4gICAgICAgICAgICAgIH0gKi9cbiAgICAgICAgICAgICAgdGhpcy5kYXRhLnJlY2FsY3VsYXRpb25OZWVkZWQgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGF3YWl0IHRoaXMuY2hhc2UuYWRkUGFydGljaXBhbnQocGFydGljaXBhbnQsIHtcbiAgICAgICAgICAgIGxvY2F0aW9uVXVpZDogdGhpcy5vYmplY3QubG9jYXRpb25VdWlkLFxuICAgICAgICAgICAgcmVjYWxjdWxhdGVNb3ZlbWVudEFjdGlvbnM6IHRoaXMuZGF0YS5yZWNhbGN1bGF0aW9uTmVlZGVkLFxuICAgICAgICAgICAgdXBkYXRlOiB0aGlzLm9iamVjdC51cGRhdGVcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3JvbGwtc3BlZWQtY2hlY2snOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgcGFydGljaXBhbnQgPSBuZXcgX3BhcnRpY2lwYW50KHRoaXMub2JqZWN0KVxuICAgICAgICAgIGlmIChwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnJlZlNldCkge1xuICAgICAgICAgICAgY29uc3Qgcm9sbCA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgICAgICAgcGFydGljaXBhbnQuZGF0YS5yb2xsZWQgPSB0cnVlXG4gICAgICAgICAgICByb2xsLmFjdG9yID0gcGFydGljaXBhbnQuYWN0b3IuYWN0b3JLZXlcbiAgICAgICAgICAgIGlmIChwYXJ0aWNpcGFudC5zcGVlZENoZWNrLmlzQ2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgICAgICAgICAgYXdhaXQgcm9sbC5yb2xsQ2hhcmFjdGVyaXN0aWMocGFydGljaXBhbnQuc3BlZWRDaGVjay5yZWYua2V5KVxuICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmcgPSByb2xsLkpTT05Sb2xsU3RyaW5nXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2suaXNTa2lsbCkge1xuICAgICAgICAgICAgICByb2xsLnNraWxsID0gcGFydGljaXBhbnQuc3BlZWRDaGVjay5yZWZcbiAgICAgICAgICAgICAgYXdhaXQgcm9sbC5yb2xsKClcbiAgICAgICAgICAgICAgcGFydGljaXBhbnQuZGF0YS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nID0gcm9sbC5KU09OUm9sbFN0cmluZ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0aWNpcGFudC5zcGVlZENoZWNrLmlzQXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHJvbGwucm9sbEF0dHJpYnV0ZShwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnJlZi5rZXkpXG4gICAgICAgICAgICAgIHBhcnRpY2lwYW50LmRhdGEuc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZyA9IHJvbGwuSlNPTlJvbGxTdHJpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2suc2NvcmUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvbGxEYXRhID0ge1xuICAgICAgICAgICAgICByYXdWYWx1ZTogcGFydGljaXBhbnQuc3BlZWRDaGVjay5zY29yZSxcbiAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IHBhcnRpY2lwYW50LnNwZWVkQ2hlY2submFtZSxcbiAgICAgICAgICAgICAgYWN0b3JOYW1lOiBwYXJ0aWNpcGFudC5uYW1lID8gcGFydGljaXBhbnQubmFtZSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnRpY2lwYW50Lmhhc0FjdG9yKSB7XG4gICAgICAgICAgICAgIHJvbGxEYXRhLmFjdG9yID0gcGFydGljaXBhbnQuYWN0b3IuYWN0b3JLZXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJvbGwgPSBDb0M3Q2hlY2suY3JlYXRlKHJvbGxEYXRhKVxuICAgICAgICAgICAgYXdhaXQgcm9sbC5yb2xsKClcbiAgICAgICAgICAgIHBhcnRpY2lwYW50LmRhdGEuc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZyA9IHJvbGwuSlNPTlJvbGxTdHJpbmdcbiAgICAgICAgICAgIHBhcnRpY2lwYW50LmRhdGEucm9sbGVkID0gdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QodGhpcy5vYmplY3QsIHBhcnRpY2lwYW50LmRhdGEpXG4gICAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVQYXJ0aWNpcGFudCAoKSB7XG4gICAgY29uc3QgcGFydGljaXBhbnQgPSBuZXcgX3BhcnRpY2lwYW50KHRoaXMub2JqZWN0KVxuICAgIGlmICghdGhpcy5kYXRhKSB0aGlzLmRhdGEgPSB7fVxuICAgIHRoaXMub2JqZWN0LmV4Y2x1ZGVkID0gZmFsc2VcbiAgICB0aGlzLm9iamVjdC5lc2NhcGVkID0gZmFsc2VcbiAgICB0aGlzLmRhdGEucmVjYWxjdWxhdGlvbk5lZWRlZCA9IGZhbHNlXG4gICAgdGhpcy5kYXRhLnBhcnRpY2lwYW50RXhjbHVkZWQgPSBmYWxzZVxuICAgIHRoaXMuZGF0YS5tb3ZlbWVudEFjdGlvbkRlbHRhID0gMFxuXG4gICAgaWYgKCF0aGlzLmRhdGEub3ZlcnJpZGVNb3ZlbWVudEFjdGlvbikge1xuICAgICAgY29uc3Qgc2xvd2VzdFByZXkgPSB0aGlzLmNoYXNlLnNsb3dlc3RQcmV5XG4gICAgICBjb25zdCBmYXN0ZXN0Q2hhc2VyID0gdGhpcy5jaGFzZS5mYXN0ZXN0Q2hhc2VyXG4gICAgICBjb25zdCBzbG93ZXN0ID0gdGhpcy5jaGFzZS5zbG93ZXN0UGFydGljaXBhbnRcblxuICAgICAgaWYgKHBhcnRpY2lwYW50LmFkanVzdGVkTW92IDwgc2xvd2VzdD8uYWRqdXN0ZWRNb3YpIHtcbiAgICAgICAgdGhpcy5kYXRhLnJlY2FsY3VsYXRpb25OZWVkZWQgPSB0cnVlXG4gICAgICAgIHBhcnRpY2lwYW50Lm1vdmVtZW50QWN0aW9uID0gMVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kYXRhLnJlY2FsY3VsYXRpb25OZWVkZWQgPSBmYWxzZVxuICAgICAgICBwYXJ0aWNpcGFudC5jYWxjdWxhdGVNb3ZlbWVudEFjdGlvbnMoc2xvd2VzdD8uYWRqdXN0ZWRNb3YpXG4gICAgICB9XG4gICAgICBpZiAocGFydGljaXBhbnQuaXNDaGFzZXIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNsb3dlc3RQcmV5ICYmXG4gICAgICAgICAgIXRoaXMuY2hhc2Uuc3lzdGVtLmluY2x1ZGVMYXN0Q29tbWVycyAmJlxuICAgICAgICAgIHBhcnRpY2lwYW50LmFkanVzdGVkTW92IDwgc2xvd2VzdFByZXkuYWRqdXN0ZWRNb3ZcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5vYmplY3QuZXhjbHVkZWQgPSB0cnVlXG4gICAgICAgICAgdGhpcy5kYXRhLnBhcnRpY2lwYW50RXhjbHVkZWQgPSB0cnVlXG4gICAgICAgICAgdGhpcy5kYXRhLmV4Y2x1ZGVkQmVjYXVzZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ub29TbG93JylcbiAgICAgICAgICB0aGlzLmRhdGEucmVjYWxjdWxhdGlvbk5lZWRlZCA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcnRpY2lwYW50LmlzUHJleSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZmFzdGVzdENoYXNlciAmJlxuICAgICAgICAgICF0aGlzLmNoYXNlLnN5c3RlbS5pbmNsdWRlRXNjYXBlZCAmJlxuICAgICAgICAgIHBhcnRpY2lwYW50LmFkanVzdGVkTW92ID4gZmFzdGVzdENoYXNlci5hZGp1c3RlZE1vdlxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5lc2NhcGVkID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuZGF0YS5wYXJ0aWNpcGFudEV4Y2x1ZGVkID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuZGF0YS5leGNsdWRlZEJlY2F1c2UgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVG9vRmFzdCcpXG4gICAgICAgICAgdGhpcy5kYXRhLnJlY2FsY3VsYXRpb25OZWVkZWQgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAoZGF0YSkge1xuICAgIGlmIChkYXRhLmRyb3BEYXRhKSB7XG4gICAgICBjb25zdCBkb2NVdWlkID0gQ29DN1V0aWxpdGllcy5nZXRBY3RvckRvY3VtZW50RnJvbURyb3BEYXRhKGRhdGEuZHJvcERhdGEpXG4gICAgICBpZiAoZG9jVXVpZCkgZGF0YS5kb2NVdWlkID0gZG9jVXVpZFxuICAgICAgZGVsZXRlIGRhdGEuZHJvcERhdGFcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDb0M3Q2hhc2VQYXJ0aWNpcGFudEltcG9ydGVyKGRhdGEpLnJlbmRlcih0cnVlKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgRGlhbG9nLCBEcmFnRHJvcCwgRm9ybURhdGFFeHRlbmRlZCwgZm91bmRyeSwgZ2FtZSwgSXRlbVNoZWV0LCBUZXh0RWRpdG9yLCB1aSAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcbmltcG9ydCB7IENvQzdDaGFzZVBhcnRpY2lwYW50SW1wb3J0ZXIgfSBmcm9tICcuLi8uLi9hcHBzL2NoYXNlLXBhcnRpY2lwYW50LWltcG9ydGVyLmpzJ1xuaW1wb3J0IHsgQ29DN0NoYXQgfSBmcm9tICcuLi8uLi9jaGF0LmpzJ1xuaW1wb3J0IHsgY2hhdEhlbHBlciB9IGZyb20gJy4uLy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBfcGFydGljaXBhbnQgfSBmcm9tICcuL3BhcnRpY2lwYW50LmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN0NoYXNlU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICAvKipcbiAgICogRXh0ZW5kIGFuZCBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zIHVzZWQgYnkgdGhlIFNpbXBsZSBJdGVtIFNoZWV0XG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0VjInLCAnaXRlbScsICdjaGFzZSddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL2NoYXNlLmh0bWwnLFxuICAgICAgd2lkdGg6IDU1MCxcbiAgICAgIGhlaWdodDogNTAwLFxuICAgICAgcmVzaXphYmxlOiB0cnVlLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcuc2hlZXQtbmF2JyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXQtYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ3BhcnRpY2lwYW50cydcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG5cbiAgICByZXR1cm4gb3B0aW9uc1xuXG4gICAgLy8gY2xvc2VPblN1Ym1pdDogZmFsc2UsXG4gICAgLy8gc3VibWl0T25DbG9zZTogdHJ1ZSxcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ2NvYzdDaGFzZVNoZWV0J1xuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICBhc3luYyBnZXREYXRhIChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKG9wdGlvbnMpXG5cbiAgICBzaGVldERhdGEucGFydGljaXBhbnRzID0gdGhpcy5pdGVtLnBhcnRpY2lwYW50c09iamVjdFxuICAgIHNoZWV0RGF0YS5wYXJ0aWNpcGFudHNCeUluaXRpYXRpdmUgPSB0aGlzLml0ZW0ucGFydGljaXBhbnRzQnlJbml0aWF0aXZlXG4gICAgc2hlZXREYXRhLnByZXlzID0gdGhpcy5pdGVtLnByZXlzXG4gICAgc2hlZXREYXRhLmNoYXNlcnMgPSB0aGlzLml0ZW0uY2hhc2Vyc1xuXG4gICAgc2hlZXREYXRhLnByZXlzTWluTW92ID0gc2hlZXREYXRhLnByZXlzLmxlbmd0aCA/IHNoZWV0RGF0YS5wcmV5cy5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHByZXYuYWRqdXN0ZWRNb3YgPCBjdXJyZW50LmFkanVzdGVkTW92ID8gcHJldiA6IGN1cnJlbnQpLmFkanVzdGVkTW92IDogLTFcblxuICAgIHNoZWV0RGF0YS5wcmV5c01heE1vdiA9IHNoZWV0RGF0YS5wcmV5cy5sZW5ndGggPyBzaGVldERhdGEucHJleXMucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiBwcmV2LmFkanVzdGVkTW92ID4gY3VycmVudC5hZGp1c3RlZE1vdiA/IHByZXYgOiBjdXJyZW50KS5hZGp1c3RlZE1vdiA6IC0xXG5cbiAgICBzaGVldERhdGEuY2hhc2Vyc01pbk1vdiA9IHNoZWV0RGF0YS5jaGFzZXJzLmxlbmd0aCA/IHNoZWV0RGF0YS5jaGFzZXJzLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4gcHJldi5hZGp1c3RlZE1vdiA8IGN1cnJlbnQuYWRqdXN0ZWRNb3YgPyBwcmV2IDogY3VycmVudCkuYWRqdXN0ZWRNb3YgOiAtMVxuXG4gICAgc2hlZXREYXRhLmNoYXNlcnNNYXhNb3YgPSBzaGVldERhdGEuY2hhc2Vycy5sZW5ndGggPyBzaGVldERhdGEuY2hhc2Vycy5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHByZXYuYWRqdXN0ZWRNb3YgPiBjdXJyZW50LmFkanVzdGVkTW92ID8gcHJldiA6IGN1cnJlbnQpLmFkanVzdGVkTW92IDogLTFcblxuICAgIHNoZWV0RGF0YS5jaGFzZXJzLmZvckVhY2gocCA9PiB7XG4gICAgICBpZiAocC5hZGp1c3RlZE1vdiA8IHNoZWV0RGF0YS5wcmV5c01pbk1vdikge1xuICAgICAgICBwLnRvb1Nsb3coKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcC5pbmNsdWRlSW5DaGFzZSgpXG4gICAgICB9XG4gICAgICBwLmZhc3Rlc3QgPSBwLmFkanVzdGVkTW92ID09PSBzaGVldERhdGEuY2hhc2Vyc01heE1vdlxuICAgICAgcC5zbG93ZXN0ID0gcC5hZGp1c3RlZE1vdiA9PT0gc2hlZXREYXRhLmNoYXNlcnNNaW5Nb3ZcbiAgICB9KVxuXG4gICAgc2hlZXREYXRhLnByZXlzLmZvckVhY2gocCA9PiB7XG4gICAgICBpZiAocC5hZGp1c3RlZE1vdiA+IHNoZWV0RGF0YS5jaGFzZXJzTWF4TW92KSB7XG4gICAgICAgIHAuZXNjYXBlZCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwLmluY2x1ZGVJbkNoYXNlKClcbiAgICAgIH1cbiAgICAgIHAuZmFzdGVzdCA9IHAuYWRqdXN0ZWRNb3YgPT09IHNoZWV0RGF0YS5wcmV5c01heE1vdlxuICAgICAgcC5zbG93ZXN0ID0gcC5hZGp1c3RlZE1vdiA9PT0gc2hlZXREYXRhLnByZXlzTWluTW92XG4gICAgfSlcblxuICAgIHNoZWV0RGF0YS5sb2NhdGlvbnMgPSB0aGlzLml0ZW0ubG9jYXRpb25zXG4gICAgc2hlZXREYXRhLmFsbEhhdmVWYWxpZE1vdiA9IHRoaXMuYWxsSGF2ZVZhbGlkTW92XG4gICAgc2hlZXREYXRhLmFjdGl2ZUxvY2F0aW9uID0gdGhpcy5pdGVtLmFjdGl2ZUxvY2F0aW9uXG4gICAgaWYgKHNoZWV0RGF0YS5hY3RpdmVMb2NhdGlvbikge1xuICAgICAgc2hlZXREYXRhLmFjdGl2ZUxvY2F0aW9uLnRpdGxlID0gc2hlZXREYXRhLmFjdGl2ZUxvY2F0aW9uLmNvb3JkaW5hdGVzXG4gICAgICAgID8gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Mb2NhdGlvbkNvb3JkaW5hdGUnLCB7XG4gICAgICAgICAgeDogc2hlZXREYXRhLmFjdGl2ZUxvY2F0aW9uLmNvb3JkaW5hdGVzLngsXG4gICAgICAgICAgeTogc2hlZXREYXRhLmFjdGl2ZUxvY2F0aW9uLmNvb3JkaW5hdGVzLnlcbiAgICAgICAgfSlcbiAgICAgICAgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRHJhZ09uQ2FudmFzJylcbiAgICB9XG4gICAgc2hlZXREYXRhLnByZXZpb3VzTG9jYXRpb24gPSB0aGlzLml0ZW0ucHJldmlvdXNMb2NhdGlvblxuICAgIHNoZWV0RGF0YS5uZXh0TG9jYXRpb24gPSB0aGlzLml0ZW0ubmV4dExvY2F0aW9uXG4gICAgc2hlZXREYXRhLnN0YXJ0ZWQgPSB0aGlzLml0ZW0uc3RhcnRlZFxuXG4gICAgc2hlZXREYXRhLmlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlcixcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIC8vIGdldCBhY3RpdmVQYXJ0aWNpcGFudCAoKSB7XG4gIC8vICAgaWYgKCF0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cykgcmV0dXJuIHVuZGVmaW5lZFxuICAvLyAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMuZmluZChwID0+IHAuYWN0aXZlKVxuICAvLyAgIGlmICghcGFydGljaXBhbnQpIHJldHVybiB1bmRlZmluZWRcbiAgLy8gICByZXR1cm4gbmV3IF9wYXJ0aWNpcGFudChwYXJ0aWNpcGFudClcbiAgLy8gfVxuXG4gIC8vIGdldCBhY3RpdmVQYXJ0aWNpcGFudExvY2F0aW9uICgpIHtcbiAgLy8gICBpZiAoIXRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzKSByZXR1cm4gdW5kZWZpbmVkXG4gIC8vICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cy5maW5kKHAgPT4gcC5hY3RpdmUpXG4gIC8vIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIC8vIGh0bWwuZmluZCgnLmNoYXNlLXRyYWNrJykucmVhZHkoYXN5bmMgaHRtbCA9PiBhd2FpdCB0aGlzLl9vblNoZWV0UmVhZHkoaHRtbCkpXG5cbiAgICAvLyBIYW5kbGUgRHJvcHJvd25cbiAgICBodG1sXG4gICAgICAuZmluZCgnLmRyb3Bkb3duLWVsZW1lbnQnKVxuICAgICAgLm9uKCdjbGljaycsIGV2ZW50ID0+IHRoaXMuX29uRHJvcERvd25FbGVtZW50U2VsZWN0ZWQoZXZlbnQpKVxuXG4gICAgaHRtbC5maW5kKCcuZHJvcGJ0bicpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICBjb25zdCBkcm9wZG93biA9IHRhcmdldC5jbG9zZXN0KCcuZHJvcGRvd24nKVxuICAgICAgY29uc3QgZHJvcGRvd25Db250ZW50ID0gZHJvcGRvd24ucXVlcnlTZWxlY3RvcignLmRyb3Bkb3duLWNvbnRlbnQnKVxuICAgICAgZHJvcGRvd25Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKVxuICAgIH0pXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5kcm9wZG93bicpXG4gICAgICAubW91c2VsZWF2ZShldmVudCA9PlxuICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wZG93bi1jb250ZW50JylcbiAgICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpXG4gICAgICApXG5cbiAgICBodG1sLm9uKCdkYmxjbGljaycsICcub3Blbi1hY3RvcicsIENvQzdDaGF0Ll9vbk9wZW5BY3Rvci5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5waW4tbG9jYXRpb24nKVxuICAgICAgLmNvbnRleHRtZW51KHRoaXMuY2xlYXJBY3RpdmVMb2NhdGlvbkNvb3JkaW5hdGVzLmJpbmQodGhpcykpXG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnLnBhcnRpY2lwYW50JylcbiAgICAgIC5vbignZHJhZ2VudGVyJywgZXZlbnQgPT4gdGhpcy5fb25EcmFnRW50ZXJQYXJ0aWNpcGFudChldmVudCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5wYXJ0aWNpcGFudCcpXG4gICAgICAub24oJ2RyYWdvdmVyJywgZXZlbnQgPT4gdGhpcy5fb25EcmFnRW50ZXJQYXJ0aWNpcGFudChldmVudCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5wYXJ0aWNpcGFudCcpXG4gICAgICAub24oJ2RyYWdsZWF2ZScsIGV2ZW50ID0+IHRoaXMuX29uRHJhZ0xlYXZlUGFydGljaXBhbnQoZXZlbnQpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcucGFydGljaXBhbnQnKVxuICAgICAgLm9uKCdkcm9wJywgZXZlbnQgPT4gdGhpcy5fb25EcmFnTGVhdmVQYXJ0aWNpcGFudChldmVudCkpXG5cbiAgICBodG1sLmZpbmQoJy5wLXNpZGUnKS5jbGljayh0aGlzLl9vbkNoYW5nZVNpZGUuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5kZWxldGUtcGFydGljaXBhbnQnKS5jbGljayh0aGlzLl9vbkRlbGV0ZVBhcnRpY2lwYW50LmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcucmVzZXQtcm9sbCcpLmNsaWNrKHRoaXMuX29uUmVzZXRSb2xsLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuZGVsZXRlLWRyaXZlcicpLmNsaWNrKHRoaXMuX29uRGVsZXRlRHJpdmVyLmJpbmQodGhpcykpXG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnLm5ldy1wYXJ0aWNpcGFudCcpXG4gICAgICAub24oJ2RyYWdlbnRlcicsIGV2ZW50ID0+IHRoaXMuX29uRHJhZ0VudGVyUGFydGljaXBhbnQoZXZlbnQpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcubmV3LXBhcnRpY2lwYW50JylcbiAgICAgIC5vbignZHJhZ292ZXInLCBldmVudCA9PiB0aGlzLl9vbkRyYWdFbnRlclBhcnRpY2lwYW50KGV2ZW50KSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLm5ldy1wYXJ0aWNpcGFudCcpXG4gICAgICAub24oJ2RyYWdsZWF2ZScsIGV2ZW50ID0+IHRoaXMuX29uRHJhZ0xlYXZlUGFydGljaXBhbnQoZXZlbnQpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcubmV3LXBhcnRpY2lwYW50JylcbiAgICAgIC5vbignZHJvcCcsIGV2ZW50ID0+IHRoaXMuX29uRHJhZ0xlYXZlUGFydGljaXBhbnQoZXZlbnQpKVxuXG4gICAgaHRtbC5maW5kKCcuYWRkLXNpZ24nKS5jbGljayh0aGlzLl9vbkFkZFBhcnRpY2lwYW50LmJpbmQodGhpcykpXG5cbiAgICBodG1sLmZpbmQoJy5yb2xsLXBhcnRpY2lwYW50JykuY2xpY2sodGhpcy5fb25Sb2xsUGFydGljaXBhbnQuYmluZCh0aGlzKSlcblxuICAgIGh0bWwuZmluZCgnLmJ1dHRvbicpLmNsaWNrKHRoaXMuX29uQnV0dG9uQ2xpY2suYmluZCh0aGlzKSlcblxuICAgIGh0bWwuZmluZCgnLm5hbWUtY29udGFpbmVyJykuY2xpY2sodGhpcy5fb25Mb2NhdGlvbkNsaWNrLmJpbmQodGhpcykpXG5cbiAgICBodG1sLmZpbmQoJy5vYnN0YWNsZS10eXBlJykuY2xpY2sodGhpcy5fb25PYnN0YWNsZVR5cGVDbGljay5iaW5kKHRoaXMpKVxuICAgIC8vIGh0bWwuZmluZCgnLm9ic3RhY2xlLXRvZ2dsZScpLmNsaWNrKHRoaXMuX29uT2JzdGFjbGVUb2dnbGVDbGljay5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLnRvZ2dsZScpLmNsaWNrKHRoaXMuX29uVG9nZ2xlLmJpbmQodGhpcykpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5wYXJ0aWNpcGFudC1jb250cm9sJylcbiAgICAgIC5jbGljayh0aGlzLl9vblBhcnRpY2lwYW50Q29udHJvbENsaWNrZWQuYmluZCh0aGlzKSlcblxuICAgIGh0bWwuZmluZCgnLmNoYXNlLWNvbnRyb2wnKS5jbGljayh0aGlzLl9vbkNoYXNlQ29udHJvbENsaWNrZWQuYmluZCh0aGlzKSlcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcubG9jYXRpb24tY29udHJvbCcpXG4gICAgICAuY2xpY2sodGhpcy5fb25Mb2NhdGlvbkNvbnRyb2xDbGljay5iaW5kKHRoaXMpKVxuICAgIC8vIGh0bWxcbiAgICAvLyAgIC5maW5kKCcubW92ZW1lbnQtYWN0aW9uIC5kZWNyZWFzZScpXG4gICAgLy8gICAuY2xpY2sodGhpcy5fb25DaGFuZ2VNb3ZlbWVudEFjdGlvbnMuYmluZCh0aGlzLCAtMSkpXG4gICAgLy8gaHRtbFxuICAgIC8vICAgLmZpbmQoJy5tb3ZlbWVudC1hY3Rpb24gLmluY3JlYXNlJylcbiAgICAvLyAgIC5jbGljayh0aGlzLl9vbkNoYW5nZU1vdmVtZW50QWN0aW9ucy5iaW5kKHRoaXMsIDEpKVxuXG4gICAgLy8gaHRtbFxuICAgIC8vIC5maW5kKCcucGluLWxvY2F0aW9uJylcbiAgICAvLyAub24oJ2RyYWdzdGFydCcsIGV2ZW50ID0+IHRoaXMuX29uUGluTG9jYXRpb25EcmFnU3RhcnQoZXZlbnQpKVxuXG4gICAgY29uc3QgcGluTG9jYXRpb25TZWxlY3RvckRyYWdEcm9wID0gbmV3IERyYWdEcm9wKHtcbiAgICAgIGRyYWdTZWxlY3RvcjogJy5waW4tbG9jYXRpb24nLFxuICAgICAgcGVybWlzc2lvbnM6IHtcbiAgICAgICAgZHJhZ3N0YXJ0OiB0aGlzLl9jYW5QaW5Mb2NhdGlvbkRyYWdTdGFydC5iaW5kKHRoaXMpXG4gICAgICB9LFxuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIGRyYWdzdGFydDogdGhpcy5fb25QaW5Mb2NhdGlvbkRyYWdTdGFydC5iaW5kKHRoaXMpXG4gICAgICB9XG4gICAgfSlcbiAgICBwaW5Mb2NhdGlvblNlbGVjdG9yRHJhZ0Ryb3AuYmluZChodG1sWzBdKVxuXG4gICAgY29uc3QgcGFydGljaXBhbnREcmFnRHJvcCA9IG5ldyBEcmFnRHJvcCh7XG4gICAgICBkcm9wU2VsZWN0b3I6ICcucGFydGljaXBhbnQnLFxuICAgICAgY2FsbGJhY2tzOiB7IGRyb3A6IHRoaXMuX29uRHJvcFBhcnRpY2lwYW50LmJpbmQodGhpcykgfVxuICAgIH0pXG4gICAgcGFydGljaXBhbnREcmFnRHJvcC5iaW5kKGh0bWxbMF0pXG5cbiAgICBjb25zdCBuZXdQYXJ0aWNpcGFudERyYWdEcm9wID0gbmV3IERyYWdEcm9wKHtcbiAgICAgIGRyb3BTZWxlY3RvcjogJy5uZXctcGFydGljaXBhbnQnLFxuICAgICAgY2FsbGJhY2tzOiB7IGRyb3A6IHRoaXMuX29uQWRkUGFydGljaXBhbnQuYmluZCh0aGlzKSB9XG4gICAgfSlcbiAgICBuZXdQYXJ0aWNpcGFudERyYWdEcm9wLmJpbmQoaHRtbFswXSlcblxuICAgIGlmICh0aGlzLml0ZW0uc3RhcnRlZCkge1xuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnLmNoYXNlLWxvY2F0aW9uIC5jaGFzZS1wYXJ0aWNpcGFudCcpXG4gICAgICAgIC5jbGljayh0aGlzLl9vbkNoYXNlUGFydGljaXBhbnRDbGljay5iaW5kKHRoaXMpKVxuXG4gICAgICBjb25zdCBjaGFzZVBhcnRpY2lwYW50RHJhZ3BEcm9wID0gbmV3IERyYWdEcm9wKHtcbiAgICAgICAgZHJhZ1NlbGVjdG9yOiAnLmNoYXNlLXBhcnRpY2lwYW50JyxcbiAgICAgICAgZHJvcFNlbGVjdG9yOiAnLmNoYXNlLWxvY2F0aW9uJyxcbiAgICAgICAgcGVybWlzc2lvbnM6IHtcbiAgICAgICAgICBkcmFnc3RhcnQ6IHRoaXMuX2NhbkNoYXNlUGFydGljaXBhbnREcmFnU3RhcnQuYmluZCh0aGlzKSxcbiAgICAgICAgICBkcm9wOiB0aGlzLl9jYW5DaGFzZVBhcnRpY2lwYW50RHJhZ0Ryb3AuYmluZCh0aGlzKVxuICAgICAgICB9LFxuICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICBkcmFnc3RhcnQ6IHRoaXMuX29uQ2hhc2VQYXJ0aWNpcGFudERyYWdTdGFydC5iaW5kKHRoaXMpLFxuICAgICAgICAgIGRyb3A6IHRoaXMuX29uQ2hhc2VQYXJ0aWNpcGFudERyYWdEcm9wLmJpbmQodGhpcyksXG4gICAgICAgICAgZHJhZ292ZXI6IHRoaXMuX29uRHJhZ0VudGVyLmJpbmQodGhpcylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGNoYXNlUGFydGljaXBhbnREcmFncERyb3AuYmluZChodG1sWzBdKVxuXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuY2hhc2UtbG9jYXRpb24nKVxuICAgICAgICAub24oJ2RyYWdsZWF2ZScsIGV2ZW50ID0+IHRoaXMuX29uRHJhZ0xlYXZlKGV2ZW50KSlcbiAgICB9XG4gIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAvKiAgRm9ybSBTdWJtaXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgX2dldFN1Ym1pdERhdGEgKHVwZGF0ZURhdGEgPSB7fSkge1xuICAgIC8vIENyZWF0ZSB0aGUgZXhwYW5kZWQgdXBkYXRlIGRhdGEgb2JqZWN0XG4gICAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGFFeHRlbmRlZCh0aGlzLmZvcm0sIHsgZWRpdG9yczogdGhpcy5lZGl0b3JzIH0pXG4gICAgbGV0IGRhdGEgPSBmZC5vYmplY3RcbiAgICBpZiAodXBkYXRlRGF0YSkge1xuICAgICAgZGF0YSA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QoZGF0YSwgdXBkYXRlRGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGRhdGEpXG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdGhhdCBzdGFydGluZyBwb3NpdGlvbiBpcyBub3Qgb3V0c2lkZSBvZiBjaGFzZSByYW5nZS5cbiAgICBpZiAoXG4gICAgICB0aGlzLml0ZW0uc3lzdGVtLmxvY2F0aW9ucz8ubGlzdD8ubGVuZ3RoICYmXG4gICAgICBkYXRhLnN5c3RlbS5zdGFydGluZ0luZGV4ID4gdGhpcy5pdGVtLnN5c3RlbS5sb2NhdGlvbnMubGlzdC5sZW5ndGhcbiAgICApIHtcbiAgICAgIGRhdGEuc3lzdGVtLnN0YXJ0aW5nSW5kZXggPSB0aGlzLml0ZW0uc3lzdGVtLmxvY2F0aW9ucy5saXN0Lmxlbmd0aFxuICAgIH1cblxuICAgIGlmIChkYXRhLnN5c3RlbS5wYXJ0aWNpcGFudHMpIHtcbiAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzKVxuICAgICAgLy8gSGFuZGxlIHBhcnRpY2lwYW50cyBhcnJheVxuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YS5zeXN0ZW0ucGFydGljaXBhbnRzKSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnRpY2lwYW50cy5maW5kSW5kZXgocCA9PiBwLnV1aWQgPT09IGspXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ1BhcnRpY2lwYW50IHRhYmxlIGNvcnJ1cHRlZCcpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gcGFydGljaXBhbnRzW2luZGV4XVxuICAgICAgICAgIGNvbnN0IGNsZWFuZWQgPSBjbGVhbih2KVxuICAgICAgICAgIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qob3JpZ2luYWwsIGNsZWFuZWQpXG4gICAgICAgICAgcGFydGljaXBhbnRzW2luZGV4XSA9IG9yaWdpbmFsXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGF0YS5zeXN0ZW0ucGFydGljaXBhbnRzID0gcGFydGljaXBhbnRzXG4gICAgfVxuXG4gICAgaWYgKGRhdGEubG9jYXRpb25zKSB7XG4gICAgICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgICAgLy8gSGFuZGxlIGxvY2F0aW9ucyBsaXN0XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhLmxvY2F0aW9ucykpIHtcbiAgICAgICAgY29uc3QgbG9jYXRpb25JbmRleCA9IGxvY2F0aW9ucy5maW5kSW5kZXgobCA9PiBsLnV1aWQgPT09IGtleSlcbiAgICAgICAgaWYgKGxvY2F0aW9uSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignTG9jYXRpb25zIHRhYmxlIGNvcnJ1cHRlZCcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgb3JpZ2luYWxMb2NhdGlvbiA9IGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XVxuICAgICAgICAgIGNvbnN0IGNsZWFuZWQgPSBjbGVhbih2YWx1ZSlcbiAgICAgICAgICBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KG9yaWdpbmFsTG9jYXRpb24sIGNsZWFuZWQpXG4gICAgICAgICAgbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdID0gb3JpZ2luYWxMb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBkYXRhLmxvY2F0aW9uc1xuICAgICAgZGF0YS5zeXN0ZW0ubG9jYXRpb25zID0geyBsaXN0OiBsb2NhdGlvbnMgfVxuICAgIH1cbiAgICAvLyBjb25zdCBwYXJ0aWNpcGFudHMgPSBkYXRhLnN5c3RlbT8ucGFydGljaXBhbnRzO1xuICAgIC8vIGlmKCBwYXJ0aWNpcGFudHMpIGRhdGEuc3lzdGVtLnBhcnRpY2lwYW50cyA9IE9iamVjdC52YWx1ZXMoIHBhcnRpY2lwYW50cykubWFwKCBwID0+IGNsZWFuKHApKTtcblxuICAgIC8vIFJldHVybiB0aGUgZmxhdHRlbmVkIHN1Ym1pc3Npb24gZGF0YVxuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLmZsYXR0ZW5PYmplY3QoZGF0YSlcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgLy8gYXN5bmMgX29uU3VibWl0KC4uLmFyZ3MpIHtcbiAgLy8gIGF3YWl0IHN1cGVyLl9vblN1Ym1pdCguLi5hcmdzKTtcbiAgLy8gfVxuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBvdmVycmlkZSA9IHRhcmdldD8uZGF0YXNldD8ub3ZlcnJpZGUgPT09ICd0cnVlJ1xuICAgIGlmICh0YXJnZXQ/Lm5hbWU/LmluY2x1ZGVzKCcuaHAnKSkge1xuICAgICAgY29uc3QgWywgLCB1dWlkXSA9IHRhcmdldC5uYW1lLnNwbGl0KCcuJylcbiAgICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5pdGVtLmdldFBhcnRpY2lwYW50KHV1aWQpXG4gICAgICBpZiAocGFydGljaXBhbnQgJiYgcGFydGljaXBhbnQuYWN0b3IpIHtcbiAgICAgICAgaWYgKCFpc05hTihOdW1iZXIodGFyZ2V0LnZhbHVlKSkpIHtcbiAgICAgICAgICBhd2FpdCBwYXJ0aWNpcGFudC5hY3Rvci5zZXRIcChOdW1iZXIodGFyZ2V0LnZhbHVlKSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3ZlcnJpZGUpIHtcbiAgICAgIGNvbnN0IFssIHR5cGUsIHV1aWQsIHN1YlR5cGUsIGRhdGFdID0gdGFyZ2V0Lm5hbWUuc3BsaXQoJy4nKVxuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmZpbmRQYXJ0aWNpcGFudEluZGV4KHV1aWQpXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGUgPT09ICdwYXJ0aWNpcGFudHMnICYmXG4gICAgICAgICFpc05hTihpbmRleCkgJiZcbiAgICAgICAgc3ViVHlwZSA9PT0gJ3NwZWVkLWNoZWNrJ1xuICAgICAgKSB7XG4gICAgICAgIGlmIChkYXRhID09PSAnbmFtZScpIHtcbiAgICAgICAgICAvLyBDaGFuZ2luZyBuYW1lIHdpbGwgcmVtb3ZlIGFsbCBvdGhlciByZWYgIVxuICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICAgICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzKVxuICAgICAgICAgICAgOiBbXVxuICAgICAgICAgIGlmIChwYXJ0aWNpcGFudHNbaW5kZXhdLnNwZWVkQ2hlY2spIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwYXJ0aWNpcGFudHNbaW5kZXhdLnNwZWVkQ2hlY2suaWRcbiAgICAgICAgICAgIGRlbGV0ZSBwYXJ0aWNpcGFudHNbaW5kZXhdLnNwZWVkQ2hlY2sudHlwZVxuICAgICAgICAgIH0gZWxzZSBwYXJ0aWNpcGFudHNbaW5kZXhdLnNwZWVkQ2hlY2sgPSB7fVxuICAgICAgICAgIHBhcnRpY2lwYW50c1tpbmRleF0uc3BlZWRDaGVjay5uYW1lID0gdGFyZ2V0LnZhbHVlXG4gICAgICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIuX3VwZGF0ZU9iamVjdChldmVudCwgZm9ybURhdGEpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgc2V0U2Nyb2xsIChhcHAsIGh0bWwsIGRhdGEpIHtcbiAgICBpZiAoIWRhdGEuZWRpdGFibGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBpbml0aWFsT3BlbmluZyA9IGh0bWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKCd3aW5kb3ctYXBwJylcbiAgICBjb25zdCBjaGFzZVRyYWNrID0gaHRtbFswXS5xdWVyeVNlbGVjdG9yKCcuY2hhc2UtdHJhY2snKVxuICAgIGlmICghY2hhc2VUcmFjaykgcmV0dXJuXG5cbiAgICBsZXQgc3RhcnQgPSBkYXRhLmRhdGEuc2Nyb2xsPy5jaGFzZVRyYWNrLmZyb21cbiAgICBsZXQgZW5kID0gZGF0YS5kYXRhLnNjcm9sbD8uY2hhc2VUcmFjay50b1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzdGFydCA9IDBcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlbmQgPSAtMVxuICAgIH1cblxuICAgIGlmIChpbml0aWFsT3BlbmluZykge1xuICAgICAgY29uc3QgcmVtU3RyaW5nID0gJCgnOnJvb3QnKS5jc3MoJ2ZvbnQtc2l6ZScpXG4gICAgICBjb25zdCByZW1TaXplID0gTnVtYmVyKHJlbVN0cmluZy5yZXBsYWNlKCdweCcsICcnKSlcbiAgICAgIGlmIChhcHAuaXRlbS5zdGFydGVkKSB7XG4gICAgICAgIGNvbnN0IHBDb3VudCA9IGFwcC5pdGVtLmFjdHVhbFBhcnRpY2lwYW50cz8ubGVuZ3RoXG4gICAgICAgIGNvbnN0IHdpZHRoID0gKHBDb3VudCAqIDExLjIgKyAzKSAqIHJlbVNpemVcbiAgICAgICAgYXBwLmFjdGl2YXRlVGFiKCdzZXR1cCcpXG4gICAgICAgIC8vIGFwcC5fdGFic1swXS5hY3RpdmUgPSAnc2V0dXAnXG4gICAgICAgIGFwcC5wb3NpdGlvbi53aWR0aCA9IE1hdGgubWF4KHdpZHRoLCA0MCAqIHJlbVNpemUpXG4gICAgICAgIC8vIGh0bWwuY3NzKCd3aWR0aCcsIGAke3dpZHRofXB4YClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcC5wb3NpdGlvbi53aWR0aCA9IDQ1ICogcmVtU2l6ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGF3YWl0IGFwcC5pdGVtLmFjdGl2YXRlTmV4dFBhcnRpY2lwYW50VHVybih7IGh0bWwgfSkgLy8gaHRtbCBpcyBub3QgcmVuZGVyZWQsIGVsZW1lbnQgaGF2ZSBzaXplID0gMFxuICAgICAgLy8gaWYgKGVuZCA+IDApIHtcbiAgICAgIC8vICAgc3RhcnQgPSAwXG4gICAgICAvLyB9IGVsc2UgaWYgKHN0YXJ0ID4gMCkge1xuICAgICAgLy8gICBlbmQgPSBzdGFydFxuICAgICAgLy8gICBzdGFydCA9IDBcbiAgICAgIC8vIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgJiYgc3RhcnQgIT09IC0xKSB7XG4gICAgICBjaGFzZVRyYWNrLnNjcm9sbFRvKHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiBzdGFydCxcbiAgICAgICAgYmVoYXZpb3I6ICdpbnN0YW50J1xuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoZW5kICE9PSAtMSkge1xuICAgICAgY2hhc2VUcmFjay5zY3JvbGxUbyh7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogZW5kLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gYXdhaXQgYXBwLml0ZW0udXBkYXRlKHsgJ2RhdGEudHJhY2tTY3JvbGxQb3NpdGlvbic6IGVsZW1lbnRDZW50ZXJSZWxhdGl2ZUxlZnQgfSlcbiAgfVxuXG4gIHN0YXRpYyBvbkNsb3NlIChhcHAsIGh0bWwpIHtcbiAgICBhcHAuaXRlbS51cGRhdGUoeyAnc3lzdGVtLnRyYWNrU2Nyb2xsUG9zaXRpb24nOiAtMSB9KVxuICB9XG5cbiAgLy8gYXN5bmMgX29uU2hlZXRSZWFkeSAoaHRtbCkge1xuICAvLyAgIGNvbnN0IHRyYWNrID0gaHRtbC5maW5kKCcuY2hhc2UtdHJhY2snKVxuICAvLyAgIGNvbnN0IGVsZW1lbnQgPSAkKHRyYWNrKS5maW5kKCcuYWN0aXZlJylcblxuICAvLyAgIGNvbnN0IGVsZW1lbnRsZWZ0ID0gZWxlbWVudFswXS5vZmZzZXRMZWZ0XG4gIC8vICAgY29uc3QgZGl2V2lkdGggPSB0cmFja1swXS5jbGllbnRXaWR0aFxuICAvLyAgIGxldCBlbGVtZW50Q2VudGVyUmVsYXRpdmVMZWZ0ID0gZWxlbWVudGxlZnQgLSBkaXZXaWR0aCAvIDJcbiAgLy8gICBpZiAoZWxlbWVudENlbnRlclJlbGF0aXZlTGVmdCA8IDApIGVsZW1lbnRDZW50ZXJSZWxhdGl2ZUxlZnQgPSAwXG5cbiAgLy8gICBjb25zdCBzY3JvbGxQb3NpdGlvbiA9IHRoaXMuaXRlbS5zeXN0ZW0udHJhY2tTY3JvbGxQb3NpdGlvblxuICAvLyAgIGlmICghdHJhY2subGVuZ3RoKSByZXR1cm5cbiAgLy8gICBpZiAoIXNjcm9sbFBvc2l0aW9uKSByZXR1cm5cbiAgLy8gICBjb25zdCB0cmFja0VsZW1lbnQgPSB0cmFja1swXVxuICAvLyAgIHRyYWNrRWxlbWVudC5zY3JvbGxUbyh7XG4gIC8vICAgICB0b3A6IDAsXG4gIC8vICAgICBsZWZ0OiBlbGVtZW50Q2VudGVyUmVsYXRpdmVMZWZ0LFxuICAvLyAgICAgYmVoYXZpb3I6ICdpbnN0YW50J1xuICAvLyAgIH0pXG5cbiAgLy8gICAvL1RPRE8gOiBjb3VsZGQgdXNlIHBhcmVudC5vZmZzZXRUb3AgZXQgY2hpbGQub2Zmc2V0VG9wIHRvIGNlbnRlciB0aGUgYWN0aXZlIGVsZW1lbnRcblxuICAvLyAgIC8vIGNvbnN0IGFjdGl2ZSA9IGh0bWwuZmluZCgnLm5hbWUtY29udGFpbmVyLmFjdGl2ZScpXG4gIC8vICAgLy8gaWYoIGFjdGl2ZSl7XG4gIC8vICAgLy8gICBjb25zdCBlbGVtZW50ID0gYWN0aXZlWzBdXG4gIC8vICAgLy8gICBlbGVtZW50LnNjcm9sbEludG9WaWV3KHtiZWhhdmlvcjogXCJzbW9vdGhcIiwgYmxvY2s6IFwiZW5kXCIsIGlubGluZTogXCJjZW50ZXJcIn0pXG4gIC8vICAgLy8gZWxlbWVudC5zY3JvbGxJbnRvVmlldyhmYWxzZSlcbiAgLy8gICAvLyB9XG4gIC8vICAgLy8gfSlcbiAgLy8gfVxuXG4gIGZpbmRQYXJ0aWNpcGFudEluZGV4ICh1dWlkKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzLmZpbmRJbmRleChwID0+IHAudXVpZCA9PT0gdXVpZClcbiAgfVxuXG4gIGZpbmRMb2NhdGlvbkluZGV4ICh1dWlkKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLmxpc3QuZmluZEluZGV4KHAgPT4gcC51dWlkID09PSB1dWlkKVxuICB9XG5cbiAgZmluZExvY2F0aW9uICh1dWlkKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLmxpc3QuZmluZChwID0+IHAudXVpZCA9PT0gdXVpZClcbiAgfVxuXG4gIGZpbmRJbmRleCAobGlzdCwgdXVpZCkge1xuICAgIHJldHVybiBsaXN0LmZpbmRJbmRleChwID0+IHAudXVpZCA9PT0gdXVpZClcbiAgfVxuXG4gIGFzeW5jIF9vbkRyb3BEb3duRWxlbWVudFNlbGVjdGVkIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICB0YXJnZXQuY2xvc2VzdCgnLmRyb3Bkb3duLWNvbnRlbnQnKT8uY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpXG4gICAgY29uc3QgYXNzaXN0YW50VXVpZCA9IHRhcmdldC5jbG9zZXN0KCcuaW5pdGlhdGl2ZS1ibG9jaycpPy5kYXRhc2V0Py51dWlkXG4gICAgY29uc3QgYmVuZWZpY2lhcnlVdWlkID0gdGFyZ2V0LmRhdGFzZXQuYmVuZWZpY2lhcnlVdWlkXG4gICAgYXdhaXQgdGhpcy5pdGVtLmFzc2lzdFBhcnRpY2lwYW50KGFzc2lzdGFudFV1aWQsIGJlbmVmaWNpYXJ5VXVpZClcbiAgfVxuXG4gIGFzeW5jIF9vblRvZ2dsZSAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgLy8gY29uc3QgbG9jYXRpb25FbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5sb2NhdGlvbi5vYnN0YWNsZScpXG4gICAgLy8gY29uc3QgdXVpZCA9IGxvY2F0aW9uRWxlbWVudC5kYXRhc2V0LnV1aWRcbiAgICAvLyBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgIC8vIGNvbnN0IGxvY2F0aW9uSW5kZXggPSB0aGlzLmZpbmRJbmRleChsb2NhdGlvbnMsIHV1aWQpXG4gICAgY29uc3QgdG9nZ2xlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgndG9nZ2xlJylcbiAgICBjb25zdCBkYXRhID0gZm91bmRyeS51dGlscy5leHBhbmRPYmplY3Qoe1xuICAgICAgW3RvZ2dsZV06ICF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzd2l0Y2hlZC1vbicpXG4gICAgfSlcbiAgICBpZiAoZGF0YS5sb2NhdGlvbnMpIHtcbiAgICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhLmxvY2F0aW9ucykpIHtcbiAgICAgICAgY29uc3QgbG9jYXRpb25JbmRleCA9IGxvY2F0aW9ucy5maW5kSW5kZXgobCA9PiBsLnV1aWQgPT09IGtleSlcbiAgICAgICAgaWYgKGxvY2F0aW9uSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignTG9jYXRpb25zIHRhYmxlIGNvcnJ1cHRlZCcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgb3JpZ2luYWxMb2NhdGlvbiA9IGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XVxuICAgICAgICAgIGNvbnN0IGNsZWFuZWQgPSBjbGVhbih2YWx1ZSlcbiAgICAgICAgICBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KG9yaWdpbmFsTG9jYXRpb24sIGNsZWFuZWQpXG4gICAgICAgICAgbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdID0gb3JpZ2luYWxMb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMpXG4gICAgfVxuICB9XG5cbiAgLy8gYXN5bmMgX29uT2JzdGFjbGVUb2dnbGVDbGljayAoZXZlbnQpIHtcbiAgLy8gICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gIC8vICAgY29uc3QgbG9jYXRpb25FbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5vYnN0YWNsZScpXG4gIC8vICAgY29uc3QgdXVpZCA9IGxvY2F0aW9uRWxlbWVudC5kYXRhc2V0LnV1aWRcbiAgLy8gICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAvLyAgIGNvbnN0IGxvY2F0aW9uSW5kZXggPSB0aGlzLmZpbmRJbmRleChsb2NhdGlvbnMsIHV1aWQpXG4gIC8vICAgbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLm9ic3RhY2xlID0gIWxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5vYnN0YWNsZVxuICAvLyAgIGlmICghbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLm9ic3RhY2xlRGV0YWlscykge1xuICAvLyAgICAgbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLm9ic3RhY2xlRGV0YWlscyA9IHtcbiAgLy8gICAgICAgYmFycmllcjogdHJ1ZVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMpXG4gIC8vIH1cblxuICBhc3luYyBfb25PYnN0YWNsZVR5cGVDbGljayAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgbG9jYXRpb25FbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5vYnN0YWNsZScpXG4gICAgY29uc3QgdXVpZCA9IGxvY2F0aW9uRWxlbWVudC5kYXRhc2V0LnV1aWRcbiAgICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgIGNvbnN0IGxvY2F0aW9uSW5kZXggPSB0aGlzLmZpbmRJbmRleChsb2NhdGlvbnMsIHV1aWQpXG4gICAgaWYgKCFsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzKSB7XG4gICAgICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzID0ge31cbiAgICB9XG4gICAgY29uc3Qgb2JzdGFjbGUgPSBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzXG4gICAgY29uc3QgdHlwZSA9IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2JhcnJpZXInKSA/ICdiYXJyaWVyJyA6ICdoYXphcmQnXG4gICAgY29uc3QgYWN0aXZlID0gb2JzdGFjbGVbdHlwZV1cbiAgICBvYnN0YWNsZS5iYXJyaWVyID0gZmFsc2VcbiAgICBvYnN0YWNsZS5oYXphcmQgPSBmYWxzZVxuICAgIG9ic3RhY2xlW3R5cGVdID0gIWFjdGl2ZVxuICAgIGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5vYnN0YWNsZSA9ICFhY3RpdmVcbiAgICAvLyBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYmFycmllcicpKSB7XG4gICAgLy8gICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzLmJhcnJpZXIgPSAhbG9jYXRpb25zW1xuICAgIC8vICAgICBsb2NhdGlvbkluZGV4XG4gICAgLy8gICBdLm9ic3RhY2xlRGV0YWlscy5iYXJyaWVyXG4gICAgLy8gICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzLmhhemFyZCA9ICFsb2NhdGlvbnNbXG4gICAgLy8gICAgIGxvY2F0aW9uSW5kZXhcbiAgICAvLyAgIF0ub2JzdGFjbGVEZXRhaWxzLmJhcnJpZXJcbiAgICAvLyB9IGVsc2UgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2hhemFyZCcpKSB7XG4gICAgLy8gICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzLmhhemFyZCA9ICFsb2NhdGlvbnNbXG4gICAgLy8gICAgIGxvY2F0aW9uSW5kZXhcbiAgICAvLyAgIF0ub2JzdGFjbGVEZXRhaWxzLmhhemFyZFxuICAgIC8vICAgbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLm9ic3RhY2xlRGV0YWlscy5iYXJyaWVyID0gIWxvY2F0aW9uc1tcbiAgICAvLyAgICAgbG9jYXRpb25JbmRleFxuICAgIC8vICAgXS5vYnN0YWNsZURldGFpbHMuaGF6YXJkXG4gICAgLy8gfVxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9ucylcbiAgfVxuXG4gIGFzeW5jIF9vbkxvY2F0aW9uQ2xpY2sgKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGxvY2F0aW9uRWxlbWVudCA9IHRhcmdldC5jbG9zZXN0KCcuY2hhc2UtbG9jYXRpb24nKVxuICAgIGNvbnN0IGxVdWlkID0gbG9jYXRpb25FbGVtZW50LmRhdGFzZXQudXVpZFxuICAgIGF3YWl0IHRoaXMuaXRlbS5hY3RpdmF0ZUxvY2F0aW9uKGxVdWlkKVxuICB9XG5cbiAgYXN5bmMgX29uTG9jYXRpb25Db250cm9sQ2xpY2sgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaW5hY3RpdmUnKSkgcmV0dXJuXG4gICAgY29uc3QgYWN0aW9uID0gdGFyZ2V0LmRhdGFzZXQuYWN0aW9uXG4gICAgY29uc3QgbG9jYXRpb25FbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5jaGFzZS1sb2NhdGlvbicpXG4gICAgY29uc3QgbFV1aWQgPSBsb2NhdGlvbkVsZW1lbnQuZGF0YXNldC51dWlkXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3JlbW92ZSc6XG4gICAgICAgIGF3YWl0IHRoaXMuaXRlbS5yZW1vdmVMb2NhdGlvbihsVXVpZClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2FkZC1hZnRlcic6XG4gICAgICAgIGF3YWl0IHRoaXMuaXRlbS5pbnNlcnRMb2NhdGlvbihsVXVpZCwgeyBzaGlmdDogMSB9KVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdhZGQtYmVmb3JlJzpcbiAgICAgICAgYXdhaXQgdGhpcy5pdGVtLmluc2VydExvY2F0aW9uKGxVdWlkLCB7IHNoaWZ0OiAwIH0pXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ2FkZC1wYXJ0aWNpcGFudCc6XG4gICAgICAgIENvQzdDaGFzZVBhcnRpY2lwYW50SW1wb3J0ZXIuY3JlYXRlKHtcbiAgICAgICAgICBjaGFzZVV1aWQ6IHRoaXMuaXRlbS51dWlkLFxuICAgICAgICAgIGxvY2F0aW9uVXVpZDogbFV1aWQsXG4gICAgICAgICAgZHJvcERhdGE6IHt9XG4gICAgICAgIH0pXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhgTG9jYXRpb24gJHtsVXVpZH0gQ2xpY2tlZC4gQWN0aW9uOiAke2FjdGlvbn1gKVxuICB9XG5cbiAgYXN5bmMgX29uQ2hhc2VQYXJ0aWNpcGFudENsaWNrIChldmVudCkge1xuICAgIGNvbnN0IHBVdWlkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0Py51dWlkXG4gICAgYXdhaXQgdGhpcy5pdGVtLmFjdGl2YXRlUGFydGljaXBhbnQocFV1aWQpXG4gIH1cblxuICBhc3luYyBfb25QYXJ0aWNpcGFudENvbnRyb2xDbGlja2VkIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2luYWN0aXZlJykpIHJldHVyblxuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkcm9wZG93bicpKSByZXR1cm5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgY29uc3QgcGFydGljaXBhbnRVdWlkID0gdGFyZ2V0LmNsb3Nlc3QoJy5pbml0aWF0aXZlLWJsb2NrJyk/LmRhdGFzZXQ/LnV1aWRcbiAgICBpZiAoIXBhcnRpY2lwYW50VXVpZCkgcmV0dXJuXG4gICAgc3dpdGNoICh0YXJnZXQuZGF0YXNldC5hY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2RyYXdHdW4nOlxuICAgICAgICBhd2FpdCB0aGlzLnRvZ2dsZVBhcnRpY2lwYW50R3VuKHBhcnRpY2lwYW50VXVpZClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2RlY3JlYXNlQWN0aW9ucyc6XG4gICAgICAgIGF3YWl0IHRoaXMuX29uQ2hhbmdlTW92ZW1lbnRBY3Rpb25zKC0xLCBldmVudClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2luY3JlYXNlQWN0aW9ucyc6XG4gICAgICAgIGF3YWl0IHRoaXMuX29uQ2hhbmdlTW92ZW1lbnRBY3Rpb25zKDEsIGV2ZW50KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbW92ZUJhY2t3YXJkJzpcbiAgICAgICAgYXdhaXQgdGhpcy5pdGVtLm1vdmVQYXJ0aWNpcGFudChwYXJ0aWNpcGFudFV1aWQsIC0xLCB7IHJlbmRlcjogdHJ1ZSB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbW92ZUZvcndhcmQnOlxuICAgICAgICBhd2FpdCB0aGlzLml0ZW0ubW92ZVBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZCwgMSwgeyByZW5kZXI6IHRydWUgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2FjdGl2YXRlUGFydGljaXBhbnQnOlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5pdGVtLmFjdGl2YXRlUGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkKVxuICAgICAgY2FzZSAnYm9udXNEaWNlJzpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGRpY2VOdW1iZXIgPSB0YXJnZXQuZGF0YXNldC5jb3VudFxuICAgICAgICAgIGF3YWl0IHRoaXMuaXRlbS50b2dnbGVCb251c0RpY2UocGFydGljaXBhbnRVdWlkLCBkaWNlTnVtYmVyKVxuICAgICAgICAgIHRoaXMuaXRlbS5hY3RpdmF0ZU5leHRQYXJ0aWNpcGFudFR1cm4oKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjYXV0aW91c0FwcHJvYWNoJzpcbiAgICAgICAgYXdhaXQgdGhpcy5pdGVtLmNhdXRpb3VzQXBwcm9hY2gocGFydGljaXBhbnRVdWlkKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZWRpdFBhcnRpY2lwYW50JzpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5pdGVtLmdldFBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZClcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuaXRlbS5nZXRQYXJ0aWNpcGFudExvY2F0aW9uKHBhcnRpY2lwYW50VXVpZClcbiAgICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLmNoYXNlVXVpZCA9IHRoaXMuaXRlbS51dWlkXG4gICAgICAgICAgcGFydGljaXBhbnQuZGF0YS5sb2NhdGlvblV1aWQgPSBsb2NhdGlvbi51dWlkXG4gICAgICAgICAgcGFydGljaXBhbnQuZGF0YS51cGRhdGUgPSB0cnVlXG4gICAgICAgICAgQ29DN0NoYXNlUGFydGljaXBhbnRJbXBvcnRlci5jcmVhdGUocGFydGljaXBhbnQuZGF0YSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncmVtb3ZlUGFydGljaXBhbnQnOlxuICAgICAgICBhd2FpdCB0aGlzLml0ZW0ucmVtb3ZlUGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkKVxuICAgICAgICBicmVha1xuICAgIH1cbiAgICB0aGlzLml0ZW0uYWN0aXZhdGVOZXh0UGFydGljaXBhbnRUdXJuKClcbiAgfVxuXG4gIGFzeW5jIF9vbkNoYXNlQ29udHJvbENsaWNrZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgY29uc3QgbG9jYXRpb25VdWlkID0gdGFyZ2V0LmNsb3Nlc3QoJy5vYnN0YWNsZScpPy5kYXRhc2V0Py51dWlkXG4gICAgaWYgKCFsb2NhdGlvblV1aWQpIHJldHVyblxuICAgIHN3aXRjaCAodGFyZ2V0LmRhdGFzZXQuYWN0aW9uKSB7XG4gICAgICBjYXNlICdvYnN0YWNsZS1za2lsbC1jaGVjayc6XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW0uYWN0aXZlUGFydGljaXBhbnRPYnN0YWNsZUNoZWNrKGxvY2F0aW9uVXVpZClcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25DaGFuZ2VNb3ZlbWVudEFjdGlvbnMgKGNvdW50LCBldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBwYXJ0aWNpcGFudFV1aWQgPSB0YXJnZXQuY2xvc2VzdCgnLmluaXRpYXRpdmUtYmxvY2snKT8uZGF0YXNldD8udXVpZFxuICAgIGlmICghcGFydGljaXBhbnRVdWlkKSByZXR1cm5cbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0ucGFydGljaXBhbnRzXG4gICAgY29uc3QgcGFydGljaXBhbnQgPSBwYXJ0aWNpcGFudHMuZmluZChwID0+IHBhcnRpY2lwYW50VXVpZCA9PT0gcC51dWlkKVxuICAgIGlmIChwYXJ0aWNpcGFudC5oYXNNYXhNdnRBY3Rpb25zICYmIGNvdW50ID4gMCkgcmV0dXJuXG4gICAgcGFydGljaXBhbnQuYWx0ZXJNb3ZlbWVudEFjdGlvbnMoY291bnQpXG5cbiAgICAvLyBjb25zdCBzaGVldCA9IHRhcmdldC5jbG9zZXN0KCcuY29jNy5pdGVtLmNoYXNlJylcbiAgICAvLyBjb25zdCBjaGFzZVRyYWNrID0gc2hlZXQucXVlcnlTZWxlY3RvcignLmNoYXNlLXRyYWNrJylcbiAgICAvLyBpZiAoY2hhc2VUcmFjaylcbiAgICAvLyAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoe1xuICAgIC8vICAgICAnZGF0YS50cmFja1Njcm9sbFBvc2l0aW9uJzogY2hhc2VUcmFjay5zY3JvbGxMZWZ0XG4gICAgLy8gICB9KVxuICAgIGF3YWl0IHRoaXMuaXRlbS5zZXRjaGFzZVRyYWNrU2Nyb2xsKHsgcmVuZGVyOiBmYWxzZSB9KVxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGVQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzKVxuICB9XG5cbiAgYXN5bmMgX29uQnV0dG9uQ2xpY2sgKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGFjdGlvbiA9IHRhcmdldC5kYXRhc2V0Py5hY3Rpb25cbiAgICBpZiAoIWFjdGlvbikgcmV0dXJuXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2luaXQnOlxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWlzTmFOKHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLnRvdGFsKSAmJlxuICAgICAgICAgIHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLnRvdGFsID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbnMgPSBBcnJheS5hcHBseShcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBBcnJheSh0aGlzLml0ZW0uc3lzdGVtLmxvY2F0aW9ucy50b3RhbClcbiAgICAgICAgICApLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1dWlkOiBmb3VuZHJ5LnV0aWxzLnJhbmRvbUlEKDE2KSB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICBsb2NhdGlvbnNbMF0ubmFtZSA9ICdTdGFydCdcbiAgICAgICAgICBpZiAobG9jYXRpb25zLmxlbmd0aCA+IDEpIGxvY2F0aW9uc1tsb2NhdGlvbnMubGVuZ3RoIC0gMV0ubmFtZSA9ICdFbmQnXG4gICAgICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zKVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICAgICAgRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgICAgIHRpdGxlOiBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29uZmlybVJlc2V0Q2hhc2UnKX1gLFxuICAgICAgICAgIGNvbnRlbnQ6IGA8cD4ke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db25maXJtUmVzZXRDaGFzZUhpbnQnKX08L3A+YCxcbiAgICAgICAgICB5ZXM6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGVMb2NhdGlvbnNMaXN0KFtdKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5pdGVtLnN0b3AoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnY3V0MmNoYXNlJzpcbiAgICAgICAgaWYgKHRoaXMuaXRlbS5hbGxIYXZlU3BlZWRSb2xsKSB7XG4gICAgICAgICAgRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgICAgICAgdGl0bGU6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db25maXJtQ3V0MkNoYXNlJyl9YCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGA8cD4ke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgJ0NvQzcuQ29uZmlybUN1dDJDaGFzZUhpbnQnXG4gICAgICAgICAgICApfTwvcD5gLFxuICAgICAgICAgICAgeWVzOiAoKSA9PiB0aGlzLml0ZW0uY3V0VG9UaGVDaGFzZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vdEFsbEhhdmVTcGVlZFJvbGwnKSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdyZXN0YXJ0JzpcbiAgICAgICAgRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgICAgIHRpdGxlOiBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29uZmlybVJlc3RhcnRDaGFzZScpfWAsXG4gICAgICAgICAgY29udGVudDogYDxwPiR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgJ0NvQzcuQ29uZmlybVJlc3RhcnRDaGFzZUhpbnQnXG4gICAgICAgICAgKX08L3A+YCxcbiAgICAgICAgICB5ZXM6ICgpID0+IHRoaXMuaXRlbS5yZXN0YXJ0KClcbiAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnbmV4dFJvdW5kJzpcbiAgICAgICAgaWYgKHRoaXMuaXRlbS5uZXh0QWN0aXZlUGFydGljaXBhbnQpIHtcbiAgICAgICAgICBEaWFsb2cuY29uZmlybSh7XG4gICAgICAgICAgICB0aXRsZTogYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvbmZpcm1OZXh0Q2hhc2VSb3VuZCcpfWAsXG4gICAgICAgICAgICBjb250ZW50OiBgPHA+JHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICdDb0M3LkNvbmZpcm1OZXh0Q2hhc2VSb3VuZEhpbnQnXG4gICAgICAgICAgICApfTwvcD5gLFxuICAgICAgICAgICAgeWVzOiAoKSA9PiB0aGlzLml0ZW0ucHJvZ3Jlc3NUb05leHRSb3VuZCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHRoaXMuaXRlbS5wcm9ncmVzc1RvTmV4dFJvdW5kKClcbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBfY2FuUGluTG9jYXRpb25EcmFnU3RhcnQgKHNlbGVjdG9yKSB7XG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgYXN5bmMgX29uUGluTG9jYXRpb25EcmFnU3RhcnQgKGV2ZW50KSB7XG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBpID0gYS5xdWVyeVNlbGVjdG9yKCdpLmljb24nKVxuICAgIGNvbnN0IGRyYWdJY29uID0gYS5xdWVyeVNlbGVjdG9yKCcucGluLWltYWdlJylcblxuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UoZHJhZ0ljb24sIDAsIGRyYWdJY29uLmhlaWdodClcblxuICAgIGNvbnN0IGxvY2F0aW9uRWxlbWVudCA9IGEuY2xvc2VzdCgnLmNoYXNlLWxvY2F0aW9uJylcbiAgICBjb25zdCBkYXRhID0ge31cblxuICAgIGRhdGEudHlwZSA9ICdsb2NhdG9yJ1xuICAgIGRhdGEuQ29DN1R5cGUgPSAnY2hhc2UnXG4gICAgZGF0YS5pY29uID0gaS5kYXRhc2V0LmxpbmtJY29uXG4gICAgZGF0YS5sb2NhdGlvblV1aWQgPSBsb2NhdGlvbkVsZW1lbnQuZGF0YXNldC51dWlkXG4gICAgZGF0YS5kb2NVdWlkID0gdGhpcy5pdGVtLnV1aWRcbiAgICBkYXRhLmNhbGxCYWNrID0gJ2xvY2F0b3JEcm9wcGVkJ1xuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG5cbiAgICAvLyBjb25zdCBkcmFnRGF0YSA9IHsgdXVpZDogbG9jYXRpb25FbGVtZW50LmRhdGFzZXQudXVpZCwgY2hhc2VVdWlkOiB0aGlzLml0ZW0udXVpZCB9XG4gICAgLy8gZHJhZ0V2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgSlNPTi5zdHJpbmdpZnkoZHJhZ0RhdGEpKVxuICB9XG5cbiAgX2NhbkNoYXNlUGFydGljaXBhbnREcmFnU3RhcnQgKHNlbGVjdG9yKSB7XG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgX2NhbkNoYXNlUGFydGljaXBhbnREcmFnRHJvcCAoc2VsZWN0b3IpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBhc3luYyBfb25DaGFzZVBhcnRpY2lwYW50RHJhZ1N0YXJ0IChkcmFnRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBkcmFnRXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGRyYWdEYXRhID0geyB1dWlkOiB0YXJnZXQuZGF0YXNldC51dWlkLCB0eXBlOiAncGFydGljaXBhbnQnIH1cbiAgICBkcmFnRXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvcGxhaW4nLCBKU09OLnN0cmluZ2lmeShkcmFnRGF0YSkpXG4gIH1cblxuICBhc3luYyBfb25DaGFzZVBhcnRpY2lwYW50RHJhZ0Ryb3AgKGRyYWdFdmVudCkge1xuICAgIGNvbnN0IGRhdGFTdHJpbmcgPSBkcmFnRXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvcGxhaW4nKVxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpXG5cbiAgICAvLyB1aS5ub3RpZmljYXRpb25zLmluZm8oJ0Ryb3BwZWQnKVxuICAgIHRoaXMuX29uRHJhZ0xlYXZlKGRyYWdFdmVudClcblxuICAgIGNvbnN0IHRhcmdldCA9IGRyYWdFdmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgbG9jYXRpb25VdWlkID0gdGFyZ2V0LmRhdGFzZXQudXVpZFxuXG4gICAgaWYgKGRhdGEudHlwZSA9PT0gJ3BhcnRpY2lwYW50Jykge1xuICAgICAgY29uc3Qgb2xkTG9jYXRpb24gPSB0aGlzLmZpbmRMb2NhdGlvbihsb2NhdGlvblV1aWQpXG4gICAgICBpZiAob2xkTG9jYXRpb24pIHtcbiAgICAgICAgaWYgKG9sZExvY2F0aW9uLnBhcnRpY2lwYW50cz8uaW5jbHVkZXMoZGF0YS51dWlkKSkgcmV0dXJuXG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLml0ZW0uc2V0Y2hhc2VUcmFja1Njcm9sbCh7IHJlbmRlcjogZmFsc2UgfSlcbiAgICAgIGF3YWl0IHRoaXMuaXRlbS5tb3ZlUGFydGljaXBhbnRUb0xvY2F0aW9uKGRhdGEudXVpZCwgbG9jYXRpb25VdWlkKVxuICAgIH0gZWxzZSB7XG4gICAgICBDb0M3Q2hhc2VQYXJ0aWNpcGFudEltcG9ydGVyLmNyZWF0ZSh7XG4gICAgICAgIGNoYXNlVXVpZDogdGhpcy5pdGVtLnV1aWQsXG4gICAgICAgIGxvY2F0aW9uVXVpZCxcbiAgICAgICAgZHJvcERhdGE6IGRhdGFcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgX29uRHJhZ092ZXIgKGRyYWdFdmVudCkge1xuICAgIHRoaXMuX29uRHJhZ0VudGVyKGRyYWdFdmVudClcbiAgfVxuXG4gIF9vbkRyYWdFbnRlciAoZHJhZ0V2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZHJhZ0V2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnZHJhZy1vdmVyJylcbiAgfVxuXG4gIF9vbkRyYWdMZWF2ZSAoZHJhZ0V2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZHJhZ0V2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICB0YXJnZXQuY2xhc3NMaXN0Py5yZW1vdmUoJ2RyYWctb3ZlcicpXG4gIH1cblxuICBhc3luYyBfb25Ecm9wUGFydGljaXBhbnQgKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IHV1aWQgPSB0YXJnZXQuZGF0YXNldD8udXVpZFxuICAgIGNvbnN0IGRhdGFTdHJpbmcgPSBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpXG4gICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZGF0YVN0cmluZylcbiAgICBhd2FpdCB0aGlzLmFsdGVyUGFydGljaXBhbnQoZGF0YSwgdXVpZClcbiAgfVxuXG4gIGFzeW5jIF9vbkFkZFBhcnRpY2lwYW50IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBkYXRhID0geyBjaGFzZVV1aWQ6IHRoaXMuaXRlbS51dWlkIH1cbiAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyKSB7XG4gICAgICBjb25zdCBkYXRhU3RyaW5nID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvcGxhaW4nKVxuICAgICAgZGF0YS5kcm9wRGF0YSA9IEpTT04ucGFyc2UoZGF0YVN0cmluZylcbiAgICB9XG4gICAgQ29DN0NoYXNlUGFydGljaXBhbnRJbXBvcnRlci5jcmVhdGUoZGF0YSlcbiAgfVxuXG4gIGFzeW5jIF9vblJvbGxQYXJ0aWNpcGFudCAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgcGFydGljaXBhbnRFbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5wYXJ0aWNpcGFudCcpXG4gICAgY29uc3QgdXVpZCA9IHBhcnRpY2lwYW50RWxlbWVudC5kYXRhc2V0LnV1aWRcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZFBhcnRpY2lwYW50SW5kZXgodXVpZClcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cblxuICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gbmV3IF9wYXJ0aWNpcGFudChwYXJ0aWNpcGFudHNbaW5kZXhdKVxuICAgIGlmIChwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnJlZlNldCkge1xuICAgICAgY29uc3Qgcm9sbCA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgcm9sbC5wYXJlbnQgPSB0aGlzLml0ZW0udXVpZFxuICAgICAgcGFydGljaXBhbnQuZGF0YS5yb2xsZWQgPSB0cnVlXG4gICAgICBwYXJ0aWNpcGFudC5kYXRhLnJvbGxVdWlkID0gcm9sbC51dWlkXG4gICAgICByb2xsLmFjdG9yID0gcGFydGljaXBhbnQuYWN0b3IuYWN0b3JLZXlcbiAgICAgIGlmICghZXZlbnQuc2hpZnRLZXkgJiYgcGFydGljaXBhbnQuYWN0b3IucGxheWVyKSB7XG4gICAgICAgIHJvbGwuc3RhbmRieSA9IHRydWVcbiAgICAgICAgcm9sbC5zdGFuZGJ5VGV4dCA9ICdDb0M3LkNoYXNlJ1xuICAgICAgICByb2xsLnN0YW5kYnlSaWdodEljb24gPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9ydW5uaW5nLXNvbGlkLnN2ZydcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2suaXNDaGFyYWN0ZXJpc3RpYykge1xuICAgICAgICBhd2FpdCByb2xsLnJvbGxDaGFyYWN0ZXJpc3RpYyhwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnJlZi5rZXkpXG4gICAgICAgIGF3YWl0IHJvbGwudG9NZXNzYWdlKClcbiAgICAgICAgcGFydGljaXBhbnQuZGF0YS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nID0gcm9sbC5KU09OUm9sbFN0cmluZ1xuICAgICAgfSBlbHNlIGlmIChwYXJ0aWNpcGFudC5zcGVlZENoZWNrLmlzU2tpbGwpIHtcbiAgICAgICAgcm9sbC5za2lsbCA9IHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sucmVmXG4gICAgICAgIGF3YWl0IHJvbGwucm9sbCgpXG4gICAgICAgIGF3YWl0IHJvbGwudG9NZXNzYWdlKClcbiAgICAgICAgcGFydGljaXBhbnQuZGF0YS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nID0gcm9sbC5KU09OUm9sbFN0cmluZ1xuICAgICAgfSBlbHNlIGlmIChwYXJ0aWNpcGFudC5zcGVlZENoZWNrLmlzQXR0cmlidXRlKSB7XG4gICAgICAgIGF3YWl0IHJvbGwucm9sbEF0dHJpYnV0ZShwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnJlZi5rZXkpXG4gICAgICAgIGF3YWl0IHJvbGwudG9NZXNzYWdlKClcbiAgICAgICAgcGFydGljaXBhbnQuZGF0YS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nID0gcm9sbC5KU09OUm9sbFN0cmluZ1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFydGljaXBhbnQuc3BlZWRDaGVjay5zY29yZSkge1xuICAgICAgY29uc3Qgcm9sbERhdGEgPSB7XG4gICAgICAgIHJhd1ZhbHVlOiBwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnNjb3JlLFxuICAgICAgICBkaXNwbGF5TmFtZTogcGFydGljaXBhbnQuc3BlZWRDaGVjay5uYW1lLFxuICAgICAgICBhY3Rvck5hbWU6IHBhcnRpY2lwYW50Lm5hbWUgPyBwYXJ0aWNpcGFudC5uYW1lIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgICBpZiAocGFydGljaXBhbnQuaGFzQWN0b3IpIHJvbGxEYXRhLmFjdG9yID0gcGFydGljaXBhbnQuYWN0b3IuYWN0b3JLZXlcbiAgICAgIGNvbnN0IHJvbGwgPSBDb0M3Q2hlY2suY3JlYXRlKHJvbGxEYXRhKVxuICAgICAgcm9sbC5wYXJlbnQgPSB0aGlzLml0ZW0udXVpZFxuICAgICAgYXdhaXQgcm9sbC5yb2xsKClcbiAgICAgIGF3YWl0IHJvbGwudG9NZXNzYWdlKClcbiAgICAgIHBhcnRpY2lwYW50LmRhdGEuc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZyA9IHJvbGwuSlNPTlJvbGxTdHJpbmdcbiAgICAgIHBhcnRpY2lwYW50LmRhdGEucm9sbGVkID0gdHJ1ZVxuICAgICAgcGFydGljaXBhbnQuZGF0YS5yb2xsVXVpZCA9IHJvbGwudXVpZFxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyAnZGF0YS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHMgfSlcbiAgfVxuXG4gIF9vbkRyYWdFbnRlclBhcnRpY2lwYW50IChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnZHJhZy1vdmVyJylcbiAgfVxuXG4gIF9vbkRyYWdMZWF2ZVBhcnRpY2lwYW50IChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZy1vdmVyJylcbiAgfVxuXG4gIGFzeW5jIF9vbkNoYW5nZVNpZGUgKGV2ZW50KSB7XG4gICAgLy8gY29uc3QgdGVzdCA9IGF3YWl0IGZyb21VdWlkKCAnU2NlbmUud2g3U0x1dklPcGNReWI4Uy5Ub2tlbi5uQ2RvQ3lvaXVkdGpyTmt1Jyk7XG4gICAgLy8gY29uc3QgaXRlbVRlc3QgPSBhd2FpdCBmcm9tVXVpZCggJ0l0ZW0ucGxJRW1OUlA2TzdQdmVOdi5yb2xsLnEyc0F6c0h0NEZzcXNkZkQnKTtcblxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRhcmdldC5jbG9zZXN0KCcucGFydGljaXBhbnQnKVxuICAgIGNvbnN0IHV1aWQgPSBwYXJ0aWNpcGFudC5kYXRhc2V0LnV1aWRcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZFBhcnRpY2lwYW50SW5kZXgodXVpZClcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBwYXJ0aWNpcGFudHNbaW5kZXhdLmNoYXNlciA9ICFwYXJ0aWNpcGFudHNbaW5kZXhdLmNoYXNlclxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyAnZGF0YS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHMgfSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRlbGV0ZURyaXZlciAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgZHJpdmVyID0gdGFyZ2V0LmNsb3Nlc3QoJy5kcml2ZXInKVxuICAgIGNvbnN0IHV1aWQgPSBkcml2ZXIuZGF0YXNldC51dWlkXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmZpbmRQYXJ0aWNpcGFudEluZGV4KHV1aWQpXG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICA6IFtdXG4gICAgY29uc3QgcGFydGljaXBhbnQgPSBwYXJ0aWNpcGFudHNbaW5kZXhdXG4gICAgZGVsZXRlIHBhcnRpY2lwYW50LmRvY1V1aWRcbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ2RhdGEucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gIH1cblxuICBhc3luYyBfb25EZWxldGVQYXJ0aWNpcGFudCAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgcGFydGljaXBhbnQgPSB0YXJnZXQuY2xvc2VzdCgnLnBhcnRpY2lwYW50JylcbiAgICBjb25zdCB1dWlkID0gcGFydGljaXBhbnQuZGF0YXNldC51dWlkXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmZpbmRQYXJ0aWNpcGFudEluZGV4KHV1aWQpXG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICA6IFtdXG4gICAgcGFydGljaXBhbnRzLnNwbGljZShpbmRleCwgMSlcbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ2RhdGEucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gIH1cblxuICBhc3luYyBfb25SZXNldFJvbGwgKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5wYXJ0aWNpcGFudCcpXG4gICAgY29uc3QgdXVpZCA9IHBhcnRpY2lwYW50LmRhdGFzZXQudXVpZFxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5maW5kUGFydGljaXBhbnRJbmRleCh1dWlkKVxuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzKVxuICAgICAgOiBbXVxuICAgIGRlbGV0ZSBwYXJ0aWNpcGFudHNbaW5kZXhdLnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmdcbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ2RhdGEucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gIH1cblxuICBhc3luYyBhbHRlclBhcnRpY2lwYW50IChkYXRhLCB1dWlkKSB7XG4gICAgbGV0IGRvY1V1aWQsIGFjdG9yXG4gICAgaWYgKGRhdGEudG9rZW5VdWlkKSBkb2NVdWlkID0gZGF0YS50b2tlblV1aWRcbiAgICBlbHNlIHtcbiAgICAgIGRvY1V1aWQgPVxuICAgICAgICBkYXRhLnNjZW5lSWQgJiYgZGF0YS50b2tlbklkXG4gICAgICAgICAgPyBgU2NlbmUuJHtkYXRhLnNjZW5lSWR9LlRva2VuLiR7ZGF0YS50b2tlbklkfWBcbiAgICAgICAgICA6IGRhdGEuYWN0b3JJZCB8fCBkYXRhLmFjdG9yS2V5IHx8IGRhdGEuaWRcbiAgICB9XG5cbiAgICBpZiAoZGF0YS50eXBlID09PSAnVG9rZW4nKSB7XG4gICAgICBkb2NVdWlkID0gZGF0YS51dWlkXG4gICAgfSBlbHNlIGlmIChkb2NVdWlkKSB7XG4gICAgICBhY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KGRvY1V1aWQpXG4gICAgICBpZiAoIWFjdG9yICYmIGRhdGEudHlwZSA9PT0gJ0l0ZW0nKSBkb2NVdWlkID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChhY3RvciAmJiBkb2NVdWlkICE9PSBhY3Rvci51dWlkKSB7XG4gICAgICBkb2NVdWlkID0gYWN0b3IudXVpZFxuICAgIH1cblxuICAgIGNvbnN0IHBhcnRpY2lwYW50ID0ge31cbiAgICBpZiAoZG9jVXVpZCkgcGFydGljaXBhbnQuZG9jVXVpZCA9IGRvY1V1aWRcblxuICAgIHN3aXRjaCAoZGF0YS50eXBlPy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdhY3Rvcic6XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdpdGVtJzpcbiAgICAgICAgcGFydGljaXBhbnQuc3BlZWRDaGVjayA9IHtcbiAgICAgICAgICBpZDogZGF0YS5kYXRhPy5faWQgfHwgZGF0YS5pZCxcbiAgICAgICAgICB0eXBlOiAnaXRlbSdcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY2hhcmFjdGVyaXN0aWMnOlxuICAgICAgICBwYXJ0aWNpcGFudC5zcGVlZENoZWNrID0ge1xuICAgICAgICAgIGlkOiBkYXRhLm5hbWUsXG4gICAgICAgICAgdHlwZTogJ2NoYXJhY3RlcmlzdGljJ1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdhdHRyaWJ1dGUnOlxuICAgICAgICBwYXJ0aWNpcGFudC5zcGVlZENoZWNrID0ge1xuICAgICAgICAgIGlkOiBkYXRhLm5hbWUsXG4gICAgICAgICAgdHlwZTogJ2F0dHJpYnV0ZSdcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIC8vIFRPRE86Q2hlY2sgZm9yIHNwZWVkIGNoZWNrLCBpZiBub25lIGFkZCBzcGVlZGNoZWNrXG4gICAgLy8gc3BlZWRDaGVjayA9IHtcbiAgICAvLyAgIGlkOiAnc3RyJ1xuICAgIC8vICAgdHlwZTogJ2NoYXJhY3RlcmlzdGljJ1xuICAgIC8vIH1cbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZFBhcnRpY2lwYW50SW5kZXgodXVpZClcbiAgICBjb25zdCBvbGRQYXJ0aWNpcGFudCA9IHBhcnRpY2lwYW50c1tpbmRleF1cbiAgICBpZiAob2xkUGFydGljaXBhbnQubW92KSBkZWxldGUgb2xkUGFydGljaXBhbnQubW92XG4gICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChvbGRQYXJ0aWNpcGFudCwgcGFydGljaXBhbnQpXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdkYXRhLnBhcnRpY2lwYW50cyc6IHBhcnRpY2lwYW50cyB9KVxuICB9XG5cbiAgYXN5bmMgY2xlYXJBY3RpdmVMb2NhdGlvbkNvb3JkaW5hdGVzICgpIHtcbiAgICBhd2FpdCB0aGlzLml0ZW0uY2xlYXJBY3RpdmVMb2NhdGlvbkNvb3JkaW5hdGVzKClcbiAgfVxuXG4gIGFzeW5jIGFkZFBhcnRpY2lwYW50IChkYXRhKSB7XG4gICAgLy8gbGV0IHByb3V0ID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkoXG4gICAgLy8gICAnU2NlbmUud2g3U0x1dklPcGNReWI4Uy5Ub2tlbi5ReUZUaWlFWmlYOXZUZmlDJ1xuICAgIC8vIClcbiAgICAvLyBwcm91dCA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KFxuICAgIC8vICAgJ1NjZW5lLndoN1NMdXZJT3BjUXliOFMuVG9rZW4udWJMemhlNTdKT1RITUlyOSdcbiAgICAvLyApXG4gICAgLy8gcHJvdXQgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSgnQWN0b3IudWlZM2NhcFNVZUxMdlNMaScpXG4gICAgLy8gcHJvdXQgPSBDb0M3VXRpbGl0aWVzLmdldERvY3VtZW50RnJvbUtleSggJ1NjZW5lLndoN1NMdXZJT3BjUXliOFMuVG9rZW4uUXlGVGlpRVppWDl2VGZpQy5JdGVtLkdyT0hlTFhmZUVwaHNSTVonKVxuICAgIC8vIHByb3V0ID0gQ29DN1V0aWxpdGllcy5nZXREb2N1bWVudEZyb21LZXkoIFwiU2NlbmUud2g3U0x1dklPcGNReWI4Uy5Ub2tlbi5ZcXNOUVBEaEZDUGxTUnFKXCIpXG4gICAgLy8gcHJvdXQgPSBDb0M3VXRpbGl0aWVzLmdldERvY3VtZW50RnJvbUtleSggXCJTY2VuZS53aDdTTHV2SU9wY1F5YjhTLlRva2VuLllxc05RUERoRkNQbFNScUouSXRlbS44SkVuVGpKT0dGWG1sNHdrXCIpXG5cbiAgICAvLyB0cnkgdG8gZmluZCBhIHZhbGlkIGRvY3VtZW50XG4gICAgbGV0IGRvY1V1aWQsIGFjdG9yXG4gICAgaWYgKGRhdGEudG9rZW5VdWlkKSBkb2NVdWlkID0gZGF0YS50b2tlblV1aWRcbiAgICBlbHNlIHtcbiAgICAgIGRvY1V1aWQgPVxuICAgICAgICBkYXRhLnNjZW5lSWQgJiYgZGF0YS50b2tlbklkXG4gICAgICAgICAgPyBgU2NlbmUuJHtkYXRhLnNjZW5lSWR9LlRva2VuLiR7ZGF0YS50b2tlbklkfWBcbiAgICAgICAgICA6IGRhdGEuYWN0b3JJZCB8fCBkYXRhLmFjdG9yS2V5IHx8IGRhdGEuaWRcbiAgICB9XG5cbiAgICBpZiAoZGF0YS50eXBlID09PSAnVG9rZW4nKSB7XG4gICAgICBkb2NVdWlkID0gZGF0YS51dWlkXG4gICAgfSBlbHNlIGlmIChkb2NVdWlkKSB7XG4gICAgICBhY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KGRvY1V1aWQpXG4gICAgICBpZiAoIWFjdG9yICYmIGRhdGEudHlwZSA9PT0gJ0l0ZW0nKSBkb2NVdWlkID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChhY3RvciAmJiBkb2NVdWlkICE9PSBhY3Rvci51dWlkKSB7XG4gICAgICBkb2NVdWlkID0gYWN0b3IudXVpZFxuICAgIH1cblxuICAgIGNvbnN0IHBhcnRpY2lwYW50ID0ge31cbiAgICBpZiAoZG9jVXVpZCkgcGFydGljaXBhbnQuZG9jVXVpZCA9IGRvY1V1aWRcblxuICAgIHN3aXRjaCAoZGF0YS50eXBlPy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdhY3Rvcic6XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdpdGVtJzpcbiAgICAgICAgaWYgKGRhdGEuaWQpIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gZ2FtZS5pdGVtcy5nZXQoZGF0YS5pZClcbiAgICAgICAgICBpZiAoaXRlbT8uZGF0YT8udHlwZSAhPT0gJ3NraWxsJykgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBwYXJ0aWNpcGFudC5zcGVlZENoZWNrID0ge1xuICAgICAgICAgIGlkOiBkYXRhLmRhdGE/Ll9pZCB8fCBkYXRhLmlkLFxuICAgICAgICAgIHR5cGU6ICdpdGVtJ1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjaGFyYWN0ZXJpc3RpYyc6XG4gICAgICAgIHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sgPSB7XG4gICAgICAgICAgaWQ6IGRhdGEubmFtZSxcbiAgICAgICAgICB0eXBlOiAnY2hhcmFjdGVyaXN0aWMnXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2F0dHJpYnV0ZSc6XG4gICAgICAgIHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sgPSB7XG4gICAgICAgICAgaWQ6IGRhdGEubmFtZSxcbiAgICAgICAgICB0eXBlOiAnYXR0cmlidXRlJ1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgLy8gVE9ETzpDaGVjayBmb3Igc3BlZWQgY2hlY2ssIGlmIG5vbmUgYWRkIHNwZWVkY2hlY2sgY29uIG5vbiB2ZWhpY2xlLCBkcml2ZSBhdXRvIGZvciB2ZWhpY2xlXG4gICAgLy8gc3BlZWRDaGVjayA9IHtcbiAgICAvLyAgIGlkOiAnY29uJ1xuICAgIC8vICAgdHlwZTogJ2NoYXJhY3RlcmlzdGljJ1xuICAgIC8vIH1cblxuICAgIGlmICghcGFydGljaXBhbnQuc3BlZWRDaGVjaykge1xuICAgICAgaWYgKCF0aGlzLml0ZW0uc3lzdGVtLnZlaGljbGUpIHtcbiAgICAgICAgcGFydGljaXBhbnQuc3BlZWRDaGVjayA9IHtcbiAgICAgICAgICBpZDogJ2NvbicsXG4gICAgICAgICAgdHlwZTogJ2NoYXJhY3RlcmlzdGljJyxcbiAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5Db25zdGl0dXRpb24nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0aWNpcGFudC5zcGVlZENoZWNrID0ge1xuICAgICAgICAgIHR5cGU6ICdpdGVtJyxcbiAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29DSURGbGFnLmtleXMuaS5za2lsbC5kcml2ZS1hdXRvJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cblxuICAgIGxldCB1bmlxdWUgPSBmYWxzZVxuICAgIHdoaWxlICghdW5pcXVlKSB7XG4gICAgICBwYXJ0aWNpcGFudC51dWlkID0gZm91bmRyeS51dGlscy5yYW5kb21JRCgxNilcbiAgICAgIHVuaXF1ZSA9XG4gICAgICAgIHBhcnRpY2lwYW50cy5maWx0ZXIocCA9PiBwLnV1aWQgPT09IHBhcnRpY2lwYW50LnV1aWQpLmxlbmd0aCA9PT0gMFxuICAgIH1cblxuICAgIHBhcnRpY2lwYW50cy5wdXNoKHBhcnRpY2lwYW50KVxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyAnZGF0YS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHMgfSlcbiAgfVxuXG4gIGFzeW5jIHRvZ2dsZVBhcnRpY2lwYW50R3VuIChwYXJ0aWNpcGFudFV1aWQpIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHBhcnRpY2lwYW50cy5maW5kKHAgPT4gcGFydGljaXBhbnRVdWlkID09PSBwLnV1aWQpXG4gICAgaWYgKCFwYXJ0aWNpcGFudCkgcmV0dXJuXG4gICAgcGFydGljaXBhbnQuaGFzQUd1blJlYWR5ID0gIXBhcnRpY2lwYW50Lmhhc0FHdW5SZWFkeVxuICAgIGF3YWl0IHRoaXMuaXRlbS5zZXRjaGFzZVRyYWNrU2Nyb2xsKHsgcmVuZGVyOiBmYWxzZSB9KVxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGVQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhbiAob2JqKSB7XG4gIGZvciAoY29uc3QgcHJvcE5hbWUgaW4gb2JqKSB7XG4gICAgY29uc3QgdHAgPSBmb3VuZHJ5LnV0aWxzLmdldFR5cGUob2JqW3Byb3BOYW1lXSlcbiAgICBpZiAodHAgPT09ICdPYmplY3QnKSB7XG4gICAgICBvYmpbcHJvcE5hbWVdID0gY2xlYW4ob2JqW3Byb3BOYW1lXSlcbiAgICB9XG5cbiAgICBpZiAodHAgPT09ICdPYmplY3QnICYmICFPYmplY3QuZW50cmllcyhvYmpbcHJvcE5hbWVdKS5sZW5ndGgpIHtcbiAgICAgIG9ialtwcm9wTmFtZV0gPSBudWxsXG4gICAgfSBlbHNlIGlmICh0cCA9PT0gJ3N0cmluZycgJiYgIW9ialtwcm9wTmFtZV0ubGVuZ3RoKSB7XG4gICAgICBvYmpbcHJvcE5hbWVdID0gbnVsbFxuICAgIH0gZWxzZSBpZiAodHAgPT09ICdzdHJpbmcnICYmICFpc05hTihOdW1iZXIob2JqW3Byb3BOYW1lXSkpKSB7XG4gICAgICBvYmpbcHJvcE5hbWVdID0gTnVtYmVyKG9ialtwcm9wTmFtZV0pXG4gICAgfVxuICB9XG4gIHJldHVybiBvYmpcbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lLCBJdGVtU2hlZXQsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5pbXBvcnQgQ29DN0FjdGl2ZUVmZmVjdCBmcm9tICcuLi8uLi9hY3RpdmUtZWZmZWN0LmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgSXRlbVNoZWV0IHdpdGggc29tZSB2ZXJ5IHNpbXBsZSBtb2RpZmljYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3SXRlbVNoZWV0VjIgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICAvKipcbiAgICogRXh0ZW5kIGFuZCBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zIHVzZWQgYnkgdGhlIFNpbXBsZSBJdGVtIFNoZWV0XG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0VjInLCAnaXRlbSddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL2l0ZW0tc2hlZXRWMi5odG1sJyxcbiAgICAgIHdpZHRoOiA1MDAsXG4gICAgICBoZWlnaHQ6IDQ1MCxcbiAgICAgIHNjcm9sbFk6IFsnLnRhYi5kZXNjcmlwdGlvbiddLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcuc2hlZXQtbmF2aWdhdGlvbicsXG4gICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLnNoZWV0LWJvZHknLFxuICAgICAgICAgIGluaXRpYWw6ICdkZXNjcmlwdGlvbidcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cblxuICBfZ2V0SGVhZGVyQnV0dG9ucyAoKSB7XG4gICAgY29uc3QgaGVhZGVyQnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uKGhlYWRlckJ1dHRvbnMsIHRoaXMpXG4gICAgcmV0dXJuIGhlYWRlckJ1dHRvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlIGRhdGEgZm9yIHJlbmRlcmluZyB0aGUgSXRlbSBzaGVldFxuICAgKiBUaGUgcHJlcGFyZWQgZGF0YSBvYmplY3QgY29udGFpbnMgYm90aCB0aGUgYWN0b3IgZGF0YSBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgc2hlZXQgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YSAob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YShvcHRpb25zKVxuXG4gICAgc2hlZXREYXRhLmVmZmVjdHMgPSBDb0M3QWN0aXZlRWZmZWN0LnByZXBhcmVBY3RpdmVFZmZlY3RDYXRlZ29yaWVzKHRoaXMuaXRlbS5lZmZlY3RzLCB7IHN0YXR1czogZmFsc2UgfSlcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlIGV2ZW50IGxpc3RlbmVycyB1c2luZyB0aGUgcHJlcGFyZWQgc2hlZXQgSFRNTFxuICAgKiBAcGFyYW0gaHRtbCB7SFRNTH0gICBUaGUgcHJlcGFyZWQgSFRNTCBvYmplY3QgcmVhZHkgdG8gYmUgcmVuZGVyZWQgaW50byB0aGUgRE9NXG4gICAqL1xuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gICAgLy8gRXZlcnl0aGluZyBiZWxvdyBoZXJlIGlzIG9ubHkgbmVlZGVkIGlmIHRoZSBzaGVldCBpcyBlZGl0YWJsZVxuICAgIGlmICghdGhpcy5vcHRpb25zLmVkaXRhYmxlKSByZXR1cm5cblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuZWZmZWN0LWNvbnRyb2wnKVxuICAgICAgLmNsaWNrKGV2ID0+IENvQzdBY3RpdmVFZmZlY3Qub25NYW5hZ2VBY3RpdmVFZmZlY3QoZXYsIHRoaXMuaXRlbSkpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5ICovXG5cbmltcG9ydCB7IENvQzdJdGVtU2hlZXRWMiB9IGZyb20gJy4vaXRlbS1zaGVldFYyLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgSXRlbVNoZWV0IHdpdGggc29tZSB2ZXJ5IHNpbXBsZSBtb2RpZmljYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3SXRlbVNoZWV0IGV4dGVuZHMgQ29DN0l0ZW1TaGVldFYyIHtcbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSBTaW1wbGUgSXRlbSBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIHdpZHRoOiA1MjUsXG4gICAgICBoZWlnaHQ6IDUwNlxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBKb3VybmFsU2hlZXQgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Sm91cm5hbFNoZWV0IGV4dGVuZHMgSm91cm5hbFNoZWV0IHtcbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBNYWNyb0NvbmZpZyAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdNYWNyb0NvbmZpZyBleHRlbmRzIE1hY3JvQ29uZmlnIHtcbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBQbGF5bGlzdENvbmZpZyAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdQbGF5bGlzdENvbmZpZyBleHRlbmRzIFBsYXlsaXN0Q29uZmlnIHtcbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBSb2xsVGFibGVDb25maWcgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Um9sbFRhYmxlQ29uZmlnIGV4dGVuZHMgUm9sbFRhYmxlQ29uZmlnIHtcbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBTY2VuZUNvbmZpZyAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdTY2VuZUNvbmZpZyBleHRlbmRzIFNjZW5lQ29uZmlnIHtcbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBmb3VuZHJ5LCBnYW1lLCBJdGVtU2hlZXQsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN0l0ZW0gfSBmcm9tICcuLi9pdGVtLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IERyb3BDb0NJRCB9IGZyb20gJy4uLy4uL2FwcHMvZHJvcC1jb2MtaWQuanMnXG5pbXBvcnQgeyBpc0N0cmxLZXkgfSBmcm9tICcuLi8uLi9jaGF0L2hlbHBlci5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEl0ZW1TaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN1NldHVwU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICAvKipcbiAgICogQWN0aXZhdGUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBwcmVwYXJlZCBzaGVldCBIVE1MXG4gICAqIEBwYXJhbSBodG1sIHtIVE1MfSAgIFRoZSBwcmVwYXJlZCBIVE1MIG9iamVjdCByZWFkeSB0byBiZSByZW5kZXJlZCBpbnRvIHRoZSBET01cbiAgICovXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGlmICghdGhpcy5vcHRpb25zLmVkaXRhYmxlKSByZXR1cm5cblxuICAgIGh0bWwuZmluZCgnLml0ZW0gLml0ZW0tbmFtZSBoNCcpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uSXRlbVN1bW1hcnkoZXZlbnQsICdpdGVtcycpKVxuICAgIGh0bWwuZmluZCgnLml0ZW0tZGVsZXRlJykuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25JdGVtRGVsZXRlKGV2ZW50LCAnaXRlbXMnKSlcbiAgICBodG1sLmZpbmQoJy5hZGQtYmlvJykuY2xpY2soYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5fb25BZGRCaW8oKSlcbiAgICBodG1sLmZpbmQoJy5yZW1vdmUtc2VjdGlvbicpLmNsaWNrKHRoaXMuX29uUmVtb3ZlU2VjdGlvbi5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLnRvZ2dsZS1zd2l0Y2gnKS5jbGljayh0aGlzLl9vbkNsaWNrVG9nZ2xlLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuYWRkLW1vbmV0YXJ5JykuY2xpY2sodGhpcy5fb25BZGRNb25ldGFyeS5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLnJlbW92ZS1tb25ldGFyeScpLmNsaWNrKHRoaXMuX29uUmVtb3ZlTW9uZXRhcnkuYmluZCh0aGlzKSlcbiAgfVxuXG4gIGFzeW5jIF9vbkNsaWNrVG9nZ2xlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBwcm9wZXJ0eUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnByb3BlcnR5XG4gICAgYXdhaXQgdGhpcy5pdGVtLnRvZ2dsZVByb3BlcnR5KFxuICAgICAgcHJvcGVydHlJZCxcbiAgICAgIGlzQ3RybEtleShldmVudClcbiAgICApXG4gIH1cblxuICBhc3luYyBfb25Ecm9wIChldmVudCwgY29sbGVjdGlvbk5hbWUgPSAnaXRlbXMnKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBkYXRhTGlzdCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ2V0RGF0YUZyb21Ecm9wRXZlbnQoZXZlbnQsICdJdGVtJylcblxuICAgIGxldCB1c2VDb0NJRCA9IDBcbiAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0gPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXSkgOiBbXVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhTGlzdCkge1xuICAgICAgaWYgKCFpdGVtIHx8ICFpdGVtLnN5c3RlbSkgY29udGludWVcbiAgICAgIGlmICghWydpdGVtJywgJ3dlYXBvbicsICdza2lsbCcsICdib29rJywgJ3NwZWxsJ10uaW5jbHVkZXMoaXRlbS50eXBlKSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAoIUNvQzdJdGVtLmlzQW55U3BlYyhpdGVtKSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbi5maW5kKGVsID0+IGVsLm5hbWUgPT09IGl0ZW0ubmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh1c2VDb0NJRCA9PT0gMCkge1xuICAgICAgICB1c2VDb0NJRCA9IGF3YWl0IERyb3BDb0NJRC5jcmVhdGUoKVxuICAgICAgfVxuICAgICAgY29sbGVjdGlvbi5wdXNoKERyb3BDb0NJRC5wcm9jZXNzSXRlbSh1c2VDb0NJRCwgaXRlbSkpXG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7IFtgc3lzdGVtLiR7Y29sbGVjdGlvbk5hbWV9YF06IGNvbGxlY3Rpb24gfSlcbiAgfVxuXG4gIGFzeW5jIF9vblJlbW92ZVNlY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBkaXYgPSBhLmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCBiaW8gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLmJpb1NlY3Rpb25zKVxuICAgIGJpby5zcGxpY2UoTnVtYmVyKGRpdi5kYXRhc2V0LmluZGV4KSwgMSlcbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ3N5c3RlbS5iaW9TZWN0aW9ucyc6IGJpbyB9KVxuICB9XG5cbiAgYXN5bmMgX29uQWRkQmlvICgpIHtcbiAgICBjb25zdCBiaW8gPSB0aGlzLml0ZW0uc3lzdGVtLmJpb1NlY3Rpb25zID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5iaW9TZWN0aW9ucykgOiBbXVxuICAgIGJpby5wdXNoKG51bGwpXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvU2VjdGlvbnMnOiBiaW8gfSlcbiAgfVxuXG4gIF9vbkFkZE1vbmV0YXJ5ICgpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLml0ZW0uc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcyA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ubW9uZXRhcnkudmFsdWVzKSA6IFtdXG4gICAgdmFsdWVzLnB1c2goe1xuICAgICAgbmFtZTogJycsXG4gICAgICBtaW46IG51bGwsXG4gICAgICBtYXg6IG51bGwsXG4gICAgICBjYXNoVHlwZTogMCxcbiAgICAgIGNhc2hWYWx1ZTogJycsXG4gICAgICBhc3NldHNUeXBlOiAwLFxuICAgICAgYXNzZXRzVmFsdWU6ICcnLFxuICAgICAgc3BlbmRpbmdUeXBlOiAwLFxuICAgICAgc3BlbmRpbmdWYWx1ZTogJydcbiAgICB9KVxuICAgIHRoaXMuaXRlbS51cGRhdGUoeyAnc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcyc6IHZhbHVlcyB9KVxuICB9XG5cbiAgX29uUmVtb3ZlTW9uZXRhcnkgKGV2ZW50KSB7XG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBkaXYgPSBhLmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCB2YWx1ZXMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcylcbiAgICB2YWx1ZXMuc3BsaWNlKE51bWJlcihkaXYuZGF0YXNldC5pbmRleCksIDEpXG4gICAgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0ubW9uZXRhcnkudmFsdWVzJzogdmFsdWVzIH0pXG4gIH1cblxuICBhc3luYyBfb25JdGVtU3VtbWFyeSAoZXZlbnQsIGNvbGxlY3Rpb25OYW1lID0gJ2l0ZW1zJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXS5maW5kKHMgPT4ge1xuICAgICAgcmV0dXJuIHMuX2lkID09PSBsaS5kYXRhKCdpdGVtLWlkJylcbiAgICB9KVxuICAgIGlmICghaXRlbSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGNoYXREYXRhID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgaXRlbS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiB0aGlzLml0ZW0uZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICAvLyBUb2dnbGUgc3VtbWFyeVxuICAgIGlmIChsaS5oYXNDbGFzcygnZXhwYW5kZWQnKSkge1xuICAgICAgY29uc3Qgc3VtbWFyeSA9IGxpLmNoaWxkcmVuKCcuaXRlbS1zdW1tYXJ5JylcbiAgICAgIHN1bW1hcnkuc2xpZGVVcCgyMDAsICgpID0+IHN1bW1hcnkucmVtb3ZlKCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpdiA9ICQoYDxkaXYgY2xhc3M9XCJpdGVtLXN1bW1hcnlcIj4ke2NoYXREYXRhfTwvZGl2PmApXG4gICAgICBjb25zdCBwcm9wcyA9ICQoJzxkaXYgY2xhc3M9XCJpdGVtLXByb3BlcnRpZXNcIj48L2Rpdj4nKVxuICAgICAgLy8gZm9yIChjb25zdCBwIG9mIGNoYXREYXRhLnByb3BlcnRpZXMpIHsgcHJvcHMuYXBwZW5kKGA8c3BhbiBjbGFzcz1cInRhZ1wiPiR7cH08L3NwYW4+YCkgfVxuICAgICAgZGl2LmFwcGVuZChwcm9wcylcbiAgICAgIGxpLmFwcGVuZChkaXYuaGlkZSgpKVxuICAgICAgZGl2LnNsaWRlRG93bigyMDApXG4gICAgfVxuICAgIGxpLnRvZ2dsZUNsYXNzKCdleHBhbmRlZCcpXG4gIH1cblxuICBhc3luYyBfb25JdGVtRGVsZXRlIChldmVudCwgY29sbGVjdGlvbk5hbWUgPSAnaXRlbXMnKSB7XG4gICAgY29uc3QgaXRlbSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW1JZCA9IGl0ZW0uZGF0YSgnaXRlbS1pZCcpXG4gICAgY29uc3QgQ29DSWQgPSBpdGVtLmRhdGEoJ2NvY2lkJylcbiAgICBjb25zdCBpdGVtSW5kZXggPSB0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXS5maW5kSW5kZXgoaSA9PiAoaXRlbUlkICYmIGkuX2lkID09PSBpdGVtSWQpIHx8IChDb0NJZCAmJiBpID09PSBDb0NJZCkpXG4gICAgaWYgKGl0ZW1JbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0gPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXSkgOiBbXVxuICAgICAgY29sbGVjdGlvbi5zcGxpY2UoaXRlbUluZGV4LCAxKVxuICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7IFtgc3lzdGVtLiR7Y29sbGVjdGlvbk5hbWV9YF06IGNvbGxlY3Rpb24gfSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ3NldHVwJ10sXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvc2V0dXAuaHRtbCcsXG4gICAgICB3aWR0aDogNTY1LFxuICAgICAgaGVpZ2h0OiA1MzAsXG4gICAgICBkcmFnRHJvcDogW3sgZHJhZ1NlbGVjdG9yOiAnLml0ZW0nIH1dLFxuICAgICAgc2Nyb2xsWTogWycudGFiLmRlc2NyaXB0aW9uJ10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXZpZ2F0aW9uJyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXQtYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2Rlc2NyaXB0aW9uJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuaGFzT3duZXIgPSB0aGlzLml0ZW0uaXNFbWJlZGRlZCA9PT0gdHJ1ZVxuXG4gICAgY29uc3QgZXJhID0gT2JqZWN0LmVudHJpZXModGhpcy5pdGVtLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXMgPz8ge30pLmZpbHRlcihlID0+IGVbMV0pLm1hcChlID0+IGVbMF0pXG5cbiAgICBjb25zdCBpdGVtcyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5leHBhbmRJdGVtQXJyYXkoeyBpdGVtTGlzdDogdGhpcy5pdGVtLnN5c3RlbS5pdGVtcywgZXJhOiAodHlwZW9mIGVyYVswXSAhPT0gJ3VuZGVmaW5lZCcgPyBlcmFbMF0gOiB0cnVlKSB9KVxuXG4gICAgc2hlZXREYXRhLnNraWxscyA9IGl0ZW1zLmZpbHRlcihpdCA9PiBpdC50eXBlID09PSAnc2tpbGwnKVxuICAgIHNoZWV0RGF0YS5vdGhlckl0ZW1zID0gaXRlbXMuZmlsdGVyKGl0ID0+IGl0LnR5cGUgIT09ICdza2lsbCcpXG5cbiAgICBzaGVldERhdGEuc2tpbGxMaXN0RW1wdHkgPSBzaGVldERhdGEuc2tpbGxzLmxlbmd0aCA9PT0gMFxuICAgIHNoZWV0RGF0YS5pdGVtc0xpc3RFbXB0eSA9IHNoZWV0RGF0YS5vdGhlckl0ZW1zLmxlbmd0aCA9PT0gMFxuXG4gICAgc2hlZXREYXRhLnNraWxscy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcblxuICAgIHNoZWV0RGF0YS5fZXJhcyA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5lcmFzKSkge1xuICAgICAgc2hlZXREYXRhLl9lcmFzLnB1c2goe1xuICAgICAgICBpZDoga2V5LFxuICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUpLFxuICAgICAgICBpc0VuYWJsZWQ6ICh0aGlzLml0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uZXJhcyA/PyB7fSlba2V5XSA9PT0gdHJ1ZVxuICAgICAgfSlcbiAgICB9XG4gICAgc2hlZXREYXRhLl9lcmFzLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgc2hlZXREYXRhLl9tb25ldGFyeUZvcm1hdHMgPSBbXVxuICAgIGZvciAoY29uc3Qga2V5IGluIENPQzcubW9uZXRhcnlGb3JtYXRzKSB7XG4gICAgICBzaGVldERhdGEuX21vbmV0YXJ5Rm9ybWF0cy5wdXNoKHsga2V5LCB2YWw6IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm1vbmV0YXJ5Rm9ybWF0c1trZXldKSB9KVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5zaG93Q3VycmVuY3lTeW1ib2wgPSBbJ2RlY2ltYWxMZWZ0JywgJ2RlY2ltYWxSaWdodCcsICdpbnRlZ2VyTGVmdCcsICdpbnRlZ2VyUmlnaHQnXS5pbmNsdWRlcyhzaGVldERhdGEuZGF0YS5zeXN0ZW0ubW9uZXRhcnkuZm9ybWF0KVxuXG4gICAgc2hlZXREYXRhLl9tb25ldGFyeVR5cGVzID0gW11cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBDT0M3Lm1vbmV0YXJ5VHlwZXMpIHtcbiAgICAgIGlmIChDT0M3Lm1vbmV0YXJ5VHlwZXNba2V5XS5maWx0ZXIubGVuZ3RoID09PSAwIHx8IENPQzcubW9uZXRhcnlUeXBlc1trZXldLmZpbHRlci5pbmNsdWRlcyhzaGVldERhdGEuZGF0YS5zeXN0ZW0ubW9uZXRhcnkuZm9ybWF0KSkge1xuICAgICAgICBzaGVldERhdGEuX21vbmV0YXJ5VHlwZXMucHVzaCh7IGtleSwgdmFsOiBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5tb25ldGFyeVR5cGVzW2tleV0ubmFtZSkgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaGVldERhdGEub25lQmxvY2tCYWNrU3RvcnkgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdvbmVCbG9ja0JhY2tzdG9yeScpXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvblZhbHVlID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkQmFja3N0b3J5ID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmJhY2tzdG9yeSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5pc0tlZXBlciA9IGdhbWUudXNlci5pc0dNXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGZvcm1EYXRhKSB7XG4gICAgY29uc3Qgc3lzdGVtID0gZm91bmRyeS51dGlscy5leHBhbmRPYmplY3QoZm9ybURhdGEpPy5zeXN0ZW1cbiAgICBpZiAoc3lzdGVtLmJpb1NlY3Rpb25zKSB7XG4gICAgICBmb3JtRGF0YVsnc3lzdGVtLmJpb1NlY3Rpb25zJ10gPSBPYmplY3QudmFsdWVzKFxuICAgICAgICBzeXN0ZW0uYmlvU2VjdGlvbnMgfHwgW11cbiAgICAgIClcbiAgICB9XG4gICAgaWYgKHN5c3RlbS5tb25ldGFyeS52YWx1ZXMpIHtcbiAgICAgIGZvcm1EYXRhWydzeXN0ZW0ubW9uZXRhcnkudmFsdWVzJ10gPSBPYmplY3QudmFsdWVzKHN5c3RlbS5tb25ldGFyeS52YWx1ZXMgfHwgW10pXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQ/Lm5hbWUgPT09ICdzeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvaW50cy5lbmFibGVkJykge1xuICAgICAgZm9ybURhdGFbJ3N5c3RlbS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMuZW5hYmxlZCddID0gIWV2ZW50LmN1cnJlbnRUYXJnZXQuY2hlY2tlZFxuICAgIH1cblxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0Py5uYW1lID09PSAnc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5yb2xscy5lbmFibGVkJykge1xuICAgICAgZm9ybURhdGFbJ3N5c3RlbS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLmVuYWJsZWQnXSA9ICFldmVudC5jdXJyZW50VGFyZ2V0LmNoZWNrZWRcbiAgICB9XG5cbiAgICBzdXBlci5fdXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGZvdW5kcnksIGdhbWUsIEl0ZW1TaGVldCwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcbmltcG9ydCBDb0M3QWN0aXZlRWZmZWN0IGZyb20gJy4uLy4uL2FjdGl2ZS1lZmZlY3QuanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IGlzQ3RybEtleSB9IGZyb20gJy4uLy4uL2NoYXQvaGVscGVyLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgSXRlbVNoZWV0IHdpdGggc29tZSB2ZXJ5IHNpbXBsZSBtb2RpZmljYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3U2tpbGxTaGVldCBleHRlbmRzIEl0ZW1TaGVldCB7XG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcbiAgICB0aGlzLl9zaGVldFRhYiA9ICdpdGVtcydcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRlbmQgYW5kIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgdXNlZCBieSB0aGUgU2ltcGxlIEl0ZW0gU2hlZXRcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2hlZXQnLCAnaXRlbSddLFxuICAgICAgd2lkdGg6IDUyMCxcbiAgICAgIGhlaWdodDogNDgwLFxuICAgICAgc2Nyb2xsWTogWycudGFiLmRlc2NyaXB0aW9uJ10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXZpZ2F0aW9uJyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXQtYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2Rlc2NyaXB0aW9uJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0IHRlbXBsYXRlICgpIHtcbiAgICByZXR1cm4gYHN5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvJHt0aGlzLml0ZW0udHlwZX0tc2hlZXQuaHRtbGBcbiAgfVxuXG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmUgZGF0YSBmb3IgcmVuZGVyaW5nIHRoZSBJdGVtIHNoZWV0XG4gICAqIFRoZSBwcmVwYXJlZCBkYXRhIG9iamVjdCBjb250YWlucyBib3RoIHRoZSBhY3RvciBkYXRhIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBzaGVldCBvcHRpb25zXG4gICAqL1xuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICAvLyB0aGlzLml0ZW0uY2hlY2tTa2lsbFByb3BlcnRpZXMoKTtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKClcblxuICAgIHNoZWV0RGF0YS5oYXNPd25lciA9IHRoaXMuaXRlbS5pc0VtYmVkZGVkID09PSB0cnVlXG4gICAgc2hlZXREYXRhLmhhZE5vbkNoYXJhY3Rlck93bmVyID0gc2hlZXREYXRhLmhhc093bmVyICYmIHRoaXMuYWN0b3I/LnR5cGUgIT09ICdjaGFyYWN0ZXInXG5cbiAgICBzaGVldERhdGEuZWZmZWN0cyA9IENvQzdBY3RpdmVFZmZlY3QucHJlcGFyZUFjdGl2ZUVmZmVjdENhdGVnb3JpZXMoXG4gICAgICB0aGlzLml0ZW0uZWZmZWN0c1xuICAgIClcblxuICAgIHNoZWV0RGF0YS5fcHJvcGVydGllcyA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5za2lsbFByb3BlcnRpZXMpKSB7XG4gICAgICBzaGVldERhdGEuX3Byb3BlcnRpZXMucHVzaCh7XG4gICAgICAgIGlkOiBrZXksXG4gICAgICAgIG5hbWU6IHZhbHVlLFxuICAgICAgICBpc0VuYWJsZWQ6IHRoaXMuaXRlbS5zeXN0ZW0ucHJvcGVydGllc1trZXldID09PSB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5fZXJhcyA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5lcmFzKSkge1xuICAgICAgc2hlZXREYXRhLl9lcmFzLnB1c2goe1xuICAgICAgICBpZDoga2V5LFxuICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUpLFxuICAgICAgICBpc0VuYWJsZWQ6ICh0aGlzLml0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uZXJhcyA/PyB7fSlba2V5XSA9PT0gdHJ1ZVxuICAgICAgfSlcbiAgICB9XG4gICAgc2hlZXREYXRhLl9lcmFzLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgc2hlZXREYXRhLmlzU3BlY2lhbGl6ZWQgPSB0aGlzLml0ZW0uc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbFxuICAgIHNoZWV0RGF0YS5jYW5Nb2RpZnlTcGVjID1cbiAgICAgICF0aGlzLml0ZW0uc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSAmJlxuICAgICAgIXRoaXMuaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5maWdodGluZ1xuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlcixcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5pc0tlZXBlciA9IGdhbWUudXNlci5pc0dNXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvKipcbiAgICogQWN0aXZhdGUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBwcmVwYXJlZCBzaGVldCBIVE1MXG4gICAqIEBwYXJhbSBodG1sIHtIVE1MfSAgIFRoZSBwcmVwYXJlZCBIVE1MIG9iamVjdCByZWFkeSB0byBiZSByZW5kZXJlZCBpbnRvIHRoZSBET01cbiAgICovXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICAvLyBFdmVyeXRoaW5nIGJlbG93IGhlcmUgaXMgb25seSBuZWVkZWQgaWYgdGhlIHNoZWV0IGlzIGVkaXRhYmxlXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZWRpdGFibGUpIHJldHVyblxuXG4gICAgaHRtbC5maW5kKCcudG9nZ2xlLXN3aXRjaCcpLmNsaWNrKHRoaXMuX29uQ2xpY2tUb2dnbGUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgYXN5bmMgX29uQ2xpY2tUb2dnbGUgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHByb3BlcnR5SWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy50b2dnbGUtc3dpdGNoJykuZGF0YXNldC5wcm9wZXJ0eVxuICAgIGF3YWl0IHRoaXMuaXRlbS50b2dnbGVQcm9wZXJ0eShcbiAgICAgIHByb3BlcnR5SWQsXG4gICAgICBpc0N0cmxLZXkoZXZlbnQpXG4gICAgKVxuICB9XG5cbiAgLy8gYXN5bmMgX29uQ2xpY2tBdHRyaWJ1dGVDb250cm9sKGV2ZW50KSB7XG4gIC8vICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgLy8gICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgLy8gICBjb25zdCBhY3Rpb24gPSBhLmRhdGFzZXQuYWN0aW9uO1xuICAvLyAgIGNvbnN0IGF0dHJzID0gdGhpcy5vYmplY3QuZGF0YS5kYXRhLmF0dHJpYnV0ZXM7XG4gIC8vICAgY29uc3QgZm9ybSA9IHRoaXMuZm9ybTtcblxuICAvLyAgIC8vIEFkZCBuZXcgYXR0cmlidXRlXG4gIC8vICAgaWYgKGFjdGlvbiA9PT0gXCJjcmVhdGVcIikge1xuICAvLyAgICAgY29uc3QgbmsgPSBPYmplY3Qua2V5cyhhdHRycykubGVuZ3RoICsgMTtcbiAgLy8gICAgIGxldCBuZXdLZXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAvLyAgICAgbmV3S2V5LmlubmVySFRNTCA9IGA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiZGF0YS5hdHRyaWJ1dGVzLmF0dHIke25rfS5rZXlcIiB2YWx1ZT1cImF0dHIke25rfVwiLz5gO1xuICAvLyAgICAgbmV3S2V5ID0gbmV3S2V5LmNoaWxkcmVuWzBdO1xuICAvLyAgICAgZm9ybS5hcHBlbmRDaGlsZChuZXdLZXkpO1xuICAvLyAgICAgYXdhaXQgdGhpcy5fb25TdWJtaXQoZXZlbnQpO1xuICAvLyAgIH1cblxuICAvLyAgIC8vIFJlbW92ZSBleGlzdGluZyBhdHRyaWJ1dGVcbiAgLy8gICBlbHNlIGlmIChhY3Rpb24gPT09IFwiZGVsZXRlXCIpIHtcbiAgLy8gICAgIGNvbnN0IGxpID0gYS5jbG9zZXN0KFwiLmF0dHJpYnV0ZVwiKTtcbiAgLy8gICAgIGxpLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQobGkpO1xuICAvLyAgICAgYXdhaXQgdGhpcy5fb25TdWJtaXQoZXZlbnQpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLyoqXG4gICAqIEltcGxlbWVudCB0aGUgX3VwZGF0ZU9iamVjdCBtZXRob2QgYXMgcmVxdWlyZWQgYnkgdGhlIHBhcmVudCBjbGFzcyBzcGVjXG4gICAqIFRoaXMgZGVmaW5lcyBob3cgdG8gdXBkYXRlIHRoZSBzdWJqZWN0IG9mIHRoZSBmb3JtIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAvLyBfdXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSkge1xuICAvLyAgIC8vIEhhbmRsZSB0aGUgZnJlZS1mb3JtIGF0dHJpYnV0ZXMgbGlzdFxuICAvLyAgIGNvbnN0IGZvcmQgPSBmb3VuZHJ5LnV0aWxzLmV4cGFuZE9iamVjdChmb3JtRGF0YSk7XG4gIC8vICAgY29uc3QgZm9ybUF0dHJzID0gZm91bmRyeS51dGlscy5leHBhbmRPYmplY3QoZm9ybURhdGEpLmRhdGEuYXR0cmlidXRlcyB8fCB7fTtcbiAgLy8gICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LnZhbHVlcyhmb3JtQXR0cnMpLnJlZHVjZSgob2JqLCB2KSA9PiB7XG4gIC8vICAgICBsZXQgayA9IHZbXCJrZXlcIl0udHJpbSgpO1xuICAvLyAgICAgaWYgKC9bXFxzXFwuXS8udGVzdChrKSkgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXCJBdHRyaWJ1dGUga2V5cyBtYXkgbm90IGNvbnRhaW4gc3BhY2VzIG9yIHBlcmlvZHNcIik7XG4gIC8vICAgICBkZWxldGUgdltcImtleVwiXTtcbiAgLy8gICAgIG9ialtrXSA9IHY7XG4gIC8vICAgICByZXR1cm4gb2JqO1xuICAvLyAgIH0sIHt9KTtcblxuICAvLyAgIC8vIFJlbW92ZSBhdHRyaWJ1dGVzIHdoaWNoIGFyZSBubyBsb25nZXIgdXNlZFxuICAvLyAgIGZvciAobGV0IGsgb2YgT2JqZWN0LmtleXModGhpcy5vYmplY3QuZGF0YS5kYXRhLmF0dHJpYnV0ZXMpKSB7XG4gIC8vICAgICBpZiAoIWF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoaykpIGF0dHJpYnV0ZXNbYC09JHtrfWBdID0gbnVsbDtcbiAgLy8gICB9XG5cbiAgLy8gICAvLyBSZS1jb21iaW5lIGZvcm1EYXRhXG4gIC8vICAgZm9ybURhdGEgPSBPYmplY3QuZW50cmllcyhmb3JtRGF0YSkuZmlsdGVyKGUgPT4gIWVbMF0uc3RhcnRzV2l0aChcImRhdGEuYXR0cmlidXRlc1wiKSkucmVkdWNlKChvYmosIGUpID0+IHtcbiAgLy8gICAgIG9ialtlWzBdXSA9IGVbMV07XG4gIC8vICAgICByZXR1cm4gb2JqO1xuICAvLyAgIH0sIHsgX2lkOiB0aGlzLm9iamVjdC5faWQsIFwiZGF0YS5hdHRyaWJ1dGVzXCI6IGF0dHJpYnV0ZXMgfSk7XG5cbiAgLy8gICAvLyBVcGRhdGUgdGhlIEl0ZW1cbiAgLy8gICByZXR1cm4gdGhpcy5vYmplY3QudXBkYXRlKGZvcm1EYXRhKTtcbiAgLy8gfVxuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IHNraWxsTmFtZSA9IGZvcm1EYXRhWydzeXN0ZW0uc2tpbGxOYW1lJ10gfHwgdGhpcy5pdGVtLnN5c3RlbS5za2lsbE5hbWVcbiAgICBpZiAodGhpcy5pdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5zcGVjaWFsKSB7XG4gICAgICBjb25zdCBzcGVjaWFsaXphdGlvbiA9IGZvcm1EYXRhWydzeXN0ZW0uc3BlY2lhbGl6YXRpb24nXSB8fCB0aGlzLml0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICBmb3JtRGF0YS5uYW1lID0gc3BlY2lhbGl6YXRpb24gKyAnICgnICsgc2tpbGxOYW1lICsgJyknXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1EYXRhLm5hbWUgPSBza2lsbE5hbWVcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLl91cGRhdGVPYmplY3QoZXZlbnQsIGZvcm1EYXRhKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgZm91bmRyeSwgZ2FtZSwgSXRlbVNoZWV0LCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN1NwZWxsU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL3NwZWxsL21haW4uaHRtbCcsXG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnaXRlbScsICdzcGVsbCddLFxuICAgICAgd2lkdGg6IDUwMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgIHNjcm9sbFk6IFsnLmJvZHknXSxcbiAgICAgIHRhYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLm5hdmlnYXRpb24nLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnZGVzY3JpcHRpb24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKClcbiAgICBzaGVldERhdGEuaGFzT3duZXIgPSB0aGlzLml0ZW0uaXNFbWJlZGRlZCA9PT0gdHJ1ZVxuICAgIHNoZWV0RGF0YS5pc0tlZXBlciA9IGdhbWUudXNlci5pc0dNXG4gICAgc2hlZXREYXRhLmlzT3duZXIgPSB0aGlzLml0ZW0uaXNPd25lclxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlcixcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICBodG1sLmZpbmQoJy5vcHRpb24nKS5jbGljayhldmVudCA9PiB0aGlzLm1vZGlmeVR5cGUoZXZlbnQpKVxuICAgIGh0bWwuZmluZCgnI2Nhc3Qtc3BlbGwnKS5jbGljayhldmVudCA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLml0ZW0uY2FzdCgpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIGNoZWNrYm94ZXMgZm9yIHR5cGUgd2hlbiB1c2VyIGNsaWNrcyBvbiB0aGUgY29ycmVzcG9uZGluZ1xuICAgKiBsYWJlbCwgbm90IHN1cmUgaWYgdGhpcyB3b3JrcyBvbiBlbmdpbmVzIG90aGVyIHRoYW4gVjhcbiAgICogQHBhcmFtIHtqUXVlcnl9IGV2ZW50IEBzZWUgYWN0aXZhdGVMaXN0ZW5lcnNcbiAgICogQHJldHVybnMge2pRdWVyeS5FdmVudH0gY2xpY2tcbiAgICovXG4gIG1vZGlmeVR5cGUgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIC8qKiBQcmV2ZW50cyBwcm9wYWdhdGlvbiBvZiB0aGUgc2FtZSBldmVudCBmcm9tIGJlaW5nIGNhbGxlZCAqL1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgY29uc3QgdG9nZ2xlU3dpdGNoID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgIHJldHVybiB0b2dnbGVTd2l0Y2gucHJldigpLnRyaWdnZXIoJ2NsaWNrJylcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGZvdW5kcnksIGdhbWUsIEl0ZW1TaGVldCwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcbmltcG9ydCBDb0M3QWN0aXZlRWZmZWN0IGZyb20gJy4uLy4uL2FjdGl2ZS1lZmZlY3QuanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vLi4vY29uZmlnLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgSXRlbVNoZWV0IHdpdGggc29tZSB2ZXJ5IHNpbXBsZSBtb2RpZmljYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3U3RhdHVzU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICAvKipcbiAgICpcbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2hlZXQnLCAnc3RhdHVzJ10sXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvc3RhdHVzLmh0bWwnLFxuICAgICAgd2lkdGg6IDUyNSxcbiAgICAgIGhlaWdodDogNDgwLFxuICAgICAgc2Nyb2xsWTogWycudGFiLmRlc2NyaXB0aW9uJ10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXZpZ2F0aW9uJyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXQtYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2Rlc2NyaXB0aW9uJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuZWZmZWN0LWNvbnRyb2wnKVxuICAgICAgLmNsaWNrKGV2ID0+IENvQzdBY3RpdmVFZmZlY3Qub25NYW5hZ2VBY3RpdmVFZmZlY3QoZXYsIHRoaXMuaXRlbSkpXG4gIH1cblxuICBfZ2V0SGVhZGVyQnV0dG9ucyAoKSB7XG4gICAgY29uc3QgaGVhZGVyQnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uKGhlYWRlckJ1dHRvbnMsIHRoaXMpXG4gICAgcmV0dXJuIGhlYWRlckJ1dHRvbnNcbiAgfVxuXG4gIC8qIFByZXBhcmUgZGF0YSBmb3IgcmVuZGVyaW5nIHRoZSBJdGVtIHNoZWV0XG4gICAqIFRoZSBwcmVwYXJlZCBkYXRhIG9iamVjdCBjb250YWlucyBib3RoIHRoZSBhY3RvciBkYXRhIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBzaGVldCBvcHRpb25zXG4gICAqL1xuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKClcbiAgICBzaGVldERhdGEuZWZmZWN0cyA9IENvQzdBY3RpdmVFZmZlY3QucHJlcGFyZUFjdGl2ZUVmZmVjdENhdGVnb3JpZXModGhpcy5pdGVtLmVmZmVjdHMsIHsgc3RhdHVzOiBmYWxzZSB9KVxuXG4gICAgc2hlZXREYXRhLml0ZW1Qcm9wZXJ0aWVzID0gW11cblxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuaXRlbS5zeXN0ZW0udHlwZSkpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzaGVldERhdGEuaXRlbVByb3BlcnRpZXMucHVzaChcbiAgICAgICAgICBDT0M3LnN0YXR1c1R5cGVba2V5XSA/IENPQzcuc3RhdHVzVHlwZVtrZXldIDogbnVsbFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uTm90ZXMgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ubm90ZXMsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGZvdW5kcnksIGdhbWUsIEl0ZW1TaGVldCwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi8uLi9jb25maWcuanMnXG5cbi8qKlxuICogRXh0ZW5kIHRoZSBiYXNpYyBJdGVtU2hlZXQgd2l0aCBzb21lIHZlcnkgc2ltcGxlIG1vZGlmaWNhdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdUYWxlbnRTaGVldCBleHRlbmRzIEl0ZW1TaGVldCB7XG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldCcsICd0YWxlbnQnXSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9pdGVtcy90YWxlbnQuaHRtbCcsXG4gICAgICB3aWR0aDogNTI1LFxuICAgICAgaGVpZ2h0OiA0ODAsXG4gICAgICBzY3JvbGxZOiBbJy50YWIuZGVzY3JpcHRpb24nXSxcbiAgICAgIHRhYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLnNoZWV0LW5hdmlnYXRpb24nLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnZGVzY3JpcHRpb24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICAvKiBQcmVwYXJlIGRhdGEgZm9yIHJlbmRlcmluZyB0aGUgSXRlbSBzaGVldFxuICAgKiBUaGUgcHJlcGFyZWQgZGF0YSBvYmplY3QgY29udGFpbnMgYm90aCB0aGUgYWN0b3IgZGF0YSBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgc2hlZXQgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuaXRlbVByb3BlcnRpZXMgPSBbXVxuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5pdGVtLnN5c3RlbS50eXBlKSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHNoZWV0RGF0YS5pdGVtUHJvcGVydGllcy5wdXNoKFxuICAgICAgICAgIENPQzcudGFsZW50VHlwZVtrZXldID8gQ09DNy50YWxlbnRUeXBlW2tleV0gOiBudWxsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvblZhbHVlID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25Ob3RlcyA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5ub3RlcyxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlcixcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5pc0tlZXBlciA9IGdhbWUudXNlci5pc0dNXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG59XG4iLCIvKiBnbG9iYWwgZm91bmRyeSwgZ2FtZSwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgQ29DN0FjdG9yU2hlZXQgfSBmcm9tICcuL2Jhc2UuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3VmVoaWNsZVNoZWV0IGV4dGVuZHMgQ29DN0FjdG9yU2hlZXQge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0VjInLCAnYWN0b3InLCAnaXRlbScsICd2ZWhpY2xlJ10sXG4gICAgICB3aWR0aDogNTU1LFxuICAgICAgaGVpZ2h0OiA0MjAsXG4gICAgICByZXNpemFibGU6IHRydWUsXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3ZlaGljbGUuaHRtbCcsXG4gICAgICBkcmFnRHJvcDogW3sgZHJhZ1NlbGVjdG9yOiAnLmFjdG9yJywgZHJvcFNlbGVjdG9yOiAnLmRyb3Bab25lJyB9XSxcbiAgICAgIHRhYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLnNoZWV0LW5hdicsXG4gICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLnNoZWV0LWJvZHknLFxuICAgICAgICAgIGluaXRpYWw6ICdkZXNjcmlwdGlvbidcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICAvLyB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgLy8gICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXhwZXJpbWVudGFsRmVhdHVyZXNXYXJuaW5nJylcbiAgICAvLyApXG4gICAgY29uc3Qgc2hlZXREYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEucHJvcGVydGllcyA9IFtdXG4gICAgaWYgKHRoaXMuYWN0b3Iuc3lzdGVtLnByb3BlcnRpZXMuYXJtZWQpIHtcbiAgICAgIHNoZWV0RGF0YS5wcm9wZXJ0aWVzLnB1c2goZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFybWVkVmVoaWNsZScpKVxuICAgIH1cblxuICAgIGNvbnN0IGV4cGFuZGVkID0gdGhpcy5hY3Rvci5nZXRGbGFnKCdDb0M3JywgJ2V4cGFuZGVkJylcbiAgICBpZiAodHlwZW9mIGV4cGFuZGVkID09PSAndW5kZWZpbmVkJykgc2hlZXREYXRhLmV4cGFuZGVkID0gdHJ1ZVxuICAgIGVsc2Ugc2hlZXREYXRhLmV4cGFuZGVkID0gZXhwYW5kZWRcbiAgICBpZiAoc2hlZXREYXRhLmV4cGFuZGVkKSB7XG4gICAgICBzaGVldERhdGEub3B0aW9ucy5oZWlnaHQgPSA0MjBcbiAgICB9IGVsc2Ugc2hlZXREYXRhLm9wdGlvbnMuaGVpZ2h0ID0gJ2F1dG8nXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvblZhbHVlID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25Ob3RlcyA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5ub3RlcyxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIC8vIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzaGVldERhdGEuZGF0YS50eXBlKSkge1xuICAgIC8vICAgaWYoIHZhbHVlKSBzaGVldERhdGEuaXRlbVByb3BlcnRpZXMucHVzaCggQ09DNy5ib29rVHlwZVtrZXldP0NPQzcuYm9va1R5cGVba2V5XTpudWxsKTtcbiAgICAvLyB9XG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGh0bWwuZmluZCgnLmFkZC1hcm1vcicpLmNsaWNrKGFzeW5jICgpID0+IGF3YWl0IHRoaXMuX29uQWRkQXJtb3IoKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLnJlbW92ZS1hcm1vcicpXG4gICAgICAuY2xpY2soYXN5bmMgZXZlbnQgPT4gYXdhaXQgdGhpcy5fb25SZW1vdmVBcm1vcihldmVudCkpXG4gICAgaHRtbC5maW5kKCcuZXhwYW5kLWJ1dHRvbicpLmNsaWNrKHRoaXMuX29uVG9nZ2xlRXhwYW5kLmJpbmQodGhpcykpXG4gICAgLy8gRXZlcnl0aGluZyBiZWxvdyBoZXJlIGlzIG9ubHkgbmVlZGVkIGlmIHRoZSBzaGVldCBpcyBlZGl0YWJsZVxuICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmVkaXRhYmxlKSByZXR1cm47XG4gICAgLy8gaHRtbC5vbignZHJvcCcsIChldmVudCkgPT4gdGhpcy5fb25Ecm9wKGV2ZW50KSk7XG4gICAgLy8gaHRtbC5maW5kKCcuc3BlbGwgLnNwZWxsLW5hbWUgaDQnKS5jbGljayhldmVudCA9PiB0aGlzLl9vblNwZWxsU3VtbWFyeShldmVudCkpO1xuICAgIC8vIGh0bWwuZmluZCgnLml0ZW0tZGVsZXRlJykuY2xpY2sodGhpcy5fb25TcGVsbERlbGV0ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGFzeW5jIF9vblRvZ2dsZUV4cGFuZCAoKSB7XG4gICAgY29uc3QgZXhwYW5kZWQgPSB0aGlzLmFjdG9yLmdldEZsYWcoJ0NvQzcnLCAnZXhwYW5kZWQnKVxuICAgIGlmIChleHBhbmRlZCkge1xuICAgICAgdGhpcy5vbGRTaXplID0gdGhpcy5wb3NpdGlvbi5oZWlnaHRcbiAgICAgIHRoaXMucG9zaXRpb24uaGVpZ2h0ID0gJ2F1dG8nIC8vIFJlc2V0IHRoZSBzdG9yZWQgcG9zaXRpb24gdG8gZm9yY2UgdG8gcmVjYWxjdWxhdGUgd2luZG93IHNpemUgVE9ETzogU3RvcmUgcHJldmlvdXMgcG9zaXRpb24gdG8gcmVzdG9yZSBpdCBpbnN0ZWFkIG9mIGF1dG9cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3NpdGlvbi5oZWlnaHQgPSB0aGlzLm9sZFNpemUgfHwgNDIwIC8vIFJlc2V0IHRoZSBzdG9yZWQgcG9zaXRpb24gdG8gZm9yY2UgdG8gcmVjYWxjdWxhdGUgd2luZG93IHNpemUgVE9ETzogU3RvcmUgcHJldmlvdXMgcG9zaXRpb24gdG8gcmVzdG9yZSBpdCBpbnN0ZWFkIG9mIGF1dG9cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRGbGFnKCdDb0M3JywgJ2V4cGFuZGVkJywgIWV4cGFuZGVkKVxuICB9XG5cbiAgYXN5bmMgX29uQWRkQXJtb3IgKCkge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgdGhpcy5hY3Rvci5zeXN0ZW0uYXR0cmlicy5hcm1vci5sb2NhdGlvbnMgfHwgW11cbiAgICApXG4gICAgbG9jYXRpb25zLnB1c2goeyBuYW1lOiBudWxsLCB2YWx1ZTogbnVsbCB9KVxuICAgIGF3YWl0IHRoaXMuYWN0b3IudXBkYXRlKHsgJ3N5c3RlbS5hdHRyaWJzLmFybW9yLmxvY2F0aW9ucyc6IGxvY2F0aW9ucyB9KVxuICB9XG5cbiAgYXN5bmMgX29uUmVtb3ZlQXJtb3IgKGV2ZW50KSB7XG4gICAgY29uc3QgYnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGxvY2F0aW9uID0gYnV0dG9uLmNsb3Nlc3QoJy5hcm1vcicpXG4gICAgY29uc3QgaW5kZXggPSBsb2NhdGlvbi5kYXRhc2V0LmluZGV4XG4gICAgY29uc3QgbG9jYXRpb25zID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICB0aGlzLmFjdG9yLnN5c3RlbS5hdHRyaWJzLmFybW9yLmxvY2F0aW9ucyB8fCBudWxsXG4gICAgKVxuICAgIGlmICghbG9jYXRpb25zKSByZXR1cm5cbiAgICBsb2NhdGlvbnMuc3BsaWNlKGluZGV4LCAxKVxuICAgIGF3YWl0IHRoaXMuYWN0b3IudXBkYXRlKHsgJ3N5c3RlbS5hdHRyaWJzLmFybW9yLmxvY2F0aW9ucyc6IGxvY2F0aW9ucyB9KVxuICB9XG5cbiAgb25DbG9zZVNoZWV0ICgpIHtcbiAgICBzdXBlci5vbkNsb3NlU2hlZXQoKVxuICAgIC8vIHRoaXMuYWN0b3IubG9ja2VkID0gdHJ1ZTtcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gIC8qICBGb3JtIFN1Ym1pc3Npb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IHN5c3RlbSA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGZvcm1EYXRhKT8uc3lzdGVtXG4gICAgaWYgKHN5c3RlbS5hdHRyaWJzLmFybW9yLmxvY2F0aW9ucykge1xuICAgICAgZm9ybURhdGFbJ3N5c3RlbS5hdHRyaWJzLmFybW9yLmxvY2F0aW9ucyddID0gT2JqZWN0LnZhbHVlcyhcbiAgICAgICAgc3lzdGVtLmF0dHJpYnMuYXJtb3IubG9jYXRpb25zIHx8IFtdXG4gICAgICApXG4gICAgfVxuXG4gICAgc3VwZXIuX3VwZGF0ZU9iamVjdChldmVudCwgZm9ybURhdGEpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lLCBJdGVtU2hlZXQsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgaXNDdHJsS2V5IH0gZnJvbSAnLi4vLi4vY2hhdC9oZWxwZXIuanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgSXRlbVNoZWV0IHdpdGggc29tZSB2ZXJ5IHNpbXBsZSBtb2RpZmljYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3V2VhcG9uU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICAvKipcbiAgICpcbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2hlZXQnLCAnaXRlbSddLFxuICAgICAgd2lkdGg6IDU0NSxcbiAgICAgIGhlaWdodDogNDgwLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcuc2hlZXQtdGFicycsXG4gICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLnNoZWV0LWJvZHknLFxuICAgICAgICAgIGluaXRpYWw6ICdza2lsbHMnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBnZXQgdGVtcGxhdGUgKCkge1xuICAgIGNvbnN0IHBhdGggPSAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9pdGVtcydcbiAgICByZXR1cm4gYCR7cGF0aH0vd2VhcG9uLXNoZWV0Lmh0bWxgXG4gIH1cblxuICBfZ2V0SGVhZGVyQnV0dG9ucyAoKSB7XG4gICAgY29uc3QgaGVhZGVyQnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uKGhlYWRlckJ1dHRvbnMsIHRoaXMpXG4gICAgcmV0dXJuIGhlYWRlckJ1dHRvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlIGRhdGEgZm9yIHJlbmRlcmluZyB0aGUgSXRlbSBzaGVldFxuICAgKiBUaGUgcHJlcGFyZWQgZGF0YSBvYmplY3QgY29udGFpbnMgYm90aCB0aGUgYWN0b3IgZGF0YSBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgc2hlZXQgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuY29tYmF0U2tpbGwgPSBbXVxuXG4gICAgc2hlZXREYXRhLmhhc093bmVyID0gdGhpcy5pdGVtLmlzRW1iZWRkZWQgPT09IHRydWVcbiAgICBpZiAoc2hlZXREYXRhLmhhc093bmVyKSB7XG4gICAgICBzaGVldERhdGEuZmlyZWFybVNraWxscyA9IHRoaXMuYWN0b3IuZmlyZWFybVNraWxsc1xuICAgICAgc2hlZXREYXRhLmZpZ2h0aW5nU2tpbGxzID0gdGhpcy5hY3Rvci5maWdodGluZ1NraWxsc1xuICAgICAgc2hlZXREYXRhLmNvbWJhdFNraWxsID0gdGhpcy5pdGVtLmFjdG9yLml0ZW1zLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3NraWxsJykge1xuICAgICAgICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9KVxuXG4gICAgICBzaGVldERhdGEuY29tYmF0U2tpbGwuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgfVxuXG4gICAgc2hlZXREYXRhLl9wcm9wZXJ0aWVzID0gW11cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LndlYXBvblByb3BlcnRpZXMpKSB7XG4gICAgICBzaGVldERhdGEuX3Byb3BlcnRpZXMucHVzaCh7XG4gICAgICAgIGlkOiBrZXksXG4gICAgICAgIG5hbWU6IHZhbHVlLFxuICAgICAgICBpc0VuYWJsZWQ6IHRoaXMuaXRlbS5zeXN0ZW0ucHJvcGVydGllc1trZXldID09PSB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5fZXJhcyA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5lcmFzKSkge1xuICAgICAgc2hlZXREYXRhLl9lcmFzLnB1c2goe1xuICAgICAgICBwcmljZTogdGhpcy5pdGVtLnN5c3RlbS5wcmljZVtrZXldID8/IDAsXG4gICAgICAgIGlkOiBrZXksXG4gICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZSksXG4gICAgICAgIGlzRW5hYmxlZDogKHRoaXMuaXRlbS5mbGFncz8uQ29DNz8uY29jaWRGbGFnPy5lcmFzID8/IHt9KVtrZXldID09PSB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgICBzaGVldERhdGEuX2VyYXMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICBzaGVldERhdGEudXNlc0FsdGVybmF0ZVNraWxsID1cbiAgICAgIHRoaXMuaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5hdXRvID09PSB0cnVlIHx8XG4gICAgICB0aGlzLml0ZW0uc3lzdGVtLnByb3BlcnRpZXMuYnJzdCA9PT0gdHJ1ZSB8fFxuICAgICAgdGhpcy5pdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLnRocm93biA9PT0gdHJ1ZVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uU3BlY2lhbCA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5zcGVjaWFsLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cbiAgICByZXR1cm4gc2hlZXREYXRhXG4gIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZSBldmVudCBsaXN0ZW5lcnMgdXNpbmcgdGhlIHByZXBhcmVkIHNoZWV0IEhUTUxcbiAgICogQHBhcmFtIGh0bWwge0hUTUx9ICAgVGhlIHByZXBhcmVkIEhUTUwgb2JqZWN0IHJlYWR5IHRvIGJlIHJlbmRlcmVkIGludG8gdGhlIERPTVxuICAgKi9cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgLy8gRXZlcnl0aGluZyBiZWxvdyBoZXJlIGlzIG9ubHkgbmVlZGVkIGlmIHRoZSBzaGVldCBpcyBlZGl0YWJsZVxuICAgIGlmICghdGhpcy5vcHRpb25zLmVkaXRhYmxlKSByZXR1cm5cbiAgICBodG1sLmZpbmQoJy50b2dnbGUtc3dpdGNoJykuY2xpY2sodGhpcy5fb25DbGlja1RvZ2dsZS5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLndlYXBvbi1wcm9wZXJ0eScpLmNsaWNrKHRoaXMuX29uUHJvcGVydHlDbGljay5iaW5kKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRcbiAgICovXG4gIGFzeW5jIF9vbkNsaWNrVG9nZ2xlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBwcm9wZXJ0eUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudG9nZ2xlLXN3aXRjaCcpLmRhdGFzZXQucHJvcGVydHlcbiAgICBhd2FpdCB0aGlzLml0ZW0udG9nZ2xlUHJvcGVydHkoXG4gICAgICBwcm9wZXJ0eUlkLFxuICAgICAgaXNDdHJsS2V5KGV2ZW50KVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIF9vblByb3BlcnR5Q2xpY2sgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHByb3BlcnR5SWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy53ZWFwb24tcHJvcGVydHknKS5kYXRhc2V0LnByb3BlcnR5XG4gICAgYXdhaXQgdGhpcy5pdGVtLnRvZ2dsZVByb3BlcnR5KHByb3BlcnR5SWQpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBnYW1lLCBIb29rcyAqL1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uL2NvbmZpZy5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbmFzeW5jIGZ1bmN0aW9uIHBlcmZvcm1GaWx0ZXIgKGUpIHtcbiAgY29uc3QgYXBwSWQgPSBlLmN1cnJlbnRUYXJnZXQubmFtZS5yZXBsYWNlKC9eY29jN1teMC05XSsoXFxkKykkLywgJyQxJylcbiAgY29uc3QgYXBwID0gJCgnZGl2LmFwcFtkYXRhLWFwcGlkPScgKyBhcHBJZCArICddJylcbiAgY29uc3QgdHlwZSA9IGFwcC5maW5kKCdzZWxlY3RbbmFtZT1jb2M3dHlwZScgKyBhcHBJZCArICddJykudmFsKClcbiAgY29uc3QgbmFtZSA9IGFwcC5maW5kKCdpbnB1dFtuYW1lPXNlYXJjaF0nKS52YWwoKVxuICBjb25zdCBlcmFFbGVtZW50ID0gYXBwLmZpbmQoJ3NlbGVjdFtuYW1lPWNvYzdlcmEnICsgYXBwSWQgKyAnXScpXG4gIGxldCBlcmEgPSAnJ1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdzZXR1cCc6XG4gICAgY2FzZSAnc2tpbGwnOlxuICAgIGNhc2UgJ3dlYXBvbic6XG4gICAgICBlcmFFbGVtZW50LmNsb3Nlc3QoJ2Rpdi5lcmFfc2VsZWN0Jykuc2hvdygpXG4gICAgICBlcmEgPSBlcmFFbGVtZW50LnZhbCgpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBlcmFFbGVtZW50LmNsb3Nlc3QoJ2Rpdi5lcmFfc2VsZWN0JykuaGlkZSgpXG4gIH1cbiAgY29uc3QgaXRlbXMgPSBhd2FpdCBnYW1lLnBhY2tzLmdldChhcHAuZGF0YSgncGFja0lkJykpPy5nZXREb2N1bWVudHMoKVxuICBpZiAodHlwZW9mIGl0ZW1zID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVyblxuICB9XG4gIGNvbnN0IHNob3cgPSBbXVxuICBjb25zdCBuYW1lRmlsdGVyID0gbmV3IFJlZ0V4cChSZWdFeHAuZXNjYXBlKG5hbWUpLCAnaScpXG4gIGZvciAoY29uc3QgWywgaXRlbV0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbXMpKSB7XG4gICAgbGV0IGZpbHRlciA9IHRydWVcbiAgICBpZiAoZmlsdGVyICYmIG5hbWUgIT09ICcnKSB7XG4gICAgICBmaWx0ZXIgPSBpdGVtLm5hbWUubWF0Y2gobmFtZUZpbHRlcilcbiAgICB9XG4gICAgaWYgKGZpbHRlciAmJiB0eXBlICE9PSAnJykge1xuICAgICAgZmlsdGVyID0gaXRlbS50eXBlID09PSB0eXBlXG4gICAgfVxuICAgIGlmIChmaWx0ZXIgJiYgZXJhICE9PSAnJykge1xuICAgICAgY29uc3QgZXJhcyA9IGl0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uZXJhc1xuICAgICAgaWYgKGVyYXMgJiYgT2JqZWN0LmtleXMoZXJhcykubGVuZ3RoID4gMCAmJiAhKGVyYXNbZXJhXSA/PyBmYWxzZSkpIHtcbiAgICAgICAgZmlsdGVyID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZpbHRlcikge1xuICAgICAgc2hvdy5wdXNoKGl0ZW0uaWQpXG4gICAgfVxuICB9XG4gIGFwcC5maW5kKCdvbC5kaXJlY3RvcnktbGlzdCBsaScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9IHNob3cuaW5jbHVkZXModGhpcy5kYXRhc2V0LmRvY3VtZW50SWQpXG4gICAgICA/ICdmbGV4J1xuICAgICAgOiAnbm9uZSdcbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBlbmRpdW1GaWx0ZXIgKCkge1xuICBIb29rcy5vbigncmVuZGVyQ29tcGVuZGl1bScsIGFzeW5jIChhcHAsIGh0bWwsIGRhdGEpID0+IHtcbiAgICBpZiAoYXBwLmNvbGxlY3Rpb24uZG9jdW1lbnROYW1lID09PSAnSXRlbScpIHtcbiAgICAgIGF3YWl0IGFwcC5jb2xsZWN0aW9uLmdldEluZGV4KClcbiAgICAgIGNvbnN0IHR5cGVzID0gWy4uLm5ldyBTZXQoZGF0YS5pbmRleC5maWx0ZXIoaSA9PiBpLm5hbWUgIT09ICcjW0NGX3RlbXBFbnRpdHldJykubWFwKGl0ZW0gPT4gaXRlbS50eXBlKSldXG4gICAgICBjb25zdCBzZWxlY3QgPSBbXVxuICAgICAgc2VsZWN0LnB1c2goXG4gICAgICAgICc8b3B0aW9uIHZhbHVlPVwiXCI+JyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BbGwnKSArICc8L29wdGlvbj4nXG4gICAgICApXG4gICAgICBpZiAodHlwZXMuaW5jbHVkZXMoJ2FyY2hldHlwZScpKSB7XG4gICAgICAgIHNlbGVjdC5wdXNoKFxuICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiYXJjaGV0eXBlXCI+JyArXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuQXJjaGV0eXBlJykgK1xuICAgICAgICAgICAgJzwvb3B0aW9uPidcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKCdib29rJykpIHtcbiAgICAgICAgc2VsZWN0LnB1c2goXG4gICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCJib29rXCI+JyArXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuQm9vaycpICtcbiAgICAgICAgICAgICc8L29wdGlvbj4nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlcy5pbmNsdWRlcygnaXRlbScpKSB7XG4gICAgICAgIHNlbGVjdC5wdXNoKFxuICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiaXRlbVwiPicgK1xuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVudGl0aWVzLkl0ZW0nKSArXG4gICAgICAgICAgICAnPC9vcHRpb24+J1xuICAgICAgICApXG4gICAgICB9XG4gICAgICBpZiAodHlwZXMuaW5jbHVkZXMoJ29jY3VwYXRpb24nKSkge1xuICAgICAgICBzZWxlY3QucHVzaChcbiAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIm9jY3VwYXRpb25cIj4nICtcbiAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FbnRpdGllcy5PY2N1cGF0aW9uJykgK1xuICAgICAgICAgICAgJzwvb3B0aW9uPidcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKCdzZXR1cCcpKSB7XG4gICAgICAgIHNlbGVjdC5wdXNoKFxuICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwic2V0dXBcIj4nICtcbiAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FbnRpdGllcy5TZXR1cCcpICtcbiAgICAgICAgICAgICc8L29wdGlvbj4nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlcy5pbmNsdWRlcygnc2tpbGwnKSkge1xuICAgICAgICBzZWxlY3QucHVzaChcbiAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cInNraWxsXCI+JyArXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuU2tpbGwnKSArXG4gICAgICAgICAgICAnPC9vcHRpb24+J1xuICAgICAgICApXG4gICAgICB9XG4gICAgICBpZiAodHlwZXMuaW5jbHVkZXMoJ3NwZWxsJykpIHtcbiAgICAgICAgc2VsZWN0LnB1c2goXG4gICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCJzcGVsbFwiPicgK1xuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVudGl0aWVzLlNwZWxsJykgK1xuICAgICAgICAgICAgJzwvb3B0aW9uPidcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKCdzdGF0dXMnKSkge1xuICAgICAgICBzZWxlY3QucHVzaChcbiAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cInN0YXR1c1wiPicgK1xuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVudGl0aWVzLlN0YXR1cycpICtcbiAgICAgICAgICAgICc8L29wdGlvbj4nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlcy5pbmNsdWRlcygndGFsZW50JykpIHtcbiAgICAgICAgc2VsZWN0LnB1c2goXG4gICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCJ0YWxlbnRcIj4nICtcbiAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FbnRpdGllcy5UYWxlbnQnKSArXG4gICAgICAgICAgICAnPC9vcHRpb24+J1xuICAgICAgICApXG4gICAgICB9XG4gICAgICBpZiAodHlwZXMuaW5jbHVkZXMoJ3dlYXBvbicpKSB7XG4gICAgICAgIHNlbGVjdC5wdXNoKFxuICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwid2VhcG9uXCI+JyArXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuV2VhcG9uJykgK1xuICAgICAgICAgICAgJzwvb3B0aW9uPidcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgY29uc3QgZXJhcyA9IFtdXG4gICAgICBlcmFzLnB1c2goXG4gICAgICAgICc8b3B0aW9uIHZhbHVlPVwiXCI+JyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BbGwnKSArICc8L29wdGlvbj4nXG4gICAgICApXG4gICAgICBmb3IgKGNvbnN0IGVyYSBvZiBPYmplY3QuZW50cmllcyhDT0M3LmVyYXMpLm1hcChlID0+IHsgcmV0dXJuIHsgaWQ6IGVbMF0sIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZShlWzFdKSB9IH0pLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KSkge1xuICAgICAgICBlcmFzLnB1c2goXG4gICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCInICtcbiAgICAgICAgICAgIGVyYS5pZCArXG4gICAgICAgICAgICAnXCI+JyArXG4gICAgICAgICAgICBlcmEubmFtZSArXG4gICAgICAgICAgICAnPC9vcHRpb24+J1xuICAgICAgICApXG4gICAgICB9XG4gICAgICBodG1sLmRhdGEoJ3BhY2tJZCcsIGFwcC5tZXRhZGF0YS5pZClcbiAgICAgIGxldCB1bmNvbW1vbiA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ta2lsbFJhcml0eVNob3J0JylcbiAgICAgIGlmICh1bmNvbW1vbiA9PT0gJ0NvQzcuU2tpbGxSYXJpdHlTaG9ydCcpIHtcbiAgICAgICAgdW5jb21tb24gPSAnPz8nXG4gICAgICB9XG4gICAgICBodG1sLmZpbmQoJ2xpLmRpcmVjdG9yeS1pdGVtJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHJvdyA9ICQodGhpcylcbiAgICAgICAgbGV0IGl0ZW0gPSBbXVxuICAgICAgICBpZiAodHlwZW9mIGRhdGEuaW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gREVQUkVDSUFURUQgSU4gdjExXG4gICAgICAgICAgaXRlbSA9IGRhdGEuaW5kZXguZmluZChpID0+IGkuX2lkID09PSByb3cuZGF0YSgnZG9jdW1lbnQtaWQnKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtID0gYXBwLmNvbGxlY3Rpb24uaW5kZXguZ2V0KHJvdy5kYXRhKCdkb2N1bWVudC1pZCcpKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtICYmIGl0ZW0udHlwZSA9PT0gJ3NraWxsJykge1xuICAgICAgICAgIHJvdy5maW5kKCdhJykuaHRtbChpdGVtLm5hbWUgKyAnICgnICsgKGl0ZW0uc3lzdGVtPy5iYXNlID8/ICc/JykgKyAnJScgKyAoKGl0ZW0uc3lzdGVtPy5wcm9wZXJ0aWVzPy5yYXJpdHkgPz8gZmFsc2UpID8gJyAnICsgdW5jb21tb24gOiAnJykgKyAnKScpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCdoZWFkZXIuZGlyZWN0b3J5LWhlYWRlcicpXG4gICAgICAgIC5hZnRlcihcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cImNvbXBlbmRpdW1maWx0ZXJcIj4nICtcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cImhlYWRlci1zZWFyY2ggZmxleHJvd1wiPjxpIGNsYXNzPVwiZmFzIGZhLWxheWVyLWdyb3VwXCI+PC9pPjxzZWxlY3QgbmFtZT1cImNvYzd0eXBlJyArIGFwcC5hcHBJZCArICdcIiBzdHlsZT1cIlwiPicgKyBzZWxlY3Quam9pbignJykgKyAnPC9zZWxlY3Q+PC9kaXY+JyArXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJoZWFkZXItc2VhcmNoIGZsZXhyb3cgZXJhX3NlbGVjdFwiIHN0eWxlPVwiZGlzcGxheTpub25lXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGF5ZXItZ3JvdXBcIj48L2k+PHNlbGVjdCBuYW1lPVwiY29jN2VyYScgKyBhcHAuYXBwSWQgKyAnXCIgc3R5bGU9XCJcIj4nICsgZXJhcy5qb2luKCcnKSArICc8L3NlbGVjdD48L2Rpdj4nICtcbiAgICAgICAgICAnPC9kaXY+J1xuICAgICAgICApXG4gICAgICBodG1sLmZpbmQoJ3NlbGVjdCcpLmNoYW5nZShwZXJmb3JtRmlsdGVyLmJpbmQodGhpcykpXG4gICAgICBodG1sLmZpbmQoJ2lucHV0Jykua2V5dXAocGVyZm9ybUZpbHRlci5iaW5kKHRoaXMpKVxuICAgIH1cbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBBY3RvciwgQ2FyZCwgQ09ORklHLCBmb3VuZHJ5LCBnYW1lLCBJdGVtLCBKb3VybmFsRW50cnksIE1hY3JvLCBQbGF5bGlzdCwgUm9sbFRhYmxlLCBTY2VuZSwgU2NlbmVOYXZpZ2F0aW9uLCB1aSAqL1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uL2NvbmZpZy5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0NJRCB7XG4gIHN0YXRpYyBpbml0ICgpIHtcbiAgICBDT05GSUcuQWN0b3IuY29tcGVuZGl1bUluZGV4RmllbGRzLnB1c2goJ2ZsYWdzLkNvQzcuY29jaWRGbGFnJylcbiAgICAvLyBDT05GSUcuQ2FyZHMuY29tcGVuZGl1bUluZGV4RmllbGRzLnB1c2goJ2ZsYWdzLkNvQzcuY29jaWRGbGFnJylcbiAgICBDT05GSUcuSXRlbS5jb21wZW5kaXVtSW5kZXhGaWVsZHMucHVzaCgnZmxhZ3MuQ29DNy5jb2NpZEZsYWcnKVxuICAgIENPTkZJRy5JdGVtLmNvbXBlbmRpdW1JbmRleEZpZWxkcy5wdXNoKCdzeXN0ZW0uYmFzZScpXG4gICAgQ09ORklHLkl0ZW0uY29tcGVuZGl1bUluZGV4RmllbGRzLnB1c2goJ3N5c3RlbS5wcm9wZXJ0aWVzJylcbiAgICBDT05GSUcuSm91cm5hbEVudHJ5LmNvbXBlbmRpdW1JbmRleEZpZWxkcy5wdXNoKCdmbGFncy5Db0M3LmNvY2lkRmxhZycpXG4gICAgQ09ORklHLk1hY3JvLmNvbXBlbmRpdW1JbmRleEZpZWxkcy5wdXNoKCdmbGFncy5Db0M3LmNvY2lkRmxhZycpXG4gICAgQ09ORklHLlBsYXlsaXN0LmNvbXBlbmRpdW1JbmRleEZpZWxkcy5wdXNoKCdmbGFncy5Db0M3LmNvY2lkRmxhZycpXG4gICAgQ09ORklHLlJvbGxUYWJsZS5jb21wZW5kaXVtSW5kZXhGaWVsZHMucHVzaCgnZmxhZ3MuQ29DNy5jb2NpZEZsYWcnKVxuICAgIENPTkZJRy5TY2VuZS5jb21wZW5kaXVtSW5kZXhGaWVsZHMucHVzaCgnZmxhZ3MuQ29DNy5jb2NpZEZsYWcnKVxuICAgIGdhbWUuc3lzdGVtLmFwaSA9IHtcbiAgICAgIGNvY2lkOiBDb0NJRFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIFJlZ0V4cCBmb3IgdmFsaWQgdHlwZSBhbmQgZm9ybWF0XG4gICAqIEByZXR1cm5zIFJlZ0V4cFxuICAgKi9cbiAgc3RhdGljIHJlZ0V4S2V5ICgpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXignICsgT2JqZWN0LmtleXMoQ29DSUQuZ2FtZVByb3BlcnR5TG9va3VwKS5qb2luKCd8JykgKyAnKVxcXFwuKC4qPylcXFxcLiguKykkJylcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQ29DSUQgdHlwZS5zdWJ0eXBlLiBiYXNlZCBvbiBkb2N1bWVudFxuICAgKiBAcGFyYW0gZG9jdW1lbnRcbiAgICogQHJldHVybnMgc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgZ2V0UHJlZml4IChkb2N1bWVudCkge1xuICAgIGZvciAoY29uc3QgdHlwZSBpbiBDb0NJRC5kb2N1bWVudE5hbWVMb29rdXApIHtcbiAgICAgIGlmIChkb2N1bWVudCBpbnN0YW5jZW9mIENvQ0lELmRvY3VtZW50TmFtZUxvb2t1cFt0eXBlXSkge1xuICAgICAgICByZXR1cm4gdHlwZSArICcuJyArIChkb2N1bWVudC50eXBlID8/ICcnKSArICcuJ1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQ29DSUQgdHlwZS5zdWJ0eXBlLm5hbWUgYmFzZWQgb24gZG9jdW1lbnRcbiAgICogQHBhcmFtIGRvY3VtZW50XG4gICAqIEByZXR1cm5zIHN0cmluZ1xuICAgKi9cbiAgc3RhdGljIGd1ZXNzSWQgKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIENvQ0lELmdldFByZWZpeChkb2N1bWVudCkgKyBDb0M3VXRpbGl0aWVzLnRvS2ViYWJDYXNlKGRvY3VtZW50Lm5hbWUpXG4gIH1cblxuICAvKipcbiAgICogR2V0IENvQ0lEIHR5cGUuc3VidHlwZS5wYXJ0aWFsLW5hbWUoLXJlbW92ZWQpXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHJldHVybnMgc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgZ3Vlc3NHcm91cEZyb21LZXkgKGlkKSB7XG4gICAgaWYgKGlkKSB7XG4gICAgICBjb25zdCBrZXkgPSBpZC5yZXBsYWNlKC8oW15cXFxcLi1dKykkLywgJycpXG4gICAgICBpZiAoa2V5LnN1YnN0cigtMSkgPT09ICctJykge1xuICAgICAgICByZXR1cm4ga2V5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBDb0NJRCB0eXBlLnN1YnR5cGUucGFydGlhbC1uYW1lKC1yZW1vdmVkKVxuICAgKiBAcGFyYW0gZG9jdW1lbnRcbiAgICogQHJldHVybnMgc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgZ3Vlc3NHcm91cEZyb21Eb2N1bWVudCAoZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gQ29DSUQuZ3Vlc3NHcm91cEZyb21LZXkoZG9jdW1lbnQuZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uaWQpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cmFuc2xhdGlvbiBvZiBlcmEga2V5XG4gICAqIEBwYXJhbSBlcmEgdGhlIGVyYXMgdG8gbWF0Y2ggYWdhaW5zdCAoJ3N0YW5kYXJkJywgJ21vZGVyblB1bHAnLCAuLi4pLCB0cnVlID0gd29ybGQgZGVmYXVsdCwgZmFsc2UgPSBubyBmaWx0ZXJcbiAgICogQHJldHVybnMgc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgZXJhVGV4dCAoZXJhKSB7XG4gICAgaWYgKGVyYSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQW55JylcbiAgICB9IGVsc2UgaWYgKGVyYSA9PT0gdHJ1ZSkge1xuICAgICAgZXJhID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnd29ybGRFcmEnKVxuICAgIH1cblxuICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KENPQzcuZXJhc1tlcmFdID8/ICdDb0M3LkNvQ0lERmxhZy5lcnJvci51bmtub3duLWVyYScsIHsgZXJhIH0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgaXRlbXMgd2l0aCBtYXRjaGluZyBDb0NJRHMsIGxhbmd1YWdlLCBhbmQgZXJhc1xuICAgKiB1aS5ub3RpZmljYXRpb25zLndhcm4gZm9yIG1pc3Npbmcga2V5c1xuICAgKiBAcGFyYW0gaXRlbUxpc3QgYXJyYXkgb2YgQ29DSURzXG4gICAqIEBwYXJhbSBsYW5nIHRoZSBsYW5ndWFnZSB0byBtYXRjaCBhZ2FpbnN0ICgnZW4nLCAnZXMnLCAuLi4pXG4gICAqIEBwYXJhbSBlcmEgdGhlIGVyYXMgdG8gbWF0Y2ggYWdhaW5zdCAoJ3N0YW5kYXJkJywgJ21vZGVyblB1bHAnLCAuLi4pLCB0cnVlID0gd29ybGQgZGVmYXVsdCwgZmFsc2UgPSBubyBmaWx0ZXJcbiAgICogQHBhcmFtIGxhbmdGYWxsYmFjayBzaG91bGQgdGhlIHN5c3RlbSBmYWxsIGJhY2sgdG8gZW4gaW5jYXNlIHRoZXJlIGlzIG5vIHRyYW5zbGF0aW9uXG4gICAqIEBwYXJhbSBzaG93TG9hZGluZyBTaG93IGxvYWRpbmcgYmFyXG4gICAqIEByZXR1cm5zIGFycmF5XG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZXhwYW5kSXRlbUFycmF5ICh7IGl0ZW1MaXN0LCBsYW5nID0gZ2FtZS5pMThuLmxhbmcsIGVyYSA9IHRydWUsIGxhbmdGYWxsYmFjayA9IHRydWUsIHNob3dMb2FkaW5nID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgbGV0IGl0ZW1zID0gW11cbiAgICBjb25zdCBjb2NpZHMgPSBpdGVtTGlzdC5maWx0ZXIoaXQgPT4gdHlwZW9mIGl0ID09PSAnc3RyaW5nJylcbiAgICBpdGVtcyA9IGl0ZW1MaXN0LmZpbHRlcihpdCA9PiB0eXBlb2YgaXQgIT09ICdzdHJpbmcnKVxuXG4gICAgaWYgKGNvY2lkcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGZvdW5kID0gYXdhaXQgQ29DSUQuZnJvbUNvQ0lEUmVnZXhCZXN0KHsgY29jaWRSZWdFeHA6IENvQ0lELm1ha2VHcm91cFJlZ0V4KGNvY2lkcyksIHR5cGU6ICdpJywgbGFuZywgZXJhLCBsYW5nRmFsbGJhY2ssIHNob3dMb2FkaW5nIH0pXG4gICAgICBjb25zdCBhbGwgPSBbXVxuICAgICAgZm9yIChjb25zdCBjb2NpZCBvZiBjb2NpZHMpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGZvdW5kLmZpbmQoaSA9PiBpLmZsYWdzLkNvQzcuY29jaWRGbGFnLmlkID09PSBjb2NpZClcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICBhbGwucHVzaChpdGVtKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWxsLmxlbmd0aCA8IGNvY2lkcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qgbm90bWlzc2luZyA9IFtdXG4gICAgICAgIGZvciAoY29uc3QgZG9jIG9mIGFsbCkge1xuICAgICAgICAgIG5vdG1pc3NpbmcucHVzaChkb2MuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVyYSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGVyYSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3dvcmxkRXJhJylcbiAgICAgICAgfVxuICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcuZXJyb3IuZG9jdW1lbnRzLW5vdC1mb3VuZCcsIHsgY29jaWRzOiBjb2NpZHMuZmlsdGVyKHggPT4gIW5vdG1pc3NpbmcuaW5jbHVkZXMoeCkpLmpvaW4oJywgJyksIGxhbmcsIGVyYTogQ29DSUQuZXJhVGV4dChlcmEpIH0pKVxuICAgICAgfVxuICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoYWxsKVxuICAgIH1cbiAgICByZXR1cm4gaXRlbXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGl0ZW0gd2l0aCBtYXRjaGluZyBDb0NJRHMgZnJvbSBsaXN0XG4gICAqIEVtcHR5IGFycmF5IHJldHVybiBmb3IgbWlzc2luZyBrZXlzXG4gICAqIEBwYXJhbSBjb2NpZCBhIHNpbmdsZSBjb2NpZFxuICAgKiBAcGFyYW0gbGlzdCBhcnJheSBvZiBpdGVtc1xuICAgKiBAcmV0dXJucyBhcnJheVxuICAgKi9cbiAgc3RhdGljIGZpbmRDb2NJZEluTGlzdCAoY29jaWQsIGxpc3QpIHtcbiAgICBsZXQgaXRlbU5hbWUgPSAnJ1xuICAgIGNvbnN0IENvQ0lES2V5cyA9IGZvdW5kcnkudXRpbHMuZmxhdHRlbk9iamVjdChnYW1lLmkxOG4udHJhbnNsYXRpb25zLkNvQzcuQ29DSURGbGFnLmtleXMpXG4gICAgaWYgKHR5cGVvZiBDb0NJREtleXNbY29jaWRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaXRlbU5hbWUgPSBDb0NJREtleXNbY29jaWRdXG4gICAgfVxuICAgIHJldHVybiAodHlwZW9mIGxpc3QuZmlsdGVyID09PSAndW5kZWZpbmVkJyA/IE9iamVjdC52YWx1ZXMobGlzdCkgOiBsaXN0KS5maWx0ZXIoaSA9PiBpLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmlkID09PSBjb2NpZCB8fCAoaXRlbU5hbWUgIT09ICcnICYmIGl0ZW1OYW1lID09PSBpLm5hbWUpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgUmVnRXhwIG1hdGNoaW5nIGFsbCBzdHJpbmdzIGluIGFycmF5XG4gICAqIEBwYXJhbSBjb2NpZHMgYW4gYXJyYXkgb2YgQ29DSUQgc3RyaW5nc1xuICAgKiBAcGFyYW0gbGlzdCBhcnJheSBvZiBpdGVtc1xuICAgKiBAcmV0dXJucyBSZWdFeHBcbiAgICovXG4gIHN0YXRpYyBtYWtlR3JvdXBSZWdFeCAoY29jaWRzKSB7XG4gICAgaWYgKHR5cGVvZiBjb2NpZHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb2NpZHMgPSBbY29jaWRzXVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvY2lkcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGNvY2lkcy5maWx0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgY29uc3Qgc3BsaXRzID0ge31cbiAgICBjb25zdCByZ3ggPSBDb0NJRC5yZWdFeEtleSgpXG4gICAgZm9yIChjb25zdCBpIG9mIGNvY2lkcykge1xuICAgICAgY29uc3Qga2V5ID0gaS5tYXRjaChyZ3gpXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3BsaXRzW2tleVsxXV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc3BsaXRzW2tleVsxXV0gPSB7fVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc3BsaXRzW2tleVsxXV1ba2V5WzJdXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzcGxpdHNba2V5WzFdXVtrZXlbMl1dID0gW11cbiAgICAgICAgfVxuICAgICAgICBzcGxpdHNba2V5WzFdXVtrZXlbMl1dLnB1c2goa2V5WzNdKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2xpZW50bHkgZXJyb3JcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVnRXhQYXJ0cyA9IFtdXG4gICAgZm9yIChjb25zdCB0IGluIHNwbGl0cykge1xuICAgICAgY29uc3Qgcm93ID0gW11cbiAgICAgIGZvciAoY29uc3QgcyBpbiBzcGxpdHNbdF0pIHtcbiAgICAgICAgaWYgKHNwbGl0c1t0XVtzXS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcm93LnB1c2gocyArICdcXFxcLicgKyAnKCcgKyBzcGxpdHNbdF1bc10uam9pbignfCcpICsgJyknKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdy5wdXNoKHMgKyAnXFxcXC4nICsgc3BsaXRzW3RdW3NdLmpvaW4oJycpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocm93Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmVnRXhQYXJ0cy5wdXNoKHQgKyAnXFxcXC4nICsgJygnICsgcm93LmpvaW4oJ3wnKSArICcpJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZ0V4UGFydHMucHVzaCh0ICsgJ1xcXFwuJyArIHJvdy5qb2luKCcnKSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlZ0V4UGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14oJyArIHJlZ0V4UGFydHMuam9pbignfCcpICsgJykkJylcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcmVnRXhQYXJ0cy5qb2luKCcnKSArICckJylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBkb2N1bWVudHMgd2l0aCBhbiBDb0NJRCBtYXRjaGluZyB0aGUgcmVnZXggYW5kIG1hdGNoaW5nIHRoZSBkb2N1bWVudCB0eXBlXG4gICAqIGFuZCBsYW5ndWFnZSwgZnJvbSB0aGUgc3BlY2lmaWVkIHNjb3BlLlxuICAgKiBFbXB0eSBhcnJheSByZXR1cm4gZm9yIG5vIG1hdGNoZXNcbiAgICogQHBhcmFtIGNvY2lkUmVnRXhwIHJlZ2V4IHVzZWQgb24gdGhlIENvQ0lEXG4gICAqIEBwYXJhbSB0eXBlIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSB3YW50ZWQgQ29DSUQsIGZvciBleGFtcGxlICdpJywgJ2EnLCAnamUnXG4gICAqIEBwYXJhbSBlcmEgdGhlIGVyYXMgdG8gbWF0Y2ggYWdhaW5zdCAoJ3N0YW5kYXJkJywgJ21vZGVyblB1bHAnLCAuLi4pLCB0cnVlID0gd29ybGQgZGVmYXVsdCwgZmFsc2UgPSBubyBmaWx0ZXJcbiAgICogQHBhcmFtIGxhbmcgdGhlIGxhbmd1YWdlIHRvIG1hdGNoIGFnYWluc3QgKCdlbicsICdlcycsIC4uLilcbiAgICogQHBhcmFtIHNjb3BlIGRlZmluZXMgd2hlcmUgaXQgd2lsbCBsb29rOlxuICAgKiAqKm1hdGNoKiogc2FtZSBsb2dpYyBhcyBmcm9tQ29DSUQgZnVuY3Rpb24sXG4gICAqICoqYWxsKio6IGZpbmQgaW4gYm90aCB3b3JsZCAmIGNvbXBlbmRpYSxcbiAgICogKip3b3JsZCoqOiBvbmx5IHNlYXJjaCBpbiB3b3JsZCxcbiAgICogKipjb21wZW5kaXVtcyoqOiBvbmx5IHNlYXJjaCBpbiBjb21wZW5kaXVtc1xuICAgKiBAcGFyYW0gbGFuZ0ZhbGxiYWNrIHNob3VsZCB0aGUgc3lzdGVtIGZhbGwgYmFjayB0byBlbiBpbmNhc2UgdGhlcmUgaXMgbm8gdHJhbnNsYXRpb25cbiAgICogQHBhcmFtIHNob3dMb2FkaW5nIFNob3cgbG9hZGluZyBiYXJcbiAgICogQHJldHVybnMgYXJyYXlcbiAgICovXG4gIHN0YXRpYyBhc3luYyBmcm9tQ29DSURSZWdleEFsbCAoeyBjb2NpZFJlZ0V4cCwgdHlwZSwgbGFuZyA9IGdhbWUuaTE4bi5sYW5nLCBlcmEgPSBmYWxzZSwgc2NvcGUgPSAnbWF0Y2gnLCBsYW5nRmFsbGJhY2sgPSB0cnVlLCBzaG93TG9hZGluZyA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGlmICghY29jaWRSZWdFeHApIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBbXVxuXG4gICAgbGV0IGNvdW50ID0gMFxuICAgIGlmIChzaG93TG9hZGluZykge1xuICAgICAgaWYgKFsnbWF0Y2gnLCAnYWxsJywgJ3dvcmxkJ10uaW5jbHVkZXMoc2NvcGUpKSB7XG4gICAgICAgIGNvdW50KytcbiAgICAgIH1cbiAgICAgIGlmIChbJ21hdGNoJywgJ2FsbCcsICdjb21wZW5kaXVtcyddLmluY2x1ZGVzKHNjb3BlKSkge1xuICAgICAgICBjb3VudCA9IGNvdW50ICsgZ2FtZS5wYWNrcy5zaXplXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFsnbWF0Y2gnLCAnYWxsJywgJ3dvcmxkJ10uaW5jbHVkZXMoc2NvcGUpKSB7XG4gICAgICBjb25zdCB3b3JsZERvY3VtZW50cyA9IGF3YWl0IENvQ0lELmRvY3VtZW50c0Zyb21Xb3JsZCh7IGNvY2lkUmVnRXhwLCB0eXBlLCBsYW5nLCBlcmEsIGxhbmdGYWxsYmFjaywgcHJvZ3Jlc3NCYXI6IGNvdW50IH0pXG4gICAgICBpZiAoc2NvcGUgPT09ICdtYXRjaCcgJiYgd29ybGREb2N1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChzaG93TG9hZGluZykge1xuICAgICAgICAgIFNjZW5lTmF2aWdhdGlvbi5kaXNwbGF5UHJvZ3Jlc3NCYXIoeyBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRVUC5QYWNrYWdlc0xvYWRpbmcnKSwgcGN0OiAxMDAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJBbGxDb0NJRCh3b3JsZERvY3VtZW50cywgbGFuZ0ZhbGxiYWNrICYmIGxhbmcgIT09ICdlbicpXG4gICAgICB9XG4gICAgICByZXN1bHQuc3BsaWNlKDAsIDAsIC4uLndvcmxkRG9jdW1lbnRzKVxuICAgIH1cblxuICAgIGlmIChbJ21hdGNoJywgJ2FsbCcsICdjb21wZW5kaXVtcyddLmluY2x1ZGVzKHNjb3BlKSkge1xuICAgICAgY29uc3QgY29tcGVuZGlhRG9jdW1lbnRzID0gYXdhaXQgQ29DSUQuZG9jdW1lbnRzRnJvbUNvbXBlbmRpYSh7IGNvY2lkUmVnRXhwLCB0eXBlLCBsYW5nLCBlcmEsIGxhbmdGYWxsYmFjaywgcHJvZ3Jlc3NCYXI6IGNvdW50IH0pXG5cbiAgICAgIHJlc3VsdC5zcGxpY2UocmVzdWx0Lmxlbmd0aCwgMCwgLi4uY29tcGVuZGlhRG9jdW1lbnRzKVxuICAgIH1cblxuICAgIGlmIChzaG93TG9hZGluZykge1xuICAgICAgU2NlbmVOYXZpZ2F0aW9uLmRpc3BsYXlQcm9ncmVzc0Jhcih7IGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFVQLlBhY2thZ2VzTG9hZGluZycpLCBwY3Q6IDEwMCB9KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmZpbHRlckFsbENvQ0lEKHJlc3VsdCwgbGFuZ0ZhbGxiYWNrICYmIGxhbmcgIT09ICdlbicpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgZG9jdW1lbnRzIHdpdGggYW4gQ29DSUQsIGxhbmd1YWdlLCBhbmQgZXJhIGZyb20gdGhlIHNwZWNpZmllZCBzY29wZS5cbiAgICogRW1wdHkgYXJyYXkgcmV0dXJuIGZvciBubyBtYXRjaGVzXG4gICAqIEBwYXJhbSBjb2NpZCBhIHNpbmdsZSBjb2NpZFxuICAgKiBAcGFyYW0gbGFuZyB0aGUgbGFuZ3VhZ2UgdG8gbWF0Y2ggYWdhaW5zdCAoJ2VuJywgJ2VzJywgLi4uKVxuICAgKiBAcGFyYW0gZXJhIHRoZSBlcmFzIHRvIG1hdGNoIGFnYWluc3QgKCdzdGFuZGFyZCcsICdtb2Rlcm5QdWxwJywgLi4uKSwgdHJ1ZSA9IHdvcmxkIGRlZmF1bHQsIGZhbHNlID0gbm8gZmlsdGVyXG4gICAqIEBwYXJhbSBzY29wZSBkZWZpbmVzIHdoZXJlIGl0IHdpbGwgbG9vazpcbiAgICogKiptYXRjaCoqIHNhbWUgbG9naWMgYXMgZnJvbUNvQ0lEIGZ1bmN0aW9uLFxuICAgKiAqKmFsbCoqOiBmaW5kIGluIGJvdGggd29ybGQgJiBjb21wZW5kaWEsXG4gICAqICoqd29ybGQqKjogb25seSBzZWFyY2ggaW4gd29ybGQsXG4gICAqICoqY29tcGVuZGl1bXMqKjogb25seSBzZWFyY2ggaW4gY29tcGVuZGl1bXNcbiAgICogQHBhcmFtIGxhbmdGYWxsYmFjayBzaG91bGQgdGhlIHN5c3RlbSBmYWxsIGJhY2sgdG8gZW4gaW5jYXNlIHRoZXJlIGlzIG5vIHRyYW5zbGF0aW9uXG4gICAqIEBwYXJhbSBzaG93TG9hZGluZyBTaG93IGxvYWRpbmcgYmFyXG4gICAqIEByZXR1cm5zIGFycmF5XG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZnJvbUNvQ0lEQWxsICh7IGNvY2lkLCBsYW5nID0gZ2FtZS5pMThuLmxhbmcsIGVyYSA9IGZhbHNlLCBzY29wZSA9ICdtYXRjaCcsIGxhbmdGYWxsYmFjayA9IHRydWUsIHNob3dMb2FkaW5nID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgaWYgKCFjb2NpZCB8fCB0eXBlb2YgY29jaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgY29uc3QgcGFydHMgPSBjb2NpZC5tYXRjaChDb0NJRC5yZWdFeEtleSgpKVxuICAgIGlmICghcGFydHMpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBpZiAobGFuZyA9PT0gJycpIHtcbiAgICAgIGxhbmcgPSBnYW1lLmkxOG4ubGFuZ1xuICAgIH1cbiAgICByZXR1cm4gQ29DSUQuZnJvbUNvQ0lEUmVnZXhBbGwoeyBjb2NpZFJlZ0V4cDogbmV3IFJlZ0V4cCgnXicgKyBDb0M3VXRpbGl0aWVzLnF1b3RlUmVnRXhwKGNvY2lkKSArICckJyksIHR5cGU6IHBhcnRzWzFdLCBsYW5nLCBlcmEsIHNjb3BlLCBsYW5nRmFsbGJhY2ssIHNob3dMb2FkaW5nIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBvbmx5IHRoZSBoaWdoZXN0IHByaW9yaXR5IGRvY3VtZW50cyBmb3IgZWFjaCBDb0NJRCB0aGF0IG1hdGNoZXMgdGhlIFJlZ0V4cCBhbmRcbiAgICogbGFuZ3VhZ2UsIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHkgZG9jdW1lbnRzIGluIHRoZSBXb3JsZCB0YWtpbmcgcHJlY2VkZW5jZSBvdmVyXG4gICAqIGFueSBkb2N1bWVudHMgaW4gY29tcGVuZGl1bSBwYWNrcy5cbiAgICogRW1wdHkgYXJyYXkgcmV0dXJuIGZvciBubyBtYXRjaGVzXG4gICAqIEBwYXJhbSBjb2NpZFJlZ0V4cCByZWdleCB1c2VkIG9uIHRoZSBDb0NJRFxuICAgKiBAcGFyYW0gdHlwZSB0aGUgZmlyc3QgcGFydCBvZiB0aGUgd2FudGVkIENvQ0lELCBmb3IgZXhhbXBsZSAnaScsICdhJywgJ2plJ1xuICAgKiBAcGFyYW0gbGFuZyB0aGUgbGFuZ3VhZ2UgdG8gbWF0Y2ggYWdhaW5zdCAoXCJlblwiLCBcImVzXCIsIC4uLilcbiAgICogQHBhcmFtIGVyYSB0aGUgZXJhcyB0byBtYXRjaCBhZ2FpbnN0ICgnc3RhbmRhcmQnLCAnbW9kZXJuUHVscCcsIC4uLiksIHRydWUgPSB3b3JsZCBkZWZhdWx0XG4gICAqIEBwYXJhbSBsYW5nRmFsbGJhY2sgc2hvdWxkIHRoZSBzeXN0ZW0gZmFsbCBiYWNrIHRvIGVuIGluY2FzZSB0aGVyZSBpcyBubyB0cmFuc2xhdGlvblxuICAgKiBAcGFyYW0gc2hvd0xvYWRpbmcgU2hvdyBsb2FkaW5nIGJhclxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGZyb21Db0NJRFJlZ2V4QmVzdCAoeyBjb2NpZFJlZ0V4cCwgdHlwZSwgbGFuZyA9IGdhbWUuaTE4bi5sYW5nLCBlcmEgPSB0cnVlLCBsYW5nRmFsbGJhY2sgPSB0cnVlLCBzaG93TG9hZGluZyA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGlmIChlcmEgPT09IGZhbHNlKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ29DSURGbGFnLmVycm9yLnVua25vd24tZXJhJywgeyBlcmE6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BbnknKSB9KSlcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBjb25zdCBhbGxEb2N1bWVudHMgPSBhd2FpdCB0aGlzLmZyb21Db0NJRFJlZ2V4QWxsKHsgY29jaWRSZWdFeHAsIHR5cGUsIGxhbmcsIGVyYSwgc2NvcGU6ICdhbGwnLCBsYW5nRmFsbGJhY2ssIHNob3dMb2FkaW5nIH0pXG4gICAgY29uc3QgYmVzdERvY3VtZW50cyA9IHRoaXMuZmlsdGVyQmVzdENvQ0lEKGFsbERvY3VtZW50cylcbiAgICByZXR1cm4gYmVzdERvY3VtZW50c1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgb25seSB0aGUgaGlnaGVzdCBwcmlvcml0eSBkb2N1bWVudCBmb3IgQ29DSUQgdGhhdCBtYXRjaGVzIHRoZSBsYW5ndWFnZSxcbiAgICogd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eSBkb2N1bWVudHMgaW4gdGhlIFdvcmxkIHRha2luZyBwcmVjZWRlbmNlIG92ZXJcbiAgICogYW55IGRvY3VtZW50c1xuICAgKiBpbiBjb21wZW5kaXVtIHBhY2tzLlxuICAgKiBAcGFyYW0gY29jaWQgc3RyaW5nIENvQ0lEXG4gICAqIEBwYXJhbSBsYW5nIHRoZSBsYW5ndWFnZSB0byBtYXRjaCBhZ2FpbnN0IChcImVuXCIsIFwiZXNcIiwgLi4uKVxuICAgKiBAcGFyYW0gZXJhIHRoZSBlcmFzIHRvIG1hdGNoIGFnYWluc3QgKCdzdGFuZGFyZCcsICdtb2Rlcm5QdWxwJywgLi4uKSwgdHJ1ZSA9IHdvcmxkIGRlZmF1bHRcbiAgICogQHBhcmFtIGxhbmdGYWxsYmFjayBzaG91bGQgdGhlIHN5c3RlbSBmYWxsIGJhY2sgdG8gZW4gaW5jYXNlIHRoZXJlIGlzIG5vIHRyYW5zbGF0aW9uXG4gICAqL1xuICBzdGF0aWMgZnJvbUNvQ0lEIChjb2NpZCwgbGFuZyA9IGdhbWUuaTE4bi5sYW5nLCBlcmEgPSB0cnVlLCBsYW5nRmFsbGJhY2sgPSB0cnVlKSB7XG4gICAgaWYgKGVyYSA9PT0gZmFsc2UpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcuZXJyb3IudW5rbm93bi1lcmEnLCB7IGVyYTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFueScpIH0pKVxuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIHJldHVybiBDb0NJRC5mcm9tQ29DSURCZXN0KHsgY29jaWQsIGxhbmcsIGVyYSwgbGFuZ0ZhbGxiYWNrIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBvbmx5IHRoZSBoaWdoZXN0IHByaW9yaXR5IGRvY3VtZW50IGZvciBDb0NJRCB0aGF0IG1hdGNoZXMgdGhlIGxhbmd1YWdlLFxuICAgKiB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5IGRvY3VtZW50cyBpbiB0aGUgV29ybGQgdGFraW5nIHByZWNlZGVuY2Ugb3ZlclxuICAgKiBhbnkgZG9jdW1lbnRzXG4gICAqIGluIGNvbXBlbmRpdW0gcGFja3MuXG4gICAqIEBwYXJhbSBjb2NpZCBzdHJpbmcgQ29DSURcbiAgICogQHBhcmFtIGxhbmcgdGhlIGxhbmd1YWdlIHRvIG1hdGNoIGFnYWluc3QgKFwiZW5cIiwgXCJlc1wiLCAuLi4pXG4gICAqIEBwYXJhbSBlcmEgdGhlIGVyYXMgdG8gbWF0Y2ggYWdhaW5zdCAoJ3N0YW5kYXJkJywgJ21vZGVyblB1bHAnLCAuLi4pLCB0cnVlID0gd29ybGQgZGVmYXVsdFxuICAgKiBAcGFyYW0gbGFuZ0ZhbGxiYWNrIHNob3VsZCB0aGUgc3lzdGVtIGZhbGwgYmFjayB0byBlbiBpbmNhc2UgdGhlcmUgaXMgbm8gdHJhbnNsYXRpb25cbiAgICogQHBhcmFtIHNob3dMb2FkaW5nIFNob3cgbG9hZGluZyBiYXJcbiAgICovXG4gIHN0YXRpYyBmcm9tQ29DSURCZXN0ICh7IGNvY2lkLCBsYW5nID0gZ2FtZS5pMThuLmxhbmcsIGVyYSA9IHRydWUsIGxhbmdGYWxsYmFjayA9IHRydWUsIHNob3dMb2FkaW5nID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgaWYgKCFjb2NpZCB8fCB0eXBlb2YgY29jaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgaWYgKGVyYSA9PT0gZmFsc2UpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcuZXJyb3IudW5rbm93bi1lcmEnLCB7IGVyYTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFueScpIH0pKVxuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBjb2NpZC5zcGxpdCgnLicpWzBdXG4gICAgY29uc3QgY29jaWRSZWdFeHAgPSBuZXcgUmVnRXhwKCdeJyArIENvQzdVdGlsaXRpZXMucXVvdGVSZWdFeHAoY29jaWQpICsgJyQnKVxuICAgIHJldHVybiBDb0NJRC5mcm9tQ29DSURSZWdleEJlc3QoeyBjb2NpZFJlZ0V4cCwgdHlwZSwgbGFuZywgZXJhLCBsYW5nRmFsbGJhY2ssIHNob3dMb2FkaW5nIH0pXG4gIH1cblxuICAvKipcbiAgICogRm9yIGFuIGFycmF5IG9mIGRvY3VtZW50cyBhbHJlYWR5IHByb2Nlc3NlZCBieSBmaWx0ZXJBbGxDb0NJRCwgcmV0dXJucyBvbmx5IHRob3NlIHRoYXQgYXJlIHRoZSBcImJlc3RcIiB2ZXJzaW9uIG9mIHRoZWlyIENvQ0lEXG4gICAqIEBwYXJhbSBkb2N1bWVudHNcbiAgICogQHJldHVybnNcbiAgICovXG4gIHN0YXRpYyBmaWx0ZXJCZXN0Q29DSUQgKGRvY3VtZW50cykge1xuICAgIGNvbnN0IGJlc3RNYXRjaERvY3VtZW50cyA9IG5ldyBNYXAoKVxuICAgIGZvciAoY29uc3QgZG9jIG9mIGRvY3VtZW50cykge1xuICAgICAgY29uc3QgZG9jQ29DSUQgPSBkb2MuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8uaWRcbiAgICAgIGlmIChkb2NDb0NJRCkge1xuICAgICAgICBjb25zdCBjdXJyZW50RG9jID0gYmVzdE1hdGNoRG9jdW1lbnRzLmdldChkb2NDb0NJRClcbiAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50RG9jID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGJlc3RNYXRjaERvY3VtZW50cy5zZXQoZG9jQ29DSUQsIGRvYylcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJlZmVyIHBhY2sgPT09ICcnIGlmIHBvc3NpYmxlXG4gICAgICAgIGNvbnN0IGRvY1BhY2sgPSAoZG9jLnBhY2sgPz8gJycpXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nUGFjayA9IChjdXJyZW50RG9jPy5wYWNrID8/ICcnKVxuICAgICAgICBjb25zdCBwcmVmZXJXb3JsZCA9IGRvY1BhY2sgPT09ICcnIHx8IGV4aXN0aW5nUGFjayAhPT0gJydcbiAgICAgICAgaWYgKCFwcmVmZXJXb3JsZCkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmVmZXIgaGlnaGVzdCBwcmlvcml0eVxuICAgICAgICBsZXQgZG9jUHJpb3JpdHkgPSBwYXJzZUludChkb2MuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8ucHJpb3JpdHkgPz8gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsIDEwKVxuICAgICAgICBkb2NQcmlvcml0eSA9IGlzTmFOKGRvY1ByaW9yaXR5KSA/IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSIDogZG9jUHJpb3JpdHlcbiAgICAgICAgbGV0IGV4aXN0aW5nUHJpb3JpdHkgPSBwYXJzZUludChjdXJyZW50RG9jLmdldEZsYWcoJ0NvQzcnLCAnY29jaWRGbGFnJyk/LnByaW9yaXR5ID8/IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLCAxMClcbiAgICAgICAgZXhpc3RpbmdQcmlvcml0eSA9IGlzTmFOKGV4aXN0aW5nUHJpb3JpdHkpID8gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIgOiBleGlzdGluZ1ByaW9yaXR5XG4gICAgICAgIGNvbnN0IHByZWZlclByaW9yaXR5ID0gZG9jUHJpb3JpdHkgPj0gZXhpc3RpbmdQcmlvcml0eVxuICAgICAgICBpZiAoIXByZWZlclByaW9yaXR5KSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGJlc3RNYXRjaERvY3VtZW50cy5zZXQoZG9jQ29DSUQsIGRvYylcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFsuLi5iZXN0TWF0Y2hEb2N1bWVudHMudmFsdWVzKCldXG4gIH1cblxuICAvKipcbiAgICogRm9yIGFuIGFycmF5IG9mIGRvY3VtZW50cywgcmV0dXJucyBmaWx0ZXIgb3V0IGVuIGRvY3VtZW50cyBpZiBhIHRyYW5zbGF0ZWQgb25lIGV4aXN0cyBtYXRjaGluZyB0aGUgc2FtZSBlcmFzXG4gICAqIEBwYXJhbSBkb2N1bWVudHNcbiAgICogQHBhcmFtIGxhbmdGYWxsYmFjayBzaG91bGQgdGhlIHN5c3RlbSBmYWxsIGJhY2sgdG8gZW4gaW4gY2FzZSB0aGVyZSBpcyBubyB0cmFuc2xhdGlvblxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgc3RhdGljIGZpbHRlckFsbENvQ0lEIChkb2N1bWVudHMsIGxhbmdGYWxsYmFjaykge1xuICAgIGlmICghbGFuZ0ZhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnRzXG4gICAgfVxuICAgIGNvbnN0IGJlc3RNYXRjaERvY3VtZW50cyA9IG5ldyBNYXAoKVxuICAgIGZvciAoY29uc3QgZG9jIG9mIGRvY3VtZW50cykge1xuICAgICAgY29uc3QgZG9jQ29DSUQgPSBkb2MuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8uaWRcbiAgICAgIGlmIChkb2NDb0NJRCkge1xuICAgICAgICBjb25zdCBkb2NFcmFzID0gT2JqZWN0LmVudHJpZXMoZG9jLmdldEZsYWcoJ0NvQzcnLCAnY29jaWRGbGFnJyk/LmVyYXMgPz8ge30pLmZpbHRlcihlID0+IGVbMV0pLm1hcChlID0+IGVbMF0pLnNvcnQoKS5qb2luKCcvJylcbiAgICAgICAgbGV0IGRvY1ByaW9yaXR5ID0gcGFyc2VJbnQoZG9jLmdldEZsYWcoJ0NvQzcnLCAnY29jaWRGbGFnJyk/LnByaW9yaXR5ID8/IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLCAxMClcbiAgICAgICAgZG9jUHJpb3JpdHkgPSBpc05hTihkb2NQcmlvcml0eSkgPyBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiA6IGRvY1ByaW9yaXR5XG4gICAgICAgIGNvbnN0IGtleSA9IGRvY0NvQ0lEICsgJy8nICsgZG9jRXJhcyArICcvJyArIChpc05hTihkb2NQcmlvcml0eSkgPyBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiA6IGRvY1ByaW9yaXR5KVxuXG4gICAgICAgIGNvbnN0IGN1cnJlbnREb2MgPSBiZXN0TWF0Y2hEb2N1bWVudHMuZ2V0KGtleSlcbiAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50RG9jID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGJlc3RNYXRjaERvY3VtZW50cy5zZXQoa2V5LCBkb2MpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRvY0xhbmcgPSBkb2MuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8ubGFuZyA/PyAnZW4nXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nTGFuZyA9IGN1cnJlbnREb2M/LmdldEZsYWcoJ0NvQzcnLCAnY29jaWRGbGFnJyk/LmxhbmcgPz8gJ2VuJ1xuICAgICAgICBpZiAoZXhpc3RpbmdMYW5nID09PSAnZW4nICYmIGV4aXN0aW5nTGFuZyAhPT0gZG9jTGFuZykge1xuICAgICAgICAgIGJlc3RNYXRjaERvY3VtZW50cy5zZXQoa2V5LCBkb2MpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFsuLi5iZXN0TWF0Y2hEb2N1bWVudHMudmFsdWVzKCldXG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgZG9jdW1lbnRzIG1hdGNoaW5nIHRoZSBDb0NJRCByZWdleCwgbGFuZ3VhZ2UsIGFuZCBlcmEgZnJvbSB0aGUgd29ybGQuXG4gICAqIFRoZSBkb2N1bWVudCBsaXN0IGlzIHNvcnRlZCB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5IGZpcnN0LlxuICAgKiBAcGFyYW0gY29jaWRSZWdFeHAgcmVnZXggdXNlZCBvbiB0aGUgQ29DSURcbiAgICogQHBhcmFtIHR5cGUgdGhlIGZpcnN0IHBhcnQgb2YgdGhlIHdhbnRlZCBDb0NJRCwgZm9yIGV4YW1wbGUgJ2knLCAnYScsICdqZSdcbiAgICogQHBhcmFtIGVyYSB0aGUgZXJhcyB0byBtYXRjaCBhZ2FpbnN0ICgnc3RhbmRhcmQnLCAnbW9kZXJuUHVscCcsIC4uLiksIHRydWUgPSB3b3JsZCBkZWZhdWx0LCBmYWxzZSA9IG5vIGZpbHRlclxuICAgKiBAcGFyYW0gbGFuZyB0aGUgbGFuZ3VhZ2UgdG8gbWF0Y2ggYWdhaW5zdCAoJ2VuJywgJ2VzJywgLi4uKVxuICAgKiBAcGFyYW0gbGFuZ0ZhbGxiYWNrIHNob3VsZCB0aGUgc3lzdGVtIGZhbGwgYmFjayB0byBlbiBpbmNhc2UgdGhlcmUgaXMgbm8gdHJhbnNsYXRpb25cbiAgICogQHBhcmFtIHByb2dyZXNzQmFyIElmIGdyZWF0ZXIgdGhhbiB6ZXJvIHNob3cgcGVyY2VudGFnZVxuICAgKiBAcmV0dXJucyBhcnJheVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGRvY3VtZW50c0Zyb21Xb3JsZCAoeyBjb2NpZFJlZ0V4cCwgdHlwZSwgbGFuZyA9IGdhbWUuaTE4bi5sYW5nLCBlcmEgPSBmYWxzZSwgbGFuZ0ZhbGxiYWNrID0gdHJ1ZSwgcHJvZ3Jlc3NCYXIgPSAwIH0gPSB7fSkge1xuICAgIGlmICghY29jaWRSZWdFeHApIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBpZiAobGFuZyA9PT0gJycpIHtcbiAgICAgIGxhbmcgPSBnYW1lLmkxOG4ubGFuZ1xuICAgIH1cbiAgICBpZiAoZXJhID09PSB0cnVlKSB7XG4gICAgICBlcmEgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd3b3JsZEVyYScpXG4gICAgfVxuXG4gICAgaWYgKHByb2dyZXNzQmFyID4gMCkge1xuICAgICAgU2NlbmVOYXZpZ2F0aW9uLmRpc3BsYXlQcm9ncmVzc0Jhcih7IGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFVQLlBhY2thZ2VzTG9hZGluZycpLCBwY3Q6IE1hdGguZmxvb3IoMTAwIC8gcHJvZ3Jlc3NCYXIpIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2FtZVByb3BlcnR5ID0gQ29DSUQuZ2V0R2FtZVByb3BlcnR5KGAke3R5cGV9Li5gKVxuXG4gICAgY29uc3QgY2FuZGlkYXRlRG9jdW1lbnRzID0gZ2FtZVtnYW1lUHJvcGVydHldPy5maWx0ZXIoKGQpID0+IHtcbiAgICAgIGNvbnN0IGNvY2lkRmxhZyA9IGQuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKVxuICAgICAgaWYgKHR5cGVvZiBjb2NpZEZsYWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgY29uc3QgZXJhcyA9IChjb2NpZEZsYWcuZXJhcyA/PyBbXSlcbiAgICAgIGNvbnN0IG1hdGNoaW5nRXJhcyA9IChlcmEgPT09IGZhbHNlIHx8IE9iamVjdC5lbnRyaWVzKGVyYXMpLmxlbmd0aCA9PT0gMCB8fCAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVyYXMsIGVyYSkgJiYgZXJhc1tlcmFdKSlcbiAgICAgIHJldHVybiBjb2NpZFJlZ0V4cC50ZXN0KGNvY2lkRmxhZy5pZCkgJiYgW2xhbmcsIChsYW5nRmFsbGJhY2sgPyAnZW4nIDogJy0nKV0uaW5jbHVkZXMoY29jaWRGbGFnLmxhbmcpICYmIG1hdGNoaW5nRXJhc1xuICAgIH0pXG5cbiAgICBpZiAoY2FuZGlkYXRlRG9jdW1lbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cblxuICAgIHJldHVybiBjYW5kaWRhdGVEb2N1bWVudHMuc29ydChDb0NJRC5jb21wYXJlQ29DSURQcmlvKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2YgYWxsIGRvY3VtZW50cyBtYXRjaGluZyB0aGUgQ29DSUQgcmVnZXgsIGxhbmd1YWdlLCBhbmQgZXJhIGZyb20gdGhlIGNvbXBlbmRpdW1zLlxuICAgKiBUaGUgZG9jdW1lbnQgbGlzdCBpcyBzb3J0ZWQgd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eSBmaXJzdC5cbiAgICogQHBhcmFtIGNvY2lkUmVnRXhwIHJlZ2V4IHVzZWQgb24gdGhlIENvQ0lEXG4gICAqIEBwYXJhbSB0eXBlIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSB3YW50ZWQgQ29DSUQsIGZvciBleGFtcGxlICdpJywgJ2EnLCAnamUnXG4gICAqIEBwYXJhbSBlcmEgdGhlIGVyYXMgdG8gbWF0Y2ggYWdhaW5zdCAoJ3N0YW5kYXJkJywgJ21vZGVyblB1bHAnLCAuLi4pLCB0cnVlID0gd29ybGQgZGVmYXVsdCwgZmFsc2UgPSBubyBmaWx0ZXJcbiAgICogQHBhcmFtIGxhbmcgdGhlIGxhbmd1YWdlIHRvIG1hdGNoIGFnYWluc3QgKCdlbicsICdlcycsIC4uLilcbiAgICogQHBhcmFtIGxhbmdGYWxsYmFjayBzaG91bGQgdGhlIHN5c3RlbSBmYWxsIGJhY2sgdG8gZW4gaW5jYXNlIHRoZXJlIGlzIG5vIHRyYW5zbGF0aW9uXG4gICAqIEBwYXJhbSBwcm9ncmVzc0JhciBJZiBncmVhdGVyIHRoYW4gemVybyBzaG93IHBlcmNlbnRhZ2VcbiAgICogQHJldHVybnMgYXJyYXlcbiAgICovXG4gIHN0YXRpYyBhc3luYyBkb2N1bWVudHNGcm9tQ29tcGVuZGlhICh7IGNvY2lkUmVnRXhwLCB0eXBlLCBsYW5nID0gZ2FtZS5pMThuLmxhbmcsIGVyYSA9IGZhbHNlLCBsYW5nRmFsbGJhY2sgPSB0cnVlLCBwcm9ncmVzc0JhciA9IDAgfSkge1xuICAgIGlmICghY29jaWRSZWdFeHApIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBpZiAobGFuZyA9PT0gJycpIHtcbiAgICAgIGxhbmcgPSBnYW1lLmkxOG4ubGFuZ1xuICAgIH1cbiAgICBpZiAoZXJhID09PSB0cnVlKSB7XG4gICAgICBlcmEgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd3b3JsZEVyYScpXG4gICAgfVxuICAgIGNvbnN0IGVyYVRleHQgPSBDb0NJRC5lcmFUZXh0KGVyYSlcblxuICAgIGNvbnN0IGRvY3VtZW50VHlwZSA9IENvQ0lELmdldERvY3VtZW50VHlwZSh0eXBlKS5zY2hlbWEubmFtZVxuICAgIGNvbnN0IGNhbmRpZGF0ZURvY3VtZW50cyA9IFtdXG5cbiAgICBsZXQgY291bnQgPSAxXG4gICAgZm9yIChjb25zdCBwYWNrIG9mIGdhbWUucGFja3MpIHtcbiAgICAgIGlmIChwcm9ncmVzc0JhciA+IDApIHtcbiAgICAgICAgU2NlbmVOYXZpZ2F0aW9uLmRpc3BsYXlQcm9ncmVzc0Jhcih7IGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFVQLlBhY2thZ2VzTG9hZGluZycpLCBwY3Q6IE1hdGguZmxvb3IoY291bnQgKiAxMDAgLyBwcm9ncmVzc0JhcikgfSlcbiAgICAgICAgY291bnQrK1xuICAgICAgfVxuICAgICAgaWYgKHBhY2suZG9jdW1lbnROYW1lID09PSBkb2N1bWVudFR5cGUpIHtcbiAgICAgICAgaWYgKCFwYWNrLmluZGV4ZWQpIHtcbiAgICAgICAgICBhd2FpdCBwYWNrLmdldEluZGV4KClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleEluc3RhbmNlcyA9IHBhY2suaW5kZXguZmlsdGVyKChpKSA9PiB7XG4gICAgICAgICAgY29uc3QgY29jaWRGbGFnID0gaS5mbGFncz8uQ29DNz8uY29jaWRGbGFnXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb2NpZEZsYWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXJhcyA9IChjb2NpZEZsYWcuZXJhcyA/PyBbXSlcbiAgICAgICAgICBjb25zdCBtYXRjaGluZ0VyYXMgPSAoZXJhID09PSBmYWxzZSB8fCBPYmplY3QuZW50cmllcyhlcmFzKS5sZW5ndGggPT09IDAgfHwgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlcmFzLCBlcmEpICYmIGVyYXNbZXJhXSkpXG4gICAgICAgICAgcmV0dXJuIGNvY2lkUmVnRXhwLnRlc3QoY29jaWRGbGFnLmlkKSAmJiBbbGFuZywgKGxhbmdGYWxsYmFjayA/ICdlbicgOiAnLScpXS5pbmNsdWRlcyhjb2NpZEZsYWcubGFuZykgJiYgbWF0Y2hpbmdFcmFzXG4gICAgICAgIH0pXG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhJbnN0YW5jZXMpIHtcbiAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IGF3YWl0IHBhY2suZ2V0RG9jdW1lbnQoaW5kZXguX2lkKVxuICAgICAgICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ29DSURGbGFnLmVycm9yLmRvY3VtZW50LW5vdC1mb3VuZCcsIHtcbiAgICAgICAgICAgICAgY29jaWQ6IGNvY2lkUmVnRXhwLFxuICAgICAgICAgICAgICBsYW5nLFxuICAgICAgICAgICAgICBlcmE6IGVyYVRleHRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKG1zZylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb0M3IHwnLCBtc2csIGluZGV4KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FuZGlkYXRlRG9jdW1lbnRzLnB1c2goZG9jdW1lbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW5kaWRhdGVEb2N1bWVudHMuc29ydChDb0NJRC5jb21wYXJlQ29DSURQcmlvKVxuICB9XG5cbiAgLyoqXG4gICAqIFNvcnQgYSBsaXN0IG9mIGRvY3VtZW50IG9uIENvQ0lEIHByaW9yaXR5IC0gdGhlIGhpZ2hlc3QgZmlyc3QuXG4gICAqIEBleGFtcGxlXG4gICAqIGFMaXN0T2ZEb2N1bWVudHMuc29ydChDb0NJRC5jb21wYXJlQ29DSURQcmlvKVxuICAgKi9cbiAgc3RhdGljIGNvbXBhcmVDb0NJRFByaW8gKGEsIGIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYi5nZXRGbGFnKCdDb0M3JywgJ2NvY2lkRmxhZycpPy5wcmlvcml0eSAtXG4gICAgICBhLmdldEZsYWcoJ0NvQzcnLCAnY29jaWRGbGFnJyk/LnByaW9yaXR5XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZXMgdGhlIGZpcnN0IHBhcnQgb2YgYSBDb0NJRCB0byB3aGF0IHRob3NlIGRvY3VtZW50cyBhcmUgY2FsbGVkIGluIHRoZSBgZ2FtZWAgb2JqZWN0LlxuICAgKiBAcGFyYW0gY29jaWQgYSBzaW5nbGUgY29jaWRcbiAgICovXG4gIHN0YXRpYyBnZXRHYW1lUHJvcGVydHkgKGNvY2lkKSB7XG4gICAgY29uc3QgdHlwZSA9IGNvY2lkLnNwbGl0KCcuJylbMF1cbiAgICBjb25zdCBnYW1lUHJvcGVydHkgPSBDb0NJRC5nYW1lUHJvcGVydHlMb29rdXBbdHlwZV1cbiAgICBpZiAoIWdhbWVQcm9wZXJ0eSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ29DSURGbGFnLmVycm9yLmluY29ycmVjdC50eXBlJykpXG4gICAgICBjb25zb2xlLmxvZygnQ29DNyB8ICcsIGNvY2lkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKClcbiAgICB9XG4gICAgcmV0dXJuIGdhbWVQcm9wZXJ0eVxuICB9XG5cbiAgc3RhdGljIGdldCBnYW1lUHJvcGVydHlMb29rdXAgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhOiAnYWN0b3JzJyxcbiAgICAgIGM6ICdjYXJkcycsXG4gICAgICBpOiAnaXRlbXMnLFxuICAgICAgamU6ICdqb3VybmFsJyxcbiAgICAgIG06ICdtYWNyb3MnLFxuICAgICAgcDogJ3BsYXlsaXN0cycsXG4gICAgICBydDogJ3RhYmxlcycsXG4gICAgICBzOiAnc2NlbmVzJ1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIHRoZSBmaXJzdCBwYXJ0IG9mIGEgQ29DSUQgdG8gd2hhdCB0aG9zZSBkb2N1bWVudHMgYXJlIGNhbGxlZCBpbiB0aGUgYGdhbWVgIG9iamVjdC5cbiAgICogQHBhcmFtIGNvY2lkIGEgc2luZ2xlIGNvY2lkXG4gICAqL1xuICBzdGF0aWMgZ2V0RG9jdW1lbnRUeXBlIChjb2NpZCkge1xuICAgIGNvbnN0IHR5cGUgPSBjb2NpZC5zcGxpdCgnLicpWzBdXG4gICAgY29uc3QgZG9jdW1lbnRUeXBlID0gQ29DSUQuZG9jdW1lbnROYW1lTG9va3VwW3R5cGVdXG4gICAgaWYgKCFkb2N1bWVudFR5cGUpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNvQ0lERmxhZy5lcnJvci5pbmNvcnJlY3QudHlwZScpKVxuICAgICAgY29uc29sZS5sb2coJ0NvQzcgfCAnLCBjb2NpZClcbiAgICAgIHRocm93IG5ldyBFcnJvcigpXG4gICAgfVxuICAgIHJldHVybiBkb2N1bWVudFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZG9jdW1lbnROYW1lTG9va3VwICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYTogQWN0b3IsXG4gICAgICBjOiBDYXJkLFxuICAgICAgaTogSXRlbSxcbiAgICAgIGplOiBKb3VybmFsRW50cnksXG4gICAgICBtOiBNYWNybyxcbiAgICAgIHA6IFBsYXlsaXN0LFxuICAgICAgcnQ6IFJvbGxUYWJsZSxcbiAgICAgIHM6IFNjZW5lXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgSG9va3MgKi9cbmltcG9ydCB7IGNvbmZpZ3VyZURvY3VtZW50cyB9IGZyb20gJy4uL3NjcmlwdHMvY29uZmlndXJlLWRvY3VtZW50cy5qcydcbmltcG9ydCB7IHByZWxvYWRIYW5kbGViYXJzVGVtcGxhdGVzIH0gZnJvbSAnLi4vc2NyaXB0cy9sb2FkLXRlbXBsYXRlcy5qcydcbmltcG9ydCB7IHJlZ2lzdGVyU2V0dGluZ3MgfSBmcm9tICcuLi9zY3JpcHRzL3JlZ2lzdGVyLXNldHRpbmdzLmpzJ1xuaW1wb3J0IHsgcmVnaXN0ZXJTaGVldHMgfSBmcm9tICcuLi9zY3JpcHRzL3JlZ2lzdGVyLXNoZWV0cy5qcydcbmltcG9ydCB7IGhhbmRsZWJhcnNIZWxwZXIgfSBmcm9tICcuLi9zY3JpcHRzL2hhbmRsZWJhcnMtaGVscGVyLmpzJ1xuaW1wb3J0IHsgY29tcGVuZGl1bUZpbHRlciB9IGZyb20gJy4uL3NjcmlwdHMvY29tcGVuZGl1bS1maWx0ZXIuanMnXG5pbXBvcnQgeyBDb0NJRCB9IGZyb20gJy4uL3NjcmlwdHMvY29jLWlkLmpzJ1xuaW1wb3J0IHsgQ29DN0xpbmsgfSBmcm9tICcuLi9hcHBzL2NvYzctbGluay5qcydcbmltcG9ydCAqIGFzIERpY2VTb05pY2VSZWFkeUxhc3QgZnJvbSAnLi9kaWNlLXNvLW5pY2UtcmVhZHktbGFzdC5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uY2UoJ2luaXQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uZmlndXJlRG9jdW1lbnRzKClcbiAgICBwcmVsb2FkSGFuZGxlYmFyc1RlbXBsYXRlcygpXG4gICAgcmVnaXN0ZXJTZXR0aW5ncygpXG4gICAgcmVnaXN0ZXJTaGVldHMoKVxuICAgIGhhbmRsZWJhcnNIZWxwZXIoKVxuICAgIGNvbXBlbmRpdW1GaWx0ZXIoKVxuICAgIENvQ0lELmluaXQoKVxuICAgIENvQzdMaW5rLmluaXQoKVxuICAgIERpY2VTb05pY2VSZWFkeUxhc3QubGlzdGVuKClcbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBDT05GSUcgKi9cbmltcG9ydCB7IENvQ0FjdG9yIH0gZnJvbSAnLi4vYWN0b3JzL2FjdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN0Jvb2sgfSBmcm9tICcuLi9pdGVtcy9ib29rL2RhdGEuanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uL2l0ZW1zL2l0ZW0uanMnXG5pbXBvcnQgeyBDb0M3U3BlbGwgfSBmcm9tICcuLi9pdGVtcy9zcGVsbC9kYXRhLmpzJ1xuaW1wb3J0IHsgQ29DN0NoYXNlIH0gZnJvbSAnLi4vaXRlbXMvY2hhc2UvZGF0YS5qcydcbmltcG9ydCBDb0M3QWN0aXZlRWZmZWN0IGZyb20gJy4uL2FjdGl2ZS1lZmZlY3QuanMnXG5pbXBvcnQgeyBDb0M3U2tpbGwgfSBmcm9tICcuLi9pdGVtcy9za2lsbC9kYXRhLmpzJ1xuaW1wb3J0IHsgQ29DN1ZlaGljbGUgfSBmcm9tICcuLi9hY3RvcnMvdmVoaWNsZS9kYXRhLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlRG9jdW1lbnRzICgpIHtcbiAgQ09ORklHLkFjdGl2ZUVmZmVjdC5kb2N1bWVudENsYXNzID0gQ29DN0FjdGl2ZUVmZmVjdFxuICBDT05GSUcuQWN0b3IuZG9jdW1lbnRDbGFzcyA9IENvQ0FjdG9yXG4gIENPTkZJRy5BY3Rvci5kb2N1bWVudENsYXNzZXMgPSB7XG4gICAgdmVoaWNsZTogQ29DN1ZlaGljbGVcbiAgfVxuICBDT05GSUcuSXRlbS5kb2N1bWVudENsYXNzID0gQ29DN0l0ZW1cbiAgQ09ORklHLkl0ZW0uZG9jdW1lbnRDbGFzc2VzID0ge1xuICAgIGJvb2s6IENvQzdCb29rLFxuICAgIHNwZWxsOiBDb0M3U3BlbGwsXG4gICAgY2hhc2U6IENvQzdDaGFzZSxcbiAgICBza2lsbDogQ29DN1NraWxsXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBsb2FkVGVtcGxhdGVzICovXG5cbi8qKlxuICogRGVmaW5lIGEgc2V0IG9mIHRlbXBsYXRlIHBhdGhzIHRvIHByZS1sb2FkXG4gKiBQcmUtbG9hZGVkIHRlbXBsYXRlcyBhcmUgY29tcGlsZWQgYW5kIGNhY2hlZCBmb3IgZmFzdCBhY2Nlc3Mgd2hlbiByZW5kZXJpbmdcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKi9cbmV4cG9ydCBjb25zdCBwcmVsb2FkSGFuZGxlYmFyc1RlbXBsYXRlcyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgLyoqIERlZmluZSB0ZW1wbGF0ZSBwYXRocyB0byBsb2FkICovXG4gIGNvbnN0IHRlbXBsYXRlUGF0aHMgPSBbXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL25wYy1za2lsbHMuaHRtbCcsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL25wYy1jb21iYXQuaHRtbCcsXG5cbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hY3RvcnMvcGFydHMvYWN0b3ItaW52ZW50b3J5Lmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy9hY3Rvci1pbnZlbnRvcnktaXRlbXMuaHRtbCcsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL2FjdG9yLWJhY2tncm91bmQuaHRtbCcsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY29tbW9uL2FjdGl2ZS1lZmZlY3RzLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL2FjdG9yLW15dGhvcy1lbm91bnRlcnMuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hY3RvcnMvcGFydHMvYWN0b3Ita2VlcGVyLW15dGhvcy1lbm91bnRlcnMuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hY3RvcnMvcGFydHMvYWN0b3Itc2tpbGxzLXYyLmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy9jaGFyYWN0ZXItZGV2ZWxvcG1lbnQtdjIuaHRtbCcsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL2RldmVsb3BtZW50LWNvbnRyb2xzLmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy92aXRhbHMuaHRtbCcsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL2NvbWJhdC5odG1sJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hY3RvcnMvY2hhcmFjdGVyLXNoZWV0LXYyLmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9jaGFyYWN0ZXIvc3VtbWFyeS5odG1sJyxcblxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL2Jvb2svZGV0YWlscy5odG1sJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9pdGVtcy9zcGVsbC9kZXRhaWxzLmh0bWwnLFxuXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL2ludHJvZHVjdGlvbi5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9jb25maWd1cmF0aW9uLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL3NlbGVjdC1zZXR1cC5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9zZWxlY3QtYXJjaGV0eXBlLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL3NlbGVjdC1vY2N1cGF0aW9uLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL3NldC1jaGFyYWN0ZXJpc3RpY3MuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQvc2V0LWF0dHJpYnV0ZXMuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQvdmlldy1hdHRyaWJ1dGVzLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL3NldC1pbnZlc3RpZ2F0b3IuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQvc2V0LW9jY3VwYXRpb24tc2tpbGxzLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL3RvZ2dsZS1za2lsbC5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9zZXQtYXJjaGV0eXBlLXNraWxscy5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9wb2ludHMtc2tpbGxzLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL2JhY2tzdG9yeS5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9jcmVhdGUuaGJzJ1xuICBdXG5cbiAgLyoqIExvYWQgdGhlIHRlbXBsYXRlIHBhcnRzICovXG4gIHJldHVybiBsb2FkVGVtcGxhdGVzKHRlbXBsYXRlUGF0aHMpXG59XG4iLCIvKiBnbG9iYWwgJCwgQ09ORklHLCBDT05TVCwgZ2FtZSwgdWkgKi9cbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3RGVjYWRlckRpZSB9IGZyb20gJy4uL2FwcHMvZGVjYWRlci1kaWUuanMnXG5pbXBvcnQgeyBDb0M3RGVjYWRlckRpZU90aGVyIH0gZnJvbSAnLi4vYXBwcy9kZWNhZGVyLWRpZS1vdGhlci5qcydcbmltcG9ydCB7IENvQzdHYW1lUnVsZVNldHRpbmdzIH0gZnJvbSAnLi9nYW1lLXJ1bGVzLmpzJ1xuaW1wb3J0IHsgQ29DN0RpcmVjdG9yeVBpY2tlciB9IGZyb20gJy4vY29jNy1kaXJlY3RvcnktcGlja2VyLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJTZXR0aW5ncyAoKSB7XG4gIC8qKlxuICAgKiBSdWxlc1xuICAgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3Rlck1lbnUoJ0NvQzcnLCAnZ2FtZVJ1bGVzJywge1xuICAgIG5hbWU6ICdDb0M3LlNldHRpbmdzLlJ1bGVzLk5hbWUnLFxuICAgIGxhYmVsOiAnQ29DNy5TZXR0aW5ncy5SdWxlcy5MYWJlbCcsXG4gICAgaGludDogJ0NvQzcuU2V0dGluZ3MuUnVsZXMuSGludCcsXG4gICAgaWNvbjogJ2ZhcyBmYS1ib29rJyxcbiAgICB0eXBlOiBDb0M3R2FtZVJ1bGVTZXR0aW5ncyxcbiAgICByZXN0cmljdGVkOiB0cnVlXG4gIH0pXG4gIENvQzdHYW1lUnVsZVNldHRpbmdzLnJlZ2lzdGVyU2V0dGluZ3MoKVxuXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAndXNlQ29udGV4dE1lbnVzJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5Vc2VDb250ZXh0TWVudXMnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5Vc2VDb250ZXh0TWVudXNIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9KVxuXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGhvbGVVcGxvYWREaXJlY3RvcnknLCB7XG4gICAgbmFtZTogJ0NvQzcuU2V0dGluZ3MuRGhvbGVVcGxvYWQuRGlyZWN0b3J5Lk5hbWUnLFxuICAgIGhpbnQ6ICdDb0M3LlNldHRpbmdzLkRob2xlVXBsb2FkLkRpcmVjdG9yeS5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgdHlwZTogQ29DN0RpcmVjdG9yeVBpY2tlci5EZWZhdWx0RGlyZWN0b3J5LFxuICAgIGRlZmF1bHQ6ICdbZGF0YV0gd29ybGRzLycgKyBnYW1lLndvcmxkLmlkICsgJy9kaG9sZS1pbWFnZXMnXG4gIH0pXG5cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICd3b3JsZEVyYScsIHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5Xb3JsZEVyYS5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5Xb3JsZEVyYS5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ3N0YW5kYXJkJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczogQ09DNy5lcmFzLFxuICAgIG9uQ2hhbmdlOiAoKSA9PiB7XG4gICAgICB1aS5wbGF5ZXJzLnJlbmRlcih0cnVlKVxuICAgIH1cbiAgfSlcblxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2Ryb3BDb0NJRCcsIHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5Ecm9wQ29DSUQuTmFtZScsXG4gICAgaGludDogJ0NvQzcuU2V0dGluZ3MuRHJvcENvQ0lELkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiAnJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczoge1xuICAgICAgJyc6ICdDb0M3LlNldHRpbmdzLkRyb3BDb0NJRC5Qcm9tcHQnLFxuICAgICAgWTogJ0NvQzcuU2V0dGluZ3MuRHJvcENvQ0lELlVzZUNvQ0lEJyxcbiAgICAgIE46ICdDb0M3LlNldHRpbmdzLkRyb3BDb0NJRC5JZ25vcmVDb0NJRCdcbiAgICB9XG4gIH0pXG5cbiAgLyoqXG4gICAqIEluaXRpYXRpdmVcbiAgICovXG4gIC8qKiBTZXQgZGlzcGxheWluZyBkaWNlcyBmb3IgaW5pdCByb2xsICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzcGxheUluaXREaWNlcycsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuZGlzcGxheUluaXREaWNlcycsXG4gICAgaGludDogJ1NFVFRJTkdTLmRpc3BsYXlJbml0RGljZXNIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIC8qKiBTZXQgZGlzcGxheWluZyBkaWNlcyBmb3IgaW5pdCByb2xsICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzcGxheUluaXRBc1RleHQnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLmRpc3BsYXlJbml0QXNUZXh0JyxcbiAgICBoaW50OiAnU0VUVElOR1MuZGlzcGxheUluaXRBc1RleHRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG5cbiAgLyoqXG4gICAqIFJvbGwgY3VzdG9taXNhaW9uc1xuICAgKi9cbiAgLyoqIFN0YW5kYnkgcm9sbHMgbWFkZSBieSBHTSBmcm9tIHBsYXllciBzaGVldCAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3N0YW5ieUdNUm9sbHMnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlN0YW5ieUdNUm9sbHMnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5TdGFuYnlHTVJvbGxzSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogQWxsb3cgdXNhZ2Ugb2YgYSBmbGF0IGRpY2UgbW9kaWZpZXIgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhbGxvd0ZsYXREaWNlTW9kaWZpZXInLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkFsbG93RmxhdERpY2VNb2RpZmllcicsXG4gICAgaGludDogJ1NFVFRJTkdTLkFsbG93RmxhdERpY2VNb2RpZmllckhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIC8qKiBBbGxvdyB1c2FnZSBvZiBhIGZsYXQgdGhyZXNob2xkIG1vZGlmaWVyICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYWxsb3dGbGF0VGhyZXNob2xkTW9kaWZpZXInLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkFsbG93RmxhdFRocmVzaG9sZE1vZGlmaWVyJyxcbiAgICBoaW50OiAnU0VUVElOR1MuQWxsb3dGbGF0VGhyZXNob2xkTW9kaWZpZXJIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2RlZmF1bHRDaGVja0RpZmZpY3VsdHknLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkRlZmF1bHREaWZmaWN1bHR5JyxcbiAgICBoaW50OiAnU0VUVElOR1MuRGVmYXVsdERpZmZpY3VsdHlIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ3JlZ3VsYXInLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjaG9pY2VzOiB7XG4gICAgICByZWd1bGFyOiAnU0VUVElOR1MuQ2hlY2tEaWZmaWN1bHR5UmVndWxhcicsXG4gICAgICB1bmtub3duOiAnU0VUVElOR1MuQ2hlY2tEaWZmaWN1bHR5VW5rbm93bidcbiAgICB9XG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc2VsZlJvbGxXaGlzcGVyVGFyZ2V0Jywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5TZWxmUm9sbFdoaXNwZXJUYXJnZXQnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5TZWxmUm9sbFdoaXNwZXJUYXJnZXRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ2V2ZXJ5b25lJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczoge1xuICAgICAgbm9ib2R5OiAnU0VUVElOR1MuRG9Ob3RBZHZpc2UnLFxuICAgICAgb3duZXJzOiAnU0VUVElOR1MuQWR2aXNlT3duZXJzT25seScsXG4gICAgICBldmVyeW9uZTogJ1NFVFRJTkdTLkFkdmlzZUFsbFBsYXllcidcbiAgICB9XG4gIH0pXG5cbiAgLyoqXG4gICAqIENoYXQgQ2FyZHNcbiAgICovXG4gIC8qKiBUcnVzdGVkIHBsYXllcnMgd2lsbCBiZSBhbGxvd2VkIHRvIG1vZGlmeSBjaGF0IGNhcmRzICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAndHJ1c3RlZENhbk1vZGZ5Q2hhdENhcmQnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlRydXN0ZWRDYW5Nb2RmeUNoYXRDYXJkJyxcbiAgICBoaW50OiAnU0VUVElOR1MuVHJ1c3RlZENhbk1vZGZ5Q2hhdENhcmRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogVHJ1c3RlZCBwbGF5ZXJzIHdpbGwgYmUgYWxsb3dlZCB0byBzZWUgY2hhdCBjYXJkcyBwcml2YXRlIHNlY3Rpb25zICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAndHJ1c3RlZENhblNlZUNoYXRDYXJkJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5UcnVzdGVkQ2FuU2VlQ2hhdENhcmQnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5UcnVzdGVkQ2FuU2VlQ2hhdENhcmRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogU2V0IHRoZSBuZWVkIHRvIGRpc3BsYXkgYWN0b3IgaW1hZ2Ugb24gY2hhdCBjYXJkcyAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2Rpc3BsYXlBY3Rvck9uQ2FyZCcsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuRGlzcGxheUFjdG9yT25DYXJkJyxcbiAgICBoaW50OiAnU0VUVElOR1MuRGlzcGxheUFjdG9yT25DYXJkSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdkaXNwbGF5Q2hlY2tTdWNjZXNzTGV2ZWwnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkRpc3BsYXlDaGVja1N1Y2Nlc3NMZXZlbCcsXG4gICAgc2NvcGU6ICdjbGllbnQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdkaXNwbGF5UmVzdWx0VHlwZScsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuRGlzcGxheVJlc3VsdFR5cGUnLFxuICAgIHNjb3BlOiAnY2xpZW50JyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogU2V0IHRoZSB1c2Ugb2YgdG9rZW4gaW5zdGVhZCBvZiBwb3J0cmFpdHMgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICd1c2VUb2tlbicsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuVXNlVG9rZW4nLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5Vc2VUb2tlbkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG5cbiAgLyoqXG4gICAqIFNjZW5lIFNldHRpbmdzXG4gICAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2VuYWJsZVN0YXR1c0ljb25zJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5FbmFibGVTdGF0dXNJY29ucycsXG4gICAgaGludDogJ1NFVFRJTkdTLkVuYWJsZVN0YXR1c0ljb25zSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2dyaWRTcGFjZXMnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlJlc3RyaWN0R3JpZFNwYWNlcycsXG4gICAgaGludDogJ1NFVFRJTkdTLlJlc3RyaWN0R3JpZFNwYWNlc0hpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzdGFuY2VFbGV2YXRpb24nLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkNoZWNrRWxldmF0aW9uJyxcbiAgICBoaW50OiAnU0VUVElOR1MuQ2hlY2tFbGV2YXRpb25IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzdGFuY2VUaGVhdHJlT2ZUaGVNaW5kJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5TY2VuZURpc3RhbmNlTm90Q2FsY3VhbHRlZE5vRXJyb3InLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5TY2VuZURpc3RhbmNlTm90Q2FsY3VhbHRlZE5vRXJyb3JIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuXG4gIC8qKlxuICAgKiBHYW1lIEFydHdvcmsgU2V0dGluZ3NcbiAgICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnb3ZlcnJpZGVHYW1lQXJ0d29yaycsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuT3ZlcnJpZGVHYW1lQXJ0d29yaycsXG4gICAgaGludDogJ1NFVFRJTkdTLk92ZXJyaWRlR2FtZUFydHdvcmtIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb3ZlcnJpZGVHYW1lQXJ0d29yaycpKSB7XG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnRQYXVzZUltYWdlJywge1xuICAgICAgbmFtZTogJ1NFVFRJTkdTLkFydFBhdXNlSW1hZ2UnLFxuICAgICAgaGludDogJ1NFVFRJTkdTLkFydFBhdXNlSW1hZ2VIaW50JyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvdGltZS10cmFwLnN2ZycsXG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9KVxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYXJ0UGF1c2VUZXh0Jywge1xuICAgICAgbmFtZTogJ1NFVFRJTkdTLkFydFBhdXNlVGV4dCcsXG4gICAgICBoaW50OiAnU0VUVElOR1MuQXJ0UGF1c2VUZXh0SGludCcsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6ICdUaGUgQmxpbmQgSWRpb3QgR29kIGlzIGRyZWFtaW5nLi4uJyxcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogU2hlZXQgc2V0dGluZ3NcbiAgICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzcGxheVBsYXllck5hbWVPblNoZWV0Jywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5kaXNwbGF5UGxheWVyTmFtZU9uU2hlZXQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAndG9vbFRpcERlbGF5Jywge1xuICAgIG5hbWU6ICdDb0M3LnRvb2xUaXBEZWxheScsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IDIwMDAsXG4gICAgdHlwZTogTnVtYmVyXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc2hvd0ljb25zT25seScsIHtcbiAgICBuYW1lOiAnU0VUVElOR1Muc2hvd0ljb25zT25seScsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgLyoqIEFsbG93IHBsYXllciB0byB1bmxvY2sgdGhlIHNoZWV0IG91dHNpZGUgb2YgY3JlYXRpb24gbW9kZSAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3BsYXllclVubG9ja1NoZWV0TW9kZScsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuUGxheWVyVW5sb2NrU2hlZXRNb2RlJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ2Fsd2F5cycsXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGNob2ljZXM6IHtcbiAgICAgIGFsd2F5czogJ1NFVFRJTkdTLkFsd2F5c0VkaXRhYmxlJyxcbiAgICAgIGNyZWF0aW9uOiAnU0VUVElOR1MuQ3JlYXRpb25Nb2RlT25seScsXG4gICAgICBuZXZlcjogJ1NFVFRJTkdTLk5ldmVyRWRpdGFibGUnXG4gICAgfVxuICB9KVxuICAvKiogQWxsb3cgcGxheWVyIHRvIG1vZGlmeSBzdGF0dXMgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdzdGF0dXNQbGF5ZXJFZGl0YWJsZScsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuU3RhdHVzUGxheWVyRWRpdGFibGUnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5TdGF0dXNQbGF5ZXJFZGl0YWJsZUhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdvbmVCbG9ja0JhY2tzdG9yeScsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuT25lQmxvY2tCYWNrU3RvcnknLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5PbmVCbG9ja0JhY2tTdG9yeUhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnb3ZlcnJpZGVTaGVldEFydHdvcmsnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLk92ZXJyaWRlU2hlZXRBcnR3b3JrJyxcbiAgICBoaW50OiAnU0VUVElOR1MuT3ZlcnJpZGVTaGVldEFydHdvcmtIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb3ZlcnJpZGVTaGVldEFydHdvcmsnKSkge1xuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYXJ0V29ya1NoZWV0QmFja2dyb3VuZCcsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnRXb3JrU2hlZXRCYWNrZ3JvdW5kJyxcbiAgICAgIGhpbnQ6ICdTRVRUSU5HUy5BcnRXb3JrU2hlZXRCYWNrZ3JvdW5kSGludCcsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IFwidXJsKCcuL2Fzc2V0cy9pbWFnZXMvYmFja2dyb3VuZC53ZWJwJykgNCByZXBlYXRcIixcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0pXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnRXb3JrU2hlZXRCYWNrZ3JvdW5kVHlwZScsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnRXb3JrU2hlZXRCYWNrZ3JvdW5kVHlwZScsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6ICdzbGljZScsXG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBjaG9pY2VzOiB7XG4gICAgICAgIHNsaWNlOiAnU0VUVElOR1MuQmFja2dyb3VuZFNsaWNlJyxcbiAgICAgICAgYXV0bzogJ1NFVFRJTkdTLkJhY2tncm91bmRBdXRvJyxcbiAgICAgICAgY29udGFpbjogJ1NFVFRJTkdTLkJhY2tncm91bmRDb250YWluJyxcbiAgICAgICAgY292ZXI6ICdTRVRUSU5HUy5CYWNrZ3JvdW5kQ292ZXInXG4gICAgICB9XG4gICAgfSlcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydFdvcmtPdGhlclNoZWV0QmFja2dyb3VuZCcsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnRXb3JrT3RoZXJTaGVldEJhY2tncm91bmQnLFxuICAgICAgaGludDogJ1NFVFRJTkdTLkFydFdvcmtPdGhlclNoZWV0QmFja2dyb3VuZEhpbnQnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiBcInVybCggJy4vYXNzZXRzL2ltYWdlcy9iYWNrZ3JvdW5kLndlYnAnKVwiLFxuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSlcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydHdvcmtTaGVldEltYWdlJywge1xuICAgICAgbmFtZTogJ1NFVFRJTkdTLkFydHdvcmtTaGVldEltYWdlJyxcbiAgICAgIGhpbnQ6ICdTRVRUSU5HUy5BcnR3b3JrU2hlZXRJbWFnZUhpbnQnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiBcInVybCgnLi9hc3NldHMvaW1hZ2VzL3RlbnRhY2xlcy53ZWJwJylcIixcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0pXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnR3b3JrRnJvbnRDb2xvcicsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnR3b3JrRnJvbnRDb2xvcicsXG4gICAgICBoaW50OiAnU0VUVElOR1MuQXJ0d29ya0Zyb250Q29sb3JIaW50JyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJ3JnYmEoNDMsNTUsODMsMSknLFxuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSlcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydHdvcmtCYWNrZ3JvdW5kQ29sb3InLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuQXJ0d29ya0JhY2tncm91bmRDb2xvcicsXG4gICAgICBoaW50OiAnU0VUVElOR1MuQXJ0d29ya0JhY2tncm91bmRDb2xvckhpbnQnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiAncmdiYSgxMDMsMTEsMTEsMSknLFxuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSlcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydHdvcmtJbnRlcmFjdGl2ZUNvbG9yJywge1xuICAgICAgbmFtZTogJ1NFVFRJTkdTLkFydHdvcmtJbnRlcmFjdGl2ZUNvbG9yJyxcbiAgICAgIGhpbnQ6ICdTRVRUSU5HUy5BcnR3b3JrSW50ZXJhY3RpdmVDb2xvckhpbnQnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiAncmdiYSgxMDMsMTEsMTEsMSknLFxuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSlcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydHdvcmtGaXhlZFNraWxsTGVuZ3RoJywge1xuICAgICAgbmFtZTogJ1NFVFRJTkdTLkFydHdvcmtGaXhlZFNraWxsTGVuZ3RoJyxcbiAgICAgIGhpbnQ6ICdTRVRUSU5HUy5BcnR3b3JrRml4ZWRTa2lsbExlbmd0aEhpbnQnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgdHlwZTogQm9vbGVhblxuICAgIH0pXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnR3b3JrTWFpbkZvbnQnLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuQXJ0d29ya01haW5Gb250JyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9KVxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYXJ0d29ya01haW5Gb250Qm9sZCcsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnR3b3JrTWFpbkZvbnRCb2xkJyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9KVxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYXJ0d29ya01haW5Gb250U2l6ZScsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnR3b3JrTWFpbkZvbnRTaXplJyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogMTYsXG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBvbkNoYW5nZTogc2l6ZSA9PiBfc2V0Um9vdEZvbnRTaXplKHNpemUpXG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIF9zZXRSb290Rm9udFNpemUgKHNpemUpIHtcbiAgICAgICQoJzpyb290JykuY3NzKCdmb250LXNpemUnLCBzaXplKVxuICAgICAgdWkuc2lkZWJhci5yZW5kZXIodHJ1ZSlcbiAgICAgIGZvciAoY29uc3QgWywgd10gb2YgT2JqZWN0LmVudHJpZXModWkud2luZG93cykpIHtcbiAgICAgICAgdy5yZW5kZXIodHJ1ZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2VhcG9uc1xuICAgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdkaXNyZWdhcmRVc2VQZXJSb3VuZCcsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuRGlzcmVnYXJkVXNlUGVyUm91bmQnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5EaXNyZWdhcmRVc2VQZXJSb3VuZEhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzcmVnYXJkQW1tbycsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuRGlzcmVnYXJkQW1tbycsXG4gICAgaGludDogJ1NFVFRJTkdTLkRpc3JlZ2FyZEFtbW9IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuXG4gIC8qKlxuICAgKiBDaGFzZXNcbiAgICovXG4gIC8vIE1PVkVEIFRPIENIQVNTRSBJTkRJVklEVUFMIFNFVFRJTkdcbiAgLy8gZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdjaGFzZVNob3dUb2tlbk1vdmVtZW50Jywge1xuICAvLyAgIG5hbWU6ICdTRVRUSU5HUy5DaGFzZVNob3dUb2tlbk1vdmVtZW50JyxcbiAgLy8gICBoaW50OiAnU0VUVElOR1MuQ2hhc2VTaG93VG9rZW5Nb3ZlbWVudEhpbnQnLFxuICAvLyAgIHNjb3BlOiAnd29ybGQnLFxuICAvLyAgIGNvbmZpZzogdHJ1ZSxcbiAgLy8gICBkZWZhdWx0OiB0cnVlLFxuICAvLyAgIHR5cGU6IEJvb2xlYW5cbiAgLy8gfSlcblxuICAvKipcbiAgICogRGljZSBTbyBOaWNlXG4gICAqL1xuICBpZiAoZ2FtZS5tb2R1bGVzLmdldCgnZGljZS1zby1uaWNlJyk/LmFjdGl2ZSkge1xuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc3luY0RpY2UzZCcsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5TeW5jRGljZTNEJyxcbiAgICAgIGhpbnQ6ICdTRVRUSU5HUy5TeW5jRGljZTNESGludCcsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICB0eXBlOiBCb29sZWFuXG4gICAgfSlcbiAgICBjb25zdCBbdmVyc2lvbl0gPSBnYW1lLm1vZHVsZXMuZ2V0KCdkaWNlLXNvLW5pY2UnKT8udmVyc2lvbi5zcGxpdCgnLicpXG4gICAgaWYgKCFpc05hTihOdW1iZXIodmVyc2lvbikpICYmIE51bWJlcih2ZXJzaW9uKSA+PSAzKSB7XG4gICAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3RlbkRpZUJvbnVzJywge1xuICAgICAgICBuYW1lOiAnU0VUVElOR1MuVGVuRGllQm9udXMnLFxuICAgICAgICBoaW50OiAnU0VUVElOR1MuVGVuRGllQm9udXNIaW50JyxcbiAgICAgICAgc2NvcGU6ICdjbGllbnQnLFxuICAgICAgICBjb25maWc6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6ICdicm9uemUnLFxuICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgIH0pXG4gICAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3RlbkRpZVBlbmFsdHknLCB7XG4gICAgICAgIG5hbWU6ICdTRVRUSU5HUy5UZW5EaWVQZW5hbHR5JyxcbiAgICAgICAgaGludDogJ1NFVFRJTkdTLlRlbkRpZVBlbmFsdHlIaW50JyxcbiAgICAgICAgc2NvcGU6ICdjbGllbnQnLFxuICAgICAgICBjb25maWc6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6ICdibG9vZG1vb24nLFxuICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERldmVsb3BlciBhbmQgZGVidWcgc2V0dGluZ3NcbiAgICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGVidWdtb2RlJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5EZWJ1Z01vZGUnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5EZWJ1Z01vZGVIaW50JyxcbiAgICBzY29wZTogJ2NsaWVudCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdleHBlcmltZW50YWxGZWF0dXJlcycsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuU2hvd0V4cGVyaW1lbnRhbEZlYXR1cmVzJyxcbiAgICBoaW50OiAnU0VUVElOR1MuU2hvd0V4cGVyaW1lbnRhbEZlYXR1cmVzSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSlcbiAgLyoqXG4gICAqIE90aGVyIHNldHRpbmdzXG4gICAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2hpZGRlbmRldm1lbnUnLCB7XG4gICAgbmFtZTogJ0hpZGRlbiBkZXYgbWVudScsXG4gICAgaGludDogJ1VzZSBhdCB5b3VyIG93biByaXNrJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdkZXZlbG9wbWVudEVuYWJsZWQnLCB7XG4gICAgbmFtZTogJ0RldiBwaGFzZWQgYWxsb3dlZCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0pXG4gIC8qKiBGZWF0OiB3ZWxjb21lIG1lc3NhZ2UgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdzaG93V2VsY29tZU1lc3NhZ2UnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLnNob3dXZWxjb21lTWVzc2FnZScsXG4gICAgaGludDogJ1NFVFRJTkdTLnNob3dXZWxjb21lTWVzc2FnZScsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdjaGFyQ3JlYXRpb25FbmFibGVkJywge1xuICAgIG5hbWU6ICdDaGFyIGNyZWF0aW9uIGFsbG93ZWQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3N5c3RlbVVwZGF0ZVZlcnNpb24nLCB7XG4gICAgbmFtZTogJ1N5c3RlbSB1cGRhdGUgdmVyc2lvbicsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJzAnXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc3lzdGVtVXBkYXRlZE1vZHVsZVZlcnNpb24nLCB7XG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiB7fVxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3hwRW5hYmxlZCcsIHtcbiAgICBuYW1lOiAnRW5hYmxlIFhQIGdhaW4nLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc2hvd0luc3RydWN0aW9ucycsIHtcbiAgICBuYW1lOiAnU2hvdyBjaGFuZ2Vsb2cvaW5zdHJ1Y3Rpb25zJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnMCdcbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRTZXR1cCcsIHtcbiAgICBuYW1lOiAnRm9yY2Ugc3BlY2lmaWMgc2V0dXAgQ29DIElEIGZvciBJbnZlc3RpZ2F0b3IgV2l6YXJkJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJ1xuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFF1YW50aXR5Jywge1xuICAgIG5hbWU6ICdOdW1iZXIgb2YgaW52ZXN0aWdhdG9ycyBhIHNpbmdsZSB1c2VyIHdpdGhvdXQgY3JlYXRlIGFjdG9yIHJpZ2h0cyBjYW4gb3duJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAwXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkT3duZXJzaGlwJywge1xuICAgIG5hbWU6ICdEZWZhdWx0IHBlcm1pc3Npb25zIGZvciBub24gb3duZXIgcGxheWVycycsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5OT05FXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUmVyb2xscycsIHtcbiAgICBuYW1lOiAnQWxsb3cgcGxheWVycyB0byByZXJvbGwgY2hhcmFjdGVyaXN0aWNzJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRQb2ludEJ1eScsIHtcbiAgICBuYW1lOiAnRm9yY2UgcG9pbnQgYnV5IGluc3RlYWQgb2Ygc2V0dXAgY2hvaWNlJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRRdWlja0ZpcmUnLCB7XG4gICAgbmFtZTogJ1F1aWNrIGZpcmUgc2V0dXAgdmFsdWVzJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6IFtdXG4gIH0pXG4gIC8qKiBTZXQgYW4gaW5pdGlhdGl2ZSBmb3JtdWxhIGZvciB0aGUgc3lzdGVtICovXG4gIENPTkZJRy5Db21iYXQuaW5pdGlhdGl2ZSA9IHtcbiAgICBmb3JtdWxhOiAnQGNoYXJhY3RlcmlzdGljcy5kZXgudmFsdWUnLFxuICAgIGRlY2ltYWxzOiA0XG4gIH1cbiAgQ09ORklHLmRlYnVnLmhvb2tzID0gISFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkZWJ1Z21vZGUnKVxuICBDT05GSUcuRGljZS50ZXJtcy50ID0gQ29DN0RlY2FkZXJEaWVcbiAgQ09ORklHLkRpY2UudGVybXMubyA9IENvQzdEZWNhZGVyRGllT3RoZXJcbn1cbiIsIi8qIGdsb2JhbCBBY3RvcnMsIEFjdG9yU2hlZXQsIEl0ZW1zLCBJdGVtU2hlZXQsIEpvdXJuYWwsIEpvdXJuYWxTaGVldCwgTWFjcm9Db25maWcsIE1hY3JvcywgUGxheWxpc3RDb25maWcsIFBsYXlsaXN0cywgUm9sbFRhYmxlcywgUm9sbFRhYmxlQ29uZmlnLCBTY2VuZXMsIFNjZW5lQ29uZmlnICovXG5pbXBvcnQgeyBDb0M3QXJjaGV0eXBlU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9zaGVldHMvYXJjaGV0eXBlLmpzJ1xuaW1wb3J0IHsgQ29DN0Jvb2tTaGVldCB9IGZyb20gJy4uL2l0ZW1zL2Jvb2svc2hlZXQuanMnXG5pbXBvcnQgeyBDb0M3Q2hhcmFjdGVyU2hlZXQgfSBmcm9tICcuLi9hY3RvcnMvc2hlZXRzL2NoYXJhY3Rlci5qcydcbmltcG9ydCB7IENvQzdDb250YWluZXJTaGVldCB9IGZyb20gJy4uL2FjdG9ycy9zaGVldHMvY29udGFpbmVyLmpzJ1xuaW1wb3J0IHsgQ29DN0NoYXNlU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9jaGFzZS9zaGVldC5qcydcbmltcG9ydCB7IENvQzdDcmVhdHVyZVNoZWV0IH0gZnJvbSAnLi4vYWN0b3JzL3NoZWV0cy9jcmVhdHVyZS1zaGVldC5qcydcbmltcG9ydCB7IENvQzdJdGVtU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9zaGVldHMvaXRlbS1zaGVldC5qcydcbmltcG9ydCB7IENvQzdJdGVtU2hlZXRWMiB9IGZyb20gJy4uL2l0ZW1zL3NoZWV0cy9pdGVtLXNoZWV0VjIuanMnXG5pbXBvcnQgeyBDb0M3Sm91cm5hbFNoZWV0IH0gZnJvbSAnLi4vc2hlZXRzL2NvYzctam91cm5hbC1zaGVldC5qcydcbmltcG9ydCB7IENvQzdNYWNyb0NvbmZpZyB9IGZyb20gJy4uL3NoZWV0cy9jb2M3LW1hY3JvLWNvbmZpZy5qcydcbmltcG9ydCB7IENvQzdOUENTaGVldCB9IGZyb20gJy4uL2FjdG9ycy9zaGVldHMvbnBjLXNoZWV0LmpzJ1xuaW1wb3J0IHsgQ29DN09jY3VwYXRpb25TaGVldCB9IGZyb20gJy4uL2l0ZW1zL3NoZWV0cy9vY2N1cGF0aW9uLmpzJ1xuaW1wb3J0IHsgQ29DN1BsYXlsaXN0Q29uZmlnIH0gZnJvbSAnLi4vc2hlZXRzL2NvYzctcGxheWxpc3QtY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1JvbGxUYWJsZUNvbmZpZyB9IGZyb20gJy4uL3NoZWV0cy9jb2M3LXJvbGwtdGFibGUtY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1NjZW5lQ29uZmlnIH0gZnJvbSAnLi4vc2hlZXRzL2NvYzctc2NlbmUtY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1NldHVwU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9zaGVldHMvc2V0dXAuanMnXG5pbXBvcnQgeyBDb0M3U2tpbGxTaGVldCB9IGZyb20gJy4uL2l0ZW1zL3NoZWV0cy9za2lsbC5qcydcbmltcG9ydCB7IENvQzdTcGVsbFNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc3BlbGwvc2hlZXQuanMnXG5pbXBvcnQgeyBDb0M3U3RhdHVzU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9zaGVldHMvc3RhdHVzLmpzJ1xuaW1wb3J0IHsgQ29DN1RhbGVudFNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc2hlZXRzL3RhbGVudC5qcydcbmltcG9ydCB7IENvQzdWZWhpY2xlU2hlZXQgfSBmcm9tICcuLi9hY3RvcnMvc2hlZXRzL3ZlaGljbGUuanMnXG5pbXBvcnQgeyBDb0M3V2VhcG9uU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9zaGVldHMvd2VhcG9uLXNoZWV0LmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJTaGVldHMgKCkge1xuICBBY3RvcnMudW5yZWdpc3RlclNoZWV0KCdjb3JlJywgQWN0b3JTaGVldClcbiAgQWN0b3JzLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3TlBDU2hlZXQsIHtcbiAgICB0eXBlczogWyducGMnXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBBY3RvcnMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdWZWhpY2xlU2hlZXQsIHtcbiAgICB0eXBlczogWyd2ZWhpY2xlJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgQWN0b3JzLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3Q3JlYXR1cmVTaGVldCwge1xuICAgIHR5cGVzOiBbJ2NyZWF0dXJlJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgQWN0b3JzLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3Q29udGFpbmVyU2hlZXQsIHtcbiAgICB0eXBlczogWydjb250YWluZXInXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBBY3RvcnMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdDaGFyYWN0ZXJTaGVldCwge1xuICAgIHR5cGVzOiBbJ2NoYXJhY3RlciddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG5cbiAgSXRlbXMudW5yZWdpc3RlclNoZWV0KCdjb3JlJywgSXRlbVNoZWV0KVxuICBJdGVtcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN1NraWxsU2hlZXQsIHtcbiAgICB0eXBlczogWydza2lsbCddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG4gIEl0ZW1zLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3V2VhcG9uU2hlZXQsIHtcbiAgICB0eXBlczogWyd3ZWFwb24nXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBJdGVtcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN0Jvb2tTaGVldCwge1xuICAgIHR5cGVzOiBbJ2Jvb2snXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBJdGVtcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN1NwZWxsU2hlZXQsIHtcbiAgICB0eXBlczogWydzcGVsbCddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG4gIEl0ZW1zLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3VGFsZW50U2hlZXQsIHtcbiAgICB0eXBlczogWyd0YWxlbnQnXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBJdGVtcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN1N0YXR1c1NoZWV0LCB7XG4gICAgdHlwZXM6IFsnc3RhdHVzJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdPY2N1cGF0aW9uU2hlZXQsIHtcbiAgICB0eXBlczogWydvY2N1cGF0aW9uJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdBcmNoZXR5cGVTaGVldCwge1xuICAgIHR5cGVzOiBbJ2FyY2hldHlwZSddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG4gIEl0ZW1zLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3U2V0dXBTaGVldCwge1xuICAgIHR5cGVzOiBbJ3NldHVwJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdDaGFzZVNoZWV0LCB7XG4gICAgdHlwZXM6IFsnY2hhc2UnXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBJdGVtcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN0l0ZW1TaGVldCwgeyB0eXBlczogWydpdGVtJ10gfSlcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdJdGVtU2hlZXRWMiwge1xuICAgIHR5cGVzOiBbJ2l0ZW0nXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuXG4gIFNjZW5lcy51bnJlZ2lzdGVyU2hlZXQoJ2NvcmUnLCBTY2VuZUNvbmZpZylcbiAgU2NlbmVzLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3U2NlbmVDb25maWcsIHtcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuXG4gIEpvdXJuYWwudW5yZWdpc3RlclNoZWV0KCdjb3JlJywgSm91cm5hbFNoZWV0KVxuICBKb3VybmFsLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3Sm91cm5hbFNoZWV0LCB7XG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcblxuICBSb2xsVGFibGVzLnVucmVnaXN0ZXJTaGVldCgnY29yZScsIFJvbGxUYWJsZUNvbmZpZylcbiAgUm9sbFRhYmxlcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN1JvbGxUYWJsZUNvbmZpZywge1xuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG5cbiAgTWFjcm9zLnVucmVnaXN0ZXJTaGVldCgnY29yZScsIE1hY3JvQ29uZmlnKVxuICBNYWNyb3MucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdNYWNyb0NvbmZpZywge1xuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG5cbiAgUGxheWxpc3RzLnVucmVnaXN0ZXJTaGVldCgnY29yZScsIFBsYXlsaXN0Q29uZmlnKVxuICBQbGF5bGlzdHMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdQbGF5bGlzdENvbmZpZywge1xuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgSGFuZGxlYmFycyAqL1xuaW1wb3J0IHsgY2hhdEhlbHBlciB9IGZyb20gJy4uL2NoYXQvaGVscGVyLmpzJ1xuXG5leHBvcnQgY29uc3QgaGFuZGxlYmFyc0hlbHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcigncm9sbEFjdG9ySW1nJywgZnVuY3Rpb24gKGFjdG9yS2V5KSB7XG4gICAgY29uc3QgaW1nID0gY2hhdEhlbHBlci5nZXRBY3RvckltZ0Zyb21LZXkoYWN0b3JLZXkpXG4gICAgaWYgKGltZykgcmV0dXJuIGltZ1xuICAgIHJldHVybiAnLi4vaWNvbnMvc3ZnL215c3RlcnktbWFuLWJsYWNrLnN2ZydcbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBIb29rcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uY2UoJ2RpY2VTb05pY2VSZWFkeScsIGRpY2UzZCA9PiB7XG4gICAgZm9yIChjb25zdCBzeXN0ZW0gaW4gZGljZTNkLkRpY2VGYWN0b3J5LnN5c3RlbXMpIHtcbiAgICAgIGNvbnN0IGQxMDAgPSBkaWNlM2QuRGljZUZhY3Rvcnkuc3lzdGVtc1tzeXN0ZW1dLmRpY2UuZmluZChkID0+IGQudHlwZSA9PT0gJ2QxMDAnKVxuICAgICAgaWYgKHR5cGVvZiBkMTAwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHlwZW9mIGRpY2UzZC5EaWNlRmFjdG9yeS5zeXN0ZW1zW3N5c3RlbV0uZGljZS5maW5kKGQgPT4gZC50eXBlID09PSAnZHQnKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBkaWNlRGVjYWRlciA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YoZDEwMCkpLCBkMTAwKVxuICAgICAgICAgIGRpY2VEZWNhZGVyLnR5cGUgPSAnZHQnXG4gICAgICAgICAgZGljZTNkLkRpY2VGYWN0b3J5LnN5c3RlbXNbc3lzdGVtXS5kaWNlLnB1c2goZGljZURlY2FkZXIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkaWNlM2QuRGljZUZhY3Rvcnkuc3lzdGVtc1tzeXN0ZW1dLmRpY2UuZmluZChkID0+IGQudHlwZSA9PT0gJ2RvJykgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgZGljZURlY2FkZXIgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKGQxMDApKSwgZDEwMClcbiAgICAgICAgICBkaWNlRGVjYWRlci50eXBlID0gJ2RvJ1xuICAgICAgICAgIGRpY2UzZC5EaWNlRmFjdG9yeS5zeXN0ZW1zW3N5c3RlbV0uZGljZS5wdXNoKGRpY2VEZWNhZGVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIiwiLyogZ2xvYmFsICQsIGdhbWUgKi9cbmV4cG9ydCBjbGFzcyBDb0M3VG9vbHRpcHMge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5Ub29sVGlwSG92ZXIgPSBudWxsXG4gICAgdGhpcy50b29sVGlwVGltZXIgPSBudWxsXG4gIH1cblxuICBkaXNwbGF5VG9vbFRpcCAodG9vbFRpcCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5Ub29sVGlwSG92ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBib3VuZHMgPSB0aGlzLlRvb2xUaXBIb3Zlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgaWYgKCFpc05hTihib3VuZHMubGVmdCB8fCAnJykgJiYgIWlzTmFOKGJvdW5kcy50b3AgfHwgJycpKSB7XG4gICAgICAgIGxldCBsZWZ0ID0gYm91bmRzLmxlZnRcbiAgICAgICAgbGV0IHRvcCA9IGJvdW5kcy50b3BcbiAgICAgICAgY29uc3QgaGVpZ2h0VGV4dCA9ICQodGhpcy5Ub29sVGlwSG92ZXIpLm91dGVySGVpZ2h0KClcbiAgICAgICAgJCgnYm9keScpLmFwcGVuZCgnPGRpdiBpZD1cImhlbHAtdG9vbHRpcFwiPicgKyB0b29sVGlwICsgJzwvZGl2PicpXG4gICAgICAgIGNvbnN0IHRpcCA9ICQoJyNoZWxwLXRvb2x0aXAnKVxuICAgICAgICBjb25zdCBoZWlnaHRUaXAgPSB0aXAub3V0ZXJIZWlnaHQoKVxuICAgICAgICBjb25zdCB3aWR0aFRpcCA9IHRpcC5vdXRlcldpZHRoKClcbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lckhlaWdodCA8IGhlaWdodFRleHQgKiAxLjUgKyBoZWlnaHRUaXAgKyB0b3ApIHtcbiAgICAgICAgICB0b3AgPSB0b3AgLSBoZWlnaHRUaXBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b3AgPSB0b3AgKyBoZWlnaHRUZXh0ICogMS41XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgd2lkdGhUaXAgKyBsZWZ0KSB7XG4gICAgICAgICAgbGVmdCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gd2lkdGhUaXBcbiAgICAgICAgfVxuICAgICAgICB0aXAuY3NzKHtcbiAgICAgICAgICBsZWZ0OiBsZWZ0ICsgJ3B4JyxcbiAgICAgICAgICB0b3A6IHRvcCArICdweCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0b29sVGlwTGVhdmUgKGV2ZW50KSB7XG4gICAgaWYgKGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3ZlciA9PT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGdhbWUuQ29DN1Rvb2x0aXBzLnRvb2xUaXBUaW1lcilcbiAgICAgIGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3ZlciA9IG51bGxcbiAgICAgICQoJyNoZWxwLXRvb2x0aXAnKS5yZW1vdmUoKVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsIE11dGF0aW9uT2JzZXJ2ZXIsIFRvdXIsIHVpICovXG5sZXQgQ29DN1RvdXIgPSBjbGFzcyBpbnRlcm5hbENvQzdUb3VyIHt9XG5pZiAodHlwZW9mIFRvdXIgIT09ICd1bmRlZmluZWQnKSB7XG4gIENvQzdUb3VyID0gY2xhc3MgaW50ZXJuYWxDb0M3VG91ciBleHRlbmRzIFRvdXIge1xuICAgIGFzeW5jIHdhaXRGb3JFbGVtZW50IChzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMsIG9ic2VydmVyKSA9PiB7XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHtcbiAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBhc3luYyBfcHJlU3RlcCAoKSB7XG4gICAgICBhd2FpdCBzdXBlci5fcHJlU3RlcCgpXG5cbiAgICAgIC8vIENsb3NlIGN1cnJlbnRseSBvcGVuIGFwcGxpY2F0aW9uc1xuICAgICAgaWYgKHRoaXMuc3RlcEluZGV4ID09PSAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgYXBwIG9mIE9iamVjdC52YWx1ZXModWkud2luZG93cykpIHtcbiAgICAgICAgICBhcHAuY2xvc2UoKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMud2FpdEZvckVsZW1lbnQodGhpcy5jdXJyZW50U3RlcC5zZWxlY3RvcilcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbnRTdGVwLnNpZGViYXJUYWIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHVpLnNpZGViYXIuYWN0aXZhdGVUYWIodGhpcy5jdXJyZW50U3RlcC5zaWRlYmFyVGFiKVxuICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIF9wb3N0U3RlcCAoKSB7XG4gICAgICBhd2FpdCBzdXBlci5fcG9zdFN0ZXAoKVxuICAgICAgaWYgKHRoaXMuc3RlcEluZGV4IDwgMCB8fCAhdGhpcy5oYXNOZXh0KSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY3VycmVudFN0ZXAuYWN0aW9uKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1Jlc2V0dGluZykge1xuICAgICAgICB0aGlzLmlzUmVzZXR0aW5nID0gZmFsc2VcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAodGhpcy5jdXJyZW50U3RlcC5hY3Rpb24pIHtcbiAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5jdXJyZW50U3RlcC5zZWxlY3RvcikuY2xpY2soKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgcmVzZXQgKCkge1xuICAgICAgaWYgKHRoaXMuc3RhdHVzICE9PSAnY29tcGxldGVkJykge1xuICAgICAgICB0aGlzLmlzUmVzZXR0aW5nID0gdHJ1ZVxuICAgICAgfVxuICAgICAgYXdhaXQgc3VwZXIucmVzZXQoKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBDb0M3VG91ciB9XG4iLCIvKiBnbG9iYWwgZm91bmRyeSAqL1xuaW1wb3J0IHsgQ29DN1RvdXIgfSBmcm9tICcuLi9hcHBzL2NvYzctdG91ci5qcydcblxuZXhwb3J0IGNsYXNzIEVuYWJsZVZhcmlhbnRSdWxlc0VuIGV4dGVuZHMgQ29DN1RvdXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgc3VwZXIoZm91bmRyeS51dGlscy5tZXJnZU9iamVjdCh7XG4gICAgICB0aXRsZTogJ0VuYWJsZSBvcHRpb25hbC92YXJpYW50IHJ1bGVzLicsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xlYXJuIGhvdyB0byBlbmFibGUgUHVscCBDdGh1bGh1IHJ1bGVzLCBvciBvdGhlciB2YXJpYW50IHJ1bGVzJyxcbiAgICAgIGNhbkJlUmVzdW1lZDogZmFsc2UsXG4gICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgc3RlcHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnZ290by1zZXR0aW5ncycsXG4gICAgICAgICAgc2VsZWN0b3I6ICcudGFicz5hW2RhdGEtdGFiPVwic2V0dGluZ3NcIl0nLFxuICAgICAgICAgIHRpdGxlOiAnQ09DNy5Ub3VyLkdvdG9TZXR0aW5nc1RpdGxlJyxcbiAgICAgICAgICBjb250ZW50OiAnQ09DNy5Ub3VyLkdvdG9TZXR0aW5nc0NvbnRlbnQnLFxuICAgICAgICAgIHNpZGViYXJUYWI6ICdzZXR0aW5ncydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnZ290by1jb25maWd1cmUnLFxuICAgICAgICAgIHNlbGVjdG9yOiAnW2RhdGEtYWN0aW9uPVwiY29uZmlndXJlXCJdJyxcbiAgICAgICAgICB0aXRsZTogJ0NPQzcuVG91ci5Hb3RvQ29uZmlndXJlVGl0bGUnLFxuICAgICAgICAgIGNvbnRlbnQ6ICdDT0M3LlRvdXIuR290b0NvbmZpZ3VyZUNvbnRlbnQnLFxuICAgICAgICAgIGFjdGlvbjogJ2NsaWNrJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdnb3RvLXN5c3RlbS1zZXR0aW5ncycsXG4gICAgICAgICAgc2VsZWN0b3I6ICdbZGF0YS10YWI9XCJzeXN0ZW1cIl0nLFxuICAgICAgICAgIHRpdGxlOiAnQ09DNy5Ub3VyLkdvdG9TeXN0ZW1TZXR0aW5nc1RpdGxlJyxcbiAgICAgICAgICBjb250ZW50OiAnQ09DNy5Ub3VyLkdvdG9TeXN0ZW1TZXR0aW5nc0NvbnRlbnQnLFxuICAgICAgICAgIGFjdGlvbjogJ2NsaWNrJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdnb3RvLWdhbWUtcnVsZXMnLFxuICAgICAgICAgIHNlbGVjdG9yOiAnW2RhdGEtY2F0ZWdvcnk9XCJzeXN0ZW1cIl0gW2RhdGEta2V5PVwiQ29DNy5nYW1lUnVsZXNcIl0nLFxuICAgICAgICAgIHRpdGxlOiAnQ09DNy5Ub3VyLkdvdG9HYW1lUnVsZXNUaXRsZScsXG4gICAgICAgICAgY29udGVudDogJ0NPQzcuVG91ci5Hb3RvR2FtZVJ1bGVzQ29udGVudCcsXG4gICAgICAgICAgYWN0aW9uOiAnY2xpY2snXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3NhdmUtZ2FtZS1ydWxlcycsXG4gICAgICAgICAgc2VsZWN0b3I6ICcjcnVsZXMtc2V0dGluZ3MgW25hbWU9c3VibWl0XScsXG4gICAgICAgICAgdGl0bGU6ICdDT0M3LlRvdXIuU2F2ZUdhbWVSdWxlc1RpdGxlJyxcbiAgICAgICAgICBjb250ZW50OiAnQ09DNy5Ub3VyLlNhdmVHYW1lUnVsZXNDb250ZW50J1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbG9jYWxpemF0aW9uOiB7XG4gICAgICAgICdDT0M3LlRvdXIuR290b1NldHRpbmdzVGl0bGUnOiAnR2FtZSBTZXR0aW5ncycsXG4gICAgICAgICdDT0M3LlRvdXIuR290b1NldHRpbmdzQ29udGVudCc6ICdHbyB0byB0aGUgR2FtZSBTZXR0aW5ncyB0YWInLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9Db25maWd1cmVUaXRsZSc6ICdDb25maWd1cmUgU2V0dGluZ3MnLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9Db25maWd1cmVDb250ZW50JzogJ0NsaWNrIG9uIHRoZSBDb25maWd1cmUgU2V0dGluZ3MgYnV0dG9uJyxcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvU3lzdGVtU2V0dGluZ3NUaXRsZSc6ICdTeXN0ZW0gU2V0dGluZ3MnLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9TeXN0ZW1TZXR0aW5nc0NvbnRlbnQnOiAnR28gdG8gdGhlIFN5c3RlbSBTZXR0aW5ncyB0YWInLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9HYW1lUnVsZXNUaXRsZSc6ICdDb25maWd1cmUgVmFyaWFudC9PcHRpb25hbCBSdWxlcycsXG4gICAgICAgICdDT0M3LlRvdXIuR290b0dhbWVSdWxlc0NvbnRlbnQnOiAnQ2xpY2sgb24gdGhlIENvbmZpZ3VyZSBWYXJpYW50L09wdGlvbmFsIFJ1bGVzIGJ1dHRvbicsXG4gICAgICAgICdDT0M3LlRvdXIuU2F2ZUdhbWVSdWxlc1RpdGxlJzogJ1NhdmUgcnVsZSBjaGFuZ2VzJyxcbiAgICAgICAgJ0NPQzcuVG91ci5TYXZlR2FtZVJ1bGVzQ29udGVudCc6ICdPbmNlIHlvdSBoYXZlIG1hZGUgeW91ciBjaGFuZ2VzIGNsaWNrIG9uIHRoZSBTYXZlIENoYW5nZXMgYnV0dG9uJ1xuICAgICAgfVxuICAgIH0sIGNvbmZpZykpXG4gIH1cbn1cbiIsImltcG9ydCB7IEVuYWJsZVZhcmlhbnRSdWxlc0VuIH0gZnJvbSAnLi9lbmFibGUtdmFyaWFudC1ydWxlcy1lbi5qcydcblxuZXhwb3J0IGNsYXNzIEVuYWJsZVZhcmlhbnRSdWxlc0ZyIGV4dGVuZHMgRW5hYmxlVmFyaWFudFJ1bGVzRW4ge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgc3VwZXIoe1xuICAgICAgdGl0bGU6ICdBY3RpdmV6IGxlcyByw6hnbGVzIG9wdGlvbm5lbGxlcy4nLFxuICAgICAgZGVzY3JpcHRpb246ICdBY3RpdmV6IGxlcyByw6hnbGVzIG9wdGlvbmVsbGVzIGV0IFB1bHAgQ3RodWxodScsXG4gICAgICBsb2NhbGl6YXRpb246IHtcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvU2V0dGluZ3NUaXRsZSc6ICdQYXJhbcOodHJlcycsXG4gICAgICAgICdDT0M3LlRvdXIuR290b1NldHRpbmdzQ29udGVudCc6ICdPdXZyaXIgbFxcJ29uZ2xldCBcIlBhcmFtw6h0cmVzXCInLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9Db25maWd1cmVUaXRsZSc6ICdDb25maWd1cmF0aW9uIGRlcyBvcHRpb25zJyxcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvQ29uZmlndXJlQ29udGVudCc6ICdDbGlxdWV6IHN1ciBcIkNvbmZpZ3VyYXRpb24gZGVzIG9wdGlvbnNcIicsXG4gICAgICAgICdDT0M3LlRvdXIuR290b1N5c3RlbVNldHRpbmdzVGl0bGUnOiAnU3lzdMOobWUgZGUgamV1JyxcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvU3lzdGVtU2V0dGluZ3NDb250ZW50JzogJ091dnJleiBsXFwnb25nbGV0IFwiU3lzdMOobWUgZGUgamV1XCInLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9HYW1lUnVsZXNUaXRsZSc6ICdDb25maWd1cmVyIGxlcyB2YXJpYW50ZXMvcsOoZ2xlcyBvcHRpb25uZWxsZXMnLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9HYW1lUnVsZXNDb250ZW50JzogJ0NsaWNrZXogc3VyIGxlIGJvdXR0b24gXCJDb25maWd1cmVyIGxlcyB2YXJpYW50ZXMvcsOoZ2xlcyBvcHRpb25uZWxsZXNcIicsXG4gICAgICAgICdDT0M3LlRvdXIuU2F2ZUdhbWVSdWxlc1RpdGxlJzogJ1NhdXZlZ2FyZGVyIGxlcyBtb2RpZmljYXRpb25zJyxcbiAgICAgICAgJ0NPQzcuVG91ci5TYXZlR2FtZVJ1bGVzQ29udGVudCc6ICdBcHJlcyBhdm9pciBjaG9pc2lzIGxlcyBvcHRpb25zIGNsaXF1ZXogc3VyIGxlIGJvdXRvbiBcIlNhdXZlZ2FyZGVyIGxlcyBtb2RpZmljYXRpb25zXCInXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIENPTkZJRywgZm91bmRyeSwgZ2FtZSwgSG9va3MgKi9cbmltcG9ydCB7IENvQzdUb29sdGlwcyB9IGZyb20gJy4uL2FwcHMvdG9vbHRpcHMuanMnXG4vLyBpbXBvcnQgeyBDb0M3V2VsY29tZU1lc3NhZ2UgfSBmcm9tICcuLi9hcHBzL3dlbGNvbWUtbWVzc2FnZS5qcydcbmltcG9ydCB7IHJlZ2lzdGVyVG91cnMgfSBmcm9tICcuLi9zY3JpcHRzL3JlZ2lzdGVyLXRvdXJzLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub25jZSgncmVhZHknLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0NhbGwgb2YgQ3RodWxodSA3dGggRWRpdGlvbiB8IFJlYWR5JylcbiAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2hvd1dlbGNvbWVNZXNzYWdlJykgJiYgZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIC8qKiBUaGlzIHdpbGwgcHJvbXB0IHRoZSB3ZWxjb21lIG1lc3NhZ2Ugd2hlbiBpdCBpcyAgZmluaXNoZWQgKi9cbiAgICAgIC8vIGF3YWl0IENvQzdXZWxjb21lTWVzc2FnZS5jcmVhdGUoKVxuICAgIH1cbiAgICBnYW1lLkNvQzdUb29sdGlwcyA9IG5ldyBDb0M3VG9vbHRpcHMoKVxuXG4gICAgY29uc3QgaW5zdHJ1Y3Rpb25zVmVyc2lvbiA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3Nob3dJbnN0cnVjdGlvbnMnKVxuICAgIGxldCBsYW5nID0gZ2FtZS5pMThuLmxhbmdcbiAgICBjb25zdCByZWFkTWUgPSB7XG4gICAgICBlbjogJ3N4QjJPWGJmd1Y2TTBueVEnLFxuICAgICAgZXM6ICczNUZNN1pPZHpDNkwyeGxqJyxcbiAgICAgIGZyOiAndGRha3l6VFZPUXNBTWRTbSdcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZWFkTWVbbGFuZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBsYW5nID0gJ2VuJ1xuICAgIH1cbiAgICBDT05GSUcuQ29DNyA9IENPTkZJRy5Db0M3ID8/IHt9XG4gICAgQ09ORklHLkNvQzcuTWFudWFsID0gcmVhZE1lW2xhbmddXG4gICAgaWYgKGZvdW5kcnkudXRpbHMuaXNOZXdlclZlcnNpb24oZ2FtZS5zeXN0ZW0udmVyc2lvbiwgaW5zdHJ1Y3Rpb25zVmVyc2lvbiA/PyAnMCcpKSB7XG4gICAgICAoYXdhaXQgZ2FtZS5wYWNrcy5nZXQoJ0NvQzcuc3lzdGVtLWRvYycpLmdldERvY3VtZW50KENPTkZJRy5Db0M3Lk1hbnVhbCkpPy5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3Nob3dJbnN0cnVjdGlvbnMnLCBnYW1lLnN5c3RlbS52ZXJzaW9uKVxuICAgIH1cbiAgICByZWdpc3RlclRvdXJzKClcbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBnYW1lICovXG5pbXBvcnQgeyBFbmFibGVWYXJpYW50UnVsZXNFbiB9IGZyb20gJy4uL3RvdXJzL2VuYWJsZS12YXJpYW50LXJ1bGVzLWVuLmpzJ1xuaW1wb3J0IHsgRW5hYmxlVmFyaWFudFJ1bGVzRnIgfSBmcm9tICcuLi90b3Vycy9lbmFibGUtdmFyaWFudC1ydWxlcy1mci5qcydcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZ2lzdGVyVG91cnMgKCkge1xuICB0cnkge1xuICAgIGxldCBsYW5nID0gZ2FtZS5pMThuLmxhbmdcbiAgICBjb25zdCB0b3VycyA9IHtcbiAgICAgIGVuOiB7XG4gICAgICAgICdlbmFibGUtdmFyaWFudC1ydWxlcyc6IEVuYWJsZVZhcmlhbnRSdWxlc0VuXG4gICAgICB9LFxuICAgICAgZnI6IHtcbiAgICAgICAgJ2VuYWJsZS12YXJpYW50LXJ1bGVzJzogRW5hYmxlVmFyaWFudFJ1bGVzRnJcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0b3Vyc1tsYW5nXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxhbmcgPSAnZW4nXG4gICAgfVxuICAgIGZvciAoY29uc3QgdG91ck5hbWUgaW4gdG91cnNbbGFuZ10pIHtcbiAgICAgIGdhbWUudG91cnMucmVnaXN0ZXIoJ0NvQzcnLCB0b3VyTmFtZSwgbmV3IHRvdXJzW2xhbmddW3RvdXJOYW1lXSgpKVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcignVE9VUiBFUlJPUicsIGVycilcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgQ3JlYXRlVG9rZW4gZnJvbSAnLi9jcmVhdGUtdG9rZW4uanMnXG5pbXBvcnQgKiBhcyBEaWNlU29OaWNlUmVhZHkgZnJvbSAnLi9kaWNlLXNvLW5pY2UtcmVhZHkuanMnXG5pbXBvcnQgKiBhcyBJbml0IGZyb20gJy4vaW5pdC5qcydcbmltcG9ydCAqIGFzIFJlYWR5IGZyb20gJy4vcmVhZHkuanMnXG5pbXBvcnQgKiBhcyBSZW5kZXJBY3RvclNoZWV0IGZyb20gJy4vcmVuZGVyLWFjdG9yLXNoZWV0LmpzJ1xuaW1wb3J0ICogYXMgUmVuZGVyQ2hhdE1lc3NhZ2UgZnJvbSAnLi9yZW5kZXItY2hhdC1tZXNzYWdlLmpzJ1xuaW1wb3J0ICogYXMgUmVuZGVyRGlhbG9nIGZyb20gJy4vcmVuZGVyLWRpYWxvZy5qcydcbmltcG9ydCAqIGFzIFJlbmRlckl0ZW1TaGVldCBmcm9tICcuL3JlbmRlci1pdGVtLXNoZWV0LmpzJ1xuaW1wb3J0ICogYXMgUmVuZGVyUGF1c2UgZnJvbSAnLi9yZW5kZXItcGF1c2UuanMnXG5pbXBvcnQgKiBhcyBSZW5kZXJQbGF5ZXJMaXN0IGZyb20gJy4vcmVuZGVyLXBsYXllci1saXN0LmpzJ1xuaW1wb3J0ICogYXMgUmVuZGVyUmVhbFJvbGwgZnJvbSAnLi9yZW5kZXItcmVhbC1yb2xsLmpzJ1xuaW1wb3J0ICogYXMgUmVuZGVyU2V0dGluZ3NDb25maWcgZnJvbSAnLi9yZW5kZXItc2V0dGluZ3MtY29uZmlnLmpzJ1xuXG5leHBvcnQgY29uc3QgQ29DN0hvb2tzID0ge1xuICBsaXN0ZW4gKCkge1xuICAgIENyZWF0ZVRva2VuLmxpc3RlbigpXG4gICAgRGljZVNvTmljZVJlYWR5Lmxpc3RlbigpXG4gICAgSW5pdC5saXN0ZW4oKVxuICAgIFJlYWR5Lmxpc3RlbigpXG4gICAgUmVuZGVyQWN0b3JTaGVldC5saXN0ZW4oKVxuICAgIFJlbmRlckNoYXRNZXNzYWdlLmxpc3RlbigpXG4gICAgUmVuZGVyRGlhbG9nLmxpc3RlbigpXG4gICAgUmVuZGVySXRlbVNoZWV0Lmxpc3RlbigpXG4gICAgUmVuZGVyUGF1c2UubGlzdGVuKClcbiAgICBSZW5kZXJQbGF5ZXJMaXN0Lmxpc3RlbigpXG4gICAgUmVuZGVyUmVhbFJvbGwubGlzdGVuKClcbiAgICBSZW5kZXJTZXR0aW5nc0NvbmZpZy5saXN0ZW4oKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgSG9va3MsIERpYWxvZywgZ2FtZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uKCdjcmVhdGVUb2tlbicsIGFzeW5jICh0b2tlbkRvY3VtZW50LCBvcHRpb25zLCBhY3RvcklkKSA9PiB7XG4gICAgLy8gU2V0IHRva2VuIGljb24gY29ycmVjdGx5XG4gICAgaWYgKFxuICAgICAgdG9rZW5Eb2N1bWVudC50ZXh0dXJlLnNyYyA9PT0gJ2ljb25zL3N2Zy9teXN0ZXJ5LW1hbi5zdmcnICYmXG4gICAgICB0b2tlbkRvY3VtZW50LnRleHR1cmUuc3JjICE9PSB0b2tlbkRvY3VtZW50Ll9vYmplY3QuYWN0b3IuaW1nKSB7XG4gICAgICB0b2tlbkRvY3VtZW50LnRleHR1cmUuc3JjID0gdG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLmltZ1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGlzIHNvbWV0aGluZyB0byByb2xsIGFzayBpZiB3ZSBzaG91bGQgcm9sbCBpdFxuICAgIGlmICh0b2tlbkRvY3VtZW50Ll9vYmplY3QuYWN0b3IudHlwZSAhPT0gJ2NoYXJhY3RlcicgJiYgKHRva2VuRG9jdW1lbnQuX29iamVjdC5hY3Rvci5oYXNSb2xsYWJsZUNoYXJhY3RlcmlzdGljcyB8fCB0b2tlbkRvY3VtZW50Ll9vYmplY3QuYWN0b3IuaG9zUm9sbGFibGVTa2lsbHMpKSB7XG4gICAgICBuZXcgRGlhbG9nKFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ub2tlbkNyZWF0aW9uUm9sbC5UaXRsZScpLFxuICAgICAgICAgIGNvbnRlbnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ub2tlbkNyZWF0aW9uUm9sbC5Qcm9tcHQnKSxcbiAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICByb2xsOiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVG9rZW5DcmVhdGlvblJvbGwuQnV0dG9uUm9sbCcpLFxuICAgICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4gYXdhaXQgdG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLnJvbGxDaGFyYWN0ZXJpc3RpY3NWYWx1ZSgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXZlcmFnZToge1xuICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRva2VuQ3JlYXRpb25Sb2xsLkJ1dHRvbkF2ZXJhZ2UnKSxcbiAgICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IGF3YWl0IHRva2VuRG9jdW1lbnQuX29iamVjdC5hY3Rvci5hdmVyYWdlQ2hhcmFjdGVyaXN0aWNzVmFsdWUoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNraXA6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NaWdyYXRlLkJ1dHRvblNraXAnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkucmVuZGVyKHRydWUpXG4gICAgfVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIEhvb2tzICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub25jZSgnZGljZVNvTmljZVJlYWR5JywgZGljZTNkID0+IHtcbiAgICBkaWNlM2QuYWRkRGljZVByZXNldCh7XG4gICAgICB0eXBlOiAnZHQnLFxuICAgICAgbGFiZWxzOiBbJzEwJywgJzIwJywgJzMwJywgJzQwJywgJzUwJywgJzYwJywgJzcwJywgJzgwJywgJzkwJywgJzAwJ10sXG4gICAgICBmb250U2NhbGU6IDAuNzUsXG4gICAgICBzeXN0ZW06ICdzdGFuZGFyZCdcbiAgICB9KVxuICAgIGRpY2UzZC5hZGREaWNlUHJlc2V0KHtcbiAgICAgIHR5cGU6ICdkbycsXG4gICAgICBsYWJlbHM6IFsnMTAnLCAnMjAnLCAnMzAnLCAnNDAnLCAnNTAnLCAnNjAnLCAnNzAnLCAnODAnLCAnOTAnLCAnMDAnXSxcbiAgICAgIGZvbnRTY2FsZTogMC43NSxcbiAgICAgIHN5c3RlbTogJ3N0YW5kYXJkJ1xuICAgIH0pXG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgSG9va3MgKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4gKCkge1xuICBIb29rcy5vbigncmVuZGVyQWN0b3JTaGVldCcsIGFzeW5jIChkYXRhLCBodG1sLCBvcHRpb25zKSA9PiB7fSlcbn1cbiIsIi8qIGdsb2JhbCBIb29rcyAqL1xuaW1wb3J0IHsgQ29DN0NoYXQgfSBmcm9tICcuLi9jaGF0LmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub24oJ3JlbmRlckNoYXRNZXNzYWdlJywgKGFwcCwgaHRtbCwgZGF0YSkgPT4ge1xuICAgIENvQzdDaGF0LnJlbmRlck1lc3NhZ2VIb29rKGFwcCwgaHRtbCwgZGF0YSlcbiAgICBDb0M3Q2hhdC5yZW5kZXJDaGF0TWVzc2FnZUhvb2soYXBwLCBodG1sLCBkYXRhKVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIGdhbWUsIEhvb2tzICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub24oJ3JlbmRlckRpYWxvZycsIChkaWFsb2csIGh0bWwpID0+IHtcbiAgICBjb25zdCBmb3JtID0gaHRtbC5maW5kKCdmb3JtJylcbiAgICBpZiAoZm9ybS5pcygnI2RvY3VtZW50LWNyZWF0ZScpICYmIGZvcm0uZmluZCgnc2VsZWN0JykubGVuZ3RoICE9PSAwKSB7XG4gICAgICBjb25zdCBlbnRpdHlDcmVhdGVTZWxlY3RUYWcgPSBmb3JtLmZpbmQoXCJbbmFtZT0ndHlwZSddXCIpXG4gICAgICBjb25zdCBlbnRpdHlTb3J0ZWRMaXN0ID0gW11cbiAgICAgIGNvbnN0IHNob3dFeHBlcmltZW50YWwgPSAhIWdhbWUuc2V0dGluZ3MuZ2V0KFxuICAgICAgICAnQ29DNycsXG4gICAgICAgICdleHBlcmltZW50YWxGZWF0dXJlcydcbiAgICAgIClcbiAgICAgIGVudGl0eUNyZWF0ZVNlbGVjdFRhZy5jaGlsZHJlbigpLmVhY2goKG8sIGVudGl0eU9wdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBlbnRpdHlPcHRpb24udGV4dENvbnRlbnQ/LmNhcGl0YWxpemUoKVxuICAgICAgICBpZiAoZ2FtZS5pMThuLmhhcyhgQ29DNy5FbnRpdGllcy4ke2tleX1gKSkge1xuICAgICAgICAgIGVudGl0eU9wdGlvbi50ZXh0Q29udGVudCA9IGdhbWUuaTE4bi5sb2NhbGl6ZShgQ29DNy5FbnRpdGllcy4ke2tleX1gKVxuICAgICAgICB9XG4gICAgICAgIGlmIChzaG93RXhwZXJpbWVudGFsIHx8ICFbJ3ZlaGljbGUnXS5pbmNsdWRlcyhlbnRpdHlPcHRpb24udmFsdWUpKSB7XG4gICAgICAgICAgZW50aXR5U29ydGVkTGlzdC5wdXNoKGVudGl0eU9wdGlvbilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGVudGl0eUNyZWF0ZVNlbGVjdFRhZy5lbXB0eSgpXG4gICAgICBlbnRpdHlDcmVhdGVTZWxlY3RUYWcuYXBwZW5kKFxuICAgICAgICBlbnRpdHlTb3J0ZWRMaXN0LnNvcnQoKGZpcnN0LCBzZWNvbmQpID0+XG4gICAgICAgICAgZmlyc3QuaW5uZXJUZXh0LmxvY2FsZUNvbXBhcmUoc2Vjb25kLmlubmVyVGV4dClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgaWYgKGVudGl0eUNyZWF0ZVNlbGVjdFRhZy52YWwoKSA9PT0gJ2FjdG9yJykge1xuICAgICAgICBlbnRpdHlDcmVhdGVTZWxlY3RUYWcudmFsKCdjaGFyYWN0ZXInKVxuICAgICAgfSBlbHNlIGlmIChlbnRpdHlDcmVhdGVTZWxlY3RUYWcudmFsKCkgPT09ICdib29rJykge1xuICAgICAgICBlbnRpdHlDcmVhdGVTZWxlY3RUYWcudmFsKCdpdGVtJylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgSG9va3MgKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uKCdyZW5kZXJJdGVtU2hlZXQnLCBhc3luYyAoZGF0YSwgaHRtbCwgb3B0aW9ucykgPT4ge30pXG59XG4iLCIvKiBnbG9iYWwgZ2FtZSwgSG9va3MgKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uKCdyZW5kZXJQYXVzZScsIGFzeW5jIChkYXRhLCBodG1sLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ292ZXJyaWRlR2FtZUFydHdvcmsnKSkge1xuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFBhdXNlSW1hZ2UnKS50b0xvd2VyQ2FzZSgpID09PSAnbnVsbCcpIHtcbiAgICAgICAgaHRtbC5maW5kKCdpbWcnKS5yZW1vdmUoKVxuICAgICAgfVxuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFBhdXNlSW1hZ2UnKSAhPT0gJycpIHtcbiAgICAgICAgaHRtbC5maW5kKCdpbWcnKS5hdHRyKCdzcmMnLCBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnRQYXVzZUltYWdlJykpXG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnRQYXVzZVRleHQnKSAhPT0gJycpIHtcbiAgICAgICAgaHRtbC5maW5kKCdoMycpLmh0bWwoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0UGF1c2VUZXh0JykpXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIiwiLyogZ2xvYmFsICQsIGdhbWUsIEhvb2tzICovXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub24oJ3JlbmRlclBsYXllckxpc3QnLCAocGxheWVyTGlzdCwgaHRtbCwgZGF0YSkgPT4ge1xuICAgICQoJzxoND4nKS5hcHBlbmQoJzxkaXY+PGkgY2xhc3M9XCJmYS1yZWd1bGFyIGZhLWNhbGVuZGFyXCI+PC9pPicgKyBnYW1lLmkxOG4uZm9ybWF0KENPQzcuZXJhc1tnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd3b3JsZEVyYScpXSA/PyAnQ29DNy5Db0NJREZsYWcuZXJyb3IudW5rbm93bi1lcmEnLCB7IGVyYTogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnd29ybGRFcmEnKSB9KSArICc8L2Rpdj4nKS5pbnNlcnRBZnRlcigkKCdoMycsIGh0bWwpKVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIGdhbWUsIEhvb2tzICovXG5pbXBvcnQgeyBDb0M3RGVjYWRlckRpZSB9IGZyb20gJy4uL2FwcHMvZGVjYWRlci1kaWUuanMnXG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4gKCkge1xuICBIb29rcy5vbigncmVuZGVyUmVhbFJvbGwnLCAoYXBwLCBodG1sLCBvcHRpb25zKSA9PiB7XG4gICAgZm9yIChjb25zdCB0ZXJtIGluIG9wdGlvbnMuZGllVGVybXMpIHtcbiAgICAgIGZvciAoY29uc3QgaW5wdXQgaW4gb3B0aW9ucy5kaWVUZXJtc1t0ZXJtXS5pbnB1dHMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGllVGVybXNbdGVybV0gaW5zdGFuY2VvZiBDb0M3RGVjYWRlckRpZSkge1xuICAgICAgICAgIGNvbnN0IHRhZyA9IGh0bWwuZmluZCgnW25hbWU9XCInICsgdGVybSArICcuJyArIGlucHV0ICsgJ1wiXScpXG4gICAgICAgICAgaWYgKHRhZy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRhZ1swXS5wbGFjZWhvbGRlciA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWFsUm9sbERlY2FkZXJQbGFjZWhvbGRlck5hbWUnKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBIb29rcyAqL1xuaW1wb3J0IHsgQ29DN0RpcmVjdG9yeVBpY2tlciB9IGZyb20gJy4uL3NjcmlwdHMvY29jNy1kaXJlY3RvcnktcGlja2VyLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub24oJ3JlbmRlclNldHRpbmdzQ29uZmlnJywgKGFwcCwgaHRtbCwgdXNlcikgPT4ge1xuICAgIENvQzdEaXJlY3RvcnlQaWNrZXIucHJvY2Vzc0h0bWwoaHRtbClcbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBnYW1lLCBzb2NrZXRsaWIsIHVpICovXG5pbXBvcnQgeyBDb0M3TWVsZWVUYXJnZXQgfSBmcm9tICcuLi9jaGF0L2NvbWJhdC9tZWxlZS10YXJnZXQuanMnXG5cbmV4cG9ydCBmdW5jdGlvbiBDb0M3U29ja2V0ICgpIHtcbiAgZ2FtZS5Db0M3c29ja2V0ID0gc29ja2V0bGliLnJlZ2lzdGVyU3lzdGVtKCdDb0M3JylcbiAgZ2FtZS5Db0M3c29ja2V0LnJlZ2lzdGVyKCdnbWNyZWF0ZW1lc3NhZ2VhcycsIGdtY3JlYXRlbWVzc2FnZWFzKVxuICBnYW1lLkNvQzdzb2NrZXQucmVnaXN0ZXIoJ2dtdHJhZGVpdGVtdG8nLCBnbXRyYWRlaXRlbXRvKVxufVxuXG5hc3luYyBmdW5jdGlvbiBnbWNyZWF0ZW1lc3NhZ2VhcyAoZGF0YSkge1xuICBjb25zdCBtZWxlZVRhcmdldCA9IG5ldyBDb0M3TWVsZWVUYXJnZXQoXG4gICAgZGF0YS50YXJnZXRLZXksXG4gICAgZGF0YS5tZXNzYWdlSWQsXG4gICAgZGF0YS5mYXN0Rm9yd2FyZFxuICApXG4gIG1lbGVlVGFyZ2V0LmluaXRpYXRvcktleSA9IGRhdGEuYWN0b3JLZXlcbiAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IG1lbGVlVGFyZ2V0LmNyZWF0ZUNoYXRDYXJkKClcbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ210cmFkZWl0ZW10byAoZGF0YSkge1xuICB0cnkge1xuICAgIGxldCBhY3RvclxuICAgIGlmIChkYXRhLnNjZW5lKSB7XG4gICAgICBhY3RvciA9IGdhbWUuc2NlbmVzLmdldChkYXRhLnNjZW5lKS50b2tlbnMuZ2V0KGRhdGEuYWN0b3JGcm9tKS5hY3RvclxuICAgIH0gZWxzZSB7XG4gICAgICBhY3RvciA9IGdhbWUuYWN0b3JzLmdldChkYXRhLmFjdG9yRnJvbSlcbiAgICB9XG4gICAgY29uc3QgaXRlbSA9IGFjdG9yLml0ZW1zLmdldChkYXRhLml0ZW0pXG4gICAgY29uc3QgY3JlYXRlZCA9IGF3YWl0IGdhbWUuYWN0b3JzXG4gICAgICAuZ2V0KGRhdGEuYWN0b3JUbylcbiAgICAgIC5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtpdGVtLnRvSlNPTigpXSlcbiAgICBpZiAoY3JlYXRlZCkge1xuICAgICAgYWN0b3IuZGVsZXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbaXRlbS5pZF0pXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0cnVlXG59XG4iLCIvKiBnbG9iYWwgZnJvbVV1aWQsIGdhbWUsIHVpICovXG5pbXBvcnQgeyBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkIH0gZnJvbSAnLi9pbnZlc3RpZ2F0b3Itd2l6YXJkLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IENvbWJpbmVkQ2hlY2tDYXJkIH0gZnJvbSAnLi4vY2hhdC9jYXJkcy9jb21iaW5lZC1yb2xsLmpzJ1xuaW1wb3J0IHsgT3Bwb3NlZENoZWNrQ2FyZCB9IGZyb20gJy4uL2NoYXQvY2FyZHMvb3Bwb3NlZC1yb2xsLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN1N5c3RlbVNvY2tldCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAgICAgICAgICAgICAgICAgICAgICAgRGF0YSB0byBzZW5kIHRvIHNvY2tldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkYXRhLnR5cGVdICAgICAgICAgICAgICAgIEFjdGlvbiB0byBydW5cbiAgICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSBbZGF0YS5saXN0ZW5lcl0gIG9ubHkgdGhpcyBzcGVjZmljIHVzZXIgc2hvdWxkIHJ1biB0aGUgYWN0aW9uXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBzdGF0aWMgYXN5bmMgY2FsbFNvY2tldCAoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YS5saXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChnYW1lLnVzZXIuaWQgPT09IGRhdGEubGlzdGVuZXIpIHtcbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdjaGFyYWN0ZXItd2l6YXJkJzpcbiAgICAgICAgICAgIENvQzdJbnZlc3RpZ2F0b3JXaXphcmQuY3JlYXRlQ2hhcmFjdGVyRnJvbURhdGEoZGF0YS5wYXlsb2FkKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdvcGVuLWNoYXJhY3Rlcic6XG4gICAgICAgICAgICBnYW1lLmFjdG9ycy5nZXQoZGF0YS5wYXlsb2FkKS5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSBPcHBvc2VkQ2hlY2tDYXJkLmRlZmF1bHRDb25maWcudHlwZTpcbiAgICAgICAgICAgIE9wcG9zZWRDaGVja0NhcmQuZGlzcGF0Y2goZGF0YSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBDb21iaW5lZENoZWNrQ2FyZC5kZWZhdWx0Q29uZmlnLnR5cGU6XG4gICAgICAgICAgICBDb21iaW5lZENoZWNrQ2FyZC5kaXNwYXRjaChkYXRhKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdpbnZva2UnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjb25zdCBpdGVtID0gYXdhaXQgZnJvbVV1aWQoZGF0YS5pdGVtKVxuICAgICAgICAgICAgICBpdGVtW2RhdGEubWV0aG9kXShkYXRhLmRhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICBjYXNlICd1cGRhdGVDaGFyJzpcbiAgICAgICAgICBDb0M3VXRpbGl0aWVzLnVwZGF0ZUNoYXJTaGVldHMoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgS2VlcGVyIGFjdGlvbiwgaWYgeW91IGFyZSBhIGtlZXBlciBydW4geW91cnNlbGYsIGlmIHRoZXJlIGlzIG5vIGFjdGl2ZSBHTSBzaG93IGVycm9yXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhICAgICAgICAgICAgIERhdGEgdG8gc2VuZCB0byBzb2NrZXQuXG4gICAqL1xuICBzdGF0aWMgcmVxdWVzdEtlZXBlckFjdGlvbiAoZGF0YSkge1xuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgZGF0YS5saXN0ZW5lciA9IGdhbWUudXNlci5pZFxuICAgICAgQ29DN1N5c3RlbVNvY2tldC5jYWxsU29ja2V0KGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGtlZXBlcnMgPSBnYW1lLnVzZXJzLmZpbHRlcih1ID0+IHUuYWN0aXZlICYmIHUuaXNHTSlcbiAgICAgIGlmIChrZWVwZXJzLmxlbmd0aCkge1xuICAgICAgICBkYXRhLmxpc3RlbmVyID0ga2VlcGVyc1swXS5pZFxuICAgICAgICBnYW1lLnNvY2tldC5lbWl0KCdzeXN0ZW0uQ29DNycsIGRhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FcnJvck1pc3NpbmdLZWVwZXJVc2VyJylcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IHVzZXIgYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhICAgICAgICAgICAgIERhdGEgdG8gc2VuZCB0byBzb2NrZXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHVzZXJJZCAgICAgIE9ubHkgdGhpcyB1c2VyIGlkIHNob3VsZCBydW4gdGhlIGFjdGlvbi5cbiAgICogQHBhcmFtIHtib29sZWFufSBlcnJvcklmTWlzc2luZyAgSWYgcmVxdWVzdGluZyBhIHNwZWNpZmljIHVzZXIgc2hvdWxkIHJ1biB0aGUgYWN0aW9uIGVycm9yIGlmIHVzZXIgbm90IGZvdW5kIC8gbG9nZ2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVTZWxmICAgICBJZiBydW5uaW5nIGFzIGFsbCB1c2VycyBzaG91bGQgdGhlIGN1cnJlbnQgdXNlciBhbHNvIHJ1biB0aGUgYWN0aW9uLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIHJlcXVlc3RVc2VyQWN0aW9uIChcbiAgICBkYXRhLFxuICAgIHsgdXNlcklkID0gbnVsbCwgZXJyb3JJZk1pc3NpbmcgPSB0cnVlLCBpbmNsdWRlU2VsZiA9IHRydWUgfSA9IHt9XG4gICkge1xuICAgIGlmICh1c2VySWQgJiYgdHlwZW9mIHVzZXJJZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh1c2VySWQgPT09IGdhbWUudXNlci5pZCkge1xuICAgICAgICBkYXRhLmxpc3RlbmVyID0gZ2FtZS51c2VyLmlkXG4gICAgICAgIENvQzdTeXN0ZW1Tb2NrZXQuY2FsbFNvY2tldChkYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdXNlciA9IGdhbWUudXNlcnMuZ2V0KHVzZXJJZClcbiAgICAgICAgaWYgKHR5cGVvZiB1c2VyLmlkICE9PSAndW5kZWZpbmVkJyAmJiB1c2VyLmFjdGl2ZSkge1xuICAgICAgICAgIGRhdGEubGlzdGVuZXIgPSB1c2VyLmlkXG4gICAgICAgICAgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCBkYXRhKVxuICAgICAgICB9IGVsc2UgaWYgKGVycm9ySWZNaXNzaW5nKSB7XG4gICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JNaXNzaW5nVXNlcicpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpbmNsdWRlU2VsZikge1xuICAgICAgICBDb0M3U3lzdGVtU29ja2V0LmNhbGxTb2NrZXQoZGF0YSlcbiAgICAgIH1cbiAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3JywgZGF0YSlcbiAgICB9XG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBDb21iYXQsIENPTkZJRywgZm91bmRyeSwgZ2FtZSwgSG9va3MsIEl0ZW1EaXJlY3RvcnkgKi9cbmltcG9ydCBDb0M3QWN0aXZlRWZmZWN0IGZyb20gJy4vYWN0aXZlLWVmZmVjdC5qcydcbmltcG9ydCB7IENvQzdOUENTaGVldCB9IGZyb20gJy4vYWN0b3JzL3NoZWV0cy9ucGMtc2hlZXQuanMnXG5pbXBvcnQgeyBDb0M3Q3JlYXR1cmVTaGVldCB9IGZyb20gJy4vYWN0b3JzL3NoZWV0cy9jcmVhdHVyZS1zaGVldC5qcydcbmltcG9ydCB7IENvQzdDaGFyYWN0ZXJTaGVldCB9IGZyb20gJy4vYWN0b3JzL3NoZWV0cy9jaGFyYWN0ZXIuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdCB9IGZyb20gJy4vY2hhdC5qcydcbmltcG9ydCB7IENvQzdDb21iYXQsIHJvbGxJbml0aWF0aXZlIH0gZnJvbSAnLi9jb21iYXQuanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi9jb25maWcuanMnXG5pbXBvcnQgeyBVcGRhdGVyIH0gZnJvbSAnLi91cGRhdGVyLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4vdXRpbGl0aWVzLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi9jaGVjay5qcydcbmltcG9ydCB7IENvQzdNZW51IH0gZnJvbSAnLi9tZW51LmpzJ1xuaW1wb3J0IHsgRGFtYWdlQ2FyZCB9IGZyb20gJy4vY2hhdC9jYXJkcy9kYW1hZ2UuanMnXG5pbXBvcnQgeyBDb0M3Q2FudmFzIH0gZnJvbSAnLi9hcHBzL2NhbnZhcy5qcydcbmltcG9ydCB7IENvQzdTZXR0aW5nc0RpcmVjdG9yeSB9IGZyb20gJy4vc2V0dGluZ3MtZGlyZWN0b3J5LmpzJ1xuaW1wb3J0IHsgQ29DN0NvbXBlbmRpdW1EaXJlY3RvcnkgfSBmcm9tICcuL2NvbXBlbmRpdW0tZGlyZWN0b3J5LmpzJ1xuaW1wb3J0IHsgQ29DN0FjdG9yRGlyZWN0b3J5IH0gZnJvbSAnLi9hY3Rvci1kaXJlY3RvcnkuanMnXG5pbXBvcnQgeyBDb0M3SG9va3MgfSBmcm9tICcuL2hvb2tzL2luZGV4LmpzJ1xuaW1wb3J0ICogYXMgRGljZUJvdCBmcm9tICcuL2RpY2Vib3QuanMnXG5pbXBvcnQgJy4uL3N0eWxlcy9zeXN0ZW0vaW5kZXgubGVzcydcbmltcG9ydCB7IENvQzdDaGFzZVNoZWV0IH0gZnJvbSAnLi9pdGVtcy9jaGFzZS9zaGVldC5qcydcbmltcG9ydCB7IENvQzdTb2NrZXQgfSBmcm9tICcuL2hvb2tzL3NvY2tldC5qcydcbmltcG9ydCB7IENvQzdTeXN0ZW1Tb2NrZXQgfSBmcm9tICcuL2FwcHMvY29jNy1zeXN0ZW0tc29ja2V0LmpzJ1xuaW1wb3J0IHsgRHJvcEFjdG9yU2hlZXREYXRhIH0gZnJvbSAnLi9ob29rcy9kcm9wLWFjdG9yLXNoZWV0LWRhdGEuanMnXG5cbi8vIENhcmQgaW5pdFxuaW1wb3J0IHsgaW5pdEVDQyB9IGZyb20gJy4vY29tbW9uL2NoYXRjYXJkbGliL3NyYy9jaGF0Y2FyZGxpYi5qcydcbmltcG9ydCB7IENoYXNlT2JzdGFjbGVDYXJkIH0gZnJvbSAnLi9jaGF0L2NhcmRzL2NoYXNlLW9ic3RhY2xlLmpzJ1xuaW1wb3J0IHsgQ29DN0NvbnRleHRNZW51IH0gZnJvbSAnLi9jb250ZXh0LW1lbnUuanMnXG5cbkhvb2tzLm9uKCdyZW5kZXJTZXR0aW5nc0NvbmZpZycsIChhcHAsIGh0bWwsIG9wdGlvbnMpID0+IHtcbiAgY29uc3Qgc3lzdGVtVGFiID0gJChhcHAuZm9ybSkuZmluZCgnLnRhYltkYXRhLXRhYj1zeXN0ZW1dJylcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ2lucHV0W25hbWU9Q29DN1xcXFwuZGlzcGxheUluaXREaWNlc10nKVxuICAgIC5jbG9zZXN0KCdkaXYuZm9ybS1ncm91cCcpXG4gICAgLmJlZm9yZShcbiAgICAgICc8aDIgY2xhc3M9XCJzZXR0aW5nLWhlYWRlclwiPicgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFRJTkdTLlRpdGxlSW5pdGlhdGl2ZScpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ2lucHV0W25hbWU9Q29DN1xcXFwuc3RhbmJ5R01Sb2xsc10nKVxuICAgIC5jbG9zZXN0KCdkaXYuZm9ybS1ncm91cCcpXG4gICAgLmJlZm9yZShcbiAgICAgICc8aDIgY2xhc3M9XCJzZXR0aW5nLWhlYWRlclwiPicgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFRJTkdTLlRpdGxlUm9sbCcpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ2lucHV0W25hbWU9Q29DN1xcXFwudHJ1c3RlZENhbk1vZGZ5Q2hhdENhcmRdJylcbiAgICAuY2xvc2VzdCgnZGl2LmZvcm0tZ3JvdXAnKVxuICAgIC5iZWZvcmUoXG4gICAgICAnPGgyIGNsYXNzPVwic2V0dGluZy1oZWFkZXJcIj4nICtcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRUSU5HUy5UaXRsZUNoYXRDYXJkcycpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ2lucHV0W25hbWU9Q29DN1xcXFwuZW5hYmxlU3RhdHVzSWNvbnNdJylcbiAgICAuY2xvc2VzdCgnZGl2LmZvcm0tZ3JvdXAnKVxuICAgIC5iZWZvcmUoXG4gICAgICAnPGgyIGNsYXNzPVwic2V0dGluZy1oZWFkZXJcIj4nICtcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRUSU5HUy5UaXRsZVNjZW5lJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5vdmVycmlkZUdhbWVBcnR3b3JrXScpXG4gICAgLmNsb3Nlc3QoJ2Rpdi5mb3JtLWdyb3VwJylcbiAgICAuYmVmb3JlKFxuICAgICAgJzxoMiBjbGFzcz1cInNldHRpbmctaGVhZGVyXCI+JyArXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVElOR1MuVGl0bGVHYW1lQXJ0d29yaycpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ2lucHV0W25hbWU9Q29DN1xcXFwuZGlzcGxheVBsYXllck5hbWVPblNoZWV0XScpXG4gICAgLmNsb3Nlc3QoJ2Rpdi5mb3JtLWdyb3VwJylcbiAgICAuYmVmb3JlKFxuICAgICAgJzxoMiBjbGFzcz1cInNldHRpbmctaGVhZGVyXCI+JyArXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVElOR1MuVGl0bGVTaGVldCcpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ2lucHV0W25hbWU9Q29DN1xcXFwuZGlzcmVnYXJkVXNlUGVyUm91bmRdJylcbiAgICAuY2xvc2VzdCgnZGl2LmZvcm0tZ3JvdXAnKVxuICAgIC5iZWZvcmUoXG4gICAgICAnPGgyIGNsYXNzPVwic2V0dGluZy1oZWFkZXJcIj4nICtcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRUSU5HUy5UaXRsZVdlYXBvbicpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ2lucHV0W25hbWU9Q29DN1xcXFwuc3luY0RpY2UzZF0nKVxuICAgIC5jbG9zZXN0KCdkaXYuZm9ybS1ncm91cCcpXG4gICAgLmJlZm9yZShcbiAgICAgICc8aDIgY2xhc3M9XCJzZXR0aW5nLWhlYWRlclwiPicgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFRJTkdTLlRpdGxlRGljZVNvTmljZScpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ2lucHV0W25hbWU9Q29DN1xcXFwuZGVidWdtb2RlXScpXG4gICAgLmNsb3Nlc3QoJ2Rpdi5mb3JtLWdyb3VwJylcbiAgICAuYmVmb3JlKFxuICAgICAgJzxoMiBjbGFzcz1cInNldHRpbmctaGVhZGVyXCI+JyArXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVElOR1MuVGl0bGVEZXZlbG9wZXJEZWJ1ZycpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgc3lzdGVtVGFiXG4gICAgLmZpbmQoJ3NlbGVjdFtuYW1lPUNvQzdcXFxcLmJvdXRPZk1hZG5lc3NTdW1tYXJ5VGFibGVdJylcbiAgICAuY2xvc2VzdCgnZGl2LmZvcm0tZ3JvdXAnKVxuICAgIC5iZWZvcmUoXG4gICAgICAnPGgyIGNsYXNzPVwic2V0dGluZy1oZWFkZXJcIj4nICtcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRUSU5HUy5UaXRsZVJvbGxUYWJsZScpICtcbiAgICAgICAgJzwvaDI+J1xuICAgIClcbiAgLy8gTU9WRUQgVE8gQ0hBU1NFIElORElWSURVQUwgU0VUVElOR1xuICAvLyBzeXN0ZW1UYWJcbiAgLy8gICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5jaGFzZVNob3dUb2tlbk1vdmVtZW50XScpXG4gIC8vICAgLmNsb3Nlc3QoJ2Rpdi5mb3JtLWdyb3VwJylcbiAgLy8gICAuYmVmb3JlKFxuICAvLyAgICAgJzxoMiBjbGFzcz1cInNldHRpbmctaGVhZGVyXCI+JyArXG4gIC8vICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVElOR1MuVGl0bGVDaGFzZVNldHRpbmdzJykgK1xuICAvLyAgICAgICAnPC9oMj4nXG4gIC8vICAgKVxufSlcblxuSG9va3Mub25jZSgnaW5pdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgZ2FtZS5Db0M3ID0ge1xuICAgIG1hY3Jvczoge1xuICAgICAgc2tpbGxDaGVjazogQ29DN1V0aWxpdGllcy5za2lsbENoZWNrTWFjcm8sXG4gICAgICB3ZWFwb25DaGVjazogQ29DN1V0aWxpdGllcy53ZWFwb25DaGVja01hY3JvLFxuICAgICAgY2hlY2s6IENvQzdVdGlsaXRpZXMuY2hlY2tNYWNyb1xuICAgIH0sXG4gICAgY2FyZHM6IHtcbiAgICAgIERhbWFnZUNhcmRcbiAgICB9LFxuICAgIGRldjoge1xuICAgICAgZGljZToge1xuICAgICAgICBhbHdheXNDcml0OiBmYWxzZSxcbiAgICAgICAgYWx3YXlzRnVtYmxlOiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgZXJhczogKGVyYSwgbmFtZSkgPT4ge1xuICAgICAgQ09DNy5lcmFzW2VyYV0gPSBuYW1lXG4gICAgfVxuICB9XG4gIENvbWJhdC5wcm90b3R5cGUucm9sbEluaXRpYXRpdmUgPSByb2xsSW5pdGlhdGl2ZVxufSlcblxuaW5pdEVDQyhDaGFzZU9ic3RhY2xlQ2FyZClcblxuSG9va3Mub24oJ3JlbmRlckNvbWJhdFRyYWNrZXInLCAoYXBwLCBodG1sLCBkYXRhKSA9PlxuICBDb0M3Q29tYmF0LnJlbmRlckNvbWJhdFRyYWNrZXIoYXBwLCBodG1sLCBkYXRhKVxuKVxuXG5EaWNlQm90Lmxpc3RlbigpXG5Db0M3SG9va3MubGlzdGVuKClcblxuSG9va3Mub25jZSgnc29ja2V0bGliLnJlYWR5JywgQ29DN1NvY2tldClcblxuSG9va3Mub25jZSgnc2V0dXAnLCBmdW5jdGlvbiAoKSB7XG4gIC8vIExvY2FsaXplIENPTkZJRyBvYmplY3RzIG9uY2UgdXAtZnJvbnRcbiAgY29uc3QgdG9Mb2NhbGl6ZSA9IFtcbiAgICAnc3BlbGxQcm9wZXJ0aWVzJyxcbiAgICAnYm9va1R5cGUnLFxuICAgICd0YWxlbnRUeXBlJyxcbiAgICAnb2NjdXBhdGlvblByb3BlcnRpZXMnLFxuICAgICdzdGF0dXNUeXBlJ1xuICBdXG5cbiAgZm9yIChjb25zdCBvIG9mIHRvTG9jYWxpemUpIHtcbiAgICBjb25zdCBsb2NhbGl6ZWQgPSBPYmplY3QuZW50cmllcyhDT0M3W29dKS5tYXAoZSA9PiB7XG4gICAgICByZXR1cm4gW2VbMF0sIGdhbWUuaTE4bi5sb2NhbGl6ZShlWzFdKV1cbiAgICB9KVxuICAgIENPQzdbb10gPSBsb2NhbGl6ZWQucmVkdWNlKChvYmosIGUpID0+IHtcbiAgICAgIG9ialtlWzBdXSA9IGVbMV1cbiAgICAgIHJldHVybiBvYmpcbiAgICB9LCB7fSlcbiAgfVxuXG4gIGxldCBlZmZlY3RJbmRleCA9IENPTkZJRy5zdGF0dXNFZmZlY3RzLmZpbmRJbmRleChcbiAgICB0ID0+IHQuaWQgPT09IENPQzcuc3RhdHVzLmRlYWRcbiAgKVxuICBpZiAoZWZmZWN0SW5kZXggIT09IC0xKSB7XG4gICAgQ09ORklHLnN0YXR1c0VmZmVjdHNbZWZmZWN0SW5kZXhdLmljb24gPVxuICAgICAgJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvdG9tYnN0b25lLnN2ZydcbiAgfVxuICBlZmZlY3RJbmRleCA9IENPTkZJRy5zdGF0dXNFZmZlY3RzLmZpbmRJbmRleChcbiAgICB0ID0+IHQuaWQgPT09IENPQzcuc3RhdHVzLnVuY29uc2Npb3VzXG4gIClcbiAgaWYgKGVmZmVjdEluZGV4ICE9PSAtMSkge1xuICAgIENPTkZJRy5zdGF0dXNFZmZlY3RzW2VmZmVjdEluZGV4XS5pY29uID1cbiAgICAgICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zL2tub2NrZWQtb3V0LXN0YXJzLnN2ZydcbiAgfVxuICAvLyBGb3VuZHJ5VlRUIHYxMFxuICBjb25zdCBlZmZlY3ROYW1lS2V5ID0gKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzExJykgPyAnbGFiZWwnIDogJ25hbWUnKVxuICBDT05GSUcuc3RhdHVzRWZmZWN0cy51bnNoaWZ0KFxuICAgIHtcbiAgICAgIGlkOiBDT0M3LnN0YXR1cy50ZW1wb0luc2FuZSxcbiAgICAgIFtlZmZlY3ROYW1lS2V5XTogJ0NvQzcuQm91dE9mTWFkbmVzc05hbWUnLFxuICAgICAgaWNvbjogJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvaGFuZ2luZy1zcGlkZXIuc3ZnJ1xuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IENPQzcuc3RhdHVzLmluZGVmSW5zYW5lLFxuICAgICAgW2VmZmVjdE5hbWVLZXldOiAnQ29DNy5JbnNhbml0eU5hbWUnLFxuICAgICAgaWNvbjogJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvdGVudGFjbGVzLXNrdWxsLnN2ZydcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiBDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kcyxcbiAgICAgIFtlZmZlY3ROYW1lS2V5XTogJ0NvQzcuQ3JpdGljYWxXb3VuZHMnLFxuICAgICAgaWNvbjogJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvYXJtLXNsaW5nLnN2ZydcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiBDT0M3LnN0YXR1cy5keWluZyxcbiAgICAgIFtlZmZlY3ROYW1lS2V5XTogJ0NvQzcuRHlpbmcnLFxuICAgICAgaWNvbjogJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvaGVhcnQtYmVhdHMuc3ZnJ1xuICAgIH1cbiAgKVxufSlcblxuSG9va3Mub24oJ2NyZWF0ZUFjdGl2ZUVmZmVjdCcsIChkYXRhLCBvcHRpb25zLCB1c2VySWQpID0+IHtcbiAgaWYgKGdhbWUudXNlcklkID09PSB1c2VySWQpIHtcbiAgICBjb25zdCBzdGF0dXNLZXkgPSBDb0M3QWN0aXZlRWZmZWN0LmdldFN0YXR1c0tleShkYXRhKVxuICAgIGlmIChzdGF0dXNLZXkpIHtcbiAgICAgIHN3aXRjaCAoc3RhdHVzS2V5KSB7XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuaW5kZWZJbnNhbmU6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMudW5jb25zY2lvdXM6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuY3JpdGljYWxXb3VuZHM6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuZHlpbmc6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMucHJvbmU6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuZGVhZDpcbiAgICAgICAgICBkYXRhLnBhcmVudC5zZXRDb25kaXRpb24oc3RhdHVzS2V5LCB7XG4gICAgICAgICAgICBmb3JjZVZhbHVlOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLnRlbXBvSW5zYW5lOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHJlYWxUaW1lID0gZGF0YS5mbGFncy5Db0M3Py5yZWFsVGltZVxuICAgICAgICAgICAgbGV0IGR1cmF0aW9uID0gbnVsbFxuICAgICAgICAgICAgaWYgKHJlYWxUaW1lID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbj8ucm91bmRzXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlYWxUaW1lID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb24/LnNlY29uZHNcbiAgICAgICAgICAgICAgaWYgKCFpc05hTihkdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyAzNjAwKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLnBhcmVudC5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudGVtcG9JbnNhbmUsIHtcbiAgICAgICAgICAgICAgZm9yY2VWYWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgcmVhbFRpbWUsXG4gICAgICAgICAgICAgIGR1cmF0aW9uXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuSG9va3Mub24oJ2RlbGV0ZUFjdGl2ZUVmZmVjdCcsIChkYXRhLCBvcHRpb25zLCB1c2VySWQpID0+IHtcbiAgaWYgKGdhbWUudXNlcklkID09PSB1c2VySWQpIHtcbiAgICBjb25zdCBzdGF0dXNLZXkgPSBDb0M3QWN0aXZlRWZmZWN0LmdldFN0YXR1c0tleShkYXRhKVxuICAgIGlmIChzdGF0dXNLZXkpIHtcbiAgICAgIHN3aXRjaCAoc3RhdHVzS2V5KSB7XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMudGVtcG9JbnNhbmU6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuaW5kZWZJbnNhbmU6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMudW5jb25zY2lvdXM6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuY3JpdGljYWxXb3VuZHM6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuZHlpbmc6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMucHJvbmU6XG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMuZGVhZDpcbiAgICAgICAgICBkYXRhLnBhcmVudC51bnNldENvbmRpdGlvbihzdGF0dXNLZXksIHtcbiAgICAgICAgICAgIGZvcmNlVmFsdWU6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuLy8gVGhpcyB3aWxsIGhpZGUgdGhlIGl0ZW0gY2FsbGVkICdfX0NvQzdJbnRlcm5hbEl0ZW1fXydcbi8vIFRoaXMgaXRlbSBpcyB1c2VkIGZvciBpbnRlcm5hbCBwdXJwb3NlcyBhbmQgc2hvdWxkIG5vdCBiZSBzZWVuIGJ5IGFueW9uZVxuSG9va3Mub24oJ2NoYW5nZVNpZGViYXJUYWInLCBkaXJlY3RvcnkgPT4ge1xuICBpZiAoZGlyZWN0b3J5IGluc3RhbmNlb2YgSXRlbURpcmVjdG9yeSkge1xuICAgIGNvbnN0IGl0ZW0gPSBnYW1lLml0ZW1zLmZpbmQoaSA9PiBpLm5hbWUgPT09ICdfX0NvQzdJbnRlcm5hbEl0ZW1fXycpXG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBkaXJlY3RvcnkuX2VsZW1lbnRcbiAgICAgIGNvbnN0IGl0ZW1FbGVtZW50ID0gaHRtbC5maW5kKGBbZGF0YS1kb2N1bWVudC1pZD0nJHtpdGVtLmlkfSddYClcbiAgICAgIGlmIChpdGVtRWxlbWVudCkgaXRlbUVsZW1lbnRbMF0uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIH1cbiAgfVxufSlcblxuSG9va3Mub24oJ2hvdGJhckRyb3AnLCAoYmFyLCBkYXRhLCBzbG90KSA9PiB7XG4gIHJldHVybiBDb0M3VXRpbGl0aWVzLmNyZWF0ZU1hY3JvKGJhciwgZGF0YSwgc2xvdClcbn0pXG5cbkhvb2tzLm9uKCdyZW5kZXJDaGF0TG9nJywgKGFwcCwgaHRtbCwgZGF0YSkgPT5cbiAgQ29DN0NoYXQuY2hhdExpc3RlbmVycyhhcHAsIGh0bWwsIGRhdGEpXG4pXG5Ib29rcy5vbigndXBkYXRlQ2hhdE1lc3NhZ2UnLCAoY2hhdE1lc3NhZ2UsIGNoYXREYXRhLCBkaWZmLCBzcGVha2VyKSA9PlxuICBDb0M3Q2hhdC5vblVwZGF0ZUNoYXRNZXNzYWdlKGNoYXRNZXNzYWdlLCBjaGF0RGF0YSwgZGlmZiwgc3BlYWtlcilcbilcblxuSG9va3Mub24oJ3JlYWR5JywgYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBVcGRhdGVyLmNoZWNrRm9yVXBkYXRlKClcblxuICAvLyBnYW1lLkNvQzcubWVudXMgPSBuZXcgQ29DN01lbnUoKTtcblxuICBhY3RpdmF0ZUdsb2JhbExpc3RlbmVyKClcblxuICAvLyBzZXRHbG9iYWxDc3NWYXIoKVxuXG4gIGdhbWUuQ29DNy5za2lsbExpc3QgPSBhd2FpdCBnYW1lLnBhY2tzLmdldCgnQ29DNy5za2lsbHMnKT8uZ2V0RG9jdW1lbnRzKClcblxuICBnYW1lLnNvY2tldC5vbignc3lzdGVtLkNvQzcnLCBhc3luYyBkYXRhID0+IHtcbiAgICBDb0M3U3lzdGVtU29ja2V0LmNhbGxTb2NrZXQoZGF0YSlcbiAgfSlcblxuICAvLyBcIlNFVFRJTkdTLkJvdXRPZk1hZG5lc3NQaG9iaWFzSW5kZXhcIjogXCJQaG9iaWFzIGluZGV4XCIsXG4gIC8vIFwiU0VUVElOR1MuQm91dE9mTWFkbmVzc1Bob2JpYXNJbmRleEhpbnRcIjogXCJUaGUgaW5kZXggKHJvbGwgcmVzdWx0KSB0aGF0IHdpbGwgdHJpZ2dlciBhIHJvbGwgaW4gdGhlIHBob2JpYXMgdGFibGVcIixcbiAgLy8gXCJTRVRUSU5HUy5Cb3V0T2ZNYWRuZXNzTWFuaWFzSW5kZXhcIjogXCJNYW5pYXMgaW5kZXhcIixcbiAgLy8gXCJTRVRUSU5HUy5Cb3V0T2ZNYWRuZXNzTWFuaWFzSW5kZXhIaW50XCI6IFwiVGhlIGluZGV4IChyb2xsIHJlc3VsdCkgdGhhdCB3aWxsIHRyaWdnZXIgYSByb2xsIGluIHRoZSBtYW5pYXMgdGFibGVcIixcbiAgLy8gXCJTRVRUSU5HUy5TYW1wbGVQaG9iaWFzVGFibGVcIjogXCJTYW1wbGUgcGhvYmlhcyB0YWJsZVwiLFxuICAvLyBcIlNFVFRJTkdTLlNhbXBsZU1hbmlhc1RhYmxlXCI6IFwiU2FtcGxlIE1hbmlhcyB0YWJsZVwiLFxuXG4gIGZ1bmN0aW9uIF90YWJsZVNldHRpbmdzQ2hhbmdlZCAodGFibGUsIGlkKSB7XG4gICAgaWYgKGlkID09PSAnbm9uZScpIGdhbWUuQ29DNy50YWJsZXNbdGFibGVdID0gbnVsbFxuICAgIGVsc2UgZ2FtZS5Db0M3LnRhYmxlc1t0YWJsZV0gPSBnYW1lLnRhYmxlcy5nZXQoaWQpXG4gIH1cblxuICAvLyBmdW5jdGlvbiBfdGFibGVJbmRleENoYW5nZWQoIHRhYmxlLCBpbmRleCl7XG4gIC8vICBnYW1lLkNvQzcudGFibGVzW3RhYmxlXT1pbmRleDtcbiAgLy8gfVxuXG4gIGNvbnN0IHRhYmxlQ2hvaWNlID0geyBub25lOiAnU0VUVElOR1MuTGV0S2VlcGVyRGVjaWRlJyB9XG4gIGZvciAoY29uc3QgdCBvZiBnYW1lLnRhYmxlcykge1xuICAgIHRhYmxlQ2hvaWNlW3QuX2lkXSA9IHQubmFtZVxuICB9XG5cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdib3V0T2ZNYWRuZXNzU3VtbWFyeVRhYmxlJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5Cb3V0T2ZNYWRuZXNzU3VtbWFyeVRhYmxlJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ25vbmUnLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjaG9pY2VzOiB0YWJsZUNob2ljZSxcbiAgICBvbkNoYW5nZTogaWQgPT4gX3RhYmxlU2V0dGluZ3NDaGFuZ2VkKCdib3V0T2ZNYWRuZXNzX1N1bW1hcnknLCBpZClcbiAgfSlcblxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2JvdXRPZk1hZG5lc3NSZWFsVGltZVRhYmxlJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5Cb3V0T2ZNYWRuZXNzUmVhbFRpbWVUYWJsZScsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6ICdub25lJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczogdGFibGVDaG9pY2UsXG4gICAgb25DaGFuZ2U6IGlkID0+IF90YWJsZVNldHRpbmdzQ2hhbmdlZCgnYm91dE9mTWFkbmVzc19SZWFsVGltZScsIGlkKVxuICB9KVxuXG4gIC8vIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc1Bob2JpYXNJbmRleCcse1xuICAvLyAgbmFtZTogJ1NFVFRJTkdTLkJvdXRPZk1hZG5lc3NQaG9iaWFzSW5kZXgnLFxuICAvLyAgaGludDogJ1NFVFRJTkdTLkJvdXRPZk1hZG5lc3NQaG9iaWFzSW5kZXhIaW50JyxcbiAgLy8gIHNjb3BlOiAnd29ybGQnLFxuICAvLyAgY29uZmlnOiB0cnVlLFxuICAvLyAgZGVmYXVsdDogOSxcbiAgLy8gIHR5cGU6IE51bWJlcixcbiAgLy8gIG9uQ2hhbmdlOiAgaWQgPT4gX3RhYmxlSW5kZXhDaGFuZ2VkKCAncGhvYmlhc0luZGV4JywgaWQpXG4gIC8vIH0pO1xuXG4gIC8vIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc01hbmlhc0luZGV4Jyx7XG4gIC8vICBuYW1lOiAnU0VUVElOR1MuQm91dE9mTWFkbmVzc01hbmlhc0luZGV4JyxcbiAgLy8gIGhpbnQ6ICdTRVRUSU5HUy5Cb3V0T2ZNYWRuZXNzTWFuaWFzSW5kZXhIaW50JyxcbiAgLy8gIHNjb3BlOiAnd29ybGQnLFxuICAvLyAgY29uZmlnOiB0cnVlLFxuICAvLyAgZGVmYXVsdDogMTAsXG4gIC8vICB0eXBlOiBOdW1iZXIsXG4gIC8vICBvbkNoYW5nZTogIGlkID0+IF90YWJsZUluZGV4Q2hhbmdlZCggJ21hbmlhc0luZGV4JywgaWQpXG4gIC8vIH0pO1xuXG4gIC8vIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc2FtcGxlUGhvYmlhc1RhYmxlJyx7XG4gIC8vICBuYW1lOiAnU0VUVElOR1MuU2FtcGxlUGhvYmlhc1RhYmxlJyxcbiAgLy8gIHNjb3BlOiAnd29ybGQnLFxuICAvLyAgY29uZmlnOiB0cnVlLFxuICAvLyAgZGVmYXVsdDogJ25vbmUnLFxuICAvLyAgdHlwZTogU3RyaW5nLFxuICAvLyAgY2hvaWNlczogdGFibGVDaG9pY2UsXG4gIC8vICBvbkNoYW5nZTogIGlkID0+IF90YWJsZVNldHRpbmdzQ2hhbmdlZCggJ3Bob2JpYXMnLCBpZClcbiAgLy8gfSk7XG5cbiAgLy8gZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdzYW1wbGVNYW5pYXNUYWJsZScse1xuICAvLyAgbmFtZTogJ1NFVFRJTkdTLlNhbXBsZU1hbmlhc1RhYmxlJyxcbiAgLy8gIHNjb3BlOiAnd29ybGQnLFxuICAvLyAgY29uZmlnOiB0cnVlLFxuICAvLyAgZGVmYXVsdDogJ25vbmUnLFxuICAvLyAgdHlwZTogU3RyaW5nLFxuICAvLyAgY2hvaWNlczogdGFibGVDaG9pY2UsXG4gIC8vICBvbkNoYW5nZTogIGlkID0+IF90YWJsZVNldHRpbmdzQ2hhbmdlZCggJ21hbmlhcycsIGlkKVxuICAvLyB9KTtcblxuICBnYW1lLkNvQzcudGFibGVzID0ge1xuICAgIGJvdXRPZk1hZG5lc3NfU3VtbWFyeTpcbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2JvdXRPZk1hZG5lc3NTdW1tYXJ5VGFibGUnKSA9PT0gJ25vbmUnXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IGdhbWUudGFibGVzLmdldChcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdib3V0T2ZNYWRuZXNzU3VtbWFyeVRhYmxlJylcbiAgICAgICAgKSxcbiAgICBib3V0T2ZNYWRuZXNzX1JlYWxUaW1lOlxuICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc1JlYWxUaW1lVGFibGUnKSA9PT0gJ25vbmUnXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IGdhbWUudGFibGVzLmdldChcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdib3V0T2ZNYWRuZXNzUmVhbFRpbWVUYWJsZScpXG4gICAgICAgIClcbiAgICAvLyBtYW5pYXNJbmRleDogZ2Uuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2JvdXRPZk1hZG5lc3NQaG9iaWFzSW5kZXgnKSxcbiAgICAvLyBwaG9iaWFzSW5kZXg6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2JvdXRPZk1hZG5lc3NNYW5pYXNJbmRleCcpLFxuICAgIC8vIHBob2JpYXM6ICgnbm9uZScgPT0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2FtcGxlUGhvYmlhc1RhYmxlJykpP251bGw6Z2FtZS50YWJsZXMuZ2V0KGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3NhbXBsZVBob2JpYXNUYWJsZScpKSxcbiAgICAvLyBtYW5pYXM6ICgnbm9uZScgPT0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2FtcGxlTWFuaWFzVGFibGUnKSk/bnVsbDpnYW1lLnRhYmxlcy5nZXQoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2FtcGxlTWFuaWFzVGFibGUnKSksXG4gIH1cbn0pXG5cbi8vIEhvb2tzLm9uKCdwcmVDcmVhdGVBY3RvcicsIChjcmVhdGVEYXRhKSA9PiBDb0NBY3Rvci5pbml0VG9rZW4oIGNyZWF0ZURhdGEpKTtcblxuSG9va3Mub24oXG4gICdyZW5kZXJDb0M3Q2hhc2VTaGVldCcsXG4gIC8qKiBhc3luYyAqLyAoYXBwLCBodG1sLCBkYXRhKSA9PlxuICAgIC8qKiBhd2FpdCAqLyBDb0M3Q2hhc2VTaGVldC5zZXRTY3JvbGwoYXBwLCBodG1sLCBkYXRhKVxuKVxuXG5Ib29rcy5vbignY2xvc2VDb0M3Q2hhc2VTaGVldCcsIChhcHAsIGh0bWwpID0+XG4gIENvQzdDaGFzZVNoZWV0Lm9uQ2xvc2UoYXBwLCBodG1sKVxuKVxuXG4vLyBDYWxsZWQgb24gY2xvc2luZyBhIGNoYXJhY3RlciBzaGVldCB0byBsb2NrIGl0IG9uIGdldHRpbmcgaXQgdG8gZGlzcGxheSB2YWx1ZXNcbkhvb2tzLm9uKCdjbG9zZUFjdG9yU2hlZXQnLCBjaGFyYWN0ZXJTaGVldCA9PiBjaGFyYWN0ZXJTaGVldC5vbkNsb3NlU2hlZXQoKSlcbkhvb2tzLm9uKCdyZW5kZXJDb0M3Q3JlYXR1cmVTaGVldCcsIChhcHAsIGh0bWwsIGRhdGEpID0+XG4gIENvQzdDcmVhdHVyZVNoZWV0LmZvcmNlQXV0byhhcHAsIGh0bWwsIGRhdGEpXG4pXG5Ib29rcy5vbigncmVuZGVyQ29DN05QQ1NoZWV0JywgKGFwcCwgaHRtbCwgZGF0YSkgPT5cbiAgQ29DN05QQ1NoZWV0LmZvcmNlQXV0byhhcHAsIGh0bWwsIGRhdGEpXG4pXG4vLyBIb29rcy5vbigndXBkYXRlQWN0b3InLCAoYWN0b3IsIGRhdGFVcGRhdGUpID0+IENvQ0FjdG9yLnVwZGF0ZUFjdG9yKCBhY3RvciwgZGF0YVVwZGF0ZSkpO1xuLy8gSG9va3Mub24oJ3VwZGF0ZVRva2VuJywgKHNjZW5lLCB0b2tlbiwgZGF0YVVwZGF0ZSkgPT4gQ29DQWN0b3IudXBkYXRlVG9rZW4oIHNjZW5lLCB0b2tlbiwgZGF0YVVwZGF0ZSkpO1xuXG5Ib29rcy5vbignY2hhdE1lc3NhZ2UnLCBDb0M3VXRpbGl0aWVzLlBhcnNlQ2hhdEVudHJ5KVxuLy8gSG9va3Mub24oJ3ByZUNyZWF0ZVRva2VuJywgKCBzY2VuZSwgYWN0b3IsIG9wdGlvbnMsIGlkKSA9PiBDb0NBY3Rvci5wcmVDcmVhdGVUb2tlbiggc2NlbmUsIGFjdG9yLCBvcHRpb25zLCBpZCkpXG4vLyBIb29rcy5vbignY3JlYXRlVG9rZW4nLCAoIHNjZW5lLCBhY3Rvciwgb3B0aW9ucywgaWQpID0+IENvQ0FjdG9yLnByZUNyZWF0ZVRva2VuKCBzY2VuZSwgYWN0b3IsIG9wdGlvbnMsIGlkKSlcbi8vIEhvb2tzLm9uKFwicmVuZGVyQ2hhdExvZ1wiLCAoYXBwLCBodG1sLCBkYXRhKSA9PiBDb0M3SXRlbS5jaGF0TGlzdGVuZXJzKGh0bWwpKTtcblxuSG9va3Mub24oJ2dldFNjZW5lQ29udHJvbEJ1dHRvbnMnLCAoLyogY29udHJvbHMgKi8pID0+IHtcbiAgLy8gaWYoIGdhbWUudXNlci5pc0dNKXtcbiAgLy8gIGxldCBncm91cCA9IGNvbnRyb2xzLmZpbmQoYiA9PiBiLm5hbWUgPT0gJ3Rva2VuJyk7XG4gIC8vICBncm91cC50b29scy5wdXNoKHtcbiAgLy8gICAgdG9nZ2xlOiB0cnVlLFxuICAvLyAgICBpY29uIDogJ2ZhcyBmYS1hbmdsZS1kb3VibGUtdXAnLFxuICAvLyAgICBuYW1lOiAnZGV2cGhhc2UnLFxuICAvLyAgICBhY3RpdmU6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2RldmVsb3BtZW50RW5hYmxlZCcpLFxuICAvLyAgICB0aXRsZTogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGV2ZWxvcG1lbnRFbmFibGVkJyk/IGdhbWUuaTE4bi5sb2NhbGl6ZSggJ0NvQzcuRGV2UGhhc2VFbmFibGVkJyk6IGdhbWUuaTE4bi5sb2NhbGl6ZSggJ0NvQzcuRGV2UGhhc2VEaXNhYmxlZCcpLFxuICAvLyAgICBvbkNsaWNrIDphc3luYyAoKSA9PiBhd2FpdCBDb0M3VXRpbGl0aWVzLnRvZ2dsZURldlBoYXNlKClcbiAgLy8gIH0pO1xuICAvLyAgZ3JvdXAudG9vbHMucHVzaCh7XG4gIC8vICAgIHRvZ2dsZTogdHJ1ZSxcbiAgLy8gICAgaWNvbiA6ICdmYXMgZmFzIGZhLXVzZXItZWRpdCcsXG4gIC8vICAgIG5hbWU6ICdjaGFyY3JlYXRlJyxcbiAgLy8gICAgYWN0aXZlOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdjaGFyQ3JlYXRpb25FbmFibGVkJyksXG4gIC8vICAgIHRpdGxlOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdjaGFyQ3JlYXRpb25FbmFibGVkJyk/IGdhbWUuaTE4bi5sb2NhbGl6ZSggJ0NvQzcuQ2hhckNyZWF0aW9uRW5hYmxlZCcpOiBnYW1lLmkxOG4ubG9jYWxpemUoICdDb0M3LkNoYXJDcmVhdGlvbkRpc2FibGVkJyksXG4gIC8vICAgIG9uQ2xpY2sgOmFzeW5jICgpID0+IGF3YWl0IENvQzdVdGlsaXRpZXMudG9nZ2xlQ2hhckNyZWF0aW9uKClcbiAgLy8gIH0pO1xuICAvLyB9XG59KVxuXG4vLyBIb29rcy5vbigncmVuZGVyU2NlbmVDb250cm9scycsICgpID0+IENvQzdVdGlsaXRpZXMudXBkYXRlQ2hhclNoZWV0cygpKTtcbi8vIEhvb2tzLm9uKCdyZW5kZXJTY2VuZU5hdmlnYXRpb24nLCAoKSA9PiBDb0M3VXRpbGl0aWVzLnVwZGF0ZUNoYXJTaGVldHMoKSk7XG4vLyBTaGVldCBjc3Mgb3B0aW9uc1xuLy8gSG9va3Mub24oJ3JlbmRlckNvQzdDaGFyYWN0ZXJTaGVldCcsIENvQzdDaGFyYWN0ZXJTaGVldC5yZW5kZXJTaGVldCk7XG5Ib29rcy5vbigncmVuZGVyQWN0b3JTaGVldCcsIENvQzdDaGFyYWN0ZXJTaGVldC5yZW5kZXJTaGVldClcbkhvb2tzLm9uKCdyZW5kZXJJdGVtU2hlZXQnLCBDb0M3Q2hhcmFjdGVyU2hlZXQucmVuZGVyU2hlZXQpXG5cbkhvb2tzLm9uKCdnZXRTY2VuZUNvbnRyb2xCdXR0b25zJywgQ29DN01lbnUuZ2V0QnV0dG9ucylcbkhvb2tzLm9uKCdyZW5kZXJTY2VuZUNvbnRyb2xzJywgQ29DN01lbnUucmVuZGVyQ29udHJvbHMpXG5cbkhvb2tzLm9uKCdkcm9wQ2FudmFzRGF0YScsIENvQzdDYW52YXMub25Ecm9wU29tZXRoaW5nKVxuXG5Ib29rcy5vbignZHJvcEFjdG9yU2hlZXREYXRhJywgRHJvcEFjdG9yU2hlZXREYXRhKVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUdsb2JhbExpc3RlbmVyICgpIHtcbiAgY29uc3QgYm9keSA9ICQoJ2JvZHknKVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIENvQzdDb250ZXh0TWVudS5jbG9zZUFsbClcbiAgYm9keS5vbignY2xpY2snLCAnYS5jb2M3LWlubGluZS1jaGVjaycsIENvQzdDaGVjay5fb25DbGlja0lubGluZVJvbGwpXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIF9vbkxlZnRDbGljaylcbn1cblxuZnVuY3Rpb24gX29uTGVmdENsaWNrIChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc2hpZnRLZXlcbn1cblxuQ09ORklHLnVpLnNldHRpbmdzID0gQ29DN1NldHRpbmdzRGlyZWN0b3J5XG5DT05GSUcudWkuY29tcGVuZGl1bSA9IENvQzdDb21wZW5kaXVtRGlyZWN0b3J5XG5DT05GSUcudWkuYWN0b3JzID0gQ29DN0FjdG9yRGlyZWN0b3J5XG4iLCIvKiBnbG9iYWwgQ2hhdE1lc3NhZ2UsIGdhbWUsIEhvb2tzLCBSb2xsLCB1aSAqL1xuXG4vKipcbiAqQ2FsbG9mQ3RodWxodSg3dGhFZC4pIERlZmluZSB5b3VyIG93biBjb21tYW5kc1xuICpIZXJlLCB3ZSByZWNlaXZlIHRoZSBjaGF0IE1lc3NhZ2VzIGFuZCBkZXRlcm1pbmUgZWFjaCBjb21tYW5kLlxuICpbL0NDXURlZmluZSBhIGNvbW1hbmQgdG8ganVkZ2UgYSBub3JtYWwgZGljZS5cbiAqWy9DQlJdIENvbW1hbmQgdG8gZGVmaW5lIHRoZSBkZWNpc2lvbiBvbiBjb21iaW5hdGlvbiByb2xscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uKCdjaGF0TWVzc2FnZScsIChodG1sLCBjb250ZW50KSA9PiB7XG4gICAgLy8gSSdtIGN1cnJlbnRseSB1c2luZyBpdCBmb3IgdGVzdGluZyBib251cyBkaWNlLlxuICAgIGlmIChjb250ZW50Lm1hdGNoKC9eXFwvKGNicnxjYykvaSkpIHtcbiAgICAgIC8vIEV4dHJhY3RpbmcgbnVtYmVycyBmcm9tIGNvbWJpbmF0aW9uIHJvbGxzXG4gICAgICBjb25zdCBjb21tYW5kcyA9IGNvbnRlbnQubWF0Y2goLyhcXGQrKS9nKVxuICAgICAgaWYgKGNvbW1hbmRzKSB7XG4gICAgICAgIG5ldyBSb2xsKCcxZDEwMCcpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KS50aGVuKHIgPT4ge1xuICAgICAgICAgIGNvbnN0IHMgPSByLnJlc3VsdFxuICAgICAgICAgIGNvbnN0IHJlcyA9IGNvbW1hbmRzXG4gICAgICAgICAgICAubWFwKG0gPT4ge1xuICAgICAgICAgICAgICBsZXQgcmVzID0gJydcbiAgICAgICAgICAgICAgaWYgKHMgPD0gMSkgcmVzID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsU3VjY2VzcycpXG4gICAgICAgICAgICAgIGVsc2UgaWYgKHMgPj0gMTAwKSByZXMgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRnVtYmxlJylcbiAgICAgICAgICAgICAgZWxzZSBpZiAocyA8PSBtIC8gNSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FeHRyZW1lU3VjY2VzcycpXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocyA8PSBtIC8gMikge1xuICAgICAgICAgICAgICAgIHJlcyA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXJkU3VjY2VzcycpXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocyA8PSBtKSByZXMgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUmVndWxhclN1Y2Nlc3MnKVxuICAgICAgICAgICAgICBlbHNlIGlmIChzID49IDk2KSB7XG4gICAgICAgICAgICAgICAgaWYgKG0gPCA1MCkgcmVzID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkZ1bWJsZScpXG4gICAgICAgICAgICAgICAgZWxzZSByZXMgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRmFpbHVyZScpXG4gICAgICAgICAgICAgIH0gZWxzZSByZXMgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRmFpbHVyZScpXG4gICAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgZmlyc3QgcmVzdWx0cy5cbiAgICAgICAgICAgICAgcmVzICs9ICcgJyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5WYWx1ZScpICsgJyAnICsgbVxuICAgICAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJyAvICcpXG4gICAgICAgICAgci50b01lc3NhZ2Uoe1xuICAgICAgICAgICAgc3BlYWtlcjogQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpLFxuICAgICAgICAgICAgZmxhdm9yOiByZXNcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignSW5jb3JyZWN0IHVzYWdlIG9mIGNvbW1hbmQnKVxuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHRvIGF2b2lkIGVycm9ycyBpbiB0aGUgY29tbWFuZC5cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBnYW1lICovXG5leHBvcnQgZnVuY3Rpb24gRHJvcEFjdG9yU2hlZXREYXRhIChhY3Rvciwgc2hlZXQsIGRhdGEpIHtcbiAgaWYgKGRhdGEudHlwZSA9PT0gJ0l0ZW0nICYmIGRhdGEuYWN0b3JJZCkge1xuICAgIGlmIChhY3Rvci5kYXRhLl9pZCA9PT0gZGF0YS5hY3RvcklkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IGFjdG9yRnJvbSA9IG51bGxcbiAgICBpZiAoZGF0YS5zY2VuZUlkICYmIGRhdGEudG9rZW5JZCkge1xuICAgICAgYWN0b3JGcm9tID0gZ2FtZS5zY2VuZXMuZ2V0KGRhdGEuc2NlbmVJZCkudG9rZW5zLmdldChkYXRhLnRva2VuSWQpLmFjdG9yXG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdG9yRnJvbSA9IGdhbWUuYWN0b3JzLmdldChkYXRhLmFjdG9ySWQpXG4gICAgfVxuICAgIHN3aXRjaCAoYWN0b3IuZGF0YS50eXBlKSB7XG4gICAgICBjYXNlICdjaGFyYWN0ZXInOlxuICAgICAgY2FzZSAnbnBjJzpcbiAgICAgIGNhc2UgJ2NyZWF0dXJlJzpcbiAgICAgICAgaWYgKCFbJ2NoYXNlJ10uaW5jbHVkZXMoZGF0YS5kYXRhLnR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3ZlaGljbGUnOlxuICAgICAgICByZXR1cm5cbiAgICAgIGNhc2UgJ2NvbnRhaW5lcic6XG4gICAgICAgIGlmICghWydib29rJywgJ2l0ZW0nLCAnc3BlbGwnLCAnd2VhcG9uJ10uaW5jbHVkZXMoZGF0YS5kYXRhLnR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFjdG9yRnJvbSkge1xuICAgICAgYWN0b3JGcm9tLmRlbGV0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW2RhdGEuZGF0YS5faWRdKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIkNPQzciLCJzdGFuZGFyZCIsIm1vZGVybiIsIm1vZGVyblB1bHAiLCJwdWxwIiwiZG93bkRhcmtlclRyYWlscyIsImRvd25EYXJrZXJUcmFpbHNQdWxwIiwiZGFya0FnZXMiLCJkYXJrQWdlc1B1bHAiLCJyZWdlbmN5IiwicmVnZW5jeVB1bHAiLCJnYXNMaWdodCIsImludmljdHVzIiwiZGVjaW1hbExlZnQiLCJkZWNpbWFsUmlnaHQiLCJpbnRlZ2VyTGVmdCIsImludGVnZXJSaWdodCIsImxzZCIsInJvbWFuIiwibm9uZSIsImFzc2VzIiwic2VzdGVydGlpIiwicXVpbmFyaWkiLCJkZW5hcmlpIiwiZCIsInMiLCJ2YWx1ZSIsIm11bHRpcGxpZXIiLCJuYW1lIiwiZmlsdGVyIiwic3RyIiwiY29uIiwic2l6IiwiZGV4IiwiYXBwIiwiaW50IiwicG93IiwiZWR1Iiwibm9hZGp1c3RtZW50cyIsIm5veHBnYWluIiwic3BlY2lhbCIsInJhcml0eSIsInB1c2giLCJjb21iYXQiLCJmaWdodGluZyIsImZpcmVhcm0iLCJyZXF1aXJlc25hbWUiLCJrZWVwYmFzZXZhbHVlIiwicGlja25hbWVvbmx5Iiwib25seW9uZSIsIm1lbGVlIiwicm5nZCIsIm1udnIiLCJ0aHJvd24iLCJzaG90Z3VuIiwiZGJybCIsImltcGwiLCJicnN0IiwiYXV0byIsImFoZGIiLCJhZGRiIiwic2xudCIsInNwY2wiLCJtb250IiwiYmxzdCIsInN0dW4iLCJyYXJlIiwiYnVybiIsImNhbGwiLCJkaXNtaXNzIiwiY29udGFjdCIsInN1bW1vbiIsImJpbmQiLCJlbmNoYW50bWVudCIsImdhdGUiLCJteXRob3MiLCJvY2N1bHQiLCJvdGhlciIsInBoeXNpY2FsIiwibWVudGFsIiwibWlzY2VsbGFuZW91cyIsImJhc2ljIiwiaW5zYW5lIiwibWFuaWEiLCJwaG9iaWEiLCJjbGFzc2ljIiwibG92ZWNyYWZ0aWFuIiwiZm9ybXVsYSIsImFjdG9yIiwiYWN0b3JzaGVldCIsInN0YXR1cyIsInRlbXBvSW5zYW5lIiwiaW5kZWZJbnNhbmUiLCJ1bmNvbnNjaW91cyIsImNyaXRpY2FsV291bmRzIiwiZHlpbmciLCJwcm9uZSIsImRlYWQiLCJuZXdCb29rTmFtZSIsIm5ld1NraWxsTmFtZSIsIm5ld1NwZWxsTmFtZSIsIm5ld0l0ZW1OYW1lIiwibmV3V2VhcG9uTmFtZSIsImNyZWF0dXJlRmlnaHRpbmdTa2lsbCIsImZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lIiwiZmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSIsImNvbWJhdENhcmRzIiwiZmlnaHRCYWNrIiwiZG9kZ2UiLCJtYW5ldXZlciIsIm5vUmVzcG9uc2UiLCJDb0M3QWN0aXZlRWZmZWN0IiwiQWN0aXZlRWZmZWN0IiwiYXBwbHkiLCJjaGFuZ2UiLCJrZXkiLCJpc05hTiIsInN5c3RlbSIsImF0dHJpYnMiLCJhcm1vciIsIk51bWJlciIsImRiIiwiU3RyaW5nIiwic3VwZXIiLCJvbk1hbmFnZUFjdGl2ZUVmZmVjdCIsImV2ZW50Iiwib3duZXIiLCJwcmV2ZW50RGVmYXVsdCIsImEiLCJjdXJyZW50VGFyZ2V0IiwibGkiLCJjbG9zZXN0IiwiZWZmZWN0IiwiZGF0YXNldCIsImVmZmVjdElkIiwiZWZmZWN0cyIsImdldCIsImFjdGlvbiIsImNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzIiwibGFiZWwiLCJnYW1lIiwiaTE4biIsImxvY2FsaXplIiwiaWNvbiIsIm9yaWdpbiIsInV1aWQiLCJlZmZlY3RUeXBlIiwidW5kZWZpbmVkIiwiZGlzYWJsZWQiLCJzaGVldCIsInJlbmRlciIsImRlbGV0ZSIsInVwZGF0ZSIsIl9wcmVwYXJlRHVyYXRpb24iLCJkdXJhdGlvbiIsInR5cGUiLCJzZWNvbmRzIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2xpY2UiLCJmaWx0ZXJBY3RpdmVFZmZlY3RzIiwiY29uZGl0aW9uTmFtZSIsImZvdW5kcnkiLCJ1dGlscyIsImlzTmV3ZXJWZXJzaW9uIiwidmVyc2lvbiIsInN0YXR1c2VzIiwiaGFzIiwiZmxhZ3MiLCJjb3JlIiwic3RhdHVzSWQiLCJnZXRTdGF0dXNLZXkiLCJvcHRpb25zIiwic2l6ZSIsInZhbHVlcyIsImdldEZsYWciLCJmaW5kIiwidiIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiaXNTdGF0dXMiLCJ0aGlzIiwicHJlcGFyZUFjdGl2ZUVmZmVjdENhdGVnb3JpZXMiLCJjYXRlZ29yaWVzIiwidGVtcG9yYXJ5IiwicGFzc2l2ZSIsImluYWN0aXZlIiwic3VwcHJlc3NlZCIsImluZm8iLCJlIiwiaXNTdXBwcmVzc2VkIiwiaXNUZW1wb3JhcnkiLCJoaWRkZW4iLCJsZW5ndGgiLCJwcmVwYXJlTlBDQWN0aXZlRWZmZWN0Q2F0ZWdvcmllcyIsImNvdW50IiwiYWN0aXZlIiwiX2dldFNvdXJjZU5hbWUiLCJleHBlbmRlZCIsIkNvQzdEaWNlIiwicm9sbCIsIm1vZGlmIiwicm9sbE1vZGUiLCJoaWRlRGljZSIsImFsdGVybmF0aXZlRGljZSIsIm1vZHVsZXMiLCJzZXR0aW5ncyIsIkNvQzciLCJkZXYiLCJkaWNlIiwiYWx3YXlzQ3JpdCIsIlJvbGwiLCJmcm9tRGF0YSIsImNyaXQwMSIsImFsd2F5c0Z1bWJsZSIsImZ1bWJsZTk5IiwicmVwZWF0IiwiTWF0aCIsImFicyIsImFzeW5jIiwicmVzdWx0IiwidW5pdCIsInRvdGFsIiwicmVzdWx0cyIsInRlbnMiLCJDT05GSUciLCJEaWNlIiwidGVybXMiLCJ0IiwiaW5jbHVkZXMiLCJtYXgiLCJtaW4iLCJzaG93Um9sbERpY2UzZCIsInN5bmNEaWNlIiwiY2hhdERhdGEiLCJ3aGlzcGVyIiwiYmxpbmQiLCJDaGF0TWVzc2FnZSIsImFwcGx5Um9sbE1vZGUiLCJkaWNlM2QiLCJzaG93Rm9yUm9sbCIsInVzZXIiLCJjb21iaW5lZFJvbGwiLCJwb29sIiwia2V5cyIsIm1hcCIsInBhcnNlSW50IiwicGVuYWx0eURpY2UiLCJib251c0RpY2UiLCJoYXNEU04iLCJqb2luIiwiZ3JvdXBzIiwiYmFzZURpZSIsImJhc2VTZXQiLCJvdXRwdXQiLCJtb2RpZmllciIsIm9mZnNldCIsInN0YXRpYyIsImNsYXNzIiwiZXZhbHVhdGVkIiwibnVtYmVyIiwiZmFjZXMiLCJtb2RpZmllcnMiLCJvcGVyYXRvciIsIkNvQzdJdGVtIiwiSXRlbSIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImNvbnRleHQiLCJkb2N1bWVudENsYXNzZXMiLCJleHRlbmRlZCIsImltZyIsIl9jcmVhdGVEb2N1bWVudExpbmsiLCJldmVudERhdGEiLCJtYXRjaCIsInJlbGF0aXZlVG8iLCJKb3VybmFsRW50cnlQYWdlIiwiZG9jdW1lbnRDbGFzcyIsIml0ZW0iLCJmcm9tVXVpZCIsImljb25MYW5ndWFnZSIsIm1hbGZ1bmN0aW9uIiwidG9nZ2xlUHJvcGVydHkiLCJwcm9wZXJ0eUlkIiwib3ZlcnJpZGUiLCJmaXJlYXJtcyIsImNoZWNrZWRQcm9wcyIsImVyYXMiLCJDb0NJREVkaXRvciIsImVyYVRvZ2dsZSIsInByb3BlcnRpZXMiLCJza2lsbE5hbWUiLCJwYXJ0cyIsImdldE5hbWVQYXJ0c1NwZWMiLCJzcGVjaWFsaXphdGlvbiIsIm1lbGVlV2VhcG9uIiwicHJvcE5hbWUiLCJwcm9wVmFsdWUiLCJ0aGVuIiwiaGFzUHJvcGVydHkiLCJpc0luY2x1ZGVkSW5TZXQiLCJzaG9ydE5hbWUiLCJ1cGRhdGVSb2xsIiwic3BlY05hbWVSZWdleCIsIlJlZ0V4cCIsIkNvQzdVdGlsaXRpZXMiLCJxdW90ZVJlZ0V4cCIsImdldE5hbWVXaXRob3V0U3BlYyIsImlzQW55U3BlYyIsInRvTG93ZXJDYXNlIiwic2tpbGwiLCJndWVzc05hbWVQYXJ0cyIsImNoZWNrU2tpbGxQcm9wZXJ0aWVzIiwic2V0IiwiaW5kZXhPZiIsImZsYWdGb3JEZXZlbG9wZW1lbnQiLCJpc0dNIiwidW5mbGFnRm9yRGV2ZWxvcGVtZW50IiwiZGV2ZWxvcGVtZW50RmxhZyIsImdldEl0ZW1GbGFnIiwidG9nZ2xlSXRlbUZsYWciLCJmbGFnTmFtZSIsImVyYXNlQWRqdXN0bWVudCIsImZsYWdWYWx1ZSIsInVpIiwibm90aWZpY2F0aW9ucyIsInNldEl0ZW1GbGFnIiwidW5zZXRJdGVtRmxhZyIsImxvY2tlZCIsInVzZXNBbHRlcm5hdGl2ZVNraWxsIiwibWF4VXNlc1BlclJvdW5kIiwibXVsdGlTaG90IiwidXNlc1BlclJvdW5kIiwic2luZ2xlU2hvdCIsIm5vcm1hbCIsInVzZXNQZXJSb3VuZFN0cmluZyIsImJ1cnN0IiwibXVsdGlwbGVTaG90cyIsImJhc2VSYW5nZSIsInJhbmdlIiwibG9uZ1JhbmdlIiwibG9uZyIsImV4dHJlbWVSYW5nZSIsImV4dHJlbWUiLCJza2lsbFByb3BlcnRpZXMiLCJlbnRyaWVzIiwiY2FsY3VsYXRlQmFzZSIsImJhc2UiLCJwYXJzZWQiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwiZ2V0UHJvcGVydHkiLCJmbG9vciIsImV2YWx1YXRlIiwibWF4aW1pemUiLCJlcnIiLCJfYmFzZSIsImFzeW5jQmFzZSIsImNvbnNvbGUiLCJwYXJlbnQiLCJnZXRCdWxsZXRMZWZ0IiwiYW1tbyIsInNldEJ1bGxldHMiLCJyZWxvYWQiLCJtYXhCdWxsZXQiLCJidWxsZXRzIiwiYWRkQnVsbGV0IiwibWF4QnVsbGV0cyIsInNob290QnVsbGV0cyIsIngiLCJtZXJnZU9wdGlvbmFsU2tpbGxzIiwic2tpbGxMaXN0IiwiY29uY2F0IiwicmVkdWNlIiwibmV3QXJyYXkiLCJzb3J0Iiwic29ydEJ5TmFtZUtleSIsIl9nZXRDaGF0Q2FyZEFjdG9yIiwiY2FyZCIsInRva2VuS2V5IiwidG9rZW5JZCIsInNjZW5lSWQiLCJzcGxpdCIsImFjdG9ycyIsInRva2VucyIsInNjZW5lIiwic2NlbmVzIiwidG9rZW5EYXRhIiwiZ2V0RW1iZWRkZWREb2N1bWVudCIsIlRva2VuIiwiYWN0b3JJZCIsImdldENoYXREYXRhIiwiaHRtbE9wdGlvbnMiLCJkdXBsaWNhdGUiLCJkZXNjcmlwdGlvbiIsImxhYmVscyIsIlRleHRFZGl0b3IiLCJlbnJpY2hIVE1MIiwicHJvcHMiLCJmbiIsInAiLCJfd2VhcG9uQ2hhdERhdGEiLCJ3ZWFwb25Qcm9wZXJ0aWVzIiwic2tpbGxMYWJlbCIsImZvdW5kIiwibWFpbiIsImlkIiwiaXRlbXMiLCJhbHRlcm5hdGl2IiwiY2FuQmVQdXNoZWQiLCJpbXBhbGUiLCJpc0RvZGdlIiwiY3JlYXRlSW5saW5lUm9sbCIsImNscyIsInRpdGxlIiwiZXNjYXBlIiwiSlNPTiIsInN0cmluZ2lmeSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImsiLCJpbm5lckhUTUwiLCJpc0N0cmxLZXkiLCJtZXRhS2V5IiwiY3RybEtleSIsImtleUNvZGUiLCJjaGF0SGVscGVyIiwiaHlwaGVuVG9DYW1lbENhc2UiLCJzdHJpbmciLCJyZXBsYWNlIiwidG9VcHBlckNhc2UiLCJjcmVhdGVNZXNzYWdlIiwibWVzc2FnZSIsIm1lc3NhZ2VEYXRhIiwiZmxhdm9yIiwic3BlYWtlciIsImdldFNwZWFrZXIiLCJDT05TVCIsIkNIQVRfTUVTU0FHRV9UWVBFUyIsIldISVNQRVIiLCJST0xMIiwiRElDRV9ST0xMX01PREVTIiwiU0VMRiIsImNvbnRlbnQiLCJjcmVhdGUiLCJtc2ciLCJjYW1lbENhc2VUb0h5cGhlbiIsImdldEFjdG9yRnJvbUtleSIsImlzRG9jdW1lbnRVdWlkIiwiaXNEb2N1bWVudFV1aWRQYWNrIiwiU2Zyb21VdWlkIiwidG9rZW4iLCJnZXRUb2tlbkZyb21LZXkiLCJnZXRTcGVha2VyRnJvbUtleSIsImFjdG9yS2V5IiwiYWxpYXMiLCJhdHRhY2hPYmplY3RUb0VsZW1lbnQiLCJvYmplY3QiLCJlbGVtZW50Iiwib2JqZWN0TmFtZSIsInByb3AiLCJnZXRPYmplY3RGcm9tRWxlbWVudCIsImRlc2VyaWFsaXplIiwib2JqIiwib2JqUHJvcCIsIm9iak5hbWUiLCJ0b1N0cmluZyIsInRva2VuRG9jIiwiZ2V0QWN0b3JUb2tlbiIsInByb3RvdHlwZVRva2VuIiwiZ2V0QWN0b3JJbWdGcm9tS2V5IiwidGV4dHVyZSIsInNyYyIsImdldERpc3RhbmNlIiwic3RhcnRUb2tlbiIsImVuZFRva2VuIiwiY2VudGVyIiwiZGlzdGFuY2UiLCJncmlkVW5pdCIsImNhbnZhcyIsImdyaWQiLCJ1bml0cyIsInJheSIsIlJheSIsInNlZ21lbnQiLCJtZWFzdXJlRGlzdGFuY2VzIiwiZ3JpZFNwYWNlcyIsImVsZXZhdGlvbiIsInNxcnQiLCJ3YXJuIiwidG9ZYXJkcyIsIkNvQzdSb2xsIiwiZ2V0RnJvbUNhcmQiLCJyb2xsRGl2IiwicXVlcnlTZWxlY3RvciIsInJlc3VsdFR5cGUiLCJzdWNjZXNzTGV2ZWwiLCJDb0M3Q2hlY2siLCJyZWd1bGFyIiwiZm9ybWF0IiwiaGFyZCIsImNyaXRpY2FsIiwiZnVtYmxlIiwiZmFpbHVyZSIsIml0ZW1JZCIsInNraWxsSWQiLCJzaG93RGljZVJvbGwiLCJkaWNlUmVzdWx0cyIsImRpZVJlc3VsdCIsImRpY2VzIiwiZGljZURhdGEiLCJzaG93IiwiZ2V0RnJvbUVsZW1lbnQiLCJoYXNCb251cyIsImRpY2VNb2RpZmllciIsImJvbnVzIiwiYm9udXNUeXBlIiwidGVuRGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkaWUiLCJzZWxlY3RlZCIsImlzTWF4IiwiaXNNaW4iLCJ1bml0RGllIiwiaW5jcmVhc2VTdWNjZXNzIiwiaXNsIiwibmV3U3VjY2VzTGV2ZWwiLCJsdWNrTmVlZGVkIiwibHVja05lZWRlZFR4dCIsImx1Y2tOZWVkZWRWYWx1ZSIsImdldEZyb21DaGVjayIsImNoZWNrIiwicm9sbFR5cGUiLCJzaWRlIiwicmVmTWVzc2FnZUlkIiwicmVmZXJlbmNlTWVzc2FnZUlkIiwiZGlmZmljdWx0eSIsImRpY2VNb2QiLCJyYXdWYWx1ZSIsImlzRnVtYmxlIiwiaXNDcml0aWNhbCIsImNoYXJhY3RlcmlzdGljIiwiaXNUb2tlbiIsImF0dGFjaENoZWNrVG9FbGVtZW50IiwiaHRtbEVsZW1lbnQiLCJhdHRhY2hUb0VsZW1lbnQiLCJDb0M3RGFtYWdlIiwiZ2V0TWFpbkRpZSIsImRhbWFnZVN0cmluZyIsImRhbWFnZSIsInJvbGxzIiwiciIsIkF2ZXJhZ2VQYXJlbnRoZXRpY2FsVGVybSIsIlBhcmVudGhldGljYWxUZXJtIiwiX2V2YWx1YXRlU3luYyIsIkF2ZXJhZ2VSb2xsIiwidGVybSIsIm1pbmltaXplIiwiZm9yRWFjaCIsIlJvbGxUZXJtIiwiRXJyb3IiLCJpc0ludGVybWVkaWF0ZSIsIl9kaWNlIiwiTnVtZXJpY1Rlcm0iLCJzaW1wbGlmeVRlcm1zIiwiX2V2YWx1YXRlZCIsIl90b3RhbCIsIl9ldmFsdWF0ZVRvdGFsIiwiX3NwbGl0UGFyZW50aGVzZXMiLCJfZm9ybXVsYSIsIl9zcGxpdEdyb3VwIiwib3BlblJlZ2V4cCIsIk9QRU5fUkVHRVhQIiwiY2xvc2VSZWdleHAiLCJDTE9TRV9SRUdFWFAiLCJvcGVuU3ltYm9sIiwiY2xvc2VTeW1ib2wiLCJvbkNsb3NlIiwiZ3JvdXAiLCJvcGVuIiwiZXhwcmVzc2lvbiIsImFyZ3MiLCJfc3BsaXRNYXRoQXJncyIsIk1hdGhUZXJtIiwiQ2hhdENhcmRBY3RvciIsImZhc3RGb3J3YXJkIiwiZGlzcGxheUFjdG9yT25DYXJkIiwiaXNCbGluZCIsIl9pc0JsaW5kIiwiX3JvbGxNb2RlIiwid2VhcG9uIiwidGFyZ2V0ZWRUb2tlbnMiLCJ0YXJnZXRzIiwidGFyZ2V0IiwidGFyZ2V0VG9rZW4iLCJ0YXJnZXRBY3RvciIsIl90YXJnZXRUb2tlbiIsIl90YXJnZXRLZXkiLCJwb3AiLCJfdGFyZ2V0QWN0b3IiLCJ0YXJnZXRLZXkiLCJoYXNUYXJnZXQiLCJza2lsbHMiLCJnZXRXZWFwb25Ta2lsbHMiLCJ0YXJnZXRJbWciLCJ0YXJnZXROYW1lIiwiYWN0b3JJbWciLCJzYXkiLCJzcGVha2VyRGF0YSIsImdldFdoaXNwZXJSZWNpcGllbnRzIiwicmVwbGFjZXIiLCJKU09OUm9sbERhdGEiLCJTYW5DaGVja0NhcmQiLCJzYW5EYXRhIiwiQm9vbGVhbiIsInNhblJlYXNvbiIsInNhbk1vZGlmaWVyIiwic2FuRGlmZmljdWx0eSIsInN0YXRlIiwiZGlmZmljdWx0eUxldmVsIiwic2FuTG9zc1NvdXJjZSIsImludm9sdW50YXJ5QWN0aW9uIiwic2FuUm9sbGVkIiwic2FuQ2hlY2siLCJpc0ZhaWx1cmUiLCJzYW5Mb3NzRm9ybXVsYSIsInNhbk1heCIsImZhaWxlZCIsInNhbk1pbiIsInBhc3NlZCIsInNhbkxvc3RUb1JlYXNvbiIsIm1heFBvc3NpYmxlU2FuTG9zcyIsIm1heExvc3NUb1NhblJlYXNvbiIsIm1heFNhbkxvc3MiLCJzYW5Mb3NzUmVhc29uRW5jb3VudGVyZWQiLCJmaXJzdEVuY291bnRlciIsIm15dGhvc0luc2FuaXR5RXhwZXJpZW5jZWQiLCJpc0FjdG9yTG9vc2luZ1NhbiIsImhhc1RlbXBvSW5zYW5lIiwiaW1tdW5lVG9DcmVhdHVyZSIsImJvdXREdXJhdGlvblRleHQiLCJib3V0RHVyYXRpb24iLCJib3V0UmVhbFRpbWUiLCJib3V0U3VtbWFyeSIsInlvdUdhaW5DdGh1bGh1TXl0aG9zU3RyaW5nIiwibXl0aG9zR2FpbiIsImFkdmFuY2VTdGF0ZSIsImtlZXBDcmVhdHVyZVNhbkRhdGEiLCJmaW5pc2giLCJhcHBseVNhbkxvc3MiLCJib3V0UmVzdWx0IiwiZW50ZXJCb3V0T2ZNYWRuZXNzIiwiYm91dE9mTWFkbmVzc1Jlc29sdmVkIiwiYm91dE9mTWFkbmVzc092ZXIiLCJ0cmlnZ2VySW5zYW5pdHkiLCJ1bnNldENvbmRpdGlvbiIsImN0aHVsaHVNeXRob3NBd2FyZGVkIiwiYW1vdW50R2FpbmVkIiwiZXhwZXJpZW5jZUZpcnN0TXl0aG9zSW5zYW5pdHkiLCJjdGh1bGh1TXl0aG9zU2tpbGwiLCJvbGRWYWx1ZSIsImFkanVzdG1lbnRzIiwiZXhwZXJpZW5jZSIsImJ5cGFzc1JvbGxTYW4iLCJpc0J5cGFzc2VkIiwiYXR0cmlidXRlIiwiX3BlcmZvcm0iLCJmb3JjZURTTiIsImludm9sdW50YXJ5QWN0aW9uUGVyZm9ybWVkIiwic2FuTG9zc1JvbGxlZCIsImlnbm9yZVNhbkNoZWNrIiwic2FuTG9zcyIsInJvbGxTYW4iLCJsaW1pdGVkTG9zc1RvQ3JlYXR1cmUiLCJpbW11bmVBbHJlYWR5SW5Cb3V0Iiwic2FuTG9zc0FwcGxpZWQiLCJpbnRSb2xsZWQiLCJpbnNhbml0eSIsInJvbGxTYW5Mb3NzIiwic2FuTG9zc1JvbGwiLCJsb29zZVNhbiIsImFjdG9yTG9zdFNhbiIsInNhbiIsInBlcm1hbmVudGx5SW5zYW5lIiwiaGFzSW5kZWZJbnNhbmUiLCJzaGFrZW4iLCJpbnNhbml0eVRhYmxlUm9sbGVkIiwiZGFpbHlTYW5Mb3NzIiwiZGFpbHlTYW5MaW1pdCIsInRlbXBvcmFyeUluc2FuZSIsImluZGVmaW5pdGVseUluc2FuZSIsIm1lbW9yeVJlcHJlc3NlZCIsInJvbGxJbnQiLCJpbnRDaGVjayIsImludERpZmZpY3VsdHkiLCJpbnRNb2RpZmllciIsImFscmVhZHlJbnNhbmUiLCJzZXRDb25kaXRpb24iLCJjbGVhclNhbkxvc3NSZWFzb24iLCJzZXRSZWFzb25TYW5Mb3NzIiwidXBkYXRlQ2hhdENhcmQiLCJfX2lubGluZVNhbkNoZWNrIiwiaW5saW5lQ2hlY2siLCJvdXRlckhUTUwiLCJfX2lubGluZVNhbkxvc3NSb2xsIiwiX19pbmxpbmVJbnRDaGVjayIsImh0bWwiLCJyZW5kZXJUZW1wbGF0ZSIsInRlbXBsYXRlIiwiaHRtbENhcmRFbGVtZW50IiwiJCIsInBhcnNlSFRNTCIsImNoYXRNZXNzYWdlIiwibWVzc2FnZXMiLCJtZXNzYWdlSWQiLCJjaGF0IiwidXBkYXRlTWVzc2FnZSIsImNoZWNrVGFyZ2V0cyIsImNoYXRDYXJkIiwiZ2V0RnJvbU1lc3NhZ2VJZCIsImh0bWxDYXJkIiwic2FuQ2hlY2tDYXJkRGF0YSIsInBhcnNlIiwidW5lc2NhcGUiLCJzYW5DaGVja0NhcmQiLCJhc3NpZ24iLCJDb0M3TGluayIsIkNIRUNLX1RZUEUiLCJDSEVDSyIsIlNBTkxPU1MiLCJJVEVNIiwiRUZGRUNUIiwiTElOS19UWVBFIiwiQ0hBUkFDVEVSSVNUSUMiLCJBVFRSSUJVVEUiLCJTS0lMTCIsImluaXQiLCJib2R5Iiwib24iLCJfb25MaW5rQ2xpY2siLCJfb25EcmFnQ29DN0xpbmsiLCJlbnJpY2hlcnMiLCJwYXR0ZXJuIiwiZW5yaWNoZXIiLCJfY3JlYXRlTGluayIsIl9saW5rRnJvbUV2ZW50IiwiaSIsIm9sZFR5cGUiLCJsaW5rVHlwZSIsImxpbmtJY29uIiwiZGlzcGxheU5hbWUiLCJpbm5lclRleHQiLCJjb252ZXJ0RGlmZmljdWx0eSIsIm9yaWdpbmFsRXZlbnQiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwiZnJvbURyb3BEYXRhIiwibWVyZ2VPYmplY3QiLCJjaGFuZ2VzIiwiZXh0ZXJuYWwiLCJtYXRjaGVzIiwibWF0Y2hBbGwiLCJBcnJheSIsImZyb20iLCJkaWZmaWN1bHR5U3RyaW5nIiwiaHVtYW5OYW1lIiwiZ2V0Q2hhcmFjdGVyaXN0aWNOYW1lcyIsImRyYWdnYWJsZSIsInBhY2siLCJsaW5rIiwiX29uTGlua0FjdG9yQ2xpY2siLCJjaGFyYWN0ZXJpc3RpY0NoZWNrIiwic2hpZnRLZXkiLCJza2lsbENoZWNrIiwiYXR0cmlidXRlQ2hlY2siLCJ3ZWFwb25DaGVjayIsInRvQ2hhdE1lc3NhZ2UiLCJvcHRpb24iLCJ0b1doaXNwZXJNZXNzYWdlIiwib3duZXJzIiwiQ29DN0NvbnRlbnRMaW5rRGlhbG9nIiwiY29udHJvbGxlZCIsImdldFNwZWFrZXJBY3RvciIsIm93bmVyc2hpcCIsImRlZmF1bHQiLCJET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTIiwiT0JTRVJWRVIiLCJzZXRWYWx1ZSIsImNoZWNrVHlwZSIsImNoZWNrTmFtZSIsImlzQ2hhcmFjdGVyaXN0aWNDaGVjayIsImNoYXJhY3RlcmlzdGljcyIsIkNvQ0FjdG9yIiwiZ2V0Q2hhcmFjdGVyaXN0aWNEZWZpbml0aW9uIiwiYyIsImlzQ2hlY2siLCJpc0F0dHJpYnV0ZUNoZWNrIiwiaXNTa2lsbENoZWNrIiwiaXNJdGVtQ2hlY2siLCJpc1Nhbkxvc3NDaGVjayIsImlzRWZmZWN0IiwiRm9ybUFwcGxpY2F0aW9uIiwiZGVmYXVsdE9wdGlvbnMiLCJjbGFzc2VzIiwiZHJhZ0Ryb3AiLCJkcmFnU2VsZWN0b3IiLCJkcm9wU2VsZWN0b3IiLCJjbG9zZU9uU3VibWl0Iiwid2lkdGgiLCJoZWlnaHQiLCJ0YWJzIiwibmF2U2VsZWN0b3IiLCJjb250ZW50U2VsZWN0b3IiLCJpbml0aWFsIiwiZ2V0RGF0YSIsInNoZWV0RGF0YSIsImF0dHJpYnV0ZVR5cGUiLCJlZmZlY3RNb2RlcyIsIkFDVElWRV9FRkZFQ1RfTU9ERVMiLCJjaGFyYWN0ZXJpc3RpY1R5cGUiLCJmcm9tR2FtZSIsImZyb21EaXJlY3RvcnkiLCJoYXNJRCIsImZyb21Db21wZW5kaXVtIiwiaXNTZXRGcm9tR2FtZSIsImFjdG9yTmFtZXMiLCJhY3RpdmF0ZUxpc3RlbmVycyIsIl9vbkNoYW5nZVN1Ym1pdCIsImNsaWNrIiwiX29uRWZmZWN0Q29udHJvbCIsIl9vblN1Ym1pdCIsImJ1dHRvbiIsIl9hZGRFZmZlY3RDaGFuZ2UiLCJyZW1vdmUiLCJpZHgiLCJzdWJtaXQiLCJwcmV2ZW50Q2xvc2UiLCJ1cGRhdGVEYXRhIiwibW9kZSIsIkFERCIsIl91cGRhdGVPYmplY3QiLCJmb3JtRGF0YSIsImhhc0VmZmVjdCIsInRpbnQiLCJyb3VuZHMiLCJ0dXJucyIsInN1Ym1pdHRlciIsImNvcHlUb0NsaXBib2FyZCIsIl9vbkRyb3AiLCJkYXRhU3RyaW5nIiwic2V0TGluayIsImRvY3VtZW50TmFtZSIsImRhdGFMaXN0IiwiZ2V0RGF0YUZyb21Ecm9wRXZlbnQiLCJoYXNNb2RpZmllcnMiLCJoYXNMYWJlbCIsImhhc0ljb24iLCJsaW5rRGF0YSIsImRpYWxvZyIsIlJvbGxEaWFsb2ciLCJ1bmtub3duIiwidW5rbm93bkRpZmZpY3VsdHlEZWZhdWx0IiwiYWxsb3dGbGF0RGljZU1vZGlmaWVyIiwiZGlzYWJsZUZsYXREaWNlTW9kaWZpZXIiLCJhbGxvd0ZsYXRUaHJlc2hvbGRNb2RpZmllciIsImRpc2FibGVGbGF0VGhyZXNob2xkTW9kaWZpZXIiLCJoaWRlRGlmZmljdWx0eSIsImNhcmRUeXBlIiwiZm9yY2VkQ2FyZFR5cGUiLCJjYXJkVHlwZXMiLCJDb0M3Q2hhdE1lc3NhZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImRsZyIsIkRpYWxvZyIsImJ1dHRvbnMiLCJjYWxsYmFjayIsIkZvcm1EYXRhIiwiY2xvc2UiLCJSb2xsQ2FyZCIsImluaXRpYXRvciIsImZyb21NZXNzYWdlSWQiLCJmcm9tTWVzc2FnZSIsImNhcmRFbGVtZW50IiwiZnJvbUhUTUxDYXJkRWxlbWVudCIsImNhcmREYXRhIiwiaW5kZXgiLCJyb2xsZWQiLCJfaHRtbFJvbGwiLCJnZXRIdG1sUm9sbCIsIl9vblRvZ2dsZSIsInNwYW4iLCJjb250YWlucyIsImZsYWciLCJ0b2dnbGUiLCJiIiwidW5zZXRGbGFnIiwic2V0RmxhZyIsInRvZ2dsZUZsYWciLCJkaXNwYXRjaCIsImNvbGxlY3Rpb24iLCJkZWZhdWx0Q29uZmlnIiwidGltZXN0YW1wIiwicHJvY2VzcyIsInNvY2tldCIsImVtaXQiLCJ0b01lc3NhZ2UiLCJjb25maWciLCJjb21wdXRlIiwiY2xvc2VkIiwiZnJvbUdNIiwicmFuayIsImFkZFJvbGxEYXRhIiwiYWRkUm9sbCIsInJlbW92ZVJvbGwiLCJzcGxpY2UiLCJfbWVzc2FnZSIsIl9tZXNzYWdlSWQiLCJleGNsdWRlIiwiZXhjbHVkZVN0YXJ0V2l0aCIsIndpbm5lcnMiLCJ3aW5uZXIiLCJsb29zZXJzIiwibG9vc2VyIiwiaGFzV2lubmVyIiwiaXNLZWVwZXIiLCJDb21iaW5lZENoZWNrQ2FyZCIsImJpbmRMaXN0ZXJuZXJzIiwiX29uQ2xpY2siLCJzdWNjZXNzQ291bnQiLCJtYWluQWN0b3JLZXkiLCJzdWNjZXNzIiwiYW55IiwiYWxsIiwiY2hlY2tHTUluaXRpYXRvciIsInVzZXJzIiwiX3JvbGwiLCJzaWxlbnQiLCJoaWRlU3VjY2VzcyIsImFzc2lnblJvbGwiLCJjbG9zZUNhcmQiLCJBdWRpb0hlbHBlciIsInBsYXkiLCJzb3VuZHMiLCJhbHRlciIsImZsYXREaWNlTW9kaWZpZXIiLCJmbGF0VGhyZXNob2xkTW9kaWZpZXIiLCJoaWRlRGljZVJlc3VsdCIsIkludGVyYWN0aXZlQ2hhdENhcmQiLCJfb3B0aW9ucyIsImNzc0NsYXNzZXMiLCJvcHRpb25uYWxDaGF0RGF0YSIsImNhcmRDbGFzcyIsIl9vbkJ1dHRvbiIsIl9vbktleSIsImJpbmRMaXN0ZW5lcnMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY2FyZHMiLCJ0eXBlZENhcmQiLCJhc3NpZ25PYmplY3QiLCJfdXBkYXRlIiwiZm9ybXMiLCJ1cGRhdGVzIiwiZm9ybSIsIkZvcm1EYXRhRXh0ZW5kZWQiLCJ0b09iamVjdCIsImRpZmZPYmplY3QiLCJleHBhbmRPYmplY3QiLCJpc1RhcmdldE93bmVyIiwiaXNPd25lciIsIkRhbWFnZUNhcmQiLCJkYW1hZ2VSb2xsIiwiX2ltcGFsZSIsImlzRGFtYWdlRm9ybXVsYSIsImRhbWFnZUZvcm11bGEiLCJ2YWxpZGF0ZSIsImlzRGFtYWdlTnVtYmVyIiwiaXNBcm1vckZvcnVsYSIsInRvdGFsRGFtYWdlU3RyaW5nIiwiaWdub3JlQXJtb3IiLCJub0RhbWFnZSIsInJvbGxEYW1hZ2UiLCJoYXJkcm9sbGVkIiwiZGFtYWdlSW5mbGljdGVkIiwiZGVhbERhbWFnZSIsIl9odG1sSW5saW5lUm9sbCIsInJvbGxBcm1vciIsImRlYWxEYW1hZ2VUb1NlbGVjdGVkVGFyZ2V0IiwiZXJyb3IiLCJzZWxlY3RlZFBsYXllcnMiLCJvbmUiLCJjb25maXJtRGFtYWdlIiwidHdvIiwiaW5jbHVlcyIsInRyaW0iLCJtYXhEYW1hZ2UiLCJyb2xsU3RyaW5nIiwiX2FybW9yIiwiT3Bwb3NlZENoZWNrQ2FyZCIsImF0dGFja2VyUm9sbCIsImF0dGFja2VyIiwiZGVmZW5kZXJSb2xsIiwiZGVmZW5kZXIiLCJkZWZlbmRlcklzRG9kZ2luZyIsImRvZGdlU2tpbGwiLCJhZHZhbnRhZ2VBdHRhY2tlciIsIl9hYSIsIndpbm5lclJvbGxzRGFtYWdlIiwiX2FkIiwiYWR2YW50YWdlRGVmZW5kZXIiLCJpc1RpZSIsIndpbm5lckNvdW50IiwibmVlZHNUaWVCcmVha2VyIiwiaXNBdHRhY2tNYW5ldXZlciIsInJlc3VsdFRleHQiLCJkYW1hZ2VDaGF0Q2FyZCIsImlzRXh0cmVtZVN1Y2Nlc3MiLCJ0aWUiLCJyZXNvbHZlZCIsIm1vZGlmaWVkUmVzdWx0Iiwid2luQ291bnQiLCJTYW5EYXRhRGlhbG9nIiwiX3RvZ2dsZUlucHV0IiwiVmFsaWRhdGUiLCJST0xMX1RZUEVfQVRUUklCVVRFIiwiUk9MTF9UWVBFX0NIQVJBQ1RFUklTVElDIiwiUk9MTF9UWVBFX0NPTUJBVCIsIlJPTExfVFlQRV9TS0lMTCIsIlJPTExfVFlQRV9FTkNPVU5URVIiLCJDQVJEX1RZUEVfQ09NQklORUQiLCJDQVJEX1RZUEVfR1JPVVAiLCJDQVJEX1RZUEVfTk9STUFMIiwiQ0FSRF9UWVBFX09QUE9TRUQiLCJDQVJEX1RZUEVfU0FOX0NIRUNLIiwiQ0FSRF9UWVBFX05PTkUiLCJzZWxlY3QiLCJub3JtYWxpemVSZXF1ZXN0Iiwic2tpbGxJZHMiLCJnZXRTa2lsbHNCeU5hbWUiLCJhbHRLZXkiLCJjcmVhdGVFbmNvdW50ZXIiLCJvcGVuTGlua1Rvb2wiLCJzZW5kVG9DaGF0Iiwic2VuZFRvQ2xpcGJvYXJkIiwiaXNDb21iYXQiLCJwcmV2ZW50U3RhbmRieSIsImRpYWxvZ09wdGlvbnMiLCJwYXJlbnRFbGVtZW50IiwiYXR0cmliIiwid2VhcG9uQWx0U2tpbGwiLCJ3ZWFwb25OYW1lIiwiaGFzUGxheWVyT3duZXIiLCJ0cmlnZ2VyIiwiY3JlYXRlTGluayIsIml0ZW1Nb2RpZmllcnMiLCJmb3VuZHJ5SUQiLCJjcmVhdGVSb2xsIiwicnVuUm9sbCIsImNoZWNrUGFzc2VkIiwiY2hlY2tGYWlsbGVkIiwiaW5mb3MiLCJ1c2FnZSIsInByb21wdExhYmVsIiwic3RhbmRieSIsInJvbGxBdHRyaWJ1dGUiLCJyb2xsQ2hhcmFjdGVyaXN0aWMiLCJyb2xsZWRTdWNjZXNzTGV2ZWwiLCJzdWNjZXNzTGV2ZWxzIiwicmVndWxhclRocmVzaG9sZCIsImhhcmRUaHJlc2hvbGQiLCJleHRyZW1lVGhyZXNob2xkIiwiZGVueVB1c2giLCJDb0M3Q29uQ2hlY2siLCJfYWN0b3JJZCIsImlzU3VjY2VzcyIsImlzUm9sbGVkIiwiY29uQ2hlY2siLCJodG1sQ2hlY2siLCJnZXRDaGVja0VsZW1lbnQiLCJyb2xsQ29uIiwicmVwbGFjZVdpdGgiLCJzdGF5QWxpdmUiLCJhcHBsaWVkIiwiU2tpbGxTZWxlY3REaWFsb2ciLCJfb25TZWxlY3RTa2lsbENsaWNrZWQiLCJzdHlsZSIsImRpc3BsYXkiLCJhZGRlZCIsIm9wdGlvbnNDb3VudCIsIlBvaW50U2VsZWN0RGlhbG9nIiwiX29uU2VsZWN0Q2hhcmFjdGVyaXN0aWMiLCJfb25CdXR0b25DbGlja2VkIiwiaXRlbUxpc3QiLCJvcHRpb25hbCIsInRvZ2dsZUNsYXNzIiwiQ2hhcmFjU2VsZWN0RGlhbG9nIiwiQ2hhcmFjUm9sbERpYWxvZyIsIl9vbkNoYW5nZUlucHV0IiwiX29uUm9sbENoYXJhY3RlcmlzdGljIiwiX29uSW5jcmVhc2VDaGFyYWN0ZXJpc3RpYyIsIl9vbkRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMiLCJfb25SZXNldENoYXJhY3RlcmlzdGljIiwiY2hhcmFjS2V5IiwiaW5jcmVhc2VDaGFyYWN0ZXJpc3RpYyIsImRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMiLCJyZXNldENoYXJhY3RlcmlzdGljIiwiY2hhciIsImNoZWNrVG90YWwiLCJfZWxlbWVudCIsImlucHV0IiwibGlzdCIsInBvaW50cyIsInZhbGlkYXRpb24iLCJlbmFibGVkIiwidmFsIiwicG9pbnRzV2FybmluZyIsIlNraWxsU3BlY1NlbGVjdERpYWxvZyIsInNwZWNpYWxpemF0aW9uTmFtZSIsImJhc2VWYWx1ZSIsImhhc1NraWxscyIsIlNraWxsU3BlY2lhbGl6YXRpb25TZWxlY3REaWFsb2ciLCJfb25DbGlja1N1Ym1pdCIsIl9vblNlbGVjdENoYW5nZSIsImFsbG93Q3VzdG9tIiwiZml4ZWRCYXNlVmFsdWUiLCJhbGxvd1NlbGVjdCIsIlNraWxsVmFsdWVEaWFsb2ciLCJDb0M3TWVsZWVSZXNvbHRpb24iLCJpbml0aWF0b3JNZXNzYWdlIiwidGFyZ2V0TWVzc2FnZSIsInByZUNyZWF0ZU1lc3NhZ2UiLCJDb0M3TWVsZWVUYXJnZXQiLCJDb0M3TWVsZWVJbml0aWF0b3IiLCJpbml0aWF0b3JUb2tlbiIsInJlc3VsdFN0cmluZyIsIndpbm5lckltZyIsIndpbm5lclRpdGxlIiwiY3JpdGljYWxEYW1hZ2UiLCJkb2N1bW1lbnQiLCJwYXJlbnRNZXNzYWdlSWQiLCJpbml0aWF0b3JLZXkiLCJvdXRudW1iZXJlZCIsInN1cnByaXNlZCIsImF1dG9TdWNjZXNzIiwiYWR2YW50YWdlIiwiZGlzYWR2YW50YWdlIiwiZG9kZ2luZyIsIm5vdFJlc3BvbmRpbmciLCJmaWdodGluZ0JhY2siLCJtYW5ldXZlcmluZyIsImFjdGlvblNlbGVjdGVkIiwiX2luaXRpYXRvcktleSIsIl9pbml0aWF0b3IiLCJtZWxlZUluaXRpYXRvciIsInVwZGF0ZUNhcmRTd2l0Y2giLCJwdWJsaXNoVXBkYXRlIiwiY2FtZWxGbGFnIiwiY3JlYXRlQ2hhdENhcmQiLCJnbXMiLCJPV05FUiIsInByb21wdCIsImdldFVwZGF0ZWRDaGF0Q2FyZCIsInVwZGF0ZVNlbGVjdGVkIiwid2VhcG9uSWQiLCJwZXJmb3JtU2tpbGxDaGVjayIsInB1Ymxpc2giLCJpc1Vua29ud24iLCJwdWJsaXNoTm9SZXBvbnNlUmVzdWx0IiwicmVzb2x1dGlvbkNhcmQiLCJyZXNvbHV0aW9uTWVzc2FnZSIsInB1Ymxpc2hDaGVja1Jlc3VsdCIsInJvbGxJY29ucyIsInJvbGxDb2xvciIsInJvbGxUaXRsZSIsInVwZ3JhZGVSb2xsIiwibHVja0Ftb3VudCIsIm5ld1N1Y2Nlc3NMZXZlbCIsIm9sZENhcmQiLCJzcGVuZEx1Y2siLCJsdWNrU3BlbnQiLCJwcm9jZXNzZWQiLCJkaWNlUm9sbHMiLCJyZXN1bERldGFpbHMiLCJkaWNlVG90YWwiLCJDb0M3Q2hhdCIsIkNvQzdSYW5nZUluaXRpYXRvciIsImNvdmVyIiwidGFyZ2V0Q2FyZCIsImZ1bGxBdXRvIiwiYWltZWQiLCJ0b3RhbEJ1bGxldHNGaXJlZCIsIl90YXJnZXRzIiwiQ29DN1JhbmdlVGFyZ2V0Iiwicm91bmRlZERpc3RhbmNlIiwicm91bmQiLCJkaXN0YW5jZVVuaXQiLCJkaXN0SW5ZZCIsInBvaW50QmxhbmtSYW5nZSIsIm91dE9mUmFuZ2UiLCJtYWluV2VhcG9uU2tpbGwiLCJhdXRvV2VhcG9uU2tpbGwiLCJhdXRvRmlyZSIsIm11bHRpVGFyZ2V0IiwiYWltaW5nIiwiX2FpbWluZyIsImdldEFjdG9yRmxhZyIsImFjdGl2ZVRhcmdldCIsInNob3RzIiwiX3Nob3RzIiwiY3VycmVudFNob3RSYW5rIiwiYWN0aXZlVGFyZ2V0U2hvdERpZmZpY3VsdHkiLCJzaG90RGlmZmljdWx0eSIsImRpZEFueVNob3RIaXQiLCJhbnlIaXQiLCJzdWNjZXNzZnVsSGl0cyIsImhpdHMiLCJoaXQiLCJzaG90Iiwic2hvdEZpcmVkIiwidG90YWxBbW1vIiwibWF4U2hvdHMiLCJpZ25vcmVBbW1vIiwiaWdub3JlVXNlc1BlclJvdW5kIiwib3V0T2ZBbW1vIiwib3V0T2ZTaG90cyIsInZvbGxleVNpemUiLCJfdm9sbGV5U2l6ZSIsImlzVm9sbGV5TWluU2l6ZSIsImlzVm9sbGV5TWF4U2l6ZSIsImdldFRhcmdldEZyb21LZXkiLCJjYWxjVGFyZ2V0c0RpZmZpY3VsdHkiLCJkaWZmaWN1bHR5TmFtZSIsImltcG9zc2libGUiLCJsZXZlbCIsImFkZFNob3RBdEN1cnJlbnRUYXJnZXQiLCJhY3Rvck5hbWUiLCJidWxsZXRzU2hvdCIsInRyYW5zaXRCdWxsZXRzIiwiYnVsbGV0c1Nob3RUcmFuc2l0IiwidHJhbnNpdCIsImJ1bGxldExlZnQiLCJwcmV2aW91c1Nob3QiLCJyZXNvbHZlQ2FyZCIsIndlYXBvbk1hbGZ1bmN0aW9uIiwic2hvb3RBdFRhcmdldCIsImhhc01hbGZ1bmN0aW9uIiwiYnVsbGV0RmlyZWQiLCJkZXRhaWxzIiwiY2hhbmdlVm9sbGV5U2l6ZSIsInBhc3NSb2xsIiwicm9sbEluZGV4IiwidXBncmFkZWluZGV4IiwiaW5jcmVhc2VkU3VjY2VzcyIsInJhbmdlSW5pdGlhdG9yIiwiY2FyZFRhcmdldHMiLCJjYXJkU2hvdHMiLCJkYW1hZ2VSb2xscyIsImRyIiwiaCIsImRhbWFnZURpZSIsImNyaXRpY2FsRGFtYWdlRm9ybXVsYSIsImNyaXRpY2FsRGFtYWdlRGllIiwiaW1wYWxpbmdTaG90cyIsInN1Y2Nlc3NmdWxTaG90cyIsImRlYWx0IiwiZGFtYWdlUm9sbGVkIiwiZEluZGV4IiwidG90YWxUYWtlbiIsInRvdGFsQWJzb3JiZWQiLCJySW5kZXgiLCJkZWFsdEFtb3VudCIsInRha2VuIiwiYWJzb3JiZWQiLCJkYW1hZ2VEZWFsdCIsImluTWVsZWUiLCJiaWciLCJfYmlnIiwiYnVpbGQiLCJzbWFsbCIsIl9zbWFsbCIsImlzRmFzdCIsIm1vdiIsImZhc3QiLCJfZmFzdCIsIl9hY3RvciIsIl90b2tlbiIsInNpemVUZXh0Iiwic2l6ZUxhYmVsIiwiY2hhbmdlRGlzcGxheWVkVGFyZ2V0IiwiQ0hBVF9DT0M3X01FU1NBR0UiLCJyZW5kZXJDaGF0TWVzc2FnZUhvb2siLCJmYWtlUm9sbE1lc3NhZ2UiLCJwbGF5ZXJzIiwiR01TZWxmUm9sbCIsInJlbW92ZVdpc3BlclRhcmdldHMiLCJmYWtlUm9sbCIsInJlYWR5IiwiY2hhdExpc3RlbmVycyIsIl9vbkNoYXRDYXJkQWN0aW9uIiwiX29uQ2hhdENhcmRUb2dnbGVDb250ZW50IiwiX29uQ2hhdENhcmRSYWRpb1N3aXRjaCIsIl9vbkNoYXRDYXJkVG9nZ2xlU3dpdGNoIiwiX29uQ2hhdENhcmRWb2xsZXlTaXplIiwiX29uRHJvcERvd25FbGVtZW50U2VsZWN0ZWQiLCJfb25Ub2dnbGVTZWxlY3RlZCIsIl9vblRhcmdldFNlbGVjdCIsIl9vbk9wZW5BY3RvciIsIl9vbklubGluZSIsIm9uVXBkYXRlQ2hhdE1lc3NhZ2UiLCJzY3JvbGxCb3R0b20iLCJjaGVja1JldmVhbGVkIiwicmV2ZWFsQ2hlY2siLCJyZW5kZXJNZXNzYWdlSG9vayIsInJlbW92ZUNsYXNzIiwibW91c2VsZWF2ZSIsImRlZmVuZGFudElkIiwiaW5pdGlhdG9ySWQiLCJ1cGRhdGVDb21iYXRDYXJkVGFyZ2V0IiwidXNlck9ubHkiLCJnZXRBdHRyaWJ1dGUiLCJnbU9ubHkiLCJ6b25lIiwidXNlclZpc2libGVPbmx5IiwiZWxlbSIsImdtVmlzaWJsZU9ubHkiLCJpc1RydXN0ZWQiLCJvd25lclZpc2libGVPbmx5IiwiX2dldEFjdG9yRnJvbUtleSIsIm93bmVyT25seSIsImdtU2VsZWN0T25seSIsImFjdGlvblR5cGVTdHJpbmciLCJ0YXJnZXRzU2VsZWN0b3IiLCJib3JkZXIiLCJ0YXJnZXRUb0Rpc3BsYXkiLCJkcm9wRG93bkJveGVzIiwiZHBkbkJveCIsInNlbGVjdGVkQm94IiwiYWN0aW9uVHlwZSIsImRlZmVuZGVyQ2hvaWNlIiwic2tpbGxWYWx1ZSIsIml0ZW1OYW1lIiwiX2NvbGxhcHNlSW5saW5lUmVzdWx0IiwiX2V4cGFuZElubGluZVJlc3VsdCIsIm9wdGlvbkxpc3QiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicHJvcGVydHkiLCJyYW5nZUNhcmQiLCJjaGFyYWN0ZXIiLCJpc0NhcmRPd25lciIsIm93bm5lciIsImdldEFjdG9yRnJvbVRva2VuIiwiZ2V0VG9rZW4iLCJtZXNzSWQiLCJvcmlnaW5NZXNzYWdlIiwibWVsZWVDYXJkIiwicm9sbFJlc3VsdCIsInVwZ3JhZGVJbmRleCIsImZvcmNlUGFzcyIsInVwZ3JhZGVDaGVjayIsImRldGFpbGVkUmVzdWx0UGxhY2VIb2xkZXIiLCJuZXdDYXJkIiwiY2xvbmVOb2RlIiwicHVzaGVkUm9sbCIsImRlZmVuZGVyS2V5IiwicmVzcG9uc2VUeXBlIiwiZGVhbGVyIiwiYW1vdW50IiwiYXBwZW5kIiwiZm9yY2VGYWlsIiwiaW5jcmVhc2VTdWNjZXNzTGV2ZWwiLCJkZWNyZWFzZVN1Y2Nlc3NMZXZlbCIsImNvbXB1dGVDaGVjayIsIm1ha2VQdWJsaWMiLCJmb3JjZVJvbGwiLCJDb0M3c29ja2V0IiwiZXhlY3V0ZUFzR00iLCJfaWQiLCJyb2xsRGFtYWdlQnV0dG9uIiwiQWN0b3IiLCJpbml0aWFsaXplIiwiY3JlYXR1cmVJbml0IiwicHJlcGFyZUJhc2VEYXRhIiwiaXRlbUlkZW50aWZpZXIiLCJjb2NpZCIsImNvY2lkRmxhZyIsImRhaWx5TGltaXQiLCJvbmVGaWZ0aFNhbml0eSIsInJhd01vdiIsInJhd0RiIiwicmF3QnVpbGQiLCJjdXJyZW50IiwiaHAiLCJwcmVwYXJlRW1iZWRkZWREb2N1bWVudHMiLCJwcmVwYXJlRGVyaXZlZERhdGEiLCJyYXdIcE1heCIsIm1wIiwicmF3TXBNYXgiLCJyYXdTYW5NYXgiLCJmaWx0ZXJNYXRyaXgiLCJwcmlvcml0eSIsInNlbGVjdENoYW5nZXMiLCJocE1heCIsIm1wTWF4IiwiYWN0b3JMaW5rIiwiZGlzcG9zaXRpb24iLCJzaWdodCIsImNoZWNrVW5kZWZpbmVkQXV0byIsInJldHVybkRhdGEiLCJzaG9ydCIsImluaXRUb2tlbiIsImNyZWF0ZURhdGEiLCJoYXNDb25kaXRpb25TdGF0dXMiLCJnZXRUZW1wb0luc2FuZUR1cmF0aW9uVGV4dCIsImhhc0NvbmRpdGlvblZhbHVlIiwicG9ydHJhaXQiLCJyZWFsVGltZSIsImJvdXRPZk1hZG5lc3NUYWJsZUlkIiwiYm91dE9mTWFkbmVzc1RhYmxlIiwidGFibGVzIiwidGFibGVSb2xsIiwiVEFCTEVfUkVTVUxUX1RZUEVTIiwiRE9DVU1FTlQiLCJkb2N1bWVudElkIiwiaXRlbURhdGEiLCJURVhUIiwidGV4dCIsImVtcHR5U2tpbGwiLCJjcmVhdGVTa2lsbCIsInNob3dTaGVldCIsInJlbmRlclNoZWV0IiwiY3JlYXRlV2VhcG9uU2tpbGwiLCJza2lsbERhdGEiLCJwZXJzb25hbCIsIm9jY3VwYXRpb24iLCJhcmNoZXR5cGUiLCJhdHRhY2siLCJ3cG5UeXBlIiwiY3JlYXRlZEF0dGFjayIsInNldEFjdG9yRmxhZyIsImNyZWF0ZUl0ZW0iLCJxdWFudGl0eSIsImNyZWF0ZUVtcHR5Qm9vayIsImdldEl0ZW1JZEJ5TmFtZSIsImNyZWF0ZUJvb2siLCJjcmVhdGVFbXB0eVNwZWxsIiwiY3JlYXRlU3BlbGwiLCJlbXB0eVNwZWxsIiwiY3JlYXRlRW1wdHlTa2lsbCIsImNyZWF0ZUVtcHR5SXRlbSIsImNyZWF0ZUVtcHR5V2VhcG9uIiwiY3JlYXRlQmlvU2VjdGlvbiIsImJpbyIsImJpb2dyYXBoeSIsInVwZGF0ZUJpb1ZhbHVlIiwidXBkYXRlQmlvVGl0bGUiLCJkZWxldGVCaW9TZWN0aW9uIiwibW92ZUJpb1NlY3Rpb25VcCIsIm1vdmVCaW9TZWN0aW9uRG93biIsInVwZGF0ZVRleHRBcmVhIiwidGV4dEFyZWEiLCJhcmVhTmFtZSIsImVtYmVkZGVkTmFtZSIsImRhdGFBcnJheSIsInByb2Nlc3NlZERhdGFBcnJheSIsImJhc2VDYWxjdWxhdGVkIiwicGFyc2VDaGFyYWN0ZXJpc3RpY3MiLCJhZGRUaGlzIiwiaXNBbnlCdXROb3RGbGFnZ2VkIiwiYXBpIiwiZ3Vlc3NHcm91cEZyb21Eb2N1bWVudCIsImZyb21Db0NJRFJlZ2V4QmVzdCIsImNvY2lkUmVnRXhwIiwiZXhpc3RpbmdTa2lsbHMiLCJlbCIsInRvTG9jYWxlTG93ZXJDYXNlIiwiZmluZEluZGV4IiwiZXhpc3RpbmdJdGVtIiwidXBkYXRlRW1iZWRkZWREb2N1bWVudHMiLCJleGlzdGluZyIsImtlZXBCYXNlIiwibWFpblNraWxsIiwiYWRkSXRlbXMiLCJzZWNvbmRTa2lsbCIsImVuYWJsZUNoYXJhY3RlcmlzaXRpY3MiLCJnZXRDaGFyYWN0ZXJpc3RpYyIsImx1Y2siLCJlcmEiLCJleHBhbmRJdGVtQXJyYXkiLCJpdCIsIm90aGVyc0l0ZW1zIiwiYWRkVW5pcXVlSXRlbXMiLCJiYWNrc3RvcnkiLCJzZWN0aW9uTmFtZSIsImJpb1NlY3Rpb25zIiwibW9uZXRhcnkiLCJzZXRUaW1lb3V0IiwiX3N0YXRlIiwiQXBwbGljYXRpb24iLCJSRU5ERVJfU1RBVEVTIiwiUkVOREVSSU5HIiwiSG9va3MiLCJyZXNldEFyY2hldHlwZSIsImNvbmZpcm0iLCJ5ZXMiLCJkZWZhdWx0WWVzIiwiY29yZUNoYXJhYyIsImVudHJ5IiwiY29yZUNoYXJhY3RlcmlzdGljcyIsImNoYXJhYyIsImNoYXJEaWFsb2dEYXRhIiwiY29yZUNoYXJhY3RlcmlzdGljc0Zvcm11bGEiLCJyZXNldE9jY3VwYXRpb24iLCJjcmVkaXRSYXRpbmciLCJhY3RvckNyZWRpdFJhdGluZyIsImZpbmRDb2NJZEluTGlzdCIsInBvaW50c0RpYWxvZ0RhdGEiLCJvY2N1cGF0aW9uU2tpbGxQb2ludHMiLCJvcHRpb25hbENoYXIiLCJkaWFsb2dEYXRhIiwic2tpbGxDb3VudCIsIm1lcmdlZCIsImNyZWRpdFJhdGluZ1NraWxsIiwiYXJjaGV0eXBlUG9pbnRzIiwib2NjdXBhdGlvblBvaW50cyIsInBlcnNvbmFsUG9pbnRzIiwiZ2V0SXRlbXNCeU5hbWUiLCJnZXRGaXJzdFNraWxsQnlDb0NJRCIsInRlbXBsYXRlcyIsImNoYXJOYW1lIiwiYXR0cmliTmFtZSIsImxjayIsImVyYXNlT2xkIiwib2NjdXBhdGlvblNraWxsIiwiYXJjaGV0eXBlU2tpbGwiLCJzZXRMdWNrIiwiaHBGcm9tQ2hhcmFjdGVyaXN0aWNzIiwiX3NldEhwIiwiYWRkVW5pcXVlSXRlbSIsIm1wRnJvbUNoYXJhY3RlcmlzdGljcyIsImdldFJlYXNvblNhbkxvc3MiLCJzYW5pdHlMb3NzRXZlbnRzIiwidG90YWxMb3NzIiwiaW1tdW5pdHkiLCJsZWZ0IiwicmlnaHQiLCJsb2NhbGVDb21wYXJlIiwic2FuTWF4Rm9ybXVsYSIsInNhbml0eUxvc3NFdmVudCIsInNldFNhbiIsInNhbkxvc3NDaGVja1Bhc3NlZCIsInNhbkxvc3NDaGVja0ZhaWxsZWQiLCJzYW5Mb3NzTWF4Iiwic2FuTG9zc01pbiIsImRhaWx5TG9zcyIsImN0aHVsaHVNeXRob3MiLCJzZXRNcCIsIm9jY3VwYXRpb25Qb2ludHNTcGVudCIsInJlc2V0T2NjdXBhdGlvblBvaW50cyIsInJlc2V0QXJjaGV0eXBlUG9pbnRzIiwicmVzZXRQZXJzb25hbFBvaW50cyIsImFyY2hldHlwZVBvaW50c1NwZW50IiwiYm9udXNQb2ludHMiLCJleHBlcmllbmNlUG9pbnRzIiwicGVyc29uYWxQb2ludHNTcGVudCIsImhhc0RldmVsb3BtZW50UGhhc2UiLCJkZXZlbG9wZW1lbnQiLCJvbmx5UnVuT25jZVBlclNlc3Npb24iLCJsb3NzIiwic2V0QXR0cmliQXV0byIsInVwZGF0ZWRLZXkiLCJ0b2dnbGVBdHRyaWJBdXRvIiwiZGJGcm9tQ2hhcmFjdGVyaXN0aWNzIiwic3VtIiwiYnVpbGRGcm9tQ2hhcmFjdGVyaXN0aWNzIiwiZGl2aXNvciIsIm1vdkZyb21DaGFyYWN0ZXJpc3RpY3MiLCJhZ2UiLCJNT1YiLCJnZXRJdGVtc0Zyb21OYW1lIiwidG9nZ2xlQWN0b3JGbGFnIiwiYXR0cmlidXRlTmFtZSIsIm1pc3NpbmciLCJjaGFyYWN0ZXJpc3RpY05hbWUiLCJza2lsbElkZW50aWZpZXIiLCJwYWNrcyIsIm1ldGFkYXRhIiwiZW50aXR5IiwiZ2V0RG9jdW1lbnQiLCJsb2ciLCJfcmF3VmFsdWUiLCJ1cGRhdGVWYWx1ZSIsIndlYXBvbkRhdGEiLCJ3ZWFwb25zIiwidG9KU09OIiwicm9sbEluaXRpYXRpdmUiLCJoYXNHdW4iLCJkZW55THVjayIsImRlbnlCbGluZFRhbXBlcmluZyIsInVuc2V0QWN0b3JGbGFnIiwiZnJvbVV1aWRTeW5jIiwiZXhlYyIsImNoYXJLZXkiLCJhdHRyaWJLZXkiLCJhdHRyIiwicGlsb3RTa2lsbHMiLCJkcml2ZVNraWxscyIsInRva2VuVXVpZCIsImhhc1JvbGxhYmxlQ2hhcmFjdGVyaXN0aWNzIiwiaG9zUm9sbGFibGVTa2lsbHMiLCJyb2xsQ2hhcmFjdGVyaXN0aWNzVmFsdWUiLCJyZXBvcnRDaGFyYWN0ZWRyaXRpY3NWYWx1ZSIsImF2ZXJhZ2VDaGFyYWN0ZXJpc3RpY3NWYWx1ZSIsImF2ZXJhZ2UiLCJjaGFyVmFsdWUiLCJzZXRDaGFyYWN0ZXJpc3RpYyIsImRldmVsb3BlbWVudFBoYXNlIiwic2tpbGxzUm9sbGVkIiwiRGllIiwiYXVnbWVudCIsInNraWxsTWFzdGVyaW5nTWVzc2FnZSIsImF1Z21lbnREaWUiLCJhdWdtZW50U0FORGllIiwic2FuR2FpbmVkIiwic2FuR2FpbmVkTWVzc2FnZSIsImRlYnVnIiwic2NvcmUiLCJpbmNyZWFzZUV4cGVyaWVuY2UiLCJjaGFuZ2VkIiwiZGV2ZWxvcEx1Y2siLCJjdXJyZW50THVjayIsInB1bHBSdWxlRGV2ZWxvcG1lbnRSb2xsTHVjayIsImhpZ2hlclRoYW5DdXJyZW50THVjayIsImF1Z21lbnRSb2xsIiwiYXVnbWVudFZhbHVlIiwiZGV2ZWxvcFNraWxsIiwiY29uZGl0aW9uVmFsdWUiLCJjb25kaXRpb25zIiwiZmllbGQiLCJ0b2dnbGVDb25kaXRpb24iLCJmb3JjZVZhbHVlIiwiY3VzdG9tIiwib3ZlcmxheSIsInN0YXR1c0VmZmVjdHMiLCJzb3VyY2UiLCJlZmZlY3REYXRhIiwiZmllbGRzIiwianVzdFRoaXMiLCJkZWxldGVFbWJlZGRlZERvY3VtZW50cyIsInJlc2V0Q291bnRlciIsImNvdW50ZXIiLCJyZXNldERhaWx5U2FuaXR5IiwiZmlnaHRpbmdTa2lsbHMiLCJjbG9zZUNvbWJhdFdlYXBvbnMiLCJ3ZWFwb25MaXN0IiwiZmlyZWFybVNraWxscyIsIkNNIiwibXl0aG9zSGFyZGVuZWQiLCJzZXRNeXRob3NIYXJkZW5lZCIsIkNSIiwibW9uZXRhcnlGb3JtYXQiLCJzeW1ib2wiLCJtb25ldGFyeUZvcm1hdEtleXMiLCJ0b0xvY2FsZVN0cmluZyIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsIm1vbmV0YXJ5VmFsdWUiLCJyb3ciLCJtb25ldGFyeVR5cGVLZXlzIiwic3BlbmRpbmdMZXZlbCIsImNhc2giLCJhc3NldHMiLCJ1IiwidGVzdFVzZXJQZXJtaXNzaW9uIiwicGxheWVyIiwiY2hhcmFjdGVyVXNlciIsImNvbnRlbnRzIiwic2V0SHAiLCJoZWFsdGhCZWZvcmUiLCJkYW1hZ2VUYWtlbiIsImFybW9yRGF0YSIsImdyb3NzRGFtYWdlIiwiYXJtb3JWYWx1ZSIsImlzRm9ybXVsYSIsIm5ldERhbWFnZSIsImNlaWwiLCJoYXNNYWpvcldvdW5kIiwibWFqb3JXb3VuZCIsInB1c2hpbmciLCJpc1Vua25vd24iLCJfdXVpZCIsInJhbmRvbUlEIiwiaGFzQ2FyZCIsInJhd1ZhbHVlU3RyaW5nIiwiY3JpdGljYWxUaHJlc2hvbGQiLCJmdW1ibGVUaHJlc2hvbGQiLCJzdWNjZXNUaHJlc2hvbGQiLCJfbW9kaWZpZWRSZXN1bHQiLCJtb2RpZmllZCIsImZsYXREaWNlTW9kaWZpZXJTdHJpbmciLCJpc1NpbXBsZVJvbGwiLCJoYXNQZW5hbHR5IiwiaGFzTW9kaWZpZXIiLCJfZGljZU1vZGlmaWVyIiwiZnVsbE5hbWUiLCJfZGlmZmljdWx0eSIsIm9sZENoZWNrIiwic3VjY2Vzc0xldmVsSWNvbnMiLCJ1bmtub3duRGlmZmljdWx0eSIsImljb25zIiwic3VjY2Vzc0hpbnQiLCJjc3NDbGFzcyIsImhpbnQiLCJmYWlsdXJlSGludCIsImdtRGlmZmljdWx0eUNyaXRpY2FsIiwiZ21EaWZmaWN1bHR5RXh0cmVtZSIsImdtRGlmZmljdWx0eUhhcmQiLCJnbURpZmZpY3VsdHlSZWd1bGFyIiwiX3NraWxsIiwiX2dldEl0ZW1Gcm9tSWQiLCJfaXRlbSIsImlzRHVtbXkiLCJkaXNwbGF5UmVzdWx0VHlwZSIsImRpc3BsYXlDaGVja1N1Y2Nlc3NMZXZlbCIsImRpc3BsYXlCb3RoU3VjY2Vzc0xldmVsIiwiZG9udERpc3BsYXlTdWNjZXNzTGV2ZWwiLCJpbWFnZSIsImdldExpbmtFbGVtZW50IiwiY3JlYXRlRnJvbUFjdG9yUm9sbERhdGEiLCJyb2xsRGF0YSIsInRocmVzaG9sZCIsInJvbGxWYWx1ZSIsInRlblJlc3VsdCIsInRlbk9ubHlPbmVEaWUiLCJpc1ZhbHVlIiwiaXNDaGFyYWN0aXJpc3RpYyIsImlzU2tpbGwiLCJpc0l0ZW0iLCJpc0F0dHJpYnV0ZSIsInN1Y2Nlc3NSZXF1aXJlZCIsIm1hbGZ1bmN0aW9uVHh0IiwiaGFzRW5vdWdoTHVjayIsIm5leHRMZXZlbCIsImx1Y2tUb1NwZW5kIiwiY2FuSW5jcmVhc2VTdWNjZXNzIiwiY2FuQXdhcmRFeHBlcmllbmNlIiwiZm9yY2VkIiwiSlNPTlJvbGxTdHJpbmciLCJjc3NDbGFzc0xpc3QiLCJwbGF5ZXJDc3NDbGFzcyIsImZvcmNlZFN1Y2Nlc3MiLCJmb3JjZWRGYWlsdXJlIiwidG90YWxMdWNrU3BlbnQiLCJzaGlmdCIsInJlbW92ZVVwZ3JhZGVzIiwiZm9yY2VTdWNjZXNzTGV2ZWwiLCJfZm9yY2VDaGVjayIsImhpZ2giLCJsb3ciLCJyYW5kb20iLCJ1bml0VG90YWwiLCJ0ZW5Ub3RhbCIsImhhc0Vub3VnaCIsInRlbiIsImZsYWdnZWRGb3JEZXZlbG9wbWVudCIsIl9mbGF2b3IiLCJfY29udGV4dCIsInBhcmVudFV1aWQiLCJyYXd2YWx1ZSIsInRvb2x0aXBIZWFkZXIiLCJnZXRIdG1sUm9sbEVsZW1lbnQiLCJvcmlnaW5hbFNwZWFrZXIiLCJuZXdDb250ZW50IiwiaHRtbE1lc3NhZ2UiLCJyb2xsUmVzdWx0RWxlbWVudCIsIk9USEVSIiwidG9vbHRpcCIsInJvbGxUb29sVGlwIiwiZmFjZSIsImZyb21Sb2xsU3RyaW5nIiwiY29tbWFuZCIsIl9vbkNsaWNrSW5saW5lUm9sbCIsInRpcCIsImNoaWxkcmVuIiwiYXBwZW5kQ2hpbGQiLCJwYSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInB0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsInRvcCIsInkiLCJpbm5lckhlaWdodCIsInppIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInpJbmRleCIsImlzTnVtZXJpYyIsIlBhcnNlQ2hhdEVudHJ5IiwiX0V4ZWNDb21tYW5kIiwiZXNjYXBlZCIsImFzayIsInRocmVzaG9sZFN0ciIsImRpZmZpY3VsdHlTdHIiLCJhc2tWYWx1ZSIsInRlc3QiLCJnZXRBY3RvckZyb21TdHJpbmciLCJhY3RvclN0cmluZyIsInNraWxsQ2hlY2tNYWNybyIsIndlYXBvbkNoZWNrTWFjcm8iLCJiYXNlQWN0b3IiLCJnZXREb2N1bWVudENsYXNzIiwiY2hlY2tNYWNybyIsInJvbGxEaWNlIiwiY3JlYXRlTWFjcm8iLCJiYXIiLCJzbG90IiwibWFjcm8iLCJtYWNyb3MiLCJtIiwiYXNzaWduSG90YmFyTWFjcm8iLCJNYWNybyIsInRvZ2dsZURldlBoYXNlIiwidXBkYXRlQ2hhclNoZWV0cyIsInRvZ2dsZUNoYXJDcmVhdGlvbiIsImdldFRhcmdldCIsImNoZWNrT3B0aW9ucyIsInBsYXllclRva2VuSWRzIiwic2VsZWN0ZWRQbGF5ZXJJZHMiLCJjaGVja2VkIiwic3RhcnRSZXN0IiwiY2hhdENvbnRlbnQiLCJxdWlja0hlYWxlciIsImlzQ3JpdGljYWxXb3VuZHMiLCJkYWlseVNhbml0eUxvc3MiLCJocFZhbHVlIiwibXBWYWx1ZSIsImhlYWxBbW91bnQiLCJob3VycyIsIm1hZ2ljQW1vdW50IiwidG9nZ2xlWFBHYWluIiwidGsiLCJyZW5kZXJlZCIsImVudGl0eVR5cGUiLCJmb2xkZXIiLCJuYXZpZ2F0b3IiLCJjbGlwYm9hcmQiLCJpc1NlY3VyZUNvbnRleHQiLCJ3cml0ZVRleHQiLCJwb3NpdGlvbiIsImZvY3VzIiwicmVqZWN0IiwiZXhlY0NvbW1hbmQiLCJjYXRjaCIsImxlbiIsInFTdHJpbmciLCJjaGFyQXQiLCJjaGFyQ29kZUF0IiwiaiIsInNldEJ5UGF0aCIsInBhdGgiLCJvIiwiZ2V0QnlQYXRoIiwiZG9jIiwiZG9jTmFtZSIsImRvY0lkIiwiaW5zdGFuY2UiLCJlbWJlZGRlZElkIiwiaWRlbnRpZmllcnMiLCJnZXRBY3RvckRvY3VtZW50RnJvbURyb3BEYXRhIiwiZHJvcERhdGEiLCJkb2NVdWlkIiwiZ2V0RG9jdW1lbnRGcm9tS2V5IiwiY3JlYXRlSW1wb3J0Q2hhcmFjdGVyc0ZvbGRlcklmTm90RXhpc3RzIiwiZm9sZGVyTmFtZSIsImltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlciIsImZvbGRlcnMiLCJGb2xkZXIiLCJndWVzc0l0ZW0iLCJvTSIsInBhY2thZ2UiLCJnZXREb2N1bWVudHMiLCJmYWxsYmFja0FueSIsInRvS2ViYWJDYXNlIiwibm9ybWFsaXplIiwic3VibWl0T25DbG9zZSIsInN1Ym1pdE9uQ2hhbmdlIiwic3VwcG9ydGVkTGFuZ3VhZ2VzIiwiZWRpdGFibGUiLCJpc0VkaXRhYmxlIiwiZ3Vlc3NDb2RlIiwiZ3Vlc3NJZCIsImlkUHJlZml4IiwiZ2V0UHJlZml4IiwibGFuZyIsImlzRW5hYmxlZCIsIkNvQ0lES2V5cyIsImZsYXR0ZW5PYmplY3QiLCJ0cmFuc2xhdGlvbnMiLCJDb0NJREZsYWciLCJwcmVmaXgiLCJleGlzdGluZ0tleXMiLCJpc1N5c3RlbUlEIiwiX2V4aXN0aW5nIiwid29ybGREb2N1bWVudHMiLCJmcm9tQ29DSURBbGwiLCJzY29wZSIsInVzZWRFcmFzIiwidW5pcXVlV29ybGRQcmlvcml0eSIsIndvcmxkRG9jdW1lbnRJbmZvIiwid2FybkR1cGxpY2F0ZVdvcmxkUHJpb3JpdHkiLCJ3b3JsZER1cGxpY2F0ZXMiLCJjb21wZW5kaXVtRG9jdW1lbnRzIiwidW5pcXVlQ29tcGVuZGl1bVByaW9yaXR5IiwiY29tcGVuZGl1bURvY3VtZW50SW5mbyIsIndhcm5EdXBsaWNhdGVDb21wZW5kaXVtUHJpb3JpdHkiLCJjb21wZW5kaXVtRHVwbGljYXRlcyIsInNpYmxpbmdzIiwiX29uQ2xpY2tUb2dnbGUiLCJndWVzcyIsImNzcyIsImNvbG9yIiwiYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiIsImhlYWRlckJ1dHRvbnMiLCJzaGVldENvQ0lEIiwiQ29DSURFZGl0b3JCdXR0b24iLCJvbmNsaWNrIiwibnVtYmVyT2ZCdXR0b25zIiwiQ29DN0NvbnRleHRNZW51IiwibWVudSIsIl9jYWxsYmFjayIsIl9odG1sIiwiX21lbnUiLCJtZW51VHJpZ2dlciIsImNvbnRleHRtZW51IiwiX29uQ29udGV4dE1lbnUiLCJtZW51RWxlbWVudCIsIkNyZWF0ZU1lbnUiLCJfb25NZW51QWN0aW9uIiwibWVudUNvbnRhaW5lciIsImNsb3NlQWxsIiwiZWFjaCIsInZpc2liaWxpdHkiLCJtZW51TmFtZSIsImNvbnRleHRNZW51Iiwid3JhcHBlciIsInN1Yk1lbnUiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1lbnVIZWlnaHQiLCJvdXRlckhlaWdodCIsIm1lbnVXaWR0aCIsIm91dGVyV2lkdGgiLCJjYW5TZWUiLCJhZGRDbGFzcyIsInNlY3Rpb24iLCJDcmVhdGVTZWN0aW9uIiwibXVsdGkiLCJzdWIiLCJDb0M3QWN0b3JTaGVldCIsIkFjdG9yU2hlZXQiLCJfZ2V0SGVhZGVyQnV0dG9ucyIsInNob3dIaWRkZW5EZXZNZW51IiwiY2FuRHJhZ1Rva2VuIiwibGlua2VkQWN0b3IiLCJpdGVtc0J5VHlwZSIsImNvbWJhdFNraWxscyIsInJhbmdlV3BuIiwibWVsZWVXcG4iLCJhY3RvckZsYWdzIiwicGVybWlzc2lvbkxpbWl0ZWQiLCJMSU1JVEVEIiwiYWxsb3dVbmxvY2siLCJwZXJzb25hbERlc2NyaXB0aW9uIiwic2V4IiwicmVzaWRlbmNlIiwiYmlydGhwbGFjZSIsIm9yZ2FuaXphdGlvbiIsInBsYXllcm5hbWUiLCJtYW51YWxDcmVkaXQiLCJjcmVkaXQiLCJtb25ldGFyeVN5bWJvbCIsInNwZW50IiwiYXNzZXRzRGV0YWlscyIsImRldmVsb3BtZW50IiwicHVscFJ1bGVBcmNoZXR5cGUiLCJwdWxwUnVsZU9yZ2FuaXphdGlvbiIsImlzRGVhZCIsImlzRHlpbmciLCJpdGVtVG9VcGRhdGUiLCJ1cGRhdGVkRXhwIiwiaXRlbVR5cGUiLCJtZWxlZVNraWxscyIsInJhbmdlU2tpbGxzIiwiY2J0U2tpbGxzIiwidXNlc0FsdGVybmF0ZVNraWxsIiwic2tpbGxTZXQiLCJfcHJvcGVydGllcyIsImhhc0VtcHR5VmFsdWVXaXRoRm9ybXVsYSIsImlzRmlyc3QiLCJpc0xhc3QiLCJzaG93SW52ZW50b3J5SXRlbXMiLCJzaG93SW52ZW50b3J5Qm9va3MiLCJzaG93SW52ZW50b3J5U3BlbGxzIiwic2hvd0ludmVudG9yeVRhbGVudHMiLCJzaG93SW52ZW50b3J5U3RhdHVzZXMiLCJzaG93SW52ZW50b3J5V2VhcG9ucyIsImhhc0NvbmRpdGlvbnMiLCJjb25kaXRpb24iLCJvbkNsb3NlU2hlZXQiLCJfb25TZWN0aW9uSGVhZGVyIiwiX29uSXRlbUhlYWRlciIsIl9vbkludmVudG9yeUhlYWRlciIsImRibGNsaWNrIiwiX3RvZ2dsZVJlYWRPbmx5IiwiX29uQWRkQW1vIiwiX29uUmVsb2FkV2VhcG9uIiwiY29tcGVuZGl1bSIsIl9vbkxvY2tDbGlja2VkIiwiX29uRmxhZ0NsaWNrZWQiLCJfb25Gb3JtdWxhQ2xpY2tlZCIsIl9vbkF1dG9Ub2dnbGUiLCJtZW51cyIsInJvbGxNZW51Iiwic2FuTWVudSIsInJvbGxDb250ZXh0TWVudSIsIl9vbkNvbnRleHRNZW51Q2xpY2siLCJzYW5Db250ZXh0TWVudSIsIl9vbk9wcG9zZWRSb2xsIiwiX29uUm9sbENoYXJhY3Rlcml0aWNUZXN0IiwiX29uUm9sbFNraWxsVGVzdCIsIl9vblJvbGxBdHRyaWJUZXN0IiwiX29uRHJhZ1Rva2VuU3RhcnQiLCJfb25EcmFnQ2hhcmFjdGVyaXN0aWMiLCJfb25EcmFnQXR0cmlidXRlIiwiX29uRHJhZ1NhbkNoZWNrIiwiX29uUm9sbENoYXJhY3Rlcml0aWNzVmFsdWUiLCJfb25BdmVyYWdlQ2hhcmFjdGVyaXRpY3NWYWx1ZSIsIl9vblJlc2V0Q291bnRlciIsIl9vbkNvbmRpdGlvblRvZ2dsZSIsImhlYWwiLCJyZXZpdmUiLCJjaGVja0ZvckRlYXRoIiwiX29uSXRlbVJvbGwiLCJfb25XZWFwb25Sb2xsIiwiX29uRWZmZWN0IiwiX29uV2VhcG9uU2tpbGxSb2xsIiwiX29uV2VhcG9uRGFtYWdlIiwid2hlZWxJbnB1dHMiLCJ3aGVlbElucHV0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9vbldoZWVsIiwiX29uSXRlbVN1bW1hcnkiLCJfb25JdGVtUG9wdXAiLCJfb25SZW5kZXJJdGVtU2hlZXQiLCJldiIsInBhcmVudHMiLCJpdGVtVG9EZWxldGUiLCJzdHJpY3QiLCJzbGlkZVVwIiwic3RvcFByb3BhZ2F0aW9uIiwiX29uVHJhZGVJdGVtIiwiZGV0YWlsIiwiZGlzYWJsZSIsIm1vdXNlZW50ZXIiLCJ0b29sVGlwU2tpbGxFbnRlciIsIkNvQzdUb29sdGlwcyIsInRvb2xUaXBMZWF2ZSIsInRvb2xUaXBDaGFyYWN0ZXJpc3RpY0VudGVyIiwidG9vbFRpcEF0dHJpYnV0ZUVudGVyIiwidG9vbFRpcEF1dG9FbnRlciIsInRvb2xUaXBGbGFnRm9yRGV2ZWxvcG1lbnQiLCJkZWxheSIsIlRvb2xUaXBIb3ZlciIsInRvb2xUaXBUaW1lciIsInRvb2xUaXAiLCJkaXNwbGF5VG9vbFRpcCIsImNoYXJJZCIsImF0dHJpYnV0ZUlkIiwiYXR0cmlidXRlcyIsInRhcmdldFR5cGUiLCJyb2xsT3B0aW9ucyIsImFjdG9yRnJvbSIsImFjdG9yVG8iLCJ2aXNpYmxlIiwiTk9ORSIsIl9vbkRyYWdTdGFydCIsImRyYWdEYXRhIiwiYm94IiwiQ29DN1R5cGUiLCJpc0xvY2tlZCIsImRlbHRhWSIsInJlYWRPbmx5Iiwic2VjcmV0cyIsImhhc0NsYXNzIiwic3VtbWFyeSIsImRpdiIsInNwZWNpYWxEaXYiLCJoaWRlIiwic2xpZGVEb3duIiwicGFubmVsQ2xhc3MiLCJwYW5uZWwiLCJpcyIsIm9sIiwibmV4dCIsInBvcHVwU2tpbGwiLCJlbnJpY2hlZFZhbHVlIiwic2Nyb2xsWSIsInByb2NlZWRXaXRob3V0VGFyZ2V0IiwiY2FuY2VsIiwicHJvY2VlZCIsInJvbGxGb3JtdWxhIiwib3ZlcnJpZGVzIiwiY3JlZGl0VmFsdWUiLCJzZWxlY3RlZEluZGV4IiwiQ29DN05QQ1NoZWV0IiwiYWxsb3dGb3JtdWxhIiwiZGlzcGxheUZvcm11bGEiLCJoYXNTYW4iLCJoYXNNcCIsImhhc0x1Y2siLCJpc0NyZWF0dXJlIiwiaGFzSW52ZW50b3J5IiwiZW5yaWNoZWRCaW9ncmFwaHlQZXJzb25hbERlc2NyaXB0aW9uIiwiZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciIsImtlZXBlciIsInNhbmxvc3NNZW51Iiwic2FubG9zc0NvbnRleHRNZW51IiwiX29uU2FuTG9zc0NvbnRleHRNZW51Q2xpY2siLCJfb25TYW5DaGVjayIsInJlc2l6YWJsZSIsIm1pbmltaXphYmxlIiwiZm9yY2VBdXRvIiwic2V0UG9zaXRpb24iLCJDb0M3Q3JlYXR1cmVTaGVldCIsIkNvQzdDcmVhdGVNeXRob3NFbmNvdW50ZXIiLCJpc0ltbXVuaXR5IiwiX29uQnV0dG9uQ2xpY2siLCJDb0M3Q2hhcmFjdGVyU2hlZXQiLCJzdW1tYXJpemVkIiwidG9nZ2xlU2hlZXRNb2RlIiwic2tpbGxMaXN0TW9kZVZhbHVlIiwic2tpbGxTaG93VW5jb21tb24iLCJzaG93SWNvbnNPbmx5Iiwib2NjdXBhdGlvblNldCIsImFyY2hldHlwZVNldCIsInRvdGFsRXhwZXJpZW5jZSIsInRvdGFsT2NjdXBhdGlvbiIsImludmFsaWRPY2N1cGF0aW9uUG9pbnRzIiwidG90YWxBcmNoZXR5cGUiLCJpbnZhbGlkQXJjaGV0eXBlUG9pbnRzIiwidG90YWxQZXJzb25hbCIsImludmFsaWRQZXJzb25hbFBvaW50cyIsImNyZWRpdFJhdGluZ01heCIsImNyZWRpdFJhdGluZ01pbiIsImludmFsaWRDcmVkaXRSYXRpbmciLCJwdWxwVGFsZW50Q291bnQiLCJ0YWxlbnQiLCJtaW5QdWxwVGFsZW50cyIsInRhbGVudHMiLCJpbnZhbGlkUHVscFRhbGVudHMiLCJhbGxvd0RldmVsb3BtZW50IiwiYWxsb3dDaGFyQ3JlYXRpb24iLCJkZXZlbG9wbWVudFJvbGxGb3JMdWNrIiwic2hvd0RldlBhbm5lbCIsIl9tb25ldGFyeUZvcm1hdHMiLCJtb25ldGFyeUZvcm1hdHMiLCJzaG93Q3VycmVuY3lTeW1ib2wiLCJfbW9uZXRhcnlUeXBlcyIsIm1vbmV0YXJ5VHlwZXMiLCJvbmVCbG9ja0JhY2tTdG9yeSIsInByZXZpb3VzU3BlYyIsImlzU3BlY2lhbGl6YXRpb24iLCJza2lsbHNCeVZhbHVlIiwidG9wU2tpbGxzIiwidG9wV2VhcG9ucyIsInJldmVyc2UiLCJkaXNwbGF5UGxheWVyTmFtZSIsInNraWxsTGlzdEVtcHR5IiwiZW5yaWNoZWRCYWNrc3RvcnkiLCJfc2F2ZVNjcm9sbFBvc2l0aW9ucyIsIl9zY3JvbGxQb3NpdGlvbnNYIiwicG9zIiwic2VsIiwic2Nyb2xsTGVmdCIsIl9yZXN0b3JlU2Nyb2xsUG9zaXRpb25zIiwic2VsZWN0b3JzIiwicG9zaXRpb25zIiwiX29uU2tpbGxEZXYiLCJfb25JdGVtRGV0YWlscyIsInRvZ2dsZVNraWxsTGlzdE1vZGUiLCJ0b2dnbGVTa2lsbFVuY29tbW9uTW9kZSIsIl9vbkFkZFNhbml0eUxvc3NSZWFzb24iLCJfb25EZWxldGVTYW5pdHlMb3NzUmVhc29uIiwiYmx1ciIsIl9vbkVkaXRTYW5pdHlMb3NzUmVhc29uIiwiX29uVG9nZ2xlS2VlcGVyRmxhZ3MiLCJfb25BZGRNb25ldGFyeSIsIl9vblJlbW92ZU1vbmV0YXJ5IiwiY2FzaFR5cGUiLCJjYXNoVmFsdWUiLCJhc3NldHNUeXBlIiwiYXNzZXRzVmFsdWUiLCJzcGVuZGluZ1R5cGUiLCJzcGVuZGluZ1ZhbHVlIiwic3R5bGVTaGVldCIsImNzc1J1bGVJbmRleCIsInN0eWxlU2hlZXRzIiwiaHJlZiIsImVuZHNXaXRoIiwicnVsZXMiLCJzZWxlY3RvclRleHQiLCJDU1NTdHlsZSIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJGb250RmFjZSIsImxvYWQiLCJsb2FkZWRGYWNlIiwiZm9udHMiLCJ3ZWlnaHQiLCJleHBhbmRlZCIsIkNvQzdDb21iYXQiLCJyZW5kZXJDb21iYXRUcmFja2VyIiwiY3VycmVudENvbWJhdCIsImNvbWJhdHMiLCJjdXJyZW50SW5kZXgiLCJjb21iSWQiLCJjb21iYXRhbnRDb250cm9sc0RpdiIsImNvbWJhdGFudCIsImNvbWJhdGFudHMiLCJwcmVwZW5kIiwiaW5pdGlhdGl2ZSIsInRva2VuSW5pdGlhdGl2ZSIsImluaXRpYXRpdmVUZXN0IiwiaDQiLCJmb250V2VpZ2h0IiwidGV4dFNoYWRvdyIsImJhY2tncm91bmQiLCJfb25Ub2dnbGVHdW4iLCJjb21iYXRhbnRJZCIsIm5ld0luaXQiLCJzZXRJbml0aWF0aXZlIiwiaWRzIiwiQ29DSURCYXRjaCIsImZvdW5kS2V5cyIsIm91dCIsIm1pc3NpbmdOYW1lcyIsInN1ZmZpeCIsInN1ZmZpeFJlZ0V4cCIsIm9uU2V0TmFtZSIsIm9uQ2xpY2tHdWVzcyIsImtleXVwIiwib25LZXl1cCIsInR5cGVOYW1lIiwicHJvY2Vzc1NraWxsS2V5cyIsInVwZGF0ZUxpc3QiLCJ0b2tlbk9mZnNldCIsIml0ZW1PZmZzZXQiLCJhY3RvckRhdGEiLCJleHBhbmRlZEZsYWdzIiwidXBkYXRlRG9jdW1lbnRzIiwicG9wdWxhdGVTa2lsbEtleXMiLCJzY2VuZURhdGEiLCJVcGRhdGVyIiwiY2hlY2tGb3JVcGRhdGUiLCJzeXN0ZW1VcGRhdGVWZXJzaW9uIiwiam91cm5hbCIsInJ1bk1pZ3JhdGUiLCJ1cGRhdGVkTW9kdWxlcyIsImN1cnJlbnRNb2R1bGVzIiwicGFja2FnZU5hbWUiLCJtb2R1bGUiLCJtb2QiLCJza2lwIiwiT0siLCJwZXJtYW5lbnQiLCJtaWdyYXRlQWN0b3JEYXRhIiwiaXNFbXB0eSIsImVuZm9yY2VUeXBlcyIsIm1pZ3JhdGVJdGVtRGF0YSIsInRhYmxlIiwibWlncmF0ZVRhYmxlRGF0YSIsIm1pZ3JhdGVNYWNyb0RhdGEiLCJtaWdyYXRlU2NlbmVEYXRhIiwibWlncmF0ZUNvbXBlbmRpdW1EYXRhIiwiX21pZ3JhdGVBY3RvckNoYXJhY3RlclNhbml0eSIsIl9taWdyYXRlQWN0b3JBcnR3b3JrIiwiX21pZ3JhdGVBY3RvcktlZXBlck5vdGVzIiwiX21pZ3JhdGVBY3Rvck5wY0NyZWF0dXJlIiwiX21pZ3JhdGVBY3RvclN0YXR1c0VmZmVjdEFjdGl2ZSIsIl9taWdyYXRlQWN0b3JTYW5Mb3NzUmVhc29ucyIsIl9taWdyYXRlQWN0b3JNb25ldGFyeSIsImFyciIsIml0ZW1VcGRhdGUiLCJkb2N1bWVudFR5cGUiLCJ3YXNMb2NrZWQiLCJjb25maWd1cmUiLCJtaWdyYXRlIiwiZG9jdW1lbnRzIiwiX21pZ3JhdGVJdGVtRW1iZWRkZWR2MTAiLCJfbWlncmF0ZUl0ZW1FeHBlcmllbmNlIiwiX21pZ3JhdGVJdGVtQXJ0d29yayIsIl9taWdyYXRlSXRlbUJvb2tBdXRvbWF0ZWQiLCJfbWlncmF0ZUl0ZW1LZWVwZXJOb3RlcyIsIl9taWdyYXRlSXRlbVNwZWxsQXV0b21hdGVkIiwiX21pZ3JhdGVJdGVtS2VlcGVyTm90ZXNNZXJnZSIsIl9taWdyYXRlSXRlbUVyYXMiLCJfbWlncmF0ZUl0ZW12MTAiLCJfbWlncmF0ZUl0ZW1Cb29rVW5pdHMiLCJfbWlncmF0ZU1hY3JvQXJ0d29yayIsIl9taWdyYXRlVGFibGVBcnR3b3JrIiwicmV0dXJucyIsIl9taWdyYXRlVG9rZW5BcnR3b3JrIiwiTWFwIiwib3JpZ2luYWwiLCJnIiwic3BlbGxzIiwiY29zdCIsImNhc3RpbmdUaW1lIiwidW5pZGVudGlmaWVkIiwiYXV0aG9yIiwiZGF0ZSIsImxhbmd1YWdlIiwibXl0aG9zUmF0aW5nIiwibm90ZXMiLCJnYWluIiwiQ01JIiwiQ01GIiwibmVjZXNzYXJ5Iiwid2Vla3NTdHVkeVRpbWUiLCJwcm9ncmVzcyIsInN0dWR5Iiwia2VlcGVyTm90ZXMiLCJlbmNvdW50ZXJlZENyZWF0dXJlcyIsImltIiwiYXR0YWNrc1BlclJvdW5kIiwiaW5kZWZpbml0ZUluc2FuaXR5TGV2ZWwiLCJuYW1lQ2hhcmFjdGVycyIsImVuIiwiZGJOb25lIiwiYXJtb3JOb25lIiwiYXR0YWNrc1BlclJvdW5kTm9uZSIsInNhbkxvc3NOb25lIiwiZnVsbGRiIiwiaGFsZmRiIiwic2VjdGlvbkNvbWJhdHMiLCJuZXdDb21iYXRIZWFkZXIiLCJzZWN0aW9uU2tpbGxzIiwic2VjdGlvbkxhbmdhdWdlcyIsInNlY3Rpb25TcGVsbHMiLCJoYW5kZ3VuIiwicmlmbGUiLCJzbWIiLCJtYWNoaW5lR3VuIiwibGF1bmNoZWQiLCJleGFtcGxlIiwiZGUiLCJkaWNlU2hvcnQiLCJwbCIsImZyIiwiZXMiLCJ3ZWFwb25Eb2RnZSIsImd1ZXNzU3RhcnRDb21iYXQiLCJzZWN0aW9ucyIsIkNvQzdBY3RvckltcG9ydGVyUmVnRXhwIiwiY2hlY2tMYW5ndWFnZSIsImdldEV4YW1wbGVUZXh0IiwiZ2V0VHJhbnNsYXRpb25zIiwiZ2V0S2V5cyIsImdldFJlZ3VsYXJFeHByZXNzaW9ucyIsIkNvQzdBY3RvckltcG9ydGVyIiwiaXRlbUxvY2F0aW9ucyIsImFzTnVtYmVyIiwiYXNTdHJpbmciLCJnZXRSZWdFeCIsInJlZ2V4IiwiY2xlYW5TdHJpbmciLCJ0cmFuc2xhdGVSb2xsIiwicmVnRXgiLCJ0b0hUTUwiLCJyZWdFeEtleSIsInJlZ0V4cCIsInJlcXVpcmVkR3JvdXAiLCJyZW1vdmVGcm9tVGV4dCIsInNhdmVLZXlzIiwicHJvY2Vzc0NvbWJhdCIsIm5ld2xpbmUiLCJDb0M3SW1wb3J0ZXIiLCJsYXN0UGVyY2VudCIsIm1heExvb3BzIiwicGVyY2VudGFnZSIsImlzUmFuZ2VkIiwiZGFtYWdlcyIsImlzU2hvdGd1biIsImF0dGFja3MiLCJwcm9jZXNzU2tpbGxzIiwiYnJlYWtzIiwicHJvY2Vzc1NwZWxscyIsInNwZWxsc0FyciIsInNwZWxsIiwicGFyc2VDaGFyYWN0ZXIiLCJoZWFkZXIiLCJzdWJzdHIiLCJvY2N1cGF0aW9uQWdlIiwicmVnRXhwU2VjdGlvbnMiLCJnbW5vdGVzIiwiZGlzYWJsZUF0dHJpYkF1dG8iLCJhdHRyaWJWYWx1ZSIsImNyZWF0ZUVudGl0eSIsImNoYXJhY3RlckRhdGEiLCJucGMiLCJ1cGRhdGVJdGVtRGF0YSIsImxhc3RXZWFwb25Ta2lsbCIsInBhaXIiLCJ3ZWFwb25Ta2lsbHMiLCJwYyIsIml0ZW1zRGF0YSIsIndlYXBvblNraWxsIiwiY2xvbmVkIiwibGFuZ3VhZ2VzIiwiY2xvbmUiLCJuZXdTa2lsbCIsIm5lZWRzQ29udmVyc2lvbiIsIm5lZWRzQ29udmVyc2lvblJlc3VsdCIsImNyZWF0ZUFjdG9yIiwiaW5wdXRzIiwiY29udmVydEZyb202RSIsImNvbnZlcnQ3RSIsInRlc3RNb2RlIiwiY3JlYXR1cmUiLCJDb0M3RGlyZWN0b3J5UGlja2VyIiwiRmlsZVBpY2tlciIsImFjdGl2ZVNvdXJjZSIsImJ1Y2tldCIsIkRlZmF1bHREaXJlY3RvcnkiLCJyYXciLCJwcm9jZXNzSHRtbCIsInBpY2tlciIsInBpY2tlckJ1dHRvbiIsImNyZWF0ZURlZmF1bHREaXJlY3RvcnkiLCJjcmVhdGVEaXJlY3RvcnkiLCJ1cGxvYWRUb0RlZmF1bHREaXJlY3RvcnkiLCJmaWxlIiwiZmlsZW5hbWUiLCJ1cGxvYWQiLCJGaWxlIiwiQ29DN0Rob2xlSG91c2VBY3RvckltcG9ydGVyIiwiZ2V0QmFja3N0b3J5IiwiYmFja3N0b3J5SlNPTiIsImJsb2NrIiwiY29udmVydERob2xlSG91c2VDaGFyYWN0ZXJEYXRhIiwiZGhvbGVIb3VzZURhdGEiLCJJbnZlc3RpZ2F0b3IiLCJiYWNrc3RvcmllcyIsIkJhY2tzdG9yeSIsIlBlcnNvbmFsRGV0YWlscyIsIk5hbWUiLCJDaGFyYWN0ZXJpc3RpY3MiLCJTVFIiLCJDT04iLCJTSVoiLCJERVgiLCJBUFAiLCJJTlQiLCJQT1ciLCJFRFUiLCJTYW5pdHkiLCJTYW5pdHlNYXgiLCJIaXRQdHMiLCJIaXRQdHNNYXgiLCJNYWdpY1B0cyIsIk1hZ2ljUHRzTWF4IiwiTHVjayIsIk1vdmUiLCJEYW1hZ2VCb251cyIsIkJ1aWxkIiwiT2NjdXBhdGlvbiIsIkFnZSIsIkdlbmRlciIsIlJlc2lkZW5jZSIsIkJpcnRocGxhY2UiLCJleHRyYWN0U2tpbGxzIiwiU2tpbGxzIiwiU2tpbGwiLCJwb3NzZXNpb25zIiwiZXh0cmFjdFBvc3Nlc3Npb25zIiwiUG9zc2Vzc2lvbnMiLCJtYWtlU2tpbGxOYW1lIiwiZGhvbGVIb3VzZXNraWxscyIsInN1YnNraWxsIiwiaGFsZiIsImZpZnRoIiwiZmluZFdlYXBvblNraWxsSWQiLCJnZXRFbWJlZGRlZENvbGxlY3Rpb24iLCJkaG9sZWhvdXNlUG9zc2Vzc2lvbnMiLCJpc0FycmF5IiwiZXh0cmFjdFdlYXBvbnMiLCJkaG9sZWhvdXNlV2VhcG9ucyIsInNraWxsbmFtZSIsIm1hbGYiLCJzYXZlUG9ydHJhaXQiLCJiYXNlNjRQb3J0cmFpdCIsImZpbGVOYW1lIiwiYmFzZTY0UmVzcG9uc2UiLCJmZXRjaCIsImltYWdlQmxvYiIsImJsb2IiLCJjcmVhdGVOUENGcm9tRGhvbGVIb3VzZSIsImRob2xlSG91c2VDaGFyYWN0ZXJEYXRhIiwiY2FuIiwiUG9ydHJhaXQiLCJXZWFwb25zIiwiQ29DN0FjdG9ySW1wb3J0ZXJEaWFsb2ciLCJpbXBvcnRUeXBlIiwiY29udmVydDZFIiwiY2FuVXBsb2FkIiwicGxhY2Vob2xkZXIiLCJfb25KU09ORmlsZVNlbGVjdGVkIiwiY2hhcmFjdGVyc1Rvb0V4dGVuZGVkIiwiZ2V0SW5wdXRzIiwianNvbkZpbGVJbnB1dCIsImdldEVsZW1lbnRCeUlkIiwicG9ydHJhaXRJbWFnZSIsImNoYXJhY3Rlck5hbWUiLCJwcmV2aWV3IiwiZmlsZXMiLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImNoYXJhY3RlckpTT04iLCJwZXJzb25hbERldGFpbHMiLCJ0ZXh0Q29udGVudCIsInJlYWRBc1RleHQiLCJhY3RvclR5cGUiLCJpbXBvcnRBY3RvciIsImNyZWF0ZWRBY3RvciIsIm9uY2UiLCJEcm9wQ29DSUQiLCJwcm9jZXNzRm9ybSIsInJlc3BvbnNlIiwicHJvY2Vzc0l0ZW0iLCJubyIsIkNvQzdPY2N1cGF0aW9uU2hlZXQiLCJJdGVtU2hlZXQiLCJfb25JdGVtRGVsZXRlIiwiX29uR3JvdXBJdGVtRGVsZXRlIiwiX29uR3JvdXBDb250cm9sIiwiRHJhZ0Ryb3AiLCJjYWxsYmFja3MiLCJkcm9wIiwiY29sbGVjdGlvbk5hbWUiLCJvcHRpb25hbFNraWxsIiwidXNlQ29DSUQiLCJDb0NJZCIsIml0ZW1JbmRleCIsImhhc093bmVyIiwiaXNFbWJlZGRlZCIsIm9jY3VwYXRpb25Qb2ludHNTdHJpbmciLCJpdGVtUHJvcGVydGllcyIsIm9jY3VwYXRpb25Qcm9wZXJ0aWVzIiwiZW5yaWNoZWREZXNjcmlwdGlvblZhbHVlIiwib3B0aW9ubmFsIiwibWFuZGF0b3J5IiwiY2FyYWMiLCJjYXJhY05hbWUiLCJvclN0cmluZyIsIkNvQzdJbnZlc3RpZ2F0b3JXaXphcmQiLCJwYWdlTGlzdCIsIlBBR0VfTk9ORSIsIlBBR0VfSU5UUk9EVUNUSU9OIiwiUEFHRV9DT05GSUdVUkFUSU9OIiwiUEFHRV9TRVRVUFMiLCJQQUdFX0FSQ0hFVFlQRVMiLCJQQUdFX0NIQVJBQ1RJU1RJQ1MiLCJQQUdFX0FUVFJJQlVURVMiLCJQQUdFX1ZJRVdfQVRUUklCVVRFUyIsIlBBR0VfT0NDVVBBVElPTlMiLCJQQUdFX09DQ1VQQVRJT05fU0tJTExTIiwiUEFHRV9BUkNIRVRZUEVfU0tJTExTIiwiUEFHRV9QT0lOVFNfU0tJTExTIiwiUEFHRV9JTlZFU1RJR0FUT1IiLCJQQUdFX0JBQ0tTVE9SWSIsIlBBR0VfQ1JFQVRFIiwiY2hhcmFjdGVyaXN0aWNzTWV0aG9kcyIsIk1FVEhPRF9ERUZBVUxUIiwiTUVUSE9EX1JPTEwiLCJNRVRIT0RfUE9JTlRTIiwiTUVUSE9EX1ZBTFVFUyIsImNvY2lkQ3JlZGl0UmF0aW5nIiwiY29jaWRMYW5ndWFnZU93biIsInBhZ2VPcmRlciIsInBhZ2VzIiwiZGVmYXVsdFNldHVwIiwibG9hZENhY2hlSXRlbUJ5Q29DSUQiLCJzaG93TG9hZGluZyIsImZpbHRlckNhY2hlSXRlbUJ5Q29DSUQiLCJyZWdleHAiLCJjYWNoZUNvQ0lEIiwiZ2V0Q2FjaGVJdGVtQnlDb0NJRCIsImNvY2lkcyIsImRlZmF1bHRFcmEiLCJnZXRBZ2VBZGp1c3RtZW50cyIsInNldHVwTW9kaWZpZXJzIiwicmVxdWlyZXNBZ2VBZGp1c3RtZW50cyIsImRlZHVjdCIsInNldHVwIiwiY2FuTmV4dCIsImNyZWF0ZUJ1dHRvbiIsInNob3dNb25ldGFyeSIsInN0ZXAiLCJzZXR1cHMiLCJvY2N1cGF0aW9ucyIsImFyY2hldHlwZXMiLCJfZXJhcyIsImNoYXJhY3RlcmlzdGljc01ldGhvZCIsImVuZm9yY2VQb2ludEJ1eSIsInF1aWNrRmlyZVZhbHVlcyIsImhhc0FyY2hldHlwZXMiLCJjb3JlQ2hhcmFjdGVyaXN0aWMiLCJ0b0xvY2FsZVVwcGVyQ2FzZSIsInN1Z2dlc3RlZE9jY3VwYXRpb25zIiwic3VnZ2VzdGVkVHJhaXRzIiwiZW1wdGllcyIsInNldHVwUG9pbnRzIiwicHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMiLCJkZWR1Y3RUb3RhbCIsImRlZHVjdEZyb20iLCJuIiwicmVkdWNlRnJvbSIsImx1Y2tWYWx1ZSIsInBlcnNvbmFsVGV4dCIsInNraWxsSXRlbXMiLCJsYW5ndWFnZU5hbWUiLCJyb3dzIiwiaXNNdWx0aXBsZSIsImlzQ3JlZGl0UmF0aW5nIiwiaXNQaWNrYWJsZSIsImlzT2NjdXBhdGlvbkRlZmF1bHQiLCJpbk9jY3VwYXRpb25Hcm91cCIsIm9jY3VwYXRpb25Ub2dnbGUiLCJwaWNrZWQiLCJkZWxldGVhYmxlIiwiYXJjaGV0eXBlVG9nZ2xlIiwib2NjdXBhdGlvbkdyb3VwcyIsImlzQXJjaGV0eXBlRGVmYXVsdCIsImNyZWRpdFJhdGluZ09rYXkiLCJyZW1haW5pbmciLCJmcm9tQ29DSUQiLCJ0b3RhbFBvaW50cyIsIm51bSIsImlzT2NjdXBhdGlvbiIsImlzQXJjaGV0eXBlIiwic2hvd0NyZWRpdFJhdGluZyIsImFsbEJhY2tzdG9yaWVzIiwiY2FjaGVCYWNrc3RvcmllcyIsInJvbGUiLCJVU0VSX1BFUk1JU1NJT05TIiwiQUNUT1JfQ1JFQVRFIiwiZGVmYXVsdFJvbGUiLCJrZXlwcmVzcyIsInNyY0VsZW1lbnQiLCJ0YWdOYW1lIiwid2hpY2giLCJjaGFyQ29kZSIsIl9vbkluY3JlYXNlQ2hhcmFjdGVyaXN0aWMxMCIsIl9vbkRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMxMCIsIl9vblJvbGxBbGwiLCJfb25Sb2xsRWR1IiwiX29uUm9sbEx1Y2siLCJfb25DaGFuZ2VTYXZlQ2hhcmFjdGVyaXN0aWMiLCJfb25Ub2dnbGVTa2lsbCIsIl9vbkNsaWNrUGlja1NraWxsIiwiX29uQ2xpY2tTa2lsbFNwZWNpYWwiLCJfb25DbGlja1JlbW92ZVNraWxsIiwiX29uQ2hhbmdlU2tpbGxQb2ludHMiLCJfb25DaGFuZ2VCYWNrc3RvcnlUZXh0IiwiX29uUm9sbEJhY2tzdG9yeSIsIl9vblJlc2V0QmFja3N0b3J5Iiwicm9sbE1lc3NhZ2UiLCJDSEFUX1RFTVBMQVRFIiwiZ2V0VG9vbHRpcCIsImFkZEl0ZW1Ub0xpc3QiLCJpbnZlc3RpZ2F0b3JJdGVtcyIsImlucGxhY2UiLCJjbGVhclNldHVwUG9pbnRzIiwic2V0U2tpbGxMaXN0cyIsInBsYWNlYWJsZSIsImdtIiwibmFtZUNyZWRpdFJhdGluZyIsImNoYXJhY3RlcmlzdGljS2V5IiwiX2NhbkRyYWdTdGFydCIsInNlbGVjdG9yIiwiX2NhbkRyYWdEcm9wIiwiZGVzdGluYXRpb24iLCJva2F5IiwidGVtcCIsInBhcmVudE5vZGUiLCJ0b2dnbGVLZXkiLCJndWVzc0dyb3VwRnJvbUtleSIsImFkanVzdG1lbnQiLCJ0ZXh0YXJlYSIsInJvbGx0YWJsZSIsInRhYmxlUmVzdWx0IiwibW9kaWZ5T2Zmc2V0IiwibW9kaWZ5Q2hhcmFjdGVyaXN0aWMiLCJyZXJvbGxzRW5hYmxlZCIsIm9ialRvdGFsIiwiZ2V0UGFnZU51bWJlciIsImRpcmVjdGlvbiIsImNsYXNzTmFtZSIsImRlZmF1bHRPd25lcnNoaXAiLCJzdGFydGVkIiwibm93IiwiYnVmZmVyIiwiZGVmYXVsdFF1YW50aXR5IiwiZmxhdEtleXMiLCJwYWdlTnVtYmVyIiwic2Nyb2xsVG9wIiwiYXR0ZW1wdFRvQ3JlYXRlIiwibm9ybWFsaXplQ2hhcmFjdGVyRGF0YSIsImNyZWF0ZUNoYXJhY3RlciIsImtlZXBlcnMiLCJsaXN0ZW5lciIsInBheWxvYWQiLCJzb3VyY2VJdGVtIiwiYXZhdGFyIiwiVE9LRU5fRElTUE9TSVRJT05TIiwiRlJJRU5ETFkiLCJjcmVhdGVDaGFyYWN0ZXJGcm9tRGF0YSIsImZ1bmN0aW9uSWQiLCJvZmYiLCJjYWNoZUl0ZW1zIiwiQ29DN01lbnVMYXllciIsIlBsYWNlYWJsZXNMYXllciIsIm9iamVjdHMiLCJsYXllck9wdGlvbnMiLCJwbGFjZWFibGVzIiwiQ29DN01lbnUiLCJnZXRCdXR0b25zIiwiY29udHJvbHMiLCJjb2M3Z210b29scyIsImxheWVyIiwidG9vbHMiLCJvbkNsaWNrIiwiY29jN0RldlRvb2xzIiwicmVuZGVyQ29udHJvbHMiLCJrZWVwZXJNZW51IiwiYWZ0ZXIiLCJDb0M3Q2FudmFzIiwiQ09DN19UWVBFU19TVVBQT1JURUQiLCJvbkRyb3BTb21ldGhpbmciLCJncmlkU2l6ZSIsImRyb3BUYXJnZXRUb2tlbnMiLCJiZXR3ZWVuIiwiYXBwSWQiLCJjYWxsQmFjayIsIndpbmRvd3MiLCJDb0M3U2V0dGluZ3NEaXJlY3RvcnkiLCJTZXR0aW5ncyIsImxvY2F0aW9uIiwiTWFudWFsIiwiQ29DN0NvbXBlbmRpdW1EaXJlY3RvcnkiLCJDb21wZW5kaXVtRGlyZWN0b3J5IiwidHJhbnNsYXRlZCIsImJhYmVsZSIsIkNvQzdBY3RvckRpcmVjdG9yeSIsIkFjdG9yRGlyZWN0b3J5IiwiYWxsb3dXaXphcmQiLCJhbGxvd2VkIiwiQ29DN1NwZWxsIiwiY2FzdCIsImlzT3duZWQiLCJjb3N0cyIsImxvc3NlcyIsImNvbnZlcnRTdXJwbHVzSW50b0hpdFBvaW50cyIsIm1hZ2ljUG9pbnRzIiwiY29udmVydGVkSGl0UG9pbnRzIiwiY29udmVydGVkTWFnaWNQb2ludHMiLCJhY3Rvck1hZ2ljUG9pbnRzIiwib3JpZ2luYWxNYWdpY1BvaW50cyIsImhpdFBvaW50cyIsInJlc29sdmVMb3NzZXMiLCJncmFudFNhbml0eUxvc3MiLCJnZXRIVE1MIiwic2FuaXR5TG9zcyIsInNhbml0eUNoZWNrIiwiYm9va0lkIiwiYm9vayIsIkNvQzdCb29rIiwiYWRkU3BlbGxzIiwic3BlbGxEZXRhaWwiLCJsZWFybmVkIiwiYXR0ZW1wdEluaXRpYWxSZWFkaW5nIiwiY2hhbmdlUHJvZ3Jlc3MiLCJpbml0aWFsUmVhZGluZyIsImZ1bGxTdHVkeSIsImNvbXBsZXRlRnVsbFN0dWR5IiwiY2hlY2tFeGhhdXN0aW9uIiwiZ3JhbnRGdWxsU3R1ZHkiLCJhY3Rvck15dGhvc1ZhbHVlIiwiZGV2ZWxvcG1lbnRzIiwibXl0aG9zRmluYWwiLCJnYWlucyIsImZpbmFsIiwiZ3JhbnRTa2lsbERldmVsb3BtZW50Iiwicm9sbFNhbml0eUxvc3MiLCJmdWxsU3R1ZGllcyIsImdyYW50SW5pdGlhbFJlYWRpbmciLCJvdGhlcnMiLCJncmFudFNwZWxsTGVhcm5pbmciLCJzcGVsbGxlYXJuZWQiLCJleGlzdGluZ1NraWxsIiwic2hvd0RldmVsb3BtZW50c1RhYmxlIiwicmVkb0Z1bGxTdHVkeSIsImF0dGVtcHRTcGVsbExlYXJuaW5nIiwiRUNDX0NMQVNTIiwiUEVSTUlTU0lPTl9UWVBFIiwiU1RBVEUiLCJHTVVwZGF0ZSIsImNhcmRDbGFzc05hbWUiLCJFbmhhbmNlZENoYXRDYXJkIiwiYWR2aXNlIiwiRW5oYW5jZWRDaGF0Q2FyZExpYiIsInR5cGVzIiwiaW5qZWN0Q1NTIiwiZW5oYW5jZWRDaGF0Q2FyZHNMaWIiLCJyZWdpc3RlciIsImNhcmRDb25zdHJ1Y3RvcnMiLCJjYXJkQ29uc3RydWN0b3IiLCJvb2MiLCJkZWVwQ2xvbmUiLCJhdHRhY2hPYmplY3QiLCJvYmplY3REYXRhU3RyaW5nIiwiZWNjQ2xhc3MiLCJsb2NhbENvbXB1dGUiLCJFeGVjdXRlR01VcGRhdGUiLCJFRUNfQUNUSU9OIiwiZGV0YWNoRGF0YSIsIl9vbkNoYW5nZSIsInNldFZpc2liaWxpdHkiLCJzZXRQZXJtaXNzaW9uIiwic2V0U3RhdGUiLCJzZXRSYWRpb1N0YXRlIiwic3BsaXRlZCIsImVjY1Zpc2liaWxpdHkiLCJoYXNQZXJtIiwiZWNjUGVybWlzc2lvbnMiLCJyZXN0cmljdGVkVG8iLCJ2aXNpb24iLCJwZXJtaXNzaW9uc0FycmF5Iiwid2hpdGVMaXN0IiwiaXNBdXRob3IiLCJhc3NpZ25PYmplY3RzIiwibmV3RGF0YSIsImZvcm1VcGRhdGUiLCJhY3Rpb25VcGRhdGUiLCJvcmlnaW5hbERpc3BsYXlTdHlsZSIsInVwZGF0ZUNhcmQiLCJzYXZlRGF0YSIsImh0bW1sQ2FyZCIsIkNhcmRDbGFzcyIsInVuc2V0RGF0YSIsInRvZ2dsZURhdGEiLCJiTmFtZSIsIl9wYXJ0aWNpcGFudCIsIl9mZXRjaCIsIl9kb2MiLCJpc0FjdG9yIiwiaGFzQWN0b3IiLCJoYXNWZWhpY2xlIiwiaXNBY3RpdmUiLCJ2ZWhpY2xlIiwiZHJpdmVyIiwiX2RyaXZlciIsInZlaGljbGVLZXkiLCJfdmVoaWNsZSIsImhhc1ZhbGlkTW92IiwiaGFzTWF4Qm9udXNEaWNlIiwiYWRkQm9udXNEaWNlIiwicmVtb3ZlQm9udXNEaWNlIiwicmVzZXRCb251c0RpY2UiLCJoYXNCb251c0RpY2UiLCJoYXNPbmVCb251c0RpY2UiLCJoYXNUd29Cb251c0RpY2UiLCJjYW5Bc3Npc3QiLCJhc3Npc3QiLCJjYW5CZUNhdXRpb3VzIiwiaGFzRHJpdmVyIiwiaGFzVmFsaWREZXgiLCJoYXNBR3VuUmVhZHkiLCJpc0NoYXNlciIsImNoYXNlciIsImlzUHJleSIsImlzVmFsaWQiLCJtb3ZBZGp1c3RtZW50Iiwic3BlZWRDaGVjayIsInJvbGxEYXRhU3RyaW5nIiwiYWRqdXN0ZWRNb3YiLCJoYXNNb3ZBZGp1c3RtZW50IiwiaGFzQm9udXNNb3YiLCJoYXNNYWx1c01vdiIsInRvb1Nsb3ciLCJleGNsdWRlZCIsImluY2x1ZGVJbkNoYXNlIiwic2xvd2VzdCIsImZhc3Rlc3QiLCJjYWxjdWxhdGVNb3ZlbWVudEFjdGlvbnMiLCJtaW5Nb3YiLCJtb3ZlbWVudEFjdGlvbiIsImN1cnJlbnRNb3ZlbWVudEFjdGlvbnMiLCJoYXNNYXhNdnRBY3Rpb25zIiwiaGFzTm9NdnRBY3Rpb25zIiwiYWRkTW92ZW1lbnRBY3Rpb25zIiwiYWx0ZXJNb3ZlbWVudEFjdGlvbnMiLCJtb3ZlbWVudEFjdGlvbkFycmF5IiwiYmFzZUFycmF5IiwiZmlsbCIsImlubGluZVJvbGwiLCJtb2RpZmllckNzcyIsImhhc09wdGlvbnMiLCJnYW1lSXRlbSIsInJlZiIsInJlZlNldCIsImlzQ2hhcmFjdGVyaXN0aWMiLCJjYW5CZVJvbGxlZCIsInNvcnRCeVJvbGVBbmREZXgiLCJDaGFzZU9ic3RhY2xlQ2FyZCIsInN0cmluZ3MiLCJ0b3RhbEFjdGlvbkNvc3QiLCJicmVha2FibGVPYnN0YWNsZSIsIm9ic3RhY2xlIiwiYmFycmllciIsImhhc0hpdFBvaW50cyIsInZhbGlkQ2hlY2siLCJzdGF0ZXMiLCJvYnN0YWNsZURlZmluZWQiLCJoYXphcmQiLCJ0cnlUb05lZ290aWF0ZSIsInRyeVRvQnJlYWsiLCJicmVha09yTmVnb3RpYXRlRGVmaW5lZCIsInBhcnRpY2lwYW50IiwiY2hhc2UiLCJnZXRBY3RvclNraWxsc0FuZENoYXJhY3RlcmlzdGljcyIsInBhcnRpY2lwYW50VXVpZCIsInZhbGlkU2tpbGwiLCJjaGVja1RocmVzaG9sZCIsImFsbFNraWxsc0FuZENoYXJhY3RlcmlzdGljcyIsImR1bW15QWN0b3IiLCJjYW5UYWtlQ2F1dGlvdXNBcHByb2FjaCIsImN1c3RvbVdlYXBvbiIsIndlYXBvbkNob2ljZSIsImNoZWNrUm9sbFJlcXVlc3QiLCJjYW5Bc2tSb2xsIiwiRW50ZXJWYWx1ZVRpdGxlIiwiZGFtYWdlU3RhdHVzIiwib2JzdGFjbGVEYW1hZ2VSb2xsIiwib2JzdGFjbGVEYW1hZ2VSb2xsZWQiLCJvYnN0YWNsZURhbWFnZSIsImlubGluZURhbWFnZVJvbGwiLCJ0b3RhbENhdXRpb3VzQXBwcm9hY2giLCJjYXV0aW91c1N0YXR1cyIsImNhdXRpb3VzQXBwcm9hY2hUeXBlIiwiY29uc3VtZUJvbnVzRGljZSIsIm1vdmVQbGF5ZXIiLCJvYnN0YWNsZVBhc3NlZCIsImNoZWNrRmFpbGVkIiwicGxheWVyQWN0aW9uRGVmaW5lZCIsInBsYXllckludGVudGlvbnMiLCJjaGVja1JvbGxlZCIsImNhcmRSZXNvbHZlZCIsInBsYXllckRhbWFnZVRha2VuIiwib2JzdGFsY2VEZWZpbml0aW9uQ2hhbmdlZCIsImxpc3RDaGFuZ2VzIiwiaGFzRGFtYWdlIiwiaW5saW5lRGFtYWdlVGFrZW5Sb2xsIiwiZmFpbGVkRGFtYWdlUm9sbCIsInRvdGFsUGxheWVyRGFtYWdlVGFrZW4iLCJoYXNBY3Rpb25Db3N0IiwiYWN0aW9uTG9zdCIsImlubGluZUFjdGlvbkxvc3RSb2xsIiwiZmFpbGVkQWN0aW9uUm9sbCIsImZpbmFsT3V0Y29tZSIsInRvdGFsRGFtYWdlIiwicmVmbGVjdE9ic3RhbGVDaGFuZ2VzIiwiZmFpbGVkQ29uc2VxdWVuY2VzUm9sbGVkIiwidG90YWxPYnN0YWNsZURhbWFnZSIsIm9ic3RhY2xlRGVzdG95ZWQiLCJIaXRQb2ludHMiLCJhY3RpdmVQYXJ0aWNpcGFudERhdGEiLCJvYnN0YWNsZURldGFpbHMiLCJwYXJ0aWNpcGFudERhdGEiLCJnZXRQYXJ0aWNpcGFudERhdGEiLCJnZXRMb2NhdGlvbkRhdGEiLCJsb2NhdGlvblV1aWQiLCJjaGFzZVV1aWQiLCJfY2hhc2UiLCJhY3RvclNraWxsIiwidmFsaWRGYWlsZWRSb2xscyIsImZhaWxlZENoZWNrRGFtYWdlIiwiYWN0aW9uQ29zdCIsImZhaWxlZEFjdGlvbkNvc3QiLCJ3ZWFwb25zT3B0aW9ucyIsIml0ZW1UeXBlcyIsInciLCJhaGJkIiwidW5zaGlmdCIsImN1c3RvbVdlYXBvbkRhbWFnZSIsInVzZWRXZWFwb24iLCJpbmZsaWN0ZWREYW1hZ2VGb3JtdWxhIiwidmFsaWRPYnN0YWNsZURhbWFnZSIsImRhbWFnZVJvbGxSZXF1ZXN0IiwidmFsaWRhdGVDYXJkIiwibG9hY3Rpb25DaGFuZ2VkIiwicGFydGljaXBhbnRDaGFnZWQiLCJvYnN0YWNsZVVwZGF0ZSIsInBhcnRpY2lwYW50VXBkYXRlIiwiZGlmZiIsIm5ldyIsInJlbWFpbmluZ0hwIiwidGFyZ2V0TG9jYXRpb24iLCJmb3J3YXJkIiwiZ2V0TG9jYXRpb25TaGlmdCIsIm1vdmVQYXJ0aWNpcGFudFRvTG9jYXRpb24iLCJzY3JvbGxUb0xvY2F0aW9uIiwiYWN0aXZhdGVMb2NhdGlvbiIsInVwZGF0ZUxvY2F0aW9uIiwidXBkYXRlUGFydGljaXBhbnQiLCJhY3RpdmF0ZU5leHRQYXJ0aWNpcGFudFR1cm4iLCJkZWZpbmVPYnN0YWNsZSIsInRyeVRvTmVnb3RpYXRlT2JzdGFjbGUiLCJ0cnlUb0JyZWFrRG93bk9ic3RhY2xlIiwiY2FuY2VsT2JzdGFjbGVEZWZpbml0aW9uIiwiY2FuY2VsQnJlYWtPclBhc3NDaG9pY2UiLCJyZXF1ZXN0Um9sbCIsInRha2VDYXV0aW91c0FwcHJvYWNoIiwicm9sbFNraWxsQ2hlY2siLCJ1c2VMdWNrIiwicm9sbEZhaWxDb25zZXF1ZW5jZXMiLCJhc2tSb2xsT2JzdGFjbGVEYW1hZ2UiLCJyb2xsT2JzdGFjbGVEYW1hZ2UiLCJuYW1lcyIsIm5ld09ic3RhY2xlIiwib2xkIiwiQ29DN0NoYXNlIiwicGFydGljaXBhbnRzIiwicExpc3QiLCJwcmV5cyIsImNoYXNlcnMiLCJwYXJ0aWNwYW50IiwicGFydGljaXBhbnRzT2JqZWN0IiwiZ2V0UGFydGljaXBhbnRMb2NhdGlvbiIsImFjdGl2ZUFjdG9yIiwicGFydGljaXBhbnRzQnlBZGp1c3RlZE1vdiIsImFjdHVhbFBhcnRpY2lwYW50cyIsInBhcnRpY2lwYW50c0J5SW5pdGlhdGl2ZSIsImFsbEhhdmVWYWxpZE1vdiIsImV2ZXJ5IiwiYWxsSGF2ZVNwZWVkUm9sbCIsImxvY2F0aW9ucyIsImwiLCJscCIsImdldFBhcnRpY2lwYW50IiwibmV4dEFjdGl2ZVBhcnRpY2lwYW50Iiwic2xvd2VzdFByZXkiLCJmYXN0ZXN0Q2hhc2VyIiwiaW5jbHVkZUxhdGVjb21lcnMiLCJpbmNsdWRlRXNjYXBlZCIsInNsb3dlc3RQYXJ0aWNpcGFudCIsInVwZGF0ZVBhcnRpY2lwYW50cyIsInBhcnRpY2lwYW50c0RhdGEiLCJjbGVhblBhcnRpY2lwYW50TGlzdCIsInBhcnRpY2lhbnRVdWlkIiwicGFydGljaXBhbnRJbmRleCIsIm92ZXJ3cml0ZSIsImFzc2lzdFBhcnRpY2lwYW50IiwiYXNzaXN0YW50VXVpZCIsImJlbmVmaWNpYXJ5VXVpZCIsImFzc2lzdGFudCIsImJlbmVmaWNpYXJ5IiwiYXNzaXN0YW50SW5kZXgiLCJiZW5lZmljaWFyeUluZGV4IiwidXNlTW92ZW1lbnRBY3Rpb25zIiwiYWN0aW9ucyIsInRvZ2dsZUJvbnVzRGljZSIsImRpY2VOdW1iZXIiLCJjYXV0aW91c0FwcHJvYWNoIiwiYWx0ZXJQYXJ0aWNpcGFudE1vdmVtZW50QWN0aW9uIiwiYWN0aXZlUGFydGljaXBhbnQiLCJhY3RpdmF0ZVBhcnRpY2lwYW50IiwiZGF0YVVwZGF0ZSIsImdldEFjdGl2YXRlUGFydGljaXBhbnRVcGRhdGVEYXRhIiwiYWN0aXZlTG9jYXRpb24iLCJwVXVpZCIsInBhcnRpY2lwYW50c0RhdGFVcGRhdGUiLCJwYXJ0aWNpcGFudExvY2F0aW9uIiwibG9jYXRpb25zRGF0YVVwZGF0ZSIsImdldEFjdGl2YXRlTG9jYXRpb25VcGRhdGVEYXRhIiwiY2hhc2VUcmFja0N1cnJlbnRTY3JvbGxQb3NpdGlvbiIsImdldENoYXNlVHJhY2tMb2NhdGlvblNjcm9sbFBvc2l0aW9uIiwiYWN0aXZlUGFydGljaXBhbnRPYnN0YWNsZUNoZWNrIiwibW92ZVBhcnRpY2lwYW50IiwicHJvZ3Jlc3NUb05leHRSb3VuZCIsInJvbGxVdWlkIiwibWV0aG9kIiwiaW5pdFRyYWNrIiwicHJvY2Vzc0xvY2F0aW9ucyIsImR1cGxpY2F0ZURhdGEiLCJmaXJzdCIsImxhc3QiLCJzdGFydGluZ0xpbmUiLCJsb2NhdGlvbnNJbmRleFN0YXJ0IiwiaW5pdEluZGV4U3RhcnQiLCJsb2NhdGlvbnNMZW5ndGgiLCJzdGFydGluZ0luZGV4IiwiZ2VuZXJhdGVOZXdVdWlkIiwiY2hhc2VMb2NhdGlvbnMiLCJlbmQiLCJjaGFzZVRyYWNrIiwiY2hhc2Vyc01pbk1vdiIsImZpbmRNaW5Nb3YiLCJjaGFzZXJzTWF4TW92IiwiZmluZE1heE1vdiIsInByZXlzTWluTW92IiwicHJleXNNYXhNb3YiLCJzdGFydGluZ1JhbmdlIiwidXBkYXRlTG9jYXRpb25zTGlzdCIsInVwZGF0ZWRMaXN0IiwiY2xlYW5Mb2NhdGlvbnNMaXN0IiwibG9jYXRpb25JbmRleCIsInBhcnRpcGFudHNVdWlkQXJyYXkiLCJpbnNlcnRMb2NhdGlvbiIsImluc2VydEF0VXVpZCIsIm5ld0xvY2F0aW9uSW5kZXgiLCJuZXdMb2NhdGlvbiIsImxvY0RhdGEiLCJyZW1vdmVMb2NhdGlvbiIsImdldENsZWFyQWN0aXZlTG9jYXRpb25VcGRhdGVEYXRhIiwiaGFzUGFydGljaXBhbnQiLCJhY3RpdmVBY3Rvckhhc1NraWxsIiwiYWN0aXZlQWN0b3JUZXN0IiwicHJldmlvdXNMb2NhdGlvbiIsImFjdGl2ZUluZGV4IiwibmV4dExvY2F0aW9uIiwibG9jYXRvckRyb3BwZWQiLCJzZXRMb2NhdGlvbkNvb3JkaW5hdGVzIiwiY29vcmRpbmF0ZXMiLCJjbGVhckFjdGl2ZUxvY2F0aW9uQ29vcmRpbmF0ZXMiLCJjbGVhckxvY2F0aW9uQ29vcmRpbmF0ZXMiLCJjdXRUb1RoZUNoYXNlIiwic3RhcnQiLCJyZXN0YXJ0Iiwic2V0Y2hhc2VUcmFja1Njcm9sbCIsInN0b3AiLCJkZXN0aW5hdGlvbkluZGV4IiwicmVtb3ZlUGFydGljaXBhbnQiLCJuZXdQYXJ0aWNpcGFudHNEYXRhIiwibG9jYXRpb25zRGF0YSIsImFkZFBhcnRpY2lwYW50IiwidW5pcXVlIiwicmVjYWxjdWxhdGVNb3ZlbWVudEFjdGlvbnMiLCJlZGl0UGFydGljaXBhbnQiLCJsb2NhdGlvbk1vdmVkIiwib3JpZ2luSW5kZXgiLCJ0b3RhbE1vdmUiLCJvbGRQYXJ0aWNpcGFudHNMaXN0IiwibW92ZVRva2VuIiwicGFydGljcGFudERvY3VtZW50IiwiVG9rZW5Eb2N1bWVudCIsImZvdW5kVG9rZW5zIiwidmlld2VkIiwidGFyZ2V0UmVjdCIsIlBJWEkiLCJSZWN0YW5nbGUiLCJmb3VuZEZyZWVTcGFjZSIsIm92ZXJsYXBpbmdUb2tlbiIsImJvdW5kcyIsImludGVyc2VjdHMiLCJzaG93VG9rZW5Nb3ZlbWVudCIsImFuaW1hdGUiLCJ0byIsImNoYXNlVHJhY2tBY3RpdmVMb2NhdGlvblNjcm9sbFBvc2l0aW9uIiwiYWN0aXZlTG9jYXRpb25FbGVtZW50IiwibGVmdFNjcm9sbCIsIm9mZnNldExlZnQiLCJjbGllbnRXaWR0aCIsInByZXYiLCJyZW1TdHJpbmciLCJyZW1TaXplIiwicENvdW50IiwiX3RhYnMiLCJhY3RpdmVBY3RvclNraWxsc0FuZENoYXJhY3RlcmlzdGljcyIsInBhcnRpY2ljcGFudERhdGEiLCJJbnRsIiwiQ29sbGF0b3IiLCJjb21wYXJlIiwiYWxsU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzU2hvcnQiLCJDb0M3U2tpbGwiLCJuZXdQcm9wZXJ0aWVzIiwiaGFzQWN0aXZlRWZmZWN0cyIsImFjdGl2ZUVmZmVjdHMiLCJlZmZlY3RLZXlGdWxsIiwiZWZmZWN0S2V5U2hvcnQiLCJkZWx0YSIsImV4cCIsIkNvQzdWZWhpY2xlIiwiQ29DN0RlY2FkZXJEaWUiLCJ0ZXJtRGF0YSIsIkRFTk9NSU5BVElPTiIsIkNvQzdEZWNhZGVyRGllT3RoZXIiLCJTRVRUSU5HUyIsInB1bHBSdWxlcyIsImluaXRpYXRpdmVSdWxlIiwiY2hvaWNlcyIsIm9uQ2hhbmdlIiwicnVsZSIsIl9zZXRJbml0aWF0aXZlT3B0aW9ucyIsInB1bHBSdWxlRG91YmxlTWF4SGVhbHRoIiwicHVscFJ1bGVUYWxlbnRzIiwicHVscFJ1bGVGYXN0ZXJSZWNvdmVyeSIsInB1bHBSdWxlSWdub3JlTWFqb3JXb3VuZHMiLCJvcHBvc2VkUm9sbFRpZUJyZWFrZXIiLCJkZWNpbWFscyIsIkNvbWJhdCIsIkNvQzdHYW1lUnVsZVNldHRpbmdzIiwidHJ1ZSIsImZhbHNlIiwic2V0dGluZyIsInB1bHBTZWxlY3Rpb24iLCJyZWdpc3RlclNldHRpbmdzIiwib25DaGFuZ2VQdWxwU2VsZWN0Iiwib25DbGlja1B1bHAiLCJvblJlc2V0RGVmYXVsdHMiLCJjaGVja2JveCIsIkNvQzdBcmNoZXR5cGVTaGVldCIsImNoYXJhY05hbWUiLCJlbnJpY2hlZFN1Z2dlc3RlZE9jY3VwYXRpb25zIiwiZW5yaWNoZWRTdWdnZXN0ZWRUcmFpdHMiLCJjb3JlQ2hhcmFjdGVyaXN0aWNzU3RyaW5nIiwiQ29DN0Jvb2tTaGVldCIsInNwZWxsc0xlYXJuZWQiLCJleGhhdXN0ZWQiLCJzdHVkeUNvbXBsZXRlZCIsInNwZWxsTGlzdEVtcHR5IiwiZW5yaWNoZWRDb250ZW50IiwiX29uRGVsZXRlIiwiX29uU3BlbGxEZXRhaWwiLCJtb2RpZnlPdGhlcnNHYWlucyIsIm1vZGlmeVR5cGUiLCJDb0M3Q29udGFpbmVyU2hlZXQiLCJzbGlkZVRvZ2dsZSIsIkNvQzdDaGFzZVBhcnRpY2lwYW50SW1wb3J0ZXIiLCJwZXJtaXNzaW9ucyIsIl9vbkRyb3BQYXJ0aWNpcGFudCIsImRyYWdzdGFydCIsIl9vblRva2VuU2VsZWN0b3JEcmFnU3RhcnQiLCJfb25BY3Rpb24iLCJ2YWxpZGF0ZVBhcnRpY2lwYW50Iiwic3BlZWRDaGVja1JlYWRPbmx5IiwiaW5pdFJlYWRPbmx5Iiwib3B0aW9uc0xpc3QiLCJza2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NMaXN0IiwiZHJvcFN0cmluZyIsImFkZFRva2VuVG9DaGFzZSIsIm92ZXJyaWRlTW92ZW1lbnRBY3Rpb24iLCJyZWNhbGN1bGF0aW9uTmVlZGVkIiwicGFydGljaXBhbnRFeGNsdWRlZCIsIm1vdmVtZW50QWN0aW9uRGVsdGEiLCJpbmNsdWRlTGFzdENvbW1lcnMiLCJleGNsdWRlZEJlY2F1c2UiLCJDb0M3Q2hhc2VTaGVldCIsIl9vbkRyYWdFbnRlclBhcnRpY2lwYW50IiwiX29uRHJhZ0xlYXZlUGFydGljaXBhbnQiLCJfb25DaGFuZ2VTaWRlIiwiX29uRGVsZXRlUGFydGljaXBhbnQiLCJfb25SZXNldFJvbGwiLCJfb25EZWxldGVEcml2ZXIiLCJfb25BZGRQYXJ0aWNpcGFudCIsIl9vblJvbGxQYXJ0aWNpcGFudCIsIl9vbkxvY2F0aW9uQ2xpY2siLCJfb25PYnN0YWNsZVR5cGVDbGljayIsIl9vblBhcnRpY2lwYW50Q29udHJvbENsaWNrZWQiLCJfb25DaGFzZUNvbnRyb2xDbGlja2VkIiwiX29uTG9jYXRpb25Db250cm9sQ2xpY2siLCJfY2FuUGluTG9jYXRpb25EcmFnU3RhcnQiLCJfb25QaW5Mb2NhdGlvbkRyYWdTdGFydCIsIl9vbkNoYXNlUGFydGljaXBhbnRDbGljayIsIl9jYW5DaGFzZVBhcnRpY2lwYW50RHJhZ1N0YXJ0IiwiX2NhbkNoYXNlUGFydGljaXBhbnREcmFnRHJvcCIsIl9vbkNoYXNlUGFydGljaXBhbnREcmFnU3RhcnQiLCJfb25DaGFzZVBhcnRpY2lwYW50RHJhZ0Ryb3AiLCJkcmFnb3ZlciIsIl9vbkRyYWdFbnRlciIsIl9vbkRyYWdMZWF2ZSIsIl9nZXRTdWJtaXREYXRhIiwiZWRpdG9ycyIsImNsZWFuZWQiLCJjbGVhbiIsIm9yaWdpbmFsTG9jYXRpb24iLCJzdWJUeXBlIiwiZmluZFBhcnRpY2lwYW50SW5kZXgiLCJzZXRTY3JvbGwiLCJpbml0aWFsT3BlbmluZyIsInNjcm9sbCIsImFjdGl2YXRlVGFiIiwic2Nyb2xsVG8iLCJiZWhhdmlvciIsImZpbmRMb2NhdGlvbkluZGV4IiwiZmluZExvY2F0aW9uIiwibFV1aWQiLCJ0b2dnbGVQYXJ0aWNpcGFudEd1biIsIl9vbkNoYW5nZU1vdmVtZW50QWN0aW9ucyIsImRyYWdJY29uIiwic2V0RHJhZ0ltYWdlIiwibG9jYXRpb25FbGVtZW50IiwiZHJhZ0V2ZW50Iiwib2xkTG9jYXRpb24iLCJfb25EcmFnT3ZlciIsImFsdGVyUGFydGljaXBhbnQiLCJzdGFuZGJ5VGV4dCIsInN0YW5kYnlSaWdodEljb24iLCJvbGRQYXJ0aWNpcGFudCIsInRwIiwiZ2V0VHlwZSIsIkNvQzdJdGVtU2hlZXRWMiIsIkNvQzdJdGVtU2hlZXQiLCJDb0M3Sm91cm5hbFNoZWV0IiwiSm91cm5hbFNoZWV0IiwiQ29DN01hY3JvQ29uZmlnIiwiTWFjcm9Db25maWciLCJDb0M3UGxheWxpc3RDb25maWciLCJQbGF5bGlzdENvbmZpZyIsIkNvQzdSb2xsVGFibGVDb25maWciLCJSb2xsVGFibGVDb25maWciLCJDb0M3U2NlbmVDb25maWciLCJTY2VuZUNvbmZpZyIsIkNvQzdTZXR1cFNoZWV0IiwiX29uQWRkQmlvIiwiX29uUmVtb3ZlU2VjdGlvbiIsIm90aGVySXRlbXMiLCJpdGVtc0xpc3RFbXB0eSIsIkNvQzdTa2lsbFNoZWV0IiwiX3NoZWV0VGFiIiwiaGFkTm9uQ2hhcmFjdGVyT3duZXIiLCJpc1NwZWNpYWxpemVkIiwiY2FuTW9kaWZ5U3BlYyIsIkNvQzdTcGVsbFNoZWV0IiwiQ29DN1N0YXR1c1NoZWV0Iiwic3RhdHVzVHlwZSIsImVucmljaGVkRGVzY3JpcHRpb25Ob3RlcyIsIkNvQzdUYWxlbnRTaGVldCIsInRhbGVudFR5cGUiLCJDb0M3VmVoaWNsZVNoZWV0IiwiYXJtZWQiLCJfb25BZGRBcm1vciIsIl9vblJlbW92ZUFybW9yIiwiX29uVG9nZ2xlRXhwYW5kIiwib2xkU2l6ZSIsIkNvQzdXZWFwb25TaGVldCIsImNvbWJhdFNraWxsIiwicHJpY2UiLCJlbnJpY2hlZERlc2NyaXB0aW9uU3BlY2lhbCIsIl9vblByb3BlcnR5Q2xpY2siLCJwZXJmb3JtRmlsdGVyIiwiZXJhRWxlbWVudCIsIm5hbWVGaWx0ZXIiLCJDb0NJRCIsImNvbXBlbmRpdW1JbmRleEZpZWxkcyIsIkpvdXJuYWxFbnRyeSIsIlBsYXlsaXN0IiwiUm9sbFRhYmxlIiwiU2NlbmUiLCJnYW1lUHJvcGVydHlMb29rdXAiLCJkb2N1bWVudE5hbWVMb29rdXAiLCJlcmFUZXh0IiwibWFrZUdyb3VwUmVnRXgiLCJsYW5nRmFsbGJhY2siLCJub3RtaXNzaW5nIiwic3BsaXRzIiwicmd4IiwicmVnRXhQYXJ0cyIsImZyb21Db0NJRFJlZ2V4QWxsIiwiZG9jdW1lbnRzRnJvbVdvcmxkIiwicHJvZ3Jlc3NCYXIiLCJTY2VuZU5hdmlnYXRpb24iLCJkaXNwbGF5UHJvZ3Jlc3NCYXIiLCJwY3QiLCJmaWx0ZXJBbGxDb0NJRCIsImNvbXBlbmRpYURvY3VtZW50cyIsImRvY3VtZW50c0Zyb21Db21wZW5kaWEiLCJhbGxEb2N1bWVudHMiLCJmaWx0ZXJCZXN0Q29DSUQiLCJmcm9tQ29DSURCZXN0IiwiYmVzdE1hdGNoRG9jdW1lbnRzIiwiZG9jQ29DSUQiLCJjdXJyZW50RG9jIiwiZG9jUHJpb3JpdHkiLCJNSU5fU0FGRV9JTlRFR0VSIiwiZXhpc3RpbmdQcmlvcml0eSIsImRvY0VyYXMiLCJkb2NMYW5nIiwiZXhpc3RpbmdMYW5nIiwiZ2FtZVByb3BlcnR5IiwiZ2V0R2FtZVByb3BlcnR5IiwiY2FuZGlkYXRlRG9jdW1lbnRzIiwibWF0Y2hpbmdFcmFzIiwiY29tcGFyZUNvQ0lEUHJpbyIsImdldERvY3VtZW50VHlwZSIsInNjaGVtYSIsImluZGV4ZWQiLCJnZXRJbmRleCIsImluZGV4SW5zdGFuY2VzIiwiamUiLCJydCIsIkNhcmQiLCJsb2FkVGVtcGxhdGVzIiwicHJlbG9hZEhhbmRsZWJhcnNUZW1wbGF0ZXMiLCJyZWdpc3Rlck1lbnUiLCJyZXN0cmljdGVkIiwid29ybGQiLCJZIiwiTiIsIm5vYm9keSIsImV2ZXJ5b25lIiwiYWx3YXlzIiwiY3JlYXRpb24iLCJuZXZlciIsIl9zZXRSb290Rm9udFNpemUiLCJzaWRlYmFyIiwiY29udGFpbiIsImhvb2tzIiwiQWN0b3JzIiwidW5yZWdpc3RlclNoZWV0IiwicmVnaXN0ZXJTaGVldCIsIm1ha2VEZWZhdWx0IiwiSXRlbXMiLCJTY2VuZXMiLCJKb3VybmFsIiwiUm9sbFRhYmxlcyIsIk1hY3JvcyIsIlBsYXlsaXN0cyIsIkhhbmRsZWJhcnMiLCJyZWdpc3RlckhlbHBlciIsIlNldCIsInVuY29tbW9uIiwiY29tcGVuZGl1bUZpbHRlciIsIkRpY2VGYWN0b3J5Iiwic3lzdGVtcyIsImQxMDAiLCJkaWNlRGVjYWRlciIsImdldFByb3RvdHlwZU9mIiwiaGVpZ2h0VGV4dCIsImhlaWdodFRpcCIsIndpZHRoVGlwIiwiY2xlYXJUaW1lb3V0IiwiQ29DN1RvdXIiLCJUb3VyIiwid2FpdEZvckVsZW1lbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZXIiLCJkaXNjb25uZWN0Iiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJfcHJlU3RlcCIsInN0ZXBJbmRleCIsImN1cnJlbnRTdGVwIiwic2lkZWJhclRhYiIsIl9wb3N0U3RlcCIsImhhc05leHQiLCJpc1Jlc2V0dGluZyIsInJlc2V0IiwiRW5hYmxlVmFyaWFudFJ1bGVzRW4iLCJjYW5CZVJlc3VtZWQiLCJzdGVwcyIsImxvY2FsaXphdGlvbiIsIkVuYWJsZVZhcmlhbnRSdWxlc0ZyIiwiaW5zdHJ1Y3Rpb25zVmVyc2lvbiIsInJlYWRNZSIsInRvdXJzIiwidG91ck5hbWUiLCJyZWdpc3RlclRvdXJzIiwiQ29DN0hvb2tzIiwibGlzdGVuIiwidG9rZW5Eb2N1bWVudCIsIl9vYmplY3QiLCJhZGREaWNlUHJlc2V0IiwiZm9udFNjYWxlIiwiZW50aXR5Q3JlYXRlU2VsZWN0VGFnIiwiZW50aXR5U29ydGVkTGlzdCIsInNob3dFeHBlcmltZW50YWwiLCJlbnRpdHlPcHRpb24iLCJjYXBpdGFsaXplIiwiZW1wdHkiLCJzZWNvbmQiLCJwbGF5ZXJMaXN0IiwiaW5zZXJ0QWZ0ZXIiLCJkaWVUZXJtcyIsInRhZyIsImdtY3JlYXRlbWVzc2FnZWFzIiwibWVsZWVUYXJnZXQiLCJnbXRyYWRlaXRlbXRvIiwiQ29DN1N5c3RlbVNvY2tldCIsImNhbGxTb2NrZXQiLCJyZXF1ZXN0S2VlcGVyQWN0aW9uIiwicmVxdWVzdFVzZXJBY3Rpb24iLCJ1c2VySWQiLCJlcnJvcklmTWlzc2luZyIsImluY2x1ZGVTZWxmIiwiX29uTGVmdENsaWNrIiwic3lzdGVtVGFiIiwiYmVmb3JlIiwiY2FyZGNsYXNzIiwic29ja2V0bGliIiwicmVnaXN0ZXJTeXN0ZW0iLCJpbml0RUNDIiwiY29tbWFuZHMiLCJyZXMiLCJ0b0xvY2FsaXplIiwibG9jYWxpemVkIiwiZWZmZWN0SW5kZXgiLCJlZmZlY3ROYW1lS2V5Iiwic3RhdHVzS2V5IiwiZGlyZWN0b3J5IiwiSXRlbURpcmVjdG9yeSIsIml0ZW1FbGVtZW50IiwiX3RhYmxlU2V0dGluZ3NDaGFuZ2VkIiwiYWN0aXZhdGVHbG9iYWxMaXN0ZW5lciIsInRhYmxlQ2hvaWNlIiwiYm91dE9mTWFkbmVzc19TdW1tYXJ5IiwiYm91dE9mTWFkbmVzc19SZWFsVGltZSIsImNoYXJhY3RlclNoZWV0Il0sInNvdXJjZVJvb3QiOiIifQ==