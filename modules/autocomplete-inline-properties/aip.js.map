{"version":3,"file":"aip.js","sources":["../src/const.js","../src/package-config.js","../src/logger.js","../src/autocompleter.js","../src/field-registration.js","../src/api.js","../src/hooks/init.js","../src/settings.js","../src/hooks/setup.js","../src/hooks/hooks.js","../src/aip.js"],"sourcesContent":["export const MODULE_NAME = \"autocomplete-inline-properties\";\nexport const MODULE_ABBREVIATION = \"AIP\";\n","/**\n * @enum {string}\n * Determines which data should be provided to the Autocompleter\n */\nexport const DATA_MODE = {\n    /**\n     * The data of the sheet's entity\n     * @deprecated since 2.4.0, use {@link DATA_MODE.DOCUMENT_DATA} instead.\n     */\n    ENTITY_DATA: \"entity\",\n\n    /**\n     * The data of the sheet's document\n     */\n    DOCUMENT_DATA: \"document\",\n\n    /**\n     * The roll data of the sheet's document\n     */\n    ROLL_DATA: \"roll\",\n\n    /**\n     * The data of the sheet's document's owning actor\n     */\n    OWNING_ACTOR_DATA: \"owning-actor\",\n\n    /**\n     * The roll data of the sheet's document's owning actor\n     */\n    OWNING_ACTOR_ROLL_DATA: \"actor-roll\",\n\n    /**\n     * Custom data as defined by the `customDataGetter`\n     */\n    CUSTOM: \"custom\",\n};\n\n/**\n * Getter functions corresponding to the data modes defined in {@link DATA_MODE}\n */\nexport const DATA_GETTERS = {\n    [DATA_MODE.ENTITY_DATA]: (sheet) => sheet.object?.toObject(false),\n    [DATA_MODE.DOCUMENT_DATA]: (sheet) => sheet.object?.toObject(false),\n    [DATA_MODE.ROLL_DATA]: (sheet) => sheet.object?.getRollData(),\n    [DATA_MODE.OWNING_ACTOR_DATA]: (sheet) =>\n        _getSheetDocumentParentActor(sheet)?.toObject(false) ?? _getFallbackActorData(),\n    [DATA_MODE.OWNING_ACTOR_ROLL_DATA]: (sheet) =>\n        _getSheetDocumentParentActor(sheet)?.getRollData() ?? _getFallbackActorRollData(),\n    [DATA_MODE.CUSTOM]: (sheet, customDataGetter) => customDataGetter(sheet),\n};\n\n/**\n * Gets the owning actor of a given `FormApplication`'s document.\n * If the document does not have a parent, or the parent is not an Actor, returns null.\n * @param {FormApplication} sheet\n * @returns {Actor | null}\n * @private\n */\nfunction _getSheetDocumentParentActor(sheet) {\n    const parent = sheet.object?.actor ?? sheet.object?.parent;\n    return parent && parent instanceof Actor ? parent : null;\n}\n\nlet _dummyActors;\n\nfunction _getDummyActors() {\n    if (!_dummyActors) {\n        const cls = getDocumentClass(\"Actor\");\n        _dummyActors = game.system.template.Actor.types.map((type) => new cls({ type, name: \"dummy\" }));\n    }\n    return _dummyActors;\n}\n\n/**\n * The cached merged actor data to use as fallback for unowned documents\n * @type {object}\n * @private\n */\nlet _fallbackActorData;\n\n/**\n * Gets an object containing the merged data of all actor types.\n * @returns {object}\n * @private\n */\nfunction _getFallbackActorData() {\n    if (!_fallbackActorData) {\n        _fallbackActorData = {};\n        for (const actor of _getDummyActors()) {\n            foundry.utils.mergeObject(_fallbackActorData, actor.toObject(false));\n        }\n    }\n    return _fallbackActorData;\n}\n\n/**\n * The cached merged actor roll data to use as fallback for unowned documents\n * @type {object}\n * @private\n */\nlet _fallbackActorRollData;\n\n/**\n * Gets an object containing the merged roll data of all actor types.\n * @returns {object}\n * @private\n */\nfunction _getFallbackActorRollData() {\n    if (!_fallbackActorRollData) {\n        _fallbackActorRollData = {};\n        for (const actor of _getDummyActors()) {\n            foundry.utils.mergeObject(_fallbackActorRollData, actor.getRollData());\n        }\n    }\n    return _fallbackActorRollData;\n}\n\nfunction _getFallbackParentItemRollData(item) {\n    const itemData = item.toObject();\n    const fallbackActorItemRollData = {};\n    const cls = getDocumentClass(\"Item\");\n    for (const actor of _getDummyActors()) {\n        const tempItem = new cls(itemData, { parent: actor });\n        foundry.utils.mergeObject(fallbackActorItemRollData, tempItem.getRollData());\n    }\n    return fallbackActorItemRollData;\n}\n\n/**\n * @typedef {Object} AIPPackageConfig\n * A configuration object describing the sheet classes that AIP should be applied to for this package\n *\n * @property {string} packageName - the name of the package that this AIP config belongs to.\n * @property {AIPSheetClassConfig[]} sheetClasses - an array of sheet class configs registered by this package.\n */\n\n/**\n * @typedef {Object} AIPSheetClassConfig\n * A configuration object describing a specific sheet class and which fields within that sheet should have AIP applied.\n * The default data modes assume that this sheet is a {@link FormApplication} which references a document.\n *\n * @property {string} name - the name of the sheet class\n * @property {AIPFieldConfig[]} fieldConfigs - the fields within this sheet that should have AIP applied\n */\n\n/**\n * @typedef {Object} AIPFieldConfig\n * A configuration object describing a field to which AIP should be applied\n *\n * @property {string} selector - the selector string that should be used to find this field within the containing sheet\n * @property {(string)} [defaultPath] - this path will be used as the default contents of the path field when the Autocompleter is first created\n * @property {boolean} showButton - whether the AIP \"@\" button should be shown for this field.\n * @property {boolean} allowHotkey - whether pressing the \"@\" key on the keyboard should activate the Autocompleter for this field.\n * @property {(string[])} [filteredKeys] - an array of keys that should not be shown in the Autocompleter.\n * @property {DATA_MODE} dataMode - determines what data is provided to the Autocompleter for this field.\n * @property {string} [inlinePrefix] - if provided, this prefix will be inserted in the target field when the Autocompleter is submitted. Otherwise, the default for the chosen `dataMode` is used.\n * @property {(function(Application): object | undefined)} customDataGetter - if `dataMode` is `CUSTOM`, this function will be called to produce the data for the Autocompleter.\n * @property {string} [customInlinePrefix] - deprecated, use `inlinePrefix` instead.\n */\n\n/** @type {AIPPackageConfig[]} */\nexport const PACKAGE_CONFIG = [\n    {\n        // contributed by https://github.com/schultzcole\n        packageName: \"dnd5e\",\n        sheetClasses: [\n            {\n                name: \"ActorSheetFlags\",\n                fieldConfigs: [\"system\", \"data\"].flatMap((key) => [\n                    {\n                        selector: `input[type=\"text\"][name^=\"${key}.bonuses\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.ROLL_DATA,\n                    },\n                ]),\n            },\n            {\n                name: \"ItemSheet5e\",\n                fieldConfigs: [\"system\", \"data\"].flatMap((key) => [\n                    {\n                        selector: `.tab.details input[type=\"text\"][name=\"${key}.attackBonus\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.CUSTOM,\n                        customDataGetter: (sheet) =>\n                            sheet.object.getRollData() ?? _getFallbackActorRollData(sheet.object),\n                        inlinePrefix: \"@\",\n                    },\n                    {\n                        selector: `.tab.details input[type=\"text\"][name^=\"${key}.damage\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.CUSTOM,\n                        customDataGetter: (sheet) =>\n                            sheet.object.getRollData() ?? _getFallbackActorRollData(sheet.object),\n                        inlinePrefix: \"@\",\n                    },\n                    {\n                        selector: `.tab.details input[type=\"text\"][name=\"${key}.formula\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.CUSTOM,\n                        customDataGetter: (sheet) =>\n                            sheet.object.getRollData() ?? _getFallbackParentItemRollData(sheet.object),\n                        inlinePrefix: \"@\",\n                    },\n                ]),\n            },\n            {\n                name: \"ActiveEffectConfig\",\n                fieldConfigs: [\n                    {\n                        selector: `.tab[data-tab=\"effects\"] .key input[type=\"text\"]`,\n                        defaultPath: \"data\",\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.OWNING_ACTOR_DATA,\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        // contributed by https://github.com/MikauSchekzen\n        packageName: \"pf1\",\n        sheetClasses: [\n            {\n                name: \"ItemSheetPF\",\n                fieldConfigs: [\n                    {\n                        selector: `input.formula[type=\"text\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.ROLL_DATA,\n                    },\n                    {\n                        selector: `textarea.context-text`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.ROLL_DATA,\n                    },\n                ],\n            },\n            {\n                name: \"ActorSheetPF\",\n                fieldConfigs: [\n                    {\n                        selector: `input.formula[type=\"text\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.ROLL_DATA,\n                    },\n                    {\n                        selector: `textarea.context-text`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.ROLL_DATA,\n                    },\n                ],\n            },\n            {\n                name: \"ItemActionSheet\",\n                fieldConfigs: [\n                    {\n                        selector: `input.formula[type=\"text\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.ROLL_DATA,\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        // contributed by https://github.com/cyr-\n        packageName: \"sw5e\",\n        sheetClasses: [\n            {\n                name: \"ActorSheetFlags\",\n                fieldConfigs: [\"system\", \"data\"].flatMap((key) => [\n                    {\n                        selector: `input[type=\"text\"][name^=\"${key}.bonuses\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.ROLL_DATA,\n                    },\n                ]),\n            },\n            {\n                name: \"ItemSheet5e\",\n                fieldConfigs: [\"system\", \"data\"].flatMap((key) => [\n                    {\n                        selector: `.tab.details input[type=\"text\"][name=\"${key}.attackBonus\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.CUSTOM,\n                        customDataGetter: (sheet) =>\n                            sheet.object.getRollData() ?? _getFallbackActorRollData(sheet.object),\n                        inlinePrefix: \"@\",\n                    },\n                    {\n                        selector: `.tab.details input[type=\"text\"][name^=\"${key}.damage\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.CUSTOM,\n                        customDataGetter: (sheet) =>\n                            sheet.object.getRollData() ?? _getFallbackActorRollData(sheet.object),\n                        inlinePrefix: \"@\",\n                    },\n                    {\n                        selector: `.tab.details input[type=\"text\"][name=\"${key}.formula\"]`,\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.CUSTOM,\n                        customDataGetter: (sheet) =>\n                            sheet.object.getRollData() ?? _getFallbackActorRollData(sheet.object),\n                        inlinePrefix: \"@\",\n                    },\n                ]),\n            },\n            {\n                name: \"ActiveEffectConfig\",\n                fieldConfigs: [\n                    {\n                        selector: `.tab[data-tab=\"effects\"] .key input[type=\"text\"]`,\n                        defaultPath: \"data\",\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.OWNING_ACTOR_DATA,\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        packageName: \"ds4\",\n        sheetClasses: [\n            {\n                name: \"ActiveEffectConfig\",\n                fieldConfigs: [\n                    {\n                        selector: `.tab[data-tab=\"effects\"] .key input[type=\"text\"]`,\n                        defaultPath: \"data\",\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.OWNING_ACTOR_DATA,\n                    },\n                    {\n                        selector: `.tab[data-tab=\"effects\"] .value input[type=\"text\"]`,\n                        defaultPath: \"data\",\n                        showButton: true,\n                        allowHotkey: true,\n                        dataMode: DATA_MODE.OWNING_ACTOR_DATA,\n                        inlinePrefix: \"@\",\n                    },\n                ],\n            },\n        ],\n    },\n];\n","import { MODULE_ABBREVIATION, MODULE_NAME } from \"./const\";\n\nconst loggingContext = MODULE_ABBREVIATION;\nconst loggingSeparator = \"|\";\n\n/**\n * Gets a logging function for the requested log level.\n * @typedef {'debug' | 'info' | 'warn' | 'error'} LogLevel\n * @typedef {(...args: unknown[]) => void} LoggingFunction\n * @param {LogLevel} [type = 'info'] - The log level of the requested logger\n * @returns {LoggingFunction}\n */\nfunction getLoggingFunction(type = \"info\") {\n    const log = console[type];\n    if (type === \"debug\") {\n        return (...data) => {\n            if (game.settings.get(MODULE_NAME, \"debug\")) {\n                log(loggingContext, loggingSeparator, ...data);\n            }\n        };\n    }\n    return (...data) => log(loggingContext, loggingSeparator, ...data);\n}\n\n/**\n * A singleton logger object.\n */\nexport const logger = Object.freeze({\n    debug: getLoggingFunction(\"debug\"),\n    info: getLoggingFunction(\"info\"),\n    warn: getLoggingFunction(\"warn\"),\n    error: getLoggingFunction(\"error\"),\n    getLoggingFunction,\n});\n","import { logger } from \"./logger\";\nimport { DATA_GETTERS, DATA_MODE } from \"./package-config\";\n\nexport class Autocompleter extends Application {\n    /**\n     *\n     * @param {object} data\n     * @param {HTMLInputElement} target\n     * @param {string} targetKey\n     * @param {import(\"./package-config\").AIPFieldConfig} fieldConfig\n     * @param {() => void} onClose\n     * @param {object} options\n     */\n    constructor(data, target, targetKey, fieldConfig, onClose, options) {\n        super(options);\n\n        this.targetData = data;\n        this.target = target;\n        this.targetKey = targetKey;\n\n        this.filteredKeys = fieldConfig.filteredKeys ?? null;\n        this.mode = fieldConfig.dataMode;\n\n        let inlinePrefix;\n        if (fieldConfig.customInlinePrefix !== undefined) {\n            logger.warn(\n                \"You are using customInlinePrefix which has been deprecated in favor of inlinePrefix and will be removed in a future version.\",\n            );\n            inlinePrefix = fieldConfig.customInlinePrefix;\n        }\n        inlinePrefix = fieldConfig.inlinePrefix ?? inlinePrefix;\n\n        switch (this.mode) {\n            case DATA_MODE.ROLL_DATA:\n            case DATA_MODE.OWNING_ACTOR_ROLL_DATA:\n                this.keyPrefix = inlinePrefix ?? \"@\";\n                break;\n            default:\n                this.keyPrefix = inlinePrefix ?? \"\";\n                break;\n        }\n\n        this.rawPath = fieldConfig.defaultPath?.length ? this._keyWithTrailingDot(fieldConfig.defaultPath) : \"\";\n        this.onClose = onClose;\n\n        /**\n         * The index of the currently selected candidate.\n         * @type {number | null}\n         */\n        this.selectedCandidateIndex = null;\n\n        // Currently unused\n        this.targetSelectionStart = null;\n        this.targetSelectionEnd = null;\n    }\n\n    /**\n     * Given a sheet, the data mode, and, if necessary, a custom data getter, return the appropriate data for that data mode\n     * @param {Application} sheet\n     * @param {import(\"./package-config\").AIPFieldConfig} options\n     * @returns {object | null}\n     */\n    static getData(sheet, { dataMode, customDataGetter = null }) {\n        if (dataMode === DATA_MODE.ENTITY_DATA) {\n            logger.warn(\n                \"You are using DATA_MODE.ENTITY_DATA which has been deprecated in favor of DATA_MODE.DOCUMENT_DATA and will be removed in a future version.\",\n            );\n        }\n\n        const getter = DATA_GETTERS[dataMode];\n        if (!getter) throw new Error(`Unrecognized data mode \"${dataMode}\"`);\n        return getter(sheet, customDataGetter);\n    }\n\n    /** @override */\n    static get defaultOptions() {\n        return mergeObject(super.defaultOptions, {\n            classes: [\"autocompleter\"],\n            template: \"./modules/autocomplete-inline-properties/templates/autocompleter.hbs\",\n            minWidth: 300,\n            height: \"auto\",\n        });\n    }\n\n    /** @override */\n    get popOut() {\n        return true;\n    }\n\n    /**\n     * If the given key does not terminate in a primitive value, return the key with a dot appended, otherwise assume the key is final.\n     * If the key is not valid (does not exist in targetData), return the key with no modification\n     * @param {string} key\n     * @returns {string}\n     * @private\n     */\n    _keyWithTrailingDot(key) {\n        const data = getProperty(this.targetData, key);\n        return key + (data && typeof data === \"object\" ? \".\" : \"\");\n    }\n\n    /**\n     * The Autocompleter path textbox\n     * @returns {HTMLInputElement}\n     */\n    get inputElement() {\n        return this.element?.[0]?.querySelector(\"input.aip-input\");\n    }\n\n    /**\n     * The current raw path split into an array of path elements\n     * @returns {string[]}\n     */\n    get splitPath() {\n        return this.rawPath.split(\".\");\n    }\n\n    /**\n     * The current raw path, with any partially entered key trimmed off\n     * @returns {string}\n     */\n    get pathWithoutPartial() {\n        return this.splitPath.slice(0, -1).join(\".\");\n    }\n\n    /**\n     * Gets the target data at the current rawPath, formatting the keys to include the full path until this point.\n     * @returns {{ key: string, value: any }[]}\n     * @private\n     */\n    get _dataAtPath() {\n        const path = this.pathWithoutPartial;\n        const value = path?.length ? getProperty(this.targetData, path) : this.targetData;\n        if (value === null || value === undefined) return [];\n        return Object.entries(value)\n            .map(([key, value]) => ({\n                key: path + (path.length ? \".\" : \"\") + key,\n                value,\n            }))\n            .filter(({ key }) => {\n                if (!this.filteredKeys) return true;\n                return !this.filteredKeys.some((filter) => key.startsWith(filter));\n            });\n    }\n\n    /**\n     * Given a key value pair, \"stringify\" and format the value to be appropriate to display in the Autocompleter\n     * @param {string} key\n     * @param {any} value\n     * @returns {{ key: string, value: string }}\n     * @private\n     */\n    static _formatData({ key, value }) {\n        let formattedValue;\n        switch (typeof value) {\n            case \"undefined\":\n                formattedValue = typeof value;\n                break;\n            case \"object\":\n                if (!value) {\n                    formattedValue = \"null\";\n                } else {\n                    formattedValue = \"{}\";\n                }\n                break;\n            case \"string\":\n                formattedValue = `\"${value}\"`;\n                break;\n            default:\n                formattedValue = value.toString();\n        }\n        return { key, value: formattedValue };\n    }\n\n    /**\n     * Returns the sorted data at the current rawPath.\n     * Sorting is done lexicographically, except that primitive values are always sorted first\n     * @returns {{ key: string, value: any }[]}\n     */\n    get sortedDataAtPath() {\n        return this._dataAtPath.sort((a, b) => {\n            if (typeof a.value !== \"object\" && typeof b.value !== \"object\") return a.key.localeCompare(b.key);\n            if (typeof a.value !== \"object\") return -1;\n            if (typeof b.value !== \"object\") return 1;\n\n            return a.key.localeCompare(b.key);\n        });\n    }\n\n    /**\n     * Sorted data in which the values have been formatted appropriately for displaying in the Autocompleter\n     * @returns {{key: string, value: string}[]}\n     */\n    get sortedDataAtPathFormatted() {\n        return this.sortedDataAtPath.map(Autocompleter._formatData);\n    }\n\n    /**\n     * The Autocompleter list entry that most closely matches the current `rawPath`\n     * @returns {{ key: string, value: any } | undefined}\n     */\n    get currentBestMatch() {\n        return this.sortedDataAtPath.find(({ key }) => key.startsWith(this.rawPath));\n    }\n\n    /**\n     * The index of the Autocompleter list entry that most closely matches the current `rawPath`, respective to the\n     * `sortedDataAtPath`.\n     */\n    get indexOfCurrentBestMatch() {\n        return this.sortedDataAtPath.map(({ key }) => key).indexOf(this.currentBestMatch?.key);\n    }\n\n    /**\n     * The Autocompleter list entry that has been selected, if any, otherwise the one that most closely matchs the\n     * current `rawPath`.\n     */\n    get selectedOrBestMatch() {\n        return this.selectedCandidateIndex !== null\n            ? this.sortedDataAtPath[this.selectedCandidateIndex]\n            : this.currentBestMatch;\n    }\n\n    /**\n     * Assigns this Autocompleter a new target input element (in the case of a sheet re-render, for instance) and\n     * re-renders.\n     * @param newTarget\n     */\n    retarget(newTarget) {\n        this.target = newTarget;\n        this.selectedCandidateIndex = null;\n        this.render(false);\n        this.bringToTop();\n    }\n\n    /** @override */\n    getData() {\n        const escapedCombinedPath = \"^\" + this.rawPath.replace(/\\./, \"\\\\.\");\n        let highlightedEntry = this.selectedCandidateIndex;\n        const dataEntries = this.sortedDataAtPathFormatted.map(({ key, value }, index) => {\n            const match = key.match(escapedCombinedPath)?.[0];\n            if (!match) return { key, value };\n            const matchedKey = key.slice(0, match.length);\n            const unmatchedKey = key.slice(match.length);\n\n            if (highlightedEntry === null) highlightedEntry = index;\n\n            return {\n                key: `<span class=\"match\">${matchedKey}</span>${unmatchedKey}`,\n                value,\n            };\n        });\n\n        highlightedEntry = highlightedEntry ?? 0;\n        return {\n            keyPrefix: this.keyPrefix,\n            path: this.rawPath,\n            dataEntries,\n            highlightedEntry,\n        };\n    }\n\n    /** @override */\n    activateListeners($html) {\n        super.activateListeners($html);\n        const html = $html[0];\n\n        const input = html.querySelector(`input.aip-input`);\n        input.focus();\n        input.setSelectionRange(input.value.length, input.value.length);\n\n        input.addEventListener(\"focusout\", () => {\n            this.close();\n        });\n        input.addEventListener(\"input\", this._onInputChanged.bind(this));\n        input.addEventListener(\"keydown\", this._onInputKeydown.bind(this));\n\n        const insert = html.querySelector(`form.aip-form`);\n        insert.addEventListener(\"submit\", this._onSubmit.bind(this));\n    }\n\n    /** @override */\n    async _render(force = false, options = {}) {\n        // Set location to be just above the target\n        const targetRect = this.target.getBoundingClientRect();\n        mergeObject(this.position, {\n            width: targetRect.width,\n            left: targetRect.left,\n        });\n        return super._render(force, options).then((result) => {\n            this.setPosition({ top: targetRect.top - this.element[0].getBoundingClientRect().height - 5 });\n            this.bringToTop();\n            return result;\n        });\n    }\n\n    /** @override */\n    async _renderOuter(options) {\n        const html = await super._renderOuter(options);\n        html[0].querySelector(\"header.window-header\").remove();\n        return html;\n    }\n\n    /**\n     * Overridden in order to avoid an issue with {@link Application._replaceHTML} trying to set the window title, which\n     * doesn't exist. Additionally, this is always a popOut window, so we can omit the non-popOut case.\n     * @override\n     */\n    _replaceHTML(element, html) {\n        if (!element.length) return;\n        element.find(\".window-content\").html(html);\n    }\n\n    /** @override */\n    async close(options = {}) {\n        this.onClose();\n        return super.close(options);\n    }\n\n    /**\n     * @private\n     */\n    _onInputChanged() {\n        const input = this.inputElement;\n        this.rawPath = input.value;\n        this.selectedCandidateIndex = null;\n        this.render(false);\n    }\n\n    /**\n     * @param {KeyboardEvent} event\n     * @private\n     */\n    _onInputKeydown(event) {\n        switch (event.key) {\n            case \"Escape\": {\n                this.close();\n                return;\n            }\n            case \"ArrowUp\": {\n                event.preventDefault();\n                event.stopPropagation();\n                this.selectedCandidateIndex =\n                    this.sortedDataAtPath.length > 0\n                        ? ((this.selectedCandidateIndex ?? this.indexOfCurrentBestMatch) + 1) %\n                          this.sortedDataAtPath.length\n                        : null;\n                this.render(false);\n                return;\n            }\n            case \"ArrowDown\": {\n                event.preventDefault();\n                event.stopPropagation();\n                this.selectedCandidateIndex =\n                    this.sortedDataAtPath.length > 0\n                        ? ((this.selectedCandidateIndex ?? this.indexOfCurrentBestMatch) -\n                              1 +\n                              this.sortedDataAtPath.length) %\n                          this.sortedDataAtPath.length\n                        : null;\n                this.render(false);\n                return;\n            }\n            case \"Tab\": {\n                event.preventDefault();\n                event.stopPropagation();\n                const selectedOrBestMatch = this.selectedOrBestMatch;\n                if (!selectedOrBestMatch) {\n                    ui.notifications.warn(`The key \"${this.rawPath}\" does not match any known keys.`);\n                    this.rawPath = \"\";\n                } else {\n                    this.rawPath = this._keyWithTrailingDot(selectedOrBestMatch.key);\n                }\n                this.selectedCandidateIndex = null;\n                this.render(false);\n                return;\n            }\n        }\n    }\n\n    /**\n     * @param {Event} event\n     * @private\n     */\n    async _onSubmit(event) {\n        event.preventDefault();\n        const oldValue = this.target.value;\n\n        let spliceStart = oldValue.length;\n        let spliceEnd = oldValue.length;\n        if (Number.isNumeric(this.targetSelectionStart) && Number.isNumeric(this.targetSelectionEnd)) {\n            spliceStart = Math.min(this.targetSelectionStart, this.targetSelectionEnd);\n            spliceEnd = Math.max(this.targetSelectionStart, this.targetSelectionEnd);\n        }\n\n        const preString = oldValue.slice(0, spliceStart);\n        const preSpacer = !preString.length || preString[preString.length - 1] === \" \" ? \"\" : \" \";\n        const postString = oldValue.slice(spliceEnd);\n        const postSpacer = !postString.length || postString[postString.length - 1] === \" \" ? \"\" : \" \";\n        const insert = this.selectedOrBestMatch?.key ?? this.inputElement.value;\n        const fullInsert = `${preSpacer}${this.keyPrefix}${insert}${postSpacer}`;\n\n        this.target.focus();\n        await this.close();\n\n        const inputEvent = new InputEvent(\"input\", {\n            bubbles: true,\n            data: fullInsert,\n            inputType: \"insertText\",\n            cancelable: true,\n        });\n\n        const shouldPerformInsertion = this.target.dispatchEvent(inputEvent);\n\n        if (shouldPerformInsertion) {\n            this.target.value = `${preString}${fullInsert}${postString}`;\n        }\n    }\n}\n","import { Autocompleter } from \"./autocompleter\";\nimport { logger } from \"./logger\";\nimport { PACKAGE_CONFIG } from \"./package-config\";\n\n/**\n * Register autocompletion for the given `packageConfig`\n * @param {import(\"./package-config\").AIPPackageConfig[]} packageConfig\n * @returns {void}\n */\nexport function registerFields(packageConfig) {\n    if (!packageConfig.find((pkg) => pkg.packageName === game.system.id)) {\n        ui.notifications.warn(game.i18n.localize(\"AIP.SystemNotSupported\"));\n    }\n\n    for (const pkg of packageConfig) {\n        if (pkg.packageName !== game.system.id && !game.modules.get(pkg.packageName)?.active) continue;\n\n        for (const sheetClass of pkg.sheetClasses) {\n            logger.debug(`Registering for \"render${sheetClass.name}\" hook event`);\n            Hooks.on(`render${sheetClass.name}`, (app) => {\n                registerFieldConfigs(app, sheetClass.fieldConfigs);\n            });\n        }\n    }\n}\n\n/**\n * Refresh the package config for the given app according to the package config.\n * @param {Application} app The application for which to refersh the package config\n * @param {string} [packageName] If given, only the entry in the package config for the package will be considered\n * @returns {void}\n */\nexport function refreshPackageConfig(app, packageName) {\n    const pkgs = PACKAGE_CONFIG.filter(\n        (pkg) =>\n            (pkg.packageName === game.system.id || game.modules.get(pkg.packageName)?.active) &&\n            (packageName === undefined || packageName === pkg.packageName),\n    );\n\n    const sheetClassNames = app.constructor._getInheritanceChain().map((cls) => cls.name);\n    const fieldConfigs = pkgs\n        .flatMap((pkg) => pkg.sheetClasses)\n        .filter((sheetClass) => sheetClassNames.includes(sheetClass.name))\n        .flatMap((sheetClass) => sheetClass.fieldConfigs);\n\n    registerFieldConfigs(app, fieldConfigs);\n}\n\n/**\n * Register field configs for a given `app`.\n * @param {Application} app\n * @param {import(\"./package-config\").AIPFieldConfig[]} fieldConfigs\n */\nfunction registerFieldConfigs(app, fieldConfigs) {\n    for (const fieldDef of fieldConfigs) {\n        registerFieldConfig(app, fieldDef);\n    }\n}\n\n/** @type {Autocompleter | null} */\nlet _autocompleter = null;\n/** @type {HTMLButtonElement | null} */\nlet _summonerButton = null;\n\n/**\n * Register autocompletion for a field according to the given `fieldConfig`.\n *\n * @param {Application} app                                       - The `Application` on which the selector should be registered\n * @param {import(\"./package-config\").AIPFieldConfig} fieldConfig - The configuration object describing the field\n */\nfunction registerFieldConfig(app, fieldConfig) {\n    /** @type {HTMLElement | undefined} */\n    const sheetElement = app._element?.[0];\n    if (!sheetElement) {\n        logger.debug(\"Application does not have an HTML element, skipping registering field.\", app, fieldConfig);\n    }\n\n    // Check that we get valid data for the given application. If not, skip adding Autocomplete to this field.\n    try {\n        const data = Autocompleter.getData(app, fieldConfig);\n        if (!data) {\n            logger.debug(\"Specified data for field not found\", app, fieldConfig);\n            return;\n        }\n    } catch (e) {\n        logger.error(\"Error registering AIP field\", e, app, fieldConfig);\n        return;\n    }\n\n    const elements = Array.from(sheetElement.querySelectorAll(fieldConfig.selector)).filter(\n        (e) => e.tagName === \"TEXTAREA\" || (e.tagName === \"INPUT\" && e.type === \"text\"),\n    );\n    for (const targetElement of elements) {\n        const key = app.appId + targetElement.name;\n\n        _removeOldEventListeners(targetElement);\n\n        if (fieldConfig.showButton && !targetElement.disabled) {\n            // Show the summoner button when the user mouses over this field\n            targetElement.addEventListener(\n                \"mouseenter\",\n                (targetElement.aipOnMouseEnter = function onMouseEnter() {\n                    if (!_summonerButton) {\n                        // Create button\n                        _summonerButton = document.createElement(\"button\");\n                        _summonerButton.classList.add(\"autocompleter-summon\");\n                        _summonerButton.innerHTML = `<i class=\"fas fa-at autocompleter-summon-icon\"></i>`;\n\n                        document.body.appendChild(_summonerButton);\n                    }\n\n                    // Position button\n                    const targetElementRect = targetElement.getBoundingClientRect();\n                    _summonerButton.style.width = targetElementRect.height - 4 + \"px\";\n                    _summonerButton.style.height = targetElementRect.height - 4 + \"px\";\n                    _summonerButton.style.top = targetElementRect.top + 2 + \"px\";\n                    const buttonElementRect = _summonerButton.getBoundingClientRect();\n                    _summonerButton.style.left = targetElementRect.right - buttonElementRect.height - 4 + \"px\";\n                    _summonerButton.firstElementChild.style.fontSize = buttonElementRect.height - 8 + \"px\";\n\n                    _summonerButton.addEventListener(\"click\", function (event) {\n                        event.preventDefault();\n                        _activateAutocompleter(targetElement, key, fieldConfig, app);\n                    });\n                    _summonerButton.addEventListener(\"mouseout\", (event) => {\n                        if (\n                            !event.relatedTarget?.closest(\"i.autocompleter-summon-icon\") &&\n                            !event.relatedTarget?.closest(fieldConfig.selector) &&\n                            !event.relatedTarget?.closest(\"button.autocompleter-summon\")\n                        ) {\n                            _removeSummonerButton();\n                        }\n                    });\n                }),\n                false,\n            );\n\n            // Destroy the summoner button when the user moves away from this field\n            targetElement.addEventListener(\n                \"mouseout\",\n                (targetElement.aipOnMouseOut = function onMouseOut(event) {\n                    targetElement.clearAIPOnMouseOut = function () {\n                        targetElement.removeEventListener(\"mouseout\", onMouseOut);\n                    };\n                    if (!event.relatedTarget?.closest(\"button.autocompleter-summon\")) {\n                        _removeSummonerButton();\n                    }\n                }),\n                false,\n            );\n\n            // Destroy the summoner button when the user starts typing in the target element\n            targetElement.addEventListener(\"input\", _removeSummonerButton);\n\n            // Destroy the summoner button when the user scrolls this sheet\n            sheetElement.addEventListener(\"wheel\", _removeSummonerButton, { passive: true });\n        }\n\n        if (fieldConfig.allowHotkey) {\n            // If the user presses the \"@\" key while the target element is focused, open the Autocompleter\n            targetElement.addEventListener(\n                \"keydown\",\n                (targetElement.aipOnKeyDown = function onKeyDown(event) {\n                    if (event.key === \"@\") {\n                        event.preventDefault();\n                        _activateAutocompleter(targetElement, key, fieldConfig, app);\n                    }\n                }),\n                false,\n            );\n        }\n\n        // If an autocompleter already exists with this key (because the target sheet is being re-rendered),\n        // retarget the autocompleter to the newly rendered target element.\n        if (_autocompleter?.targetKey === key) {\n            _autocompleter.retarget(targetElement);\n        }\n    }\n}\n\n/**\n * Removes any old event listeners from the target element.\n * @param {HTMLElement} targetElement - The element from which to remove old event listeners\n * @private\n */\nfunction _removeOldEventListeners(targetElement) {\n    if (targetElement.aipOnMouseEnter !== undefined) {\n        targetElement.removeEventListener(\"mouseenter\", targetElement.aipOnMouseEnter, false);\n        delete targetElement.aipOnMouseEnter;\n    }\n    if (targetElement.aipOnMouseOut !== undefined) {\n        targetElement.removeEventListener(\"mouseout\", targetElement.aipOnMouseOut, false);\n        delete targetElement.aipOnMouseOut;\n    }\n    if (targetElement.aipOnKeyDown !== undefined) {\n        targetElement.removeEventListener(\"keydown\", targetElement.aipOnKeyDown, false);\n        delete targetElement.aipOnKeyDown;\n    }\n}\n\n/**\n * Removes the summoner button if it currently exists.\n * @private\n */\nfunction _removeSummonerButton() {\n    _summonerButton?.remove();\n    _summonerButton = null;\n}\n\n/**\n * Creates a new autocompleter, or if one already exists, closes it and creates a new one targeting the provided target element.\n * @param {HTMLInputElement} targetElement\n * @param {string} targetKey\n * @param {import(\"./package-config\").AIPFieldConfig} fieldConfig\n * @param {Application} app\n * @private\n */\nfunction _activateAutocompleter(targetElement, targetKey, fieldConfig, app) {\n    _autocompleter?.close();\n\n    // Otherwise, create a new autocompleter\n    const data = Autocompleter.getData(app, fieldConfig);\n    _autocompleter = new Autocompleter(data, targetElement, targetKey, fieldConfig, () => {\n        // When this Autocompleter gets closed, clean up the registration for this element.\n        _autocompleter = null;\n    }).render(true);\n}\n","import { MODULE_NAME } from \"./const\";\nimport { DATA_MODE, DATA_GETTERS, PACKAGE_CONFIG } from \"./package-config\";\nimport { refreshPackageConfig } from \"./field-registration\";\n\nconst API = {\n    CONST: {\n        DATA_MODE,\n        DATA_GETTERS,\n    },\n    PACKAGE_CONFIG,\n    refreshPackageConfig,\n};\n\nexport function defineAPI() {\n    const aip = game.modules.get(MODULE_NAME);\n    aip.API = API;\n}\n","import { defineAPI } from \"../api\";\nimport { registerSettings } from \"../settings\";\n\nexport function registerForInitHook() {\n    Hooks.on(\"init\", init);\n}\n\nfunction init() {\n    defineAPI();\n    registerSettings();\n}\n","import { MODULE_NAME } from \"./const\";\n\nexport function registerSettings() {\n    game.settings.register(MODULE_NAME, \"debug\", {\n        name: \"AIP.DebugName\",\n        hint: \"AIP.DebugHint\",\n        scope: \"client\",\n        config: true,\n        type: Boolean,\n        default: false,\n    });\n}\n","import { PACKAGE_CONFIG } from \"../package-config\";\nimport { logger } from \"../logger\";\nimport { registerFields } from \"../field-registration\";\n\nexport function registerForSetupHook() {\n    Hooks.on(\"setup\", setup);\n}\n\nfunction setup() {\n    CONFIG.debug.aip = false;\n    logger.info(\"Setting up Autocomplete Inline Properties\");\n\n    Hooks.callAll(\"aipSetup\", PACKAGE_CONFIG);\n    registerFields(PACKAGE_CONFIG);\n    Hooks.callAll(\"aipReady\");\n}\n","import { registerForInitHook } from \"./init\";\nimport { registerForSetupHook } from \"./setup\";\n\nexport function registerForHooks() {\n    registerForInitHook();\n    registerForSetupHook();\n}\n","import { registerForHooks } from \"./hooks/hooks\";\n\nregisterForHooks();\n"],"names":["MODULE_NAME","DATA_MODE","ENTITY_DATA","DOCUMENT_DATA","ROLL_DATA","OWNING_ACTOR_DATA","OWNING_ACTOR_ROLL_DATA","CUSTOM","DATA_GETTERS","sheet","object","toObject","getRollData","_getSheetDocumentParentActor","_getFallbackActorData","_fallbackActorData","actor","_getDummyActors","foundry","utils","mergeObject","_getFallbackActorRollData","customDataGetter","parent","Actor","_dummyActors","_fallbackActorRollData","cls","getDocumentClass","game","system","template","types","map","type","name","PACKAGE_CONFIG","packageName","sheetClasses","fieldConfigs","flatMap","key","selector","showButton","allowHotkey","dataMode","inlinePrefix","_getFallbackParentItemRollData","item","itemData","fallbackActorItemRollData","tempItem","defaultPath","getLoggingFunction","log","console","data","settings","get","logger","Object","freeze","debug","info","warn","error","Autocompleter","Application","constructor","target","targetKey","fieldConfig","onClose","options","super","this","targetData","filteredKeys","mode","undefined","customInlinePrefix","keyPrefix","rawPath","length","_keyWithTrailingDot","selectedCandidateIndex","targetSelectionStart","targetSelectionEnd","static","getter","Error","defaultOptions","classes","minWidth","height","popOut","getProperty","inputElement","element","querySelector","splitPath","split","pathWithoutPartial","slice","join","_dataAtPath","path","value","entries","filter","some","startsWith","formattedValue","toString","sortedDataAtPath","sort","a","b","localeCompare","sortedDataAtPathFormatted","_formatData","currentBestMatch","find","indexOfCurrentBestMatch","indexOf","selectedOrBestMatch","retarget","newTarget","render","bringToTop","getData","escapedCombinedPath","replace","highlightedEntry","dataEntries","index","match","matchedKey","unmatchedKey","activateListeners","$html","html","input","focus","setSelectionRange","addEventListener","close","_onInputChanged","bind","_onInputKeydown","_onSubmit","async","force","targetRect","getBoundingClientRect","position","width","left","_render","then","result","setPosition","top","_renderOuter","remove","_replaceHTML","event","preventDefault","stopPropagation","ui","notifications","oldValue","spliceStart","spliceEnd","Number","isNumeric","Math","min","max","preString","preSpacer","postString","postSpacer","insert","fullInsert","inputEvent","InputEvent","bubbles","inputType","cancelable","dispatchEvent","registerFieldConfigs","app","fieldDef","registerFieldConfig","_autocompleter","_summonerButton","sheetElement","_element","e","elements","Array","from","querySelectorAll","tagName","targetElement","appId","_removeOldEventListeners","disabled","aipOnMouseEnter","onMouseEnter","document","createElement","classList","add","innerHTML","body","appendChild","targetElementRect","style","buttonElementRect","right","firstElementChild","fontSize","_activateAutocompleter","relatedTarget","closest","_removeSummonerButton","aipOnMouseOut","onMouseOut","clearAIPOnMouseOut","removeEventListener","passive","aipOnKeyDown","onKeyDown","API","CONST","refreshPackageConfig","pkgs","pkg","id","modules","active","sheetClassNames","_getInheritanceChain","sheetClass","includes","init","defineAPI","registerSettings","register","hint","scope","config","Boolean","default","setup","CONFIG","aip","Hooks","callAll","registerFields","packageConfig","i18n","localize","on","registerForHooks","registerForInitHook","registerForSetupHook"],"mappings":"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"}