{"version":3,"file":"worker.js","mappings":"2GACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,EAAU,CAEtC,IAAIC,EAAeH,EAAyBE,CAAQ,EACpD,GAAIC,IAAiB,OACpB,OAAOA,EAAa,QAGrB,IAAIC,EAASJ,EAAyBE,CAAQ,EAAI,CAGjD,QAAS,CAAC,CACX,EAGA,OAAAG,EAAoBH,CAAQ,EAAE,KAAKE,EAAO,QAASA,EAAQA,EAAO,QAASH,CAAmB,EAGvFG,EAAO,OACf,CAlBS,EAAAH,EAAA,uBAqBTA,EAAoB,EAAII,G,KCzBxB,IAAIC,EAAW,OAAO,eAAkBC,GAAS,OAAO,eAAeA,CAAG,EAAMA,GAASA,EAAI,UACzFC,EAOJP,EAAoB,EAAI,SAASQ,EAAOC,EAAM,CAG7C,GAFGA,EAAO,IAAGD,EAAQ,KAAKA,CAAK,GAC5BC,EAAO,GACP,OAAOD,GAAU,UAAYA,IAC3BC,EAAO,GAAMD,EAAM,YACnBC,EAAO,IAAO,OAAOD,EAAM,MAAS,YAAY,OAAOA,EAE5D,IAAIE,EAAK,OAAO,OAAO,IAAI,EAC3BV,EAAoB,EAAEU,CAAE,EACxB,IAAIC,EAAM,CAAC,EACXJ,EAAiBA,GAAkB,CAAC,KAAMF,EAAS,CAAC,CAAC,EAAGA,EAAS,CAAC,CAAC,EAAGA,EAASA,CAAQ,CAAC,EACxF,QAAQO,EAAUH,EAAO,GAAKD,EAAO,OAAOI,GAAW,UAAY,CAAC,CAACL,EAAe,QAAQK,CAAO,EAAGA,EAAUP,EAASO,CAAO,EAC/H,OAAO,oBAAoBA,CAAO,EAAE,QAASC,GAASF,EAAIE,CAAG,EAAI,IAAOL,EAAMK,CAAG,CAAG,EAErF,OAAAF,EAAI,QAAa,IAAOH,EACxBR,EAAoB,EAAEU,EAAIC,CAAG,EACtBD,CACR,C,KCxBAV,EAAoB,EAAI,CAACc,EAASC,IAAe,CAChD,QAAQF,KAAOE,EACXf,EAAoB,EAAEe,EAAYF,CAAG,GAAK,CAACb,EAAoB,EAAEc,EAASD,CAAG,GAC/E,OAAO,eAAeC,EAASD,EAAK,CAAE,WAAY,GAAM,IAAKE,EAAWF,CAAG,CAAE,CAAC,CAGjF,ECPAb,EAAoB,EAAI,CAAC,EAGzBA,EAAoB,EAAKgB,GACjB,QAAQ,IAAI,OAAO,KAAKhB,EAAoB,CAAC,EAAE,OAAO,CAACiB,EAAUJ,KACvEb,EAAoB,EAAEa,CAAG,EAAEG,EAASC,CAAQ,EACrCA,GACL,CAAC,CAAC,CAAC,ECNPjB,EAAoB,EAAKgB,GAEjB,YCHRhB,EAAoB,EAAK,UAAW,CACnC,GAAI,OAAO,YAAe,SAAU,OAAO,WAC3C,GAAI,CACH,OAAO,MAAQ,IAAI,SAAS,aAAa,EAAE,CAC5C,MAAE,CACD,GAAI,OAAO,QAAW,SAAU,OAAO,MACxC,CACD,EAAG,ECPHA,EAAoB,EAAI,CAACM,EAAKY,IAAU,OAAO,UAAU,eAAe,KAAKZ,EAAKY,CAAI,ECCtFlB,EAAoB,EAAKc,GAAY,CACjC,OAAO,OAAW,KAAe,OAAO,aAC1C,OAAO,eAAeA,EAAS,OAAO,YAAa,CAAE,MAAO,QAAS,CAAC,EAEvE,OAAO,eAAeA,EAAS,aAAc,CAAE,MAAO,EAAK,CAAC,CAC7D,ECNAd,EAAoB,EAAI,4B,KCIxB,IAAImB,EAAkB,CACrB,IAAK,CACN,EAGIC,EAAe,EAACC,GAAS,CAC5B,GAAI,CAACC,EAAUC,EAAaC,CAAO,EAAIH,EACvC,QAAQpB,KAAYsB,EAChBvB,EAAoB,EAAEuB,EAAatB,CAAQ,IAC7CD,EAAoB,EAAEC,CAAQ,EAAIsB,EAAYtB,CAAQ,GAIxD,IADGuB,GAASA,EAAQxB,CAAmB,EACjCsB,EAAS,QACdH,EAAgBG,EAAS,IAAI,CAAC,EAAI,EACnCG,EAA2BJ,CAAI,CAChC,EAXmB,gBAYnBrB,EAAoB,EAAE,EAAI,CAACgB,EAASC,IAAa,CAE5CE,EAAgBH,CAAO,GAEzB,cAAchB,EAAoB,EAAIA,EAAoB,EAAEgB,CAAO,CAAC,CAGvE,EAEA,IAAIU,EAAqB,KAAK,oCAAyC,KAAK,qCAA0C,CAAC,EACnHD,EAA6BC,EAAmB,KAAK,KAAKA,CAAkB,EAChFA,EAAmB,KAAON,C,cChCX,MAAMO,CAAU,CAM7B,YAAaC,EAAa,CACxB,GAAI,CAACA,GAAeA,GAAa,SAAW,EAC1C,MAAM,IAAI,MAAM,wCAAyC,EAG3D,MAAMC,EAAQ,CAAC,GAAG,IAAI,IAAID,EAAY,YAAY,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE,KAAK,EAEtE,GAAIC,EAAM,SAAW,EACnB,MAAM,IAAI,MAAM,uBAAuB,EAGzC,OAAOA,EAAM,IAAIC,GAAQA,EAAK,KAAK,CAAC,CACtC,CAYA,MAAM,YAAaC,EAAU,CAAE,KAAM,KAAM,KAAM,IAAK,EAAG,CACvD,KAAM,CAAE,UAAAC,CAAU,EAAI,MAAM,kCACtBC,EAAQ,IAAID,EAAU,KAAK,CAC/B,WAAY,MACd,CAAC,EAED,GAAID,EAAQ,KAAM,CAChB,MAAMG,EAAW,MAAM,MAAMH,EAAQ,IAAI,EACzC,OAAIG,EAAS,IACXD,EAAM,SAAS,MAAMC,EAAS,KAAK,CAAC,EAC7BD,GAEF,IACT,CAEA,OAAIF,EAAQ,MACVE,EAAM,SAAS,KAAK,MAAMF,EAAQ,IAAI,CAAC,EAGlCE,CACT,CASA,WAAYE,EAAcF,EAAOG,EAAc,CAAC,EAAG,CACjD,MAAML,EAAU,CACd,WAAY,IACZ,eAAgB,GAChB,SAAU,KACV,eAAgB,GAChB,aAAc,IACd,QAAS,WACT,GAAGK,CACL,EAEMC,EAASJ,EAAM,MAAME,EAAcJ,CAAO,EAEhD,eAAQ,KAAK,4BAA4BM,EAAO,+BAA+BA,EAAO,OAAO,EAEtFJ,CACT,CAMA,aAAa,WAAa,CACxB,MAAMK,EAAS,CACb,WAAY,KACZ,cAAe,IACjB,EAEMC,EAAa,MAAM,MAAM,8BAA8B,EACvDC,EAAgB,MAAM,MAAM,sCAAsC,EAExE,OAAID,EAAW,KACbD,EAAO,WAAa,MAAMC,EAAW,KAAK,GAGxCC,EAAc,KAChBF,EAAO,cAAgB,MAAME,EAAc,KAAK,GAG3CF,CACT,CAOA,OAAO,aAAcA,EAAQ,CAC3B,MAAO,CACL,WAAY,CACV,MAAO,OAAO,OAAOA,EAAO,UAAU,EAAE,OAAOL,GAAS,CAACA,GAAO,MAAQA,GAAO,OAAS,MAAM,EAC9F,SAAU,OAAO,OAAOK,EAAO,UAAU,EAAE,OAAOL,GAASA,GAAO,OAAS,SAAS,CACtF,EACA,cAAe,CACb,MAAO,OAAO,OAAOK,EAAO,aAAa,EAAE,OAAOL,GAAS,CAACA,GAAO,MAAQA,GAAO,OAAS,MAAM,EACjG,SAAU,OAAO,OAAOK,EAAO,aAAa,EAAE,OAAOL,GAASA,GAAO,OAAS,SAAS,CACzF,CACF,CACF,CAOA,aAAcZ,EAAM,CAClB,MAAMoB,EAAUpB,EAAK,IAAIqB,GAAS,CAChC,MAAMC,EAASD,GAAO,QAAU,EAChC,MAAO,CAAE,MAAOA,EAAO,OAAAC,CAAO,CAChC,CAAC,EAEKC,EAAYH,EAAQ,OAAO,CAACI,EAAaH,IAAUG,EAAc,OAAOH,EAAM,MAAM,EAAG,CAAC,EAC9F,IAAII,EAAiB,KAAK,OAAO,EAAIF,EAErC,QAASG,EAAQ,EAAGA,EAAQN,EAAQ,OAAQM,IAAS,CACnD,MAAML,EAAQD,EAAQM,CAAK,EAE3B,GAAID,EAAiBJ,EAAM,OACzB,OAAOA,EAAM,MAGfI,GAAkBJ,EAAM,MAC1B,CACF,CASA,WAAYM,EAAQC,EAAS,KAAK,KAAK,KAAM,CAC3C,KAAM,CAACC,EAAa,GAAGC,CAAI,EAAIH,EAC/B,OAAOE,IAAgB,OAAY,GAAKA,EAAY,kBAAkBD,CAAM,EAAIE,EAAK,KAAK,EAAE,CAC9F,CAQA,aAAclB,EAAOG,EAAc,CAAC,EAAG,CACrC,MAAML,EAAU,CACd,MAAO,EACP,SAAU,GACV,KAAM,GACN,YAAa,EACb,GAAGK,CACL,EAEMgB,EAAgBnB,EAAM,QAAQ,cAAc,OAMlD,IAJIF,EAAQ,aAAe,GAAK,MAAMA,EAAQ,WAAW,KACvDA,EAAQ,YAAc,GAGpBA,EAAQ,MAAQ,EAAG,CACrB,MAAMF,EAAQ,IAAI,IAElB,KAAOA,EAAM,KAAOE,EAAQ,OACtBA,EAAQ,UACNA,EAAQ,MAAQqB,EAAc,SAChCrB,EAAQ,MAAQqB,EAAc,QAEhCvB,EAAM,IAAI,KAAK,WAAW,KAAK,aAAauB,CAAa,CAAC,CAAC,GAE3DvB,EAAM,IAAI,KAAK,WAAWE,EAAQ,KAAOE,EAAM,IAAIF,EAAQ,KAAK,YAAY,EAAG,GAAMA,EAAQ,WAAW,CAAC,CAAC,EAI9G,OAAO,MAAM,KAAKF,CAAK,CACzB,CAEA,OAAIE,EAAQ,SACH,CAAC,KAAK,WAAW,KAAK,aAAaqB,CAAa,CAAC,CAAC,EAKpD,CAFM,KAAK,WAAWrB,EAAQ,KAAOE,EAAM,IAAIF,EAAQ,KAAK,YAAY,EAAG,GAAMA,EAAQ,WAAW,CAAC,CAEhG,CACd,CASA,iBAAkBsB,EAAWC,EAAclB,EAAc,CAAE,KAAM,CAAC,EAAG,QAAS,CAAC,CAAE,EAAG,CAClF,MAAML,EAAU,CACd,KAAM,CACJ,MAAO,EACP,SAAU,GACV,KAAM,GACN,YAAa,EACb,GAAGK,EAAY,IACjB,EACA,QAAS,CACP,MAAO,EACP,SAAU,GACV,KAAM,GACN,YAAa,EACb,GAAGA,EAAY,OACjB,CACF,EASA,OAPc,KAAK,aAAaiB,EAAWtB,EAAQ,IAAI,EAC/B,IAAID,GAAQ,CAClC,MAAMyB,EAAe,KAAK,MAAM,KAAK,OAAO,GAAKxB,EAAQ,QAAQ,MAAQ,GAAK,CAAC,EACzEyB,EAAW,KAAK,aAAaF,EAAc,CAAE,GAAGvB,EAAQ,QAAc,MAAOwB,CAAe,CAAC,EACnG,MAAO,GAAGzB,KAAQ0B,EAAS,KAAK,GAAG,GACrC,CAAC,CAGH,CACF,CA7OqB,EAAA7B,EAAA,aCErB,MAAM8B,EAAY,IAAI9B,EAEtB,KAAK,UAAY,MAAO+B,GAAY,CAClC,GAAIA,EAAQ,KAAK,OAAS,QAAS,CACjC,MAAMzB,EAAQ,MAAMwB,EAAU,YAAY,EACpC1B,EAAU2B,EAAQ,KAAK,QACvBvB,EAAesB,EAAU,YAAYC,EAAQ,KAAK,KAAK,EAE7D3B,EAAQ,eAAiB,EACzBA,EAAQ,SAAY4B,GAAY,CAC9B,KAAK,YAAY,CAAE,KAAM,WAAY,QAAAA,EAAS,MAAO,KAAK,UAAU1B,EAAM,OAAO,EAAG,KAAM,CAAC,CAAE,CAAC,CAChG,EAEAwB,EAAU,WAAWtB,EAAcF,EAAOF,CAAO,EACjD,KAAK,YAAY,CAAE,KAAM,WAAY,MAAO,KAAK,UAAUE,EAAM,OAAO,EAAG,KAAM,CAAC,CAAE,CAAC,CACvF,CACF,C","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/create fake namespace object","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/importScripts chunk loading","webpack:///./src/NameForge.js","webpack:///./src/worker.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + \"vendor\" + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/modules/nameforge/dist/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t348: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_elvispereira_nameforge\"] = self[\"webpackChunk_elvispereira_nameforge\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","export default class NameForge {\n  /**\n   * Prepare the data needed to train a model from the provided list of names.\n   * @param {string} listOfNames A list of names separated by a comma (\",\").\n   * @returns {Array} Array containing each name in the list.\n   */\n  prepareData (listOfNames) {\n    if (!listOfNames || listOfNames?.length === 0) {\n      throw new Error('Provided list don\\'t contain any names.');\n    }\n\n    const names = [...new Set(listOfNames.toLowerCase().split(','))].sort();\n\n    if (names.length === 1) {\n      throw new Error('The list is too short');\n    }\n\n    return names.map(name => name.trim());\n  }\n\n  /**\n   * A brain.js neural network used for training and inference.\n   * @typedef {Object} NeuralNetwork\n   */\n\n  /**\n   * Create a brain.js LSTM model to be used later.\n   * @param {Object} options Path to JSON file or string containing a pre-trained model.\n   * @returns {(NeuralNetwork|null)} A new model or pre-trained model (null if not found).\n   */\n  async createModel (options = { path: null, json: null }) {\n    const { recurrent } = await import('brain.js');\n    const model = new recurrent.LSTM({\n      activation: 'tanh'\n    });\n\n    if (options.path) {\n      const response = await fetch(options.path);\n      if (response.ok) {\n        model.fromJSON(await response.json());\n        return model;\n      }\n      return null;\n    }\n\n    if (options.json) {\n      model.fromJSON(JSON.parse(options.json));\n    }\n\n    return model;\n  }\n\n  /**\n   * Train a model in a list of names to be later used for predictions.\n   * @param {Array} trainingData Array of names that the model will be trained on.\n   * @param {NeuralNetwork} model Brain.js model to train data on.\n   * @param {Object} userOptions User supplied option to fine tune the training.\n   * @returns {NeuralNetwork} The trained brain.js model.\n   */\n  trainModel (trainingData, model, userOptions = {}) {\n    const options = {\n      iterations: 500,\n      errorThreshold: 0.10,\n      callback: null,\n      callbackPeriod: 10,\n      learningRate: 0.01,\n      timeout: 'Infinity',\n      ...userOptions\n    };\n\n    const result = model.train(trainingData, options);\n\n    console.info(`Training completed after ${result.iterations} iterations, loss ${result.error}`);\n\n    return model;\n  }\n\n  /**\n   * Get a list of available pre-trained models to be used.\n   * @returns {Object} An object containing each pre-trained model.\n   */\n  static async getModels () {\n    const models = {\n      userModels: null,\n      defaultModels: null\n    };\n\n    const userModels = await fetch('nameforge-models/models.json');\n    const defaultModels = await fetch('modules/nameforge/models/models.json');\n\n    if (userModels.ok) {\n      models.userModels = await userModels.json();\n    }\n\n    if (defaultModels.ok) {\n      models.defaultModels = await defaultModels.json();\n    }\n\n    return models;\n  }\n\n  /**\n   * Filter models by type.\n   * @param {Object} models Object containing all the grouped models.\n   * @returns {Object} An object containing the grouped models separated by type.\n   */\n  static filterModels (models) {\n    return {\n      userModels: {\n        names: Object.values(models.userModels).filter(model => !model?.type || model?.type === 'name'),\n        surnames: Object.values(models.userModels).filter(model => model?.type === 'surname')\n      },\n      defaultModels: {\n        names: Object.values(models.defaultModels).filter(model => !model?.type || model?.type === 'name'),\n        surnames: Object.values(models.defaultModels).filter(model => model?.type === 'surname')\n      }\n    };\n  }\n\n  /**\n   * Simple or weighted random selection.\n   * @param {Array} data Array with the possible options that can be selected.\n   * @returns The randomly selected entry.\n   */\n  selectRandom (data) {\n    const entries = data.map(entry => {\n      const weight = entry?.weight ?? 1;\n      return { value: entry, weight };\n    });\n\n    const weightSum = entries.reduce((accumulator, entry) => accumulator + Number(entry.weight), 0);\n    let selectedWeight = Math.random() * weightSum;\n\n    for (let index = 0; index < entries.length; index++) {\n      const entry = entries[index];\n\n      if (selectedWeight < entry.weight) {\n        return entry.value;\n      }\n\n      selectedWeight -= entry.weight;\n    }\n  }\n\n  /**\n   * Capitalize the first letter of a string (with internationalization support).\n   * @param {string} string A string to be capitalized.\n   * @param {string} locale Language code used to define the correct capitalization.\n   * @returns {string} The capitalized string.\n   * @see https://stackoverflow.com/a/53930826/38522\n   */\n  capitalize (string, locale = game.i18n.lang) {\n    const [firstLetter, ...rest] = string;\n    return firstLetter === undefined ? '' : firstLetter.toLocaleUpperCase(locale) + rest.join('');\n  }\n\n  /**\n   * Generate one or more names using the supplied model.\n   * @param {NeuralNetwork} model Pre-trained model that will be used for predictions.\n   * @param {Object} userOptions User supplied option to fine tune predictions.\n   * @returns {Array} An array with each predicted name.\n   */\n  generateName (model, userOptions = {}) {\n    const options = {\n      count: 1,\n      original: false,\n      seed: '',\n      temperature: 1,\n      ...userOptions\n    };\n\n    const originalNames = model.options.dataFormatter.values;\n\n    if (options.temperature <= 0 || isNaN(options.temperature)) {\n      options.temperature = 1;\n    }\n\n    if (options.count > 1) {\n      const names = new Set();\n\n      while (names.size < options.count) {\n        if (options.original) {\n          if (options.count > originalNames.length) {\n            options.count = originalNames.length;\n          }\n          names.add(this.capitalize(this.selectRandom(originalNames)));\n        } else {\n          names.add(this.capitalize(options.seed + model.run(options.seed.toLowerCase(), true, options.temperature)));\n        }\n      }\n\n      return Array.from(names);\n    }\n\n    if (options.original) {\n      return [this.capitalize(this.selectRandom(originalNames))];\n    }\n\n    const name = this.capitalize(options.seed + model.run(options.seed.toLowerCase(), true, options.temperature));\n\n    return [name];\n  }\n\n  /**\n   * Generate one or more full names using the supplied models.\n   * @param {NeuralNetwork} nameModel Pre-trained model that will be used to predict names.\n   * @param {NeuralNetwork} surnameModel Pre-trained model that will be used to predict surnames.\n   * @param {Object} userOptions User supplied option to fine tune predictions.\n   * @returns {Array} An array with each predicted full name.\n   */\n  generateFullName (nameModel, surnameModel, userOptions = { name: {}, surname: {} }) {\n    const options = {\n      name: {\n        count: 1,\n        original: false,\n        seed: '',\n        temperature: 1,\n        ...userOptions.name\n      },\n      surname: {\n        count: 1,\n        original: false,\n        seed: '',\n        temperature: 1,\n        ...userOptions.surname\n      }\n    };\n\n    const names = this.generateName(nameModel, options.name);\n    const fullNames = names.map(name => {\n      const surnameCount = Math.round(Math.random() * (options.surname.count - 1) + 1);\n      const surnames = this.generateName(surnameModel, { ...options.surname, ...{ count: surnameCount } });\n      return `${name} ${surnames.join(' ')}`;\n    });\n\n    return fullNames;\n  }\n}\n","import NameForge from './NameForge.js';\n\nconst nameforge = new NameForge();\n\nself.onmessage = async (message) => {\n  if (message.data.name === 'train') {\n    const model = await nameforge.createModel();\n    const options = message.data.options;\n    const trainingData = nameforge.prepareData(message.data.names);\n\n    options.callbackPeriod = 1;\n    options.callback = (details) => {\n      self.postMessage({ name: 'progress', details, model: JSON.stringify(model.toJSON(), null, 2) });\n    };\n\n    nameforge.trainModel(trainingData, model, options);\n    self.postMessage({ name: 'complete', model: JSON.stringify(model.toJSON(), null, 2) });\n  }\n};\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","getProto","obj","leafPrototypes","value","mode","ns","def","current","key","exports","definition","chunkId","promises","prop","installedChunks","installChunk","data","chunkIds","moreModules","runtime","parentChunkLoadingFunction","chunkLoadingGlobal","NameForge","listOfNames","names","name","options","recurrent","model","response","trainingData","userOptions","result","models","userModels","defaultModels","entries","entry","weight","weightSum","accumulator","selectedWeight","index","string","locale","firstLetter","rest","originalNames","nameModel","surnameModel","surnameCount","surnames","nameforge","message","details"],"sourceRoot":""}