const moduleMetadata = {"id":"illandril-token-tooltips","version":"3.4.2","title":"Illandril's Token Tooltips","bugs":"https://github.com/illandril/FoundryVTT-token-tooltips/issues"};

const optionalIcon=(a,b)=>a?icon(a,b):null;const icon=(a,b)=>{if(!a)throw new Error("icon was not provided an iconName");const c=document.createElement("i");return c.classList.add(b?"fat":"fas"),c.classList.add("fa-"+a),c};

const validationPattern=/^[a-z_][a-z0-9\-_]*[a-z0-9_]$/i,assertValidPrefixSection=a=>{if(!validationPattern.test(a))throw new Error("CSS prefixes must be at least two characters, start and end with a letter or \"_\", and contain only letters, numbers, \"_\", or \"-\"")};class CSSPrefix{#prefix;constructor(a){assertValidPrefixSection(a),this.#prefix=`${a}--`;}child(a){return assertValidPrefixSection(a),`${this.#prefix}${a}`}childPrefix(a){return assertValidPrefixSection(a),new CSSPrefix(this.child(a))}}

class Logger{#logName;#logColor;#logPrefix;#logStyle;#logLevel;constructor(a,b){let c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:"#4f0104";this.#logName=a,this.#logLevel=b,this.#logColor=c,this.#logPrefix=`%c${a}`,this.#logStyle=`background-color: ${c}; color: #fff; padding: 0.1em 0.5em;`;}child(a){let b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:this.#logColor;return new Logger(`${this.#logName} - ${a}`,this.#logLevel,b)}debug(){if(this.#logLevel.debug){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];console.debug(this.#logPrefix,this.#logStyle,...b);}}info(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];console.info(this.#logPrefix,this.#logStyle,...b);}warn(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];console.warn(this.#logPrefix,this.#logStyle,...b);}error(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];console.error(this.#logPrefix,this.#logStyle,...b);}}

let canRegister=!1;const pendingRegistrations=[];let pendingDebugRegistration;Hooks.once("init",()=>{canRegister=!0,pendingRegistrations.forEach(a=>a()),pendingDebugRegistration?.();});class Settings{#namespace;#localize;constructor(a,b){this.#namespace=a,this.#localize=b;}registerMenu(a,b){const c={...b,name:`${this.#namespace}.setting.menu.${a}.name`,label:`${this.#namespace}.setting.menu.${a}.label`,hint:`${this.#namespace}.setting.menu.${a}.hint`},d=()=>{game.settings.registerMenu(this.#namespace,a,c);};return canRegister?d():pendingRegistrations.push(d),{id:`${this.#namespace}--menu--${a}`,title:`${this.#namespace}.setting.menu.${a}.title`,template:`modules/${this.#namespace}/templates/menu-${a}.html`}}#mapChoices(a,b){let c;return b&&(Array.isArray(b)?c={choices:Object.fromEntries(b.map(b=>[b,this.#localize(`setting.${a}.choice.${b}`)]))}:c={choices:b}),c}register(a,b,c){let{scope:i="world",hasHint:d,config:j=!0,requiresReload:k=!1,choices:e,callOnChangeOnInit:f,onChange:g,...h}=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{};const l={set:b=>{game.settings.set(this.#namespace,a,b);},get:()=>game.settings.get(this.#namespace,a)},m=()=>{const m=this.#mapChoices(a,e);game.settings.register(this.#namespace,a,{name:this.#localize(`setting.${a}.label`),hint:d?this.#localize(`setting.${a}.hint`):void 0,config:"function"==typeof j?j():j,scope:i,type:b,default:c,requiresReload:k,onChange:g,...m,...h}),f&&g?.(l.get());};return canRegister?m():"debug"===a?pendingDebugRegistration=m:pendingRegistrations.push(m),l}}

class Template{#path;constructor(a,b){this.#path=`modules/${a}/templates/${b}`,Hooks.on("init",()=>{void getTemplate(this.#path);});}async render(a){return renderTemplate(this.#path,a)}}

class ModuleUtils{#id;#logger;#settings;#cssPrefix;constructor(a){let{id:b,title:c,version:d,bugs:e,color:f}=a;const g=this.localize.bind(this);this.localize=g,this.#id=b,this.#settings=new Settings(b,g);const h={debug:!1};this.#settings.register("debug",Boolean,!1,{scope:"client",hasHint:!0,callOnChangeOnInit:!0,onChange:a=>{h.debug=a;}}),this.#logger=new Logger(`${c} v${d}`,h,f),e?this.logger.info(`Started. To report bugs, go to: ${e}`):this.logger.info("Started");}get id(){return this.#id}get logger(){return this.#logger}get cssPrefix(){return this.#cssPrefix||(this.#cssPrefix=new CSSPrefix(this.#id)),this.#cssPrefix}get settings(){return this.#settings}localize(a,b){let c=!!(2<arguments.length&&arguments[2]!==void 0)&&arguments[2];const d=`${this.#id}.${a}`;return !0!==c||game.i18n.has(d)?b?game.i18n.format(d,b):game.i18n.localize(d):void 0}registerTemplate(a){return new Template(this.#id,a)}}

const module=new ModuleUtils(moduleMetadata);

const HIDE_FROM_EVERYONE_OPTION="HIDE_FROM_EVERYONE";const SHOW_TO_GMS_ONLY="SHOW_TO_GMS_ONLY";

const titleCase=a=>"hp"===a||"ac"===a?a.toUpperCase():`${a.substring(0,1).toUpperCase()}${a.substring(1)}`;class StandardOption{constructor(a,b){this.permission=module.settings.register(`${a}MinimumPermission`,String,b,{config:!1}),this.hideFromGM=module.settings.register(`hidePlayer${titleCase(a)}FromGM`,Boolean,!1,{config:!1});}}const HP=new StandardOption("hp","NONE");const AC=new StandardOption("ac","NONE");const AttributePlus=new StandardOption("attributePlus",HIDE_FROM_EVERYONE_OPTION);const Passives=new StandardOption("passives","NONE");const Talents=new StandardOption("talents","NONE");const Items=new StandardOption("items","NONE");const Spells=new StandardOption("spells","NONE");const Resources=new StandardOption("resources","NONE");const Movement=new StandardOption("movement","NONE");const Ruler=new StandardOption("ruler","NONE");const SavingThrows=new StandardOption("savingThrows",HIDE_FROM_EVERYONE_OPTION);const DmgResVuln=new StandardOption("dmgResVuln",HIDE_FROM_EVERYONE_OPTION);const CondImm=new StandardOption("condImm",HIDE_FROM_EVERYONE_OPTION);

const cssPrefix$1=module.cssPrefix.childPrefix("actorSettings");const TOOLTIP_CELL=cssPrefix$1.child("tooltipToggleCell");const TOOLTIP_TOGGLE=cssPrefix$1.child("tooltipToggle");

const nanToZero=a=>{if(!a)return 0;let b;return b="number"==typeof a?a:"string"==typeof a?parseFloat(a):NaN,isNaN(b)?0:b};

const showInTooltip=a=>{const b=a.getFlag("illandril-token-tooltips","show");return !("boolean"!=typeof b)&&b};const setShowInTooltip=(a,b)=>{a.setFlag("illandril-token-tooltips","show",b);};const canCalculateUses=a=>null!==calculateUses(a);const extractNumber=a=>"number"==typeof a||"string"==typeof a?nanToZero(a):0;const calculateUses=a=>{const b=a.system;if(!b)return null;const c=extractNumber(b.quantity);if(!b.uses?.max)return 0<c?{uses:c}:null;let d=extractNumber(b.uses.value),e=extractNumber(b.uses.max);const f=1<e||!0!==b?.uses?.autoDestroy;return 0<c&&(d+=(c-1)*Math.max(1,e),e*=c),0<d||f&&0<e?{uses:d,maxUses:f?e:null}:null};

const CSS5E_ITEM_DETAIL="item-detail";Hooks.on("renderActorSheet5eCharacter",(a,b)=>{if(Items.permission.get()!==HIDE_FROM_EVERYONE_OPTION){const c=a.actor;if(c.isOwner){const a=b[0];addTogglesToInventoryTab(a,".tab.inventory",c),addTogglesToInventoryTab(a,".tab.features",c);}}});const addTogglesToInventoryTab=(a,b,c)=>{const d=a.querySelector(b);if(!d)return void module.logger.error("Could not find inventory tab",b);const e=d.querySelectorAll(".items-header");0<e?.length?addTooltipToggleHeaders(e):module.logger.error("Could not find inventory headers",b),addTooltipToggleCells(d.querySelectorAll(".item[data-item-id]"),c);},addTooltipToggleHeaders=a=>{Array.prototype.forEach.call(a,a=>{const b=document.createElement("div");b.classList.add(CSS5E_ITEM_DETAIL),b.classList.add(TOOLTIP_CELL);const c=a.querySelector(".item-controls");a.insertBefore(b,c);});},addTooltipToggleCells=(a,b)=>{Array.prototype.forEach.call(a,a=>{const c=getItemForRow(a,b);if(!c)module.logger.error("Could not find item for row",a,b);else {const b=document.createElement("div");b.classList.add(CSS5E_ITEM_DETAIL),b.classList.add(TOOLTIP_CELL),addTooltipToggle(b,c);const d=a.querySelector(".item-controls");a.insertBefore(b,d);}});},getItemForRow=(a,b)=>{const c=a.getAttribute("data-item-id");return null===c?void 0:b.items.get(c)},addTooltipToggle=(a,b)=>{if(canCalculateUses(b)){const c=showInTooltip(b),d=document.createElement("a");d.classList.add(TOOLTIP_TOGGLE),d.setAttribute("role","switch"),d.setAttribute("aria-checked",c?"true":"false");const e=module.localize("tooltipSwitch");d.setAttribute("aria-label",e);const f=`tooltip${c?"":"Not"}Shown`;d.title=module.localize(f),d.addEventListener("click",()=>setShowInTooltip(b,!c),!1),d.appendChild(icon("hand-pointer")),a.appendChild(d);}};

const emptyNode=a=>{for(;a.lastChild;)a.removeChild(a.lastChild);};

const div=a=>{const b=document.createElement("div");return b.classList.add(a),b};

const span=a=>{const b=document.createElement("span");return b.classList.add(a),b};

var booleanNode = (a=>document.createTextNode(a?game.i18n.localize("Yes"):game.i18n.localize("No")));

var CSS$1 = {ROW:module.cssPrefix.child("row"),LABEL:module.cssPrefix.child("label"),VALUE:module.cssPrefix.child("value"),CURRENT:module.cssPrefix.child("current"),MAX:module.cssPrefix.child("max"),TEMP:module.cssPrefix.child("temp"),UNITS:module.cssPrefix.child("units"),EXTRA:module.cssPrefix.child("extra")};

const numberToNiceString=a=>{let b;return b=.125===a?"\u215B":.25===a?"\xBC":.375===a?"\u215C":.5===a?"\xBD":.625===a?"\u215D":.75===a?"\xBE":.875===a?"\u215E":.166<=a&&.167>=a?"\u2159":.333<=a&&.334>=a?"\u2153":.666<=a&&.667>=a?"\u2154":.833<=a&&.834>=a?"\u215A":`${a}`,b};

const addValue=(a,b,c)=>{if(!c||b instanceof Node||"boolean"==typeof b)addValueWithoutTemp(a,b);else {const d=nanToZero(c);0===d?addValueWithoutTemp(a,b):(addValueWithoutTemp(a,nanToZero(b)+d),a.classList.add(CSS$1.TEMP));}};const addValueWithoutTemp=(a,b)=>{a.classList.remove(CSS$1.TEMP);let c;if("boolean"==typeof b)c=booleanNode(b);else if("number"==typeof b){const a=numberToNiceString(b);c=document.createTextNode(a);}else c=b instanceof Node?b:b?document.createTextNode(b):document.createTextNode("0");a.appendChild(c);};

class AttributeRow{#name;#iconName;#label;#currDisplay;#maxDisplay=span(CSS$1.MAX);#unitsDisplay=span(CSS$1.UNITS);#extraDisplay=span(CSS$1.EXTRA);constructor(a,b,c){this.#name=null,this.#iconName=null;const d=div(CSS$1.ROW);c&&d.setAttribute("data-group",c),d.setAttribute("data-name",a);const e=span(CSS$1.LABEL);this.#label=e,this.setNameAndIcon(a,b),d.appendChild(e);const f=span(CSS$1.VALUE);d.appendChild(f);const g=span(CSS$1.CURRENT);f.appendChild(g),f.appendChild(this.#maxDisplay),f.appendChild(this.#unitsDisplay),f.appendChild(this.#extraDisplay),this.#currDisplay=g,this.element=d;}setNameAndIcon(a,b){if(this.#name===a&&this.#iconName===b)return;this.#name=a;let c;"string"==typeof b?(this.#iconName=b,c=optionalIcon(b)):(this.#iconName=null,c=b),emptyNode(this.#label),c?(this.#label.appendChild(c),this.#label.title=a):this.#label.appendChild(document.createTextNode(a));}setValue(a){let{value:b,temp:c,max:d,tempmax:e,units:f,extra:g}=a;return b instanceof Image?(emptyNode(this.#currDisplay),void this.#currDisplay.appendChild(b)):void(emptyNode(this.#currDisplay),addValue(this.#currDisplay,b,c),emptyNode(this.#maxDisplay),d&&addValue(this.#maxDisplay,d,e),emptyNode(this.#unitsDisplay),f&&this.#unitsDisplay.appendChild(document.createTextNode(f)),emptyNode(this.#extraDisplay),g&&this.#extraDisplay.appendChild(document.createTextNode(g)))}}

const intPattern=/^-?[0-9]+$/,stringToInt=a=>{if(intPattern.test(a)){const b=parseInt(a,10);if(!isNaN(b))return b}return null};

let tinyMCEParser,tinyMCESerializer;const sanitizeHTML=a=>{tinyMCEParser||(tinyMCEParser=tinyMCE.html.DomParser({validate:!0}));const b=tinyMCEParser.parse(a);return tinyMCESerializer||(tinyMCESerializer=tinyMCE.html.Serializer()),tinyMCESerializer.serialize(b)},htmlToNode=a=>tinyMCE.dom.DOMUtils.DOM.createFragment(sanitizeHTML(a));

const calculateValidAttributeValue=(a,b)=>{let c;if(!Array.isArray(a))c="number"==typeof a&&b.endsWith(".pct")?a.toFixed(2)+"%":a;else if(Array.prototype.some.call(a,a=>a instanceof Node)){c=document.createDocumentFragment();let b=!0;for(const d of a)b||c.appendChild(document.createTextNode(", ")),b=!1,d instanceof Node?c.appendChild(d):c.appendChild(document.createTextNode(d.toString()));}else c=Array.prototype.join.call(a,", ");return {value:c}};

const isNumberLikeValue=a=>{let b;if("number"==typeof a)b=a;else if("string"==typeof a)b=parseFloat(a);else return !1;return !isNaN(b)};

const toValidNonArrayAttributeValue=a=>null===a||""===a?null:a instanceof Node?a:"number"!=typeof a||isNaN(a)?"string"==typeof a||"boolean"==typeof a?a:null:a;

const toValidAttributeValue=a=>{const b=toValidNonArrayAttributeValue(a);if(null!==b)return b;if(Array.isArray(a)){const b=Array.prototype.map.call(a,toValidNonArrayAttributeValue);if(0<b.length&&b.every(a=>null!==a&&void 0!==a&&""!==a))return b}return null};

const extractValue=(a,b)=>{module.logger.debug("extractValue",a,b);let c;const d=toValidNonArrayAttributeValue(a.total);if(null!==d)module.logger.debug("extractValue: attribute.total",d),c=d;else {const d=toValidAttributeValue(a.value);if(module.logger.debug("extractValue: attribute.value",d),"string"==typeof d&&"LongText"===a.type)module.logger.debug("extractValue: attribute.value was a LongText type"),c=htmlToNode(d);else {if(Array.isArray(d))return module.logger.debug("extractValue: attribute.value was an Array type"),d;null===d&&b?(module.logger.debug("extractValue: attribute.value was null, but had max"),c=0):c=d;}}return c},calculateTempValue=(a,b)=>{let c;return c=isNumberLikeValue(a)&&isNumberLikeValue(b)?b:null,c},stringOrNull=a=>"string"==typeof a?a:null,calculateObjectAttributeValue=(a,b)=>{module.logger.debug("calculateObjectAttributeValue",b,a);const c=toValidNonArrayAttributeValue(a.max),d=extractValue(a,null!==c);if(null===d)return module.logger.debug("calculateObjectAttributeValue: extracted value was null"),null;if(Array.isArray(d))return module.logger.debug("calculateObjectAttributeValue: extracted value was an array"),calculateValidAttributeValue(d,b);const e=calculateTempValue(d,a.temp),f=calculateTempValue(c,a.tempmax),g=stringOrNull(a.units),h=stringOrNull(a.extra);return module.logger.debug("calculateObjectAttributeValue","value",d,"max",c,"temp",e,"tempmax",f,"units",g,"extra",h),{value:d,max:c,temp:e,tempmax:f,units:g,extra:h}};

const calculateValue=function(a){let b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"";if(module.logger.debug("calculateValue",b,a),void 0===a||null===a)return module.logger.debug("calculateValue: attribute is undefined or null",a),null;const c=toValidAttributeValue(a);return null===c?"object"==typeof a?(module.logger.debug("calculateValue: attribute is object"),calculateObjectAttributeValue(a,b)):(module.logger.debug("calculateValue: attribute is invalid"),null):(module.logger.debug("calculateValue: attribute is validAttributeValue",c),calculateValidAttributeValue(c,b))};

const getSingleValue=(a,b)=>{const c=b.trim(),d=stringToInt(c);if(null!==d)return {value:d};const e=foundry.utils.getProperty(a,c);return calculateValue(e,c)};

const add=(c,a)=>c+a;const operations={"+":add,"*":(c,a)=>c*a,"/":(c,a)=>0===a?null:c/a,"%":(c,a)=>c%a,">":(c,a)=>c>a?c:null,">=":(c,a)=>c>=a?c:null,"<":(c,a)=>c<a?c:null,"<=":(c,a)=>c<=a?c:null,"!=":(c,a)=>c===a?null:c,"==":(c,a)=>c===a?c:null},operationKeys=Object.keys(operations);const getOperation=a=>operationKeys.includes(a)?operations[a]:null;

const getMultiValue=(a,b)=>{const c=b.replace(/\s*(\+|-|\*|\/|%|[<>!=]=?-?)\s*/g,"~$1~").split("~");let d,e=0,f=!1,g=add,h=!1;for(const i of c){if(""===i.trim())continue;else if("-"===i){h=!0,f=!0;continue}else {const a=getOperation(i);if(a){h=!0,g=a,f=!1;continue}}const b=getSingleValue(a,i);if(d=b,!b||"number"!=typeof b.value)return h?null:b;const c=(f?-1:1)*b.value;f=!1;const j=g(e,c);if(null===j||isNaN(j))return null;e=j,g=add;}return h?{value:e}:d??null};

const imageKeyPattern=/^(.+\.)?(img|image|texture)(.src)?$/i,isImageKey=a=>imageKeyPattern.test(a);

const toImage=a=>{const b=new Image;return b.src=a,b.alt=a,b},updateCustomAttributeRow=(a,b,c,d)=>{const e=b.attributeKey,f=getMultiValue(a,e);if(module.logger.debug("updateCustomAttributeRow",e,f),!f)return null;isImageKey(e)&&"string"==typeof f.value&&(f.value=toImage(f.value));const g=b.name,h=b.icon;let i;return c[d]?(i=c[d],i.setNameAndIcon(g,h)):(i=new AttributeRow(g,h),c[d]=i),i.setValue(f),i};

const CSS_PREFIX=module.cssPrefix.childPrefix("debugDisplay"),CSS_DISPLAY=CSS_PREFIX.child("display"),debugRows=[];let debug=!1;const toggleDebug=()=>{module.logger.info(debug?"Disabling Debug":"Enabling Debug"),debug=!debug&&(game.user?.isGM??!1),debug?(debugDisplay.style.display="",emptyNode(debugDisplay),debugDisplay.appendChild(document.createTextNode(module.localize("debugDisplay.empty")))):(debugDisplay.style.display="none",emptyNode(debugDisplay));};const isDebug=()=>debug;const debugDisplay=document.createElement("div");debugDisplay.classList.add(CSS_DISPLAY),debugDisplay.style.display="none",Hooks.once("ready",()=>{document.body.appendChild(debugDisplay);}),Hooks.on("hoverToken",(a,b)=>{debug&&b&&a&&a.actor&&(emptyNode(debugDisplay),module.logger.info("hoverToken actor",a.actor),addDataRows(a.actor,null,a.actor,new Set));});const addDataRows=(a,b,c,d)=>{if(!d.has(c)){d.add(c);const e=Object.keys(c);e.sort();for(const f of e){if(f.startsWith("_")||"permission"===f||"id"===f||"sort"===f||"token"===f)continue;const e=null===b?f:`${b}.${f}`,g=c[f];if(null===g||Array.isArray(g))continue;const h=updateCustomAttributeRow(a,{name:e,attributeKey:e,icon:"",hideFromGM:!1,permission:"NONE"},debugRows,0);h&&debugDisplay.appendChild(h.element.cloneNode(!0)),"object"==typeof g&&addDataRows(a,e,g,d);}}};

const CustomOptions=module.settings.register("customOptions",Object,[],{config:!1});

const addEventListenerToAll=(a,b,c,d)=>{const e=a.find(b).addBack(b).get();for(const f of e)f.addEventListener(c,d);};

var systemID$1 = "D35E";

const capitalize=a=>`${a.substring(0,1).toUpperCase()}${a.substring(1)}`;

class AttributeLookup{constructor(a,b,c){this.icon=a,this.label=b,this.value=c;}}class AsyncAttributeLookup{constructor(a,b){this.id=a,this.asyncRows=b;}}const getAttributeValue=(a,b)=>{for(const c of b){const b=foundry.utils.getProperty(a,c),d=calculateValue(b,c);if(null!==d)return d}return null};class SimpleActorAttributeLookup extends AttributeLookup{constructor(a,b,c){super(a,b,a=>getAttributeValue(a,c));}}

var systemID = "pf1";

const isLiteNPC$2=a=>game.system.id===systemID$1&&(a.sheet?.options?.classes?.includes("lite")??!1);

const isLiteNPC$1=a=>game.system.id===systemID&&(a.sheet?.options?.classes?.includes("lite")??!1);

const isLiteNPC=a=>isLiteNPC$1(a)||isLiteNPC$2(a);

const attribute$2=a=>new AttributeLookup(()=>null,()=>{switch(game.system.id){case systemID$1:return game.i18n.localize(`D35E.AbilityShort${capitalize(a)}`);case systemID:return game.i18n.localize(`PF1.AbilityShort${capitalize(a)}`);default:return a;}},b=>{if(isLiteNPC(b))return null;const c=foundry.utils.getProperty(b.system,`abilities.${a}`);if(c){const a=nanToZero(c.total),b=nanToZero(c.mod);return {value:`${a} (${0<=b?"+":""}${b})`}}return null});var getD35eAndPF1Attributes = (()=>["str","dex","con","int","wis","cha"].map(a=>attribute$2(a)));

const attribute$1=(a,b)=>new AttributeLookup(()=>null,()=>b.toUpperCase(),b=>{const c=foundry.utils.getProperty(b.system,`abilities.${a}`);if(c){const a=nanToZero(c.value),b=nanToZero(c.mod),d=nanToZero(c.save);return {value:`${a} (${0<=b?"+":""}${b}, ${0<=d?"+":""}${d})`}}return null});var getDND5eAttributes = (()=>Object.entries(dnd5e.config.abilities).map(a=>{let[b,c]=a;return attribute$1(b,c.abbreviation)}));

var dnd5eSystemID = "dnd5e";

const attribute=a=>new AttributeLookup(()=>null,()=>game.i18n.localize(`PF2E.AbilityId.${a}`),b=>{const c=foundry.utils.getProperty(b.system,`abilities.${a}`);if(c){const a=nanToZero(c.mod);if(foundry.utils.isNewerVersion("5.3.0",game.system.version)){const b=nanToZero(c.value);return {value:`${b} (${0<=a?"+":""}${a})`}}return {value:`${0<=a?"+":""}${a}`}}return null});var getPF2Attributes = (()=>["str","dex","con","int","wis","cha"].map(a=>attribute(a)));

var pf2eSystemID = "pf2e";

const values=[];Hooks.once("ready",()=>{switch(game.system.id){case dnd5eSystemID:values.push(...getDND5eAttributes());break;case systemID$1:case systemID:values.push(...getD35eAndPF1Attributes());break;case pf2eSystemID:values.push(...getPF2Attributes());break;}});const supportedSystems$3=[systemID$1,systemID,dnd5eSystemID,pf2eSystemID];

var dnd4eSystemId = "dnd4e";

var sfrpgSystemID = "sfrpg";

const cssPrefix=module.cssPrefix.childPrefix("damage-types"),rotateLeft=cssPrefix.child("rotate-left"),damageTypeMap=new Map,physicalColor="#5E6B69",genericConditionColor="#6D7174",electricityColor="#946A19";damageTypeMap.set("acid",{iconKey:"droplet",color:"#316100"}),damageTypeMap.set("air",{iconKey:"wind",color:"#555"}),damageTypeMap.set("auditory",{iconKey:"ear-listen",color:"#24338A"}),damageTypeMap.set("axe-vulnerability",{iconKey:"axe",color:physicalColor});const bleed={iconKey:"bandage",color:"#A00"};damageTypeMap.set("bleed",bleed),damageTypeMap.set("bleeding",bleed),damageTypeMap.set("blinded",{iconKey:"eye-slash",color:genericConditionColor}),damageTypeMap.set("bludgeoning",{iconKey:"hammer-war",color:physicalColor}),damageTypeMap.set("burning",{iconKey:"campfire",color:"#CE3C02"}),damageTypeMap.set("chaotic",{iconKey:"arrows-cross"}),damageTypeMap.set("charmed",{iconKey:"hand-holding-heart",color:"#D4145A"}),damageTypeMap.set("cold",{iconKey:"snowflake",color:"#0078B4"});const confused={iconKey:"face-confused",color:genericConditionColor};damageTypeMap.set("confused",confused),damageTypeMap.set("confusion",confused),damageTypeMap.set("critical-hits",{iconKey:"bullseye-arrow"}),damageTypeMap.set("deafened",{iconKey:"ear-deaf",color:genericConditionColor});const diseased={iconKey:"face-mask",color:"#6E7713"};damageTypeMap.set("disease",diseased),damageTypeMap.set("diseased",diseased),damageTypeMap.set("electricity",{iconKey:"plug",color:electricityColor});const exhaustion={iconKey:"face-hand-yawn",color:genericConditionColor};damageTypeMap.set("exhaustion",exhaustion),damageTypeMap.set("exhausted",exhaustion);const fear={iconKey:"face-fearful",color:"#884A14"};damageTypeMap.set("fear",fear),damageTypeMap.set("fear effects",fear),damageTypeMap.set("fear-effects",fear),damageTypeMap.set("fire",{iconKey:"fire",color:"#CE3C02"});const frightened={iconKey:"face-scream",color:"#884A14"};damageTypeMap.set("fright",frightened),damageTypeMap.set("frightened",frightened),damageTypeMap.set("force",{iconKey:"comet",color:"#1C00AF"}),damageTypeMap.set("grappled",{iconKey:"hands",color:"#69489D"}),damageTypeMap.set("healing",{iconKey:"kit-medical",color:"#A00"}),damageTypeMap.set("incapacitated",{iconKey:"face-eyes-xmarks",color:"#2E5D60"}),damageTypeMap.set("invisible",{iconKey:"face-dotted",color:"#007C99"}),damageTypeMap.set("lawful",{iconKey:"scale-balanced"}),damageTypeMap.set("light",{iconKey:"lightbulb-on",color:electricityColor}),damageTypeMap.set("lightning",{iconKey:"bolt-lightning",color:electricityColor});const magic={iconKey:"hat-wizard",color:"#1C00AF"};damageTypeMap.set("magic",magic),damageTypeMap.set("magical",magic),damageTypeMap.set("mental",{iconKey:"brain",color:"#50B"}),damageTypeMap.set("necrotic",{iconKey:"scythe",color:"#000"}),damageTypeMap.set("necromancy",{iconKey:"skull",color:"#555"}),damageTypeMap.set("negative",{iconKey:"square-minus"}),damageTypeMap.set("off-target",{iconKey:"location-crosshairs-slash"}),damageTypeMap.set("olfactory",{iconKey:"nose"}),damageTypeMap.set("overburdened",{iconKey:"weight-hanging"}),damageTypeMap.set("paralyzed",{iconKey:"face-meh-blank",color:"#5F6349"}),damageTypeMap.set("piercing",{iconKey:"bow-arrow",color:physicalColor}),damageTypeMap.set("plant",{iconKey:"leaf",color:"#060"}),damageTypeMap.set("petrified",{iconKey:"person-simple",color:genericConditionColor}),damageTypeMap.set("poison",{iconKey:"skull-crossbones",color:"#03822F"}),damageTypeMap.set("poisoned",{iconKey:"face-vomit",color:"#03822F"}),damageTypeMap.set("positive",{iconKey:"square-plus"}),damageTypeMap.set("prone",{iconKey:"person",color:"#603813",cssClass:rotateLeft}),damageTypeMap.set("psychic",{iconKey:"brain-circuit",color:"#841D80"}),damageTypeMap.set("radiant",{iconKey:"star-christmas",color:"#8F6D00"}),damageTypeMap.set("radiation",{iconKey:"radiation",color:"#306100"}),damageTypeMap.set("restrained",{iconKey:"hands-bound",color:"#52266F"}),damageTypeMap.set("salt",{iconKey:"salt-shaker"}),damageTypeMap.set("slashing",{iconKey:"sword",color:physicalColor});const sleep={iconKey:"snooze"};damageTypeMap.set("asleep",sleep),damageTypeMap.set("sleep",sleep),damageTypeMap.set("stunned",{iconKey:"face-spiral-eyes",color:"#6D6064"}),damageTypeMap.set("sonic",{iconKey:"volume-high",color:"#24338A"}),damageTypeMap.set("thunder",{iconKey:"cloud-bolt",color:"#24338A"});const unarmed={iconKey:"hand-back-fist",color:physicalColor};damageTypeMap.set("unarmed",unarmed),damageTypeMap.set("unarmed attacks",unarmed),damageTypeMap.set("unarmed-attacks",unarmed),damageTypeMap.set("unconscious",{iconKey:"wave-pulse",color:"#841717"}),damageTypeMap.set("visual",{iconKey:"eyes"}),damageTypeMap.set("water",{iconKey:"water",color:"#00F"}),damageTypeMap.set("weapons",{iconKey:"swords",color:physicalColor});

const supportedSystems$2=[systemID$1,dnd4eSystemId,dnd5eSystemID,systemID,pf2eSystemID,sfrpgSystemID],iconAndTextClass=module.cssPrefix.childPrefix("damage-type").child("icon-and-text");const SimplifyDamageTypeChoice=module.settings.register("simplifyDamageTypes",String,"NONE",{hasHint:!0,choices:["NONE","ICON","COLOR_ICON","COLOR","ICON_AND_TEXT"],config:()=>supportedSystems$2.includes(game.system.id)});const stylizeDamageType=(a,b,c,d)=>{const e=a.raw.toLowerCase(),f=damageTypeMap.get(e);let g;if(b&&f?.iconKey){const b=icon(f.iconKey);f.cssClass&&b.classList.add(f.cssClass),d||(b.title=a.localized),d||a.suffix?(g=span(iconAndTextClass),g.appendChild(b),d&&(g.appendChild(document.createTextNode("\xA0")),g.appendChild(document.createTextNode(a.localized)))):g=b;}else g=document.createElement("span"),g.appendChild(document.createTextNode(a.localized));return c&&f?.color&&(g.style.color=f.color),a.suffix&&(g.appendChild(document.createTextNode("\xA0")),g.appendChild(document.createTextNode(a.suffix))),g},Simplifiers$1={NONE:a=>document.createTextNode(`${a.localized}${a.suffix?"\xA0":""}${a.suffix??""}`),ICON:a=>stylizeDamageType(a,!0,!1,!1),COLOR_ICON:a=>stylizeDamageType(a,!0,!0,!1),COLOR:a=>stylizeDamageType(a,!1,!0,!1),ICON_AND_TEXT:a=>stylizeDamageType(a,!0,!0,!0)};var simplifyDamageType = (a=>{const b=Simplifiers$1[SimplifyDamageTypeChoice.get()]??Simplifiers$1.NONE;return b(a)});

const filterEmpty=a=>!(a===void 0||""===a||null===a||"number"==typeof a&&isNaN(a)||a instanceof Text&&""===a.textContent);

const localizeOrFallback=(a,b)=>game.i18n.has(a)?game.i18n.localize(a):b;

const splitOn=(a,b)=>"string"==typeof a?a.split(b):null;

const stringArrayOrSet=a=>{if(Array.isArray(a)||a instanceof Set){const b=[];for(const c of a){if("string"!=typeof c)return null;b.push(c);}return b}return null};

const traitArrayWithCustom$4=(a,b,c,d)=>new AttributeLookup(()=>null,()=>module.localize(`tooltip.${a}.label`),a=>{if(game.system.id!==systemID$1)return null;const e=foundry.utils.getProperty(a.system,`traits.${b}`),f=stringArrayOrSet(e?.value)||[],g=f.map(a=>{const b=capitalize(a),e=localizeOrFallback(`D35E.${c}${b}`,a);return d?d({localized:e,raw:a||e}):document.createTextNode(e)}),h=splitOn(e?.custom,/[;,]/)||[],i=g.concat(h.map(a=>document.createTextNode(a))).filter(filterEmpty);return calculateValue(i)});

const unknownObject=a=>null!==a&&"object"==typeof a?a:null;

const traitArrayWithCustom$3=(a,b,c,d)=>new AttributeLookup(()=>null,()=>module.localize(`tooltip.${a}.label`),a=>{if(game.system.id!==dnd5eSystemID)return null;module.logger.debug("dnd5e traitWithCustom",b,a.name,a.system);const e=unknownObject(foundry.utils.getProperty(a.system,`traits.${b}`));if(null===e)return null;const f=stringArrayOrSet(e?.value)||[],g=f.filter(filterEmpty).map(a=>{const b=capitalize(a);return {localized:localizeOrFallback(`DND5E.${c}${b}`,a),raw:a}}),h=splitOn(e?.custom,";")?.filter(filterEmpty).map(a=>({localized:a,raw:a}))||[],i=g.concat(h);let j;return j=d?i.map(d):i.map(a=>{let{localized:b}=a;return b}),calculateValue(j)});

const getLabel$1=(a,b,c)=>{let d;"ci"===b?d=CONFIG.PF1.conditionTypes:("di"==b||"dv"==b)&&(d=CONFIG.PF1.damageTypes);const e=d?.[a]??a;return c?c({localized:e,raw:a||e}):document.createTextNode(e)},traitArrayWithCustom$2=(a,b,c)=>new AttributeLookup(()=>null,()=>module.localize(`tooltip.${a}.label`),a=>{if(game.system.id!==systemID)return null;const d=unknownObject(foundry.utils.getProperty(a.system,`traits.${b}`));if(!d)return null;const e=stringArrayOrSet(d.value)||[],f=e.map(a=>getLabel$1(a,b,c)),g=splitOn(d.custom,";")||[],h=f.concat(g.map(a=>document.createTextNode(a))).filter(filterEmpty);return calculateValue(h)});

const traitArrayWithCustom$1=(a,b,c,d)=>new AttributeLookup(()=>null,()=>module.localize(`tooltip.${a}.label`),a=>{if(game.system.id!==sfrpgSystemID)return null;const e=foundry.utils.getProperty(a.system,`traits.${b}`),f=stringArrayOrSet(e?.value)||[],g=f.map(a=>{const b=a.split("-").map(capitalize).join(""),e=localizeOrFallback(`SFRPG.${c}${b}`,a);return d?d({localized:e,raw:a||e}):document.createTextNode(e)}),h=splitOn(e?.custom,/[;,]/)||[],i=g.concat(h.map(a=>document.createTextNode(a))).filter(filterEmpty);return calculateValue(i)});

const supportedSystems$1=[systemID$1,dnd5eSystemID,systemID,sfrpgSystemID];var conditionImmunities = [traitArrayWithCustom$4("conditionImmunities","ci","CondType",simplifyDamageType),traitArrayWithCustom$3("conditionImmunities","ci","Con",simplifyDamageType),traitArrayWithCustom$2("conditionImmunities","ci",simplifyDamageType),traitArrayWithCustom$1("conditionImmunities","ci","Conditions",simplifyDamageType)];

const parseResistances=a=>{if(!a||"object"!=typeof a)return [];const b=[];for(const[c,d]of Object.entries(a)){if(!d||"object"!=typeof d)continue;const{immune:a,value:e}=d;b.push({key:c,value:"number"==typeof e?e:0,immune:!("boolean"!=typeof a)&&a});}return b},typeToLocaleKey=a=>"damage"===a?"All":"physical"===a?"physical":capitalize(a),resistancesAndImmunities=a=>new AttributeLookup(()=>null,()=>module.localize(`tooltip.damage${a}.label`),b=>{if(game.system.id!==dnd4eSystemId)return null;const c=parseResistances(foundry.utils.getProperty(b.system,"resistances")),d=c.filter(b=>{let{immune:c,value:d}=b;return "Immunities"===a?c:!(c||0===d)&&("Resistances"===a?0<d:0>d)}).map(b=>{const c=localizeOrFallback(`DND4EBETA.Damage${typeToLocaleKey(b.key)}`,b.key),d="Immunities"===a?void 0:`(${0<b.value?"+":""}${b.value})`;return simplifyDamageType({localized:c,raw:b.key,suffix:d})});return calculateValue(d)});

const string=a=>"string"==typeof a?a:null;

const iwrLookup=(a,b,c)=>new AttributeLookup(()=>null,()=>module.localize(`tooltip.${a}.label`),a=>{if(game.system.id!==pf2eSystemID)return null;const d=foundry.utils.getProperty(a,`system.attributes.${b}`);if(module.logger.debug("pf2e iwrLookup",b,a.name,b,d),!Array.isArray(d))return null;const e=[];for(const b of d){const a=unknownObject(b),d=string(a?.type),f=a?.value,g=d&&string(unknownObject(a?.typeLabels)?.[d]);if("string"==typeof d){const a=g?localizeOrFallback(g,d):d,b="number"==typeof f?`${f}`:void 0;e.push(c?c({localized:a,raw:d,suffix:b}):document.createTextNode(`${a}${b?` ${b}`:""}`));}}return calculateValue(e)});

const getLabelFromType=(a,b,c)=>{let d=c;if(a){let c;if("di"===b?c=CONFIG.PF2E.immunityTypes:"dr"===b?c=CONFIG.PF2E.resistanceTypes:"dv"==b&&(c=CONFIG.PF2E.weaknessTypes),c){const b=c[a];b&&(d=game.i18n.localize(b));}}return d},getLabel=(a,b,c)=>{let d,e,f;if("string"==typeof a)d=a,e=a;else {const b=unknownObject(a);if(!b)return null;d=string(b.type),e=string(b.label||d),("number"==typeof b.value||"string"==typeof b.value)&&(f=`(${b.value})`);}const g=getLabelFromType(d,b,e);if(!g)return null;const h=c?c({localized:g,raw:d||e||g,suffix:f}):document.createTextNode(`${g}${f?` ${f}`:""}`);return h},traitArrayWithCustom=(a,b,c)=>new AttributeLookup(()=>null,()=>module.localize(`tooltip.${a}.label`),a=>{if(game.system.id!==pf2eSystemID)return null;module.logger.debug("pf2e traitWithCustom",b,a.name,a.system);const d=foundry.utils.getProperty(a.system,`traits.${b}`);let e;if(Array.isArray(d))e=d.map(a=>getLabel(a,b,c)).filter(filterEmpty);else {const a=unknownObject(d);if(!a)return null;let f=Array.isArray(a?.value)?a.value.map(a=>getLabel(a,b,c)):[];const g=stringArrayOrSet(a?.custom);e=f.filter(filterEmpty),g?.length&&(e=e.concat(g.filter(filterEmpty).map(a=>document.createTextNode(a))));}return calculateValue(e)});

const supportedSystems=[dnd5eSystemID,systemID,pf2eSystemID,sfrpgSystemID,dnd4eSystemId];var damageResImmVuln = [traitArrayWithCustom$3("damageImmunities","di","Damage",simplifyDamageType),traitArrayWithCustom$3("damageResistances","dr","Damage",simplifyDamageType),traitArrayWithCustom$3("damageVulnerabilities","dv","Damage",simplifyDamageType),traitArrayWithCustom$2("damageImmunities","di",simplifyDamageType),traitArrayWithCustom$2("damageResistances","dr",simplifyDamageType),traitArrayWithCustom$2("damageVulnerabilities","dv",simplifyDamageType),traitArrayWithCustom("damageImmunities","di",simplifyDamageType),traitArrayWithCustom("damageResistances","dr",simplifyDamageType),traitArrayWithCustom("weaknesses","dv",simplifyDamageType),iwrLookup("damageImmunities","immunities",simplifyDamageType),iwrLookup("damageResistances","resistances",simplifyDamageType),iwrLookup("weaknesses","weaknesses",simplifyDamageType),traitArrayWithCustom$1("damageImmunities","di","Damage.Types.",simplifyDamageType),traitArrayWithCustom$1("damageVulnerabilities","dv","Damage.Types.",simplifyDamageType),resistancesAndImmunities("Resistances"),resistancesAndImmunities("Immunities"),resistancesAndImmunities("Vulnerabilities")];

const unsupportedSystems=[dnd5eSystemID];const pf1SavingThrow=a=>new AttributeLookup(()=>null,()=>module.localize(`savingThrow${capitalize(a)}`),b=>{if(isLiteNPC$2(b))return null;const c=unknownObject(foundry.utils.getProperty(b.system,`attributes.savingThrows.${a}`));return c&&isLiteNPC$1(b)&&0===nanToZero(c.total)?null:calculateValue(c)}),pf2SavingThrow=(a,b)=>new AttributeLookup(()=>null,()=>module.localize(`savingThrow${capitalize(b)}`),b=>{const c=unknownObject(foundry.utils.getProperty(b.system,`saves.${a}`));if(!c)return null;const d=nanToZero(c.totalModifier);return {value:`+${d} (DC ${d+10})`}});var savingThrows = [pf1SavingThrow("fort"),pf1SavingThrow("ref"),pf1SavingThrow("will"),pf2SavingThrow("fortitude","fort"),pf2SavingThrow("reflex","ref"),pf2SavingThrow("will","will")];

let GM_PERMISSION=function(a){return a.ALL="ALL",a.NPC_ONLY="NPC_ONLY",a}({});const fixChoices=(a,b)=>{const c={};return b.forEach(b=>{c[b]=module.localize(`setting.${a}.choice.${b}`);}),c},permissionMenus={entityPermission:{},gmPermissions:{},standardEntityPermission:{}},STANDARD_PERMISSION_LEVELS=["NONE","LIMITED","OBSERVER","OWNER","FRIENDLY","NEUTRAL"];Hooks.on("ready",()=>{permissionMenus.entityPermission=fixChoices("entityPermission",[...STANDARD_PERMISSION_LEVELS,SHOW_TO_GMS_ONLY]),permissionMenus.gmPermissions=fixChoices("gmPermission",[GM_PERMISSION.ALL,GM_PERMISSION.NPC_ONLY]),permissionMenus.standardEntityPermission=fixChoices("entityPermission",[...STANDARD_PERMISSION_LEVELS,SHOW_TO_GMS_ONLY,HIDE_FROM_EVERYONE_OPTION]);});

const getStandardItems=()=>{const a=[getItem("hp","heart",HP),getItem("ac","user-shield",AC)];return supportedSystems$3.includes(game.system.id)&&a.push(getItem("attributesPlus",LOCALIZED_ICON,AttributePlus)),unsupportedSystems.includes(game.system.id)||a.push(getItem("savingThrows",LOCALIZED_ICON,SavingThrows)),supportedSystems.includes(game.system.id)&&a.push(getItem("dmgResVuln",LOCALIZED_ICON,DmgResVuln)),supportedSystems$1.includes(game.system.id)&&a.push(getItem("condImm",LOCALIZED_ICON,CondImm)),(supportedSystems.includes(game.system.id)||supportedSystems$1.includes(game.system.id))&&a.push(),a.push(getItem("passives","eye, search, brain",Passives)),a.push(getItem("movement","walking",Movement)),a.push(getItem("ruler","ruler",Ruler)),a.push(getItem("resources","circle",Resources)),a.push(getItem("spells","star",Spells)),"starwarsffg"===game.system.id&&a.push(getItem("talents",LOCALIZED_ICON,Talents)),"dnd5e"===game.system.id&&a.push(getItem("items",LOCALIZED_ICON,Items)),a},LOCALIZED_ICON=Symbol("Localized Icon"),getItem=(a,b,c)=>{const d=`setting.menu.customOptions.standard.${a}`,e=module.localize(`${d}.help`,void 0,!0);let f;return f=b===LOCALIZED_ICON?module.localize(`${d}.icon`):b,{isHP:"hp"===a,name:module.localize(`${d}.name`),icon:f,iconPreview:f.replace(/,.+/,""),attributeKey:module.localize(`${d}.key`),permissionSetting:c.permission,permission:c.permission.get(),gmSetting:c.hideFromGM,hideFromGM:c.hideFromGM.get(),gmPermission:c.hideFromGM.get()?GM_PERMISSION.NPC_ONLY:GM_PERMISSION.ALL,help:e}};

const FORM_CSS_PREFIX=module.cssPrefix.childPrefix("menu").childPrefix("customOptions"),CSS={HELP_TOGGLE_ID:FORM_CSS_PREFIX.child("helpToggle"),HELP_TOGGLE_ON:FORM_CSS_PREFIX.child("helpToggle-on"),HELP_TOGGLE_OFF:FORM_CSS_PREFIX.child("helpToggle-off"),DEBUG_TOGGLE:FORM_CSS_PREFIX.child("toggleDebug"),DEBUG_TOGGLE_ON:FORM_CSS_PREFIX.child("toggleDebug-on"),ACTIONS:FORM_CSS_PREFIX.child("actions"),CUSTOM_OPTIONS_TITLE:FORM_CSS_PREFIX.child("customOptionsTitle"),STANDARD_OPTIONS_TITLE:FORM_CSS_PREFIX.child("standardOptionsTitle"),HEADER:FORM_CSS_PREFIX.child("header"),ADD_ROW_ID:FORM_CSS_PREFIX.child("addRow"),DELETE:FORM_CSS_PREFIX.child("delete"),MOVE_DOWN:FORM_CSS_PREFIX.child("moveDown"),MOVE_UP:FORM_CSS_PREFIX.child("moveUp"),DATA:FORM_CSS_PREFIX.child("data"),DISABLED_INPUT:FORM_CSS_PREFIX.child("disabledInput"),ICON_CELL:FORM_CSS_PREFIX.child("iconCell"),ICON_PREVIEW:FORM_CSS_PREFIX.child("iconPreview"),PERMISSIONS_CELL:FORM_CSS_PREFIX.child("permissionsCell"),GM_PERMISSIONS_CELL:FORM_CSS_PREFIX.child("gmPermissionsCell")};

const customRowTemplate=module.registerTemplate("menu-customOptions-customRow.html");module.registerTemplate("menu-customOptions-standardRow.html");const menuLocalize=a=>module.localize(`setting.menu.customOptions.${a}`);class CustomOptionsForm extends FormApplication{constructor(a,b){super(a,b);}static get defaultOptions(){return {...super.defaultOptions,...customOptionsFormOptions,classes:["sheet"],closeOnSubmit:!0}}getData(){const a=CustomOptions.get(),b=a.map(a=>{const b=a.hideFromGM?GM_PERMISSION.NPC_ONLY:GM_PERMISSION.ALL;return {gmPermission:b,...a}});return {...permissionMenus,standardOptions:getStandardItems(),customOptions:b,CSS,menuLocalize}}async _updateObject(a,b){const c=getStandardItems(),d=[];if(Array.isArray(b.name))for(let a=0;a<b.name.length;a++){const e=b.gmPermission[a]===GM_PERMISSION.NPC_ONLY;if(a<c.length){const d=c[a];d.permissionSetting.set(b.permission[a]),d.gmSetting?.set(e);}else d.push({name:b.name[a],icon:b.icon[a],attributeKey:b.attributeKey[a],permission:b.permission[a],hideFromGM:e});}CustomOptions.set(d);}onUpdateIcon(a){const b=a.target;if(!(b instanceof HTMLInputElement))return void module.logger.error("onUpdateIcon called with an event that did not target an HTMLInputElement");const c=b.parentNode?.querySelector(".fas");return c?void(c.className=`fas fa-${b.value}`):void module.logger.error("onUpdateIcon called for element with no associated iconPreview")}onDelete(a){if(!(a.target instanceof HTMLElement))return void module.logger.error("onDelete called with an event that did not target an HTMLElement");const b=getRow(a.target);return b?void(confirm(module.localize("setting.menu.customOptions.deleteConfirm"))&&b.remove(),this._refreshActionCells(),this.setPosition({height:"auto"})):void module.logger.error("onDelete called with a target with no associated row")}onMoveUp(a){if(!(a.target instanceof HTMLElement))return void module.logger.error("onMoveUp called with an event that did not target an HTMLElement");const b=getRow(a.target);if(!b)return void module.logger.error("onMoveUp called with a target with no associated row");const c=getRow(b.first().prev()[0]);c&&(b.insertBefore(c.first()),this._refreshActionCells());}onMoveDown(a){if(!(a.target instanceof HTMLElement))return void module.logger.error("onMoveDown called with an event that did not target an HTMLElement");const b=getRow(a.target);if(!b)return void module.logger.error("onDelete called with a target with no associated row");const c=getRow(b.last().next()[0]);c&&(b.insertAfter(c.last()),this._refreshActionCells());}onToggleDebug(a){a.preventDefault(),toggleDebug(),this._fixDebugToggleCSS();}onAdd(a){if(!(a.target instanceof HTMLElement))return void module.logger.error("onAdd called with an event that did not target an HTMLElement");const b=a.target;return b?void void(async()=>{const a=jQuery(await customRowTemplate.render({...permissionMenus,option:{name:"New Value",permission:"NONE"},CSS,menuLocalize}));a.insertBefore(jQuery(b)),this._activateRowListeners(a),this.setPosition({height:"auto"}),a.first().select();})():void module.logger.error("onAdd called with an event target with no parentElement")}activateListeners(a){super.activateListeners(a);const b=a.get(0);if(!b)return void module.logger.error("activateListeners called with empty element");module.logger.debug("Activating CustomOptionsForm listeners");const c=document.getElementById(CSS.ADD_ROW_ID);c?c.addEventListener("click",this.onAdd.bind(this)):module.logger.error(`Could not find #${CSS.ADD_ROW_ID} button when adding listeners`);const d=b.querySelectorAll(`.${CSS.DEBUG_TOGGLE}`),e=this.onToggleDebug.bind(this);for(const b of d)b.addEventListener("click",e);this._activateRowListeners(a),this._fixDebugToggleCSS();}_activateRowListeners(a){addEventListenerToAll(a,"input[name=\"icon\"]","input",this.onUpdateIcon.bind(this)),addEventListenerToAll(a,`.${CSS.DELETE}`,"click",this.onDelete.bind(this)),addEventListenerToAll(a,`.${CSS.MOVE_DOWN}`,"click",this.onMoveDown.bind(this)),addEventListenerToAll(a,`.${CSS.MOVE_UP}`,"click",this.onMoveUp.bind(this)),this._refreshActionCells();}_refreshActionCells(){const a=this.element.find(`.${CSS.CUSTOM_OPTIONS_TITLE} ~ .${CSS.ACTIONS}`);a.removeClass("first"),a.removeClass("last"),a.first().addClass("first"),a.last().addClass("last");}_fixDebugToggleCSS(){const a=this.element.find(`.${CSS.DEBUG_TOGGLE}`);isDebug()?a.addClass(CSS.DEBUG_TOGGLE_ON):a.removeClass(CSS.DEBUG_TOGGLE_ON);}}const customOptionsFormOptions=module.settings.registerMenu("customOptions",{icon:"fas fa-bars",type:CustomOptionsForm,restricted:!0}),getRow=a=>{let b=a;for(;b&&!b.parentElement?.classList.contains(CSS.DATA);)b=b.parentElement;for(;b&&!b.classList.contains(CSS.ACTIONS);)b=b.nextElementSibling;if(b&&b.classList.contains(CSS.ACTIONS)){const a=[];do a.unshift(b),b=b.previousElementSibling;while(b&&!(b.classList.contains(CSS.HEADER)||b.classList.contains(CSS.ACTIONS)));return jQuery(a)}return null};

const SettingsVersion=module.settings.register("settingsVersion",Number,0,{config:!1}),SETTINGS_VERSION=1;Hooks.once("ready",()=>{const a=SettingsVersion.get();if(a<SETTINGS_VERSION){if(1>a){const a=module.settings.register("showResources",Boolean,!1,{config:!1});a.get()||(module.logger.info(`Migrating old showResources setting - hiding resources`),Resources.permission.set(HIDE_FROM_EVERYONE_OPTION));const b=module.settings.register("showMovement",Boolean,!1,{config:!1});b.get()||(module.logger.info(`Migrating old showMovement setting - hiding movement`),Movement.permission.set(HIDE_FROM_EVERYONE_OPTION));}SettingsVersion.set(SETTINGS_VERSION),module.logger.info(`Settings Initialized - upgraded from v${a} to v${SETTINGS_VERSION}`);}else module.logger.info(`Settings Initialized - already on ${SETTINGS_VERSION}`);});

var ac = [new AttributeLookup(()=>"user-shield",()=>{switch(game.system.id){case"dnd5e":return game.i18n.localize("DND5E.ArmorClass");case"pf1":return game.i18n.localize("PF1.ACNormal");case"pf2e":return game.i18n.localize("PF2E.ArmorClassLabel");case"D35E":return game.i18n.localize("D35E.ACNormal");case"demonlord":return game.i18n.localize("DL.CharDefense");case"swade":return game.i18n.localize("SWADE.Tough");default:return "[AC]";}},a=>isLiteNPC$2(a)||isLiteNPC$1(a)?null:getAttributeValue(a.system,["attributes.ac.normal","attributes.ac","characteristics.defense","stats.toughness"])),new AttributeLookup(()=>null,()=>game.i18n.localize("illandril-token-tooltips.touchACAbbreviation"),a=>isLiteNPC$2(a)||isLiteNPC$1(a)?null:getAttributeValue(a,["system.attributes.ac.touch"])),new AttributeLookup(()=>null,()=>game.i18n.localize("illandril-token-tooltips.flatFootedACAbbreviation"),a=>isLiteNPC$2(a)||isLiteNPC$1(a)?null:getAttributeValue(a,["system.attributes.ac.flatFooted"])),new AttributeLookup(()=>null,()=>game.i18n.localize("illandril-token-tooltips.cmdAbbreviation"),a=>isLiteNPC$2(a)||isLiteNPC$1(a)?null:getAttributeValue(a,["system.attributes.cmd"])),new SimpleActorAttributeLookup(()=>null,()=>game.i18n.localize("SWFFG.Soak"),["system.stats.soak"]),new SimpleActorAttributeLookup(()=>null,()=>game.i18n.localize("illandril-token-tooltips.meleeDefenseAbbreviation"),["system.stats.defence.melee"]),new SimpleActorAttributeLookup(()=>null,()=>game.i18n.localize("illandril-token-tooltips.rangedDefenseAbbreviation"),["system.stats.defence.ranged"])];

const CSS_HP_HEARTS=module.cssPrefix.child("hp-hearts"),simplifyToHearts=(a,b)=>{const c=a;if("number"==typeof c.value&&"number"==typeof c.max){const a=c.value/c.max,d=Math.ceil(a*b),e=span(CSS_HP_HEARTS);for(let a=1;a<=b;a++)e.appendChild(icon("heart",a>d));return {value:e}}return c};

const SimplifyHPChoice=module.settings.register("simplifyHP",String,"NONE",{hasHint:!0,choices:["NONE","FOUR_HEARTS__PLAYERS_ALL","FOUR_HEARTS__PLAYERS_NON_FRIENDLY","FOUR_HEARTS__PLAYERS_HOSTILE","FOUR_HEARTS__PLAYERS_NON_OBSERVER","FIVE_HEARTS__PLAYERS_ALL","FIVE_HEARTS__PLAYERS_NON_FRIENDLY","FIVE_HEARTS__PLAYERS_HOSTILE","FIVE_HEARTS__PLAYERS_NON_OBSERVER"]}),Simplifiers={NONE:a=>a,FOUR_HEARTS__PLAYERS_ALL:a=>{let b=a;return game.user?.isGM||(b=simplifyToHearts(a,4)),b},FOUR_HEARTS__PLAYERS_NON_FRIENDLY:(a,b,c)=>{let d=a;return !game.user?.isGM&&c.document.disposition<foundry.CONST.TOKEN_DISPOSITIONS.FRIENDLY&&(d=simplifyToHearts(a,4)),d},FOUR_HEARTS__PLAYERS_HOSTILE:(a,b,c)=>{let d=a;return !game.user?.isGM&&c.document.disposition<foundry.CONST.TOKEN_DISPOSITIONS.NEUTRAL&&(d=simplifyToHearts(a,4)),d},FOUR_HEARTS__PLAYERS_NON_OBSERVER:(a,b,c)=>{let d=a;return game.user&&!c.actor.testUserPermission(game.user,foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER)&&(d=simplifyToHearts(a,4)),d},FIVE_HEARTS__PLAYERS_ALL:a=>{let b=a;return game.user?.isGM||(b=simplifyToHearts(a,5)),b},FIVE_HEARTS__PLAYERS_NON_FRIENDLY:(a,b,c)=>{let d=a;return !game.user?.isGM&&c.document.disposition<foundry.CONST.TOKEN_DISPOSITIONS.FRIENDLY&&(d=simplifyToHearts(a,5)),d},FIVE_HEARTS__PLAYERS_HOSTILE:(a,b,c)=>{let d=a;return !game.user?.isGM&&c.document.disposition<foundry.CONST.TOKEN_DISPOSITIONS.NEUTRAL&&(d=simplifyToHearts(a,5)),d},FIVE_HEARTS__PLAYERS_NON_OBSERVER:(a,b,c)=>{let d=a;return game.user&&!c.actor.testUserPermission(game.user,foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER)&&(d=simplifyToHearts(a,5)),d}};var simplifyHP = ((a,b,c)=>{if(!a)return null;const d=Simplifiers[SimplifyHPChoice.get()]??Simplifiers.NONE;return d(a,b,c)});

var index$1 = [new AttributeLookup(()=>"heart",()=>{switch(game.system.id){case"dnd5e":return game.i18n.localize("DND5E.HitPoints");case"pf1":return game.i18n.localize("PF1.HitPoints");case"pf2e":return game.i18n.localize("PF2E.HitPointsHeader");case"D35E":return game.i18n.localize("D35E.HitPoints");case"demonlord":return game.i18n.localize("DL.CharHealthDamage");case"swade":return game.i18n.localize("SWADE.Wounds");case"gurps4e":return game.i18n.localize("GURPS4E.attributes.hp");case"gurps":return game.i18n.localize("GURPS.HP");default:return "[HP]";}},(a,b)=>{const c=getAttributeValue(a.system,["attributes.hp","health","characteristics.health","wounds","tracked.hp","HP"]);return simplifyHP(calculateValue(c,"hp"),a,b)}),new SimpleActorAttributeLookup(()=>null,()=>game.i18n.localize("SWFFG.Wounds"),["stats.wounds"]),new SimpleActorAttributeLookup(()=>null,()=>game.i18n.localize("SWFFG.Strain"),["stats.strain"])];

const d35eOrPF1Movement=a=>b=>{if(isLiteNPC(b))return null;const c=calculateValue(foundry.utils.getProperty(b.system,`attributes.speed.${a}`));if(c&&"number"==typeof c.value&&0<c.value){if("fly"===a){const a=foundry.utils.getProperty(b.system,"attributes.speed.fly.maneuverability");if("string"==typeof a){const b=`PF1.FlyManeuverability${capitalize(a)}`;let d=a;game.i18n.has(b)&&(d=game.i18n.localize(b)),c.extra=d;}}return c}return null};

const dnd5eMovement=a=>b=>{const c=calculateValue(foundry.utils.getProperty(b.system,`attributes.movement.${a}`));if(c&&"number"==typeof c.value&&0<c.value){const a=foundry.utils.getProperty(b.system,"attributes.movement.units");return "string"==typeof a&&(c.units=a),c}return null};

const pf2Movement=a=>b=>{const c=unknownObject(foundry.utils.getProperty(b.system,"attributes.speed"));if(!c)return null;let d;if(c.type===a)d=calculateValue(c);else if(Array.isArray(c.otherSpeeds))for(const b of c.otherSpeeds){const c=unknownObject(b);if(c?.type===a){d=calculateValue(c);break}}return d&&"number"==typeof d.value&&0<d.value?d:null};

const labelLookup=a=>()=>{switch(game.system.id){case"dnd5e":return game.i18n.localize(`DND5E.Movement${capitalize(a)}`);case"pf1":return game.i18n.localize(`PF1.Speed${capitalize(a)}_Short`);case"pf2e":return game.i18n.localize(`PF2E.SpeedTypes${capitalize(a)}`);case"D35E":return game.i18n.localize(`D35E.Speed${capitalize(a)}`);default:return `[${a.toUpperCase()}]`;}},multiMovement=(a,b,c)=>{const d=c.map(b=>b(a));return new AttributeLookup(()=>b,labelLookup(a),(a,b)=>{for(const c of d){const d=c(a,b);if(d)return d}return null})},genericMovement=(a,b)=>new SimpleActorAttributeLookup(()=>b,()=>{switch(game.system.id){case"swade":return game.i18n.localize(`SWADE.Pace`);case"gurps4e":return game.i18n.localize(`GURPS4E.attributes.bs`);default:return "[SPEED]";}},a);var movements = [multiMovement("walk","walking",[dnd5eMovement]),multiMovement("land","walking",[d35eOrPF1Movement,pf2Movement]),genericMovement(["system.characteristics.movement","system.characteristics.speed","system.stats.speed","system.bs"],"walking"),multiMovement("burrow","angle-double-down",[dnd5eMovement,d35eOrPF1Movement,pf2Movement]),multiMovement("climb","spider",[dnd5eMovement,d35eOrPF1Movement,pf2Movement]),multiMovement("fly","feather-alt",[dnd5eMovement,d35eOrPF1Movement,pf2Movement]),multiMovement("swim","swimmer",[dnd5eMovement,d35eOrPF1Movement,pf2Movement])];

const passive=(a,b)=>new AttributeLookup(()=>b,()=>game.system.id===dnd5eSystemID?game.i18n.localize(`DND5E.Skill${capitalize(a)}`)+" ("+game.i18n.localize("DND5E.Passive")+")":`[${a.toUpperCase()}]`,b=>calculateValue(foundry.utils.getProperty(b.system,`skills.${a}.passive`)));var passives = [passive("prc","eye"),passive("inv","search"),passive("ins","brain"),new AttributeLookup(()=>"eye",()=>game.i18n.localize("PF1.SkillPer"),a=>game.system.id!==systemID||isLiteNPC$1(a)?null:calculateValue(foundry.utils.getProperty(a.system,`skills.per.mod`))),new AttributeLookup(()=>"eye",()=>game.i18n.localize("PF2E.PerceptionLabel"),a=>{if(game.system.id!==pf2eSystemID)return null;const b=foundry.utils.getProperty(a.system,`attributes.perception.value`);let c;return c="string"==typeof b?stringToInt(b):"number"!=typeof b||isNaN(b)?null:b,null===c?null:{value:c+10}})];

const CSS_RESOURCE=module.cssPrefix.child("resource"),CSS_RESOURCE_NUMBER=module.cssPrefix.child("resource-number"),resourceLookup=(a,b)=>new AttributeLookup(()=>{const a=span(CSS_RESOURCE);a.appendChild(icon("circle"));const c=span(CSS_RESOURCE_NUMBER);return c.appendChild(document.createTextNode(b)),a.appendChild(c),a},()=>"dnd5e"===game.system.id?game.i18n.localize(`DND5E.Resource${capitalize(a)}`):`[${a.toUpperCase()}]`,b=>{const c=unknownObject(foundry.utils.getProperty(b.system,`resources.${a}`));return c&&"number"==typeof c.value?0<c.value||"number"==typeof c.max&&0<c.max?calculateValue(c):null:null});var resources = [resourceLookup("primary","1"),resourceLookup("secondary","2"),resourceLookup("tertiary","3")];

const CSS_SPELLSLOT=module.cssPrefix.child("spellslot"),CSS_SPELLSLOT_LEVEL=module.cssPrefix.child("spellslot-level"),spellIcon=a=>{const b=span(CSS_SPELLSLOT);b.appendChild(icon("star"));const c=span(CSS_SPELLSLOT_LEVEL);return c.appendChild(document.createTextNode(a)),b.appendChild(c),b};

const getSpellcastingEntries=a=>{const b=[];for(const c of a.items)if("spellcastingEntry"===c.type){const d=a.spellcasting.get(c.id);d&&b.push({sort:c.sort||0,spellcastingEntry:d});}return b.sort((c,a)=>c.sort-a.sort),b.map(a=>a.spellcastingEntry)},getFocusEntry=a=>{const b=game.i18n.localize("illandril-token-tooltips.focusAbbreviation");return {label:b,icon:spellIcon(b),value:calculateValue(foundry.utils.getProperty(a.system,"resources.focus"))}},getLevelEntry=a=>{if(a.uses&&void 0!==a.uses.value&&0<a.uses.max){let b;return b=a.isCantrip?game.i18n.localize("illandril-token-tooltips.cantripAbbreviation"):`${a.level}`,{icon:spellIcon(b),label:b,value:calculateValue(a.uses)}}return null};var pf2eSpellSlots = new AsyncAttributeLookup("pf2e Spell Slots",async a=>{if(game.system.id!==pf2eSystemID)return [];const b=a;if(module.logger.debug("pf2e spell slots",b.name,b),!b.spellcasting)return module.logger.debug("pf2e spell slots: actor has no spellcasting",b.name),[];module.logger.debug("pf2e spell slots: spellcasting",b.spellcasting);const c=[],d=getSpellcastingEntries(b);let e=!1;for(const f of d){if(module.logger.debug("pf2e spell slots: spellcasting entry",f),f.isFocusPool){e||(e=!0,c.push(getFocusEntry(b)));continue}if(f.getSpellData){const a=await f.getSpellData();for(const b of a.levels){const a=getLevelEntry(b);a&&c.push(a);}}}return c});

const isSetSlots=a=>{if(null===a)return !1;if(isSetSlotsValue(a))return !0;if("object"==typeof a){const b=a;if(isSetSlotsValue(b.total)||isSetSlotsValue(b.value))return isNonZeroMax(b.max)}return !1},isNonZeroMax=a=>null===a||void 0===a||("number"==typeof a?!isNaN(a)&&0<a:"string"==typeof a&&""!==a),isSetSlotsValue=a=>"number"==typeof a?!isNaN(a):"string"==typeof a&&""!=a,spellSlot=(a,b)=>{const c=()=>"number"==typeof b?`${b}`:game.i18n.localize(b);return new AttributeLookup(()=>spellIcon(c()),c,b=>{const c=foundry.utils.getProperty(b,a);return isSetSlots(c)?calculateValue(c):null})};

var index = [spellSlot("system.power","illandril-token-tooltips.powerAbbreviation"),spellSlot("system.spells.pact","illandril-token-tooltips.pactAbbreviation"),spellSlot("system.spells.spell0","illandril-token-tooltips.cantripAbbreviation"),spellSlot("system.spells.spell1",1),spellSlot("system.spells.spell2",2),spellSlot("system.spells.spell3",3),spellSlot("system.spells.spell4",4),spellSlot("system.spells.spell5",5),spellSlot("system.spells.spell6",6),spellSlot("system.spells.spell7",7),spellSlot("system.spells.spell8",8),spellSlot("system.spells.spell9",9),pf2eSpellSlots];

const img=a=>{if(a){const b=document.createElement("img");return b.src=a,b.alt="",b}return null};

const itemSort=(c,a)=>c.sort-a.sort;const get$1=a=>{const b=a.items,c=[],d=[];return b.forEach(a=>{if(showInTooltip(a)){const b=calculateUses(a);if(!b)return;null!==b.uses&&("feat"===a.type?c:d).push({name:a.name,icon:img(a.img),sort:a.sort,value:{value:b.uses,max:b.maxUses}});}}),c.sort(itemSort),d.sort(itemSort),c.concat(d)};

const get=a=>{const b=foundry.utils.getProperty(a.system,"talentList");return b&&Array.isArray(b)?b.map(b=>{if(!b||"object"!=typeof b)return null;if("string"!=typeof b.itemId||"string"!=typeof b.name)return null;const c=a.items.get(b.itemId),d=img(c?.img)||"star";return {name:b.name,icon:d,value:b.name}}).filter(filterEmpty):[]};

const getActiveToken=()=>{const a=ChatMessage.getSpeaker();return a.token?game.canvas.tokens?.get(a.token):null},calculateDistance=(a,b,c)=>{const d=c.bounds,e=b.bounds,f={x:c.center.x,y:c.center.y},g={x:b.center.x,y:b.center.y};return d.width>a.size&&(d.right<e.left?f.x=d.right-a.size/2:d.left>e.right?f.x=d.left+a.size/2:f.x=g.x),d.height>a.size&&(d.bottom<e.top?f.y=d.bottom-a.size/2:d.top>e.bottom?f.y=d.top+a.size/2:f.y=g.y),e.width>a.size&&(e.right<d.left?g.x=e.right-a.size/2:e.left>d.right?g.x=e.left+a.size/2:g.x=f.x),e.height>a.size&&(e.bottom<d.top?g.y=e.bottom-a.size/2:e.top>d.bottom?g.y=e.top+a.size/2:g.y=f.y),a.measureDistance(f,g,{gridSpaces:!0})};var distanceFromActiveToken = [new AttributeLookup(()=>"ruler",()=>game.i18n.localize("Distance"),(a,b)=>{const c=game.canvas.grid,d=game.canvas.scene;if(!c||!d)return null;const e=getActiveToken();if(!e)return null;const f=calculateDistance(c,e,b);return {value:f,units:d.grid.units}})];

const isTrap=a=>game.system.id===systemID$1&&"trap"===a.type;

const isLootNPC=a=>game.system.id===systemID&&(a.sheet?.options?.classes?.includes("loot")??!1);

const showNameOnly=a=>isTrap(a)||isLootNPC(a);

let showTooltipHotkeyPressed=!1;const showTooltipHotkeyCallbacks=[];Hooks.once("init",()=>{game.keybindings.register(module.id,"showTooltip",{name:module.localize("hotkey.showTooltip.label"),hint:module.localize("hotkey.showTooltip.hint"),editable:[{key:"ShiftLeft"},{key:"ShiftRight"}],onDown:()=>{showTooltipHotkeyPressed=!0;for(const a of showTooltipHotkeyCallbacks)a();},onUp:()=>{showTooltipHotkeyPressed=!1;for(const a of showTooltipHotkeyCallbacks)a();},precedence:foundry.CONST.KEYBINDING_PRECEDENCE.NORMAL});});const showTooltipHotkey=Object.freeze({isPressed:()=>showTooltipHotkeyPressed,onToggle:a=>{showTooltipHotkeyCallbacks.push(a);}});

const getControlledToken=()=>{const a=game.canvas.tokens?.controlled;return module.logger.debug("getControlledToken",a),a&&1===a.length?a[0]:null};

const VisibilityChoice=module.settings.register("visibility",String,"FRIENDLY",{hasHint:!0,choices:["FRIENDLY","NEUTRAL","ALL_PLAYERS","OWNER","OBSERVER","LIMITED","ALL","NONE"]}),Rules={FRIENDLY:a=>a.document.disposition>=foundry.CONST.TOKEN_DISPOSITIONS.FRIENDLY,NEUTRAL:a=>a.document.disposition>=foundry.CONST.TOKEN_DISPOSITIONS.NEUTRAL,ALL_PLAYERS:a=>a.actor.hasPlayerOwner,OWNER:a=>a.owner,OBSERVER:a=>a.observer,LIMITED:a=>!!game.user&&a.actor.testUserPermission(game.user,"LIMITED"),ALL:()=>!0,NONE:()=>!1};var isTooltipVisible = (a=>{const b=Rules[VisibilityChoice.get()]??Rules.NONE;return b(a)});

const showDataType=(a,b,c,d)=>c!==HIDE_FROM_EVERYONE_OPTION&&(game.user?.isGM?!(a.hasPlayerOwner&&d):c!==SHOW_TO_GMS_ONLY&&!!game.user&&("FRIENDLY"===c?b.document.disposition>=foundry.CONST.TOKEN_DISPOSITIONS.FRIENDLY:"NEUTRAL"===c?b.document.disposition>=foundry.CONST.TOKEN_DISPOSITIONS.NEUTRAL:a.testUserPermission(game.user,c)));

const showStandardRow=(a,b,c)=>showDataType(a,b,c.permission.get(),c.hideFromGM.get());

class StandardRow{constructor(a,b,c){this.attributeLookup=a,this.option=b,this.row=null,this.groupID=c;}update(a,b,c){if(module.logger.debug("StandardRow update",this.groupID),showStandardRow(b,c,this.option))if(this.attributeLookup instanceof AsyncAttributeLookup){const d=this.attributeLookup,e=a._prepareAsyncReference(d.id);void(async()=>{try{const f=await d.asyncRows(b,c);for(const b of f){const c=new AttributeRow(b.label,b.icon,this.groupID);a._updateRow(c,b.value,e);}}catch(a){module.logger.error("Error with async lookup",this.groupID,a,b,c);}})();}else try{const d=this.attributeLookup;null===this.row&&(this.row=new AttributeRow(d.label(),d.icon(),this.groupID)),a._updateRow(this.row,d.value(b,c));}catch(a){module.logger.error("Error with sync lookup",this.groupID,a,b,c);}}}

const CSS_TOOLTIP=module.cssPrefix.child("tooltip"),CSS_NAME=module.cssPrefix.child("name"),CSS_DATA=module.cssPrefix.child("data"),CSS_SHOW=module.cssPrefix.child("show");module.settings.register("rowsPerTooltip",Number,5,{hasHint:!0,range:{min:1,max:30,step:1},onChange:a=>{document.documentElement.style.setProperty("--illandril-token-tooltips--tooltip-rows",`${a}`);},callOnChangeOnInit:!0}),module.settings.register("tooltipFontSize",Number,1,{hasHint:!0,range:{min:.5,max:3,step:.1},onChange:a=>{document.documentElement.style.setProperty("--illandril-token-tooltips--tooltip-base-size",`${a}em`);},callOnChangeOnInit:!0});const ShowOnLeft=module.settings.register("showOnLeft",Boolean,!1,{hasHint:!0}),ShowTokenName=module.settings.register("showTokenName",Boolean,!0,{hasHint:!0}),ShowOnHighlightHotkey=module.settings.register("showOnHighlightHotkey",Boolean,!0,{hasHint:!0}),ShowOnlyWithTooltipHotkey=module.settings.register("showOnlyWithTooltipHotkey",Boolean,!1,{hasHint:!0});class Tooltip{#element=div(CSS_TOOLTIP);#nameElement=div(CSS_NAME);#dataElement=div(CSS_DATA);#standardRows;#customRows;constructor(){this.#element.appendChild(this.#nameElement),this.#element.appendChild(this.#dataElement),this.#standardRows=[],this.#prepareStandardRows(),this.#customRows=[],document.body.appendChild(this.#element),window.addEventListener("mousedown",()=>{this.#element.classList.remove(CSS_SHOW);}),Hooks.on("hoverToken",(a,b)=>{this.#onHover(b?a:game.canvas.tokens?.hover??null);}),Hooks.on("highlightObjects",a=>{const b=ShowOnHighlightHotkey.get();module.logger.debug("highlightObjects",a,b),b&&this.#onHover(a?getControlledToken():null);}),showTooltipHotkey.onToggle(()=>{showTooltipHotkey.isPressed()?this.#onHover(game.canvas.tokens?.hover??null):this.#onHover(null);});}#prepareStandardRows(){for(const a of index$1)this.#standardRows.push(new StandardRow(a,HP,"HP"));for(const a of ac)this.#standardRows.push(new StandardRow(a,AC,"AC"));for(const a of values)this.#standardRows.push(new StandardRow(a,AttributePlus,"Attributes"));for(const a of savingThrows)this.#standardRows.push(new StandardRow(a,SavingThrows,"Saving Throws"));for(const a of damageResImmVuln)this.#standardRows.push(new StandardRow(a,DmgResVuln,"Damage Resistances/Imm/Vuln"));for(const a of conditionImmunities)this.#standardRows.push(new StandardRow(a,CondImm,"Condition Immunities"));for(const a of passives)this.#standardRows.push(new StandardRow(a,Passives,"Passives"));for(const a of movements)this.#standardRows.push(new StandardRow(a,Movement,"Movements"));for(const a of distanceFromActiveToken)this.#standardRows.push(new StandardRow(a,Ruler,"Distance from Active Token"));for(const a of resources)this.#standardRows.push(new StandardRow(a,Resources,"Resources"));for(const a of index)this.#standardRows.push(new StandardRow(a,Spells,"Spell Slots"));}#onHover(a){a&&shouldShowTooltip(a)?(module.logger.debug("onHover show",a),this.#updateData(a),this.#fixPosition(a),this.#show()):(module.logger.debug("onHover hide",a),this.#hide());}#fixPosition(a){if(ShowOnLeft.get()){const b=window.innerWidth-Math.ceil(a.worldTransform.tx-8);this.#element.style.right=`${b}px`,this.#element.style.left="";}else {const b=a.bounds.width*(game.canvas.stage?.scale.x??1),c=Math.ceil(a.worldTransform.tx+b+8);this.#element.style.left=`${c}px`,this.#element.style.right="";}const b=Math.floor(a.worldTransform.ty-8);this.#element.style.top=`${b}px`;}#show(){this.#element.classList.add(CSS_SHOW),this.#fixWidth();}#isShown(){return this.#element.classList.contains(CSS_SHOW)}#fixWidth(){this.#dataElement.style.width="";const a=this.#dataElement.lastElementChild;if(a instanceof HTMLElement){const b=a.offsetLeft+a.offsetWidth;this.#dataElement.style.width=`${b}px`;}}#hide(){this.#element.classList.remove(CSS_SHOW);}#updateData(a){module.logger.debug("updateData",a),this.#clearElements(),this.#updateName(a);const b=a.actor;if(!showNameOnly(b)){for(const c of this.#standardRows)c.update(this,b,a);this.#updateTalents(b,a),this.#updateItems(b,a),this.#updateCustomRows(b,a);}}#clearElements(){emptyNode(this.#nameElement),emptyNode(this.#dataElement);}#updateName(a){ShowTokenName.get()?(this.#nameElement.style.display="",this.#nameElement.appendChild(document.createTextNode(a.name||""))):this.#nameElement.style.display="none";}_prepareAsyncReference(a){const b=document.createComment(`Async Start: ${a}`),c=document.createComment(`Async End: ${a}`);return this.#dataElement.appendChild(b),this.#dataElement.appendChild(c),c}_updateRow(a,b,c){const d=calculateValue(b);d&&(a.setValue(d),c?this.#dataElement.insertBefore(a.element,c):this.#dataElement.appendChild(a.element),this.#isShown()&&this.#fixWidth());}#updateItems(a,b){if(showStandardRow(a,b,Items))try{const b=get$1(a);for(const a of b){const b=new AttributeRow(a.name,a.icon,"Items");this._updateRow(b,a.value);}}catch(b){module.logger.error("Error updating items",b,a);}}#updateTalents(a,b){if(showStandardRow(a,b,Talents))try{const b=get(a);for(const a of b){const b=new AttributeRow(a.name,a.icon,"Talents");this._updateRow(b,a.value);}}catch(b){module.logger.error("Error updating talents",b,a);}}#updateCustomRows(a,b){const c=CustomOptions.get();c&&0!==c.length&&c.forEach((c,d)=>{if(showDataType(a,b,c.permission,c.hideFromGM))try{const b=updateCustomAttributeRow(a,c,this.#customRows,d);b&&this.#dataElement.appendChild(b.element);}catch(b){module.logger.error("Error updating custom row",a,c);}});}}const shouldShowTooltip=a=>!!(a&&a.actor)&&(!ShowOnlyWithTooltipHotkey.get()||showTooltipHotkey.isPressed())&&(!!game.user?.isGM||isTooltipVisible(a));

Hooks.once("ready",()=>{new Tooltip;});
