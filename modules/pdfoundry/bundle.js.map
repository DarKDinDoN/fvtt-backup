{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/pdfoundry/Api.ts","src/pdfoundry/Main.ts","src/pdfoundry/Settings.ts","src/pdfoundry/Setup.ts","src/pdfoundry/Util.ts","src/pdfoundry/app/ActorSheetSelect.ts","src/pdfoundry/app/PDFActorDataBrowser.ts","src/pdfoundry/app/PDFActorSheetAdapter.ts","src/pdfoundry/app/PDFConfig.ts","src/pdfoundry/app/PlayerSelect.ts","src/pdfoundry/app/SelectApp.ts","src/pdfoundry/cache/CacheError.ts","src/pdfoundry/cache/CacheHelper.ts","src/pdfoundry/cache/PDFCache.ts","src/pdfoundry/commands/ChatCommand.ts","src/pdfoundry/commands/FixMissingTypes.ts","src/pdfoundry/commands/PurgeCache.ts","src/pdfoundry/common/Whitelist.ts","src/pdfoundry/common/helpers/events.ts","src/pdfoundry/common/helpers/header.ts","src/pdfoundry/common/types/PDFType.ts","src/pdfoundry/enricher/HTMLEnricher.ts","src/pdfoundry/enricher/TinyMCEPlugin.ts","src/pdfoundry/migrate/MigrateLegacy.ts","src/pdfoundry/socket/Socket.ts","src/pdfoundry/socket/events/PreloadEvent.ts","src/pdfoundry/socket/events/SetViewEvent.ts","src/pdfoundry/socket/events/SocketEvent.ts","src/pdfoundry/viewer/ActorViewer.ts","src/pdfoundry/viewer/BaseViewer.ts","src/pdfoundry/viewer/FillableViewer.ts","src/pdfoundry/viewer/StaticViewer.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The PDFoundry API.\n *\n * You can access the API with `ui.PDFoundry`.\n * @moduledefinition API\n */\n\nimport {\n    canOpenPDF,\n    deletePDFData,\n    getAbsoluteURL,\n    getPDFData,\n    getRoutePrefix,\n    getUserIdsExceptMe,\n    isEntityPDF,\n    setPDFData,\n    validateAbsoluteURL,\n} from './Util';\nimport StaticViewer from './viewer/StaticViewer';\nimport { PDFData } from './common/types/PDFData';\nimport Settings from './Settings';\nimport PDFCache from './cache/PDFCache';\nimport BaseViewer from './viewer/BaseViewer';\nimport { PDFType } from './common/types/PDFType';\nimport FillableViewer from './viewer/FillableViewer';\n\n// noinspection JSUnusedGlobalSymbols\n\n/**\n * A function to passed to {@link Api.findPDFData} to find user specified PDF data.\n * @module API\n */\nexport type PDFValidator = (data: PDFData) => boolean;\n\n/**\n * Open the specified PDF in a provided viewer\n * @param viewer\n * @param url\n * @param page\n * @param cache\n * @internal\n */\nexport async function _handleOpen(viewer: BaseViewer, url: string, page: number | undefined, cache: boolean) {\n    if (cache) {\n        const cachedBytes = await PDFCache.getCache(url);\n        // If we have a cache hit open the cached data\n        if (cachedBytes) {\n            await viewer.open(cachedBytes, page);\n        } else {\n            // Otherwise we should open it by url\n            await viewer.open(url, page);\n            // And when the download is complete set the cache\n            viewer.download().then((bytes) => {\n                PDFCache.setCache(url, bytes);\n            });\n        }\n    } else {\n        await viewer.open(url, page);\n    }\n}\n\n/**\n * Options passed to the {@link Api.openPDF} function.\n * @module API\n */\nexport interface PDFOpenOptions {\n    /**\n     * The page to open to. If not specified, PDFoundry will attempt to open the\n     *  last page the user was viewing.\n     */\n    page?: number;\n    /**\n     * If you're opening a fillable pdf, you must specify an entity for data storage.\n     */\n    entity?: JournalEntry;\n}\n\n/**\n * A definition for a viewer theme.\n * @module API\n */\nexport interface ViewerTheme {\n    /**\n     *\n     */\n    id: string;\n    name: string;\n    filePath: string;\n}\n\n/**\n * The PDFoundry API\n *\n * You can access the API with `ui.PDFoundry`.\n * @module API\n */\nexport default class Api {\n    /**\n     * Enable additional debug information for the specified category.\n     * @category Debug\n     */\n    public static DEBUG = {\n        // TODO\n        /**\n         * When set to true, enables the logging event names and arguments to console.\n         */\n        EVENTS: false,\n    };\n\n    // <editor-fold desc=\"Static Methods\">\n\n    private static _availableThemes: { [id: string]: ViewerTheme } = {};\n\n    /**\n     * Get a full theme definition by id.\n     * @param id The unique id of the theme to lookup.\n     */\n    public static getTheme(id: string): ViewerTheme | null {\n        return Api._availableThemes[id] ?? null;\n    }\n\n    /**\n     * Get the currently enabled theme id.\n     */\n    public static get activeTheme(): ViewerTheme {\n        const id = Settings.get(Settings.SETTINGS_KEY.VIEWER_THEME);\n        return Api._availableThemes[id];\n    }\n\n    /**\n     * Get a map of themes available for use.\n     */\n    public static get availableThemes() {\n        const themesMap = {};\n        for (const key of Object.keys(Api._availableThemes)) {\n            themesMap[key] = Api._availableThemes[key].name;\n        }\n        return themesMap;\n    }\n\n    /**\n     * Register a theme for use with PDFoundry. You must register a theme before `ready`. Do so in `setup`.\n     * @param id The unique id of the theme. Providing an already existing id will over-write the existing theme.\n     * @param name The user-facing display name of the theme.\n     * @param filePath The relative path of the theme css file\n     */\n    public static registerTheme(id: string, name: string, filePath: string) {\n        if (!filePath.endsWith('.css')) {\n            throw new Error('You may only register css files as themes.');\n        }\n\n        if (Api._availableThemes.hasOwnProperty(id)) {\n            console.warn(`PDFoundry theme with id of \"${id}\" is already registered!`);\n        }\n\n        this._availableThemes[id] = {\n            id,\n            name,\n            filePath,\n        };\n    }\n\n    // </editor-fold>\n\n    /**\n     * A reference to the unclassified utility functions.\n     * @category Utility\n     */\n    public static get Utilities() {\n        return {\n            getRoutePrefix,\n            getAbsoluteURL,\n            validateAbsoluteURL,\n            isEntityPDF,\n            getPDFData,\n            setPDFData,\n            deletePDFData,\n            canOpenPDF,\n            getUserIdsExceptMe,\n        };\n    }\n\n    // <editor-fold desc=\"GetPDFData Methods\">\n\n    /**\n     * Find a PDF containing journal entry from the journals directory using a specified comparer.\n     * @param comparer The function to compare PDF data with.\n     * @param allowInvisible If true, PDFs hidden from the active user will be returned.\n     * @category PDFData\n     */\n    public static findPDFEntity(comparer: PDFValidator, allowInvisible: boolean = true): JournalEntry | null {\n        return game.journal.find((journalEntry: JournalEntry) => {\n            if (!isEntityPDF(journalEntry)) {\n                return false;\n            }\n\n            const pdfData = getPDFData(journalEntry);\n            if (pdfData === undefined) {\n                return false;\n            }\n\n            return (journalEntry.visible || allowInvisible) && comparer(pdfData);\n        });\n    }\n\n    /**\n     * Helper method. Alias for {@link Api.findPDFData} with a comparer that searches by PDF Code.\n     * @param code Which code to search for a PDF with.\n     * @param allowInvisible See allowVisible on {@link findPDFEntity}\n     * @category PDFData\n     */\n    public static findPDFDataByCode(code: string, allowInvisible: boolean = true): PDFData | undefined {\n        return Api.findPDFData((data: PDFData) => {\n            return data.code === code;\n        }, allowInvisible);\n    }\n\n    /**\n     * Helper method. Alias for {@link Api.findPDFData} with a comparer that searches by PDF Name.\n     * @param name Which name to search for a PDF with.\n     * @param caseInsensitive If a case insensitive search should be done.\n     * @param allowInvisible See allowVisible on {@link findPDFEntity}\n     * @category PDFData\n     */\n    public static findPDFDataByName(name: string, caseInsensitive: boolean = true, allowInvisible: boolean = true): PDFData | undefined {\n        if (caseInsensitive) {\n            return Api.findPDFData((data) => {\n                return data.name.toLowerCase() === name.toLowerCase();\n            }, allowInvisible);\n        } else {\n            return Api.findPDFData((data) => {\n                return data.name === name;\n            }, allowInvisible);\n        }\n    }\n\n    /**\n     * Finds a PDF entity created by the user and constructs a {@link PDFData} object of the resulting PDF's data.\n     * @param comparer A comparison function that will be used.\n     * @param allowInvisible See allowVisible on {@link findPDFEntity}\n     * @category PDFData\n     */\n    public static findPDFData(comparer: PDFValidator, allowInvisible: boolean = true): PDFData | undefined {\n        const pdf = this.findPDFEntity(comparer, allowInvisible);\n        if (pdf === null) {\n            return undefined;\n        }\n\n        return getPDFData(pdf);\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"OpenPDF Methods\">\n\n    /**\n     * Open the PDF with the provided code to the specified page.\n     * Helper for {@link findPDFDataByCode} then {@link openPDF}.\n     * @category Open\n     */\n    public static async openPDFByCode(code: string, options?: PDFOpenOptions): Promise<BaseViewer> {\n        const pdf = this.findPDFDataByCode(code);\n\n        if (pdf === undefined) {\n            const error = game.i18n.localize('PDFOUNDRY.ERROR.NoPDFWithCode');\n\n            ui.notifications.error(error);\n\n            return Promise.reject(error);\n        }\n\n        return this.openPDF(pdf, options);\n    }\n\n    /**\n     * Open the PDF with the provided code to the specified page.\n     * Helper for {@link findPDFDataByCode} then {@link openPDF}.\n     * @category Open\n     */\n    public static async openPDFByName(name: string, options?: PDFOpenOptions): Promise<BaseViewer> {\n        const pdf = this.findPDFDataByName(name);\n\n        if (pdf === undefined) {\n            const message = game.i18n.localize('PDFOUNDRY.ERROR.NoPDFWithName');\n            const error = new Error(message);\n\n            ui.notifications.error(error.message);\n\n            return Promise.reject(error);\n        }\n\n        return this.openPDF(pdf, options);\n    }\n\n    /**\n     * Open the provided {@link PDFData} to the specified page.\n     * @param pdf The PDF to open. See {@link Api.findPDFData}.\n     * @param options The specified options for PDFs.\n     * @category Open\n     */\n    public static async openPDF(pdf: PDFData, options?: PDFOpenOptions): Promise<BaseViewer> {\n        if (options === undefined) {\n            options = {};\n        }\n\n        let { url, offset, cache } = pdf;\n\n        if (typeof offset === 'string') {\n            if (offset === '') {\n                offset = 0;\n            } else {\n                offset = parseInt(offset);\n            }\n        } else if (offset === null) {\n            offset = 0;\n        }\n\n        if (!validateAbsoluteURL(url)) {\n            url = getAbsoluteURL(url);\n        }\n\n        if (options.page !== undefined) {\n            options.page = options.page + offset;\n        }\n\n        let viewer: BaseViewer;\n\n        switch (pdf.type) {\n            case PDFType.Static:\n                viewer = new StaticViewer(pdf);\n                viewer.render(true);\n\n                await _handleOpen(viewer, url, options.page, cache);\n                break;\n            case PDFType.Fillable:\n                if (!(options.entity instanceof JournalEntry)) {\n                    throw new Error('Provided entity was not a journal entry.');\n                }\n\n                viewer = new FillableViewer(options.entity, pdf);\n                viewer.render(true);\n\n                await _handleOpen(viewer, url, options.page, cache);\n                break;\n            case PDFType.Actor:\n                throw new Error('Actor sheets can only be opened through the actor.sheet accessor.');\n        }\n        return viewer;\n    }\n\n    /**\n     * Open a URL as a static PDF. For form fillable PDFs you muse use {@link Api.openPDF}\n     * @param url The URL to open (must be absolute).\n     * @param page Which page to open to. Must be >= 1.\n     * @param cache If URL based caching should be used.\n     * @category Open\n     */\n    public static async openURL(url: string, page: number = 1, cache: boolean = true): Promise<BaseViewer> {\n        if (isNaN(page) || page <= 0) {\n            throw new Error(`Page must be > 0, but ${page} was given.`);\n        }\n\n        if (!validateAbsoluteURL(url)) {\n            url = getAbsoluteURL(url);\n        }\n\n        const viewer = new StaticViewer();\n        viewer.render(true);\n\n        await _handleOpen(viewer, url, page, cache);\n\n        return viewer;\n    }\n\n    /**\n     * Shows the user manual to the active user.\n     * @category Utility\n     */\n    public static async showHelp(): Promise<BaseViewer> {\n        await Settings.set(Settings.SETTINGS_KEY.HELP_SEEN, true);\n\n        const lang = game.i18n.lang;\n        let manualPath = getAbsoluteURL(`${Settings.PATH_ASSETS}/manual/${lang}/manual.pdf`);\n        // @ts-ignore\n        const manualExists = await srcExists(manualPath);\n\n        if (!manualExists) {\n            manualPath = getAbsoluteURL(`${Settings.PATH_ASSETS}/manual/en/manual.pdf`);\n        }\n\n        const pdfData: PDFData = {\n            name: game.i18n.localize('PDFOUNDRY.MANUAL.Name'),\n            type: PDFType.Static,\n            code: '',\n            offset: 0,\n            url: manualPath,\n            cache: false,\n        };\n\n        return Api.openPDF(pdfData);\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Setup from './Setup';\n\nSetup.run();\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Api from './Api';\n\n/**\n * Internal settings and helper methods for PDFoundry.\n * @internal\n */\nexport default class Settings {\n    public static readonly MODULE_NAME: string = 'pdfoundry';\n\n    public static get PATH_MODULE() {\n        return `modules/${Settings.MODULE_NAME}`;\n    }\n    public static get PATH_ASSETS() {\n        return `${Settings.PATH_MODULE}/assets`;\n    }\n    public static get PATH_LOCALE() {\n        return `${Settings.PATH_MODULE}/locale`;\n    }\n    public static get PATH_TEMPLATES() {\n        return `${Settings.PATH_MODULE}/templates`;\n    }\n    public static get PATH_PDFJS() {\n        return `${Settings.PATH_MODULE}/pdfjs`;\n    }\n\n    public static get SOCKET_NAME() {\n        return `module.${Settings.MODULE_NAME}`;\n    }\n\n    public static readonly CSS_CLASS = 'pdf-app';\n\n    public static readonly MENU_KEY = 'PDFoundrySettings';\n\n    public static readonly SETTINGS_KEY = {\n        EXISTING_VIEWER: 'ShowInExistingViewer',\n        CACHE_SIZE: 'CacheSize',\n        VIEWER_THEME: 'ViewerTheme',\n        HELP_SEEN: 'HelpSeen',\n        DATA_VERSION: 'DataVersion',\n    };\n    public static readonly FLAGS_KEY = {\n        // PDF Data\n        PDF_DATA: 'PDFData',\n        // Actor Sheets\n        FORM_DATA: 'FormData',\n        SHEET_ID: 'ActorSheet',\n        // Canvas Notes\n        PAGE_NUMBER: 'PageNumber',\n    };\n\n    public static initialize() {\n        Settings.register(Settings.SETTINGS_KEY.CACHE_SIZE, {\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.CacheSizeName'),\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.CacheSizeHint'),\n            scope: 'user',\n            type: Number,\n            default: 256,\n            config: true,\n            onChange: async (mb) => {\n                if (Settings.get(Settings.SETTINGS_KEY.CACHE_SIZE) === mb) {\n                    return;\n                }\n\n                mb = Math.round(mb);\n                mb = Math.max(mb, 64);\n                mb = Math.min(mb, 1024);\n                await Settings.set(Settings.SETTINGS_KEY.CACHE_SIZE, mb);\n            },\n        });\n\n        Settings.register(Settings.SETTINGS_KEY.EXISTING_VIEWER, {\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.ShowInExistingViewerName'),\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.ShowInExistingViewerHint'),\n            scope: 'user',\n            type: Boolean,\n            default: true,\n            config: true,\n        });\n\n        Settings.register(Settings.SETTINGS_KEY.VIEWER_THEME, {\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.ViewerThemeName'),\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.ViewerThemeHint'),\n            scope: 'user',\n            type: String,\n            default: 'fantasy',\n            choices: Api.availableThemes,\n            config: true,\n        });\n\n        Settings.register(Settings.SETTINGS_KEY.HELP_SEEN, {\n            scope: 'user',\n            type: Boolean,\n            default: false,\n            config: false,\n        });\n\n        Settings.register(Settings.SETTINGS_KEY.DATA_VERSION, {\n            scope: 'world',\n            type: String,\n            default: undefined,\n            config: false,\n        });\n    }\n\n    /**\n     * Wrapper around game.settings.register. Ensures scope is correct.\n     * @param key\n     * @param data\n     * @internal\n     */\n    public static register(key: string, data: any) {\n        game.settings.register(Settings.MODULE_NAME, key, data);\n    }\n\n    /**\n     * Wrapper around game.settings.get. Ensures scope is correct.\n     * @param key\n     * @internal\n     */\n    public static get(key: string) {\n        return game.settings.get(Settings.MODULE_NAME, key);\n    }\n\n    /**\n     * Wrapper around game.settings.set. Ensures scope is correct.\n     * @param key\n     * @param value\n     * @internal\n     */\n    public static async set(key: string, value: any) {\n        return game.settings.set(Settings.MODULE_NAME, key, value);\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getAbsoluteURL, getPDFData, isEntityPDF } from './Util';\nimport PreloadEvent from './socket/events/PreloadEvent';\nimport { Socket } from './socket/Socket';\nimport Settings from './Settings';\nimport PDFCache from './cache/PDFCache';\nimport Api, { ViewerTheme } from './Api';\nimport HTMLEnricher from './enricher/HTMLEnricher';\nimport TinyMCEPlugin from './enricher/TinyMCEPlugin';\nimport PDFActorSheetAdapter from './app/PDFActorSheetAdapter';\nimport { PDFType } from './common/types/PDFType';\nimport { PDFConfig } from './app/PDFConfig';\nimport FixMissingTypes from './commands/FixMissingTypes';\nimport PurgeCache from './commands/PurgeCache';\nimport { legacyMigrationRequired, migrateLegacy } from './migrate/MigrateLegacy';\n\n/**\n * A collection of methods used for setting up the API & system state.\n * @internal\n */\nexport default class Setup {\n    /**\n     * Run setup tasks.\n     */\n    public static run() {\n        if (hasProperty(ui, 'PDFoundry')) {\n            Hooks.once('init', async () => {\n                let d = new Dialog({\n                    title: 'PDFoundry: Error',\n                    content: [\n                        '<div style=\"text-align: justify; margin: 0; padding: 0;\">',\n                        '<h1 style=\"color: red\">PDFoundry Is Already Installed</h1>',\n                        '<p style=\"font-weight: bold\">You have enabled the module version of PDFoundry, but the system you ' +\n                            'are using already has PDFoundry installed.</p>',\n                        '<p>1. If you installed PDFoundry using a nightly build, uninstall and reinstall your system with the ' +\n                            '\"Game Systems\" menu in Foundry VTT setup, or simply update the system if an update is available. ' +\n                            'Your world data is safe either way.</p>',\n                        '<p>2. If the system you are using comes with PDFoundry already installed - you must use that version of ' +\n                            'PDFoundry by disabling the module version.</p>',\n                        '<p style=\"font-weight: bold\">The module version of PDFoundry will not function.</p>',\n                        '</div>',\n                    ].join(''),\n                    buttons: {},\n                });\n                d.render(true);\n            });\n            return;\n        }\n\n        // Register the PDFoundry APi on the UI\n        ui['PDFoundry'] = Api;\n\n        // Register the PDF sheet with the class picker\n        Setup.setupSheets();\n\n        // Setup tasks requiring that FVTT is loaded\n        Hooks.once('ready', Setup.lateRun);\n\n        Hooks.on('renderJournalDirectory', Setup.createJournalButton);\n        Hooks.on('renderJournalDirectory', Setup.hookListItems);\n\n        // getItemDirectoryEntryContext - Setup context menu for 'Open PDF' links\n        Hooks.on('getJournalDirectoryEntryContext', Setup.getJournalContextOptions);\n\n        // Cogwheel settings menu\n        Hooks.on('renderSettings', Setup.onRenderSettings);\n\n        // Load base themes\n        Setup.registerThemes();\n\n        // Patch the TextEnricher with a proxy\n        HTMLEnricher.patchEnrich();\n        // Bind click handlers to renderers\n        Hooks.on('renderApplication', (app: Application, html: JQuery) => HTMLEnricher.bindRichTextLinks(html));\n        Hooks.on('renderItemSheet', (app: Application, html: JQuery) => HTMLEnricher.bindRichTextLinks(html));\n        Hooks.on('renderActorSheet', (app: Application, html: JQuery) => HTMLEnricher.bindRichTextLinks(html));\n        Hooks.on('renderChatMessage', (app: Application, html: JQuery) => HTMLEnricher.bindRichTextLinks(html));\n    }\n\n    private static readonly COMMANDS = [new FixMissingTypes(), new PurgeCache()];\n\n    /**\n     * Late setup tasks happen when the system is loaded\n     */\n    public static lateRun() {\n        // Register socket event handlers\n        Socket.initialize();\n\n        // Chat command processing\n        Hooks.on('chatMessage', Setup.onChatMessage);\n\n        // Canvas notes processing\n        Hooks.on('renderNoteConfig', Setup.onNoteConfig);\n        Hooks.on('hoverNote', Setup.onNoteHover);\n\n        // Register TinyMCE drag + drop events\n        TinyMCEPlugin.Register();\n\n        return new Promise(async () => {\n            // Initialize the settings\n            Settings.initialize();\n            await PDFCache.initialize();\n\n            if (legacyMigrationRequired()) {\n                migrateLegacy().then(() => {\n                    Settings.set(Settings.SETTINGS_KEY.DATA_VERSION, 'v0.6.0');\n                });\n            }\n\n            // PDFoundry is ready\n            Setup.userLogin();\n        });\n    }\n\n    /**\n     * Register the PDF sheet and unregister invalid sheet types from it.\n     */\n    public static setupSheets() {\n        // Register actor \"sheet\"\n        Actors.registerSheet(Settings.MODULE_NAME, PDFActorSheetAdapter);\n    }\n\n    /**\n     * Get additional context menu icons for PDF items\n     * @param html\n     * @param options\n     */\n    public static getJournalContextOptions(html: JQuery, options: any[]) {\n        const getJournalEntryFromLi = (html: JQuery): JournalEntry => {\n            const id = html.data('entity-id');\n            return game.journal.get(id);\n        };\n\n        const shouldAdd = (entityHtml: JQuery) => {\n            const journalEntry = getJournalEntryFromLi(entityHtml);\n            return isEntityPDF(journalEntry) && getPDFData(journalEntry)?.type !== PDFType.Actor;\n        };\n\n        if (game.user.isGM) {\n            options.unshift({\n                name: game.i18n.localize('PDFOUNDRY.CONTEXT.PreloadPDF'),\n                icon: '<i class=\"fas fa-download fa-fw\"></i>',\n                condition: shouldAdd,\n                callback: (entityHtml: JQuery) => {\n                    const journalEntry = getJournalEntryFromLi(entityHtml);\n                    const pdf = getPDFData(journalEntry);\n\n                    if (pdf === undefined) {\n                        return;\n                    }\n\n                    const { url } = pdf;\n                    const event = new PreloadEvent(null, getAbsoluteURL(url));\n                    event.emit();\n\n                    PDFCache.preload(url);\n                },\n            });\n        }\n\n        options.unshift({\n            name: game.i18n.localize('PDFOUNDRY.CONTEXT.OpenPDF'),\n            icon: '<i class=\"far fa-file-pdf\"></i>',\n            condition: shouldAdd,\n            callback: (entityHtml: JQuery) => {\n                const journalEntry = getJournalEntryFromLi(entityHtml);\n                const pdf = getPDFData(journalEntry);\n\n                if (pdf === undefined) {\n                    return;\n                }\n\n                if (pdf.type === PDFType.Actor) {\n                    throw new Error(`Unhandled PDF context type ${pdf.type}`);\n                } else {\n                    Api.openPDF(pdf, {\n                        entity: journalEntry,\n                    });\n                }\n            },\n        });\n    }\n\n    private static userLogin() {\n        if (!game.user.isGM) {\n            return;\n        }\n\n        let viewed;\n        try {\n            viewed = Settings.get(Settings.SETTINGS_KEY.HELP_SEEN);\n        } catch (error) {\n            viewed = false;\n        } finally {\n            if (!viewed) {\n                Api.showHelp();\n            }\n        }\n    }\n\n    private static onChatMessage(app, content: string, options) {\n        content = content.toLocaleLowerCase();\n\n        for (let command of Setup.COMMANDS) {\n            if (command.execute(content)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Hook handler for rendering the settings tab\n     */\n    public static onRenderSettings(settings: any, html: JQuery, data: any) {\n        const icon = '<i class=\"far fa-file-pdf\"></i>';\n        const button = $(`<button>${icon} ${game.i18n.localize('PDFOUNDRY.SETTINGS.OpenHelp')}</button>`);\n        button.on('click', Api.showHelp);\n\n        html.find('#settings-documentation').append(button);\n    }\n\n    private static async createPDF() {\n        const journalEntry = (await JournalEntry.create({\n            name: game.i18n.localize('PDFOUNDRY.MISC.NewPDF'),\n            [`flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.PDF_DATA}.type`]: PDFType.Static,\n        })) as JournalEntry;\n\n        new PDFConfig(journalEntry).render(true);\n    }\n\n    private static createJournalButton(app: Application, html: JQuery) {\n        if (!game.user.isGM) {\n            return;\n        }\n\n        const button = $(`<button class=\"create-pdf\"><i class=\"fas fa-file-pdf\"></i> ${game.i18n.localize('PDFOUNDRY.MISC.CreatePDF')}</button>`);\n        button.on('click', () => {\n            Setup.createPDF();\n        });\n\n        let footer = html.find('.directory-footer');\n        if (footer.length === 0) {\n            footer = $(`<footer class=\"directory-footer\"></footer>`);\n            html.append(footer);\n        }\n        footer.append(button);\n    }\n\n    private static hookListItems(app: Application, html: JQuery) {\n        const lis = html.find('li.journal');\n\n        for (const li of lis) {\n            const target = $(li);\n            const id = target.data('entity-id');\n            const journalEntry = game.journal.get(id);\n\n            if (isEntityPDF(journalEntry)) {\n                target.find('h4').on('click', (event) => {\n                    event.stopImmediatePropagation();\n                    // @ts-ignore\n                    if (journalEntry.isOwner) {\n                        Setup.onClickPDFName(journalEntry);\n                    } else {\n                        Setup.onClickPDFThumbnail(journalEntry);\n                    }\n                });\n\n                const pdfData = getPDFData(journalEntry);\n                if (pdfData) {\n                    const thumbnail = $(`<img class=\"pdf-thumbnail\" src=\"${Settings.PATH_ASSETS}/pdf_icon.svg\" alt=\"PDF Icon\">`);\n                    target.append(thumbnail);\n\n                    switch (pdfData.type) {\n                        case PDFType.Static:\n                        case PDFType.Fillable:\n                            target.find('img').on('click', (event) => {\n                                event.stopImmediatePropagation();\n                                Setup.onClickPDFThumbnail(journalEntry);\n                            });\n                            break;\n                        case PDFType.Actor:\n                            // Actors can't be opened by link\n                            thumbnail.css('filter', 'grayscale(100%)');\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    private static onClickPDFName(journalEntry: JournalEntry) {\n        new PDFConfig(journalEntry).render(true);\n    }\n\n    private static onClickPDFThumbnail(journalEntry: JournalEntry) {\n        const pdfData = getPDFData(journalEntry);\n        if (pdfData) {\n            switch (pdfData.type) {\n                case PDFType.Static:\n                    Api.openPDF(pdfData);\n                    break;\n                case PDFType.Fillable:\n                    Api.openPDF(pdfData, {\n                        entity: journalEntry,\n                    });\n                    break;\n                case PDFType.Actor:\n                    // Pass - no functionality\n                    break;\n            }\n        }\n    }\n\n    private static onNoteConfig(app: NoteConfig, html: JQuery, data: any) {\n        const journalId = data.data.entryId;\n        const journal = game.journal.get(journalId);\n        if (isEntityPDF(journal)) {\n            const container = $(`<div class=\"form-group\"></div>`);\n            const label = $(`<label>${game.i18n.localize('PDFOUNDRY.COMMON.PageNumber')}</label>`);\n\n            let pageNumber = data.data['flags']?.[Settings.MODULE_NAME]?.[Settings.FLAGS_KEY.PAGE_NUMBER];\n            if (pageNumber === undefined) {\n                pageNumber = '';\n            }\n\n            const subContainer = $(`<div class=\"form-fields\"></div>`);\n\n            const input = $(\n                `<input type=\"number\" name=\"flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.PAGE_NUMBER}\" value=\"${pageNumber}\" data-dtype=\"String\">`,\n            );\n\n            subContainer.append(input);\n\n            container.append(label);\n            container.append(subContainer);\n\n            html.find('button[type=submit]').before(container);\n        }\n    }\n\n    private static onNoteHover(note: Note, enter: boolean) {\n        if (!enter) {\n            return;\n        }\n\n        const journal = note.entry as JournalEntry;\n        const pdf = getPDFData(journal);\n        if (isEntityPDF(journal) && pdf) {\n            note.mouseInteractionManager.callbacks['clickLeft2'] = () => {\n                let pageText: string | number | undefined = note.data.flags?.[Settings.MODULE_NAME]?.[Settings.FLAGS_KEY.PAGE_NUMBER];\n                let pageNumber = 0;\n\n                if (typeof pageText === 'string') {\n                    try {\n                        pageNumber = parseInt(pageText);\n                    } catch (e) {\n                        pageNumber = 0;\n                    }\n                } else if (typeof pageText === 'number') {\n                    pageNumber = pageText;\n                }\n\n                if (pageNumber === 0) {\n                    Api.openPDF(pdf);\n                } else {\n                    Api.openPDF(pdf, {\n                        page: pageNumber,\n                    });\n                }\n            };\n        }\n    }\n\n    private static registerThemes() {\n        const themes: ViewerTheme[] = [\n            {\n                id: 'fantasy',\n                name: 'Fantasy (Default)',\n                filePath: `${Settings.PATH_MODULE}/themes/fantasy.css`,\n            },\n            {\n                id: 'dark',\n                name: 'Dark',\n                filePath: `${Settings.PATH_MODULE}/themes/default-dark.css`,\n            },\n            {\n                id: 'light',\n                name: 'Light',\n                filePath: `${Settings.PATH_MODULE}/themes/default-light.css`,\n            },\n            {\n                id: 'net-runner-dark',\n                name: 'Net Runner',\n                filePath: `${Settings.PATH_MODULE}/themes/net-runner.css`,\n            },\n\n            {\n                id: 'gay-pride-light',\n                name: 'Gay Pride (Light)',\n                filePath: `${Settings.PATH_MODULE}/themes/gay-pride-light.css`,\n            },\n            {\n                id: 'gay-pride-dark',\n                name: 'Gay Pride (Dark)',\n                filePath: `${Settings.PATH_MODULE}/themes/gay-pride-dark.css`,\n            },\n            {\n                id: 'trans-light',\n                name: 'Trans Pride (Light)',\n                filePath: `${Settings.PATH_MODULE}/themes/trans-pride-light.css`,\n            },\n            {\n                id: 'trans-dark',\n                name: 'Trans Pride (Dark)',\n                filePath: `${Settings.PATH_MODULE}/themes/trans-pride-dark.css`,\n            },\n            {\n                id: 'nonbinary-light',\n                name: 'Non-binary Pride (Light)',\n                filePath: `${Settings.PATH_MODULE}/themes/nonbinary-pride-light.css`,\n            },\n            {\n                id: 'nonbinary-dark',\n                name: 'Non-binary Pride (Dark)',\n                filePath: `${Settings.PATH_MODULE}/themes/nonbinary-pride-dark.css`,\n            },\n        ];\n\n        for (const theme of themes) {\n            Api.registerTheme(theme.id, theme.name, theme.filePath);\n        }\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A collection of utilities that are used internally or made to be used externally by you.\n *\n * You can access these utilities with `ui.PDFoundry.Utilities`.\n * @moduledefinition Utilities\n */\n\nimport { PDFData, PDFDataDelete, PDFDataUpdate } from './common/types/PDFData';\nimport Settings from './Settings';\nimport { PDFType } from './common/types/PDFType';\nimport { DOMAIN_WHITELIST } from './common/Whitelist';\n\n// *************\n// URL HELPERS\n// *************\n// <editor-fold desc='URL Helpers\">\n\n/**\n * Gets the correct route prefix used to support servers using a route prefix.\n * Appended to all window.location paths.\n * @module Utilities\n */\nexport function getRoutePrefix(): string {\n    let prefixArr = window.location.pathname.split('/');\n    prefixArr.pop(); // don't want the 'game' at the end\n    return prefixArr.join('/');\n}\n\n/**\n * Convert a relative URL to a absolute URL by prepending the window origin to the relative URL.\n * If the URL is of a white listed domain, will simply return the provided URL.\n * @param dataUrl A url to be validated.\n * @see {@link DOMAIN_WHITELIST}\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function getAbsoluteURL(dataUrl: string): string {\n    // Some domains are white listed, these should be considered absolute already\n    for (const domain of DOMAIN_WHITELIST) {\n        if (dataUrl.includes(domain)) {\n            return dataUrl;\n        }\n    }\n\n    return `${window.origin}${getRoutePrefix()}/${dataUrl}`;\n}\n\n/**\n * Returns true if the URL starts with the origin or the domain is one of the\n *  white listed domains.\n * @param dataUrl A url to be validated.\n * @see {@link DOMAIN_WHITELIST}\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function validateAbsoluteURL(dataUrl: string): boolean {\n    // Some domains are white listed\n    for (const domain of DOMAIN_WHITELIST) {\n        if (dataUrl.includes(domain)) {\n            return true;\n        }\n    }\n\n    return dataUrl.startsWith(window.origin);\n}\n\n// </editor-fold>\n\n// *************\n// DATA HELPERS\n// *************\n// <editor-fold desc='Data Helpers\">\n\n/**\n * Returns true if the provided entity contains PDF data\n * @param entity The entity to check. Only JournalEntities are allowed to be PDFs natively.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function isEntityPDF(entity: Entity): boolean {\n    return entity !== undefined && entity !== null && entity.getFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.PDF_DATA) !== undefined;\n}\n\n/**\n * Pull relevant data from an journal entry, creating a {@link PDFData} object.\n * @param journalEntry The journal entry to pull data from.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function getPDFData(journalEntry: JournalEntry | null | undefined): PDFData | undefined {\n    if (journalEntry === undefined || journalEntry === null) {\n        return undefined;\n    }\n\n    const pdfData = journalEntry.getFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.PDF_DATA) as PDFData | undefined;\n    if (pdfData === undefined) {\n        return undefined;\n    }\n    pdfData.name = journalEntry.name;\n    return pdfData;\n}\n\n/**\n * Set one or more {@link PDFData} attributes to the provided values. Makes no changes to fields that\n *  are not specified. If you wish to update the PDF name, use Entity.update as normal in Foundry.\n * @param journalEntry The PDF to update the data on.\n * @param pdfData A partial mapping of a {@link PDFData} object.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function setPDFData(journalEntry: JournalEntry, pdfData: Partial<PDFDataUpdate>) {\n    return journalEntry.setFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.PDF_DATA, pdfData);\n}\n\n/**\n * Deletes a key from the PDF data. Requires the value of the key to be set to null.\n * @param journalEntry The journal entry to delete the key from.\n * @param pdfData A mapping of {key: null} pairs to delete.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function deletePDFData(journalEntry: JournalEntry, pdfData: Partial<PDFDataDelete>) {\n    const update = {};\n\n    // TODO: Feature request to use Symbols to perform this type of operation\n    for (const key of Object.keys(pdfData)) {\n        update[`flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.PDF_DATA}.-=${key}`] = null;\n    }\n\n    return journalEntry.update(update);\n}\n\n/**\n * Returns true or false if all required data is set such that the PDF is possible to open.\n *  Does not guarantee any specific data for a type of open (e.g. opening as a fillable PDF)\n *  only that the static viewer is able to open the PDF.\n * @param pdfData The PDF data to check.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function canOpenPDF(pdfData: PDFData) {\n    if (PDFType[pdfData.type] === undefined) {\n        return false;\n    }\n\n    return !(pdfData.url === undefined || pdfData.url === '');\n}\n\n// </editor-fold>\n\n// *************\n// USER HELPERS\n// *************\n// <editor-fold desc='User Helpers\">\n/**\n * Return all users ids except the current user\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function getUserIdsExceptMe() {\n    return game.users\n        .filter((user: User) => {\n            return user.id !== game.userId;\n        })\n        .map((user: User) => user.id);\n}\n\n// </editor-fold>\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PDFType } from '../common/types/PDFType';\nimport SelectApp, { SelectOption } from './SelectApp';\nimport { getPDFData, isEntityPDF } from '../Util';\n\n/**\n * Selects an actor sheet in a pop up window.\n * @internal\n */\nexport default class ActorSheetSelect extends SelectApp {\n    protected get selectTitle(): string {\n        return 'PDFOUNDRY.VIEWER.SelectSheet';\n    }\n\n    protected get selectId(): string {\n        return 'actor-sheet';\n    }\n\n    protected get selectLabel(): string {\n        return 'PDFOUNDRY.VIEWER.SelectSheet';\n    }\n\n    protected get selectOptions(): SelectOption[] {\n        const journals: JournalEntry[] = game.journal.filter((entry: JournalEntry) => {\n            return isEntityPDF(entry) && getPDFData(entry)?.type === PDFType.Actor;\n        });\n\n        return journals.map((entry) => {\n            return {\n                text: entry.data.name,\n                value: entry.id,\n            };\n        });\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport { BUTTON_GITHUB, BUTTON_KOFI } from '../common/helpers/header';\n\n/**\n * Basic app to allow the user to see data keys for actor sheets\n * @internal\n */\nexport default class PDFActorDataBrowser extends Application {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n\n        options.template = `${Settings.PATH_TEMPLATES}/app/pdf-actor-data-browser.html`;\n        options.width = 600;\n        options.height = 400;\n        options.resizable = true;\n\n        return options;\n    }\n\n    private actor: Actor;\n    private timeout: any;\n\n    constructor(actor: Actor, options?: Application.Options) {\n        super(options);\n        this.actor = actor;\n    }\n\n    get title(): string {\n        return `${this.actor.name}`;\n    }\n\n    protected _getHeaderButtons(): any[] {\n        const buttons = super._getHeaderButtons();\n        buttons.unshift(BUTTON_GITHUB);\n        buttons.unshift(BUTTON_KOFI);\n        buttons.unshift({\n            class: 'pdf-sheet-refresh',\n            icon: 'fas fa-sync',\n            label: game.i18n.localize('PDFOUNDRY.MISC.Refresh'),\n            onclick: () => this.render(),\n        });\n        return buttons;\n    }\n\n    getData(options?: any): any {\n        const data = super.getData(options);\n\n        enum DangerLevel {\n            Safe = 0,\n            Low = 1,\n            High = 2,\n            Critical = 3,\n        }\n        type DataPath = { key: string; value: string; danger: DangerLevel };\n        const flatten = (data: object, current: string = '', danger: DangerLevel = DangerLevel.Safe): DataPath[] => {\n            let results: DataPath[] = [];\n\n            window['actorData'] = this.actor.data.data;\n\n            const path = (curr: string, ...next: (string | number)[]) => {\n                if (curr.length > 0) {\n                    for (let i = 0; i < next.length; i++) {\n                        curr = `${curr}.${next[i]}`;\n                    }\n                    return curr;\n                } else {\n                    return `${next}`;\n                }\n            };\n\n            const wrap = (value: string) => {\n                return `\\{\\{${value}\\}\\}`;\n            };\n\n            const boundDanger = (curr: DangerLevel, next: DangerLevel) => {\n                if (curr < next) {\n                    return next;\n                }\n                return curr;\n            };\n\n            if (data === null) return results;\n            if (data === undefined) return results;\n\n            if (typeof data === 'object') {\n                for (const [key, value] of Object.entries(data)) {\n                    if (Array.isArray(value)) {\n                        // Case 1 : The value is an array\n                        if (value.length === 0) {\n                            results.push({\n                                key: path(current, key),\n                                danger: DangerLevel.Critical,\n                                value: wrap('Empty Array, do not use!'),\n                            });\n                        } else {\n                            for (let i = 0; i < value.length; i++) {\n                                const next = value[i];\n                                results = [...results, ...flatten(next, path(current, key, i), boundDanger(danger, DangerLevel.High))];\n                            }\n                        }\n                    } else if (typeof value === 'object') {\n                        // Case 2 : The value is an object\n                        if (value === null || value === undefined) {\n                            results.push({\n                                key: path(current, key),\n                                danger: DangerLevel.High,\n                                value: wrap('Null/Undefined, be cautious!'),\n                            });\n                        } else if (isObjectEmpty(value)) {\n                            results.push({\n                                key: path(current, key),\n                                danger: DangerLevel.Critical,\n                                value: wrap('Empty Object, do not use!'),\n                            });\n                        } else {\n                            for (let [key2, value2] of Object.entries(value)) {\n                                results = [...results, ...flatten(value2 as any, path(current, key, key2), boundDanger(danger, DangerLevel.Low))];\n                            }\n                        }\n                    } else if (typeof value === 'function') {\n                        // Case 3 : Base Case : The value is a function\n                        results.push({\n                            key: path(current, key),\n                            danger: boundDanger(danger, DangerLevel.Critical),\n                            value: wrap('Function, do not use!'),\n                        });\n                    } else {\n                        // Case 4 : Base Case : The value is a primitive\n                        results.push({\n                            key: path(current, key),\n                            danger: boundDanger(danger, DangerLevel.Safe),\n                            value: (value as any).toString(),\n                        });\n                    }\n                }\n            } else if (typeof data === 'function') {\n                // Case 3 : Base Case : The value is a function\n                results.push({\n                    key: current,\n                    danger: boundDanger(danger, DangerLevel.Critical),\n                    value: wrap('Function, do not use!'),\n                });\n            } else {\n                // Case 4 : Base Case : The value is a primitive\n                results.push({\n                    key: current,\n                    danger: boundDanger(danger, DangerLevel.Safe),\n                    value: data,\n                });\n            }\n\n            return results;\n        };\n\n        const icons = {\n            [DangerLevel.Safe]: '<i class=\"fas fa-check-circle\"></i>',\n            [DangerLevel.Low]: '<i class=\"fas fa-question-circle\"></i>',\n            [DangerLevel.High]: '<i class=\"fas fa-exclamation-triangle\"></i>',\n            [DangerLevel.Critical]: '<i class=\"fas fa-radiation-alt\"></i>',\n        };\n        const tooltips = {\n            [DangerLevel.Safe]: game.i18n.localize('PDFOUNDRY.MISC.DANGER.Safe'),\n            [DangerLevel.Low]: game.i18n.localize('PDFOUNDRY.MISC.DANGER.Low'),\n            [DangerLevel.High]: game.i18n.localize('PDFOUNDRY.MISC.DANGER.High'),\n            [DangerLevel.Critical]: game.i18n.localize('PDFOUNDRY.MISC.DANGER.Critical'),\n        };\n\n        data['paths'] = flatten(this.actor.data.data, 'data');\n        data['paths'].push({\n            key: 'name',\n            value: this.actor.name,\n            danger: DangerLevel.Safe,\n        });\n\n        data['paths'].sort((a: DataPath, b: DataPath) => a.key.localeCompare(b.key));\n        data['paths'] = data['paths'].map((element) => {\n            let splitRoll = element['key'].split('.') as string[];\n            splitRoll.shift();\n\n            return {\n                ...element,\n                icon: icons[element.danger],\n                roll: `@${splitRoll.join('.')}`,\n                tooltip: tooltips[element.danger],\n            };\n        });\n\n        return data;\n    }\n\n    protected activateListeners(html: JQuery) {\n        super.activateListeners(html);\n\n        html.find('i.copy').on('click', async (event) => {\n            const target = $(event.currentTarget);\n\n            await navigator.clipboard.writeText(target.data('value') as string);\n\n            ui.notifications.info(game.i18n.localize('PDFOUNDRY.MISC.CopiedToClipboard'));\n        });\n    }\n\n    render(force?: boolean, options?: Application.RenderOptions): Application {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.render.bind(this), 10000);\n        return super.render(force, options);\n    }\n\n    close(): Promise<any> {\n        clearTimeout(this.timeout);\n        return super.close();\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ActorViewer from '../viewer/ActorViewer';\nimport Settings from '../Settings';\n\n/**\n * Adapts a FillableViewer to function as a ActorSheet\n * @internal\n */\nexport default class PDFActorSheetAdapter extends ActorSheet {\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\n    // <editor-fold desc=\"Properties\">\n\n    private _viewer: ActorViewer;\n    private readonly _options?: Application.Options;\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    constructor(actor: Actor, options?: Application.Options) {\n        super(actor, options);\n\n        this._options = options;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get viewer(): ActorViewer {\n        return this._viewer;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected activateListeners(html: JQuery | HTMLElement) {\n        $(this.element).css('display', 'none');\n        this.form = $(html).first().get(0);\n        super.activateListeners(html);\n    }\n\n    protected async _onSubmit(...args): Promise<any> {\n        // PDFoundry handles data in the FillableViewer\n        return;\n    }\n\n    getData(): ActorSheet.Data {\n        return mergeObject(super.getData(), this._viewer.getData());\n    }\n\n    protected _updateObject(event: Event | JQuery.Event, formData: any): Promise<any> {\n        return super._updateObject(event, formData);\n    }\n\n    render(force?: boolean, options?: Application.RenderOptions): Application {\n        if (!this._viewer) {\n            const sheetId = this.actor.getFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.SHEET_ID);\n            this._viewer = new ActorViewer(this.actor, sheetId, this, this._options);\n        }\n\n        // If this window is already open, don't re-render\n        if (this._state === Application.RENDER_STATES.RENDERED) {\n            return this;\n        }\n\n        this._viewer.render(force, options);\n        return super.render(force, options);\n    }\n\n    // TODO: Sandbox compatibility - should force this class to extend CONFIG class instead.\n    async scrollbarSet() {\n        return;\n    }\n\n    async close(): Promise<void> {\n        if (this._viewer) {\n            await this._viewer.close();\n            // @ts-ignore\n            delete this._viewer;\n        }\n        return super.close();\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport Api from '../Api';\nimport { getAbsoluteURL, getPDFData } from '../Util';\nimport { PDFType } from '../common/types/PDFType';\nimport { BUTTON_GITHUB, BUTTON_HELP, BUTTON_KOFI } from '../common/helpers/header';\n\n/**\n * Extends the base ItemSheet for linked PDF viewing.\n * @private\n */\nexport class PDFConfig extends FormApplication {\n    // <editor-fold desc=\"Static Properties\">\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = [...options.classes!, Settings.CSS_CLASS];\n        options.template = `${Settings.PATH_TEMPLATES}/sheet/pdf-config.html`;\n        options.width = 650;\n        options.height = 'auto';\n        return options;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\n    // <editor-fold desc=\"Properties\">\n\n    public readonly object: JournalEntry;\n    private picker: FilePicker;\n\n    // </editor-fold>\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    constructor(journalEntry: JournalEntry, options?: Application.Options) {\n        super(journalEntry, options);\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get title(): string {\n        return this.object.name;\n    }\n\n    public get id(): string {\n        return `pdf-${this.object.id}`;\n    }\n\n    protected _getHeaderButtons(): any[] {\n        const buttons = super._getHeaderButtons();\n        buttons.unshift(BUTTON_GITHUB);\n        buttons.unshift(BUTTON_KOFI);\n        buttons.unshift(BUTTON_HELP);\n        return buttons;\n    }\n\n    get isEditable(): boolean {\n        // @ts-ignore TODO: 0.8.x compat\n        return this.object.testUserPermission(game.user, CONST.ENTITY_PERMISSIONS.OWNER);\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected activateListeners(html: JQuery): void {\n        super.activateListeners(html);\n\n        const urlInput = html.find('#data-url');\n        const offsetInput = html.find('#data-offset');\n\n        // Default behavior opens the file picker in this form setup, override\n        html.find('input').on('keypress', (event) => {\n            if (event.key === 'Enter') {\n                this._onSubmit(event, { preventClose: true });\n            }\n        });\n        html.find('input, select').on('input', (event) => {\n            this._onSubmit(event, { preventClose: true });\n        });\n\n        // Browse button\n        html.find('#pdf-browse').on('click', async (event) => {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n            this.picker =\n                this.picker ??\n                new FilePicker({\n                    // @ts-ignore TODO\n                    callback: () => {\n                        this._onSubmit(new Event('input'), { preventClose: true });\n                    },\n                });\n\n            // @ts-ignore TODO: Foundry Types\n            this.picker.extensions = ['.pdf'];\n            this.picker.field = urlInput[0];\n\n            if (!this.filepickers.includes(this.picker)) {\n                this.filepickers.push(this.picker);\n            }\n\n            let urlValue = urlInput.val();\n            if (urlValue !== undefined) {\n                await this.picker.browse(urlValue.toString().trim());\n            }\n\n            this.picker.render(true);\n        });\n\n        // Test pdf settings button\n        html.find('#pdf-test').on('click', (event) => {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n            let urlValue = urlInput.val();\n            let offsetValue = offsetInput.val();\n\n            if (urlValue === null || urlValue === undefined) return;\n            if (offsetValue === null || offsetValue === undefined) return;\n\n            urlValue = urlValue.toString();\n            urlValue = getAbsoluteURL(urlValue);\n\n            if (offsetValue.toString().trim() === '') {\n                offsetValue = 0;\n            }\n            offsetValue = parseInt(offsetValue as string);\n\n            Api.openURL(urlValue, 5 + offsetValue, false);\n        });\n    }\n\n    public getData(): object {\n        const data = super.getData();\n\n        data['types'] = Object.entries(PDFType).map(([key]) => {\n            return {\n                value: PDFType[key],\n                text: `PDFOUNDRY.MISC.PDFTYPE.${key}`,\n            };\n        });\n\n        data['dataPath'] = `flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.PDF_DATA}`;\n        data['flags'] = getPDFData(this.object);\n        data['name'] = this.object.data.name;\n\n        return data;\n    }\n\n    protected async _updateObject(event: Event | JQuery.Event, formData: any): Promise<void> {\n        await this.object.update(formData);\n    }\n\n    // @ts-ignore TODO\n    submit({ updateData }: { updateData?: any }): FormApplication {\n        // @ts-ignore TODO\n        return super.submit({ updateData });\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\n\n/**\n * Callback type for player selection\n * @private\n */\nexport type PDFPlayerSelectCallback = (ids: string[]) => void;\n\n/**\n * An application that allows selection of players.\n * @private\n */\nexport default class PlayerSelect extends Application {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = ['sheet', 'item'];\n        options.template = `${Settings.PATH_TEMPLATES}/app/pdf-player-select.html`;\n        options.width = 'auto';\n        options.height = 'auto';\n        options.title = game.i18n.localize('PDFOUNDRY.VIEWER.SelectPlayers');\n        return options;\n    }\n\n    private readonly _ids;\n    private readonly _callback: PDFPlayerSelectCallback;\n\n    constructor(ids: string[], cb: PDFPlayerSelectCallback, options?: Application.Options) {\n        super(options);\n\n        this._ids = ids;\n        this._callback = cb;\n    }\n\n    getData(options?: any): any | Promise<any> {\n        const data = super.getData(options);\n\n        const users: any[] = [];\n        for (const id of this._ids) {\n            users.push({\n                name: game.users.get(id).name,\n                id,\n            });\n        }\n\n        users.sort((a, b) => a.name.localeCompare(b.name));\n\n        data['users'] = users;\n        return data;\n    }\n\n    protected activateListeners(html: JQuery<HTMLElement> | HTMLElement): void {\n        super.activateListeners(html);\n\n        const button = $(html).find('#confirm');\n        button.on('click', () => {\n            this._callback(this.collectIds());\n            this.close();\n        });\n    }\n\n    /**\n     * Collect selected ids from the html\n     */\n    private collectIds(): string[] {\n        const ids: string[] = [];\n        const checkboxes = $(this.element).find('input[type=checkbox]');\n        for (let i = 0; i < checkboxes.length; i++) {\n            const checkbox = $(checkboxes[i]);\n            if (checkbox.prop('checked')) {\n                ids.push(checkbox.prop('id'));\n            }\n        }\n        return ids;\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\n\n/**\n * Callback type for select apps\n * @internal\n */\nexport type SelectAppCallback = (value: string, text: string) => void;\n\n/**\n * Data layout for select options\n * @internal\n */\nexport interface SelectOption {\n    text: string;\n    value: string;\n}\n\n/**\n * Base class for app that uses a select drop down\n * @internal\n */\nexport default abstract class SelectApp extends Application {\n    // <editor-fold desc=\"Static Properties\">\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = [...options.classes!, Settings.CSS_CLASS];\n        options.template = `${Settings.PATH_TEMPLATES}/app/select-app.html`;\n        options.width = 200;\n        options.height = 'auto';\n        return options;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\n    // <editor-fold desc=\"Properties\">\n\n    private readonly _current?: string;\n    private readonly _callback?: SelectAppCallback;\n\n    // </editor-fold>\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    constructor(callback?: SelectAppCallback, currentValue?: string, options?: Application.Options) {\n        super(options);\n\n        this._current = currentValue;\n        this._callback = callback;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get title(): string {\n        return game.i18n.localize(this.selectTitle);\n    }\n\n    public get id(): string {\n        return this.unique ? this.selectId : super.id;\n    }\n\n    /**\n     * Should duplicate of this app be allowed\n     * @protected\n     */\n    protected get unique(): boolean {\n        return true;\n    }\n\n    /**\n     * The localization string to be used in the header for the title\n     * @protected\n     */\n    protected abstract get selectTitle(): string;\n\n    /**\n     * The localization string to be used in the body to label the select\n     * @protected\n     */\n    protected abstract get selectLabel(): string;\n\n    /**\n     * The id of the select, to preserve uniqueness. Used for app id if not\n     *  unique, and select id attribute for global finds.\n     * @protected\n     */\n    protected abstract get selectId(): string;\n\n    /**\n     * Array of options that will be used for the select options\n     * @protected\n     */\n    protected abstract get selectOptions(): SelectOption[];\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    getData(options?: any): any | Promise<any> {\n        const data = super.getData(options);\n\n        data.data = {\n            id: this.selectId,\n            label: this.selectLabel,\n            selected: this._current,\n            options: this.selectOptions,\n        };\n\n        return data;\n    }\n\n    protected activateListeners(html: JQuery): void {\n        super.activateListeners(html);\n\n        const button = html.find(`button#${this.selectId}-confirm`);\n        button.on('click', async (event) => {\n            event.preventDefault();\n            const select = html.find(`#${this.selectId}`) as JQuery<HTMLSelectElement>;\n            const value = select.val() as string;\n            if (value !== this._current && this._callback !== undefined) {\n                this._callback(value, select.find('option:selected').text());\n            }\n            await this.close();\n        });\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An error that occurs during cache operations\n * @private\n */\nexport class CacheError extends Error {\n    constructor(index: string, store: string, message?: string) {\n        super(`Error in ${index}>${store}: ${message}`);\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheError } from './CacheError';\n\n/**\n * Class that deals with getting/setting from an indexed db\n * Mostly exists to separate logic for the PDFCache from logic\n * dealing with the database\n * @private\n */\nexport default class CacheHelper {\n    private _version: number;\n\n    private readonly _indexName: string;\n    private readonly _storeNames: string[];\n\n    private _db: IDBDatabase;\n\n    public static async createAndOpen(indexName: string, storeNames: string[], version: number) {\n        const helper = new CacheHelper(indexName, storeNames, version);\n        await helper.open();\n        return helper;\n    }\n\n    public get ready() {\n        return this._db !== undefined;\n    }\n\n    public constructor(indexName: string, storeNames: string[], version: number) {\n        this._indexName = `${indexName}`;\n        this._storeNames = storeNames;\n        this._version = version;\n    }\n\n    private newTransaction(storeName: string) {\n        const transaction = this._db.transaction(storeName, 'readwrite');\n        const store = transaction.objectStore(storeName);\n        return { transaction, store };\n    }\n\n    public open(): Promise<void> {\n        const that = this;\n        return new Promise<void>(function (resolve, reject) {\n            const request = indexedDB.open(that._indexName, that._version);\n            request.onsuccess = function (event) {\n                that._db = this.result;\n                resolve();\n            };\n            request.onupgradeneeded = function (event) {\n                that._db = this.result;\n                for (let i = 0; i < that._storeNames.length; i++) {\n                    try {\n                        // Create object store if it doesn't exist\n                        that._db.createObjectStore(that._storeNames[i], {});\n                    } catch (error) {\n                        // Otherwise pass\n                    }\n                }\n                resolve();\n            };\n            request.onerror = function (event) {\n                // @ts-ignore\n                reject(event.target.error);\n            };\n        });\n    }\n\n    public set(key: IDBValidKey, value: any, storeName: string, force: boolean = false): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this._db) {\n                throw new CacheError(this._indexName, storeName, 'Database is not initialized.');\n            } else {\n                const that = this;\n                let { transaction, store } = this.newTransaction(storeName);\n\n                // Propagate errors upwards, otherwise they fail silently\n                transaction.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n\n                const keyRequest = store.getKey(key);\n                keyRequest.onsuccess = function (event) {\n                    // key already exists in the store\n                    if (keyRequest.result) {\n                        // should we force the new value by deleting the old?\n                        if (force) {\n                            that.del(key, storeName).then(() => {\n                                ({ transaction, store } = that.newTransaction(storeName));\n                                store.add(value, key);\n                                resolve();\n                            });\n                        } else {\n                            throw new CacheError(that._indexName, storeName, `Key ${key} already exists.`);\n                        }\n                    } else {\n                        store.add(value, key);\n                        resolve();\n                    }\n                };\n            }\n        });\n    }\n\n    public get(key: IDBValidKey, storeName: string): Promise<any> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this._db) {\n                throw new CacheError(this._indexName, storeName, 'Database is not initialized.');\n            } else {\n                let { transaction, store } = this.newTransaction(storeName);\n\n                // Propagate errors upwards, otherwise they fail silently\n                transaction.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n\n                const getRequest = store.get(key);\n                getRequest.onsuccess = function (event) {\n                    resolve(this.result);\n                };\n\n                getRequest.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n            }\n        });\n    }\n\n    public del(key: IDBValidKey, storeName: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                const { transaction, store } = this.newTransaction(storeName);\n\n                transaction.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n                transaction.oncomplete = function (event) {\n                    resolve();\n                };\n\n                store.delete(key);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    public keys(storeName: string): Promise<IDBValidKey[]> {\n        return new Promise<IDBValidKey[]>((resolve, reject) => {\n            try {\n                const { transaction, store } = this.newTransaction(storeName);\n                const keysRequest = store.getAllKeys();\n\n                keysRequest.onsuccess = function () {\n                    resolve(keysRequest.result);\n                };\n                keysRequest.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n\n                return;\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    public clr(storeName: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                const { store } = this.newTransaction(storeName);\n                const keys = store.getAllKeys();\n                keys.onsuccess = (result) => {\n                    const promises: Promise<void>[] = [];\n                    for (const key of keys.result) {\n                        promises.push(this.del(key, storeName));\n                    }\n                    Promise.all(promises).then(() => {\n                        resolve();\n                    });\n                };\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport CacheHelper from './CacheHelper';\n\n/**\n * Meta information about a cache entry\n * @private\n */\ntype CacheData = {\n    /**\n     * The size in bytes this cache entry takes up.\n     */\n    size: number;\n    /**\n     * The date the cache was last accessed, represented by a ISO string.\n     */\n    dateAccessed: string;\n};\n\n/**\n * Handles caching for PDFs\n * @private\n */\nexport default class PDFCache {\n    // <editor-fold desc=\"Static Properties\">\n    /**\n     * Max size of the cache for the active user, defaults to 256 MB.\n     */\n    private static get MAX_BYTES() {\n        return Settings.get(Settings.SETTINGS_KEY.CACHE_SIZE) * 2 ** 20;\n    }\n\n    private static readonly IDB_NAME: string = 'PDFoundry';\n    private static readonly IDB_VERSION: number = 1;\n\n    private static readonly CACHE: string = `Cache`;\n    private static readonly META: string = `Meta`;\n\n    private static _cacheHelper: CacheHelper;\n    // </editor-fold>\n\n    public static async initialize() {\n        PDFCache._cacheHelper = await CacheHelper.createAndOpen(PDFCache.IDB_NAME, [PDFCache.CACHE, PDFCache.META], PDFCache.IDB_VERSION);\n    }\n\n    /**\n     * Get meta information about a provided key (url).\n     * @param key\n     */\n    public static async getMeta(key: string): Promise<CacheData | null> {\n        try {\n            return await PDFCache._cacheHelper.get(key, PDFCache.META);\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * Set meta information about a provided key (url). See {@link CacheData}.\n     * @param key\n     * @param meta\n     */\n    public static async setMeta(key: string, meta: CacheData): Promise<void> {\n        await PDFCache._cacheHelper.set(key, meta, PDFCache.META, true);\n    }\n\n    /**\n     * Get the byte array representing the key (url) from the user's cache.\n     * @param key\n     */\n    public static async getCache(key: string): Promise<Uint8Array | null> {\n        try {\n            const bytes = await PDFCache._cacheHelper.get(key, PDFCache.CACHE);\n            const meta: CacheData = {\n                dateAccessed: new Date().toISOString(),\n                size: bytes.length,\n            };\n            await PDFCache.setMeta(key, meta);\n\n            return bytes;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * Set the value of the cache for the specific key (url) to the provided byte array.\n     * @param key\n     * @param bytes\n     */\n    public static async setCache(key: string, bytes: Uint8Array) {\n        const meta: CacheData = {\n            dateAccessed: new Date().toISOString(),\n            size: bytes.length,\n        };\n\n        await PDFCache._cacheHelper.set(key, bytes, PDFCache.CACHE, true);\n        await PDFCache.setMeta(key, meta);\n        await this.prune();\n    }\n\n    /**\n     * Preload the PDF at the specified key (url), caching it immediately.\n     * @param key\n     */\n    public static preload(key: string): Promise<void> {\n        return new Promise<void>(async (resolve, reject) => {\n            const cachedBytes = await PDFCache.getCache(key);\n            if (cachedBytes !== null && cachedBytes.byteLength > 0) {\n                resolve();\n                return;\n            }\n\n            const response = await fetch(key);\n            if (response.ok) {\n                const fetchedBytes = new Uint8Array(await response.arrayBuffer());\n                if (fetchedBytes.byteLength > 0) {\n                    await PDFCache.setCache(key, fetchedBytes);\n                    resolve();\n                    return;\n                } else {\n                    reject('Fetch failed.');\n                }\n            } else {\n                reject('Fetch failed.');\n            }\n        });\n    }\n\n    /**\n     * Prune the active user's cache until it is below the user's cache size limit.\n     */\n    public static async prune() {\n        const keys = await this._cacheHelper.keys(PDFCache.META);\n\n        let totalBytes = 0;\n        let metas: any[] = [];\n        for (const key of keys) {\n            const meta = await this._cacheHelper.get(key, PDFCache.META);\n            meta.dateAccessed = Date.parse(meta.dateAccessed);\n            meta.size = parseInt(meta.size);\n\n            totalBytes += meta.size;\n\n            metas.push({\n                key,\n                meta,\n            });\n        }\n\n        metas = metas.sort((a, b) => {\n            return a.meta.dateAccessed - b.meta.dateAccessed;\n        });\n\n        for (let i = 0; i < metas.length; i++) {\n            if (totalBytes < PDFCache.MAX_BYTES) {\n                break;\n            }\n\n            const next = metas[i];\n\n            await this._cacheHelper.del(next.key, PDFCache.META);\n            await this._cacheHelper.del(next.key, PDFCache.CACHE);\n\n            totalBytes -= next.meta.size;\n        }\n    }\n\n    /**\n     * Clear the PDF cache\n     */\n    public static async clear() {\n        const keys = await this._cacheHelper.keys(PDFCache.META);\n\n        for (const key of keys) {\n            await this._cacheHelper.del(key, PDFCache.META);\n            await this._cacheHelper.del(key, PDFCache.CACHE);\n        }\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Chat command processor\n * @internal\n */\nexport default abstract class ChatCommand {\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get CommandPrefix() {\n        return `/pdfoundry`;\n    }\n\n    public abstract get CommandName(): string;\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    /**\n     * Execute the command, returning true if the command completes successfully\n     * @param content\n     */\n    public execute(content: string): boolean {\n        const realArgs = content.split(' ');\n        if (realArgs[0] !== this.CommandPrefix) {\n            return false;\n        }\n\n        if (realArgs[1] !== this.CommandName) {\n            return false;\n        }\n\n        // pop first two args\n        realArgs.shift();\n        realArgs.shift();\n\n        this.run(realArgs)\n            .then(() => {\n                let message = game.i18n.localize('PDFOUNDRY.COMMANDS.Success');\n                message = message.replace('$COMMAND_NAME$', this.CommandName);\n                ui.notifications.info(message);\n            })\n            .catch((error) => {\n                let message = game.i18n.localize('PDFOUNDRY.COMMANDS.Failure');\n                message = message.replace('$COMMAND_NAME$', this.CommandName);\n                ui.notifications.error(message);\n                console.error(error);\n            });\n        return true;\n    }\n\n    /**\n     * Run the command\n     * @param args\n     * @protected\n     */\n    protected abstract run(args: string[]): Promise<void>;\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getPDFData, setPDFData } from '../Util';\nimport { PDFType } from '../common/types/PDFType';\nimport ChatCommand from './ChatCommand';\n\n/**\n * Fixes missing types\n * @internal\n */\nexport default class FixMissingTypes extends ChatCommand {\n    // <editor-fold desc=\"Getters & Setters\">\n\n    get CommandName(): string {\n        return 'fix-missing-types';\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected async run(args: string[]): Promise<void> {\n        let fixedPDFs = 0;\n        const journals = game.journal.filter((je: JournalEntry) => getPDFData(je) !== undefined && getPDFData(je)?.type === undefined) as JournalEntry[];\n        for (const journalEntry of journals) {\n            await setPDFData(journalEntry, {\n                type: PDFType.Static,\n            });\n            fixedPDFs += 1;\n        }\n\n        // @ts-ignore\n        ui.journal.render();\n\n        if (fixedPDFs > 0) {\n            ui.notifications.info(game.i18n.localize('PDFOUNDRY.COMMANDS.FixMissingTypesSuccess'));\n        } else {\n            ui.notifications.info(game.i18n.localize('PDFOUNDRY.COMMANDS.FixMissingTypesFailure'));\n        }\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ChatCommand from './ChatCommand';\nimport PDFCache from '../cache/PDFCache';\n\n/**\n * @internal\n */\nexport default class PurgeCache extends ChatCommand {\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get CommandName(): string {\n        return 'purge-cache';\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected async run(args: string[]): Promise<void> {\n        await PDFCache.clear();\n\n        ui.notifications.info(game.i18n.localize('PDFOUNDRY.COMMANDS.PurgeCacheSuccess'));\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The domain white list includes domains that are allowed other than 'localhost' or\n *  the equivalent domain the user is running the server on.\n */\nexport const DOMAIN_WHITELIST = ['amazonaws.com', 'digitaloceanspaces.com', 'assets.forge-vtt.com', 'wasabisys.com', 'backblazeb2.com'];\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Api from '../../Api';\nimport Settings from '../../Settings';\n\n/**\n * @internal\n */\nexport default class EventStore<TKeys extends string = string> {\n    private readonly _map: Map<string, Function[]>;\n\n    public constructor() {\n        this._map = new Map<string, Function[]>();\n    }\n\n    /**\n     * Turn on an event callback for the specified event.\n     * @param eventName\n     * @param callback\n     */\n    public on(eventName: TKeys, callback: Function) {\n        if (!this._map.has(eventName)) {\n            this._map.set(eventName, []);\n        }\n\n        const callbacks = this._map.get(eventName) as Function[];\n        for (let i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] === callback) return;\n        }\n        callbacks.push(callback);\n    }\n\n    /**\n     * Like {@see on} but only fires once.\n     * @param eventName\n     * @param callback\n     */\n    public once(eventName: TKeys, callback: Function) {\n        const that = this;\n        const wrapper = function (...args) {\n            callback(args);\n            that.off(eventName, wrapper);\n        };\n        that.on(eventName, wrapper);\n    }\n\n    /**\n     * Turn off an event callback for the specified event.\n     * @param eventName\n     * @param callback\n     */\n    public off(eventName: TKeys, callback: Function) {\n        if (!this._map.has(eventName)) {\n            this._map.set(eventName, []);\n        }\n\n        const callbacks = this._map.get(eventName) as Function[];\n        for (let i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] === callback) {\n                callbacks.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Fire an event and forward the args to all handlers\n     * @param eventName\n     * @param args\n     */\n    public fire(eventName: TKeys, ...args) {\n        if (Api.DEBUG.EVENTS) {\n            console.debug(`${Settings.MODULE_NAME.toUpperCase()}::${eventName}`);\n            console.debug(args);\n        }\n\n        if (!this._map.has(eventName)) {\n            return;\n        }\n\n        const callbacks = this._map.get(eventName) as Function[];\n        for (const callback of callbacks) {\n            callback(...args);\n        }\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Api from '../../Api';\n\n/**\n * Github link header button.\n * @internal\n */\nexport const BUTTON_GITHUB = {\n    class: 'pdf-sheet-github',\n    icon: 'fas fa-external-link-alt',\n    label: 'PDFoundry',\n    onclick: () => window.open('https://github.com/Djphoenix719/PDFoundry', '_blank'),\n};\n\n/**\n * Manual link header button.\n * @internal\n */\nexport const BUTTON_HELP = {\n    class: 'pdf-sheet-manual',\n    icon: 'fas fa-question-circle',\n    label: 'Help',\n    onclick: () => Api.showHelp(),\n};\n\n/**\n * Shameless shill link\n * @internal\n */\nexport const BUTTON_KOFI = {\n    class: 'pdf-sheet-kofi',\n    icon: 'fas fa-coffee',\n    label: '',\n    onclick: () => window.open('https://ko-fi.com/djsmods', '_blank'),\n};\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The type of PDF file, as specified by the user.\n * @module API\n */\nexport enum PDFType {\n    /**\n     * Static PDFs contain no form fillable elements.\n     */\n    Static = 'static',\n    /**\n     * Fillable PDFs are not linked to actor sheets, but do contain form fillable elements.\n     */\n    Fillable = 'fillable',\n    /**\n     * Actor-linked PDFs store their data on the actor, so they can represent actors.\n     */\n    Actor = 'actor',\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Api from '../Api';\n\n/**\n * @private\n * Enriches TinyMCE editor content\n */\nexport default class HTMLEnricher {\n    public static patchEnrich() {\n        const oldEnrich = TextEditor.enrichHTML;\n\n        // @ts-ignore\n        TextEditor.enrichHTML = function (html: string, options: any) {\n            html = oldEnrich.apply(this, [html, options]);\n            html = HTMLEnricher.enrichAll(html);\n            return html;\n        };\n    }\n\n    public static bindRichTextLinks(html: JQuery) {\n        html.find('a.pdfoundry-link').on('click', (event) => {\n            event.preventDefault();\n\n            // This will always be an anchor\n            const target = $(event.currentTarget as HTMLAnchorElement);\n            const ref = target.data('ref') as string;\n            const page = target.data('page') as number;\n\n            // ref can match name or code\n            let pdfData = Api.findPDFData((data) => {\n                return data.name === ref || data.code === ref;\n            });\n\n            if (!pdfData) {\n                ui.notifications.error(`Unable to find a PDF with a name or code matching ${ref}.`);\n                return;\n            }\n\n            if (page === 0) {\n                Api.openPDF(pdfData);\n            } else {\n                Api.openPDF(pdfData, {\n                    page,\n                });\n            }\n        });\n    }\n\n    /**\n     * Replace the first @PDF link in the text with a rich link.\n     * @param text\n     */\n    public static enrich(text: string): string {\n        const sPos = text.indexOf('@');\n        const ePos = text.indexOf('}', sPos);\n\n        const enrichMe = text.slice(sPos, ePos + 1);\n\n        const lBracket = enrichMe.indexOf('[');\n        const rBracket = enrichMe.indexOf(']');\n        const lCurly = enrichMe.indexOf('{');\n        const rCurly = enrichMe.indexOf('}');\n\n        // Required character is missing\n        if (lBracket === -1 || rBracket === -1 || lCurly === -1 || rCurly === -1) {\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\n        }\n        // Order is not correct\n        if (rCurly < lCurly || lCurly < rBracket || rBracket < lBracket) {\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\n        }\n\n        const options = enrichMe.slice(lBracket + 1, rBracket);\n        // Multiple dividers are not supported\n        if (options.indexOf('|') !== options.lastIndexOf('|')) {\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\n        }\n\n        let linkText = enrichMe.slice(lCurly + 1, rCurly);\n        // Empty names are not supported\n        if (linkText === undefined || linkText === '') {\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.EmptyLinkText'));\n        }\n\n        let pageNumber = 0;\n        const [nameOrCode, queryString] = options.split('|');\n\n        // Getting the PDF without invisible PDFs to check permissions\n        let pdfData = Api.findPDFData((data) => {\n            return data.name === nameOrCode || data.code === nameOrCode;\n        }, false);\n\n        if (pdfData) {\n            // Case 1 - User has permissions to see the PDF\n            if (queryString !== undefined && queryString !== '') {\n                const [_, pageString] = queryString.split('=');\n                try {\n                    pageNumber = parseInt(pageString);\n                } catch (error) {\n                    // Ignore page number\n                }\n            }\n\n            if (pageNumber < 0) {\n                throw new Error('PDFOUNDRY.ERROR.PageMustBePositive');\n            }\n\n            const i18nOpen = game.i18n.localize('PDFOUNDRY.ENRICH.LinkTitleOpen');\n            const i18nPage = game.i18n.localize('PDFOUNDRY.ENRICH.LinkTitlePage');\n            const linkTitle = `${i18nOpen} ${nameOrCode} ${i18nPage} ${pageNumber}`;\n            const result = `<a class=\"pdfoundry-link\" title=\"${linkTitle}\" data-ref=\"${nameOrCode}\" data-page=\"${pageNumber}\">${linkText}</a>`;\n\n            return text.slice(0, sPos) + result + text.slice(ePos + 1);\n        } else {\n            // Case 2 - User does not have permissions to see the PDF\n            return text.slice(0, sPos) + linkText + text.slice(ePos + 1);\n        }\n    }\n\n    /**\n     * Replace all rich text markup with appropriate rich text HTML in the specified text.\n     * @param text\n     */\n    public static enrichAll(text: string): string {\n        while (text.includes('@PDF')) {\n            text = HTMLEnricher.enrich(text);\n        }\n\n        return text;\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getPDFData, isEntityPDF } from '../Util';\n\n/**\n * @private\n * A plugin for TinyMCE that handles Drag + Drop\n */\nexport default class TinyMCEPlugin {\n    private static pluginName = 'PDFoundry_HTMLEnrich_Drop';\n\n    /**\n     * Register plugin with Foundry + TinyMCE\n     */\n    public static Register() {\n        // @ts-ignore\n        tinyMCE.PluginManager.add(TinyMCEPlugin.pluginName, function (editor) {\n            editor.on('BeforeSetContent', (event) => TinyMCEPlugin.Handle(event));\n        });\n        CONFIG.TinyMCE.plugins = `${TinyMCEPlugin.pluginName} ${CONFIG.TinyMCE.plugins}`;\n    }\n\n    private static Handle(event: any) {\n        if (event.initial) return;\n        if (!event.selection || event.set !== undefined) {\n            return;\n        }\n\n        const initialContent = event.content;\n\n        const lBracket = initialContent.indexOf('[');\n        const rBracket = initialContent.indexOf(']');\n        const entityId = initialContent.slice(lBracket + 1, rBracket);\n\n        const entity = game.journal.get(entityId);\n        if (entity === undefined || !isEntityPDF(entity)) {\n            return;\n        }\n\n        const pdfData = getPDFData(entity);\n        if (pdfData === undefined) {\n            return;\n        }\n\n        const codeOrName = pdfData.code ? pdfData.code : pdfData.name;\n\n        event.content = `@PDF[${codeOrName}|page=1]{${pdfData.name}}`;\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PDFData } from '../common/types/PDFData';\nimport { PDFType } from '../common/types/PDFType';\nimport { setPDFData } from '../Util';\nimport Settings from '../Settings';\n\n/**\n * Should this migration run\n * @internal\n */\nexport function legacyMigrationRequired(): boolean {\n    if (Settings.get(Settings.SETTINGS_KEY.DATA_VERSION) === 'undefined') {\n        if (game.items.find((i: Item) => i.data.type === 'PDFoundry_PDF') !== null) {\n            return true;\n        } else {\n            Settings.set(Settings.SETTINGS_KEY.DATA_VERSION, 'v0.6.0');\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n/**\n * Open the migration window for migration\n * @internal\n */\nexport function migrateLegacy(): Promise<void> {\n    return new Promise<void>(async (resolve, reject) => {\n        let d = new Dialog({\n            title: 'PDFoundry: Migration Required',\n            content: [\n                '<h1>Migration Required</h1>',\n                '<p>PDFoundry must convert legacy items to the new Journal format; You will not be able to use PDFoundry until you do.</p>',\n                '<p>If you wish to backup your world - just in case - you may do so now.</p>',\n                '<p>Please note folder structure will not be preserved.</p>',\n            ].join(''),\n            buttons: {\n                proceed: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: 'Migrate Now',\n                    callback: () => {\n                        convert()\n                            .then(() => resolve())\n                            .catch(() => reject());\n                    },\n                },\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Remind Me Later',\n                    callback: () => resolve(),\n                },\n            },\n            default: 'cancel',\n        });\n        d.render(true);\n    });\n}\n\n/**\n * Run the conversion\n * @internal\n */\nasync function convert() {\n    const items = game.items.filter((i: Item) => i.data.type === 'PDFoundry_PDF') as Item[];\n    for (const item of items) {\n        let pdfData = getLegacyData(item);\n        // @ts-ignore\n        const permission = item.data.permission;\n        const journalEntry = (await JournalEntry.create({\n            name: pdfData.name,\n            permission,\n        })) as JournalEntry;\n        // @ts-ignore\n        delete pdfData.name;\n\n        await setPDFData(journalEntry, pdfData);\n        await item.delete({});\n    }\n\n    // @ts-ignore\n    ui.journal.render();\n}\n\n/**\n * Get legacy PDF data & type\n * @param item\n * @internal\n */\nfunction getLegacyData(item: Item): PDFData {\n    const typeMap = {\n        PDFoundry_PDF: PDFType.Static,\n        PDFoundry_FillablePDF: PDFType.Fillable,\n        PDFoundry_FillableActor: PDFType.Actor,\n    };\n    // @ts-ignore\n    let type = typeMap[item.data.data.pdf_type] ?? PDFType.Static;\n    return {\n        name: item.data.name,\n        // @ts-ignore\n        url: item.data.data.url,\n        // @ts-ignore\n        code: item.data.data.code,\n        // @ts-ignore\n        offset: item.data.data.offset,\n        // @ts-ignore\n        cache: item.data.data.cache,\n        type,\n    };\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport PreloadEvent from './events/PreloadEvent';\nimport StaticViewer from '../viewer/StaticViewer';\nimport Api from '../Api';\nimport Settings from '../Settings';\nimport SetViewEvent from './events/SetViewEvent';\nimport PDFCache from '../cache/PDFCache';\n\n/**\n * @private\n */\nexport class Socket {\n    public static initialize() {\n        // @ts-ignore TODO\n        game.socket.on(Settings.SOCKET_NAME, (event) => {\n            try {\n                const { userIds, type, payload } = event;\n                // null = all users, otherwise check if this event effects us\n                if (userIds !== null && !userIds.includes(game.userId)) {\n                    return;\n                }\n\n                if (type === SetViewEvent.EVENT_TYPE) {\n                    Socket.handleSetView(payload);\n                    return;\n                } else if (type === PreloadEvent.EVENT_TYPE) {\n                    Socket.handlePreloadPDF(payload);\n                    return;\n                } else {\n                    if (type.includes('PDFOUNDRY')) {\n                        console.error(`Event of type ${type} has no handler.`);\n                        return;\n                    }\n                }\n            } catch (e) {\n                // Pass\n            }\n        });\n    }\n\n    public static handleSetView(data: any) {\n        if (Settings.get(Settings.SETTINGS_KEY.EXISTING_VIEWER)) {\n            function appIsViewer(app: Application): app is StaticViewer {\n                return app['pdfData'] !== undefined;\n            }\n\n            for (const app of Object.values(ui.windows)) {\n                if (!appIsViewer(app)) {\n                    continue;\n                }\n\n                const pdfData = app.pdfData;\n                if (data.pdfData.url === pdfData.url) {\n                    app.page = data.page;\n                    return;\n                }\n            }\n            // App not found, fall through.\n        }\n        Api.openPDF(data.pdfData, {\n            page: data.page,\n        });\n    }\n\n    public static handlePreloadPDF(data: any) {\n        PDFCache.preload(data.url);\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SocketEvent from './SocketEvent';\n\n/**\n * @private\n */\nexport default class PreloadEvent extends SocketEvent {\n    public static get EVENT_TYPE() {\n        return `${super.EVENT_TYPE}/PRELOAD_PDF`;\n    }\n\n    get type() {\n        return PreloadEvent.EVENT_TYPE;\n    }\n\n    public url: string;\n\n    constructor(userIds: string[] | null, url: string) {\n        super(userIds);\n\n        this.url = url;\n    }\n\n    protected getPayload(): any {\n        const payload = super.getPayload();\n        payload.url = this.url;\n        return payload;\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SocketEvent from './SocketEvent';\nimport { PDFData } from '../../common/types/PDFData';\n\n/**\n * @private\n */\nexport default class SetViewEvent extends SocketEvent {\n    public static get EVENT_TYPE() {\n        return `${super.EVENT_TYPE}/SET_VIEW`;\n    }\n\n    get type() {\n        return SetViewEvent.EVENT_TYPE;\n    }\n\n    public page: number;\n    public pdfData: PDFData;\n\n    constructor(userIds: string[] | null, pdfData: PDFData, page: number) {\n        super(userIds);\n\n        this.pdfData = pdfData;\n        this.page = page;\n    }\n\n    protected getPayload() {\n        const payload = super.getPayload();\n        payload.pdfData = this.pdfData;\n        payload.page = this.page;\n        return payload;\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../../Settings';\n\n/**\n * @private\n */\nexport default abstract class SocketEvent {\n    /**\n     * The type of this event.\n     */\n    public static get EVENT_TYPE() {\n        return 'PDFOUNDRY';\n    }\n\n    /**\n     * The type of this event.\n     */\n    public abstract get type();\n\n    /**\n     * The user ids that should handle this event.\n     */\n    protected userIds: string[] | null;\n\n    protected constructor(userIds: string[] | null) {\n        this.userIds = userIds;\n    }\n\n    /**\n     * Get any data that will be sent with the event.\n     */\n    protected getPayload(): any {\n        return {};\n    }\n\n    public emit() {\n        // @ts-ignore TODO\n        game.socket.emit(Settings.SOCKET_NAME, {\n            type: this.type,\n            userIds: this.userIds,\n            payload: this.getPayload(),\n        });\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport ActorSheetSelect from '../app/ActorSheetSelect';\nimport { getAbsoluteURL, getPDFData } from '../Util';\nimport PDFActorSheetAdapter from '../app/PDFActorSheetAdapter';\nimport FillableViewer from './FillableViewer';\nimport { PDFData } from '../common/types/PDFData';\nimport PDFActorDataBrowser from '../app/PDFActorDataBrowser';\n\n/**\n * The FillableViewer class provides an interface for displaying, serializing, and observing form-fillable PDFs,\n *  all while connecting their data to a specific actor. Extends the Fillable Viewer.\n * @module API\n */\nexport default class ActorViewer extends FillableViewer {\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\n\n    // <editor-fold desc=\"Properties\">\n    protected document: Actor;\n    protected actorSheet: PDFActorSheetAdapter;\n    // </editor-fold>\n\n    // <editor-fold desc=\"Constructor & Initialization\">\n    constructor(actor: Actor, pdfData: PDFData, sheet: PDFActorSheetAdapter, options?: Application.Options) {\n        super(actor, pdfData, options);\n\n        this.document = actor;\n        this.actorSheet = sheet;\n    }\n    // </editor-fold>\n\n    // <editor-fold desc=\"Getters & Setters\">\n\n    get title(): string {\n        return this.document.name;\n    }\n\n    /**\n     * Get the URL for the current sheet from the actor flags.\n     */\n    public getSheetId(): string | undefined {\n        return this.document.getFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.SHEET_ID);\n    }\n\n    /**\n     * Save the URL for the current sheet to the actor flags.\n     * @param value\n     */\n    public async setSheetId(value: string | undefined) {\n        if (typeof value === 'string') {\n            return this.document.setFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.SHEET_ID, value);\n        } else {\n            return this.document.unsetFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.SHEET_ID);\n        }\n    }\n\n    /**\n     * Get pdf data for the currently set PDF sheet id\n     */\n    public getSheetPdf(): PDFData | undefined {\n        const id = this.getSheetId();\n        if (id === undefined) return undefined;\n\n        return getPDFData(game.journal.get(id));\n    }\n\n    protected _getHeaderButtons(): any[] {\n        const buttons: any[] = [];\n\n        buttons.unshift({\n            label: 'Close',\n            class: 'close',\n            icon: 'fas fa-times',\n            // actor sheet is responsible for our clean up\n            onclick: (ev) => this.actorSheet.close(),\n        });\n\n        // @ts-ignore\n        const canConfigure = game.user.isGM || (this.document.owner && game.user.can('TOKEN_CONFIGURE'));\n        if (this.options['editable'] && canConfigure) {\n            buttons.unshift({\n                // @ts-ignore TODO 0.8.x\n                label: this.token ? 'Token' : 'Prototype Token',\n                class: 'configure-token',\n                icon: 'fas fa-user-circle',\n                // @ts-ignore TODO 0.8.x\n                onclick: (ev) => this.actorSheet._onConfigureToken(ev),\n            });\n\n            buttons.unshift({\n                label: 'Sheet',\n                class: 'configure-sheet',\n                icon: 'fas fa-cog',\n                // @ts-ignore TODO 0.8.x\n                onclick: (ev) => this.actorSheet._onConfigureSheet(ev),\n            });\n\n            buttons.unshift({\n                class: 'pdf-sheet-select',\n                icon: 'fas fa-user-cog',\n                label: game.i18n.localize('PDFOUNDRY.VIEWER.SelectSheet'),\n                onclick: () => {\n                    const current = this.getSheetId();\n                    new ActorSheetSelect(async (id) => {\n                        await this.setSheetId(id);\n                        await this.actorSheet.close();\n                        const sheet = this.getSheetPdf();\n\n                        if (!sheet) {\n                            await this.setSheetId(undefined);\n                        }\n\n                        await this.actorSheet.render(true);\n                    }, current).render(true);\n                },\n            });\n\n            if (game.user.isGM) {\n                buttons.unshift({\n                    class: 'pdf-browse-data',\n                    icon: 'fas fa-search',\n                    label: game.i18n.localize('PDFOUNDRY.VIEWER.InspectData'),\n                    onclick: () => {\n                        new PDFActorDataBrowser(this.document).render(true);\n                    },\n                });\n            }\n        }\n\n        return buttons;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected async onViewerReady(): Promise<void> {\n        super.onViewerReady();\n        const sheet = this.getSheetPdf();\n        if (sheet) {\n            const url = getAbsoluteURL(sheet.url);\n            await this.open(url);\n        }\n    }\n\n    async open(pdfSource: string | Uint8Array, page?: number): Promise<void> {\n        if (pdfSource instanceof Uint8Array) {\n            throw new Error('Actor Sheets must be opened by ID');\n        }\n\n        try {\n            await super.open(pdfSource, page);\n        } catch (error) {\n            // @ts-ignore TODO: THIS IS SUPER FUCKING HACK AND THE WHOLE FLOW NEEDS TO BE ANALYZED\n            if (!(await srcExists(pdfSource))) {\n                ui.notifications.error(game.i18n.localize('PDFOUNDRY.ERROR.FileNotFound'));\n                await this.setSheetId(undefined);\n            }\n\n            await this.actorSheet.close();\n            new PDFActorSheetAdapter(this.document, this.options).render(true);\n        }\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport EventStore from '../common/helpers/events';\nimport { PDFViewerEvent } from '../common/types/PDFHooks';\nimport { PDFjsViewer } from '../common/types/PDFjsViewer';\nimport { PDFjsEventBus } from '../common/types/PDFjsEventBus';\nimport { BUTTON_GITHUB, BUTTON_KOFI } from '../common/helpers/header';\nimport Api from '../Api';\nimport { getAbsoluteURL } from '../Util';\n\n/**\n * The base viewer class from which all other types of viewers inherit.\n * @see {@link StaticViewer}\n * @see {@link FillableViewer}\n * @see {@link ActorViewer}\n * @module API\n */\nexport default abstract class BaseViewer extends Application {\n    // <editor-fold desc=\"Static Properties\">\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = ['app', 'window-app', 'pdfoundry-viewer'];\n        options.template = `${Settings.PATH_TEMPLATES}/app/viewer/static.html`;\n        options.title = game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF');\n        options.width = 8.5 * 100 + 64;\n        options.height = 11 * 100 + 64;\n        options.resizable = true;\n        return options;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Properties\">\n\n    protected _frame: HTMLIFrameElement;\n    protected _viewer: PDFjsViewer;\n    protected _eventBus: PDFjsEventBus;\n    protected _eventStore: EventStore<PDFViewerEvent>;\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    protected constructor(options?: Application.Options) {\n        super(options);\n        this._eventStore = new EventStore<PDFViewerEvent>();\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    /**\n     * Finish the download and return the byte array for the file.\n     * @returns A promise that resolves to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array|Uint8Array}\n     *  of file bytes once that download is finished. You can pass this to a viewer to open it, or do something else with it.\n     */\n    public download(): Promise<Uint8Array> {\n        return new Promise<Uint8Array>(async (resolve) => {\n            const viewer = await this.getViewer();\n            let timeout;\n            const returnOrWait = () => {\n                if (viewer.downloadComplete) {\n                    resolve(viewer.pdfDocument.getData());\n                    return;\n                }\n\n                timeout = setTimeout(returnOrWait, 50);\n            };\n            returnOrWait();\n        });\n    }\n\n    /**\n     * Open a PDF\n     * @param pdfSource A URL or byte array to open.\n     * @param page The initial page to open to\n     */\n    public async open(pdfSource: string | Uint8Array, page?: number | string) {\n        const pdfjsViewer = await this.getViewer();\n\n        if (typeof page === 'string') {\n            page = parseInt(page);\n        }\n\n        if (page) {\n            pdfjsViewer.initialBookmark = `page=${page}`;\n        }\n\n        await pdfjsViewer.initializedPromise;\n        await pdfjsViewer.open(pdfSource);\n        await pdfjsViewer.pdfViewer.pagesPromise;\n\n        // See #19 - fixes other scroll modes not loading with initial bookmark\n        if (page && pdfjsViewer.page !== page) {\n            pdfjsViewer.page = page;\n        }\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Getters & Setters\">\n\n    /**\n     * Get the currently viewed page.\n     */\n    public get page() {\n        return this._viewer.page;\n    }\n\n    /**\n     * Set the currently viewed page.\n     * @param value\n     */\n    public set page(value: number) {\n        this._viewer.page = value;\n    }\n\n    /**\n     * Returns the localized name of the window title.\n     * @override\n     */\n    public get title(): string {\n        return game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF');\n    }\n\n    /**\n     * Wait for the internal PDFjs viewer to be ready and usable.\n     */\n    protected getViewer(): Promise<PDFjsViewer> {\n        if (this._viewer) {\n            return Promise.resolve(this._viewer);\n        }\n\n        return new Promise<any>((resolve) => {\n            let timeout;\n            const returnOrWait = () => {\n                // If our window has finished initializing...\n                if (this._frame) {\n                    // If PDFjs has finished initializing...\n                    if (this._frame.contentWindow && this._frame.contentWindow['PDFViewerApplication']) {\n                        const viewer = this._frame.contentWindow['PDFViewerApplication'];\n\n                        resolve(viewer);\n                        return;\n                    }\n                }\n\n                // If any ifs fall through, try again in a few ms\n                timeout = setTimeout(returnOrWait, 5);\n            };\n            returnOrWait();\n        });\n    }\n\n    /**\n     * Wait for the internal PDFjs eventBus to be ready and usable.\n     */\n    protected getEventBus(): Promise<PDFjsEventBus> {\n        if (this._eventBus) {\n            return Promise.resolve(this._eventBus);\n        }\n\n        return new Promise<any>((resolve) => {\n            this.getViewer().then((viewer) => {\n                let timeout;\n                const returnOrWait = () => {\n                    if (viewer.eventBus) {\n                        resolve(viewer.eventBus);\n                        return;\n                    }\n                    timeout = setTimeout(returnOrWait, 5);\n                };\n                returnOrWait();\n            });\n        });\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Foundry Overrides\">\n\n    protected _getHeaderButtons(): any[] {\n        const buttons = super._getHeaderButtons();\n        buttons.unshift(BUTTON_GITHUB);\n        buttons.unshift(BUTTON_KOFI);\n        return buttons;\n    }\n\n    /**\n     * @internal\n     */\n    public getData(options?: any): any | Promise<any> {\n        const data = super.getData(options);\n        data.viewerFramePath = `${Settings.PATH_PDFJS}/web/viewer.html`;\n        return data;\n    }\n\n    protected async activateListeners(html: JQuery): Promise<void> {\n        this.onViewerOpening();\n        super.activateListeners(html);\n\n        this._frame = html.parent().find('iframe.pdfViewer').get(0) as HTMLIFrameElement;\n        this.getViewer().then(async (viewer) => {\n            this._viewer = viewer;\n\n            const theme = Api.activeTheme;\n            const frameDocument = $(this._frame.contentDocument as Document);\n            const head = frameDocument.find('head');\n            head.append($(`<link href=\"${getAbsoluteURL(theme.filePath)}\" rel=\"stylesheet\" type=\"text/css\" media=\"all\">`));\n\n            this.onViewerOpened();\n\n            this.getEventBus().then((eventBus) => {\n                this._eventBus = eventBus;\n                this._eventBus.on('pagerendered', this.onPageRendered.bind(this));\n                this._eventBus.on('pagechanging', this.onPageChanging.bind(this));\n                this._eventBus.on('updateviewarea', this.onViewAreaUpdated.bind(this));\n                this._eventBus.on('scalechanging', this.onScaleChanging.bind(this));\n\n                this.onViewerReady();\n            });\n        });\n\n        // _getHeaderButtons does not permit title attributes used for tooltips...\n        $(html).parents().parents().find('.pdf-sheet-show-players').prop('title', game.i18n.localize('PDFOUNDRY.VIEWER.ShowToPlayersTitle'));\n    }\n\n    /**\n     * Close the application and un-register references to it within UI mappings\n     * This function returns a Promise which resolves once the window closing animation concludes\n     */\n    public async close(): Promise<void> {\n        this.onViewerClosing();\n\n        await super.close();\n\n        this.onViewerClosed();\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Events\">\n\n    /**\n     * Fires when the viewer window first starts opening\n     * @protected\n     */\n    protected onViewerOpening() {\n        this._eventStore.fire('viewerOpening', this);\n    }\n\n    /**\n     * Fires when the viewer window is fully opened, but not yet ready\n     * @protected\n     */\n    protected onViewerOpened() {\n        this._eventStore.fire('viewerOpened', this);\n    }\n\n    /**\n     * Fires when the viewer window is fully opened and is ready for use\n     * @protected\n     */\n    protected onViewerReady() {\n        this._eventStore.fire('viewerReady', this);\n    }\n\n    /**\n     * Fires when the viewer window first starts closing\n     * @protected\n     */\n    protected onViewerClosing() {\n        this._eventStore.fire('viewerClosing', this);\n    }\n\n    /**\n     * Fires when the viewer window is fully closed\n     * @protected\n     */\n    protected onViewerClosed() {\n        this._eventStore.fire('viewerClosed', this);\n    }\n\n    /**\n     * Occurs during scrolling when a page passes the breakpoint\n     * @param event\n     * @protected\n     */\n    protected onPageChanging(event) {\n        this._eventStore.fire('pageChanging', this, {\n            pageLabel: event.pageLabel,\n            pageNumber: event.pageNumber,\n        });\n    }\n\n    /**\n     * Occurs when a new page is loaded and rendered\n     * @param event\n     * @protected\n     */\n    protected onPageRendered(event) {\n        this._eventStore.fire('pageRendered', this, {\n            pageNumber: event.pageNumber,\n            pageLabel: event.source.pageLabel,\n            width: event.source.width,\n            height: event.source.height,\n            rotation: event.source.rotation,\n            scale: event.source.scale,\n            canvas: event.source.canvas,\n            div: event.source.div,\n            error: event.source.error,\n        });\n    }\n\n    /**\n     * Occurs when the zoom is changed or window scrolled\n     * @param event\n     * @protected\n     */\n    protected onViewAreaUpdated(event) {\n        this._eventStore.fire('viewAreaUpdated', this, {\n            top: event.location.top,\n            left: event.location.left,\n            pageNumber: event.location.pageNumber,\n            rotation: event.location.rotation,\n            scale: event.location.scale,\n        });\n    }\n\n    /**\n     * Occurs when the zoom is changed\n     * @param event\n     * @protected\n     */\n    protected onScaleChanging(event) {\n        this._eventStore.fire('scaleChanging', this, {\n            presetValue: event.presetValue,\n            scale: event.scale,\n        });\n    }\n\n    /**\n     * Register a callback to occur when an event fires. See individual events for descriptions and use {@link Api.DEBUG.EVENTS} to log and analyze events.\n     * @param eventName\n     * @param callback\n     * @category Events\n     */\n    public on(eventName: PDFViewerEvent, callback: Function): void {\n        this._eventStore.on(eventName, callback);\n    }\n\n    /**\n     * Deregister an event that has been registered with {@link on} or {@link once}.\n     * @param eventName\n     * @param callback\n     * @category Events\n     */\n    public off(eventName: PDFViewerEvent, callback: Function): void {\n        this._eventStore.off(eventName, callback);\n    }\n\n    /**\n     * Like {@link on} but only fires on the next occurrence.\n     * @param eventName\n     * @param callback\n     * @category Events\n     */\n    public once(eventName: PDFViewerEvent, callback: Function): void {\n        this._eventStore.once(eventName, callback);\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport BaseViewer from './BaseViewer';\nimport Settings from '../Settings';\nimport { PDFData } from '../common/types/PDFData';\n\n// TODO: Move to wrapped input model to standardize inputs.\n//  Current code is insane and has too much branching.\n//  Factory should be used to create the wrapped inputs.\n// /**\n//  * Wraps an input to standardize operations over various HTML elements.\n//  * @internal\n//  */\n// abstract class FormInput<TElement extends HTMLElement, TValue> {\n//     protected _element: TElement;\n//     protected _name: string;\n//     protected _value: TValue;\n//\n//     public static IsOfType(element: HTMLElement) {\n//         return false;\n//     }\n//\n//     /**\n//      * Return the HTML element for this input.\n//      */\n//     public get element() {\n//         return this._element;\n//     }\n//\n//     /**\n//      * Return the name of this input.\n//      */\n//     public get name() {\n//         return this._name;\n//     }\n//\n//     protected constructor(name: string, element: TElement, value: TValue) {\n//         this._name = name;\n//         this._element = element;\n//         this._value = value;\n//\n//         $(this._element).attr('name', this._name);\n//     }\n//\n//     /**\n//      * Get the value of this input.\n//      */\n//     public abstract get value();\n//\n//     /**\n//      * Set the value of this input.\n//      * @param newValue The value to set to.\n//      */\n//     public abstract set value(newValue: TValue);\n//\n//     public abstract onInputChanged(event: JQuery.ChangeEvent);\n// }\n//\n// class InputInput extends FormInput<HTMLInputElement, string> {\n//     public static IsOfType(element: HTMLElement): element is HTMLInputElement {\n//         return element.tagName === 'INPUT';\n//     }\n//\n//     onInputChanged(event: JQuery.ChangeEvent) {}\n//\n//     public get value() {\n//         return this._value;\n//     }\n//\n//     public set value(newValue: string) {\n//         this._value = newValue;\n//     }\n// }\n\n/**\n * Handles base form fillable support, can be used as a stand alone form fillable viewer.\n * @module API\n */\nexport default class FillableViewer extends BaseViewer {\n    // <editor-fold desc=\"Static Properties\">\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.template = `${Settings.PATH_TEMPLATES}/app/viewer/fillable.html`;\n        return options;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Static Methods\">\n\n    /**\n     * Validate the data path of the key.\n     * @param path\n     */\n    protected static dataPathValid(path: string): boolean {\n        return !path.includes('_id');\n    }\n\n    /**\n     * Fix keys by removing invalid characters\n     * @param key\n     */\n    protected static fixKey(key: string): string {\n        if (key.startsWith(`data.`)) {\n            return key;\n        }\n\n        key = key.trim();\n        return key.replace(/\\s/g, '_');\n    }\n\n    /**\n     * Resolve a key path to the proper flattened key\n     * @param key\n     */\n    protected static resolveKeyPath(key: string): string {\n        if (key === 'name') return key;\n        if (key.startsWith(`data.`)) {\n            return this.fixKey(key);\n        }\n\n        return `flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.FORM_DATA}.${this.fixKey(key)}`;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Properties\">\n\n    protected document: Entity;\n    protected pdfData: PDFData;\n    private container: JQuery;\n\n    // </editor-fold>\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    public constructor(entity: JournalEntry | Actor, pdfData: PDFData, options?: Application.Options) {\n        super(options);\n\n        this.document = entity;\n        this.pdfData = pdfData;\n\n        this.bindHooks();\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Getters & Setters\">\n\n    protected flattenEntity(): Record<string, string> {\n        const data = flattenObject({\n            name: this.document.name,\n            data: this.document.data.data,\n            flags: this.document.data.flags,\n        }) as Record<string, string>;\n\n        // Do not allow non-data keys to make it into the flat object\n        for (const key of Object.keys(data)) {\n            if (!FillableViewer.dataPathValid(key)) {\n                delete data[key];\n            }\n        }\n\n        return data;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected bindHooks(): void {\n        if (this.document.uuid.startsWith('Actor')) {\n            Hooks.on('updateActor', this.onUpdateEntity.bind(this));\n        } else if (this.document.uuid.startsWith('Item')) {\n            Hooks.on('updateItem', this.onUpdateEntity.bind(this));\n        }\n    }\n\n    protected unbindHooks(): void {\n        if (this.document.uuid.startsWith('Actor')) {\n            Hooks.off('updateActor', this.onUpdateEntity.bind(this));\n        } else if (this.document.uuid.startsWith('Item')) {\n            Hooks.off('updateItem', this.onUpdateEntity.bind(this));\n        }\n    }\n\n    protected elementIsCheckbox(element: HTMLElement): element is HTMLInputElement {\n        return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n    }\n\n    protected elementIsInput(element: HTMLElement): element is HTMLInputElement | HTMLTextAreaElement {\n        return (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') && element.getAttribute('type') !== 'radio';\n    }\n\n    protected elementIsSelect(element: HTMLElement): element is HTMLSelectElement {\n        return element.tagName === 'SELECT';\n    }\n\n    protected elementIsRadio(element: HTMLElement): element is HTMLInputElement {\n        return element.tagName === 'INPUT' && element.getAttribute('type') === 'radio';\n    }\n\n    protected onPageRendered(event) {\n        const POLL_INTERVAL = 5;\n        const MAX_POLL_TIME = 250;\n        const container = $(event.source.div);\n\n        new Promise<any>((resolve, reject) => {\n            let timeout;\n            let totalWait = 0;\n            let elements: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\n\n            const returnOrWait = () => {\n                elements = container.find('input, textarea, select') as JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\n\n                if (elements.length > 0) {\n                    clearTimeout(timeout);\n                    resolve(elements);\n                    return;\n                } else if (totalWait < MAX_POLL_TIME) {\n                    totalWait += POLL_INTERVAL;\n                    timeout = setTimeout(returnOrWait, POLL_INTERVAL);\n                } else {\n                    reject({\n                        message: 'Page did not render in the allowed time.',\n                        event,\n                    });\n                }\n            };\n            returnOrWait();\n        })\n            .then((elements: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n                if (this.container === undefined || this.container.length === 0) {\n                    this.container = $(container.parents().find('#viewerContainer'));\n                }\n\n                this.initializeInputs(elements);\n\n                elements.on('change', this.onInputChanged.bind(this));\n\n                super.onPageRendered(event);\n            })\n            .catch((reason) => console.error(reason));\n    }\n\n    protected onInputChanged(event) {\n        const element = event.currentTarget;\n        let value = '';\n\n        let key = $(element).attr('name');\n        if (key === undefined) {\n            return;\n        }\n\n        key = FillableViewer.resolveKeyPath(key);\n\n        if (!FillableViewer.dataPathValid(key)) {\n            return;\n        }\n\n        if (this.elementIsCheckbox(element)) {\n            value = this.getCheckInputValue($(element));\n        } else if (this.elementIsInput(element)) {\n            value = this.getTextInputValue($(element as HTMLInputElement | HTMLTextAreaElement));\n        } else if (this.elementIsSelect(element)) {\n            value = this.getTextInputValue($(element as HTMLSelectElement));\n        } else if (this.elementIsRadio(element)) {\n            value = this.getRadioInputValue($(element));\n        }\n\n        this.update(\n            this.resolveDelta(this.flattenEntity(), {\n                [key]: value,\n            }),\n        ).then((result) => {\n            const elementsToUpdate = this.container.find('input, textarea, select');\n            this.initializeInputs(elementsToUpdate);\n        });\n    }\n\n    protected initializeInputs(elements: JQuery) {\n        const oldData = this.flattenEntity();\n        const newData = duplicate(oldData);\n\n        // Load data from sheet as initialization data\n        // Fill in existing data where it exists on the actor\n        let write = false;\n        for (const element of elements) {\n            let key = element.getAttribute('name');\n            if (key === null || !FillableViewer.dataPathValid(key)) {\n                continue;\n            }\n\n            key = FillableViewer.resolveKeyPath(key);\n\n            if (this.elementIsCheckbox(element)) {\n                write = this.initializeCheckInput($(element), key, newData) || write;\n            } else if (this.elementIsInput(element)) {\n                write = this.initializeTextInput($(element), key, newData) || write;\n            } else if (this.elementIsSelect(element)) {\n                write = this.initializeTextInput($(element), key, newData) || write;\n            } else if (this.elementIsRadio(element)) {\n                write = this.initializeRadioInput($(element), key, newData) || write;\n            } else {\n                console.error('Unsupported input type in PDF.');\n            }\n        }\n\n        if (write) {\n            this.update(this.resolveDelta(oldData, newData));\n        }\n    }\n\n    protected resolveDelta(oldData: Record<string, any>, newData: Record<string, any>) {\n        // Flags must be fully resolved\n        const delta = { ...flattenObject({ flags: this.document.data.flags }) };\n        for (const [key, newValue] of Object.entries(newData)) {\n            const oldValue = oldData[key];\n\n            // Arrays dont make sense on PDFs which are not dynamic\n            if (Array.isArray(newValue) || Array.isArray(oldValue)) {\n                delete delta[key];\n                continue;\n            }\n\n            // Skip matching values\n            if (oldValue !== undefined && newValue === oldValue) {\n                continue;\n            }\n\n            delta[key] = newValue;\n        }\n\n        return delta;\n    }\n\n    public refreshTitle(): void {\n        $(this.element).find('.window-title').text(this.title);\n    }\n\n    protected onUpdateEntity(actor: Actor, data: Partial<Actor.Data> & { _id: string }, options: { diff: boolean }, id: string) {\n        if (data._id !== this.document.id) {\n            return;\n        }\n\n        const args = duplicate(data);\n        // @ts-ignore\n        delete args['_id'];\n\n        const elementsToUpdate = this.container.find('input, textarea, select');\n        this.initializeInputs(elementsToUpdate);\n        this.refreshTitle();\n    }\n\n    protected async update(delta: object) {\n        // data must be expanded to set properly\n        // TODO: Flags seem to be always set - delta needs checking\n        return this.document.update(expandObject(delta));\n    }\n\n    protected initializeTextInput(\n        input: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>,\n        key: string,\n        data: Record<string, string>,\n    ): boolean {\n        let value = data[key];\n        if (value === undefined) {\n            // If value does not exist on actor yet, load from sheet\n            const inputValue = input.val();\n\n            if (inputValue) {\n                // Actor changes were made\n                data[key] = inputValue.toString();\n                return true;\n            }\n        } else {\n            // Otherwise initialize input value to actor value\n            this.setTextInput(input, value);\n        }\n        return false;\n    }\n\n    protected initializeCheckInput(input: JQuery<HTMLInputElement>, key: string, data: Record<string, string>): boolean {\n        let value = data[key];\n        if (value === undefined) {\n            const inputValue = input.attr('checked') !== undefined;\n\n            // Actor changes were made\n            data[key] = inputValue.toString();\n            return true;\n        } else {\n            this.setCheckInput(input, value);\n        }\n        return false;\n    }\n\n    protected initializeRadioInput(input: JQuery<HTMLInputElement>, key: string, data: Record<string, string>): boolean {\n        let value = data[key];\n        if (value === undefined || value === '') {\n            data[key] = this.getRadioInputValue(input);\n            return true;\n        } else {\n            // if we're looking at the right radio for the group enable it\n            if (data[key] === input.attr('id')) {\n                this.setCheckInput(input, 'true');\n            } else {\n                this.setCheckInput(input, 'false');\n            }\n        }\n        return false;\n    }\n\n    protected setTextInput(input: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>, value: string) {\n        input.val(value);\n    }\n\n    protected setCheckInput(input: JQuery<HTMLInputElement>, value: string) {\n        if (value === 'true') {\n            input.attr('checked', 'true');\n        } else {\n            input.removeAttr('checked');\n        }\n    }\n\n    protected getTextInputValue(input: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>): string {\n        const value = input.val();\n        if (!value) {\n            return '';\n        }\n\n        return value.toString().trim();\n    }\n\n    protected getCheckInputValue(input: JQuery<HTMLInputElement>): string {\n        return (window.getComputedStyle(input.get(0), ':before').content !== 'none').toString();\n    }\n\n    protected getRadioInputValue(input: JQuery<HTMLInputElement>): string {\n        const name = input.attr('name');\n        const elements = $(this.container).find(`input[name=\"${name}\"]`) as JQuery<HTMLElement>;\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements.get(i);\n            if (window.getComputedStyle(element, ':before').content !== 'none') {\n                return element.id;\n            }\n        }\n        return '';\n    }\n\n    async close(): Promise<any> {\n        // await this.setActorData(this.actorData);\n        if (this._viewer) {\n            await this._viewer.close();\n        }\n\n        this.unbindHooks();\n\n        return super.close();\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PDFData } from '../common/types/PDFData';\nimport BaseViewer from './BaseViewer';\nimport PlayerSelect from '../app/PlayerSelect';\nimport { getUserIdsExceptMe } from '../Util';\nimport SetViewEvent from '../socket/events/SetViewEvent';\nimport { PDFType } from '../common/types/PDFType';\n\n/**\n * The PDFoundry StaticViewer class opens PDFs and provides event hooks for observing the viewer.\n * Static viewers display a PDF but do not render or instantiate any fillable fields or their data.\n *\n * You cannot create a new instance of this class, you must do so with the API.\n *\n * See {@link Api.openPDF}, {@link Api.openPDFByCode}, {@link Api.openPDFByName}, {@link Api.openURL}\n *  which all return a promise which resolve with an instance of this class.\n * @module API\n */\nexport default class StaticViewer extends BaseViewer {\n    // <editor-fold desc=\"Properties\">\n\n    protected _pdfData: PDFData;\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    constructor(pdfData?: PDFData, options?: Application.Options) {\n        super(options);\n\n        if (pdfData === undefined) {\n            pdfData = {\n                name: game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF'),\n                code: '',\n                offset: 0,\n                url: '',\n                type: PDFType.Static,\n                cache: false,\n            };\n        }\n\n        this._pdfData = pdfData;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Getters & Setters\">\n\n    /**\n     * Returns a copy of the PDFData this viewer is using.\n     * Changes to this data will not reflect in the viewer.\n     */\n    public get pdfData() {\n        return duplicate(this._pdfData);\n    }\n\n    public get title(): string {\n        let title = this._pdfData.name;\n        if (this._pdfData.code !== '') {\n            title = `${title} (${this._pdfData.code})`;\n        }\n        return title;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Foundry Overrides\">\n\n    protected _getHeaderButtons(): any[] {\n        const buttons = super._getHeaderButtons();\n\n        buttons.unshift({\n            class: 'pdf-sheet-show-players',\n            icon: 'fas fa-eye',\n            label: game.i18n.localize('PDFOUNDRY.VIEWER.ShowToPlayersText'),\n            onclick: (event) => this.showTo(event),\n        });\n\n        return buttons;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    /**\n     * Show the current page to GMs.\n     */\n    protected showTo(event: MouseEvent) {\n        const pdfData = this.pdfData;\n        pdfData.offset = 0;\n\n        const ids = getUserIdsExceptMe();\n        if (event.shiftKey) {\n            new SetViewEvent(ids, pdfData, this.page).emit();\n        } else {\n            new PlayerSelect(ids, (filteredIds) => {\n                new SetViewEvent(filteredIds, pdfData, this.page).emit();\n            }).render(true);\n        }\n    }\n    // </editor-fold>\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}